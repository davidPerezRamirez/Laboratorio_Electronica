

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 25 00:49:50 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	idataCOMRAM
    52  002018                     __pidataCOMRAM:
    53                           	opt stack 0
    54                           
    55                           ;initializer for _anio
    56  002018  000F               	dw	15
    57                           
    58                           ;initializer for _dia
    59  00201A  0008               	dw	8
    60                           
    61                           ;initializer for _diasem
    62  00201C  0003               	dw	3
    63                           
    64                           ;initializer for _hora
    65  00201E  0012               	dw	18
    66                           
    67                           ;initializer for _mes
    68  002020  0009               	dw	9
    69                           
    70                           ;initializer for _minuto
    71  002022  001E               	dw	30
    72                           
    73                           	psect	idataBANK0
    74  002024                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _password
    78  002024  31                 	db	49
    79  002025  32                 	db	50
    80  002026  33                 	db	51
    81  002027  34                 	db	52
    82  002028  35                 	db	53
    83  002029  36                 	db	54
    84                           
    85                           	psect	smallconst
    86  000F00                     __psmallconst:
    87                           	opt stack 0
    88  000F00  00                 	db	0
    89  000F01                     _dpowers:
    90                           	opt stack 0
    91  000F01  0001               	dw	1
    92  000F03  000A               	dw	10
    93  000F05  0064               	dw	100
    94  000F07  03E8               	dw	1000
    95  000F09  2710               	dw	10000
    96  000F0B                     __end_of_dpowers:
    97                           	opt stack 0
    98  000F0B                     _LCD_INIT_STRING:
    99                           	opt stack 0
   100  000F0B  28                 	db	40
   101  000F0C  0C                 	db	12
   102  000F0D  01                 	db	1
   103  000F0E  06                 	db	6
   104  000F0F                     __end_of_LCD_INIT_STRING:
   105                           	opt stack 0
   106  000F0F                     STR_10:
   107                           
   108                           ; BSR set to: 15
   109  000F0F  20                 	db	32
   110  000F10  20                 	db	32
   111  000F11  25                 	db	37
   112  000F12  30                 	db	48	;'0'
   113  000F13  32                 	db	50	;'2'
   114  000F14  75                 	db	117	;'u'
   115  000F15  3A                 	db	58	;':'
   116  000F16  25                 	db	37
   117  000F17  30                 	db	48	;'0'
   118  000F18  32                 	db	50	;'2'
   119  000F19  75                 	db	117	;'u'
   120  000F1A  3A                 	db	58	;':'
   121  000F1B  25                 	db	37
   122  000F1C  30                 	db	48	;'0'
   123  000F1D  32                 	db	50	;'2'
   124  000F1E  75                 	db	117	;'u'
   125  000F1F  00                 	db	0
   126  000F20                     STR_9:
   127                           
   128                           ; BSR set to: 15
   129  000F20  25                 	db	37
   130  000F21  30                 	db	48	;'0'
   131  000F22  32                 	db	50	;'2'
   132  000F23  75                 	db	117	;'u'
   133  000F24  2F                 	db	47
   134  000F25  25                 	db	37
   135  000F26  30                 	db	48	;'0'
   136  000F27  32                 	db	50	;'2'
   137  000F28  75                 	db	117	;'u'
   138  000F29  2F                 	db	47
   139  000F2A  25                 	db	37
   140  000F2B  30                 	db	48	;'0'
   141  000F2C  32                 	db	50	;'2'
   142  000F2D  75                 	db	117	;'u'
   143  000F2E  00                 	db	0
   144  000F2F                     STR_11:
   145                           
   146                           ; BSR set to: 15
   147  000F2F  49                 	db	73	;'I'
   148  000F30  6E                 	db	110	;'n'
   149  000F31  67                 	db	103	;'g'
   150  000F32  72                 	db	114	;'r'
   151  000F33  65                 	db	101	;'e'
   152  000F34  73                 	db	115	;'s'
   153  000F35  65                 	db	101	;'e'
   154  000F36  20                 	db	32
   155  000F37  70                 	db	112	;'p'
   156  000F38  61                 	db	97	;'a'
   157  000F39  73                 	db	115	;'s'
   158  000F3A  73                 	db	115	;'s'
   159  000F3B  3A                 	db	58	;':'
   160  000F3C  00                 	db	0
   161  000F3D                     STR_12:
   162                           
   163                           ; BSR set to: 15
   164  000F3D  45                 	db	69	;'E'
   165  000F3E  52                 	db	82	;'R'
   166  000F3F  52                 	db	82	;'R'
   167  000F40  4F                 	db	79	;'O'
   168  000F41  52                 	db	82	;'R'
   169  000F42  20                 	db	32
   170  000F43  70                 	db	112	;'p'
   171  000F44  61                 	db	97	;'a'
   172  000F45  73                 	db	115	;'s'
   173  000F46  73                 	db	115	;'s'
   174  000F47  00                 	db	0
   175  000F48                     STR_13:
   176                           
   177                           ; BSR set to: 15
   178  000F48  57                 	db	87	;'W'
   179  000F49  65                 	db	101	;'e'
   180  000F4A  6C                 	db	108	;'l'
   181  000F4B  63                 	db	99	;'c'
   182  000F4C  6F                 	db	111	;'o'
   183  000F4D  6D                 	db	109	;'m'
   184  000F4E  65                 	db	101	;'e'
   185  000F4F  20                 	db	32
   186  000F50  00                 	db	0
   187  000F51                     STR_1:
   188                           
   189                           ; BSR set to: 15
   190  000F51  25                 	db	37
   191  000F52  30                 	db	48	;'0'
   192  000F53  31                 	db	49	;'1'
   193  000F54  75                 	db	117	;'u'
   194  000F55  00                 	db	0
   195  000F56                     STR_7:
   196                           
   197                           ; BSR set to: 15
   198  000F56  23                 	db	35
   199  000F57  00                 	db	0
   200  000F58                     STR_2:
   201                           
   202                           ; BSR set to: 15
   203  000F58  2A                 	db	42
   204  000F59  00                 	db	0
   205  000F5A                     STR_3:
   206                           
   207                           ; BSR set to: 15
   208  000F5A  41                 	db	65	;'A'
   209  000F5B  00                 	db	0
   210  000F5C                     STR_4:
   211                           
   212                           ; BSR set to: 15
   213  000F5C  42                 	db	66	;'B'
   214  000F5D  00                 	db	0
   215  000F5E                     STR_5:
   216                           
   217                           ; BSR set to: 15
   218  000F5E  43                 	db	67	;'C'
   219  000F5F  00                 	db	0
   220  000F60                     STR_8:
   221                           
   222                           ; BSR set to: 15
   223  000F60  44                 	db	68	;'D'
   224  000F61  00                 	db	0
   225  0000                     
   226                           ; #config settings
   227  000F62  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	nvCOMRAM
   230  000059                     __pnvCOMRAM:
   231                           	opt stack 0
   232  000059                     _anio_d:
   233                           	opt stack 0
   234  000059                     	ds	1
   235  00005A                     _fecha_d:
   236                           	opt stack 0
   237  00005A                     	ds	1
   238  00005B                     _hora_d:
   239                           	opt stack 0
   240  00005B                     	ds	1
   241  00005C                     _mes_d:
   242                           	opt stack 0
   243  00005C                     	ds	1
   244  00005D                     _minuto_d:
   245                           	opt stack 0
   246  00005D                     	ds	1
   247  00005E                     _segundo_d:
   248                           	opt stack 0
   249  00005E                     	ds	1
   250                           
   251                           	psect	nvBANK0
   252  00009E                     __pnvBANK0:
   253                           	opt stack 0
   254  00009E                     _anio_u:
   255                           	opt stack 0
   256  00009E                     	ds	1
   257  00009F                     _dia_semana:
   258                           	opt stack 0
   259  00009F                     	ds	1
   260  0000A0                     _fecha_u:
   261                           	opt stack 0
   262  0000A0                     	ds	1
   263  0000A1                     _hora_u:
   264                           	opt stack 0
   265  0000A1                     	ds	1
   266  0000A2                     _mes_u:
   267                           	opt stack 0
   268  0000A2                     	ds	1
   269  0000A3                     _minuto_u:
   270                           	opt stack 0
   271  0000A3                     	ds	1
   272  0000A4                     _segundo_u:
   273                           	opt stack 0
   274  0000A4                     	ds	1
   275  0000                     _ANCON0	set	3912
   276  0000                     _ANCON1	set	3913
   277  0000                     _RTCCFG	set	3903
   278  0000                     _RTCCFGbits	set	3903
   279  0000                     _ADCON0	set	4034
   280  0000                     _ADCON1	set	4033
   281  0000                     _ALRMCFGbits	set	3985
   282  0000                     _EECON2	set	4007
   283  0000                     _INTCONbits	set	4082
   284  0000                     _LATAbits	set	3977
   285  0000                     _LATBbits	set	3978
   286  0000                     _OSCCONbits	set	4051
   287  0000                     _OSCTUNEbits	set	3995
   288  0000                     _PIE3bits	set	4003
   289  0000                     _PORTAbits	set	3968
   290  0000                     _PORTCbits	set	3970
   291  0000                     _RTCVALH	set	3993
   292  0000                     _RTCVALL	set	3992
   293  0000                     _T1CONbits	set	4045
   294  0000                     _TRISA	set	3986
   295  0000                     _TRISB	set	3987
   296  0000                     _TRISBbits	set	3987
   297  0000                     _TRISC	set	3988
   298                           
   299                           	psect	cinit
   300  001BBC                     __pcinit:
   301                           	opt stack 0
   302  001BBC                     start_initialization:
   303                           	opt stack 0
   304  001BBC                     __initialization:
   305                           	opt stack 0
   306                           
   307                           ; Clear objects allocated to BANK0 (62 bytes)
   308  001BBC  EE00  F060         	lfsr	0,__pbssBANK0
   309  001BC0  0E3E               	movlw	62
   310  001BC2                     clear_0:
   311  001BC2  6AEE               	clrf	postinc0,c
   312  001BC4  06E8               	decf	wreg,f,c
   313  001BC6  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   316  001BC8  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   317                           
   318                           ; Clear objects allocated to COMRAM (21 bytes)
   319  001BCA  EE00  F038         	lfsr	0,__pbssCOMRAM
   320  001BCE  0E15               	movlw	21
   321  001BD0                     clear_1:
   322  001BD0  6AEE               	clrf	postinc0,c
   323  001BD2  06E8               	decf	wreg,f,c
   324  001BD4  E1FD               	bnz	clear_1
   325                           
   326                           ; Initialize objects allocated to BANK0 (6 bytes)
   327                           ; load TBLPTR registers with __pidataBANK0
   328  001BD6  0E24               	movlw	low __pidataBANK0
   329  001BD8  6EF6               	movwf	tblptrl,c
   330  001BDA  0E20               	movlw	high __pidataBANK0
   331  001BDC  6EF7               	movwf	tblptrh,c
   332  001BDE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   333  001BE0  6EF8               	movwf	tblptru,c
   334  001BE2  EE00  F0A5         	lfsr	0,__pdataBANK0
   335  001BE6  EE10 F006          	lfsr	1,6
   336  001BEA                     copy_data0:
   337  001BEA  0009               	tblrd		*+
   338  001BEC  CFF5 FFEE          	movff	tablat,postinc0
   339  001BF0  50E5               	movf	postdec1,w,c
   340  001BF2  50E1               	movf	fsr1l,w,c
   341  001BF4  E1FA               	bnz	copy_data0
   342                           
   343                           ; Initialize objects allocated to COMRAM (12 bytes)
   344                           ; load TBLPTR registers with __pidataCOMRAM
   345  001BF6  0E18               	movlw	low __pidataCOMRAM
   346  001BF8  6EF6               	movwf	tblptrl,c
   347  001BFA  0E20               	movlw	high __pidataCOMRAM
   348  001BFC  6EF7               	movwf	tblptrh,c
   349  001BFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   350  001C00  6EF8               	movwf	tblptru,c
   351  001C02  EE00  F04D         	lfsr	0,__pdataCOMRAM
   352  001C06  EE10 F00C          	lfsr	1,12
   353  001C0A                     copy_data1:
   354  001C0A  0009               	tblrd		*+
   355  001C0C  CFF5 FFEE          	movff	tablat,postinc0
   356  001C10  50E5               	movf	postdec1,w,c
   357  001C12  50E1               	movf	fsr1l,w,c
   358  001C14  E1FA               	bnz	copy_data1
   359  001C16                     end_of_initialization:
   360                           	opt stack 0
   361  001C16                     __end_of__initialization:
   362                           	opt stack 0
   363  001C16  0E00               	movlw	low (__Lmediumconst shr (0+16))
   364  001C18  6EF8               	movwf	tblptru,c
   365  001C1A  0100               	movlb	0
   366  001C1C  EF80  F00F         	goto	_main	;jump to C main() function
   367                           tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           postdec1	equ	0xFE5
   374                           fsr1l	equ	0xFE1
   375                           
   376                           	psect	bitbssCOMRAM
   377  0002F8                     __pbitbssCOMRAM:
   378                           	opt stack 0
   379  0002F8                     _flag:
   380                           	opt stack 0
   381  0002F8                     	ds	1
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           postdec1	equ	0xFE5
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	bssCOMRAM
   392  000038                     __pbssCOMRAM:
   393                           	opt stack 0
   394  000038                     _autorizado:
   395                           	opt stack 0
   396  000038                     	ds	2
   397  00003A                     _i:
   398                           	opt stack 0
   399  00003A                     	ds	2
   400  00003C                     _j:
   401                           	opt stack 0
   402  00003C                     	ds	2
   403  00003E                     _ocultar_teclas:
   404                           	opt stack 0
   405  00003E                     	ds	2
   406  000040                     _segundo:
   407                           	opt stack 0
   408  000040                     	ds	2
   409  000042                     _tamanio_password:
   410                           	opt stack 0
   411  000042                     	ds	2
   412  000044                     _key:
   413                           	opt stack 0
   414  000044                     	ds	1
   415  000045                     _RtccDate:
   416                           	opt stack 0
   417  000045                     	ds	4
   418  000049                     _RtccTime:
   419                           	opt stack 0
   420  000049                     	ds	4
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           postdec1	equ	0xFE5
   428                           fsr1l	equ	0xFE1
   429                           
   430                           	psect	dataCOMRAM
   431  00004D                     __pdataCOMRAM:
   432                           	opt stack 0
   433  00004D                     _anio:
   434                           	opt stack 0
   435  00004D                     	ds	2
   436  00004F                     _dia:
   437                           	opt stack 0
   438  00004F                     	ds	2
   439  000051                     _diasem:
   440                           	opt stack 0
   441  000051                     	ds	2
   442  000053                     _hora:
   443                           	opt stack 0
   444  000053                     	ds	2
   445  000055                     _mes:
   446                           	opt stack 0
   447  000055                     	ds	2
   448  000057                     _minuto:
   449                           	opt stack 0
   450  000057                     	ds	2
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	bssBANK0
   461  000060                     __pbssBANK0:
   462                           	opt stack 0
   463  000060                     _RtccAlrmTimeDate:
   464                           	opt stack 0
   465  000060                     	ds	8
   466  000068                     _RtccTimeDate:
   467                           	opt stack 0
   468  000068                     	ds	8
   469  000070                     _Rtcc_read_TimeDate:
   470                           	opt stack 0
   471  000070                     	ds	8
   472  000078                     _current_password:
   473                           	opt stack 0
   474  000078                     	ds	6
   475  00007E                     _RtccTimeVal:
   476                           	opt stack 0
   477  00007E                     	ds	4
   478  000082                     _a:
   479                           	opt stack 0
   480  000082                     	ds	2
   481  000084                     _b:
   482                           	opt stack 0
   483  000084                     	ds	2
   484  000086                     _c:
   485                           	opt stack 0
   486  000086                     	ds	2
   487  000088                     _k:
   488                           	opt stack 0
   489  000088                     	ds	2
   490  00008A                     _buffer2:
   491                           	opt stack 0
   492  00008A                     	ds	20
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           postdec1	equ	0xFE5
   500                           fsr1l	equ	0xFE1
   501                           
   502                           	psect	dataBANK0
   503  0000A5                     __pdataBANK0:
   504                           	opt stack 0
   505  0000A5                     _password:
   506                           	opt stack 0
   507  0000A5                     	ds	6
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           postdec1	equ	0xFE5
   515                           fsr1l	equ	0xFE1
   516                           
   517                           	psect	cstackCOMRAM
   518  000001                     __pcstackCOMRAM:
   519                           	opt stack 0
   520  000001                     ??_isdigit:
   521  000001                     ??_guardar_current_password:
   522  000001                     ??_lcd_send_nibble:
   523  000001                     ?___wmul:
   524                           	opt stack 0
   525  000001                     ?___awdiv:
   526                           	opt stack 0
   527  000001                     ?___lwdiv:
   528                           	opt stack 0
   529  000001                     Delay100TCYx@unit:
   530                           	opt stack 0
   531  000001                     Delay1KTCYx@unit:
   532                           	opt stack 0
   533  000001                     RtccReadDate@pDt:
   534                           	opt stack 0
   535  000001                     RtccReadTime@pTm:
   536                           	opt stack 0
   537  000001                     RtccWriteDate@pDt:
   538                           	opt stack 0
   539  000001                     RtccWriteTime@pTm:
   540                           	opt stack 0
   541  000001                     ___wmul@multiplier:
   542                           	opt stack 0
   543  000001                     ___awdiv@dividend:
   544                           	opt stack 0
   545  000001                     ___lwdiv@dividend:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x0
   549  000001                     	ds	1
   550  000002                     lcd_send_nibble@nibble:
   551                           	opt stack 0
   552  000002                     _isdigit$2066:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x1
   556  000002                     	ds	1
   557  000003                     guardar_current_password@valor:
   558                           	opt stack 0
   559  000003                     lcd_send_byte@n:
   560                           	opt stack 0
   561  000003                     RtccWriteDate@di:
   562                           	opt stack 0
   563  000003                     RtccWriteTime@di:
   564                           	opt stack 0
   565  000003                     isdigit@c:
   566                           	opt stack 0
   567  000003                     validar_password@i:
   568                           	opt stack 0
   569  000003                     ___wmul@multiplicand:
   570                           	opt stack 0
   571  000003                     ___awdiv@divisor:
   572                           	opt stack 0
   573  000003                     ___lwdiv@divisor:
   574                           	opt stack 0
   575  000003                     RtccReadDate@rTD1:
   576                           	opt stack 0
   577  000003                     RtccReadTime@rTD1:
   578                           	opt stack 0
   579                           
   580                           ; 8 bytes @ 0x2
   581  000003                     	ds	1
   582  000004                     lcd_send_byte@address:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x3
   586  000004                     	ds	1
   587  000005                     lcd_init@i:
   588                           	opt stack 0
   589  000005                     lcd_gotoxy@y:
   590                           	opt stack 0
   591  000005                     lcd_comand@d:
   592                           	opt stack 0
   593  000005                     RtccWriteDate@wasOn:
   594                           	opt stack 0
   595  000005                     RtccWriteTime@wasOn:
   596                           	opt stack 0
   597  000005                     ___awdiv@counter:
   598                           	opt stack 0
   599  000005                     ___wmul@product:
   600                           	opt stack 0
   601  000005                     ___lwdiv@quotient:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x4
   605  000005                     	ds	1
   606  000006                     lcd_gotoxy@x:
   607                           	opt stack 0
   608  000006                     RtccWriteDate@wasAlrm:
   609                           	opt stack 0
   610  000006                     RtccWriteTime@wasAlrm:
   611                           	opt stack 0
   612  000006                     ___awdiv@sign:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x5
   616  000006                     	ds	1
   617  000007                     lcd_gotoxy@address:
   618                           	opt stack 0
   619  000007                     RtccWriteTime@wasWrEn:
   620                           	opt stack 0
   621  000007                     ___lwdiv@counter:
   622                           	opt stack 0
   623  000007                     RtccWriteDate@tempYear:
   624                           	opt stack 0
   625  000007                     ___awdiv@quotient:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x6
   629  000007                     	ds	1
   630  000008                     ?___lwmod:
   631                           	opt stack 0
   632  000008                     lcd_putc@c:
   633                           	opt stack 0
   634  000008                     RtccWriteTime@tempMinSec:
   635                           	opt stack 0
   636  000008                     ___lwmod@dividend:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x7
   640  000008                     	ds	1
   641  000009                     RtccWriteDate@wasWrEn:
   642                           	opt stack 0
   643  000009                     lcd_putrs@ptr:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x8
   647  000009                     	ds	1
   648  00000A                     RtccWriteDate@tempDayMonth:
   649                           	opt stack 0
   650  00000A                     RtccWriteTime@tempHourWDay:
   651                           	opt stack 0
   652  00000A                     ___lwmod@divisor:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x9
   656  00000A                     	ds	1
   657  00000B                     ??_ingresar_password:
   658  00000B                     RtccReadDate@rTD0:
   659                           	opt stack 0
   660  00000B                     RtccReadTime@rTD0:
   661                           	opt stack 0
   662                           
   663                           ; 8 bytes @ 0xA
   664  00000B                     	ds	1
   665  00000C                     ___lwmod@counter:
   666                           	opt stack 0
   667  00000C                     RtccWriteDate@tempHourWDay:
   668                           	opt stack 0
   669  00000C                     ingresar_password@clear:
   670                           	opt stack 0
   671                           
   672                           ; 16 bytes @ 0xB
   673  00000C                     	ds	1
   674  00000D                     ?_sprintf:
   675                           	opt stack 0
   676  00000D                     sprintf@sp:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0xC
   680  00000D                     	ds	1
   681  00000E                     
   682                           ; 0 bytes @ 0xD
   683  00000E                     	ds	1
   684  00000F                     sprintf@f:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0xE
   688  00000F                     	ds	4
   689  000013                     
   690                           ; 0 bytes @ 0x12
   691  000013                     	ds	4
   692  000017                     ??_sprintf:
   693                           
   694                           ; 0 bytes @ 0x16
   695  000017                     	ds	4
   696  00001B                     sprintf@ap:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x1A
   700  00001B                     	ds	1
   701  00001C                     ingresar_password@i_951:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x1B
   705  00001C                     	ds	1
   706  00001D                     sprintf@flag:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x1C
   710  00001D                     	ds	1
   711  00001E                     ingresar_password@i:
   712                           	opt stack 0
   713  00001E                     sprintf@val:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x1D
   717  00001E                     	ds	2
   718  000020                     sprintf@prec:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x1F
   722  000020                     	ds	1
   723  000021                     sprintf@width:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x20
   727  000021                     	ds	2
   728  000023                     sprintf@c:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x22
   732  000023                     	ds	1
   733  000024                     imprimir_tecla@tecla:
   734                           	opt stack 0
   735  000024                     caratula@titulo:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x23
   739  000024                     	ds	1
   740  000025                     guardar_tecla_presionada@letra:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x24
   744  000025                     	ds	1
   745  000026                     caratula@clear:
   746                           	opt stack 0
   747                           
   748                           ; 16 bytes @ 0x25
   749  000026                     	ds	1
   750  000027                     guardar_tecla_presionada@i:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x26
   754  000027                     	ds	2
   755  000029                     leer_teclado@ocultar:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x28
   759  000029                     	ds	2
   760  00002B                     ??_leer_teclado:
   761                           
   762                           ; 0 bytes @ 0x2A
   763  00002B                     	ds	1
   764  00002C                     leer_teclado@i:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x2B
   768  00002C                     	ds	10
   769  000036                     caratula@i:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x35
   773  000036                     	ds	2
   774  000038                     tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1l	equ	0xFE1
   782                           
   783                           ; 0 bytes @ 0x37
   784 ;;
   785 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   786 ;;
   787 ;; *************** function _main *****************
   788 ;; Defined at:
   789 ;;		line 118 in file "main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  2  225[None  ] int 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels required when called:    8
   809 ;; This function calls:
   810 ;;		_Read_RTC
   811 ;;		_Setup
   812 ;;		_caratula
   813 ;;		_ingresar_password
   814 ;;		_leer_teclado
   815 ;; This function is called by:
   816 ;;		Startup code after reset
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text0
   821  001F00                     __ptext0:
   822                           	opt stack 0
   823  001F00                     _main:
   824                           	opt stack 23
   825                           
   826                           ;main.c: 120: Setup();
   827                           
   828                           ; BSR set to: 15
   829                           ;incstack = 0
   830  001F00  EC39  F00F         	call	_Setup	;wreg free
   831  001F04  D000               	goto	l2644
   832  001F06                     l2644:
   833                           
   834                           ;main.c: 123: {
   835                           ;main.c: 124: Read_RTC();
   836  001F06  ECBD  F00A         	call	_Read_RTC	;wreg free
   837                           
   838                           ;main.c: 125: leer_teclado(1);
   839  001F0A  0E00               	movlw	0
   840  001F0C  6E2A               	movwf	leer_teclado@ocultar+1,c
   841  001F0E  0E01               	movlw	1
   842  001F10  6E29               	movwf	leer_teclado@ocultar,c
   843  001F12  EC3B  F00B         	call	_leer_teclado	;wreg free
   844                           
   845                           ;main.c: 126: ingresar_password();
   846  001F16  ECB5  F00B         	call	_ingresar_password	;wreg free
   847                           
   848                           ;main.c: 128: if (autorizado){
   849  001F1A  5038               	movf	_autorizado,w,c
   850  001F1C  1039               	iorwf	_autorizado+1,w,c
   851  001F1E  B4D8               	btfsc	status,2,c
   852  001F20  D7F2               	goto	l2644
   853                           
   854                           ;main.c: 129: caratula("Welcome ");
   855  001F22  0E48               	movlw	low STR_13
   856  001F24  6E24               	movwf	caratula@titulo,c
   857  001F26  0E0F               	movlw	high STR_13
   858  001F28  6E25               	movwf	caratula@titulo+1,c
   859  001F2A  EC2F  F00C         	call	_caratula	;wreg free
   860  001F2E  D7EB               	goto	l2644
   861                           
   862                           ;main.c: 130: }
   863                           ;main.c: 135: }
   864                           ;main.c: 137: return 0;
   865                           ;	Return value of _main is never used
   866  001F30  EF00  F000         	goto	start
   867  001F34                     __end_of_main:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           postdec1	equ	0xFE5
   876                           fsr1l	equ	0xFE1
   877                           status	equ	0xFD8
   878                           
   879 ;; *************** function _leer_teclado *****************
   880 ;; Defined at:
   881 ;;		line 35 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  ocultar         2   40[COMRAM] int 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  i               2   43[COMRAM] int 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  2   40[COMRAM] int 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   895 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   898 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   899 ;;Total ram usage:        5 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    7
   902 ;; This function calls:
   903 ;;		_guardar_tecla_presionada
   904 ;;		_imprimir_tecla
   905 ;;		_lcd_putrs
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text1
   912  001676                     __ptext1:
   913                           	opt stack 0
   914  001676                     _leer_teclado:
   915                           	opt stack 23
   916                           
   917                           ;headers\teclado.h: 36: int i;
   918                           ;headers\teclado.h: 37: ocultar_teclas = ocultar;
   919                           
   920                           ;incstack = 0
   921  001676  C029  F03E         	movff	leer_teclado@ocultar,_ocultar_teclas
   922  00167A  C02A  F03F         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
   923                           
   924                           ;headers\teclado.h: 39: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=1;
   925  00167E  8089               	bsf	3977,0,c	;volatile
   926  001680  9289               	bcf	3977,1,c	;volatile
   927  001682  9489               	bcf	3977,2,c	;volatile
   928  001684  9689               	bcf	3977,3,c	;volatile
   929  001686  0E00               	movlw	0
   930  001688  6E2D               	movwf	leer_teclado@i+1,c
   931  00168A  0E01               	movlw	1
   932  00168C  6E2C               	movwf	leer_teclado@i,c
   933                           
   934                           ;headers\teclado.h: 40: guardar_tecla_presionada("A",i);
   935  00168E  0E5A               	movlw	low STR_3
   936  001690  6E25               	movwf	guardar_tecla_presionada@letra,c
   937  001692  0E0F               	movlw	high STR_3
   938  001694  6E26               	movwf	guardar_tecla_presionada@letra+1,c
   939  001696  C02C  F027         	movff	leer_teclado@i,guardar_tecla_presionada@i
   940  00169A  C02D  F028         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
   941  00169E  EC10  F00E         	call	_guardar_tecla_presionada	;wreg free
   942                           
   943                           ;headers\teclado.h: 42: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=4;
   944  0016A2  9089               	bcf	3977,0,c	;volatile
   945  0016A4  8289               	bsf	3977,1,c	;volatile
   946  0016A6  9489               	bcf	3977,2,c	;volatile
   947  0016A8  9689               	bcf	3977,3,c	;volatile
   948  0016AA  0E00               	movlw	0
   949  0016AC  6E2D               	movwf	leer_teclado@i+1,c
   950  0016AE  0E04               	movlw	4
   951  0016B0  6E2C               	movwf	leer_teclado@i,c
   952                           
   953                           ;headers\teclado.h: 43: guardar_tecla_presionada("B",i);
   954  0016B2  0E5C               	movlw	low STR_4
   955  0016B4  6E25               	movwf	guardar_tecla_presionada@letra,c
   956  0016B6  0E0F               	movlw	high STR_4
   957  0016B8  6E26               	movwf	guardar_tecla_presionada@letra+1,c
   958  0016BA  C02C  F027         	movff	leer_teclado@i,guardar_tecla_presionada@i
   959  0016BE  C02D  F028         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
   960  0016C2  EC10  F00E         	call	_guardar_tecla_presionada	;wreg free
   961                           
   962                           ;headers\teclado.h: 45: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA
      +                          3=0;i=7;
   963  0016C6  9089               	bcf	3977,0,c	;volatile
   964  0016C8  9289               	bcf	3977,1,c	;volatile
   965  0016CA  8489               	bsf	3977,2,c	;volatile
   966  0016CC  9689               	bcf	3977,3,c	;volatile
   967  0016CE  0E00               	movlw	0
   968  0016D0  6E2D               	movwf	leer_teclado@i+1,c
   969  0016D2  0E07               	movlw	7
   970  0016D4  6E2C               	movwf	leer_teclado@i,c
   971                           
   972                           ;headers\teclado.h: 46: guardar_tecla_presionada("C",i);
   973  0016D6  0E5E               	movlw	low STR_5
   974  0016D8  6E25               	movwf	guardar_tecla_presionada@letra,c
   975  0016DA  0E0F               	movlw	high STR_5
   976  0016DC  6E26               	movwf	guardar_tecla_presionada@letra+1,c
   977  0016DE  C02C  F027         	movff	leer_teclado@i,guardar_tecla_presionada@i
   978  0016E2  C02D  F028         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
   979  0016E6  EC10  F00E         	call	_guardar_tecla_presionada	;wreg free
   980                           
   981                           ;headers\teclado.h: 48: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=1;
   982  0016EA  9089               	bcf	3977,0,c	;volatile
   983  0016EC  9289               	bcf	3977,1,c	;volatile
   984  0016EE  9489               	bcf	3977,2,c	;volatile
   985  0016F0  8689               	bsf	3977,3,c	;volatile
   986                           
   987                           ;headers\teclado.h: 49: {
   988                           ;headers\teclado.h: 50: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5=
      +                          =1){};}
   989  0016F2  AA80               	btfss	3968,5,c	;volatile
   990  0016F4  D00B               	goto	l190
   991  0016F6  0E12               	movlw	18
   992  0016F8  6E44               	movwf	_key,c
   993  0016FA  0E58               	movlw	low STR_2
   994  0016FC  6E09               	movwf	lcd_putrs@ptr,c
   995  0016FE  0E0F               	movlw	high STR_2
   996  001700  6E0A               	movwf	lcd_putrs@ptr+1,c
   997  001702  EC9E  F00E         	call	_lcd_putrs	;wreg free
   998  001706  D000               	goto	l191
   999  001708                     l191:
  1000  001708  BA80               	btfsc	3968,5,c	;volatile
  1001  00170A  D7FE               	goto	l191
  1002  00170C                     l190:
  1003                           
  1004                           ;headers\teclado.h: 51: if (PORTAbits.RA7==1){key=0;imprimir_tecla(key);while(PORTAbits.
      +                          RA7==1){};}
  1005  00170C  AE80               	btfss	3968,7,c	;volatile
  1006  00170E  D008               	goto	l194
  1007  001710  0E00               	movlw	0
  1008  001712  6E44               	movwf	_key,c
  1009  001714  5044               	movf	_key,w,c
  1010  001716  EC14  F00F         	call	_imprimir_tecla
  1011  00171A  D000               	goto	l195
  1012  00171C                     l195:
  1013  00171C  BE80               	btfsc	3968,7,c	;volatile
  1014  00171E  D7FE               	goto	l195
  1015  001720                     l194:
  1016                           
  1017                           ;headers\teclado.h: 52: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6=
      +                          =1){};}
  1018  001720  AC80               	btfss	3968,6,c	;volatile
  1019  001722  D00B               	goto	l198
  1020  001724  0E13               	movlw	19
  1021  001726  6E44               	movwf	_key,c
  1022  001728  0E56               	movlw	low STR_7
  1023  00172A  6E09               	movwf	lcd_putrs@ptr,c
  1024  00172C  0E0F               	movlw	high STR_7
  1025  00172E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1026  001730  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1027  001734  D000               	goto	l199
  1028  001736                     l199:
  1029  001736  BC80               	btfsc	3968,6,c	;volatile
  1030  001738  D7FE               	goto	l199
  1031  00173A                     l198:
  1032                           
  1033                           ;headers\teclado.h: 53: if (PORTCbits.RC2==1){key=20;lcd_putrs("D");while(PORTCbits.RC2=
      +                          =1){};}
  1034  00173A  A482               	btfss	3970,2,c	;volatile
  1035  00173C  D00D               	goto	l2544
  1036  00173E  0E14               	movlw	20
  1037  001740  6E44               	movwf	_key,c
  1038  001742  0E60               	movlw	low STR_8
  1039  001744  6E09               	movwf	lcd_putrs@ptr,c
  1040  001746  0E0F               	movlw	high STR_8
  1041  001748  6E0A               	movwf	lcd_putrs@ptr+1,c
  1042  00174A  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1043  00174E  D000               	goto	l203
  1044  001750                     l203:
  1045  001750  A482               	btfss	3970,2,c	;volatile
  1046  001752  D002               	goto	l2544
  1047  001754  D7FD               	goto	l203
  1048  001756  D000               	goto	l2544
  1049  001758                     l2544:
  1050                           
  1051                           ;headers\teclado.h: 54: }
  1052                           ;headers\teclado.h: 55: _delay((unsigned long)((98)*(8000000/4000.0)));
  1053  001758  0EFF               	movlw	255
  1054  00175A  6E2B               	movwf	??_leer_teclado& (0+255),c
  1055  00175C  0E8A               	movlw	138
  1056  00175E                     u2077:
  1057  00175E  2EE8               	decfsz	wreg,f,c
  1058  001760  D7FE               	goto	u2077
  1059  001762  2E2B               	decfsz	??_leer_teclado& (0+255),f,c
  1060  001764  D7FC               	goto	u2077
  1061  001766  D000               	nop2	
  1062  001768  0012               	return		;funcret
  1063  00176A                     __end_of_leer_teclado:
  1064                           	opt stack 0
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           status	equ	0xFD8
  1074                           
  1075 ;; *************** function _guardar_tecla_presionada *****************
  1076 ;; Defined at:
  1077 ;;		line 28 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  letra           2   36[COMRAM] PTR unsigned char 
  1080 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
  1081 ;;  i               2   38[COMRAM] int 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  2   36[COMRAM] int 
  1086 ;; Registers used:
  1087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1096 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1097 ;;Total ram usage:        4 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; Hardware stack levels required when called:    6
  1100 ;; This function calls:
  1101 ;;		_imprimir_tecla
  1102 ;;		_lcd_putrs
  1103 ;; This function is called by:
  1104 ;;		_leer_teclado
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text2
  1109  001C20                     __ptext2:
  1110                           	opt stack 0
  1111  001C20                     _guardar_tecla_presionada:
  1112                           	opt stack 23
  1113                           
  1114                           ;headers\teclado.h: 29: if (PORTAbits.RA5==1){key=i;imprimir_tecla(key);while(PORTAbits.
      +                          RA5==1){};}
  1115                           
  1116                           ;incstack = 0
  1117  001C20  AA80               	btfss	3968,5,c	;volatile
  1118  001C22  D008               	goto	l171
  1119  001C24  C027  F044         	movff	guardar_tecla_presionada@i,_key
  1120  001C28  5044               	movf	_key,w,c
  1121  001C2A  EC14  F00F         	call	_imprimir_tecla
  1122  001C2E  D000               	goto	l172
  1123  001C30                     l172:
  1124  001C30  BA80               	btfsc	3968,5,c	;volatile
  1125  001C32  D7FE               	goto	l172
  1126  001C34                     l171:
  1127                           
  1128                           ;headers\teclado.h: 30: if (PORTAbits.RA7==1){key=(i)+1;imprimir_tecla(key);while(PORTAb
      +                          its.RA7==1){};}
  1129  001C34  AE80               	btfss	3968,7,c	;volatile
  1130  001C36  D008               	goto	l175
  1131  001C38  2827               	incf	guardar_tecla_presionada@i,w,c
  1132  001C3A  6E44               	movwf	_key,c
  1133  001C3C  5044               	movf	_key,w,c
  1134  001C3E  EC14  F00F         	call	_imprimir_tecla
  1135  001C42  D000               	goto	l176
  1136  001C44                     l176:
  1137  001C44  BE80               	btfsc	3968,7,c	;volatile
  1138  001C46  D7FE               	goto	l176
  1139  001C48                     l175:
  1140                           
  1141                           ;headers\teclado.h: 31: if (PORTAbits.RA6==1){key=(i)+2;imprimir_tecla(key);while(PORTAb
      +                          its.RA6==1){};}
  1142  001C48  AC80               	btfss	3968,6,c	;volatile
  1143  001C4A  D009               	goto	l179
  1144  001C4C  5027               	movf	guardar_tecla_presionada@i,w,c
  1145  001C4E  0F02               	addlw	2
  1146  001C50  6E44               	movwf	_key,c
  1147  001C52  5044               	movf	_key,w,c
  1148  001C54  EC14  F00F         	call	_imprimir_tecla
  1149  001C58  D000               	goto	l180
  1150  001C5A                     l180:
  1151  001C5A  BC80               	btfsc	3968,6,c	;volatile
  1152  001C5C  D7FE               	goto	l180
  1153  001C5E                     l179:
  1154                           
  1155                           ;headers\teclado.h: 32: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbit
      +                          s.RC2==1){};}
  1156  001C5E  A482               	btfss	3970,2,c	;volatile
  1157  001C60  0012               	return	
  1158  001C62  5027               	movf	guardar_tecla_presionada@i,w,c
  1159  001C64  0F0A               	addlw	10
  1160  001C66  6E44               	movwf	_key,c
  1161  001C68  C025  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1162  001C6C  C026  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1163  001C70  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1164  001C74  D000               	goto	l184
  1165  001C76                     l184:
  1166  001C76  A482               	btfss	3970,2,c	;volatile
  1167  001C78  0012               	return	
  1168  001C7A  D7FD               	goto	l184
  1169  001C7C  0012               	return	
  1170  001C7E  0012               	return		;funcret
  1171  001C80                     __end_of_guardar_tecla_presionada:
  1172                           	opt stack 0
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           postinc0	equ	0xFEE
  1178                           wreg	equ	0xFE8
  1179                           postdec1	equ	0xFE5
  1180                           fsr1l	equ	0xFE1
  1181                           status	equ	0xFD8
  1182                           
  1183 ;; *************** function _imprimir_tecla *****************
  1184 ;; Defined at:
  1185 ;;		line 17 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  tecla           1    wreg     unsigned char 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  tecla           1   35[COMRAM] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2  165[None  ] int 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1203 ;;Total ram usage:        1 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    5
  1206 ;; This function calls:
  1207 ;;		_guardar_current_password
  1208 ;;		_lcd_putrs
  1209 ;;		_sprintf
  1210 ;; This function is called by:
  1211 ;;		_guardar_tecla_presionada
  1212 ;;		_leer_teclado
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text3
  1217  001E28                     __ptext3:
  1218                           	opt stack 0
  1219  001E28                     _imprimir_tecla:
  1220                           	opt stack 24
  1221                           
  1222                           ;incstack = 0
  1223                           ;imprimir_tecla@tecla stored from wreg
  1224  001E28  6E24               	movwf	imprimir_tecla@tecla,c
  1225                           
  1226                           ;headers\teclado.h: 19: sprintf(buffer2,"%01u",tecla);
  1227  001E2A  0E8A               	movlw	low _buffer2
  1228  001E2C  6E0D               	movwf	sprintf@sp,c
  1229  001E2E  0E00               	movlw	high _buffer2
  1230  001E30  6E0E               	movwf	sprintf@sp+1,c
  1231  001E32  0E51               	movlw	low STR_1
  1232  001E34  6E0F               	movwf	sprintf@f,c
  1233  001E36  0E0F               	movlw	high STR_1
  1234  001E38  6E10               	movwf	sprintf@f+1,c
  1235  001E3A  C024  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  1236  001E3E  6A12               	clrf	?_sprintf+5,c
  1237  001E40  ECB2  F007         	call	_sprintf	;wreg free
  1238                           
  1239                           ;headers\teclado.h: 20: if (ocultar_teclas == 1){
  1240  001E44  043E               	decf	_ocultar_teclas,w,c
  1241  001E46  103F               	iorwf	_ocultar_teclas+1,w,c
  1242  001E48  A4D8               	btfss	status,2,c
  1243  001E4A  D00B               	goto	l2230
  1244                           
  1245                           ;headers\teclado.h: 21: lcd_putrs("*");
  1246  001E4C  0E58               	movlw	low STR_2
  1247  001E4E  6E09               	movwf	lcd_putrs@ptr,c
  1248  001E50  0E0F               	movlw	high STR_2
  1249  001E52  6E0A               	movwf	lcd_putrs@ptr+1,c
  1250  001E54  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1251                           
  1252                           ;headers\teclado.h: 22: guardar_current_password(*buffer2);
  1253  001E58  0100               	movlb	0	; () banked
  1254  001E5A  518A               	movf	_buffer2& (0+255),w,b
  1255  001E5C  EC5D  F00F         	call	_guardar_current_password
  1256                           
  1257                           ;headers\teclado.h: 23: }else{
  1258  001E60  0012               	return	
  1259  001E62                     l2230:
  1260                           
  1261                           ;headers\teclado.h: 24: lcd_putrs(buffer2);
  1262  001E62  0E8A               	movlw	low _buffer2
  1263  001E64  6E09               	movwf	lcd_putrs@ptr,c
  1264  001E66  0E00               	movlw	high _buffer2
  1265  001E68  6E0A               	movwf	lcd_putrs@ptr+1,c
  1266  001E6A  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1267  001E6E  0012               	return	
  1268  001E70  0012               	return		;funcret
  1269  001E72                     __end_of_imprimir_tecla:
  1270                           	opt stack 0
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1l	equ	0xFE1
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _guardar_current_password *****************
  1282 ;; Defined at:
  1283 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  valor           1    wreg     unsigned char 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  valor           1    2[COMRAM] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  2  150[None  ] int 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1301 ;;Total ram usage:        3 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_imprimir_tecla
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text4
  1311  001EBA                     __ptext4:
  1312                           	opt stack 0
  1313  001EBA                     _guardar_current_password:
  1314                           	opt stack 28
  1315                           
  1316                           ;incstack = 0
  1317                           ;guardar_current_password@valor stored from wreg
  1318  001EBA  6E03               	movwf	guardar_current_password@valor,c
  1319                           
  1320                           ;headers\password.h: 15: if (tamanio_password < 6){
  1321  001EBC  BE43               	btfsc	_tamanio_password+1,7,c
  1322  001EBE  D006               	goto	l1984
  1323  001EC0  5043               	movf	_tamanio_password+1,w,c
  1324  001EC2  E11D               	bnz	l152
  1325  001EC4  0E06               	movlw	6
  1326  001EC6  5C42               	subwf	_tamanio_password,w,c
  1327  001EC8  B0D8               	btfsc	status,0,c
  1328  001ECA  0012               	return	
  1329  001ECC                     l1984:
  1330                           
  1331                           ;headers\password.h: 16: current_password[tamanio_password] = valor;
  1332  001ECC  0E78               	movlw	low _current_password
  1333  001ECE  2442               	addwf	_tamanio_password,w,c
  1334  001ED0  6ED9               	movwf	fsr2l,c
  1335  001ED2  0E00               	movlw	high _current_password
  1336  001ED4  2043               	addwfc	_tamanio_password+1,w,c
  1337  001ED6  6EDA               	movwf	fsr2h,c
  1338  001ED8  C003  FFDF         	movff	guardar_current_password@valor,indf2
  1339                           
  1340                           ;headers\password.h: 17: current_password [tamanio_password+1] = '\0';
  1341  001EDC  0E01               	movlw	1
  1342  001EDE  2442               	addwf	_tamanio_password,w,c
  1343  001EE0  6E01               	movwf	??_guardar_current_password& (0+255),c
  1344  001EE2  0E00               	movlw	0
  1345  001EE4  2043               	addwfc	_tamanio_password+1,w,c
  1346  001EE6  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  1347  001EE8  0E78               	movlw	low _current_password
  1348  001EEA  2401               	addwf	??_guardar_current_password,w,c
  1349  001EEC  6ED9               	movwf	fsr2l,c
  1350  001EEE  0E00               	movlw	high _current_password
  1351  001EF0  2002               	addwfc	??_guardar_current_password+1,w,c
  1352  001EF2  6EDA               	movwf	fsr2h,c
  1353  001EF4  0E00               	movlw	0
  1354  001EF6  6EDF               	movwf	indf2,c
  1355                           
  1356                           ;headers\password.h: 18: tamanio_password++;
  1357  001EF8  4A42               	infsnz	_tamanio_password,f,c
  1358  001EFA  2A43               	incf	_tamanio_password+1,f,c
  1359  001EFC  0012               	return	
  1360  001EFE                     l152:
  1361  001EFE  0012               	return		;funcret
  1362  001F00                     __end_of_guardar_current_password:
  1363                           	opt stack 0
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           indf2	equ	0xFDF
  1373                           fsr2h	equ	0xFDA
  1374                           fsr2l	equ	0xFD9
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _ingresar_password *****************
  1378 ;; Defined at:
  1379 ;;		line 88 in file "main.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  i               2   27[COMRAM] int 
  1384 ;;  i               2   29[COMRAM] int 
  1385 ;;  clear          16   11[COMRAM] unsigned char [16]
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  2  216[None  ] int 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1396 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1398 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1399 ;;Total ram usage:       21 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    5
  1402 ;; This function calls:
  1403 ;;		_lcd_comand
  1404 ;;		_lcd_gotoxy
  1405 ;;		_lcd_putrs
  1406 ;;		_validar_password
  1407 ;; This function is called by:
  1408 ;;		_main
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text5
  1413  00176A                     __ptext5:
  1414                           	opt stack 0
  1415  00176A                     _ingresar_password:
  1416                           	opt stack 25
  1417                           
  1418                           ;main.c: 89: char clear[16];
  1419                           ;main.c: 90: for (int i=0;i<16;i++) clear[i]=' ';
  1420                           
  1421                           ;incstack = 0
  1422  00176A  0E00               	movlw	0
  1423  00176C  6E1F               	movwf	ingresar_password@i+1,c
  1424  00176E  0E00               	movlw	0
  1425  001770  6E1E               	movwf	ingresar_password@i,c
  1426  001772                     l2598:
  1427  001772  BE1F               	btfsc	ingresar_password@i+1,7,c
  1428  001774  D008               	goto	l2602
  1429  001776  501F               	movf	ingresar_password@i+1,w,c
  1430  001778  E112               	bnz	l2608
  1431  00177A  0E10               	movlw	16
  1432  00177C  5C1E               	subwf	ingresar_password@i,w,c
  1433  00177E  B0D8               	btfsc	status,0,c
  1434  001780  D00E               	goto	l2608
  1435  001782  D001               	goto	l2602
  1436  001784  D00C               	goto	l2608
  1437  001786                     l2602:
  1438  001786  0E0C               	movlw	low ingresar_password@clear
  1439  001788  241E               	addwf	ingresar_password@i,w,c
  1440  00178A  6ED9               	movwf	fsr2l,c
  1441  00178C  0E00               	movlw	high ingresar_password@clear
  1442  00178E  201F               	addwfc	ingresar_password@i+1,w,c
  1443  001790  6EDA               	movwf	fsr2h,c
  1444  001792  0E20               	movlw	32
  1445  001794  6EDF               	movwf	indf2,c
  1446  001796  4A1E               	infsnz	ingresar_password@i,f,c
  1447  001798  2A1F               	incf	ingresar_password@i+1,f,c
  1448  00179A  D7EB               	goto	l2598
  1449  00179C  D000               	goto	l2608
  1450  00179E                     l2608:
  1451                           
  1452                           ;main.c: 92: if(tamanio_password < 6){
  1453  00179E  BE43               	btfsc	_tamanio_password+1,7,c
  1454  0017A0  D006               	goto	l2610
  1455  0017A2  5043               	movf	_tamanio_password+1,w,c
  1456  0017A4  E118               	bnz	l2616
  1457  0017A6  0E06               	movlw	6
  1458  0017A8  5C42               	subwf	_tamanio_password,w,c
  1459  0017AA  B0D8               	btfsc	status,0,c
  1460  0017AC  D014               	goto	l2616
  1461  0017AE                     l2610:
  1462                           
  1463                           ;main.c: 94: lcd_comand(0b00001100);
  1464  0017AE  0E0C               	movlw	12
  1465  0017B0  EC05  F010         	call	_lcd_comand
  1466                           
  1467                           ;main.c: 95: lcd_gotoxy(1,1);
  1468  0017B4  0E01               	movlw	1
  1469  0017B6  6E05               	movwf	lcd_gotoxy@y,c
  1470  0017B8  0E01               	movlw	1
  1471  0017BA  ECC7  F00F         	call	_lcd_gotoxy
  1472                           
  1473                           ;main.c: 96: lcd_putrs("Ingrese pass:");
  1474  0017BE  0E2F               	movlw	low STR_11
  1475  0017C0  6E09               	movwf	lcd_putrs@ptr,c
  1476  0017C2  0E0F               	movlw	high STR_11
  1477  0017C4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1478  0017C6  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1479                           
  1480                           ;main.c: 97: lcd_gotoxy(tamanio_password+1,2);
  1481  0017CA  0E02               	movlw	2
  1482  0017CC  6E05               	movwf	lcd_gotoxy@y,c
  1483  0017CE  2842               	incf	_tamanio_password,w,c
  1484  0017D0  ECC7  F00F         	call	_lcd_gotoxy
  1485  0017D4  D000               	goto	l2616
  1486  0017D6                     l2616:
  1487                           
  1488                           ;main.c: 99: }
  1489                           ;main.c: 101: validar_password();
  1490  0017D6  EC40  F00E         	call	_validar_password	;wreg free
  1491                           
  1492                           ;main.c: 102: if (tamanio_password >= 6 && !autorizado){
  1493  0017DA  BE43               	btfsc	_tamanio_password+1,7,c
  1494  0017DC  0012               	return	
  1495  0017DE  5043               	movf	_tamanio_password+1,w,c
  1496  0017E0  E104               	bnz	u2010
  1497  0017E2  0E06               	movlw	6
  1498  0017E4  5C42               	subwf	_tamanio_password,w,c
  1499  0017E6  A0D8               	btfss	status,0,c
  1500  0017E8  0012               	return	
  1501  0017EA                     u2010:
  1502  0017EA  5038               	movf	_autorizado,w,c
  1503  0017EC  1039               	iorwf	_autorizado+1,w,c
  1504  0017EE  A4D8               	btfss	status,2,c
  1505  0017F0  0012               	return	
  1506                           
  1507                           ;main.c: 103: tamanio_password = 0;
  1508  0017F2  0E00               	movlw	0
  1509  0017F4  6E43               	movwf	_tamanio_password+1,c
  1510  0017F6  0E00               	movlw	0
  1511  0017F8  6E42               	movwf	_tamanio_password,c
  1512                           
  1513                           ;main.c: 104: lcd_gotoxy(1,2);
  1514  0017FA  0E02               	movlw	2
  1515  0017FC  6E05               	movwf	lcd_gotoxy@y,c
  1516  0017FE  0E01               	movlw	1
  1517  001800  ECC7  F00F         	call	_lcd_gotoxy
  1518                           
  1519                           ;main.c: 105: lcd_putrs("ERROR pass");
  1520  001804  0E3D               	movlw	low STR_12
  1521  001806  6E09               	movwf	lcd_putrs@ptr,c
  1522  001808  0E0F               	movlw	high STR_12
  1523  00180A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1524  00180C  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1525                           
  1526                           ;main.c: 106: for (int i=0;i<9;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1527  001810  0E00               	movlw	0
  1528  001812  6E1D               	movwf	ingresar_password@i_951+1,c
  1529  001814  0E00               	movlw	0
  1530  001816  6E1C               	movwf	ingresar_password@i_951,c
  1531  001818                     l2630:
  1532  001818  BE1D               	btfsc	ingresar_password@i_951+1,7,c
  1533  00181A  D008               	goto	l2634
  1534  00181C  501D               	movf	ingresar_password@i_951+1,w,c
  1535  00181E  E112               	bnz	l2638
  1536  001820  0E09               	movlw	9
  1537  001822  5C1C               	subwf	ingresar_password@i_951,w,c
  1538  001824  B0D8               	btfsc	status,0,c
  1539  001826  D00E               	goto	l2638
  1540  001828  D001               	goto	l2634
  1541  00182A  D00C               	goto	l2638
  1542  00182C                     l2634:
  1543  00182C  0EFF               	movlw	255
  1544  00182E  6E0B               	movwf	??_ingresar_password& (0+255),c
  1545  001830  0E8A               	movlw	138
  1546  001832                     u2087:
  1547  001832  2EE8               	decfsz	wreg,f,c
  1548  001834  D7FE               	goto	u2087
  1549  001836  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  1550  001838  D7FC               	goto	u2087
  1551  00183A  D000               	nop2	
  1552  00183C  4A1C               	infsnz	ingresar_password@i_951,f,c
  1553  00183E  2A1D               	incf	ingresar_password@i_951+1,f,c
  1554  001840  D7EB               	goto	l2630
  1555  001842  D000               	goto	l2638
  1556  001844                     l2638:
  1557                           
  1558                           ;main.c: 107: lcd_gotoxy(1,2);
  1559  001844  0E02               	movlw	2
  1560  001846  6E05               	movwf	lcd_gotoxy@y,c
  1561  001848  0E01               	movlw	1
  1562  00184A  ECC7  F00F         	call	_lcd_gotoxy
  1563                           
  1564                           ;main.c: 108: lcd_putrs(clear);
  1565  00184E  0E0C               	movlw	low ingresar_password@clear
  1566  001850  6E09               	movwf	lcd_putrs@ptr,c
  1567  001852  0E00               	movlw	high ingresar_password@clear
  1568  001854  6E0A               	movwf	lcd_putrs@ptr+1,c
  1569  001856  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1570  00185A  0012               	return	
  1571  00185C  0012               	return		;funcret
  1572  00185E                     __end_of_ingresar_password:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1l	equ	0xFE1
  1582                           indf2	equ	0xFDF
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _validar_password *****************
  1588 ;; Defined at:
  1589 ;;		line 22 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  i               2    2[COMRAM] int 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  2  154[None  ] int 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1604 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1606 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1607 ;;Total ram usage:        4 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_ingresar_password
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text6
  1617  001C80                     __ptext6:
  1618                           	opt stack 0
  1619  001C80                     _validar_password:
  1620                           	opt stack 29
  1621                           
  1622                           ;headers\password.h: 24: autorizado = 1;
  1623                           
  1624                           ;incstack = 0
  1625  001C80  0E00               	movlw	0
  1626  001C82  6E39               	movwf	_autorizado+1,c
  1627  001C84  0E01               	movlw	1
  1628  001C86  6E38               	movwf	_autorizado,c
  1629                           
  1630                           ;headers\password.h: 25: int i = 0;
  1631  001C88  0E00               	movlw	0
  1632  001C8A  6E04               	movwf	validar_password@i+1,c
  1633  001C8C  0E00               	movlw	0
  1634  001C8E  6E03               	movwf	validar_password@i,c
  1635                           
  1636                           ;headers\password.h: 26: while (i < 6 && autorizado==1){
  1637  001C90  D018               	goto	l2392
  1638  001C92                     l2386:
  1639                           
  1640                           ;headers\password.h: 28: if (current_password[i] != password[i])
  1641  001C92  0EA5               	movlw	low _password
  1642  001C94  2403               	addwf	validar_password@i,w,c
  1643  001C96  6ED9               	movwf	fsr2l,c
  1644  001C98  0E00               	movlw	high _password
  1645  001C9A  2004               	addwfc	validar_password@i+1,w,c
  1646  001C9C  6EDA               	movwf	fsr2h,c
  1647  001C9E  0E78               	movlw	low _current_password
  1648  001CA0  2403               	addwf	validar_password@i,w,c
  1649  001CA2  6EE1               	movwf	fsr1l,c
  1650  001CA4  0E00               	movlw	high _current_password
  1651  001CA6  2004               	addwfc	validar_password@i+1,w,c
  1652  001CA8  6EE2               	movwf	fsr1h,c
  1653  001CAA  50DE               	movf	postinc2,w,c
  1654  001CAC  18E6               	xorwf	postinc1,w,c
  1655  001CAE  B4D8               	btfsc	status,2,c
  1656  001CB0  D005               	goto	l2390
  1657                           
  1658                           ;headers\password.h: 29: autorizado = 0;
  1659  001CB2  0E00               	movlw	0
  1660  001CB4  6E39               	movwf	_autorizado+1,c
  1661  001CB6  0E00               	movlw	0
  1662  001CB8  6E38               	movwf	_autorizado,c
  1663  001CBA  D000               	goto	l2390
  1664  001CBC                     l2390:
  1665                           
  1666                           ;headers\password.h: 31: i++;
  1667  001CBC  4A03               	infsnz	validar_password@i,f,c
  1668  001CBE  2A04               	incf	validar_password@i+1,f,c
  1669  001CC0  D000               	goto	l2392
  1670  001CC2                     l2392:
  1671  001CC2  BE04               	btfsc	validar_password@i+1,7,c
  1672  001CC4  D006               	goto	l2394
  1673  001CC6  5004               	movf	validar_password@i+1,w,c
  1674  001CC8  E10A               	bnz	l161
  1675  001CCA  0E06               	movlw	6
  1676  001CCC  5C03               	subwf	validar_password@i,w,c
  1677  001CCE  B0D8               	btfsc	status,0,c
  1678  001CD0  0012               	return	
  1679  001CD2                     l2394:
  1680  001CD2  0438               	decf	_autorizado,w,c
  1681  001CD4  1039               	iorwf	_autorizado+1,w,c
  1682  001CD6  A4D8               	btfss	status,2,c
  1683  001CD8  0012               	return	
  1684  001CDA  D7DB               	goto	l2386
  1685  001CDC  0012               	return	
  1686  001CDE                     l161:
  1687  001CDE  0012               	return		;funcret
  1688  001CE0                     __end_of_validar_password:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postinc1	equ	0xFE6
  1697                           postdec1	equ	0xFE5
  1698                           fsr1h	equ	0xFE2
  1699                           fsr1l	equ	0xFE1
  1700                           indf2	equ	0xFDF
  1701                           postinc2	equ	0xFDE
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _caratula *****************
  1707 ;; Defined at:
  1708 ;;		line 32 in file "main.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  1711 ;;		 -> STR_13(9), 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  i               2   53[COMRAM] int 
  1714 ;;  clear          16   37[COMRAM] unsigned char [16]
  1715 ;; Return value:  Size  Location     Type
  1716 ;;		None               void
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1725 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1727 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1728 ;;Total ram usage:       20 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    5
  1731 ;; This function calls:
  1732 ;;		_lcd_comand
  1733 ;;		_lcd_gotoxy
  1734 ;;		_lcd_putrs
  1735 ;;		_sprintf
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text7
  1742  00185E                     __ptext7:
  1743                           	opt stack 0
  1744  00185E                     _caratula:
  1745                           	opt stack 25
  1746                           
  1747                           ;main.c: 35: char clear[16];
  1748                           ;main.c: 36: for (int i=0;i<16;i++) clear[i]=' ';
  1749                           
  1750                           ;incstack = 0
  1751  00185E  0E00               	movlw	0
  1752  001860  6E37               	movwf	caratula@i+1,c
  1753  001862  0E00               	movlw	0
  1754  001864  6E36               	movwf	caratula@i,c
  1755  001866                     l2548:
  1756  001866  BE37               	btfsc	caratula@i+1,7,c
  1757  001868  D008               	goto	l2552
  1758  00186A  5037               	movf	caratula@i+1,w,c
  1759  00186C  E112               	bnz	l2558
  1760  00186E  0E10               	movlw	16
  1761  001870  5C36               	subwf	caratula@i,w,c
  1762  001872  B0D8               	btfsc	status,0,c
  1763  001874  D00E               	goto	l2558
  1764  001876  D001               	goto	l2552
  1765  001878  D00C               	goto	l2558
  1766  00187A                     l2552:
  1767  00187A  0E26               	movlw	low caratula@clear
  1768  00187C  2436               	addwf	caratula@i,w,c
  1769  00187E  6ED9               	movwf	fsr2l,c
  1770  001880  0E00               	movlw	high caratula@clear
  1771  001882  2037               	addwfc	caratula@i+1,w,c
  1772  001884  6EDA               	movwf	fsr2h,c
  1773  001886  0E20               	movlw	32
  1774  001888  6EDF               	movwf	indf2,c
  1775  00188A  4A36               	infsnz	caratula@i,f,c
  1776  00188C  2A37               	incf	caratula@i+1,f,c
  1777  00188E  D7EB               	goto	l2548
  1778  001890  D000               	goto	l2558
  1779  001892                     l2558:
  1780                           
  1781                           ;main.c: 38: lcd_comand(0b00001100);
  1782  001892  0E0C               	movlw	12
  1783  001894  EC05  F010         	call	_lcd_comand
  1784                           
  1785                           ;main.c: 39: lcd_gotoxy(1,1);
  1786  001898  0E01               	movlw	1
  1787  00189A  6E05               	movwf	lcd_gotoxy@y,c
  1788  00189C  0E01               	movlw	1
  1789  00189E  ECC7  F00F         	call	_lcd_gotoxy
  1790                           
  1791                           ;main.c: 40: lcd_putrs(titulo);
  1792  0018A2  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  1793  0018A6  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  1794  0018AA  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1795                           
  1796                           ;main.c: 42: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1797  0018AE  0E8A               	movlw	low _buffer2
  1798  0018B0  6E0D               	movwf	sprintf@sp,c
  1799  0018B2  0E00               	movlw	high _buffer2
  1800  0018B4  6E0E               	movwf	sprintf@sp+1,c
  1801  0018B6  0E20               	movlw	low STR_9
  1802  0018B8  6E0F               	movwf	sprintf@f,c
  1803  0018BA  0E0F               	movlw	high STR_9
  1804  0018BC  6E10               	movwf	sprintf@f+1,c
  1805  0018BE  C04F  F011         	movff	_dia,?_sprintf+4
  1806  0018C2  C050  F012         	movff	_dia+1,?_sprintf+5
  1807  0018C6  C055  F013         	movff	_mes,?_sprintf+6
  1808  0018CA  C056  F014         	movff	_mes+1,?_sprintf+7
  1809  0018CE  C04D  F015         	movff	_anio,?_sprintf+8
  1810  0018D2  C04E  F016         	movff	_anio+1,?_sprintf+9
  1811  0018D6  ECB2  F007         	call	_sprintf	;wreg free
  1812                           
  1813                           ;main.c: 43: lcd_gotoxy(9,1);
  1814  0018DA  0E01               	movlw	1
  1815  0018DC  6E05               	movwf	lcd_gotoxy@y,c
  1816  0018DE  0E09               	movlw	9
  1817  0018E0  ECC7  F00F         	call	_lcd_gotoxy
  1818                           
  1819                           ;main.c: 44: lcd_putrs(buffer2);
  1820  0018E4  0E8A               	movlw	low _buffer2
  1821  0018E6  6E09               	movwf	lcd_putrs@ptr,c
  1822  0018E8  0E00               	movlw	high _buffer2
  1823  0018EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1824  0018EC  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1825                           
  1826                           ;main.c: 46: sprintf(buffer2,"  %02u:%02u:%02u",hora,minuto,segundo);
  1827  0018F0  0E8A               	movlw	low _buffer2
  1828  0018F2  6E0D               	movwf	sprintf@sp,c
  1829  0018F4  0E00               	movlw	high _buffer2
  1830  0018F6  6E0E               	movwf	sprintf@sp+1,c
  1831  0018F8  0E0F               	movlw	low STR_10
  1832  0018FA  6E0F               	movwf	sprintf@f,c
  1833  0018FC  0E0F               	movlw	high STR_10
  1834  0018FE  6E10               	movwf	sprintf@f+1,c
  1835  001900  C053  F011         	movff	_hora,?_sprintf+4
  1836  001904  C054  F012         	movff	_hora+1,?_sprintf+5
  1837  001908  C057  F013         	movff	_minuto,?_sprintf+6
  1838  00190C  C058  F014         	movff	_minuto+1,?_sprintf+7
  1839  001910  C040  F015         	movff	_segundo,?_sprintf+8
  1840  001914  C041  F016         	movff	_segundo+1,?_sprintf+9
  1841  001918  ECB2  F007         	call	_sprintf	;wreg free
  1842                           
  1843                           ;main.c: 47: lcd_gotoxy(1,2);
  1844  00191C  0E02               	movlw	2
  1845  00191E  6E05               	movwf	lcd_gotoxy@y,c
  1846  001920  0E01               	movlw	1
  1847  001922  ECC7  F00F         	call	_lcd_gotoxy
  1848                           
  1849                           ;main.c: 48: lcd_putrs(buffer2);
  1850  001926  0E8A               	movlw	low _buffer2
  1851  001928  6E09               	movwf	lcd_putrs@ptr,c
  1852  00192A  0E00               	movlw	high _buffer2
  1853  00192C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1854  00192E  EC9E  F00E         	call	_lcd_putrs	;wreg free
  1855  001932  0012               	return		;funcret
  1856  001934                     __end_of_caratula:
  1857                           	opt stack 0
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           postinc0	equ	0xFEE
  1863                           wreg	equ	0xFE8
  1864                           postinc1	equ	0xFE6
  1865                           postdec1	equ	0xFE5
  1866                           fsr1h	equ	0xFE2
  1867                           fsr1l	equ	0xFE1
  1868                           indf2	equ	0xFDF
  1869                           postinc2	equ	0xFDE
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _sprintf *****************
  1875 ;; Defined at:
  1876 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1879 ;;		 -> buffer2(20), 
  1880 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1881 ;;		 -> STR_10(17), STR_9(15), STR_1(5), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  tmpval          4    0        struct .
  1884 ;;  cp              3    0        PTR const unsigned char 
  1885 ;;  width           2   32[COMRAM] int 
  1886 ;;  val             2   29[COMRAM] unsigned int 
  1887 ;;  ap              2   26[COMRAM] PTR void [1]
  1888 ;;		 -> ?_sprintf(2), 
  1889 ;;  len             2    0        unsigned int 
  1890 ;;  c               1   34[COMRAM] char 
  1891 ;;  prec            1   31[COMRAM] char 
  1892 ;;  flag            1   28[COMRAM] unsigned char 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  2   12[COMRAM] int 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1902 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1905 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1906 ;;Total ram usage:       23 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    1
  1909 ;; This function calls:
  1910 ;;		___lwdiv
  1911 ;;		___lwmod
  1912 ;;		___wmul
  1913 ;;		_isdigit
  1914 ;; This function is called by:
  1915 ;;		_imprimir_tecla
  1916 ;;		_caratula
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text8
  1921  000F64                     __ptext8:
  1922                           	opt stack 0
  1923  000F64                     _sprintf:
  1924                           	opt stack 27
  1925                           
  1926                           ;doprnt.c: 494: va_list ap;
  1927                           ;doprnt.c: 499: signed char c;
  1928                           ;doprnt.c: 501: int width;
  1929                           ;doprnt.c: 506: signed char prec;
  1930                           ;doprnt.c: 508: unsigned char flag;
  1931                           ;doprnt.c: 523: union {
  1932                           ;doprnt.c: 524: unsigned long vd;
  1933                           ;doprnt.c: 525: double integ;
  1934                           ;doprnt.c: 526: } tmpval;
  1935                           ;doprnt.c: 528: unsigned int val;
  1936                           ;doprnt.c: 529: unsigned len;
  1937                           ;doprnt.c: 530: const char * cp;
  1938                           ;doprnt.c: 533: *ap = __va_start();
  1939                           
  1940                           ;incstack = 0
  1941  000F64  0E11               	movlw	low (?_sprintf+4)
  1942  000F66  6E1B               	movwf	sprintf@ap,c
  1943  000F68  0E00               	movlw	high (?_sprintf+4)
  1944  000F6A  6E1C               	movwf	sprintf@ap+1,c
  1945                           
  1946                           ;doprnt.c: 536: while(c = *f++) {
  1947  000F6C  D117               	goto	l2072
  1948  000F6E                     l1990:
  1949                           
  1950                           ;doprnt.c: 538: if(c != '%')
  1951  000F6E  0E25               	movlw	37
  1952  000F70  1823               	xorwf	sprintf@c,w,c
  1953  000F72  B4D8               	btfsc	status,2,c
  1954  000F74  D009               	goto	l1996
  1955                           
  1956                           ;doprnt.c: 540: {
  1957                           ;doprnt.c: 541: ((*sp++ = (c)));
  1958  000F76  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1959  000F7A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1960  000F7E  C023  FFDF         	movff	sprintf@c,indf2
  1961  000F82  4A0D               	infsnz	sprintf@sp,f,c
  1962  000F84  2A0E               	incf	sprintf@sp+1,f,c
  1963                           
  1964                           ;doprnt.c: 542: continue;
  1965  000F86  D10A               	goto	l2072
  1966  000F88                     l1996:
  1967                           
  1968                           ;doprnt.c: 543: }
  1969                           ;doprnt.c: 546: width = 0;
  1970  000F88  0E00               	movlw	0
  1971  000F8A  6E22               	movwf	sprintf@width+1,c
  1972  000F8C  0E00               	movlw	0
  1973  000F8E  6E21               	movwf	sprintf@width,c
  1974                           
  1975                           ;doprnt.c: 548: flag = 0;
  1976  000F90  0E00               	movlw	0
  1977  000F92  6E1D               	movwf	sprintf@flag,c
  1978                           
  1979                           ;doprnt.c: 551: switch(*f) {
  1980                           
  1981                           ;doprnt.c: 550: for(;;) {
  1982  000F94  D005               	goto	l2002
  1983  000F96                     l1998:
  1984                           
  1985                           ;doprnt.c: 580: flag |= 0x04;
  1986  000F96  841D               	bsf	sprintf@flag,2,c
  1987                           
  1988                           ;doprnt.c: 581: f++;
  1989  000F98  4A0F               	infsnz	sprintf@f,f,c
  1990  000F9A  2A10               	incf	sprintf@f+1,f,c
  1991                           
  1992                           ;doprnt.c: 582: continue;
  1993  000F9C  D001               	goto	l2002
  1994                           
  1995                           ;doprnt.c: 584: }
  1996  000F9E  D00B               	goto	l2004
  1997  000FA0                     l2002:
  1998  000FA0  C00F  FFF6         	movff	sprintf@f,tblptrl
  1999  000FA4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2000  000FA8                     	if	0	;tblptru may be non-zero
  2001  000FA8                     	endif
  2002  000FA8                     	if	0	;tblptru may be non-zero
  2003  000FA8                     	endif
  2004  000FA8  0008               	tblrd		*
  2005  000FAA  50F5               	movf	tablat,w,c
  2006                           
  2007                           ; Switch size 1, requested type "space"
  2008                           ; Number of cases is 1, Range of values is 48 to 48
  2009                           ; switch strategies available:
  2010                           ; Name         Instructions Cycles
  2011                           ; simple_byte            4     3 (average)
  2012                           ;	Chosen strategy is simple_byte
  2013  000FAC  0A30               	xorlw	48	; case 48
  2014  000FAE  B4D8               	btfsc	status,2,c
  2015  000FB0  D7F2               	goto	l1998
  2016                           
  2017                           ;doprnt.c: 585: break;
  2018  000FB2  D001               	goto	l2004
  2019                           
  2020                           ;doprnt.c: 586: }
  2021  000FB4  D7F5               	goto	l2002
  2022  000FB6                     l2004:
  2023                           
  2024                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2025  000FB6  C00F  FFF6         	movff	sprintf@f,tblptrl
  2026  000FBA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2027  000FBE                     	if	0	;tblptru may be non-zero
  2028  000FBE                     	endif
  2029  000FBE                     	if	0	;tblptru may be non-zero
  2030  000FBE                     	endif
  2031  000FBE  0008               	tblrd		*
  2032  000FC0  50F5               	movf	tablat,w,c
  2033  000FC2  ECD9  F00F         	call	_isdigit
  2034  000FC6  A0D8               	btfss	status,0,c
  2035  000FC8  D03A               	goto	l2020
  2036                           
  2037                           ;doprnt.c: 598: width = 0;
  2038  000FCA  0E00               	movlw	0
  2039  000FCC  6E22               	movwf	sprintf@width+1,c
  2040  000FCE  0E00               	movlw	0
  2041  000FD0  6E21               	movwf	sprintf@width,c
  2042  000FD2  D000               	goto	l2008
  2043  000FD4                     l2008:
  2044                           
  2045                           ;doprnt.c: 600: width *= 10;
  2046  000FD4  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2047  000FD8  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2048  000FDC  0E00               	movlw	0
  2049  000FDE  6E04               	movwf	___wmul@multiplicand+1,c
  2050  000FE0  0E0A               	movlw	10
  2051  000FE2  6E03               	movwf	___wmul@multiplicand,c
  2052  000FE4  ECB3  F00F         	call	___wmul	;wreg free
  2053  000FE8  C001  F021         	movff	?___wmul,sprintf@width
  2054  000FEC  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2055                           
  2056                           ;doprnt.c: 601: width += *f++ - '0';
  2057  000FF0  0ED0               	movlw	208
  2058  000FF2  6E17               	movwf	??_sprintf& (0+255),c
  2059  000FF4  0EFF               	movlw	255
  2060  000FF6  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2061  000FF8  C00F  FFF6         	movff	sprintf@f,tblptrl
  2062  000FFC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2063  001000                     	if	0	;tblptru may be non-zero
  2064  001000                     	endif
  2065  001000                     	if	0	;tblptru may be non-zero
  2066  001000                     	endif
  2067  001000  0008               	tblrd		*
  2068  001002  50F5               	movf	tablat,w,c
  2069  001004  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2070  001006  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2071  001008  5017               	movf	??_sprintf,w,c
  2072  00100A  2619               	addwf	??_sprintf+2,f,c
  2073  00100C  5018               	movf	??_sprintf+1,w,c
  2074  00100E  221A               	addwfc	??_sprintf+3,f,c
  2075  001010  5019               	movf	??_sprintf+2,w,c
  2076  001012  2621               	addwf	sprintf@width,f,c
  2077  001014  501A               	movf	??_sprintf+3,w,c
  2078  001016  2222               	addwfc	sprintf@width+1,f,c
  2079  001018  4A0F               	infsnz	sprintf@f,f,c
  2080  00101A  2A10               	incf	sprintf@f+1,f,c
  2081                           
  2082                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2083  00101C  C00F  FFF6         	movff	sprintf@f,tblptrl
  2084  001020  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2085  001024                     	if	0	;tblptru may be non-zero
  2086  001024                     	endif
  2087  001024                     	if	0	;tblptru may be non-zero
  2088  001024                     	endif
  2089  001024  0008               	tblrd		*
  2090  001026  50F5               	movf	tablat,w,c
  2091  001028  ECD9  F00F         	call	_isdigit
  2092  00102C  A0D8               	btfss	status,0,c
  2093  00102E  D007               	goto	l2020
  2094  001030  D7D1               	goto	l2008
  2095                           
  2096                           ;doprnt.c: 608: }
  2097                           ;doprnt.c: 635: switch(c = *f++) {
  2098  001032  D005               	goto	l2020
  2099                           
  2100                           ;doprnt.c: 638: goto alldone;
  2101                           
  2102                           ;doprnt.c: 637: case 0:
  2103  001034  D0C1               	goto	l2074
  2104                           
  2105                           ;doprnt.c: 813: continue;
  2106                           
  2107                           ;doprnt.c: 802: default:
  2108  001036  D0B2               	goto	l2072
  2109  001038                     l2016:
  2110                           
  2111                           ;doprnt.c: 818: flag |= 0xC0;
  2112  001038  0EC0               	movlw	192
  2113  00103A  121D               	iorwf	sprintf@flag,f,c
  2114                           
  2115                           ;doprnt.c: 822: }
  2116                           
  2117                           ;doprnt.c: 819: break;
  2118  00103C  D011               	goto	l2022
  2119  00103E                     l2020:
  2120  00103E  C00F  FFF6         	movff	sprintf@f,tblptrl
  2121  001042  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2122  001046  4A0F               	infsnz	sprintf@f,f,c
  2123  001048  2A10               	incf	sprintf@f+1,f,c
  2124  00104A                     	if	0	;tblptru may be non-zero
  2125  00104A                     	endif
  2126  00104A                     	if	0	;tblptru may be non-zero
  2127  00104A                     	endif
  2128  00104A  0008               	tblrd		*
  2129  00104C  CFF5 F023          	movff	tablat,sprintf@c
  2130  001050  5023               	movf	sprintf@c,w,c
  2131                           
  2132                           ; Switch size 1, requested type "space"
  2133                           ; Number of cases is 2, Range of values is 0 to 117
  2134                           ; switch strategies available:
  2135                           ; Name         Instructions Cycles
  2136                           ; simple_byte            7     4 (average)
  2137                           ;	Chosen strategy is simple_byte
  2138  001052  0A00               	xorlw	0	; case 0
  2139  001054  B4D8               	btfsc	status,2,c
  2140  001056  D0B0               	goto	l2074
  2141  001058  0A75               	xorlw	117	; case 117
  2142  00105A  B4D8               	btfsc	status,2,c
  2143  00105C  D7ED               	goto	l2016
  2144  00105E  D09E               	goto	l2072
  2145  001060                     l2022:
  2146                           
  2147                           ;doprnt.c: 1273: {
  2148                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2149  001060  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2150  001064  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2151  001068  CFDE F01E          	movff	postinc2,sprintf@val
  2152  00106C  CFDD F01F          	movff	postdec2,sprintf@val+1
  2153  001070  0E02               	movlw	2
  2154  001072  261B               	addwf	sprintf@ap,f,c
  2155  001074  0E00               	movlw	0
  2156  001076  221C               	addwfc	sprintf@ap+1,f,c
  2157                           
  2158                           ;doprnt.c: 1287: }
  2159                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2160  001078  0E01               	movlw	1
  2161  00107A  6E23               	movwf	sprintf@c,c
  2162  00107C                     l2028:
  2163  00107C  0E05               	movlw	5
  2164  00107E  1823               	xorwf	sprintf@c,w,c
  2165  001080  B4D8               	btfsc	status,2,c
  2166  001082  D016               	goto	l2040
  2167  001084  D001               	goto	l2032
  2168  001086  D014               	goto	l2040
  2169  001088                     l2032:
  2170                           
  2171                           ;doprnt.c: 1306: if(val < dpowers[c])
  2172  001088  5023               	movf	sprintf@c,w,c
  2173  00108A  0D02               	mullw	2
  2174  00108C  0E01               	movlw	low _dpowers
  2175  00108E  24F3               	addwf	prodl,w,c
  2176  001090  6EF6               	movwf	tblptrl,c
  2177  001092  0E0F               	movlw	high _dpowers
  2178  001094  20F4               	addwfc	prodh,w,c
  2179  001096  6EF7               	movwf	tblptrh,c
  2180  001098                     	if	0	;There are less than 3 active tblptr bytes
  2181  001098                     	endif
  2182  001098  0009               	tblrd		*+
  2183  00109A  50F5               	movf	tablat,w,c
  2184  00109C  5C1E               	subwf	sprintf@val,w,c
  2185  00109E  0009               	tblrd		*+
  2186  0010A0  50F5               	movf	tablat,w,c
  2187  0010A2  581F               	subwfb	sprintf@val+1,w,c
  2188  0010A4  A0D8               	btfss	status,0,c
  2189  0010A6  D004               	goto	l2040
  2190  0010A8  D001               	goto	l2036
  2191                           
  2192                           ;doprnt.c: 1307: break;
  2193  0010AA  D002               	goto	l2040
  2194  0010AC                     l2036:
  2195  0010AC  2A23               	incf	sprintf@c,f,c
  2196  0010AE  D7E6               	goto	l2028
  2197  0010B0                     l2040:
  2198                           
  2199                           ;doprnt.c: 1381: if(width > c)
  2200  0010B0  0E80               	movlw	128
  2201  0010B2  BE23               	btfsc	sprintf@c,7,c
  2202  0010B4  0E7F               	movlw	127
  2203  0010B6  6E17               	movwf	??_sprintf& (0+255),c
  2204  0010B8  5021               	movf	sprintf@width,w,c
  2205  0010BA  5C23               	subwf	sprintf@c,w,c
  2206  0010BC  5022               	movf	sprintf@width+1,w,c
  2207  0010BE  0A80               	xorlw	128
  2208  0010C0  5817               	subwfb	??_sprintf& (0+255),w,c
  2209  0010C2  B0D8               	btfsc	status,0,c
  2210  0010C4  D007               	goto	l2044
  2211                           
  2212                           ;doprnt.c: 1382: width -= c;
  2213  0010C6  5023               	movf	sprintf@c,w,c
  2214  0010C8  5E21               	subwf	sprintf@width,f,c
  2215  0010CA  0E00               	movlw	0
  2216  0010CC  BE23               	btfsc	sprintf@c,7,c
  2217  0010CE  0EFF               	movlw	255
  2218  0010D0  5A22               	subwfb	sprintf@width+1,f,c
  2219  0010D2  D005               	goto	l2046
  2220  0010D4                     l2044:
  2221                           
  2222                           ;doprnt.c: 1383: else
  2223                           ;doprnt.c: 1384: width = 0;
  2224  0010D4  0E00               	movlw	0
  2225  0010D6  6E22               	movwf	sprintf@width+1,c
  2226  0010D8  0E00               	movlw	0
  2227  0010DA  6E21               	movwf	sprintf@width,c
  2228  0010DC  D000               	goto	l2046
  2229  0010DE                     l2046:
  2230                           
  2231                           ;doprnt.c: 1387: if(flag & 0x04) {
  2232  0010DE  A41D               	btfss	sprintf@flag,2,c
  2233  0010E0  D015               	goto	l2056
  2234                           
  2235                           ;doprnt.c: 1415: if(width)
  2236  0010E2  5021               	movf	sprintf@width,w,c
  2237  0010E4  1022               	iorwf	sprintf@width+1,w,c
  2238  0010E6  B4D8               	btfsc	status,2,c
  2239  0010E8  D026               	goto	l327
  2240  0010EA                     l2050:
  2241                           
  2242                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2243  0010EA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2244  0010EE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2245  0010F2  0E30               	movlw	48
  2246  0010F4  6EDF               	movwf	indf2,c
  2247  0010F6  4A0D               	infsnz	sprintf@sp,f,c
  2248  0010F8  2A0E               	incf	sprintf@sp+1,f,c
  2249                           
  2250                           ;doprnt.c: 1418: while(--width);
  2251  0010FA  0621               	decf	sprintf@width,f,c
  2252  0010FC  A0D8               	btfss	status,0,c
  2253  0010FE  0622               	decf	sprintf@width+1,f,c
  2254  001100  5021               	movf	sprintf@width,w,c
  2255  001102  1022               	iorwf	sprintf@width+1,w,c
  2256  001104  B4D8               	btfsc	status,2,c
  2257  001106  D017               	goto	l327
  2258  001108  D7F0               	goto	l2050
  2259                           
  2260                           ;doprnt.c: 1420: } else
  2261  00110A  D015               	goto	l327
  2262  00110C                     l2056:
  2263                           
  2264                           ;doprnt.c: 1422: {
  2265                           ;doprnt.c: 1424: if(width
  2266                           ;doprnt.c: 1428: )
  2267  00110C  5021               	movf	sprintf@width,w,c
  2268  00110E  1022               	iorwf	sprintf@width+1,w,c
  2269  001110  B4D8               	btfsc	status,2,c
  2270  001112  D011               	goto	l327
  2271  001114                     l2058:
  2272                           
  2273                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2274  001114  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2275  001118  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2276  00111C  0E20               	movlw	32
  2277  00111E  6EDF               	movwf	indf2,c
  2278  001120  4A0D               	infsnz	sprintf@sp,f,c
  2279  001122  2A0E               	incf	sprintf@sp+1,f,c
  2280                           
  2281                           ;doprnt.c: 1431: while(--width);
  2282  001124  0621               	decf	sprintf@width,f,c
  2283  001126  A0D8               	btfss	status,0,c
  2284  001128  0622               	decf	sprintf@width+1,f,c
  2285  00112A  5021               	movf	sprintf@width,w,c
  2286  00112C  1022               	iorwf	sprintf@width+1,w,c
  2287  00112E  B4D8               	btfsc	status,2,c
  2288  001130  D002               	goto	l327
  2289  001132  D7F0               	goto	l2058
  2290  001134  D000               	goto	l327
  2291  001136                     l327:
  2292                           
  2293                           ;doprnt.c: 1469: }
  2294                           ;doprnt.c: 1472: prec = c;
  2295  001136  C023  F020         	movff	sprintf@c,sprintf@prec
  2296                           
  2297                           ;doprnt.c: 1474: while(prec--) {
  2298  00113A  D02A               	goto	l2070
  2299  00113C                     l2064:
  2300                           
  2301                           ;doprnt.c: 1478: {
  2302                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2303  00113C  5020               	movf	sprintf@prec,w,c
  2304  00113E  0D02               	mullw	2
  2305  001140  0E01               	movlw	low _dpowers
  2306  001142  24F3               	addwf	prodl,w,c
  2307  001144  6EF6               	movwf	tblptrl,c
  2308  001146  0E0F               	movlw	high _dpowers
  2309  001148  20F4               	addwfc	prodh,w,c
  2310  00114A  6EF7               	movwf	tblptrh,c
  2311  00114C                     	if	0	;There are less than 3 active tblptr bytes
  2312  00114C                     	endif
  2313  00114C  0009               	tblrd		*+
  2314  00114E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2315  001152  000A               	tblrd		*-
  2316  001154  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2317  001158  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2318  00115C  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2319  001160  EC70  F00E         	call	___lwdiv	;wreg free
  2320  001164  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2321  001168  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2322  00116C  0E00               	movlw	0
  2323  00116E  6E0B               	movwf	___lwmod@divisor+1,c
  2324  001170  0E0A               	movlw	10
  2325  001172  6E0A               	movwf	___lwmod@divisor,c
  2326  001174  ECC8  F00E         	call	___lwmod	;wreg free
  2327  001178  5008               	movf	?___lwmod,w,c
  2328  00117A  0F30               	addlw	48
  2329  00117C  6E23               	movwf	sprintf@c,c
  2330                           
  2331                           ;doprnt.c: 1523: }
  2332                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2333  00117E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2334  001182  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2335  001186  C023  FFDF         	movff	sprintf@c,indf2
  2336  00118A  4A0D               	infsnz	sprintf@sp,f,c
  2337  00118C  2A0E               	incf	sprintf@sp+1,f,c
  2338  00118E  D000               	goto	l2070
  2339  001190                     l2070:
  2340  001190  0620               	decf	sprintf@prec,f,c
  2341  001192  2820               	incf	sprintf@prec,w,c
  2342  001194  B4D8               	btfsc	status,2,c
  2343  001196  D002               	goto	l2072
  2344  001198  D7D1               	goto	l2064
  2345  00119A  D000               	goto	l2072
  2346  00119C                     l2072:
  2347  00119C  C00F  FFF6         	movff	sprintf@f,tblptrl
  2348  0011A0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2349  0011A4  4A0F               	infsnz	sprintf@f,f,c
  2350  0011A6  2A10               	incf	sprintf@f+1,f,c
  2351  0011A8                     	if	0	;tblptru may be non-zero
  2352  0011A8                     	endif
  2353  0011A8                     	if	0	;tblptru may be non-zero
  2354  0011A8                     	endif
  2355  0011A8  0008               	tblrd		*
  2356  0011AA  CFF5 F023          	movff	tablat,sprintf@c
  2357  0011AE  5023               	movf	sprintf@c,w,c
  2358  0011B0  B4D8               	btfsc	status,2,c
  2359  0011B2  D002               	goto	l2074
  2360  0011B4  D6DC               	goto	l1990
  2361  0011B6  D000               	goto	l2074
  2362  0011B8                     l2074:
  2363                           
  2364                           ;doprnt.c: 1538: *sp = 0;
  2365  0011B8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2366  0011BC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2367  0011C0  0E00               	movlw	0
  2368  0011C2  6EDF               	movwf	indf2,c
  2369  0011C4  0012               	return	
  2370                           
  2371                           ;doprnt.c: 1540: return 0;
  2372                           ;	Return value of _sprintf is never used
  2373  0011C6  0012               	return		;funcret
  2374  0011C8                     __end_of_sprintf:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           postinc1	equ	0xFE6
  2385                           postdec1	equ	0xFE5
  2386                           fsr1h	equ	0xFE2
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _isdigit *****************
  2396 ;; Defined at:
  2397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  c               1    wreg     unsigned char 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  c               1    2[COMRAM] unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;		None               void
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2415 ;;Total ram usage:        3 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_sprintf
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text9
  2425  001FB2                     __ptext9:
  2426                           	opt stack 0
  2427  001FB2                     _isdigit:
  2428                           	opt stack 27
  2429                           
  2430                           ;incstack = 0
  2431                           ;isdigit@c stored from wreg
  2432  001FB2  6E03               	movwf	isdigit@c,c
  2433  001FB4  0E00               	movlw	0
  2434  001FB6  6E02               	movwf	_isdigit$2066,c
  2435  001FB8  0E3A               	movlw	58
  2436  001FBA  6003               	cpfslt	isdigit@c,c
  2437  001FBC  D006               	goto	l1926
  2438  001FBE  0E2F               	movlw	47
  2439  001FC0  6403               	cpfsgt	isdigit@c,c
  2440  001FC2  D003               	goto	l1926
  2441  001FC4  0E01               	movlw	1
  2442  001FC6  6E02               	movwf	_isdigit$2066,c
  2443  001FC8  D000               	goto	l1926
  2444  001FCA                     l1926:
  2445  001FCA  C002  F001         	movff	_isdigit$2066,??_isdigit
  2446  001FCE  3001               	rrcf	??_isdigit,w,c
  2447  001FD0  0012               	return	
  2448  001FD2  0012               	return		;funcret
  2449  001FD4                     __end_of_isdigit:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           postinc1	equ	0xFE6
  2460                           postdec1	equ	0xFE5
  2461                           fsr1h	equ	0xFE2
  2462                           fsr1l	equ	0xFE1
  2463                           indf2	equ	0xFDF
  2464                           postinc2	equ	0xFDE
  2465                           postdec2	equ	0xFDD
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function ___wmul *****************
  2471 ;; Defined at:
  2472 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  multiplier      2    0[COMRAM] unsigned int 
  2475 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  product         2    4[COMRAM] unsigned int 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2    0[COMRAM] unsigned int 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0, prodl, prodh
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2491 ;;Total ram usage:        6 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_sprintf
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text10
  2501  001F66                     __ptext10:
  2502                           	opt stack 0
  2503  001F66                     ___wmul:
  2504                           	opt stack 27
  2505                           
  2506                           ;incstack = 0
  2507  001F66  5001               	movf	___wmul@multiplier,w,c
  2508  001F68  0203               	mulwf	___wmul@multiplicand,c
  2509  001F6A  CFF3 F005          	movff	prodl,___wmul@product
  2510  001F6E  CFF4 F006          	movff	prodh,___wmul@product+1
  2511  001F72  5001               	movf	___wmul@multiplier,w,c
  2512  001F74  0204               	mulwf	___wmul@multiplicand+1,c
  2513  001F76  50F3               	movf	prodl,w,c
  2514  001F78  2606               	addwf	___wmul@product+1,f,c
  2515  001F7A  5002               	movf	___wmul@multiplier+1,w,c
  2516  001F7C  0203               	mulwf	___wmul@multiplicand,c
  2517  001F7E  50F3               	movf	prodl,w,c
  2518  001F80  2606               	addwf	___wmul@product+1,f,c
  2519  001F82  C005  F001         	movff	___wmul@product,?___wmul
  2520  001F86  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2521  001F8A  0012               	return	
  2522  001F8C  0012               	return		;funcret
  2523  001F8E                     __end_of___wmul:
  2524                           	opt stack 0
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postinc1	equ	0xFE6
  2534                           postdec1	equ	0xFE5
  2535                           fsr1h	equ	0xFE2
  2536                           fsr1l	equ	0xFE1
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function ___lwmod *****************
  2545 ;; Defined at:
  2546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  dividend        2    7[COMRAM] unsigned int 
  2549 ;;  divisor         2    9[COMRAM] unsigned int 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  counter         1   11[COMRAM] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  2    7[COMRAM] unsigned int 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2561 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2564 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2565 ;;Total ram usage:        5 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_sprintf
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text11
  2575  001D90                     __ptext11:
  2576                           	opt stack 0
  2577  001D90                     ___lwmod:
  2578                           	opt stack 27
  2579                           
  2580                           ;incstack = 0
  2581  001D90  500A               	movf	___lwmod@divisor,w,c
  2582  001D92  100B               	iorwf	___lwmod@divisor+1,w,c
  2583  001D94  B4D8               	btfsc	status,2,c
  2584  001D96  D01D               	goto	l981
  2585  001D98  0E01               	movlw	1
  2586  001D9A  6E0C               	movwf	___lwmod@counter,c
  2587  001D9C  D005               	goto	l1964
  2588  001D9E                     l1962:
  2589  001D9E  90D8               	bcf	status,0,c
  2590  001DA0  360A               	rlcf	___lwmod@divisor,f,c
  2591  001DA2  360B               	rlcf	___lwmod@divisor+1,f,c
  2592  001DA4  2A0C               	incf	___lwmod@counter,f,c
  2593  001DA6  D000               	goto	l1964
  2594  001DA8                     l1964:
  2595  001DA8  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2596  001DAA  D002               	goto	l1966
  2597  001DAC  D7F8               	goto	l1962
  2598  001DAE  D000               	goto	l1966
  2599  001DB0                     l1966:
  2600  001DB0  500A               	movf	___lwmod@divisor,w,c
  2601  001DB2  5C08               	subwf	___lwmod@dividend,w,c
  2602  001DB4  500B               	movf	___lwmod@divisor+1,w,c
  2603  001DB6  5809               	subwfb	___lwmod@dividend+1,w,c
  2604  001DB8  A0D8               	btfss	status,0,c
  2605  001DBA  D005               	goto	l1970
  2606  001DBC  500A               	movf	___lwmod@divisor,w,c
  2607  001DBE  5E08               	subwf	___lwmod@dividend,f,c
  2608  001DC0  500B               	movf	___lwmod@divisor+1,w,c
  2609  001DC2  5A09               	subwfb	___lwmod@dividend+1,f,c
  2610  001DC4  D000               	goto	l1970
  2611  001DC6                     l1970:
  2612  001DC6  90D8               	bcf	status,0,c
  2613  001DC8  320B               	rrcf	___lwmod@divisor+1,f,c
  2614  001DCA  320A               	rrcf	___lwmod@divisor,f,c
  2615  001DCC  2E0C               	decfsz	___lwmod@counter,f,c
  2616  001DCE  D7F0               	goto	l1966
  2617  001DD0  D000               	goto	l981
  2618  001DD2                     l981:
  2619  001DD2  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2620  001DD6  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2621  001DDA  0012               	return		;funcret
  2622  001DDC                     __end_of___lwmod:
  2623                           	opt stack 0
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postinc1	equ	0xFE6
  2633                           postdec1	equ	0xFE5
  2634                           fsr1h	equ	0xFE2
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function ___lwdiv *****************
  2644 ;; Defined at:
  2645 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  dividend        2    0[COMRAM] unsigned int 
  2648 ;;  divisor         2    2[COMRAM] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  quotient        2    4[COMRAM] unsigned int 
  2651 ;;  counter         1    6[COMRAM] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  2    0[COMRAM] unsigned int 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2662 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2664 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2665 ;;Total ram usage:        7 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_sprintf
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text12
  2675  001CE0                     __ptext12:
  2676                           	opt stack 0
  2677  001CE0                     ___lwdiv:
  2678                           	opt stack 27
  2679                           
  2680                           ;incstack = 0
  2681  001CE0  0E00               	movlw	0
  2682  001CE2  6E06               	movwf	___lwdiv@quotient+1,c
  2683  001CE4  0E00               	movlw	0
  2684  001CE6  6E05               	movwf	___lwdiv@quotient,c
  2685  001CE8  5003               	movf	___lwdiv@divisor,w,c
  2686  001CEA  1004               	iorwf	___lwdiv@divisor+1,w,c
  2687  001CEC  B4D8               	btfsc	status,2,c
  2688  001CEE  D021               	goto	l971
  2689  001CF0  0E01               	movlw	1
  2690  001CF2  6E07               	movwf	___lwdiv@counter,c
  2691  001CF4  D005               	goto	l1944
  2692  001CF6                     l1942:
  2693  001CF6  90D8               	bcf	status,0,c
  2694  001CF8  3603               	rlcf	___lwdiv@divisor,f,c
  2695  001CFA  3604               	rlcf	___lwdiv@divisor+1,f,c
  2696  001CFC  2A07               	incf	___lwdiv@counter,f,c
  2697  001CFE  D000               	goto	l1944
  2698  001D00                     l1944:
  2699  001D00  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2700  001D02  D002               	goto	l1946
  2701  001D04  D7F8               	goto	l1942
  2702  001D06  D000               	goto	l1946
  2703  001D08                     l1946:
  2704  001D08  90D8               	bcf	status,0,c
  2705  001D0A  3605               	rlcf	___lwdiv@quotient,f,c
  2706  001D0C  3606               	rlcf	___lwdiv@quotient+1,f,c
  2707  001D0E  5003               	movf	___lwdiv@divisor,w,c
  2708  001D10  5C01               	subwf	___lwdiv@dividend,w,c
  2709  001D12  5004               	movf	___lwdiv@divisor+1,w,c
  2710  001D14  5802               	subwfb	___lwdiv@dividend+1,w,c
  2711  001D16  A0D8               	btfss	status,0,c
  2712  001D18  D006               	goto	l1954
  2713  001D1A  5003               	movf	___lwdiv@divisor,w,c
  2714  001D1C  5E01               	subwf	___lwdiv@dividend,f,c
  2715  001D1E  5004               	movf	___lwdiv@divisor+1,w,c
  2716  001D20  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2717  001D22  8005               	bsf	___lwdiv@quotient,0,c
  2718  001D24  D000               	goto	l1954
  2719  001D26                     l1954:
  2720  001D26  90D8               	bcf	status,0,c
  2721  001D28  3204               	rrcf	___lwdiv@divisor+1,f,c
  2722  001D2A  3203               	rrcf	___lwdiv@divisor,f,c
  2723  001D2C  2E07               	decfsz	___lwdiv@counter,f,c
  2724  001D2E  D7EC               	goto	l1946
  2725  001D30  D000               	goto	l971
  2726  001D32                     l971:
  2727  001D32  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2728  001D36  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2729  001D3A  0012               	return		;funcret
  2730  001D3C                     __end_of___lwdiv:
  2731                           	opt stack 0
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodh	equ	0xFF4
  2737                           prodl	equ	0xFF3
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postinc1	equ	0xFE6
  2741                           postdec1	equ	0xFE5
  2742                           fsr1h	equ	0xFE2
  2743                           fsr1l	equ	0xFE1
  2744                           indf2	equ	0xFDF
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _lcd_putrs *****************
  2752 ;; Defined at:
  2753 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2756 ;;		 -> STR_13(9), STR_12(11), STR_11(14), ingresar_password@clear(16), 
  2757 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(2), 
  2758 ;;		 -> STR_4(2), STR_3(2), STR_2(2), buffer2(20), 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;		None               void
  2763 ;; Registers used:
  2764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2770 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2773 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2774 ;;Total ram usage:        2 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    4
  2777 ;; This function calls:
  2778 ;;		_lcd_putc
  2779 ;; This function is called by:
  2780 ;;		_imprimir_tecla
  2781 ;;		_guardar_tecla_presionada
  2782 ;;		_leer_teclado
  2783 ;;		_caratula
  2784 ;;		_ingresar_password
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text13
  2789  001D3C                     __ptext13:
  2790                           	opt stack 0
  2791  001D3C                     _lcd_putrs:
  2792                           	opt stack 25
  2793                           
  2794                           ;unmc_lcd_216.c: 223: while(*ptr){
  2795                           
  2796                           ;incstack = 0
  2797  001D3C  D015               	goto	l2084
  2798  001D3E                     l2080:
  2799                           
  2800                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2801  001D3E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2802  001D42  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2803  001D46  6AF8               	clrf	tblptru,c
  2804  001D48  0E0E               	movlw	(high __ramtop+-1)
  2805  001D4A  64F7               	cpfsgt	tblptrh,c
  2806  001D4C  D003               	bra	u1377
  2807  001D4E  0008               	tblrd		*
  2808  001D50  50F5               	movf	tablat,w,c
  2809  001D52  D005               	bra	u1370
  2810  001D54                     u1377:
  2811  001D54  CFF6 FFE9          	movff	tblptrl,fsr0l
  2812  001D58  CFF7 FFEA          	movff	tblptrh,fsr0h
  2813  001D5C  50EF               	movf	indf0,w,c
  2814  001D5E                     u1370:
  2815  001D5E  ECEE  F00E         	call	_lcd_putc
  2816  001D62  4A09               	infsnz	lcd_putrs@ptr,f,c
  2817  001D64  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2818  001D66  D000               	goto	l2084
  2819  001D68                     l2084:
  2820  001D68  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2821  001D6C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2822  001D70  6AF8               	clrf	tblptru,c
  2823  001D72  0E0E               	movlw	(high __ramtop+-1)
  2824  001D74  64F7               	cpfsgt	tblptrh,c
  2825  001D76  D003               	bra	u1387
  2826  001D78  0008               	tblrd		*
  2827  001D7A  50F5               	movf	tablat,w,c
  2828  001D7C  D005               	bra	u1380
  2829  001D7E                     u1387:
  2830  001D7E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2831  001D82  CFF7 FFEA          	movff	tblptrh,fsr0h
  2832  001D86  50EF               	movf	indf0,w,c
  2833  001D88                     u1380:
  2834  001D88  0900               	iorlw	0
  2835  001D8A  A4D8               	btfss	status,2,c
  2836  001D8C  D7D8               	goto	l2080
  2837  001D8E  0012               	return		;funcret
  2838  001D90                     __end_of_lcd_putrs:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           indf0	equ	0xFEF
  2847                           postinc0	equ	0xFEE
  2848                           fsr0h	equ	0xFEA
  2849                           fsr0l	equ	0xFE9
  2850                           wreg	equ	0xFE8
  2851                           postinc1	equ	0xFE6
  2852                           postdec1	equ	0xFE5
  2853                           fsr1h	equ	0xFE2
  2854                           fsr1l	equ	0xFE1
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           postdec2	equ	0xFDD
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _lcd_putc *****************
  2863 ;; Defined at:
  2864 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  c               1    wreg     unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  c               1    7[COMRAM] unsigned char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;		None               void
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2882 ;;Total ram usage:        1 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    3
  2885 ;; This function calls:
  2886 ;;		_lcd_gotoxy
  2887 ;;		_lcd_send_byte
  2888 ;; This function is called by:
  2889 ;;		_lcd_putrs
  2890 ;;		_lcd_puts
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text14
  2895  001DDC                     __ptext14:
  2896                           	opt stack 0
  2897  001DDC                     _lcd_putc:
  2898                           	opt stack 25
  2899                           
  2900                           ;incstack = 0
  2901                           ;lcd_putc@c stored from wreg
  2902  001DDC  6E08               	movwf	lcd_putc@c,c
  2903                           
  2904                           ;unmc_lcd_216.c: 173: switch(c){
  2905  001DDE  D018               	goto	l1916
  2906  001DE0                     l1906:
  2907                           
  2908                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2909  001DE0  0E01               	movlw	1
  2910  001DE2  6E03               	movwf	lcd_send_byte@n,c
  2911  001DE4  0E00               	movlw	0
  2912  001DE6  EC9A  F00F         	call	_lcd_send_byte
  2913                           
  2914                           ;unmc_lcd_216.c: 176: break;
  2915  001DEA  0012               	return	
  2916  001DEC                     l1908:
  2917                           
  2918                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2919  001DEC  0E02               	movlw	2
  2920  001DEE  6E05               	movwf	lcd_gotoxy@y,c
  2921  001DF0  0E01               	movlw	1
  2922  001DF2  ECC7  F00F         	call	_lcd_gotoxy
  2923                           
  2924                           ;unmc_lcd_216.c: 179: break;
  2925  001DF6  0012               	return	
  2926  001DF8                     l1910:
  2927                           
  2928                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2929  001DF8  0E10               	movlw	16
  2930  001DFA  6E03               	movwf	lcd_send_byte@n,c
  2931  001DFC  0E00               	movlw	0
  2932  001DFE  EC9A  F00F         	call	_lcd_send_byte
  2933                           
  2934                           ;unmc_lcd_216.c: 182: break;
  2935  001E02  0012               	return	
  2936  001E04                     l1912:
  2937                           
  2938                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2939  001E04  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2940  001E08  0E01               	movlw	1
  2941  001E0A  EC9A  F00F         	call	_lcd_send_byte
  2942                           
  2943                           ;unmc_lcd_216.c: 186: }
  2944                           
  2945                           ;unmc_lcd_216.c: 185: break;
  2946  001E0E  0012               	return	
  2947  001E10                     l1916:
  2948  001E10  5008               	movf	lcd_putc@c,w,c
  2949                           
  2950                           ; Switch size 1, requested type "space"
  2951                           ; Number of cases is 3, Range of values is 8 to 12
  2952                           ; switch strategies available:
  2953                           ; Name         Instructions Cycles
  2954                           ; simple_byte           10     6 (average)
  2955                           ;	Chosen strategy is simple_byte
  2956  001E12  0A08               	xorlw	8	; case 8
  2957  001E14  B4D8               	btfsc	status,2,c
  2958  001E16  D7F0               	goto	l1910
  2959  001E18  0A02               	xorlw	2	; case 10
  2960  001E1A  B4D8               	btfsc	status,2,c
  2961  001E1C  D7E7               	goto	l1908
  2962  001E1E  0A06               	xorlw	6	; case 12
  2963  001E20  B4D8               	btfsc	status,2,c
  2964  001E22  D7DE               	goto	l1906
  2965  001E24  D7EF               	goto	l1912
  2966  001E26  0012               	return		;funcret
  2967  001E28                     __end_of_lcd_putc:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           indf0	equ	0xFEF
  2976                           postinc0	equ	0xFEE
  2977                           fsr0h	equ	0xFEA
  2978                           fsr0l	equ	0xFE9
  2979                           wreg	equ	0xFE8
  2980                           postinc1	equ	0xFE6
  2981                           postdec1	equ	0xFE5
  2982                           fsr1h	equ	0xFE2
  2983                           fsr1l	equ	0xFE1
  2984                           indf2	equ	0xFDF
  2985                           postinc2	equ	0xFDE
  2986                           postdec2	equ	0xFDD
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _lcd_gotoxy *****************
  2992 ;; Defined at:
  2993 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  x               1    wreg     unsigned char 
  2996 ;;  y               1    4[COMRAM] unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  x               1    5[COMRAM] unsigned char 
  2999 ;;  address         1    6[COMRAM] unsigned char 
  3000 ;; Return value:  Size  Location     Type
  3001 ;;		None               void
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3009 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3012 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3013 ;;Total ram usage:        3 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    2
  3016 ;; This function calls:
  3017 ;;		_lcd_send_byte
  3018 ;; This function is called by:
  3019 ;;		_caratula
  3020 ;;		_ingresar_password
  3021 ;;		_lcd_putc
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text15
  3026  001F8E                     __ptext15:
  3027                           	opt stack 0
  3028  001F8E                     _lcd_gotoxy:
  3029                           	opt stack 25
  3030                           
  3031                           ;incstack = 0
  3032                           ;lcd_gotoxy@x stored from wreg
  3033  001F8E  6E06               	movwf	lcd_gotoxy@x,c
  3034                           
  3035                           ;unmc_lcd_216.c: 159: int8 address;
  3036                           ;unmc_lcd_216.c: 161: if(y != 1)
  3037  001F90  0405               	decf	lcd_gotoxy@y,w,c
  3038  001F92  B4D8               	btfsc	status,2,c
  3039  001F94  D002               	goto	l1898
  3040                           
  3041                           ;unmc_lcd_216.c: 162: address = 0x40;
  3042  001F96  0E40               	movlw	64
  3043  001F98  D001               	goto	L1
  3044  001F9A                     l1898:
  3045                           
  3046                           ;unmc_lcd_216.c: 163: else
  3047                           ;unmc_lcd_216.c: 164: address=0;
  3048  001F9A  0E00               	movlw	0
  3049  001F9C                     L1:
  3050  001F9C  6E07               	movwf	lcd_gotoxy@address,c
  3051  001F9E  D000               	goto	l1900
  3052  001FA0                     l1900:
  3053                           
  3054                           ;unmc_lcd_216.c: 166: address += x-1;
  3055  001FA0  0406               	decf	lcd_gotoxy@x,w,c
  3056  001FA2  2607               	addwf	lcd_gotoxy@address,f,c
  3057                           
  3058                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  3059  001FA4  5007               	movf	lcd_gotoxy@address,w,c
  3060  001FA6  0980               	iorlw	128
  3061  001FA8  6E03               	movwf	lcd_send_byte@n,c
  3062  001FAA  0E00               	movlw	0
  3063  001FAC  EC9A  F00F         	call	_lcd_send_byte
  3064  001FB0  0012               	return		;funcret
  3065  001FB2                     __end_of_lcd_gotoxy:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           indf0	equ	0xFEF
  3074                           postinc0	equ	0xFEE
  3075                           fsr0h	equ	0xFEA
  3076                           fsr0l	equ	0xFE9
  3077                           wreg	equ	0xFE8
  3078                           postinc1	equ	0xFE6
  3079                           postdec1	equ	0xFE5
  3080                           fsr1h	equ	0xFE2
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _Setup *****************
  3090 ;; Defined at:
  3091 ;;		line 58 in file "main.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;		None               void
  3098 ;; Registers used:
  3099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3109 ;;Total ram usage:        0 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    3
  3112 ;; This function calls:
  3113 ;;		_Write_RTC
  3114 ;;		_lcd_comand
  3115 ;;		_lcd_init
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text16
  3122  001E72                     __ptext16:
  3123                           	opt stack 0
  3124  001E72                     _Setup:
  3125                           	opt stack 27
  3126                           
  3127                           ;main.c: 60: OSCTUNEbits.INTSRC=1;
  3128                           
  3129                           ;incstack = 0
  3130  001E72  8E9B               	bsf	3995,7,c	;volatile
  3131                           
  3132                           ;main.c: 61: OSCTUNEbits.PLLEN=0;
  3133  001E74  9C9B               	bcf	3995,6,c	;volatile
  3134                           
  3135                           ;main.c: 62: OSCCONbits.IRCF0=1;
  3136  001E76  88D3               	bsf	4051,4,c	;volatile
  3137                           
  3138                           ;main.c: 63: OSCCONbits.IRCF1=1;
  3139  001E78  8AD3               	bsf	4051,5,c	;volatile
  3140                           
  3141                           ;main.c: 64: OSCCONbits.IRCF2=1;
  3142  001E7A  8CD3               	bsf	4051,6,c	;volatile
  3143                           
  3144                           ;main.c: 65: OSCCONbits.SCS0=0;
  3145  001E7C  90D3               	bcf	4051,0,c	;volatile
  3146                           
  3147                           ;main.c: 66: OSCCONbits.SCS1=0;
  3148  001E7E  92D3               	bcf	4051,1,c	;volatile
  3149                           
  3150                           ;main.c: 67: TRISA = 0b11110000;
  3151  001E80  0EF0               	movlw	240
  3152  001E82  6E92               	movwf	3986,c	;volatile
  3153                           
  3154                           ;main.c: 68: TRISB = 0;
  3155  001E84  0E00               	movlw	0
  3156  001E86  6E93               	movwf	3987,c	;volatile
  3157                           
  3158                           ;main.c: 69: TRISC = 0b00000111;
  3159  001E88  0E07               	movlw	7
  3160  001E8A  6E94               	movwf	3988,c	;volatile
  3161                           
  3162                           ;main.c: 73: ANCON0=0b11111111;
  3163  001E8C  010F               	movlb	15	; () banked
  3164  001E8E  6948               	setf	72,b	;volatile
  3165                           
  3166                           ; BSR set to: 15
  3167                           ;main.c: 75: ANCON1=0b11111111;
  3168  001E90  010F               	movlb	15	; () banked
  3169  001E92  6949               	setf	73,b	;volatile
  3170                           
  3171                           ;main.c: 76: ADCON0=0b00101101;
  3172  001E94  0E2D               	movlw	45
  3173  001E96  6EC2               	movwf	4034,c	;volatile
  3174                           
  3175                           ;main.c: 77: ADCON1=0b00010000;
  3176  001E98  0E10               	movlw	16
  3177  001E9A  6EC1               	movwf	4033,c	;volatile
  3178                           
  3179                           ; BSR set to: 15
  3180                           ;main.c: 78: RTCCFGbits.RTCEN=1;
  3181  001E9C  010F               	movlb	15	; () banked
  3182  001E9E  8F3F               	bsf	63,7,b	;volatile
  3183                           
  3184                           ; BSR set to: 15
  3185                           ;main.c: 79: RTCCFGbits.RTCWREN=1;
  3186  001EA0  010F               	movlb	15	; () banked
  3187  001EA2  8B3F               	bsf	63,5,b	;volatile
  3188                           
  3189                           ; BSR set to: 15
  3190                           ;main.c: 80: T1CONbits.T1OSCEN=1;
  3191  001EA4  86CD               	bsf	4045,3,c	;volatile
  3192                           
  3193                           ; BSR set to: 15
  3194                           ;main.c: 81: Write_RTC();
  3195  001EA6  ECE4  F008         	call	_Write_RTC	;wreg free
  3196                           
  3197                           ;main.c: 82: lcd_init();
  3198  001EAA  EC2C  F00D         	call	_lcd_init	;wreg free
  3199                           
  3200                           ;main.c: 83: lcd_comand(0b00001100);
  3201  001EAE  0E0C               	movlw	12
  3202  001EB0  EC05  F010         	call	_lcd_comand
  3203                           
  3204                           ;main.c: 84: LATBbits.LATB1 = 1;;
  3205  001EB4  828A               	bsf	3978,1,c	;volatile
  3206                           
  3207                           ;main.c: 85: LATBbits.LATB0 = 1;;
  3208  001EB6  808A               	bsf	3978,0,c	;volatile
  3209  001EB8  0012               	return		;funcret
  3210  001EBA                     __end_of_Setup:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           indf0	equ	0xFEF
  3219                           postinc0	equ	0xFEE
  3220                           fsr0h	equ	0xFEA
  3221                           fsr0l	equ	0xFE9
  3222                           wreg	equ	0xFE8
  3223                           postinc1	equ	0xFE6
  3224                           postdec1	equ	0xFE5
  3225                           fsr1h	equ	0xFE2
  3226                           fsr1l	equ	0xFE1
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _lcd_init *****************
  3235 ;; Defined at:
  3236 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  i               1    4[COMRAM] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;		None               void
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3254 ;;Total ram usage:        1 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    2
  3257 ;; This function calls:
  3258 ;;		_Delay1KTCYx
  3259 ;;		_lcd_send_byte
  3260 ;;		_lcd_send_nibble
  3261 ;; This function is called by:
  3262 ;;		_Setup
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text17
  3267  001A58                     __ptext17:
  3268                           	opt stack 0
  3269  001A58                     _lcd_init:
  3270                           	opt stack 27
  3271                           
  3272                           ;unmc_lcd_216.c: 120: int8 i;
  3273                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3274                           
  3275                           ;incstack = 0
  3276  001A58  9693               	bcf	3987,3,c	;volatile
  3277                           
  3278                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3279  001A5A  9493               	bcf	3987,2,c	;volatile
  3280                           
  3281                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3282  001A5C  968A               	bcf	3978,3,c	;volatile
  3283                           
  3284                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3285  001A5E  948A               	bcf	3978,2,c	;volatile
  3286                           
  3287                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3288  001A60  9893               	bcf	3987,4,c	;volatile
  3289                           
  3290                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3291  001A62  9A93               	bcf	3987,5,c	;volatile
  3292                           
  3293                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3294  001A64  9C93               	bcf	3987,6,c	;volatile
  3295                           
  3296                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3297  001A66  9E93               	bcf	3987,7,c	;volatile
  3298                           
  3299                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3300  001A68  0E0A               	movlw	10
  3301  001A6A  ECEA  F00F         	call	_Delay1KTCYx
  3302                           
  3303                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3304  001A6E  0E0A               	movlw	10
  3305  001A70  ECEA  F00F         	call	_Delay1KTCYx
  3306                           
  3307                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3308  001A74  0E0A               	movlw	10
  3309  001A76  ECEA  F00F         	call	_Delay1KTCYx
  3310                           
  3311                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3312  001A7A  0E00               	movlw	0
  3313  001A7C  6E05               	movwf	lcd_init@i,c
  3314  001A7E                     l2422:
  3315  001A7E  0E02               	movlw	2
  3316  001A80  6405               	cpfsgt	lcd_init@i,c
  3317  001A82  D001               	goto	l2426
  3318  001A84  D008               	goto	l2432
  3319  001A86                     l2426:
  3320                           
  3321                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3322  001A86  0E03               	movlw	3
  3323  001A88  EC6C  F00D         	call	_lcd_send_nibble
  3324                           
  3325                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3326  001A8C  0E0A               	movlw	10
  3327  001A8E  ECEA  F00F         	call	_Delay1KTCYx
  3328  001A92  2A05               	incf	lcd_init@i,f,c
  3329  001A94  D7F4               	goto	l2422
  3330  001A96                     l2432:
  3331                           
  3332                           ;unmc_lcd_216.c: 146: }
  3333                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3334  001A96  0E02               	movlw	2
  3335  001A98  EC6C  F00D         	call	_lcd_send_nibble
  3336                           
  3337                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3338  001A9C  0E00               	movlw	0
  3339  001A9E  6E05               	movwf	lcd_init@i,c
  3340  001AA0  0E03               	movlw	3
  3341  001AA2  6405               	cpfsgt	lcd_init@i,c
  3342  001AA4  D002               	goto	l2440
  3343  001AA6  0012               	return	
  3344  001AA8  0012               	return	
  3345  001AAA                     l2440:
  3346                           
  3347                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3348  001AAA  5005               	movf	lcd_init@i,w,c
  3349  001AAC  0D01               	mullw	1
  3350  001AAE  0E0B               	movlw	low _LCD_INIT_STRING
  3351  001AB0  24F3               	addwf	prodl,w,c
  3352  001AB2  6EF6               	movwf	tblptrl,c
  3353  001AB4  0E0F               	movlw	high _LCD_INIT_STRING
  3354  001AB6  20F4               	addwfc	prodh,w,c
  3355  001AB8  6EF7               	movwf	tblptrh,c
  3356  001ABA                     	if	0	;There are less than 3 active tblptr bytes
  3357  001ABA                     	endif
  3358  001ABA  0008               	tblrd		*
  3359  001ABC  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3360  001AC0  0E00               	movlw	0
  3361  001AC2  EC9A  F00F         	call	_lcd_send_byte
  3362                           
  3363                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3364  001AC6  0E0A               	movlw	10
  3365  001AC8  ECEA  F00F         	call	_Delay1KTCYx
  3366  001ACC  2A05               	incf	lcd_init@i,f,c
  3367  001ACE  0E03               	movlw	3
  3368  001AD0  6405               	cpfsgt	lcd_init@i,c
  3369  001AD2  D7EB               	goto	l2440
  3370  001AD4  0012               	return	
  3371  001AD6  0012               	return		;funcret
  3372  001AD8                     __end_of_lcd_init:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           indf0	equ	0xFEF
  3381                           postinc0	equ	0xFEE
  3382                           fsr0h	equ	0xFEA
  3383                           fsr0l	equ	0xFE9
  3384                           wreg	equ	0xFE8
  3385                           postinc1	equ	0xFE6
  3386                           postdec1	equ	0xFE5
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _Delay1KTCYx *****************
  3397 ;; Defined at:
  3398 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  unit            1    wreg     unsigned char 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  unit            1    0[COMRAM] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;		None               void
  3405 ;; Registers used:
  3406 ;;		wreg
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3416 ;;Total ram usage:        1 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_lcd_init
  3422 ;;		_DelayPORXLCD
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text18
  3427  001FD4                     __ptext18:
  3428                           	opt stack 0
  3429  001FD4                     _Delay1KTCYx:
  3430                           	opt stack 28
  3431                           
  3432                           ;incstack = 0
  3433                           ;Delay1KTCYx@unit stored from wreg
  3434  001FD4  6E01               	movwf	Delay1KTCYx@unit,c
  3435  001FD6  0EFA               	movlw	250
  3436  001FD8                     u2097:
  3437  001FD8  F000               	nop	
  3438  001FDA  2EE8               	decfsz	wreg,f,c
  3439  001FDC  D7FD               	goto	u2097
  3440  001FDE  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3441  001FE0  D7FA               	goto	l1274
  3442  001FE2  0012               	return	
  3443  001FE4  0012               	return		;funcret
  3444  001FE6                     __end_of_Delay1KTCYx:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           indf0	equ	0xFEF
  3453                           postinc0	equ	0xFEE
  3454                           fsr0h	equ	0xFEA
  3455                           fsr0l	equ	0xFE9
  3456                           wreg	equ	0xFE8
  3457                           postinc1	equ	0xFE6
  3458                           postdec1	equ	0xFE5
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _lcd_comand *****************
  3469 ;; Defined at:
  3470 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  d               1    wreg     unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  d               1    4[COMRAM] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;		None               void
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3487 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3488 ;;Total ram usage:        1 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    2
  3491 ;; This function calls:
  3492 ;;		_lcd_send_byte
  3493 ;; This function is called by:
  3494 ;;		_caratula
  3495 ;;		_Setup
  3496 ;;		_ingresar_password
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text19
  3501  00200A                     __ptext19:
  3502                           	opt stack 0
  3503  00200A                     _lcd_comand:
  3504                           	opt stack 27
  3505                           
  3506                           ;incstack = 0
  3507                           ;lcd_comand@d stored from wreg
  3508  00200A  6E05               	movwf	lcd_comand@d,c
  3509                           
  3510                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3511  00200C  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3512  002010  0E00               	movlw	0
  3513  002012  EC9A  F00F         	call	_lcd_send_byte
  3514  002016  0012               	return		;funcret
  3515  002018                     __end_of_lcd_comand:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           indf0	equ	0xFEF
  3524                           postinc0	equ	0xFEE
  3525                           fsr0h	equ	0xFEA
  3526                           fsr0l	equ	0xFE9
  3527                           wreg	equ	0xFE8
  3528                           postinc1	equ	0xFE6
  3529                           postdec1	equ	0xFE5
  3530                           fsr1h	equ	0xFE2
  3531                           fsr1l	equ	0xFE1
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _lcd_send_byte *****************
  3540 ;; Defined at:
  3541 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  address         1    wreg     unsigned char 
  3544 ;;  n               1    2[COMRAM] unsigned char 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  address         1    3[COMRAM] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;		None               void
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3556 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3560 ;;Total ram usage:        2 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    1
  3563 ;; This function calls:
  3564 ;;		_Delay100TCYx
  3565 ;;		_lcd_send_nibble
  3566 ;; This function is called by:
  3567 ;;		_lcd_init
  3568 ;;		_lcd_gotoxy
  3569 ;;		_lcd_putc
  3570 ;;		_lcd_comand
  3571 ;;		_lcd_setcursor_vb
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text20
  3576  001F34                     __ptext20:
  3577                           	opt stack 0
  3578  001F34                     _lcd_send_byte:
  3579                           	opt stack 26
  3580                           
  3581                           ;incstack = 0
  3582                           ;lcd_send_byte@address stored from wreg
  3583  001F34  6E04               	movwf	lcd_send_byte@address,c
  3584                           
  3585                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3586  001F36  968A               	bcf	3978,3,c	;volatile
  3587                           
  3588                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3589  001F38  0E02               	movlw	2
  3590  001F3A  ECF3  F00F         	call	_Delay100TCYx
  3591                           
  3592                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3593  001F3E  9893               	bcf	3987,4,c	;volatile
  3594                           
  3595                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3596  001F40  9A93               	bcf	3987,5,c	;volatile
  3597                           
  3598                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3599  001F42  9C93               	bcf	3987,6,c	;volatile
  3600                           
  3601                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3602  001F44  9E93               	bcf	3987,7,c	;volatile
  3603                           
  3604                           ;unmc_lcd_216.c: 101: if(address)
  3605  001F46  5004               	movf	lcd_send_byte@address,w,c
  3606  001F48  B4D8               	btfsc	status,2,c
  3607  001F4A  D002               	goto	l248
  3608                           
  3609                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3610  001F4C  868A               	bsf	3978,3,c	;volatile
  3611  001F4E  D001               	goto	l249
  3612  001F50                     l248:
  3613                           
  3614                           ;unmc_lcd_216.c: 103: else
  3615                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3616  001F50  968A               	bcf	3978,3,c	;volatile
  3617  001F52                     l249:
  3618                           
  3619                           ;unmc_lcd_216.c: 106: __nop();
  3620  001F52  F000               	nop	
  3621                           
  3622                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3623  001F54  3803               	swapf	lcd_send_byte@n,w,c
  3624  001F56  0B0F               	andlw	15
  3625  001F58  EC6C  F00D         	call	_lcd_send_nibble
  3626                           
  3627                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3628  001F5C  5003               	movf	lcd_send_byte@n,w,c
  3629  001F5E  0B0F               	andlw	15
  3630  001F60  EC6C  F00D         	call	_lcd_send_nibble
  3631  001F64  0012               	return		;funcret
  3632  001F66                     __end_of_lcd_send_byte:
  3633                           	opt stack 0
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           indf0	equ	0xFEF
  3641                           postinc0	equ	0xFEE
  3642                           fsr0h	equ	0xFEA
  3643                           fsr0l	equ	0xFE9
  3644                           wreg	equ	0xFE8
  3645                           postinc1	equ	0xFE6
  3646                           postdec1	equ	0xFE5
  3647                           fsr1h	equ	0xFE2
  3648                           fsr1l	equ	0xFE1
  3649                           indf2	equ	0xFDF
  3650                           postinc2	equ	0xFDE
  3651                           postdec2	equ	0xFDD
  3652                           fsr2h	equ	0xFDA
  3653                           fsr2l	equ	0xFD9
  3654                           status	equ	0xFD8
  3655                           
  3656 ;; *************** function _lcd_send_nibble *****************
  3657 ;; Defined at:
  3658 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  nibble          1    wreg     unsigned char 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  nibble          1    1[COMRAM] unsigned char 
  3663 ;; Return value:  Size  Location     Type
  3664 ;;		None               void
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3676 ;;Total ram usage:        2 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_lcd_send_byte
  3682 ;;		_lcd_init
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text21
  3687  001AD8                     __ptext21:
  3688                           	opt stack 0
  3689  001AD8                     _lcd_send_nibble:
  3690                           	opt stack 26
  3691                           
  3692                           ;incstack = 0
  3693                           ;lcd_send_nibble@nibble stored from wreg
  3694  001AD8  6E02               	movwf	lcd_send_nibble@nibble,c
  3695                           
  3696                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3697  001ADA  A002               	btfss	lcd_send_nibble@nibble,0,c
  3698  001ADC  D003               	goto	u1040
  3699  001ADE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3700  001AE0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3701  001AE2  D001               	goto	u1058
  3702  001AE4                     u1040:
  3703  001AE4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3704  001AE6                     u1058:
  3705  001AE6  3A01               	swapf	??_lcd_send_nibble,f,c
  3706  001AE8  508A               	movf	3978,w,c	;volatile
  3707  001AEA  1801               	xorwf	??_lcd_send_nibble,w,c
  3708  001AEC  0BEF               	andlw	-17
  3709  001AEE  1801               	xorwf	??_lcd_send_nibble,w,c
  3710  001AF0  6E8A               	movwf	3978,c	;volatile
  3711                           
  3712                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3713  001AF2  A202               	btfss	lcd_send_nibble@nibble,1,c
  3714  001AF4  D003               	goto	u1060
  3715  001AF6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3716  001AF8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3717  001AFA  D001               	goto	u1078
  3718  001AFC                     u1060:
  3719  001AFC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3720  001AFE                     u1078:
  3721  001AFE  3A01               	swapf	??_lcd_send_nibble,f,c
  3722  001B00  4601               	rlncf	??_lcd_send_nibble,f,c
  3723  001B02  508A               	movf	3978,w,c	;volatile
  3724  001B04  1801               	xorwf	??_lcd_send_nibble,w,c
  3725  001B06  0BDF               	andlw	-33
  3726  001B08  1801               	xorwf	??_lcd_send_nibble,w,c
  3727  001B0A  6E8A               	movwf	3978,c	;volatile
  3728                           
  3729                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3730  001B0C  A402               	btfss	lcd_send_nibble@nibble,2,c
  3731  001B0E  D003               	goto	u1080
  3732  001B10  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3733  001B12  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3734  001B14  D001               	goto	u1098
  3735  001B16                     u1080:
  3736  001B16  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3737  001B18                     u1098:
  3738  001B18  3A01               	swapf	??_lcd_send_nibble,f,c
  3739  001B1A  4601               	rlncf	??_lcd_send_nibble,f,c
  3740  001B1C  4601               	rlncf	??_lcd_send_nibble,f,c
  3741  001B1E  508A               	movf	3978,w,c	;volatile
  3742  001B20  1801               	xorwf	??_lcd_send_nibble,w,c
  3743  001B22  0BBF               	andlw	-65
  3744  001B24  1801               	xorwf	??_lcd_send_nibble,w,c
  3745  001B26  6E8A               	movwf	3978,c	;volatile
  3746                           
  3747                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3748  001B28  A602               	btfss	lcd_send_nibble@nibble,3,c
  3749  001B2A  D003               	goto	u1100
  3750  001B2C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3751  001B2E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3752  001B30  D001               	goto	u1118
  3753  001B32                     u1100:
  3754  001B32  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3755  001B34                     u1118:
  3756  001B34  3201               	rrcf	??_lcd_send_nibble,f,c
  3757  001B36  3201               	rrcf	??_lcd_send_nibble,f,c
  3758  001B38  508A               	movf	3978,w,c	;volatile
  3759  001B3A  1801               	xorwf	??_lcd_send_nibble,w,c
  3760  001B3C  0B7F               	andlw	-129
  3761  001B3E  1801               	xorwf	??_lcd_send_nibble,w,c
  3762  001B40  6E8A               	movwf	3978,c	;volatile
  3763                           
  3764                           ;unmc_lcd_216.c: 32: __nop();
  3765  001B42  F000               	nop	
  3766                           
  3767                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3768  001B44  848A               	bsf	3978,2,c	;volatile
  3769                           
  3770                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3771  001B46  F000               	nop	
  3772  001B48  F000               	nop	
  3773                           
  3774                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3775  001B4A  948A               	bcf	3978,2,c	;volatile
  3776  001B4C  0012               	return		;funcret
  3777  001B4E                     __end_of_lcd_send_nibble:
  3778                           	opt stack 0
  3779                           tblptru	equ	0xFF8
  3780                           tblptrh	equ	0xFF7
  3781                           tblptrl	equ	0xFF6
  3782                           tablat	equ	0xFF5
  3783                           prodh	equ	0xFF4
  3784                           prodl	equ	0xFF3
  3785                           indf0	equ	0xFEF
  3786                           postinc0	equ	0xFEE
  3787                           fsr0h	equ	0xFEA
  3788                           fsr0l	equ	0xFE9
  3789                           wreg	equ	0xFE8
  3790                           postinc1	equ	0xFE6
  3791                           postdec1	equ	0xFE5
  3792                           fsr1h	equ	0xFE2
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _Delay100TCYx *****************
  3802 ;; Defined at:
  3803 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  unit            1    wreg     unsigned char 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  unit            1    0[COMRAM] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3821 ;;Total ram usage:        1 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_lcd_send_byte
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text22
  3831  001FE6                     __ptext22:
  3832                           	opt stack 0
  3833  001FE6                     _Delay100TCYx:
  3834                           	opt stack 26
  3835                           
  3836                           ;incstack = 0
  3837                           ;Delay100TCYx@unit stored from wreg
  3838  001FE6  6E01               	movwf	Delay100TCYx@unit,c
  3839  001FE8  0E21               	movlw	33
  3840  001FEA                     u2107:
  3841  001FEA  2EE8               	decfsz	wreg,f,c
  3842  001FEC  D7FE               	goto	u2107
  3843  001FEE  F000               	nop	
  3844  001FF0  2E01               	decfsz	Delay100TCYx@unit,f,c
  3845  001FF2  D7FA               	goto	l1872
  3846  001FF4  0012               	return	
  3847  001FF6  0012               	return		;funcret
  3848  001FF8                     __end_of_Delay100TCYx:
  3849                           	opt stack 0
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodh	equ	0xFF4
  3855                           prodl	equ	0xFF3
  3856                           indf0	equ	0xFEF
  3857                           postinc0	equ	0xFEE
  3858                           fsr0h	equ	0xFEA
  3859                           fsr0l	equ	0xFE9
  3860                           wreg	equ	0xFE8
  3861                           postinc1	equ	0xFE6
  3862                           postdec1	equ	0xFE5
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           indf2	equ	0xFDF
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _Write_RTC *****************
  3873 ;; Defined at:
  3874 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3892 ;;Total ram usage:        0 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    2
  3895 ;; This function calls:
  3896 ;;		_RtccWrOn
  3897 ;;		_RtccWriteDate
  3898 ;;		_RtccWriteTime
  3899 ;;		___awdiv
  3900 ;; This function is called by:
  3901 ;;		_Setup
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text23
  3906  0011C8                     __ptext23:
  3907                           	opt stack 0
  3908  0011C8                     _Write_RTC:
  3909                           	opt stack 27
  3910                           
  3911                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  3912                           
  3913                           ;incstack = 0
  3914  0011C8  ECFC  F00F         	call	_RtccWrOn	;wreg free
  3915                           
  3916                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  3917  0011CC  80A3               	bsf	4003,0,c	;volatile
  3918                           
  3919                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  3920  0011CE  C040  F001         	movff	_segundo,___awdiv@dividend
  3921  0011D2  C041  F002         	movff	_segundo+1,___awdiv@dividend+1
  3922  0011D6  0E00               	movlw	0
  3923  0011D8  6E04               	movwf	___awdiv@divisor+1,c
  3924  0011DA  0E0A               	movlw	10
  3925  0011DC  6E03               	movwf	___awdiv@divisor,c
  3926  0011DE  EC9A  F00C         	call	___awdiv	;wreg free
  3927  0011E2  5001               	movf	?___awdiv,w,c
  3928  0011E4  6E5E               	movwf	_segundo_d,c
  3929                           
  3930                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  3931  0011E6  505E               	movf	_segundo_d,w,c
  3932  0011E8  0D0A               	mullw	10
  3933  0011EA  50F3               	movf	prodl,w,c
  3934  0011EC  0800               	sublw	0
  3935  0011EE  2440               	addwf	_segundo,w,c
  3936  0011F0  0100               	movlb	0	; () banked
  3937  0011F2  6FA4               	movwf	_segundo_u& (0+255),b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  3941  0011F4  505E               	movf	_segundo_d,w,c
  3942  0011F6  0D10               	mullw	16
  3943  0011F8  50F3               	movf	prodl,w,c
  3944  0011FA  0100               	movlb	0	; () banked
  3945  0011FC  25A4               	addwf	_segundo_u& (0+255),w,b
  3946  0011FE  6E4A               	movwf	_RtccTime+1,c
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  3950  001200  C057  F001         	movff	_minuto,___awdiv@dividend
  3951  001204  C058  F002         	movff	_minuto+1,___awdiv@dividend+1
  3952  001208  0E00               	movlw	0
  3953  00120A  6E04               	movwf	___awdiv@divisor+1,c
  3954  00120C  0E0A               	movlw	10
  3955  00120E  6E03               	movwf	___awdiv@divisor,c
  3956  001210  EC9A  F00C         	call	___awdiv	;wreg free
  3957  001214  5001               	movf	?___awdiv,w,c
  3958  001216  6E5D               	movwf	_minuto_d,c
  3959                           
  3960                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  3961  001218  505D               	movf	_minuto_d,w,c
  3962  00121A  0D0A               	mullw	10
  3963  00121C  50F3               	movf	prodl,w,c
  3964  00121E  0800               	sublw	0
  3965  001220  2457               	addwf	_minuto,w,c
  3966  001222  0100               	movlb	0	; () banked
  3967  001224  6FA3               	movwf	_minuto_u& (0+255),b
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  3971  001226  505D               	movf	_minuto_d,w,c
  3972  001228  0D10               	mullw	16
  3973  00122A  50F3               	movf	prodl,w,c
  3974  00122C  0100               	movlb	0	; () banked
  3975  00122E  25A3               	addwf	_minuto_u& (0+255),w,b
  3976  001230  6E4B               	movwf	_RtccTime+2,c
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  3980  001232  C053  F001         	movff	_hora,___awdiv@dividend
  3981  001236  C054  F002         	movff	_hora+1,___awdiv@dividend+1
  3982  00123A  0E00               	movlw	0
  3983  00123C  6E04               	movwf	___awdiv@divisor+1,c
  3984  00123E  0E0A               	movlw	10
  3985  001240  6E03               	movwf	___awdiv@divisor,c
  3986  001242  EC9A  F00C         	call	___awdiv	;wreg free
  3987  001246  5001               	movf	?___awdiv,w,c
  3988  001248  6E5B               	movwf	_hora_d,c
  3989                           
  3990                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  3991  00124A  505B               	movf	_hora_d,w,c
  3992  00124C  0D0A               	mullw	10
  3993  00124E  50F3               	movf	prodl,w,c
  3994  001250  0800               	sublw	0
  3995  001252  2453               	addwf	_hora,w,c
  3996  001254  0100               	movlb	0	; () banked
  3997  001256  6FA1               	movwf	_hora_u& (0+255),b
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  4001  001258  505B               	movf	_hora_d,w,c
  4002  00125A  0D10               	mullw	16
  4003  00125C  50F3               	movf	prodl,w,c
  4004  00125E  0100               	movlb	0	; () banked
  4005  001260  25A1               	addwf	_hora_u& (0+255),w,b
  4006  001262  6E4C               	movwf	_RtccTime+3,c
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  4010  001264  C04D  F001         	movff	_anio,___awdiv@dividend
  4011  001268  C04E  F002         	movff	_anio+1,___awdiv@dividend+1
  4012  00126C  0E00               	movlw	0
  4013  00126E  6E04               	movwf	___awdiv@divisor+1,c
  4014  001270  0E0A               	movlw	10
  4015  001272  6E03               	movwf	___awdiv@divisor,c
  4016  001274  EC9A  F00C         	call	___awdiv	;wreg free
  4017  001278  5001               	movf	?___awdiv,w,c
  4018  00127A  6E59               	movwf	_anio_d,c
  4019                           
  4020                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  4021  00127C  5059               	movf	_anio_d,w,c
  4022  00127E  0D0A               	mullw	10
  4023  001280  50F3               	movf	prodl,w,c
  4024  001282  0800               	sublw	0
  4025  001284  244D               	addwf	_anio,w,c
  4026  001286  0100               	movlb	0	; () banked
  4027  001288  6F9E               	movwf	_anio_u& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  4031  00128A  5059               	movf	_anio_d,w,c
  4032  00128C  0D10               	mullw	16
  4033  00128E  50F3               	movf	prodl,w,c
  4034  001290  0100               	movlb	0	; () banked
  4035  001292  259E               	addwf	_anio_u& (0+255),w,b
  4036  001294  6E48               	movwf	_RtccDate+3,c
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  4040  001296  C055  F001         	movff	_mes,___awdiv@dividend
  4041  00129A  C056  F002         	movff	_mes+1,___awdiv@dividend+1
  4042  00129E  0E00               	movlw	0
  4043  0012A0  6E04               	movwf	___awdiv@divisor+1,c
  4044  0012A2  0E0A               	movlw	10
  4045  0012A4  6E03               	movwf	___awdiv@divisor,c
  4046  0012A6  EC9A  F00C         	call	___awdiv	;wreg free
  4047  0012AA  5001               	movf	?___awdiv,w,c
  4048  0012AC  6E5C               	movwf	_mes_d,c
  4049                           
  4050                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  4051  0012AE  505C               	movf	_mes_d,w,c
  4052  0012B0  0D0A               	mullw	10
  4053  0012B2  50F3               	movf	prodl,w,c
  4054  0012B4  0800               	sublw	0
  4055  0012B6  2455               	addwf	_mes,w,c
  4056  0012B8  0100               	movlb	0	; () banked
  4057  0012BA  6FA2               	movwf	_mes_u& (0+255),b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  4061  0012BC  505C               	movf	_mes_d,w,c
  4062  0012BE  0D10               	mullw	16
  4063  0012C0  50F3               	movf	prodl,w,c
  4064  0012C2  0100               	movlb	0	; () banked
  4065  0012C4  25A2               	addwf	_mes_u& (0+255),w,b
  4066  0012C6  6E47               	movwf	_RtccDate+2,c
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  4070  0012C8  C04F  F001         	movff	_dia,___awdiv@dividend
  4071  0012CC  C050  F002         	movff	_dia+1,___awdiv@dividend+1
  4072  0012D0  0E00               	movlw	0
  4073  0012D2  6E04               	movwf	___awdiv@divisor+1,c
  4074  0012D4  0E0A               	movlw	10
  4075  0012D6  6E03               	movwf	___awdiv@divisor,c
  4076  0012D8  EC9A  F00C         	call	___awdiv	;wreg free
  4077  0012DC  5001               	movf	?___awdiv,w,c
  4078  0012DE  6E5A               	movwf	_fecha_d,c
  4079                           
  4080                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  4081  0012E0  505A               	movf	_fecha_d,w,c
  4082  0012E2  0D0A               	mullw	10
  4083  0012E4  50F3               	movf	prodl,w,c
  4084  0012E6  0800               	sublw	0
  4085  0012E8  244F               	addwf	_dia,w,c
  4086  0012EA  0100               	movlb	0	; () banked
  4087  0012EC  6FA0               	movwf	_fecha_u& (0+255),b
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  4091  0012EE  505A               	movf	_fecha_d,w,c
  4092  0012F0  0D10               	mullw	16
  4093  0012F2  50F3               	movf	prodl,w,c
  4094  0012F4  0100               	movlb	0	; () banked
  4095  0012F6  25A0               	addwf	_fecha_u& (0+255),w,b
  4096  0012F8  6E46               	movwf	_RtccDate+1,c
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  4100  0012FA  C051  F09F         	movff	_diasem,_dia_semana
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  4104  0012FE  C051  F045         	movff	_diasem,_RtccDate
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  4108  001302  0E49               	movlw	low _RtccTime
  4109  001304  6E01               	movwf	RtccWriteTime@pTm,c
  4110  001306  0E00               	movlw	high _RtccTime
  4111  001308  6E02               	movwf	RtccWriteTime@pTm+1,c
  4112  00130A  0E01               	movlw	1
  4113  00130C  6E03               	movwf	RtccWriteTime@di,c
  4114  00130E  EC37  F00A         	call	_RtccWriteTime	;wreg free
  4115                           
  4116                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  4117  001312  0E45               	movlw	low _RtccDate
  4118  001314  6E01               	movwf	RtccWriteDate@pDt,c
  4119  001316  0E00               	movlw	high _RtccDate
  4120  001318  6E02               	movwf	RtccWriteDate@pDt+1,c
  4121  00131A  0E01               	movlw	1
  4122  00131C  6E03               	movwf	RtccWriteDate@di,c
  4123  00131E  EC94  F009         	call	_RtccWriteDate	;wreg free
  4124                           
  4125                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  4126  001322  010F               	movlb	15	; () banked
  4127  001324  8F3F               	bsf	63,7,b	;volatile
  4128                           
  4129                           ; BSR set to: 15
  4130  001326  0012               	return		;funcret
  4131  001328                     __end_of_Write_RTC:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           indf0	equ	0xFEF
  4140                           postinc0	equ	0xFEE
  4141                           fsr0h	equ	0xFEA
  4142                           fsr0l	equ	0xFE9
  4143                           wreg	equ	0xFE8
  4144                           postinc1	equ	0xFE6
  4145                           postdec1	equ	0xFE5
  4146                           fsr1h	equ	0xFE2
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function ___awdiv *****************
  4156 ;; Defined at:
  4157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  dividend        2    0[COMRAM] int 
  4160 ;;  divisor         2    2[COMRAM] int 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  quotient        2    6[COMRAM] int 
  4163 ;;  sign            1    5[COMRAM] unsigned char 
  4164 ;;  counter         1    4[COMRAM] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2    0[COMRAM] int 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4175 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4177 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4178 ;;Total ram usage:        8 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_Write_RTC
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text24
  4188  001934                     __ptext24:
  4189                           	opt stack 0
  4190  001934                     ___awdiv:
  4191                           	opt stack 28
  4192                           
  4193                           ; BSR set to: 15
  4194                           ;incstack = 0
  4195  001934  0E00               	movlw	0
  4196  001936  6E06               	movwf	___awdiv@sign,c
  4197  001938  AE04               	btfss	___awdiv@divisor+1,7,c
  4198  00193A  D007               	goto	l2240
  4199  00193C  6C03               	negf	___awdiv@divisor,c
  4200  00193E  1E04               	comf	___awdiv@divisor+1,f,c
  4201  001940  B0D8               	btfsc	status,0,c
  4202  001942  2A04               	incf	___awdiv@divisor+1,f,c
  4203  001944  0E01               	movlw	1
  4204  001946  6E06               	movwf	___awdiv@sign,c
  4205  001948  D000               	goto	l2240
  4206  00194A                     l2240:
  4207  00194A  AE02               	btfss	___awdiv@dividend+1,7,c
  4208  00194C  D007               	goto	l2246
  4209  00194E  6C01               	negf	___awdiv@dividend,c
  4210  001950  1E02               	comf	___awdiv@dividend+1,f,c
  4211  001952  B0D8               	btfsc	status,0,c
  4212  001954  2A02               	incf	___awdiv@dividend+1,f,c
  4213  001956  0E01               	movlw	1
  4214  001958  1A06               	xorwf	___awdiv@sign,f,c
  4215  00195A  D000               	goto	l2246
  4216  00195C                     l2246:
  4217  00195C  0E00               	movlw	0
  4218  00195E  6E08               	movwf	___awdiv@quotient+1,c
  4219  001960  0E00               	movlw	0
  4220  001962  6E07               	movwf	___awdiv@quotient,c
  4221  001964  5003               	movf	___awdiv@divisor,w,c
  4222  001966  1004               	iorwf	___awdiv@divisor+1,w,c
  4223  001968  B4D8               	btfsc	status,2,c
  4224  00196A  D021               	goto	l2268
  4225  00196C  0E01               	movlw	1
  4226  00196E  6E05               	movwf	___awdiv@counter,c
  4227  001970  D005               	goto	l2254
  4228  001972                     l2252:
  4229  001972  90D8               	bcf	status,0,c
  4230  001974  3603               	rlcf	___awdiv@divisor,f,c
  4231  001976  3604               	rlcf	___awdiv@divisor+1,f,c
  4232  001978  2A05               	incf	___awdiv@counter,f,c
  4233  00197A  D000               	goto	l2254
  4234  00197C                     l2254:
  4235  00197C  BE04               	btfsc	___awdiv@divisor+1,7,c
  4236  00197E  D002               	goto	l2256
  4237  001980  D7F8               	goto	l2252
  4238  001982  D000               	goto	l2256
  4239  001984                     l2256:
  4240  001984  90D8               	bcf	status,0,c
  4241  001986  3607               	rlcf	___awdiv@quotient,f,c
  4242  001988  3608               	rlcf	___awdiv@quotient+1,f,c
  4243  00198A  5003               	movf	___awdiv@divisor,w,c
  4244  00198C  5C01               	subwf	___awdiv@dividend,w,c
  4245  00198E  5004               	movf	___awdiv@divisor+1,w,c
  4246  001990  5802               	subwfb	___awdiv@dividend+1,w,c
  4247  001992  A0D8               	btfss	status,0,c
  4248  001994  D006               	goto	l2264
  4249  001996  5003               	movf	___awdiv@divisor,w,c
  4250  001998  5E01               	subwf	___awdiv@dividend,f,c
  4251  00199A  5004               	movf	___awdiv@divisor+1,w,c
  4252  00199C  5A02               	subwfb	___awdiv@dividend+1,f,c
  4253  00199E  8007               	bsf	___awdiv@quotient,0,c
  4254  0019A0  D000               	goto	l2264
  4255  0019A2                     l2264:
  4256  0019A2  90D8               	bcf	status,0,c
  4257  0019A4  3204               	rrcf	___awdiv@divisor+1,f,c
  4258  0019A6  3203               	rrcf	___awdiv@divisor,f,c
  4259  0019A8  2E05               	decfsz	___awdiv@counter,f,c
  4260  0019AA  D7EC               	goto	l2256
  4261  0019AC  D000               	goto	l2268
  4262  0019AE                     l2268:
  4263  0019AE  5006               	movf	___awdiv@sign,w,c
  4264  0019B0  B4D8               	btfsc	status,2,c
  4265  0019B2  D005               	goto	l2272
  4266  0019B4  6C07               	negf	___awdiv@quotient,c
  4267  0019B6  1E08               	comf	___awdiv@quotient+1,f,c
  4268  0019B8  B0D8               	btfsc	status,0,c
  4269  0019BA  2A08               	incf	___awdiv@quotient+1,f,c
  4270  0019BC  D000               	goto	l2272
  4271  0019BE                     l2272:
  4272  0019BE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4273  0019C2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4274  0019C6  0012               	return	
  4275  0019C8  0012               	return		;funcret
  4276  0019CA                     __end_of___awdiv:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodh	equ	0xFF4
  4283                           prodl	equ	0xFF3
  4284                           indf0	equ	0xFEF
  4285                           postinc0	equ	0xFEE
  4286                           fsr0h	equ	0xFEA
  4287                           fsr0l	equ	0xFE9
  4288                           wreg	equ	0xFE8
  4289                           postinc1	equ	0xFE6
  4290                           postdec1	equ	0xFE5
  4291                           fsr1h	equ	0xFE2
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           fsr2h	equ	0xFDA
  4297                           fsr2l	equ	0xFD9
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function _RtccWriteTime *****************
  4301 ;; Defined at:
  4302 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  pTm             2    0[COMRAM] PTR const struct .
  4305 ;;		 -> RtccTime(4), 
  4306 ;;  di              1    2[COMRAM] enum E7121
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  tempHourWDay    2    9[COMRAM] struct .
  4309 ;;  tempMinSec      2    7[COMRAM] struct .
  4310 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4311 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4312 ;;  wasOn           1    4[COMRAM] enum E7121
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      enum E7337
  4315 ;; Registers used:
  4316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4322 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4323 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4325 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4326 ;;Total ram usage:       11 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    1
  4329 ;; This function calls:
  4330 ;;		_RtccWrOn
  4331 ;; This function is called by:
  4332 ;;		_Write_RTC
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text25
  4337  00146E                     __ptext25:
  4338                           	opt stack 0
  4339  00146E                     _RtccWriteTime:
  4340                           	opt stack 27
  4341                           
  4342                           ;incstack = 0
  4343  00146E  0E00               	movlw	0
  4344  001470  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4345  001472  EE20 F002          	lfsr	2,2
  4346  001476  5001               	movf	RtccWriteTime@pTm,w,c
  4347  001478  26D9               	addwf	fsr2l,f,c
  4348  00147A  5002               	movf	RtccWriteTime@pTm+1,w,c
  4349  00147C  22DA               	addwfc	fsr2h,f,c
  4350  00147E  0E5A               	movlw	90
  4351  001480  60DF               	cpfslt	indf2,c
  4352  001482  0012               	return	
  4353  001484  EE20 F001          	lfsr	2,1
  4354  001488  5001               	movf	RtccWriteTime@pTm,w,c
  4355  00148A  26D9               	addwf	fsr2l,f,c
  4356  00148C  5002               	movf	RtccWriteTime@pTm+1,w,c
  4357  00148E  22DA               	addwfc	fsr2h,f,c
  4358  001490  0E5A               	movlw	90
  4359  001492  60DF               	cpfslt	indf2,c
  4360  001494  0012               	return	
  4361  001496  EE20 F003          	lfsr	2,3
  4362  00149A  5001               	movf	RtccWriteTime@pTm,w,c
  4363  00149C  26D9               	addwf	fsr2l,f,c
  4364  00149E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4365  0014A0  22DA               	addwfc	fsr2h,f,c
  4366  0014A2  0E24               	movlw	36
  4367  0014A4  64DF               	cpfsgt	indf2,c
  4368  0014A6  D002               	goto	l2094
  4369  0014A8  0012               	return	
  4370                           
  4371                           ;	Return value of _RtccWriteTime is never used
  4372  0014AA  0012               	return	
  4373  0014AC                     l2094:
  4374  0014AC  EE20 F002          	lfsr	2,2
  4375  0014B0  5001               	movf	RtccWriteTime@pTm,w,c
  4376  0014B2  26D9               	addwf	fsr2l,f,c
  4377  0014B4  5002               	movf	RtccWriteTime@pTm+1,w,c
  4378  0014B6  22DA               	addwfc	fsr2h,f,c
  4379  0014B8  50DF               	movf	indf2,w,c
  4380  0014BA  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4381  0014BC  EE20 F001          	lfsr	2,1
  4382  0014C0  5001               	movf	RtccWriteTime@pTm,w,c
  4383  0014C2  26D9               	addwf	fsr2l,f,c
  4384  0014C4  5002               	movf	RtccWriteTime@pTm+1,w,c
  4385  0014C6  22DA               	addwfc	fsr2h,f,c
  4386  0014C8  50DF               	movf	indf2,w,c
  4387  0014CA  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4388  0014CC  5003               	movf	RtccWriteTime@di,w,c
  4389  0014CE  B4D8               	btfsc	status,2,c
  4390  0014D0  D002               	goto	l2100
  4391  0014D2  9CF2               	bcf	intcon,6,c	;volatile
  4392  0014D4  D000               	goto	l2100
  4393  0014D6                     l2100:
  4394  0014D6  0E00               	movlw	0
  4395  0014D8  BB3F               	btfsc	63,5,b	;volatile
  4396  0014DA  0E01               	movlw	1
  4397  0014DC  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4398  0014DE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4399  0014E0  A4D8               	btfss	status,2,c
  4400  0014E2  D003               	goto	l2104
  4401  0014E4  ECFC  F00F         	call	_RtccWrOn	;wreg free
  4402  0014E8  D000               	goto	l2104
  4403  0014EA                     l2104:
  4404  0014EA  0E00               	movlw	0
  4405  0014EC  BF3F               	btfsc	63,7,b	;volatile
  4406  0014EE  0E01               	movlw	1
  4407  0014F0  6E05               	movwf	RtccWriteTime@wasOn,c
  4408  0014F2  5005               	movf	RtccWriteTime@wasOn,w,c
  4409  0014F4  B4D8               	btfsc	status,2,c
  4410  0014F6  D007               	goto	l2110
  4411  0014F8  0E00               	movlw	0
  4412  0014FA  BE91               	btfsc	3985,7,c	;volatile
  4413  0014FC  0E01               	movlw	1
  4414  0014FE  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4415  001500  010F               	movlb	15	; () banked
  4416  001502  9F3F               	bcf	63,7,b	;volatile
  4417  001504  D000               	goto	l2110
  4418  001506                     l2110:
  4419  001506  0EFC               	movlw	252
  4420  001508  010F               	movlb	15	; () banked
  4421  00150A  173F               	andwf	63,f,b	;volatile
  4422  00150C  010F               	movlb	15	; () banked
  4423  00150E  813F               	bsf	63,0,b	;volatile
  4424                           
  4425                           ; BSR set to: 15
  4426  001510  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4427                           
  4428                           ; BSR set to: 15
  4429  001514  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4430                           
  4431                           ; BSR set to: 15
  4432  001518  EE20 F003          	lfsr	2,3
  4433  00151C  5001               	movf	RtccWriteTime@pTm,w,c
  4434  00151E  26D9               	addwf	fsr2l,f,c
  4435  001520  5002               	movf	RtccWriteTime@pTm+1,w,c
  4436  001522  22DA               	addwfc	fsr2h,f,c
  4437  001524  50DF               	movf	indf2,w,c
  4438  001526  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4439                           
  4440                           ; BSR set to: 15
  4441  001528  0EFC               	movlw	252
  4442  00152A  010F               	movlb	15	; () banked
  4443  00152C  173F               	andwf	63,f,b	;volatile
  4444                           
  4445                           ; BSR set to: 15
  4446  00152E  010F               	movlb	15	; () banked
  4447  001530  813F               	bsf	63,0,b	;volatile
  4448                           
  4449                           ; BSR set to: 15
  4450  001532  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4451                           
  4452                           ; BSR set to: 15
  4453  001536  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4454                           
  4455                           ; BSR set to: 15
  4456  00153A  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4457                           
  4458                           ; BSR set to: 15
  4459  00153E  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4460                           
  4461                           ; BSR set to: 15
  4462  001542  5005               	movf	RtccWriteTime@wasOn,w,c
  4463  001544  B4D8               	btfsc	status,2,c
  4464  001546  D00D               	goto	l2142
  4465                           
  4466                           ; BSR set to: 15
  4467  001548  010F               	movlb	15	; () banked
  4468  00154A  8F3F               	bsf	63,7,b	;volatile
  4469                           
  4470                           ; BSR set to: 15
  4471  00154C  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4472  00154E  B4D8               	btfsc	status,2,c
  4473  001550  D002               	goto	l2138
  4474                           
  4475                           ; BSR set to: 15
  4476  001552  8E91               	bsf	3985,7,c	;volatile
  4477  001554  D000               	goto	l2138
  4478  001556                     l2138:
  4479                           
  4480                           ; BSR set to: 15
  4481  001556  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4482  001558  B4D8               	btfsc	status,2,c
  4483  00155A  D009               	goto	l2146
  4484                           
  4485                           ; BSR set to: 15
  4486  00155C  ECFC  F00F         	call	_RtccWrOn	;wreg free
  4487  001560  D006               	goto	l2146
  4488  001562                     l2142:
  4489  001562  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4490  001564  A4D8               	btfss	status,2,c
  4491  001566  D003               	goto	l2146
  4492  001568  010F               	movlb	15	; () banked
  4493  00156A  9B3F               	bcf	63,5,b	;volatile
  4494                           
  4495                           ; BSR set to: 15
  4496  00156C  D000               	goto	l2146
  4497  00156E                     l2146:
  4498  00156E  5003               	movf	RtccWriteTime@di,w,c
  4499  001570  B4D8               	btfsc	status,2,c
  4500  001572  0012               	return	
  4501  001574  8CF2               	bsf	intcon,6,c	;volatile
  4502  001576  0012               	return	
  4503                           
  4504                           ;	Return value of _RtccWriteTime is never used
  4505  001578  0012               	return		;funcret
  4506  00157A                     __end_of_RtccWriteTime:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           intcon	equ	0xFF2
  4515                           indf0	equ	0xFEF
  4516                           postinc0	equ	0xFEE
  4517                           fsr0h	equ	0xFEA
  4518                           fsr0l	equ	0xFE9
  4519                           wreg	equ	0xFE8
  4520                           postinc1	equ	0xFE6
  4521                           postdec1	equ	0xFE5
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _RtccWriteDate *****************
  4532 ;; Defined at:
  4533 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  pDt             2    0[COMRAM] PTR const struct .
  4536 ;;		 -> RtccDate(4), 
  4537 ;;  di              1    2[COMRAM] enum E7121
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  tempHourWDay    2   11[COMRAM] struct .
  4540 ;;  tempDayMonth    2    9[COMRAM] struct .
  4541 ;;  tempYear        2    6[COMRAM] struct .
  4542 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4543 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4544 ;;  wasOn           1    4[COMRAM] enum E7121
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      enum E7337
  4547 ;; Registers used:
  4548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4554 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4555 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4557 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4558 ;;Total ram usage:       13 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    1
  4561 ;; This function calls:
  4562 ;;		_RtccWrOn
  4563 ;; This function is called by:
  4564 ;;		_Write_RTC
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text26
  4569  001328                     __ptext26:
  4570                           	opt stack 0
  4571  001328                     _RtccWriteDate:
  4572                           	opt stack 27
  4573                           
  4574                           ;incstack = 0
  4575  001328  0E00               	movlw	0
  4576  00132A  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4577  00132C  EE20 F002          	lfsr	2,2
  4578  001330  5001               	movf	RtccWriteDate@pDt,w,c
  4579  001332  26D9               	addwf	fsr2l,f,c
  4580  001334  5002               	movf	RtccWriteDate@pDt+1,w,c
  4581  001336  22DA               	addwfc	fsr2h,f,c
  4582  001338  0E13               	movlw	19
  4583  00133A  60DF               	cpfslt	indf2,c
  4584  00133C  0012               	return	
  4585  00133E  EE20 F002          	lfsr	2,2
  4586  001342  5001               	movf	RtccWriteDate@pDt,w,c
  4587  001344  26D9               	addwf	fsr2l,f,c
  4588  001346  5002               	movf	RtccWriteDate@pDt+1,w,c
  4589  001348  22DA               	addwfc	fsr2h,f,c
  4590  00134A  50DF               	movf	indf2,w,c
  4591  00134C  B4D8               	btfsc	status,2,c
  4592  00134E  0012               	return	
  4593  001350  EE20 F001          	lfsr	2,1
  4594  001354  5001               	movf	RtccWriteDate@pDt,w,c
  4595  001356  26D9               	addwf	fsr2l,f,c
  4596  001358  5002               	movf	RtccWriteDate@pDt+1,w,c
  4597  00135A  22DA               	addwfc	fsr2h,f,c
  4598  00135C  0E32               	movlw	50
  4599  00135E  60DF               	cpfslt	indf2,c
  4600  001360  0012               	return	
  4601  001362  EE20 F001          	lfsr	2,1
  4602  001366  5001               	movf	RtccWriteDate@pDt,w,c
  4603  001368  26D9               	addwf	fsr2l,f,c
  4604  00136A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4605  00136C  22DA               	addwfc	fsr2h,f,c
  4606  00136E  50DF               	movf	indf2,w,c
  4607  001370  B4D8               	btfsc	status,2,c
  4608  001372  0012               	return	
  4609  001374  EE20 F003          	lfsr	2,3
  4610  001378  5001               	movf	RtccWriteDate@pDt,w,c
  4611  00137A  26D9               	addwf	fsr2l,f,c
  4612  00137C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4613  00137E  22DA               	addwfc	fsr2h,f,c
  4614  001380  0E99               	movlw	153
  4615  001382  64DF               	cpfsgt	indf2,c
  4616  001384  D002               	goto	l2162
  4617  001386  0012               	return	
  4618                           
  4619                           ;	Return value of _RtccWriteDate is never used
  4620  001388  0012               	return	
  4621  00138A                     l2162:
  4622  00138A  EE20 F003          	lfsr	2,3
  4623  00138E  5001               	movf	RtccWriteDate@pDt,w,c
  4624  001390  26D9               	addwf	fsr2l,f,c
  4625  001392  5002               	movf	RtccWriteDate@pDt+1,w,c
  4626  001394  22DA               	addwfc	fsr2h,f,c
  4627  001396  50DF               	movf	indf2,w,c
  4628  001398  6E07               	movwf	RtccWriteDate@tempYear,c
  4629  00139A  EE20 F001          	lfsr	2,1
  4630  00139E  5001               	movf	RtccWriteDate@pDt,w,c
  4631  0013A0  26D9               	addwf	fsr2l,f,c
  4632  0013A2  5002               	movf	RtccWriteDate@pDt+1,w,c
  4633  0013A4  22DA               	addwfc	fsr2h,f,c
  4634  0013A6  50DF               	movf	indf2,w,c
  4635  0013A8  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4636  0013AA  EE20 F002          	lfsr	2,2
  4637  0013AE  5001               	movf	RtccWriteDate@pDt,w,c
  4638  0013B0  26D9               	addwf	fsr2l,f,c
  4639  0013B2  5002               	movf	RtccWriteDate@pDt+1,w,c
  4640  0013B4  22DA               	addwfc	fsr2h,f,c
  4641  0013B6  50DF               	movf	indf2,w,c
  4642  0013B8  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4643  0013BA  5003               	movf	RtccWriteDate@di,w,c
  4644  0013BC  B4D8               	btfsc	status,2,c
  4645  0013BE  D002               	goto	l2168
  4646  0013C0  9CF2               	bcf	intcon,6,c	;volatile
  4647  0013C2  D000               	goto	l2168
  4648  0013C4                     l2168:
  4649  0013C4  0E00               	movlw	0
  4650  0013C6  BB3F               	btfsc	63,5,b	;volatile
  4651  0013C8  0E01               	movlw	1
  4652  0013CA  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4653  0013CC  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4654  0013CE  A4D8               	btfss	status,2,c
  4655  0013D0  D003               	goto	l2172
  4656  0013D2  ECFC  F00F         	call	_RtccWrOn	;wreg free
  4657  0013D6  D000               	goto	l2172
  4658  0013D8                     l2172:
  4659  0013D8  0E00               	movlw	0
  4660  0013DA  BF3F               	btfsc	63,7,b	;volatile
  4661  0013DC  0E01               	movlw	1
  4662  0013DE  6E05               	movwf	RtccWriteDate@wasOn,c
  4663  0013E0  5005               	movf	RtccWriteDate@wasOn,w,c
  4664  0013E2  B4D8               	btfsc	status,2,c
  4665  0013E4  D007               	goto	l2178
  4666  0013E6  0E00               	movlw	0
  4667  0013E8  BE91               	btfsc	3985,7,c	;volatile
  4668  0013EA  0E01               	movlw	1
  4669  0013EC  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4670  0013EE  010F               	movlb	15	; () banked
  4671  0013F0  9F3F               	bcf	63,7,b	;volatile
  4672  0013F2  D000               	goto	l2178
  4673  0013F4                     l2178:
  4674  0013F4  0EFC               	movlw	252
  4675  0013F6  010F               	movlb	15	; () banked
  4676  0013F8  173F               	andwf	63,f,b	;volatile
  4677  0013FA  010F               	movlb	15	; () banked
  4678  0013FC  813F               	bsf	63,0,b	;volatile
  4679                           
  4680                           ; BSR set to: 15
  4681  0013FE  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4682                           
  4683                           ; BSR set to: 15
  4684  001402  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4685                           
  4686                           ; BSR set to: 15
  4687  001406  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4688  00140A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4689  00140E  50DF               	movf	indf2,w,c
  4690  001410  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4691                           
  4692                           ; BSR set to: 15
  4693  001412  0EFC               	movlw	252
  4694  001414  010F               	movlb	15	; () banked
  4695  001416  173F               	andwf	63,f,b	;volatile
  4696                           
  4697                           ; BSR set to: 15
  4698  001418  0E03               	movlw	3
  4699  00141A  010F               	movlb	15	; () banked
  4700  00141C  133F               	iorwf	63,f,b	;volatile
  4701                           
  4702                           ; BSR set to: 15
  4703  00141E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4704                           
  4705                           ; BSR set to: 15
  4706  001422  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4707                           
  4708                           ; BSR set to: 15
  4709  001426  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4710                           
  4711                           ; BSR set to: 15
  4712  00142A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4713                           
  4714                           ; BSR set to: 15
  4715  00142E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4716                           
  4717                           ; BSR set to: 15
  4718  001432  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4719                           
  4720                           ; BSR set to: 15
  4721  001436  5005               	movf	RtccWriteDate@wasOn,w,c
  4722  001438  B4D8               	btfsc	status,2,c
  4723  00143A  D00D               	goto	l2214
  4724                           
  4725                           ; BSR set to: 15
  4726  00143C  010F               	movlb	15	; () banked
  4727  00143E  8F3F               	bsf	63,7,b	;volatile
  4728                           
  4729                           ; BSR set to: 15
  4730  001440  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4731  001442  B4D8               	btfsc	status,2,c
  4732  001444  D002               	goto	l2210
  4733                           
  4734                           ; BSR set to: 15
  4735  001446  8E91               	bsf	3985,7,c	;volatile
  4736  001448  D000               	goto	l2210
  4737  00144A                     l2210:
  4738                           
  4739                           ; BSR set to: 15
  4740  00144A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4741  00144C  B4D8               	btfsc	status,2,c
  4742  00144E  D009               	goto	l2218
  4743                           
  4744                           ; BSR set to: 15
  4745  001450  ECFC  F00F         	call	_RtccWrOn	;wreg free
  4746  001454  D006               	goto	l2218
  4747  001456                     l2214:
  4748  001456  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4749  001458  A4D8               	btfss	status,2,c
  4750  00145A  D003               	goto	l2218
  4751  00145C  010F               	movlb	15	; () banked
  4752  00145E  9B3F               	bcf	63,5,b	;volatile
  4753                           
  4754                           ; BSR set to: 15
  4755  001460  D000               	goto	l2218
  4756  001462                     l2218:
  4757  001462  5003               	movf	RtccWriteDate@di,w,c
  4758  001464  B4D8               	btfsc	status,2,c
  4759  001466  0012               	return	
  4760  001468  9CF2               	bcf	intcon,6,c	;volatile
  4761  00146A  0012               	return	
  4762                           
  4763                           ;	Return value of _RtccWriteDate is never used
  4764  00146C  0012               	return		;funcret
  4765  00146E                     __end_of_RtccWriteDate:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           indf0	equ	0xFEF
  4775                           postinc0	equ	0xFEE
  4776                           fsr0h	equ	0xFEA
  4777                           fsr0l	equ	0xFE9
  4778                           wreg	equ	0xFE8
  4779                           postinc1	equ	0xFE6
  4780                           postdec1	equ	0xFE5
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function _RtccWrOn *****************
  4791 ;; Defined at:
  4792 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  data            2    0        unsigned int 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, status,2
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4810 ;;Total ram usage:        0 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_Write_RTC
  4816 ;;		_RtccWriteDate
  4817 ;;		_RtccWriteTime
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text27
  4822  001FF8                     __ptext27:
  4823                           	opt stack 0
  4824  001FF8                     _RtccWrOn:
  4825                           	opt stack 27
  4826                           
  4827                           ;incstack = 0
  4828  001FF8  9CF2               	bcf	intcon,6,c	;volatile
  4829  001FFA  0E55               	movlw	85
  4830  001FFC  6EA7               	movwf	4007,c	;volatile
  4831  001FFE  0EAA               	movlw	170
  4832  002000  6EA7               	movwf	4007,c	;volatile
  4833  002002  010F               	movlb	15	; () banked
  4834  002004  8B3F               	bsf	63,5,b	;volatile
  4835                           
  4836                           ; BSR set to: 15
  4837  002006  8CF2               	bsf	intcon,6,c	;volatile
  4838                           
  4839                           ; BSR set to: 15
  4840  002008  0012               	return		;funcret
  4841  00200A                     __end_of_RtccWrOn:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           indf0	equ	0xFEF
  4851                           postinc0	equ	0xFEE
  4852                           fsr0h	equ	0xFEA
  4853                           fsr0l	equ	0xFE9
  4854                           wreg	equ	0xFE8
  4855                           postinc1	equ	0xFE6
  4856                           postdec1	equ	0xFE5
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _Read_RTC *****************
  4867 ;; Defined at:
  4868 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;		None               void
  4875 ;; Registers used:
  4876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;Total ram usage:        0 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    1
  4889 ;; This function calls:
  4890 ;;		_RtccReadDate
  4891 ;;		_RtccReadTime
  4892 ;; This function is called by:
  4893 ;;		_main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text28
  4898  00157A                     __ptext28:
  4899                           	opt stack 0
  4900  00157A                     _Read_RTC:
  4901                           	opt stack 29
  4902                           
  4903                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  4904                           
  4905                           ; BSR set to: 15
  4906                           ;incstack = 0
  4907  00157A  0E49               	movlw	low _RtccTime
  4908  00157C  6E01               	movwf	RtccReadTime@pTm,c
  4909  00157E  0E00               	movlw	high _RtccTime
  4910  001580  6E02               	movwf	RtccReadTime@pTm+1,c
  4911  001582  ECA7  F00D         	call	_RtccReadTime	;wreg free
  4912                           
  4913                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  4914  001586  504A               	movf	_RtccTime+1,w,c
  4915  001588  0B0F               	andlw	15
  4916  00158A  0100               	movlb	0	; () banked
  4917  00158C  6FA4               	movwf	_segundo_u& (0+255),b
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  4921  00158E  384A               	swapf	_RtccTime+1,w,c
  4922  001590  0B0F               	andlw	15
  4923  001592  0B0F               	andlw	15
  4924  001594  6E5E               	movwf	_segundo_d,c
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  4928  001596  504B               	movf	_RtccTime+2,w,c
  4929  001598  0B0F               	andlw	15
  4930  00159A  0100               	movlb	0	; () banked
  4931  00159C  6FA3               	movwf	_minuto_u& (0+255),b
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  4935  00159E  384B               	swapf	_RtccTime+2,w,c
  4936  0015A0  0B0F               	andlw	15
  4937  0015A2  0B0F               	andlw	15
  4938  0015A4  6E5D               	movwf	_minuto_d,c
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  4942  0015A6  504C               	movf	_RtccTime+3,w,c
  4943  0015A8  0B0F               	andlw	15
  4944  0015AA  0100               	movlb	0	; () banked
  4945  0015AC  6FA1               	movwf	_hora_u& (0+255),b
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  4949  0015AE  384C               	swapf	_RtccTime+3,w,c
  4950  0015B0  0B0F               	andlw	15
  4951  0015B2  0B0F               	andlw	15
  4952  0015B4  6E5B               	movwf	_hora_d,c
  4953                           
  4954                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  4955  0015B6  0E45               	movlw	low _RtccDate
  4956  0015B8  6E01               	movwf	RtccReadDate@pDt,c
  4957  0015BA  0E00               	movlw	high _RtccDate
  4958  0015BC  6E02               	movwf	RtccReadDate@pDt+1,c
  4959  0015BE  ECE5  F00C         	call	_RtccReadDate	;wreg free
  4960                           
  4961                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  4962  0015C2  5046               	movf	_RtccDate+1,w,c
  4963  0015C4  0B0F               	andlw	15
  4964  0015C6  0100               	movlb	0	; () banked
  4965  0015C8  6FA0               	movwf	_fecha_u& (0+255),b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  4969  0015CA  3846               	swapf	_RtccDate+1,w,c
  4970  0015CC  0B0F               	andlw	15
  4971  0015CE  0B0F               	andlw	15
  4972  0015D0  6E5A               	movwf	_fecha_d,c
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  4976  0015D2  5047               	movf	_RtccDate+2,w,c
  4977  0015D4  0B0F               	andlw	15
  4978  0015D6  0100               	movlb	0	; () banked
  4979  0015D8  6FA2               	movwf	_mes_u& (0+255),b
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  4983  0015DA  3847               	swapf	_RtccDate+2,w,c
  4984  0015DC  0B0F               	andlw	15
  4985  0015DE  0B0F               	andlw	15
  4986  0015E0  6E5C               	movwf	_mes_d,c
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  4990  0015E2  C045  F09F         	movff	_RtccDate,_dia_semana
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  4994  0015E6  5048               	movf	_RtccDate+3,w,c
  4995  0015E8  0B0F               	andlw	15
  4996  0015EA  0100               	movlb	0	; () banked
  4997  0015EC  6F9E               	movwf	_anio_u& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  5001  0015EE  3848               	swapf	_RtccDate+3,w,c
  5002  0015F0  0B0F               	andlw	15
  5003  0015F2  0B0F               	andlw	15
  5004  0015F4  6E59               	movwf	_anio_d,c
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  5008  0015F6  505E               	movf	_segundo_d,w,c
  5009  0015F8  0D0A               	mullw	10
  5010  0015FA  0100               	movlb	0	; () banked
  5011  0015FC  51A4               	movf	_segundo_u& (0+255),w,b
  5012  0015FE  24F3               	addwf	prodl,w,c
  5013  001600  6E40               	movwf	_segundo,c
  5014  001602  0100               	movlb	0	; () banked
  5015  001604  0E00               	movlw	0
  5016  001606  20F4               	addwfc	prodh,w,c
  5017  001608  6E41               	movwf	_segundo+1,c
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  5021  00160A  505D               	movf	_minuto_d,w,c
  5022  00160C  0D0A               	mullw	10
  5023  00160E  0100               	movlb	0	; () banked
  5024  001610  51A3               	movf	_minuto_u& (0+255),w,b
  5025  001612  24F3               	addwf	prodl,w,c
  5026  001614  6E57               	movwf	_minuto,c
  5027  001616  0100               	movlb	0	; () banked
  5028  001618  0E00               	movlw	0
  5029  00161A  20F4               	addwfc	prodh,w,c
  5030  00161C  6E58               	movwf	_minuto+1,c
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  5034  00161E  505B               	movf	_hora_d,w,c
  5035  001620  0D0A               	mullw	10
  5036  001622  0100               	movlb	0	; () banked
  5037  001624  51A1               	movf	_hora_u& (0+255),w,b
  5038  001626  24F3               	addwf	prodl,w,c
  5039  001628  6E53               	movwf	_hora,c
  5040  00162A  0100               	movlb	0	; () banked
  5041  00162C  0E00               	movlw	0
  5042  00162E  20F4               	addwfc	prodh,w,c
  5043  001630  6E54               	movwf	_hora+1,c
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  5047  001632  505A               	movf	_fecha_d,w,c
  5048  001634  0D0A               	mullw	10
  5049  001636  0100               	movlb	0	; () banked
  5050  001638  51A0               	movf	_fecha_u& (0+255),w,b
  5051  00163A  24F3               	addwf	prodl,w,c
  5052  00163C  6E4F               	movwf	_dia,c
  5053  00163E  0100               	movlb	0	; () banked
  5054  001640  0E00               	movlw	0
  5055  001642  20F4               	addwfc	prodh,w,c
  5056  001644  6E50               	movwf	_dia+1,c
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  5060  001646  C09F  F051         	movff	_dia_semana,_diasem
  5061  00164A  6A52               	clrf	_diasem+1,c
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  5065  00164C  505C               	movf	_mes_d,w,c
  5066  00164E  0D0A               	mullw	10
  5067  001650  0100               	movlb	0	; () banked
  5068  001652  51A2               	movf	_mes_u& (0+255),w,b
  5069  001654  24F3               	addwf	prodl,w,c
  5070  001656  6E55               	movwf	_mes,c
  5071  001658  0100               	movlb	0	; () banked
  5072  00165A  0E00               	movlw	0
  5073  00165C  20F4               	addwfc	prodh,w,c
  5074  00165E  6E56               	movwf	_mes+1,c
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  5078  001660  5059               	movf	_anio_d,w,c
  5079  001662  0D0A               	mullw	10
  5080  001664  0100               	movlb	0	; () banked
  5081  001666  519E               	movf	_anio_u& (0+255),w,b
  5082  001668  24F3               	addwf	prodl,w,c
  5083  00166A  6E4D               	movwf	_anio,c
  5084  00166C  0100               	movlb	0	; () banked
  5085  00166E  0E00               	movlw	0
  5086  001670  20F4               	addwfc	prodh,w,c
  5087  001672  6E4E               	movwf	_anio+1,c
  5088                           
  5089                           ; BSR set to: 0
  5090  001674  0012               	return		;funcret
  5091  001676                     __end_of_Read_RTC:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon	equ	0xFF2
  5100                           indf0	equ	0xFEF
  5101                           postinc0	equ	0xFEE
  5102                           fsr0h	equ	0xFEA
  5103                           fsr0l	equ	0xFE9
  5104                           wreg	equ	0xFE8
  5105                           postinc1	equ	0xFE6
  5106                           postdec1	equ	0xFE5
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function _RtccReadTime *****************
  5117 ;; Defined at:
  5118 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  pTm             2    0[COMRAM] PTR struct .
  5121 ;;		 -> RtccTime(4), 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  rTD0            8   10[COMRAM] struct .
  5124 ;;  rTD1            8    2[COMRAM] struct .
  5125 ;; Return value:  Size  Location     Type
  5126 ;;		None               void
  5127 ;; Registers used:
  5128 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5137 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5138 ;;Total ram usage:       18 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_Read_RTC
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text29
  5148  001B4E                     __ptext29:
  5149                           	opt stack 0
  5150  001B4E                     _RtccReadTime:
  5151                           	opt stack 29
  5152  001B4E  0EFC               	movlw	252
  5153  001B50  010F               	movlb	15	; () banked
  5154  001B52  173F               	andwf	63,f,b	;volatile
  5155                           
  5156                           ; BSR set to: 15
  5157  001B54  010F               	movlb	15	; () banked
  5158  001B56  813F               	bsf	63,0,b	;volatile
  5159                           
  5160                           ; BSR set to: 15
  5161  001B58  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  5162                           
  5163                           ; BSR set to: 15
  5164  001B5C  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  5165                           
  5166                           ; BSR set to: 15
  5167  001B60  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  5168                           
  5169                           ; BSR set to: 15
  5170  001B64  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  5171                           
  5172                           ; BSR set to: 15
  5173  001B68  0EFC               	movlw	252
  5174  001B6A  010F               	movlb	15	; () banked
  5175  001B6C  173F               	andwf	63,f,b	;volatile
  5176  001B6E  010F               	movlb	15	; () banked
  5177  001B70  813F               	bsf	63,0,b	;volatile
  5178                           
  5179                           ; BSR set to: 15
  5180  001B72  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  5181                           
  5182                           ; BSR set to: 15
  5183  001B76  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  5184                           
  5185                           ; BSR set to: 15
  5186  001B7A  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  5187                           
  5188                           ; BSR set to: 15
  5189  001B7E  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  5190                           
  5191                           ; BSR set to: 15
  5192  001B82  5009               	movf	RtccReadTime@rTD1+6,w,c
  5193  001B84  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  5194  001B86  A4D8               	btfss	status,2,c
  5195  001B88  D7E2               	goto	l2326
  5196                           
  5197                           ; BSR set to: 15
  5198                           
  5199                           ; BSR set to: 15
  5200  001B8A  EE20 F003          	lfsr	2,3
  5201  001B8E  5001               	movf	RtccReadTime@pTm,w,c
  5202  001B90  26D9               	addwf	fsr2l,f,c
  5203  001B92  5002               	movf	RtccReadTime@pTm+1,w,c
  5204  001B94  22DA               	addwfc	fsr2h,f,c
  5205  001B96  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  5206  001B9A  EE20 F002          	lfsr	2,2
  5207  001B9E  5001               	movf	RtccReadTime@pTm,w,c
  5208  001BA0  26D9               	addwf	fsr2l,f,c
  5209  001BA2  5002               	movf	RtccReadTime@pTm+1,w,c
  5210  001BA4  22DA               	addwfc	fsr2h,f,c
  5211  001BA6  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  5212  001BAA  EE20 F001          	lfsr	2,1
  5213  001BAE  5001               	movf	RtccReadTime@pTm,w,c
  5214  001BB0  26D9               	addwf	fsr2l,f,c
  5215  001BB2  5002               	movf	RtccReadTime@pTm+1,w,c
  5216  001BB4  22DA               	addwfc	fsr2h,f,c
  5217  001BB6  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  5218                           
  5219                           ; BSR set to: 15
  5220  001BBA  0012               	return		;funcret
  5221  001BBC                     __end_of_RtccReadTime:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           indf0	equ	0xFEF
  5231                           postinc0	equ	0xFEE
  5232                           fsr0h	equ	0xFEA
  5233                           fsr0l	equ	0xFE9
  5234                           wreg	equ	0xFE8
  5235                           postinc1	equ	0xFE6
  5236                           postdec1	equ	0xFE5
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _RtccReadDate *****************
  5247 ;; Defined at:
  5248 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  pDt             2    0[COMRAM] PTR struct .
  5251 ;;		 -> RtccDate(4), 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  rTD0            8   10[COMRAM] struct .
  5254 ;;  rTD1            8    2[COMRAM] struct .
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5265 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5267 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5268 ;;Total ram usage:       18 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_Read_RTC
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text30
  5278  0019CA                     __ptext30:
  5279                           	opt stack 0
  5280  0019CA                     _RtccReadDate:
  5281                           	opt stack 29
  5282  0019CA  0EFC               	movlw	252
  5283  0019CC  010F               	movlb	15	; () banked
  5284  0019CE  173F               	andwf	63,f,b	;volatile
  5285  0019D0  0E03               	movlw	3
  5286  0019D2  010F               	movlb	15	; () banked
  5287  0019D4  133F               	iorwf	63,f,b	;volatile
  5288                           
  5289                           ; BSR set to: 15
  5290  0019D6  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  5291                           
  5292                           ; BSR set to: 15
  5293  0019DA  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  5294                           
  5295                           ; BSR set to: 15
  5296  0019DE  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  5297                           
  5298                           ; BSR set to: 15
  5299  0019E2  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  5300                           
  5301                           ; BSR set to: 15
  5302  0019E6  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  5303                           
  5304                           ; BSR set to: 15
  5305  0019EA  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  5306  0019EE  0EFC               	movlw	252
  5307  0019F0  010F               	movlb	15	; () banked
  5308  0019F2  173F               	andwf	63,f,b	;volatile
  5309  0019F4  0E03               	movlw	3
  5310  0019F6  010F               	movlb	15	; () banked
  5311  0019F8  133F               	iorwf	63,f,b	;volatile
  5312                           
  5313                           ; BSR set to: 15
  5314  0019FA  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  5315                           
  5316                           ; BSR set to: 15
  5317  0019FE  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  5318                           
  5319                           ; BSR set to: 15
  5320  001A02  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  5321                           
  5322                           ; BSR set to: 15
  5323  001A06  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  5324                           
  5325                           ; BSR set to: 15
  5326  001A0A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  5327                           
  5328                           ; BSR set to: 15
  5329  001A0E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  5330  001A12  5005               	movf	RtccReadDate@rTD1+2,w,c
  5331  001A14  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  5332  001A16  A4D8               	btfss	status,2,c
  5333  001A18  D7D8               	goto	l2352
  5334                           
  5335                           ; BSR set to: 15
  5336                           
  5337                           ; BSR set to: 15
  5338  001A1A  EE20 F001          	lfsr	2,1
  5339  001A1E  5001               	movf	RtccReadDate@pDt,w,c
  5340  001A20  26D9               	addwf	fsr2l,f,c
  5341  001A22  5002               	movf	RtccReadDate@pDt+1,w,c
  5342  001A24  22DA               	addwfc	fsr2h,f,c
  5343  001A26  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  5344  001A2A  EE20 F002          	lfsr	2,2
  5345  001A2E  5001               	movf	RtccReadDate@pDt,w,c
  5346  001A30  26D9               	addwf	fsr2l,f,c
  5347  001A32  5002               	movf	RtccReadDate@pDt+1,w,c
  5348  001A34  22DA               	addwfc	fsr2h,f,c
  5349  001A36  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  5350                           
  5351                           ; BSR set to: 15
  5352  001A3A  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  5353  001A3E  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  5354  001A42  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  5355                           
  5356                           ; BSR set to: 15
  5357  001A46  EE20 F003          	lfsr	2,3
  5358  001A4A  5001               	movf	RtccReadDate@pDt,w,c
  5359  001A4C  26D9               	addwf	fsr2l,f,c
  5360  001A4E  5002               	movf	RtccReadDate@pDt+1,w,c
  5361  001A50  22DA               	addwfc	fsr2h,f,c
  5362  001A52  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  5363                           
  5364                           ; BSR set to: 15
  5365  001A56  0012               	return		;funcret
  5366  001A58                     __end_of_RtccReadDate:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           indf0	equ	0xFEF
  5376                           postinc0	equ	0xFEE
  5377                           fsr0h	equ	0xFEA
  5378                           fsr0l	equ	0xFE9
  5379                           wreg	equ	0xFE8
  5380                           postinc1	equ	0xFE6
  5381                           postdec1	equ	0xFE5
  5382                           fsr1h	equ	0xFE2
  5383                           fsr1l	equ	0xFE1
  5384                           indf2	equ	0xFDF
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           intcon	equ	0xFF2
  5397                           indf0	equ	0xFEF
  5398                           postinc0	equ	0xFEE
  5399                           fsr0h	equ	0xFEA
  5400                           fsr0l	equ	0xFE9
  5401                           wreg	equ	0xFE8
  5402                           postinc1	equ	0xFE6
  5403                           postdec1	equ	0xFE5
  5404                           fsr1h	equ	0xFE2
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           fsr2h	equ	0xFDA
  5410                           fsr2l	equ	0xFD9
  5411                           status	equ	0xFD8
  5412                           
  5413                           	psect	rparam
  5414  0000                     tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           intcon	equ	0xFF2
  5421                           indf0	equ	0xFEF
  5422                           postinc0	equ	0xFEE
  5423                           fsr0h	equ	0xFEA
  5424                           fsr0l	equ	0xFE9
  5425                           wreg	equ	0xFE8
  5426                           postinc1	equ	0xFE6
  5427                           postdec1	equ	0xFE5
  5428                           fsr1h	equ	0xFE2
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           postdec2	equ	0xFDD
  5433                           fsr2h	equ	0xFDA
  5434                           fsr2l	equ	0xFD9
  5435                           status	equ	0xFD8


Data Sizes:
    Strings     83
    Constant    14
    Data        18
    BSS         83
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      95
    BANK0           160      0      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_9(CODE[15]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_13(CODE[9]), STR_12(CODE[11]), STR_11(CODE[14]), ingresar_password@clear(COMRAM[16]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), buffer2(BANK0[20]), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 9
		 -> STR_13(CODE[9]), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_caratula
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   31827
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                       _leer_teclado
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2   15569
                                             40 COMRAM     5     3      2
           _guardar_tecla_presionada
                     _imprimir_tecla
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             4     0      4    7954
                                             36 COMRAM     4     0      4
                     _imprimir_tecla
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _imprimir_tecla                                       1     1      0    4774
                                             35 COMRAM     1     1      0
           _guardar_current_password
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    4767
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                            20    18      2    6759
                                             35 COMRAM    20    18      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2044
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2686
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1873
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1205
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _leer_teclado
     _guardar_tecla_presionada
       _imprimir_tecla
         _guardar_current_password
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _imprimir_tecla
       _guardar_current_password
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      4B       5       46.9%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     37      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA       6        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 25 00:49:50 2016

                                _a 0082                                  _b 0084  
                                _c 0086                                  _i 003A  
                                _j 003C                                  _k 0088  
                   ?_lcd_send_byte 0003                       ___awdiv@sign 0006  
              ___wmul@multiplicand 0003                        lcd_comand@d 0005  
                     __CFG_CP0$OFF 000000                                l203 1750  
                              l152 1EFE                                l161 1CDE  
                              l171 1C34                                l180 1C5A  
                              l172 1C30                                l190 170C  
                              l327 1136                                l175 1C48  
                              l191 1708                                l248 1F50  
                              l184 1C76                                l176 1C44  
                              l249 1F52                                l194 1720  
                              l179 1C5E                                l195 171C  
                              l198 173A                                l199 1736  
                              l971 1D32                                l981 1DD2  
                              _dia 004F                                _key 0044  
                              _mes 0055                                wreg 000FE8  
                  RtccReadDate@pDt 0001                        lcd_gotoxy@x 0006  
                      lcd_gotoxy@y 0005                               l2002 0FA0  
                             l2100 14D6                               l2020 103E  
                             l2004 0FB6                               l2110 1506  
                             l2022 1060                               l2104 14EA  
                             l2040 10B0                               l2032 1088  
                             l2016 1038                               l2008 0FD4  
                             l2210 144A                               l2050 10EA  
                             l2044 10D4                               l2036 10AC  
                             l2028 107C                               l2214 1456  
                             l2142 1562                               l2070 1190  
                             l2046 10DE                               l2230 1E62  
                             l2240 194A                               l2080 1D3E  
                             l2064 113C                               l2056 110C  
                             l2072 119C                               l2218 1462  
                             l2162 138A                               l2146 156E  
                             l2138 1556                               l1274 1FD6  
                             l2058 1114                               l2074 11B8  
                             l2172 13D8                               l2252 1972  
                             l2084 1D68                               l2326 1B4E  
                             l2094 14AC                               l2254 197C  
                             l2246 195C                               l2422 1A7E  
                             l2352 19CA                               l2168 13C4  
                             l2272 19BE                               l2264 19A2  
                             l2256 1984                               l2440 1AAA  
                             l2432 1A96                               l2178 13F4  
                             l2426 1A86                               l2610 17AE  
                             l2602 1786                               l2268 19AE  
                             l1900 1FA0                               l1910 1DF8  
                             l2390 1CBC                               l2630 1818  
                             l1912 1E04                               l2552 187A  
                             l2392 1CC2                               l2616 17D6  
                             l2608 179E                               l2544 1758  
                             l1906 1DE0                               l2394 1CD2  
                             l2386 1C92                               l2634 182C  
                             l1908 1DEC                               l1916 1E10  
                             l2548 1866                               l2644 1F06  
                             l1942 1CF6                               l1926 1FCA  
                             l2558 1892                               l2638 1844  
                             l1872 1FE8                               l1944 1D00  
                             l1954 1D26                               l1946 1D08  
                             l1970 1DC6                               l1962 1D9E  
                             l1964 1DA8                               l1966 1DB0  
                             l1990 0F6E                               l2598 1772  
                             l1984 1ECC                               l1898 1F9A  
                             l1996 0F88                               l1998 0F96  
                             STR_1 0F51                               STR_2 0F58  
                             STR_3 0F5A                               STR_4 0F5C  
                             STR_5 0F5E                               STR_6 0F58  
                             STR_7 0F56                               STR_8 0F60  
                             STR_9 0F20                               u1100 1B32  
                             u1040 1AE4                               u2010 17EA  
                             u1060 1AFC                               u1118 1B34  
                             u1080 1B16                               u1058 1AE6  
                             u2107 1FEA                               u1078 1AFE  
                             u1098 1B18                               u1370 1D5E  
                             u1380 1D88                               u2077 175E  
                             u2087 1832                               u2097 1FD8  
                             u1377 1D54                               u1387 1D7E  
                 ?_lcd_send_nibble 0001                               _anio 004D  
                             _flag 02F8                               _main 1F00  
                             _hora 0053                               fsr0h 000FEA  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                    __CFG_T1DIG$ON 000000                               prodh 000FF4  
                             prodl 000FF3                               start 0000  
                    __CFG_IESO$OFF 000000                   RtccReadDate@rTD0 000B  
                 RtccReadDate@rTD1 0003                       ___param_bank 000010  
                  RtccReadTime@pTm 0001                        _Delay1KTCYx 1FD4  
                    __CFG_PLLDIV$1 000000                              ?_main 0001  
                  __end_of___awdiv 19CA                              STR_10 0F0F  
                            STR_11 0F2F                              STR_12 0F3D  
                            STR_13 0F48              __size_of_Delay100TCYx 0012  
                  ___awdiv@divisor 0003                    __end_of___lwdiv 1D3C  
                  __end_of___lwmod 1DDC                    ___awdiv@counter 0005  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                      ?_leer_teclado 0029  
                   __CFG_FCMEN$OFF 000000                              _Setup 1E72  
                   _ocultar_teclas 003E                    __end_of_dpowers 0F0B  
                            _mes_d 005C                              _mes_u 00A2  
                  __end_of_isdigit 1FD4                     __pbitbssCOMRAM 02F8  
                            tablat 000FF5                       lcd_putrs@ptr 0009  
                            status 000FD8                    __end_of_sprintf 11C8  
                validar_password@i 0003            __CFG_DSWDTOSC$INTOSCREF 000000  
                  __initialization 1BBC                       _Delay100TCYx 1FE6  
                     __end_of_main 1F34                    ??_lcd_send_byte 0004  
                 RtccReadTime@rTD0 000B                   RtccReadTime@rTD1 0003  
                 __end_of_Read_RTC 1676           _guardar_current_password 1EBA  
                           ??_main 0038                      __activetblptr 000002  
                   ??_leer_teclado 002B                   __end_of_RtccWrOn 200A  
                           ?_Setup 0001                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _EECON2 000FA7  
                           _ANCON0 000F48                             _ANCON1 000F49  
                 ___awdiv@dividend 0001                     __CFG_WDTEN$OFF 000000  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                   __CFG_WPCFG$OFF 000000                   __end_of_caratula 1934  
                   __CFG_WPDIS$OFF 000000                     __CFG_XINST$OFF 000000  
                 __end_of_lcd_init 1AD8                   __end_of_lcd_putc 1E28  
                ?_validar_password 0001                             ___wmul 1F66  
                        ??___awdiv 0005                     __CFG_STVREN$ON 000000  
                           _diasem 0051                             _anio_d 0059  
                           _anio_u 009E                          ??___lwdiv 0005  
                        ??___lwmod 000C                 ??_validar_password 0001  
                           _hora_d 005B                             _hora_u 00A1  
                           clear_0 1BC2                             clear_1 1BD0  
                 ___awdiv@quotient 0007                             _minuto 0057  
            __end_of_RtccWriteDate 146E              __end_of_RtccWriteTime 157A  
                 RtccWriteTime@pTm 0001           _guardar_tecla_presionada 1C20  
                     __pdataCOMRAM 004D                          ??_isdigit 0001  
                 ??_imprimir_tecla 0024                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_sprintf 0017  
                       __accesstop 0060            __end_of__initialization 1C16  
               __size_of_Write_RTC 0160                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001                      __end_of_Setup 1EBA  
                     __pidataBANK0 2024                    __CFG_DSWDTPS$G2 000000  
              leer_teclado@ocultar 0029                    __CFG_OSC$INTOSC 000000  
                          ??_Setup 000E                  lcd_gotoxy@address 0007  
               __size_of_lcd_putrs 0054                       sprintf@width 0021  
                       __pbssBANK0 0060                          ?_Read_RTC 0001  
                       _dia_semana 009F          RtccWriteTime@tempHourWDay 000A  
                       __pnvCOMRAM 0059               __end_of_leer_teclado 176A  
                        ?_RtccWrOn 0001                     lcd_send_byte@n 0003  
                          ?___wmul 0001                      ?_RtccReadDate 0001  
                    ?_RtccReadTime 0001                       ?_Delay1KTCYx 0001  
                __end_of_Write_RTC 1328                         _lcd_comand 200A  
                        ?_caratula 0024                         _lcd_gotoxy 1F8E  
                          _RTCVALH 000F99                            _RTCVALL 000F98  
                    caratula@clear 0026                          ?_lcd_init 0001  
                        ?_lcd_putc 0001                         ??_Read_RTC 0013  
       ??_guardar_current_password 0001                            __Hparam 0000  
                          __Lparam 0000           __size_of_lcd_send_nibble 0076  
                       ??_RtccWrOn 0001                     ??_RtccReadDate 0003  
                       _autorizado 0038                     ??_RtccReadTime 0003  
                          ___awdiv 1934                  __end_of_lcd_putrs 1D90  
                  __size_of___wmul 0028                            ___lwdiv 1CE0  
                          ___lwmod 1D90                       __psmallconst 0F00  
                      _RtccTimeVal 007E                            __pcinit 1BBC  
                          _fecha_d 005A                            _fecha_u 00A0  
                          __ramtop 0F00                            __ptext0 1F00  
                          __ptext1 1676                            __ptext2 1C20  
                          __ptext3 1E28                            __ptext4 1EBA  
                          __ptext5 176A                            __ptext6 1C80  
                          __ptext7 185E                            __ptext8 0F64  
                          __ptext9 1FB2                            _buffer2 008A  
                        _T1CONbits 000FCD                            _dpowers 0F01  
                          _isdigit 1FB2                         ??_caratula 0026  
                          _segundo 0040                            _sprintf 0F64  
                       ??_lcd_init 0005                         ??_lcd_putc 0008  
             end_of_initialization 1C16               lcd_send_byte@address 0004  
                    __Lmediumconst 0000                            postdec1 000FE5  
                          postdec2 000FDD         ??_guardar_tecla_presionada 0029  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE              __end_of_lcd_send_byte 1F66  
                        _PORTAbits 000F80                          _PORTCbits 000F82  
                 __CFG_DSBOREN$OFF 000000                        ?_lcd_comand 0001  
                 __CFG_CPUDIV$OSC1 000000                 ingresar_password@i 001E  
                        _TRISBbits 000F93                        ?_lcd_gotoxy 0005  
        __size_of_validar_password 0060                    _LCD_INIT_STRING 0F0B  
            __size_of_leer_teclado 00F4                   _current_password 0078  
                 __CFG_IOL1WAY$OFF 000000          RtccWriteDate@tempDayMonth 000A  
              __CFG_MSSP7B_EN$MSK7 000000                      leer_teclado@i 002C  
                 Delay100TCYx@unit 0001                     __end_of___wmul 1F8E  
                    __pidataCOMRAM 2018          RtccWriteDate@tempHourWDay 000C  
                ??_lcd_send_nibble 0001               __size_of_Delay1KTCYx 0012  
                 __CFG_DSWDTEN$OFF 000000                start_initialization 1BBC  
                     _leer_teclado 1676               __end_of_RtccReadDate 1A58  
             __end_of_RtccReadTime 1BBC               RtccWriteTime@wasAlrm 0006  
             RtccWriteTime@wasWrEn 0007   __end_of_guardar_current_password 1F00  
    guardar_current_password@valor 0003             __size_of_RtccWriteDate 0146  
                  RtccWriteDate@di 0003             __size_of_RtccWriteTime 010C  
                __size_of_Read_RTC 00FC                __size_of_lcd_comand 000E  
              __size_of_lcd_gotoxy 0024                           ??___wmul 0005  
                      __pdataBANK0 00A5                  __size_of_RtccWrOn 0012  
                  RtccWriteTime@di 0003                   __CFG_LPT1OSC$OFF 000000  
                      _ALRMCFGbits 000F91            __end_of_LCD_INIT_STRING 0F0F  
                      __pbssCOMRAM 0038                          _Write_RTC 11C8  
                     _isdigit$2066 0002                  __size_of_caratula 00D6  
                  Delay1KTCYx@unit 0001                  __size_of_lcd_init 0080  
                      sprintf@flag 001D                  __size_of_lcd_putc 004C  
                      sprintf@prec 0020            __size_of_imprimir_tecla 004A  
                        __pnvBANK0 009E                   _tamanio_password 0042  
                 ___lwdiv@dividend 0001                      ?_Delay100TCYx 0001  
 __end_of_guardar_tecla_presionada 1C80                           ?___awdiv 0001  
                         ?___lwdiv 0001                           ?___lwmod 0008  
          RtccWriteTime@tempMinSec 0008                          _lcd_putrs 1D3C  
                    _RtccWriteDate 1328                        __smallconst 0F00  
                    _RtccWriteTime 146E                           ?_isdigit 0001  
             __CFG_RTCOSC$T1OSCREF 000000                   _validar_password 1C80  
                   __size_of_Setup 0048                         ?_Write_RTC 0001  
                 ___lwdiv@quotient 0005                           ?_sprintf 000D  
                        caratula@i 0036                  _ingresar_password 176A  
                 _RtccAlrmTimeDate 0060                     ___wmul@product 0005  
                         _LATAbits 000F89                           _LATBbits 000F8A  
               ?_ingresar_password 0001                           _PIE3bits 000FA3  
                        _segundo_d 005E                     ??_Delay100TCYx 0001  
                        _segundo_u 00A4                   __CFG_WDTPS$32768 000000  
              ??_ingresar_password 000B                 RtccWriteDate@wasOn 0005  
        guardar_tecla_presionada@i 0027                 _Rtcc_read_TimeDate 0070  
                   ?_RtccWriteDate 0001                         ?_lcd_putrs 0009  
                ___wmul@multiplier 0001                     ?_RtccWriteTime 0001  
__size_of_guardar_current_password 0046                     caratula@titulo 0024  
        ?_guardar_current_password 0001                          lcd_init@i 0005  
            __size_of_RtccReadDate 008E                       ??_lcd_comand 0005  
                        lcd_putc@c 0008              __size_of_RtccReadTime 006E  
              imprimir_tecla@tecla 0024                       ??_lcd_gotoxy 0006  
        __end_of_ingresar_password 185E                          copy_data0 1BEA  
                        copy_data1 1C0A                           _Read_RTC 157A  
                  _lcd_send_nibble 1AD8                           __Hrparam 0000  
                         _RtccDate 0045                           __Lrparam 0000  
                         _RtccTime 0049                           _RtccWrOn 1FF8  
               __end_of_lcd_comand 2018                 __end_of_lcd_gotoxy 1FB2  
    guardar_tecla_presionada@letra 0025                       _RtccReadDate 19CA  
                 __size_of___awdiv 0096                       _RtccReadTime 1B4E  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     _RtccTimeDate 0068                         sprintf@val 001E  
                         _caratula 185E                   __size_of_isdigit 0022  
                  ___lwdiv@divisor 0003                        ??_Write_RTC 000E  
                  ___lwdiv@counter 0007  __size_of_guardar_tecla_presionada 0060  
                         __ptext10 1F66                           __ptext11 1D90  
                         __ptext20 1F34                           __ptext12 1CE0  
                         __ptext21 1AD8                           __ptext13 1D3C  
                         __ptext30 19CA                           __ptext22 1FE6  
                         __ptext14 1DDC                           __ptext23 11C8  
                         __ptext15 1F8E                           __ptext24 1934  
                         __ptext16 1E72                           __ptext25 146E  
                         __ptext17 1A58                           __ptext26 1328  
                         __ptext18 1FD4                           __ptext27 1FF8  
                         __ptext19 200A                           __ptext28 157A  
                         __ptext29 1B4E          ?_guardar_tecla_presionada 0025  
                         _lcd_init 1A58                           _lcd_putc 1DDC  
                 __size_of_sprintf 0264             __size_of_lcd_send_byte 0032  
                   _imprimir_tecla 1E28                      __size_of_main 0034  
                         _minuto_d 005D                           _minuto_u 00A3  
                         _password 00A5                      ??_Delay1KTCYx 0001  
                  ??_RtccWriteDate 0004                    ??_RtccWriteTime 0004  
                      ??_lcd_putrs 000B                        _OSCTUNEbits 000F9B  
                       _INTCONbits 000FF2                 RtccWriteTime@wasOn 0005  
             __end_of_Delay100TCYx 1FF8                           isdigit@c 0003  
       __size_of_ingresar_password 00F4             __end_of_imprimir_tecla 1E72  
                        sprintf@ap 001B            __end_of_lcd_send_nibble 1B4E  
                        sprintf@sp 000D                   ___lwmod@dividend 0008  
                       _OSCCONbits 000FD3           __end_of_validar_password 1CE0  
            RtccWriteDate@tempYear 0007                      _lcd_send_byte 1F34  
                       _RTCCFGbits 000F3F                           sprintf@c 0023  
                         sprintf@f 000F                    ___lwmod@divisor 000A  
              __end_of_Delay1KTCYx 1FE6                    ___lwmod@counter 000C  
             RtccWriteDate@wasAlrm 0006               RtccWriteDate@wasWrEn 0009  
           ingresar_password@i_951 001C                    ?_imprimir_tecla 0001  
           ingresar_password@clear 000C              lcd_send_nibble@nibble 0002  
