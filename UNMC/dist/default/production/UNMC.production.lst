

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 25 19:19:31 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataCOMRAM
    57  00222A                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _anio
    61  00222A  000F               	dw	15
    62                           
    63                           ;initializer for _dia
    64  00222C  0008               	dw	8
    65                           
    66                           ;initializer for _diasem
    67  00222E  0003               	dw	3
    68                           
    69                           ;initializer for _hora
    70  002230  0012               	dw	18
    71                           
    72                           ;initializer for _mes
    73  002232  0009               	dw	9
    74                           
    75                           ;initializer for _minuto
    76  002234  001E               	dw	30
    77                           
    78                           ;initializer for _visualizar_tecla_presionada
    79  002236  0001               	dw	1
    80                           
    81                           	psect	idataBANK0
    82  00225A                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _password
    86  00225A  31                 	db	49
    87  00225B  32                 	db	50
    88  00225C  33                 	db	51
    89  00225D  34                 	db	52
    90  00225E  35                 	db	53
    91  00225F  36                 	db	54
    92                           
    93                           	psect	smallconst
    94  000F00                     __psmallconst:
    95                           	opt stack 0
    96  000F00  00                 	db	0
    97  000F01                     _dpowers:
    98                           	opt stack 0
    99  000F01  0001               	dw	1
   100  000F03  000A               	dw	10
   101  000F05  0064               	dw	100
   102  000F07  03E8               	dw	1000
   103  000F09  2710               	dw	10000
   104  000F0B                     __end_of_dpowers:
   105                           	opt stack 0
   106  000F0B                     _LCD_INIT_STRING:
   107                           	opt stack 0
   108  000F0B  28                 	db	40
   109  000F0C  0C                 	db	12
   110  000F0D  01                 	db	1
   111  000F0E  06                 	db	6
   112  000F0F                     __end_of_LCD_INIT_STRING:
   113                           	opt stack 0
   114  000F0F                     STR_12:
   115                           
   116                           ; BSR set to: 15
   117  000F0F  49                 	db	73	;'I'
   118  000F10  6E                 	db	110	;'n'
   119  000F11  73                 	db	115	;'s'
   120  000F12  65                 	db	101	;'e'
   121  000F13  72                 	db	114	;'r'
   122  000F14  74                 	db	116	;'t'
   123  000F15  65                 	db	101	;'e'
   124  000F16  20                 	db	32
   125  000F17  70                 	db	112	;'p'
   126  000F18  61                 	db	97	;'a'
   127  000F19  73                 	db	115	;'s'
   128  000F1A  73                 	db	115	;'s'
   129  000F1B  77                 	db	119	;'w'
   130  000F1C  6F                 	db	111	;'o'
   131  000F1D  72                 	db	114	;'r'
   132  000F1E  64                 	db	100	;'d'
   133  000F1F  00                 	db	0
   134  000F20                     STR_11:
   135                           
   136                           ; BSR set to: 15
   137  000F20  20                 	db	32
   138  000F21  20                 	db	32
   139  000F22  25                 	db	37
   140  000F23  30                 	db	48	;'0'
   141  000F24  32                 	db	50	;'2'
   142  000F25  75                 	db	117	;'u'
   143  000F26  3A                 	db	58	;':'
   144  000F27  25                 	db	37
   145  000F28  30                 	db	48	;'0'
   146  000F29  32                 	db	50	;'2'
   147  000F2A  75                 	db	117	;'u'
   148  000F2B  3A                 	db	58	;':'
   149  000F2C  25                 	db	37
   150  000F2D  30                 	db	48	;'0'
   151  000F2E  32                 	db	50	;'2'
   152  000F2F  75                 	db	117	;'u'
   153  000F30  00                 	db	0
   154  000F31                     STR_10:
   155                           
   156                           ; BSR set to: 15
   157  000F31  25                 	db	37
   158  000F32  30                 	db	48	;'0'
   159  000F33  32                 	db	50	;'2'
   160  000F34  75                 	db	117	;'u'
   161  000F35  2F                 	db	47
   162  000F36  25                 	db	37
   163  000F37  30                 	db	48	;'0'
   164  000F38  32                 	db	50	;'2'
   165  000F39  75                 	db	117	;'u'
   166  000F3A  2F                 	db	47
   167  000F3B  25                 	db	37
   168  000F3C  30                 	db	48	;'0'
   169  000F3D  32                 	db	50	;'2'
   170  000F3E  75                 	db	117	;'u'
   171  000F3F  00                 	db	0
   172  000F40                     STR_17:
   173                           
   174                           ; BSR set to: 15
   175  000F40  4D                 	db	77	;'M'
   176  000F41  65                 	db	101	;'e'
   177  000F42  6E                 	db	110	;'n'
   178  000F43  75                 	db	117	;'u'
   179  000F44  20                 	db	32
   180  000F45  66                 	db	102	;'f'
   181  000F46  65                 	db	101	;'e'
   182  000F47  63                 	db	99	;'c'
   183  000F48  68                 	db	104	;'h'
   184  000F49  61                 	db	97	;'a'
   185  000F4A  00                 	db	0
   186  000F4B                     STR_13:
   187                           
   188                           ; BSR set to: 15
   189  000F4B  45                 	db	69	;'E'
   190  000F4C  52                 	db	82	;'R'
   191  000F4D  52                 	db	82	;'R'
   192  000F4E  4F                 	db	79	;'O'
   193  000F4F  52                 	db	82	;'R'
   194  000F50  20                 	db	32
   195  000F51  70                 	db	112	;'p'
   196  000F52  61                 	db	97	;'a'
   197  000F53  73                 	db	115	;'s'
   198  000F54  73                 	db	115	;'s'
   199  000F55  00                 	db	0
   200  000F56                     STR_15:
   201                           
   202                           ; BSR set to: 15
   203  000F56  57                 	db	87	;'W'
   204  000F57  65                 	db	101	;'e'
   205  000F58  6C                 	db	108	;'l'
   206  000F59  63                 	db	99	;'c'
   207  000F5A  6F                 	db	111	;'o'
   208  000F5B  6D                 	db	109	;'m'
   209  000F5C  65                 	db	101	;'e'
   210  000F5D  20                 	db	32
   211  000F5E  00                 	db	0
   212  000F5F                     STR_1:
   213                           
   214                           ; BSR set to: 15
   215  000F5F  25                 	db	37
   216  000F60  30                 	db	48	;'0'
   217  000F61  31                 	db	49	;'1'
   218  000F62  75                 	db	117	;'u'
   219  000F63  00                 	db	0
   220  000F64                     STR_16:
   221                           
   222                           ; BSR set to: 15
   223  000F64  30                 	db	48	;'0'
   224  000F65  30                 	db	48	;'0'
   225  000F66  31                 	db	49	;'1'
   226  000F67  00                 	db	0
   227  000F68                     STR_8:
   228                           
   229                           ; BSR set to: 15
   230  000F68  23                 	db	35
   231  000F69  00                 	db	0
   232  000F6A                     STR_3:
   233                           
   234                           ; BSR set to: 15
   235  000F6A  2A                 	db	42
   236  000F6B  00                 	db	0
   237  000F6C                     STR_4:
   238                           
   239                           ; BSR set to: 15
   240  000F6C  41                 	db	65	;'A'
   241  000F6D  00                 	db	0
   242  000F6E                     STR_5:
   243                           
   244                           ; BSR set to: 15
   245  000F6E  42                 	db	66	;'B'
   246  000F6F  00                 	db	0
   247  000F70                     STR_6:
   248                           
   249                           ; BSR set to: 15
   250  000F70  43                 	db	67	;'C'
   251  000F71  00                 	db	0
   252  000F72                     STR_9:
   253                           
   254                           ; BSR set to: 15
   255  000F72  44                 	db	68	;'D'
   256  000F73  00                 	db	0
   257  0000                     
   258                           ; #config settings
   259  000F74  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	nvBANK0
   262  0000B5                     __pnvBANK0:
   263                           	opt stack 0
   264  0000B5                     _anio_d:
   265                           	opt stack 0
   266  0000B5                     	ds	1
   267  0000B6                     _anio_u:
   268                           	opt stack 0
   269  0000B6                     	ds	1
   270  0000B7                     _dia_semana:
   271                           	opt stack 0
   272  0000B7                     	ds	1
   273  0000B8                     _fecha_d:
   274                           	opt stack 0
   275  0000B8                     	ds	1
   276  0000B9                     _fecha_u:
   277                           	opt stack 0
   278  0000B9                     	ds	1
   279  0000BA                     _hora_d:
   280                           	opt stack 0
   281  0000BA                     	ds	1
   282  0000BB                     _hora_u:
   283                           	opt stack 0
   284  0000BB                     	ds	1
   285  0000BC                     _mes_d:
   286                           	opt stack 0
   287  0000BC                     	ds	1
   288  0000BD                     _mes_u:
   289                           	opt stack 0
   290  0000BD                     	ds	1
   291  0000BE                     _minuto_d:
   292                           	opt stack 0
   293  0000BE                     	ds	1
   294  0000BF                     _minuto_u:
   295                           	opt stack 0
   296  0000BF                     	ds	1
   297  0000C0                     _segundo_d:
   298                           	opt stack 0
   299  0000C0                     	ds	1
   300  0000C1                     _segundo_u:
   301                           	opt stack 0
   302  0000C1                     	ds	1
   303  0000                     _ANCON0	set	3912
   304  0000                     _ANCON1	set	3913
   305  0000                     _RTCCFG	set	3903
   306  0000                     _RTCCFGbits	set	3903
   307  0000                     _ADCON0	set	4034
   308  0000                     _ADCON1	set	4033
   309  0000                     _ALRMCFGbits	set	3985
   310  0000                     _EECON2	set	4007
   311  0000                     _INTCONbits	set	4082
   312  0000                     _LATAbits	set	3977
   313  0000                     _LATBbits	set	3978
   314  0000                     _OSCCONbits	set	4051
   315  0000                     _OSCTUNEbits	set	3995
   316  0000                     _PIE3bits	set	4003
   317  0000                     _PORTAbits	set	3968
   318  0000                     _PORTCbits	set	3970
   319  0000                     _RTCVALH	set	3993
   320  0000                     _RTCVALL	set	3992
   321  0000                     _T1CONbits	set	4045
   322  0000                     _TRISA	set	3986
   323  0000                     _TRISB	set	3987
   324  0000                     _TRISBbits	set	3987
   325  0000                     _TRISC	set	3988
   326                           
   327                           	psect	cinit
   328  001D82                     __pcinit:
   329                           	opt stack 0
   330  001D82                     start_initialization:
   331                           	opt stack 0
   332  001D82                     __initialization:
   333                           	opt stack 0
   334                           
   335                           ; Clear objects allocated to BANK0 (85 bytes)
   336  001D82  EE00  F060         	lfsr	0,__pbssBANK0
   337  001D86  0E55               	movlw	85
   338  001D88                     clear_0:
   339  001D88  6AEE               	clrf	postinc0,c
   340  001D8A  06E8               	decf	wreg,f,c
   341  001D8C  E1FD               	bnz	clear_0
   342                           
   343                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   344  001D8E  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   345                           
   346                           ; Clear objects allocated to COMRAM (19 bytes)
   347  001D90  EE00  F03E         	lfsr	0,__pbssCOMRAM
   348  001D94  0E13               	movlw	19
   349  001D96                     clear_1:
   350  001D96  6AEE               	clrf	postinc0,c
   351  001D98  06E8               	decf	wreg,f,c
   352  001D9A  E1FD               	bnz	clear_1
   353                           
   354                           ; Initialize objects allocated to BANK0 (6 bytes)
   355                           ; load TBLPTR registers with __pidataBANK0
   356  001D9C  0E5A               	movlw	low __pidataBANK0
   357  001D9E  6EF6               	movwf	tblptrl,c
   358  001DA0  0E22               	movlw	high __pidataBANK0
   359  001DA2  6EF7               	movwf	tblptrh,c
   360  001DA4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   361  001DA6  6EF8               	movwf	tblptru,c
   362  001DA8  EE00  F0C2         	lfsr	0,__pdataBANK0
   363  001DAC  EE10 F006          	lfsr	1,6
   364  001DB0                     copy_data0:
   365  001DB0  0009               	tblrd		*+
   366  001DB2  CFF5 FFEE          	movff	tablat,postinc0
   367  001DB6  50E5               	movf	postdec1,w,c
   368  001DB8  50E1               	movf	fsr1l,w,c
   369  001DBA  E1FA               	bnz	copy_data0
   370                           
   371                           ; Initialize objects allocated to COMRAM (14 bytes)
   372                           ; load TBLPTR registers with __pidataCOMRAM
   373  001DBC  0E2A               	movlw	low __pidataCOMRAM
   374  001DBE  6EF6               	movwf	tblptrl,c
   375  001DC0  0E22               	movlw	high __pidataCOMRAM
   376  001DC2  6EF7               	movwf	tblptrh,c
   377  001DC4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   378  001DC6  6EF8               	movwf	tblptru,c
   379  001DC8  EE00  F051         	lfsr	0,__pdataCOMRAM
   380  001DCC  EE10 F00E          	lfsr	1,14
   381  001DD0                     copy_data1:
   382  001DD0  0009               	tblrd		*+
   383  001DD2  CFF5 FFEE          	movff	tablat,postinc0
   384  001DD6  50E5               	movf	postdec1,w,c
   385  001DD8  50E1               	movf	fsr1l,w,c
   386  001DDA  E1FA               	bnz	copy_data1
   387  001DDC                     end_of_initialization:
   388                           	opt stack 0
   389  001DDC                     __end_of__initialization:
   390                           	opt stack 0
   391  001DDC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   392  001DDE  6EF8               	movwf	tblptru,c
   393  001DE0  0100               	movlb	0
   394  001DE2  EFD6  F00C         	goto	_main	;jump to C main() function
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	bitbssCOMRAM
   405  0002F8                     __pbitbssCOMRAM:
   406                           	opt stack 0
   407  0002F8                     _flag:
   408                           	opt stack 0
   409  0002F8                     	ds	1
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	bssCOMRAM
   420  00003E                     __pbssCOMRAM:
   421                           	opt stack 0
   422  00003E                     _autorizado:
   423                           	opt stack 0
   424  00003E                     	ds	2
   425  000040                     _ocultar_teclas:
   426                           	opt stack 0
   427  000040                     	ds	2
   428  000042                     _segundo:
   429                           	opt stack 0
   430  000042                     	ds	2
   431  000044                     _tamanio_comando:
   432                           	opt stack 0
   433  000044                     	ds	2
   434  000046                     _tamanio_password:
   435                           	opt stack 0
   436  000046                     	ds	2
   437  000048                     _key:
   438                           	opt stack 0
   439  000048                     	ds	1
   440  000049                     _RtccDate:
   441                           	opt stack 0
   442  000049                     	ds	4
   443  00004D                     _RtccTime:
   444                           	opt stack 0
   445  00004D                     	ds	4
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           
   455                           	psect	dataCOMRAM
   456  000051                     __pdataCOMRAM:
   457                           	opt stack 0
   458  000051                     _anio:
   459                           	opt stack 0
   460  000051                     	ds	2
   461  000053                     _dia:
   462                           	opt stack 0
   463  000053                     	ds	2
   464  000055                     _diasem:
   465                           	opt stack 0
   466  000055                     	ds	2
   467  000057                     _hora:
   468                           	opt stack 0
   469  000057                     	ds	2
   470  000059                     _mes:
   471                           	opt stack 0
   472  000059                     	ds	2
   473  00005B                     _minuto:
   474                           	opt stack 0
   475  00005B                     	ds	2
   476  00005D                     _visualizar_tecla_presionada:
   477                           	opt stack 0
   478  00005D                     	ds	2
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488                           	psect	bssBANK0
   489  000060                     __pbssBANK0:
   490                           	opt stack 0
   491  000060                     _datos:
   492                           	opt stack 0
   493  000060                     	ds	16
   494  000070                     _RtccAlrmTimeDate:
   495                           	opt stack 0
   496  000070                     	ds	8
   497  000078                     _RtccTimeDate:
   498                           	opt stack 0
   499  000078                     	ds	8
   500  000080                     _Rtcc_read_TimeDate:
   501                           	opt stack 0
   502  000080                     	ds	8
   503  000088                     _current_password:
   504                           	opt stack 0
   505  000088                     	ds	6
   506  00008E                     _RtccTimeVal:
   507                           	opt stack 0
   508  00008E                     	ds	4
   509  000092                     _comando:
   510                           	opt stack 0
   511  000092                     	ds	3
   512  000095                     _a:
   513                           	opt stack 0
   514  000095                     	ds	2
   515  000097                     _b:
   516                           	opt stack 0
   517  000097                     	ds	2
   518  000099                     _c:
   519                           	opt stack 0
   520  000099                     	ds	2
   521  00009B                     _i:
   522                           	opt stack 0
   523  00009B                     	ds	2
   524  00009D                     _j:
   525                           	opt stack 0
   526  00009D                     	ds	2
   527  00009F                     _k:
   528                           	opt stack 0
   529  00009F                     	ds	2
   530  0000A1                     _buffer2:
   531                           	opt stack 0
   532  0000A1                     	ds	20
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	dataBANK0
   543  0000C2                     __pdataBANK0:
   544                           	opt stack 0
   545  0000C2                     _password:
   546                           	opt stack 0
   547  0000C2                     	ds	6
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	cstackCOMRAM
   558  000001                     __pcstackCOMRAM:
   559                           	opt stack 0
   560  000001                     ??_isdigit:
   561  000001                     ??_guardar_current_password:
   562  000001                     ??_lcd_send_nibble:
   563  000001                     ?___wmul:
   564                           	opt stack 0
   565  000001                     ?___awdiv:
   566                           	opt stack 0
   567  000001                     ?___lwdiv:
   568                           	opt stack 0
   569  000001                     Delay100TCYx@unit:
   570                           	opt stack 0
   571  000001                     Delay1KTCYx@unit:
   572                           	opt stack 0
   573  000001                     validar_comando@candidato:
   574                           	opt stack 0
   575  000001                     RtccReadDate@pDt:
   576                           	opt stack 0
   577  000001                     RtccReadTime@pTm:
   578                           	opt stack 0
   579  000001                     RtccWriteDate@pDt:
   580                           	opt stack 0
   581  000001                     RtccWriteTime@pTm:
   582                           	opt stack 0
   583  000001                     ___wmul@multiplier:
   584                           	opt stack 0
   585  000001                     ___awdiv@dividend:
   586                           	opt stack 0
   587  000001                     ___lwdiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x0
   591  000001                     	ds	1
   592  000002                     lcd_send_nibble@nibble:
   593                           	opt stack 0
   594  000002                     _isdigit$2103:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x1
   598  000002                     	ds	1
   599  000003                     guardar_current_password@valor:
   600                           	opt stack 0
   601  000003                     lcd_send_byte@n:
   602                           	opt stack 0
   603  000003                     RtccWriteDate@di:
   604                           	opt stack 0
   605  000003                     RtccWriteTime@di:
   606                           	opt stack 0
   607  000003                     isdigit@c:
   608                           	opt stack 0
   609  000003                     validar_comando@validar:
   610                           	opt stack 0
   611  000003                     validar_password@i:
   612                           	opt stack 0
   613  000003                     ___wmul@multiplicand:
   614                           	opt stack 0
   615  000003                     ___awdiv@divisor:
   616                           	opt stack 0
   617  000003                     ___lwdiv@divisor:
   618                           	opt stack 0
   619  000003                     RtccReadDate@rTD1:
   620                           	opt stack 0
   621  000003                     RtccReadTime@rTD1:
   622                           	opt stack 0
   623                           
   624                           ; 8 bytes @ 0x2
   625  000003                     	ds	1
   626  000004                     lcd_send_byte@address:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x3
   630  000004                     	ds	1
   631  000005                     ??_validar_comando:
   632  000005                     lcd_init@i:
   633                           	opt stack 0
   634  000005                     lcd_gotoxy@y:
   635                           	opt stack 0
   636  000005                     lcd_comand@d:
   637                           	opt stack 0
   638  000005                     RtccWriteDate@wasOn:
   639                           	opt stack 0
   640  000005                     RtccWriteTime@wasOn:
   641                           	opt stack 0
   642  000005                     ___awdiv@counter:
   643                           	opt stack 0
   644  000005                     ___wmul@product:
   645                           	opt stack 0
   646  000005                     ___lwdiv@quotient:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x4
   650  000005                     	ds	1
   651  000006                     lcd_gotoxy@x:
   652                           	opt stack 0
   653  000006                     RtccWriteDate@wasAlrm:
   654                           	opt stack 0
   655  000006                     RtccWriteTime@wasAlrm:
   656                           	opt stack 0
   657  000006                     ___awdiv@sign:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x5
   661  000006                     	ds	1
   662  000007                     lcd_gotoxy@address:
   663                           	opt stack 0
   664  000007                     RtccWriteTime@wasWrEn:
   665                           	opt stack 0
   666  000007                     ___lwdiv@counter:
   667                           	opt stack 0
   668  000007                     RtccWriteDate@tempYear:
   669                           	opt stack 0
   670  000007                     ___awdiv@quotient:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x6
   674  000007                     	ds	1
   675  000008                     ?___lwmod:
   676                           	opt stack 0
   677  000008                     lcd_putc@c:
   678                           	opt stack 0
   679  000008                     validar_comando@i:
   680                           	opt stack 0
   681  000008                     RtccWriteTime@tempMinSec:
   682                           	opt stack 0
   683  000008                     ___lwmod@dividend:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x7
   687  000008                     	ds	1
   688  000009                     RtccWriteDate@wasWrEn:
   689                           	opt stack 0
   690  000009                     lcd_putrs@ptr:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x8
   694  000009                     	ds	1
   695  00000A                     RtccWriteDate@tempDayMonth:
   696                           	opt stack 0
   697  00000A                     RtccWriteTime@tempHourWDay:
   698                           	opt stack 0
   699  00000A                     ___lwmod@divisor:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x9
   703  00000A                     	ds	1
   704  00000B                     ??_ingresar_password:
   705  00000B                     RtccReadDate@rTD0:
   706                           	opt stack 0
   707  00000B                     RtccReadTime@rTD0:
   708                           	opt stack 0
   709                           
   710                           ; 8 bytes @ 0xA
   711  00000B                     	ds	1
   712  00000C                     ___lwmod@counter:
   713                           	opt stack 0
   714  00000C                     RtccWriteDate@tempHourWDay:
   715                           	opt stack 0
   716  00000C                     ingresar_password@clear:
   717                           	opt stack 0
   718                           
   719                           ; 16 bytes @ 0xB
   720  00000C                     	ds	1
   721  00000D                     ?_sprintf:
   722                           	opt stack 0
   723  00000D                     sprintf@sp:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0xC
   727  00000D                     	ds	1
   728  00000E                     
   729                           ; 0 bytes @ 0xD
   730  00000E                     	ds	1
   731  00000F                     sprintf@f:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0xE
   735  00000F                     	ds	4
   736  000013                     
   737                           ; 0 bytes @ 0x12
   738  000013                     	ds	4
   739  000017                     ??_sprintf:
   740                           
   741                           ; 0 bytes @ 0x16
   742  000017                     	ds	4
   743  00001B                     sprintf@ap:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x1A
   747  00001B                     	ds	1
   748  00001C                     ingresar_password@i_972:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x1B
   752  00001C                     	ds	1
   753  00001D                     sprintf@flag:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x1C
   757  00001D                     	ds	1
   758  00001E                     ingresar_password@i:
   759                           	opt stack 0
   760  00001E                     sprintf@val:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1D
   764  00001E                     	ds	2
   765  000020                     sprintf@prec:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x1F
   769  000020                     	ds	1
   770  000021                     sprintf@width:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x20
   774  000021                     	ds	2
   775  000023                     sprintf@c:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x22
   779  000023                     	ds	1
   780  000024                     ??_guardar_comando:
   781  000024                     imprimir_tecla@tecla:
   782                           	opt stack 0
   783  000024                     caratula@titulo:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x23
   787  000024                     	ds	1
   788  000025                     mostrar_guardar_password@tecla:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x24
   792  000025                     	ds	1
   793  000026                     guardar_comando@tecla:
   794                           	opt stack 0
   795  000026                     caratula@clear:
   796                           	opt stack 0
   797                           
   798                           ; 16 bytes @ 0x25
   799  000026                     	ds	1
   800  000027                     ingresar_comando@key:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x26
   804  000027                     	ds	1
   805  000028                     guardar_tecla_presionada@letra:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x27
   809  000028                     	ds	2
   810  00002A                     guardar_tecla_presionada@i:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x29
   814  00002A                     	ds	2
   815  00002C                     guardar_tecla_presionada@doit:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x2B
   819  00002C                     	ds	2
   820  00002E                     leer_teclado@ocultar:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x2D
   824  00002E                     	ds	2
   825  000030                     leer_teclado@doit:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x2F
   829  000030                     	ds	2
   830  000032                     ??_leer_teclado:
   831                           
   832                           ; 0 bytes @ 0x31
   833  000032                     	ds	1
   834  000033                     leer_teclado@i:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x32
   838  000033                     	ds	3
   839  000036                     caratula@i:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x35
   843  000036                     	ds	2
   844  000038                     main@i:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x37
   848  000038                     	ds	2
   849  00003A                     main@validar:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x39
   853  00003A                     	ds	2
   854  00003C                     main@ocultar_teclas:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x3B
   858  00003C                     	ds	2
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868 ;;
   869 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   870 ;;
   871 ;; *************** function _main *****************
   872 ;; Defined at:
   873 ;;		line 133 in file "main.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  candidato       3    0        PTR unsigned char 
   878 ;;  ocultar_tecl    2   59[COMRAM] int 
   879 ;;  validar         2   57[COMRAM] int 
   880 ;;  i               2   55[COMRAM] int 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  2  254[None  ] int 
   883 ;; Registers used:
   884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   891 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   893 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   894 ;;Total ram usage:        6 bytes
   895 ;; Hardware stack levels required when called:    9
   896 ;; This function calls:
   897 ;;		_Read_RTC
   898 ;;		_Setup
   899 ;;		_caratula
   900 ;;		_ingresar_password
   901 ;;		_lcd_gotoxy
   902 ;;		_lcd_putrs
   903 ;;		_leer_teclado
   904 ;;		_limpiar_comando
   905 ;;		_validar_comando
   906 ;; This function is called by:
   907 ;;		Startup code after reset
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text0
   912  0019AC                     __ptext0:
   913                           	opt stack 0
   914  0019AC                     _main:
   915                           	opt stack 22
   916                           
   917                           ;main.c: 135: Setup();
   918                           
   919                           ; BSR set to: 15
   920                           ;incstack = 0
   921  0019AC  EC4D  F010         	call	_Setup	;wreg free
   922                           
   923                           ;main.c: 136: int i = 1;
   924  0019B0  0E00               	movlw	0
   925  0019B2  6E39               	movwf	main@i+1,c
   926  0019B4  0E01               	movlw	1
   927  0019B6  6E38               	movwf	main@i,c
   928                           
   929                           ;main.c: 137: int validar = 1;
   930  0019B8  0E00               	movlw	0
   931  0019BA  6E3B               	movwf	main@validar+1,c
   932  0019BC  0E01               	movlw	1
   933  0019BE  6E3A               	movwf	main@validar,c
   934                           
   935                           ;main.c: 138: int ocultar_teclas = 1;
   936  0019C0  0E00               	movlw	0
   937  0019C2  6E3D               	movwf	main@ocultar_teclas+1,c
   938  0019C4  0E01               	movlw	1
   939  0019C6  6E3C               	movwf	main@ocultar_teclas,c
   940  0019C8  D000               	goto	l2757
   941  0019CA                     l2757:
   942                           
   943                           ;main.c: 142: {
   944                           ;main.c: 143: Read_RTC();
   945  0019CA  ECE1  F00A         	call	_Read_RTC	;wreg free
   946                           
   947                           ;main.c: 145: if (!autorizado){
   948  0019CE  503E               	movf	_autorizado,w,c
   949  0019D0  103F               	iorwf	_autorizado+1,w,c
   950  0019D2  A4D8               	btfss	status,2,c
   951  0019D4  D00D               	goto	l2765
   952                           
   953                           ;main.c: 146: leer_teclado(ocultar_teclas,mostrar_guardar_password);
   954  0019D6  C03C  F02E         	movff	main@ocultar_teclas,leer_teclado@ocultar
   955  0019DA  C03D  F02F         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
   956  0019DE  0E5A               	movlw	low _mostrar_guardar_password
   957  0019E0  6E30               	movwf	leer_teclado@doit,c
   958  0019E2  0E21               	movlw	high _mostrar_guardar_password
   959  0019E4  6E31               	movwf	leer_teclado@doit+1,c
   960  0019E6  EC52  F00A         	call	_leer_teclado	;wreg free
   961                           
   962                           ;main.c: 147: ingresar_password();
   963  0019EA  ECF1  F00B         	call	_ingresar_password	;wreg free
   964                           
   965                           ;main.c: 148: }else{
   966  0019EE  D7ED               	goto	l2757
   967  0019F0                     l2765:
   968                           
   969                           ;main.c: 149: visualizar_tecla_presionada=0;
   970  0019F0  0E00               	movlw	0
   971  0019F2  6E5E               	movwf	_visualizar_tecla_presionada+1,c
   972  0019F4  0E00               	movlw	0
   973  0019F6  6E5D               	movwf	_visualizar_tecla_presionada,c
   974                           
   975                           ;main.c: 150: leer_teclado(!ocultar_teclas,ingresar_comando);
   976  0019F8  503C               	movf	main@ocultar_teclas,w,c
   977  0019FA  103D               	iorwf	main@ocultar_teclas+1,w,c
   978  0019FC  A4D8               	btfss	status,2,c
   979  0019FE  D002               	goto	u2250
   980  001A00  0E01               	movlw	1
   981  001A02  D001               	goto	u2260
   982  001A04                     u2250:
   983  001A04  0E00               	movlw	0
   984  001A06                     u2260:
   985  001A06  6E2E               	movwf	leer_teclado@ocultar,c
   986  001A08  6A2F               	clrf	leer_teclado@ocultar+1,c
   987  001A0A  0E50               	movlw	low _ingresar_comando
   988  001A0C  6E30               	movwf	leer_teclado@doit,c
   989  001A0E  0E22               	movlw	high _ingresar_comando
   990  001A10  6E31               	movwf	leer_teclado@doit+1,c
   991  001A12  EC52  F00A         	call	_leer_teclado	;wreg free
   992                           
   993                           ;main.c: 152: caratula("Welcome ");
   994  001A16  0E56               	movlw	low STR_15
   995  001A18  6E24               	movwf	caratula@titulo,c
   996  001A1A  0E0F               	movlw	high STR_15
   997  001A1C  6E25               	movwf	caratula@titulo+1,c
   998  001A1E  EC6B  F00C         	call	_caratula	;wreg free
   999                           
  1000                           ;main.c: 154: validar_comando("001",&validar);
  1001  001A22  0E64               	movlw	low STR_16
  1002  001A24  6E01               	movwf	validar_comando@candidato,c
  1003  001A26  0E0F               	movlw	high STR_16
  1004  001A28  6E02               	movwf	validar_comando@candidato+1,c
  1005  001A2A  0E3A               	movlw	low main@validar
  1006  001A2C  6E03               	movwf	validar_comando@validar,c
  1007  001A2E  0E00               	movlw	high main@validar
  1008  001A30  6E04               	movwf	validar_comando@validar+1,c
  1009  001A32  EC53  F00F         	call	_validar_comando	;wreg free
  1010                           
  1011                           ;main.c: 155: if(validar){
  1012  001A36  503A               	movf	main@validar,w,c
  1013  001A38  103B               	iorwf	main@validar+1,w,c
  1014  001A3A  B4D8               	btfsc	status,2,c
  1015  001A3C  D7C6               	goto	l2757
  1016                           
  1017                           ;main.c: 156: lcd_gotoxy(1,2);
  1018  001A3E  0E02               	movlw	2
  1019  001A40  6E05               	movwf	lcd_gotoxy@y,c
  1020  001A42  0E01               	movlw	1
  1021  001A44  ECD7  F010         	call	_lcd_gotoxy
  1022                           
  1023                           ;main.c: 157: lcd_putrs("Menu fecha");
  1024  001A48  0E40               	movlw	low STR_17
  1025  001A4A  6E09               	movwf	lcd_putrs@ptr,c
  1026  001A4C  0E0F               	movlw	high STR_17
  1027  001A4E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1028  001A50  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1029                           
  1030                           ;main.c: 158: limpiar_comando();
  1031  001A54  EC23  F011         	call	_limpiar_comando	;wreg free
  1032  001A58  D7B8               	goto	l2757
  1033                           
  1034                           ;main.c: 159: }
  1035                           ;main.c: 160: }
  1036                           ;main.c: 161: }
  1037                           ;main.c: 162: return 0;
  1038                           ;	Return value of _main is never used
  1039  001A5A  EF00  F000         	goto	start
  1040  001A5E                     __end_of_main:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _validar_comando *****************
  1053 ;; Defined at:
  1054 ;;		line 31 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1057 ;;		 -> STR_16(4), 
  1058 ;;  validar         2    2[COMRAM] PTR int 
  1059 ;;		 -> main@validar(2), NULL(0), 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  i               2    7[COMRAM] int 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  2    0[COMRAM] int 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1073 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1074 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1075 ;;Total ram usage:        9 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; This function calls:
  1078 ;;		Nothing
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text1
  1085  001EA6                     __ptext1:
  1086                           	opt stack 0
  1087  001EA6                     _validar_comando:
  1088                           	opt stack 30
  1089                           
  1090                           ;headers\teclado.h: 33: int i = 0;
  1091                           
  1092                           ;incstack = 0
  1093  001EA6  0E00               	movlw	0
  1094  001EA8  6E09               	movwf	validar_comando@i+1,c
  1095  001EAA  0E00               	movlw	0
  1096  001EAC  6E08               	movwf	validar_comando@i,c
  1097                           
  1098                           ;headers\teclado.h: 34: while (i < 3){
  1099  001EAE  D01F               	goto	l2595
  1100  001EB0                     l2589:
  1101                           
  1102                           ;headers\teclado.h: 36: if (comando[i] != candidato[i])
  1103  001EB0  0E92               	movlw	low _comando
  1104  001EB2  2408               	addwf	validar_comando@i,w,c
  1105  001EB4  6ED9               	movwf	fsr2l,c
  1106  001EB6  0E00               	movlw	high _comando
  1107  001EB8  2009               	addwfc	validar_comando@i+1,w,c
  1108  001EBA  6EDA               	movwf	fsr2h,c
  1109  001EBC  50DF               	movf	indf2,w,c
  1110  001EBE  6E05               	movwf	??_validar_comando& (0+255),c
  1111  001EC0  5008               	movf	validar_comando@i,w,c
  1112  001EC2  2401               	addwf	validar_comando@candidato,w,c
  1113  001EC4  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1114  001EC6  5009               	movf	validar_comando@i+1,w,c
  1115  001EC8  2002               	addwfc	validar_comando@candidato+1,w,c
  1116  001ECA  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1117  001ECC  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1118  001ED0  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1119  001ED4                     	if	0	;tblptru may be non-zero
  1120  001ED4                     	endif
  1121  001ED4                     	if	0	;tblptru may be non-zero
  1122  001ED4                     	endif
  1123  001ED4  0008               	tblrd		*
  1124  001ED6  50F5               	movf	tablat,w,c
  1125  001ED8  1805               	xorwf	??_validar_comando,w,c
  1126  001EDA  B4D8               	btfsc	status,2,c
  1127  001EDC  D005               	goto	l2593
  1128                           
  1129                           ;headers\teclado.h: 37: validar = 0;
  1130  001EDE  0E00               	movlw	0
  1131  001EE0  6E03               	movwf	validar_comando@validar,c
  1132  001EE2  0E00               	movlw	0
  1133  001EE4  6E04               	movwf	validar_comando@validar+1,c
  1134  001EE6  D000               	goto	l2593
  1135  001EE8                     l2593:
  1136                           
  1137                           ;headers\teclado.h: 39: i++;
  1138  001EE8  4A08               	infsnz	validar_comando@i,f,c
  1139  001EEA  2A09               	incf	validar_comando@i+1,f,c
  1140  001EEC  D000               	goto	l2595
  1141  001EEE                     l2595:
  1142  001EEE  BE09               	btfsc	validar_comando@i+1,7,c
  1143  001EF0  D7DF               	goto	l2589
  1144  001EF2  5009               	movf	validar_comando@i+1,w,c
  1145  001EF4  E106               	bnz	l161
  1146  001EF6  0E03               	movlw	3
  1147  001EF8  5C08               	subwf	validar_comando@i,w,c
  1148  001EFA  B0D8               	btfsc	status,0,c
  1149  001EFC  0012               	return	
  1150  001EFE  D7D8               	goto	l2589
  1151  001F00  0012               	return	
  1152  001F02                     l161:
  1153  001F02  0012               	return		;funcret
  1154  001F04                     __end_of_validar_comando:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           indf2	equ	0xFDF
  1165                           fsr2h	equ	0xFDA
  1166                           fsr2l	equ	0xFD9
  1167                           status	equ	0xFD8
  1168                           
  1169 ;; *************** function _limpiar_comando *****************
  1170 ;; Defined at:
  1171 ;;		line 35 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  2  228[None  ] int 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1189 ;;Total ram usage:        0 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text2
  1199  002246                     __ptext2:
  1200                           	opt stack 0
  1201  002246                     _limpiar_comando:
  1202                           	opt stack 30
  1203                           
  1204                           ;headers\password.h: 36: tamanio_password = 0;
  1205                           
  1206                           ;incstack = 0
  1207  002246  0E00               	movlw	0
  1208  002248  6E47               	movwf	_tamanio_password+1,c
  1209  00224A  0E00               	movlw	0
  1210  00224C  6E46               	movwf	_tamanio_password,c
  1211  00224E  0012               	return		;funcret
  1212  002250                     __end_of_limpiar_comando:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           postdec1	equ	0xFE5
  1221                           fsr1l	equ	0xFE1
  1222                           indf2	equ	0xFDF
  1223                           fsr2h	equ	0xFDA
  1224                           fsr2l	equ	0xFD9
  1225                           status	equ	0xFD8
  1226                           
  1227 ;; *************** function _leer_teclado *****************
  1228 ;; Defined at:
  1229 ;;		line 64 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  ocultar         2   45[COMRAM] int 
  1232 ;;  doit            2   47[COMRAM] PTR FTN()PTR unsigned ch
  1233 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  i               2   50[COMRAM] int 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  2   45[COMRAM] int 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1248 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1249 ;;Total ram usage:        7 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    8
  1252 ;; This function calls:
  1253 ;;		_guardar_tecla_presionada
  1254 ;;		_ingresar_comando
  1255 ;;		_lcd_putrs
  1256 ;;		_mostrar_guardar_password
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text3
  1263  0014A4                     __ptext3:
  1264                           	opt stack 0
  1265  0014A4                     _leer_teclado:
  1266                           	opt stack 22
  1267                           
  1268                           ;headers\teclado.h: 65: int i;
  1269                           ;headers\teclado.h: 66: ocultar_teclas = ocultar;
  1270                           
  1271                           ;incstack = 0
  1272  0014A4  C02E  F040         	movff	leer_teclado@ocultar,_ocultar_teclas
  1273  0014A8  C02F  F041         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1274                           
  1275                           ;headers\teclado.h: 68: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=1;
  1276  0014AC  8089               	bsf	3977,0,c	;volatile
  1277  0014AE  9289               	bcf	3977,1,c	;volatile
  1278  0014B0  9489               	bcf	3977,2,c	;volatile
  1279  0014B2  9689               	bcf	3977,3,c	;volatile
  1280  0014B4  0E00               	movlw	0
  1281  0014B6  6E34               	movwf	leer_teclado@i+1,c
  1282  0014B8  0E01               	movlw	1
  1283  0014BA  6E33               	movwf	leer_teclado@i,c
  1284                           
  1285                           ;headers\teclado.h: 69: guardar_tecla_presionada("A",i,doit);
  1286  0014BC  0E6C               	movlw	low STR_4
  1287  0014BE  6E28               	movwf	guardar_tecla_presionada@letra,c
  1288  0014C0  0E0F               	movlw	high STR_4
  1289  0014C2  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1290  0014C4  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1291  0014C8  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1292  0014CC  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1293  0014D0  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1294  0014D4  EC2F  F00D         	call	_guardar_tecla_presionada	;wreg free
  1295                           
  1296                           ;headers\teclado.h: 71: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=4;
  1297  0014D8  9089               	bcf	3977,0,c	;volatile
  1298  0014DA  8289               	bsf	3977,1,c	;volatile
  1299  0014DC  9489               	bcf	3977,2,c	;volatile
  1300  0014DE  9689               	bcf	3977,3,c	;volatile
  1301  0014E0  0E00               	movlw	0
  1302  0014E2  6E34               	movwf	leer_teclado@i+1,c
  1303  0014E4  0E04               	movlw	4
  1304  0014E6  6E33               	movwf	leer_teclado@i,c
  1305                           
  1306                           ;headers\teclado.h: 72: guardar_tecla_presionada("B",i,doit);
  1307  0014E8  0E6E               	movlw	low STR_5
  1308  0014EA  6E28               	movwf	guardar_tecla_presionada@letra,c
  1309  0014EC  0E0F               	movlw	high STR_5
  1310  0014EE  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1311  0014F0  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1312  0014F4  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1313  0014F8  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1314  0014FC  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1315  001500  EC2F  F00D         	call	_guardar_tecla_presionada	;wreg free
  1316                           
  1317                           ;headers\teclado.h: 74: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA
      +                          3=0;i=7;
  1318  001504  9089               	bcf	3977,0,c	;volatile
  1319  001506  9289               	bcf	3977,1,c	;volatile
  1320  001508  8489               	bsf	3977,2,c	;volatile
  1321  00150A  9689               	bcf	3977,3,c	;volatile
  1322  00150C  0E00               	movlw	0
  1323  00150E  6E34               	movwf	leer_teclado@i+1,c
  1324  001510  0E07               	movlw	7
  1325  001512  6E33               	movwf	leer_teclado@i,c
  1326                           
  1327                           ;headers\teclado.h: 75: guardar_tecla_presionada("C",i,doit);
  1328  001514  0E70               	movlw	low STR_6
  1329  001516  6E28               	movwf	guardar_tecla_presionada@letra,c
  1330  001518  0E0F               	movlw	high STR_6
  1331  00151A  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1332  00151C  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1333  001520  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1334  001524  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1335  001528  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1336  00152C  EC2F  F00D         	call	_guardar_tecla_presionada	;wreg free
  1337                           
  1338                           ;headers\teclado.h: 77: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=1;
  1339  001530  9089               	bcf	3977,0,c	;volatile
  1340  001532  9289               	bcf	3977,1,c	;volatile
  1341  001534  9489               	bcf	3977,2,c	;volatile
  1342  001536  8689               	bsf	3977,3,c	;volatile
  1343                           
  1344                           ;headers\teclado.h: 78: {
  1345                           ;headers\teclado.h: 79: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5=
      +                          =1){};}
  1346  001538  AA80               	btfss	3968,5,c	;volatile
  1347  00153A  D00B               	goto	l189
  1348  00153C  0E12               	movlw	18
  1349  00153E  6E48               	movwf	_key,c
  1350  001540  0E6A               	movlw	low STR_3
  1351  001542  6E09               	movwf	lcd_putrs@ptr,c
  1352  001544  0E0F               	movlw	high STR_3
  1353  001546  6E0A               	movwf	lcd_putrs@ptr+1,c
  1354  001548  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1355  00154C  D000               	goto	l190
  1356  00154E                     l190:
  1357  00154E  BA80               	btfsc	3968,5,c	;volatile
  1358  001550  D7FE               	goto	l190
  1359  001552                     l189:
  1360                           
  1361                           ;headers\teclado.h: 80: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};
      +                          }
  1362  001552  AE80               	btfss	3968,7,c	;volatile
  1363  001554  D011               	goto	l193
  1364  001556  0E00               	movlw	0
  1365  001558  6E48               	movwf	_key,c
  1366  00155A  D801               	call	u2098
  1367  00155C  D00B               	goto	l194
  1368  00155E                     u2098:
  1369  00155E  0005               	push	
  1370  001560  6EFA               	movwf	pclath,c
  1371  001562  5030               	movf	leer_teclado@doit,w,c
  1372  001564  6EFD               	movwf	tosl,c
  1373  001566  5031               	movf	leer_teclado@doit+1,w,c
  1374  001568  6EFE               	movwf	tosh,c
  1375  00156A  50F8               	movf	tblptru,w,c
  1376  00156C  6EFF               	movwf	tosu,c
  1377  00156E  50FA               	movf	pclath,w,c
  1378  001570  5048               	movf	_key,w,c
  1379  001572  0012               	return		;indir
  1380  001574                     l194:
  1381  001574  BE80               	btfsc	3968,7,c	;volatile
  1382  001576  D7FE               	goto	l194
  1383  001578                     l193:
  1384                           
  1385                           ;headers\teclado.h: 81: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6=
      +                          =1){};}
  1386  001578  AC80               	btfss	3968,6,c	;volatile
  1387  00157A  D00B               	goto	l197
  1388  00157C  0E13               	movlw	19
  1389  00157E  6E48               	movwf	_key,c
  1390  001580  0E68               	movlw	low STR_8
  1391  001582  6E09               	movwf	lcd_putrs@ptr,c
  1392  001584  0E0F               	movlw	high STR_8
  1393  001586  6E0A               	movwf	lcd_putrs@ptr+1,c
  1394  001588  ECB0  F00F         	call	_lcd_putrs
  1395  00158C  D000               	goto	l198
  1396  00158E                     l198:
  1397  00158E  BC80               	btfsc	3968,6,c	;volatile
  1398  001590  D7FE               	goto	l198
  1399  001592                     l197:
  1400                           
  1401                           ;headers\teclado.h: 82: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2
      +                          ==1){};}
  1402  001592  A482               	btfss	3970,2,c	;volatile
  1403  001594  D00D               	goto	l2651
  1404  001596  0E44               	movlw	68
  1405  001598  6E48               	movwf	_key,c
  1406  00159A  0E72               	movlw	low STR_9
  1407  00159C  6E09               	movwf	lcd_putrs@ptr,c
  1408  00159E  0E0F               	movlw	high STR_9
  1409  0015A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1410  0015A2  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1411  0015A6  D000               	goto	l202
  1412  0015A8                     l202:
  1413  0015A8  A482               	btfss	3970,2,c	;volatile
  1414  0015AA  D002               	goto	l2651
  1415  0015AC  D7FD               	goto	l202
  1416  0015AE  D000               	goto	l2651
  1417  0015B0                     l2651:
  1418                           
  1419                           ;headers\teclado.h: 83: }
  1420                           ;headers\teclado.h: 84: _delay((unsigned long)((98)*(8000000/4000.0)));
  1421  0015B0  0EFF               	movlw	255
  1422  0015B2  6E32               	movwf	??_leer_teclado& (0+255),c
  1423  0015B4  0E8A               	movlw	138
  1424  0015B6                     u2297:
  1425  0015B6  2EE8               	decfsz	wreg,f,c
  1426  0015B8  D7FE               	goto	u2297
  1427  0015BA  2E32               	decfsz	??_leer_teclado& (0+255),f,c
  1428  0015BC  D7FC               	goto	u2297
  1429  0015BE  D000               	nop2	
  1430  0015C0  0012               	return		;funcret
  1431  0015C2                     __end_of_leer_teclado:
  1432                           	opt stack 0
  1433                           tosu	equ	0xFFF
  1434                           tosh	equ	0xFFE
  1435                           tosl	equ	0xFFD
  1436                           pclath	equ	0xFFA
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1l	equ	0xFE1
  1445                           indf2	equ	0xFDF
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _guardar_tecla_presionada *****************
  1451 ;; Defined at:
  1452 ;;		line 57 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  letra           2   39[COMRAM] PTR unsigned char 
  1455 ;;		 -> STR_6(2), STR_5(2), STR_4(2), 
  1456 ;;  i               2   41[COMRAM] int 
  1457 ;;  doit            2   43[COMRAM] PTR FTN(PTR unsigned cha
  1458 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  2   39[COMRAM] int 
  1463 ;; Registers used:
  1464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1470 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1473 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1474 ;;Total ram usage:        6 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    7
  1477 ;; This function calls:
  1478 ;;		_ingresar_comando
  1479 ;;		_lcd_putrs
  1480 ;;		_mostrar_guardar_password
  1481 ;; This function is called by:
  1482 ;;		_leer_teclado
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text4
  1487  001A5E                     __ptext4:
  1488                           	opt stack 0
  1489  001A5E                     _guardar_tecla_presionada:
  1490                           	opt stack 22
  1491                           
  1492                           ;headers\teclado.h: 58: if (PORTAbits.RA5==1){key=i; doit(key);while(PORTAbits.RA5==1){}
      +                          ;}
  1493                           
  1494                           ;incstack = 0
  1495  001A5E  AA80               	btfss	3968,5,c	;volatile
  1496  001A60  D012               	goto	l170
  1497  001A62  C02A  F048         	movff	guardar_tecla_presionada@i,_key
  1498  001A66  C048  FFE8         	movff	_key,wreg
  1499  001A6A  D801               	call	u1878
  1500  001A6C  D00A               	goto	l171
  1501  001A6E                     u1878:
  1502  001A6E  0005               	push	
  1503  001A70  6EFA               	movwf	pclath,c
  1504  001A72  502C               	movf	guardar_tecla_presionada@doit,w,c
  1505  001A74  6EFD               	movwf	tosl,c
  1506  001A76  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1507  001A78  6EFE               	movwf	tosh,c
  1508  001A7A  50F8               	movf	tblptru,w,c
  1509  001A7C  6EFF               	movwf	tosu,c
  1510  001A7E  50FA               	movf	pclath,w,c
  1511  001A80  0012               	return		;indir
  1512  001A82                     l171:
  1513  001A82  BA80               	btfsc	3968,5,c	;volatile
  1514  001A84  D7FE               	goto	l171
  1515  001A86                     l170:
  1516                           
  1517                           ;headers\teclado.h: 59: if (PORTAbits.RA7==1){key=(i)+1; doit(key);while(PORTAbits.RA7==
      +                          1){};}
  1518  001A86  AE80               	btfss	3968,7,c	;volatile
  1519  001A88  D012               	goto	l174
  1520  001A8A  282A               	incf	guardar_tecla_presionada@i,w,c
  1521  001A8C  6E48               	movwf	_key,c
  1522  001A8E  C048  FFE8         	movff	_key,wreg
  1523  001A92  D801               	call	u1908
  1524  001A94  D00A               	goto	l175
  1525  001A96                     u1908:
  1526  001A96  0005               	push	
  1527  001A98  6EFA               	movwf	pclath,c
  1528  001A9A  502C               	movf	guardar_tecla_presionada@doit,w,c
  1529  001A9C  6EFD               	movwf	tosl,c
  1530  001A9E  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1531  001AA0  6EFE               	movwf	tosh,c
  1532  001AA2  50F8               	movf	tblptru,w,c
  1533  001AA4  6EFF               	movwf	tosu,c
  1534  001AA6  50FA               	movf	pclath,w,c
  1535  001AA8  0012               	return		;indir
  1536  001AAA                     l175:
  1537  001AAA  BE80               	btfsc	3968,7,c	;volatile
  1538  001AAC  D7FE               	goto	l175
  1539  001AAE                     l174:
  1540                           
  1541                           ;headers\teclado.h: 60: if (PORTAbits.RA6==1){key=(i)+2; doit(key);while(PORTAbits.RA6==
      +                          1){};}
  1542  001AAE  AC80               	btfss	3968,6,c	;volatile
  1543  001AB0  D013               	goto	l178
  1544  001AB2  502A               	movf	guardar_tecla_presionada@i,w,c
  1545  001AB4  0F02               	addlw	2
  1546  001AB6  6E48               	movwf	_key,c
  1547  001AB8  C048  FFE8         	movff	_key,wreg
  1548  001ABC  D801               	call	u1938
  1549  001ABE  D00A               	goto	l179
  1550  001AC0                     u1938:
  1551  001AC0  0005               	push	
  1552  001AC2  6EFA               	movwf	pclath,c
  1553  001AC4  502C               	movf	guardar_tecla_presionada@doit,w,c
  1554  001AC6  6EFD               	movwf	tosl,c
  1555  001AC8  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1556  001ACA  6EFE               	movwf	tosh,c
  1557  001ACC  50F8               	movf	tblptru,w,c
  1558  001ACE  6EFF               	movwf	tosu,c
  1559  001AD0  50FA               	movf	pclath,w,c
  1560  001AD2  0012               	return		;indir
  1561  001AD4                     l179:
  1562  001AD4  BC80               	btfsc	3968,6,c	;volatile
  1563  001AD6  D7FE               	goto	l179
  1564  001AD8                     l178:
  1565                           
  1566                           ;headers\teclado.h: 61: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbit
      +                          s.RC2==1){};}
  1567  001AD8  A482               	btfss	3970,2,c	;volatile
  1568  001ADA  0012               	return	
  1569  001ADC  502A               	movf	guardar_tecla_presionada@i,w,c
  1570  001ADE  0F0A               	addlw	10
  1571  001AE0  6E48               	movwf	_key,c
  1572  001AE2  C028  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1573  001AE6  C029  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1574  001AEA  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1575  001AEE  D000               	goto	l183
  1576  001AF0                     l183:
  1577  001AF0  A482               	btfss	3970,2,c	;volatile
  1578  001AF2  0012               	return	
  1579  001AF4  D7FD               	goto	l183
  1580  001AF6  0012               	return	
  1581  001AF8  0012               	return		;funcret
  1582  001AFA                     __end_of_guardar_tecla_presionada:
  1583                           	opt stack 0
  1584                           tosu	equ	0xFFF
  1585                           tosh	equ	0xFFE
  1586                           tosl	equ	0xFFD
  1587                           pclath	equ	0xFFA
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _ingresar_comando *****************
  1602 ;; Defined at:
  1603 ;;		line 124 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  key             1    wreg     unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  key             1   38[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  2  251[None  ] int 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1621 ;;Total ram usage:        1 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    3
  1624 ;; This function calls:
  1625 ;;		_guardar_comando
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;;		_guardar_tecla_presionada
  1629 ;;		_leer_teclado
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text5
  1634  002250                     __ptext5:
  1635                           	opt stack 0
  1636  002250                     _ingresar_comando:
  1637                           	opt stack 26
  1638                           
  1639                           ;incstack = 0
  1640                           ;ingresar_comando@key stored from wreg
  1641  002250  6E27               	movwf	ingresar_comando@key,c
  1642                           
  1643                           ;main.c: 125: guardar_comando(key);
  1644  002252  5027               	movf	ingresar_comando@key,w,c
  1645  002254  ECF3  F00E         	call	_guardar_comando
  1646  002258  0012               	return		;funcret
  1647  00225A                     __end_of_ingresar_comando:
  1648                           	opt stack 0
  1649                           tosu	equ	0xFFF
  1650                           tosh	equ	0xFFE
  1651                           tosl	equ	0xFFD
  1652                           pclath	equ	0xFFA
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _mostrar_guardar_password *****************
  1667 ;; Defined at:
  1668 ;;		line 116 in file "main.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  tecla           1    wreg     unsigned char 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  tecla           1   36[COMRAM] unsigned char 
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  2  248[None  ] int 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1686 ;;Total ram usage:        1 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    6
  1689 ;; This function calls:
  1690 ;;		_guardar_current_password
  1691 ;;		_imprimir_tecla
  1692 ;;		_sprintf
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;;		_guardar_tecla_presionada
  1696 ;;		_leer_teclado
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text6
  1701  00215A                     __ptext6:
  1702                           	opt stack 0
  1703  00215A                     _mostrar_guardar_password:
  1704                           	opt stack 23
  1705                           
  1706                           ;incstack = 0
  1707                           ;mostrar_guardar_password@tecla stored from wreg
  1708  00215A  6E25               	movwf	mostrar_guardar_password@tecla,c
  1709                           
  1710                           ;main.c: 118: imprimir_tecla(tecla);
  1711  00215C  5025               	movf	mostrar_guardar_password@tecla,w,c
  1712  00215E  ECDA  F00F         	call	_imprimir_tecla
  1713                           
  1714                           ;main.c: 119: sprintf(buffer2,"%01u",tecla);
  1715  002162  0EA1               	movlw	low _buffer2
  1716  002164  6E0D               	movwf	sprintf@sp,c
  1717  002166  0E00               	movlw	high _buffer2
  1718  002168  6E0E               	movwf	sprintf@sp+1,c
  1719  00216A  0E5F               	movlw	low STR_1
  1720  00216C  6E0F               	movwf	sprintf@f,c
  1721  00216E  0E0F               	movlw	high STR_1
  1722  002170  6E10               	movwf	sprintf@f+1,c
  1723  002172  C025  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  1724  002176  6A12               	clrf	?_sprintf+5,c
  1725  002178  ECBB  F007         	call	_sprintf	;wreg free
  1726                           
  1727                           ;main.c: 120: guardar_current_password(*buffer2);
  1728  00217C  0100               	movlb	0	; () banked
  1729  00217E  51A1               	movf	_buffer2& (0+255),w,b
  1730  002180  EC71  F010         	call	_guardar_current_password
  1731  002184  0012               	return		;funcret
  1732  002186                     __end_of_mostrar_guardar_password:
  1733                           	opt stack 0
  1734                           tosu	equ	0xFFF
  1735                           tosh	equ	0xFFE
  1736                           tosl	equ	0xFFD
  1737                           pclath	equ	0xFFA
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           postdec1	equ	0xFE5
  1745                           fsr1l	equ	0xFE1
  1746                           indf2	equ	0xFDF
  1747                           fsr2h	equ	0xFDA
  1748                           fsr2l	equ	0xFD9
  1749                           status	equ	0xFD8
  1750                           
  1751 ;; *************** function _imprimir_tecla *****************
  1752 ;; Defined at:
  1753 ;;		line 43 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  tecla           1    wreg     unsigned char 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  tecla           1   35[COMRAM] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  2  163[None  ] int 
  1760 ;; Registers used:
  1761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1771 ;;Total ram usage:        1 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    5
  1774 ;; This function calls:
  1775 ;;		_lcd_putrs
  1776 ;;		_sprintf
  1777 ;; This function is called by:
  1778 ;;		_mostrar_guardar_password
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text7
  1783  001FB4                     __ptext7:
  1784                           	opt stack 0
  1785  001FB4                     _imprimir_tecla:
  1786                           	opt stack 23
  1787                           
  1788                           ;incstack = 0
  1789                           ;imprimir_tecla@tecla stored from wreg
  1790  001FB4  6E24               	movwf	imprimir_tecla@tecla,c
  1791                           
  1792                           ;headers\teclado.h: 45: if (!visualizar_tecla_presionada) return 0;
  1793  001FB6  505D               	movf	_visualizar_tecla_presionada,w,c
  1794  001FB8  105E               	iorwf	_visualizar_tecla_presionada+1,w,c
  1795  001FBA  B4D8               	btfsc	status,2,c
  1796  001FBC  0012               	return	
  1797  001FBE  D001               	goto	l2171
  1798                           
  1799                           ;	Return value of _imprimir_tecla is never used
  1800  001FC0  0012               	return	
  1801  001FC2                     l2171:
  1802                           
  1803                           ;headers\teclado.h: 47: sprintf(buffer2,"%01u",tecla);
  1804  001FC2  0EA1               	movlw	low _buffer2
  1805  001FC4  6E0D               	movwf	sprintf@sp,c
  1806  001FC6  0E00               	movlw	high _buffer2
  1807  001FC8  6E0E               	movwf	sprintf@sp+1,c
  1808  001FCA  0E5F               	movlw	low STR_1
  1809  001FCC  6E0F               	movwf	sprintf@f,c
  1810  001FCE  0E0F               	movlw	high STR_1
  1811  001FD0  6E10               	movwf	sprintf@f+1,c
  1812  001FD2  C024  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  1813  001FD6  6A12               	clrf	?_sprintf+5,c
  1814  001FD8  ECBB  F007         	call	_sprintf	;wreg free
  1815                           
  1816                           ;headers\teclado.h: 48: if (ocultar_teclas == 1){
  1817  001FDC  0440               	decf	_ocultar_teclas,w,c
  1818  001FDE  1041               	iorwf	_ocultar_teclas+1,w,c
  1819  001FE0  A4D8               	btfss	status,2,c
  1820  001FE2  D007               	goto	l2177
  1821                           
  1822                           ;headers\teclado.h: 49: lcd_putrs("*");
  1823  001FE4  0E6A               	movlw	low STR_3
  1824  001FE6  6E09               	movwf	lcd_putrs@ptr,c
  1825  001FE8  0E0F               	movlw	high STR_3
  1826  001FEA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1827  001FEC  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1828                           
  1829                           ;headers\teclado.h: 51: }else{
  1830  001FF0  0012               	return	
  1831  001FF2                     l2177:
  1832                           
  1833                           ;headers\teclado.h: 52: lcd_putrs(buffer2);
  1834  001FF2  0EA1               	movlw	low _buffer2
  1835  001FF4  6E09               	movwf	lcd_putrs@ptr,c
  1836  001FF6  0E00               	movlw	high _buffer2
  1837  001FF8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1838  001FFA  ECB0  F00F         	call	_lcd_putrs	;wreg free
  1839  001FFE  0012               	return	
  1840  002000  0012               	return		;funcret
  1841  002002                     __end_of_imprimir_tecla:
  1842                           	opt stack 0
  1843                           tosu	equ	0xFFF
  1844                           tosh	equ	0xFFE
  1845                           tosl	equ	0xFFD
  1846                           pclath	equ	0xFFA
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1l	equ	0xFE1
  1855                           indf2	equ	0xFDF
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _guardar_current_password *****************
  1861 ;; Defined at:
  1862 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  valor           1    wreg     unsigned char 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  valor           1    2[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  2  215[None  ] int 
  1869 ;; Registers used:
  1870 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1879 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;Total ram usage:        3 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_mostrar_guardar_password
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text8
  1890  0020E2                     __ptext8:
  1891                           	opt stack 0
  1892  0020E2                     _guardar_current_password:
  1893                           	opt stack 28
  1894                           
  1895                           ;incstack = 0
  1896                           ;guardar_current_password@valor stored from wreg
  1897  0020E2  6E03               	movwf	guardar_current_password@valor,c
  1898                           
  1899                           ;headers\password.h: 15: if (tamanio_password < 6){
  1900  0020E4  BE47               	btfsc	_tamanio_password+1,7,c
  1901  0020E6  D006               	goto	l2181
  1902  0020E8  5047               	movf	_tamanio_password+1,w,c
  1903  0020EA  E11D               	bnz	l217
  1904  0020EC  0E06               	movlw	6
  1905  0020EE  5C46               	subwf	_tamanio_password,w,c
  1906  0020F0  B0D8               	btfsc	status,0,c
  1907  0020F2  0012               	return	
  1908  0020F4                     l2181:
  1909                           
  1910                           ;headers\password.h: 16: current_password[tamanio_password] = valor;
  1911  0020F4  0E88               	movlw	low _current_password
  1912  0020F6  2446               	addwf	_tamanio_password,w,c
  1913  0020F8  6ED9               	movwf	fsr2l,c
  1914  0020FA  0E00               	movlw	high _current_password
  1915  0020FC  2047               	addwfc	_tamanio_password+1,w,c
  1916  0020FE  6EDA               	movwf	fsr2h,c
  1917  002100  C003  FFDF         	movff	guardar_current_password@valor,indf2
  1918                           
  1919                           ;headers\password.h: 17: current_password [tamanio_password+1] = '\0';
  1920  002104  0E01               	movlw	1
  1921  002106  2446               	addwf	_tamanio_password,w,c
  1922  002108  6E01               	movwf	??_guardar_current_password& (0+255),c
  1923  00210A  0E00               	movlw	0
  1924  00210C  2047               	addwfc	_tamanio_password+1,w,c
  1925  00210E  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  1926  002110  0E88               	movlw	low _current_password
  1927  002112  2401               	addwf	??_guardar_current_password,w,c
  1928  002114  6ED9               	movwf	fsr2l,c
  1929  002116  0E00               	movlw	high _current_password
  1930  002118  2002               	addwfc	??_guardar_current_password+1,w,c
  1931  00211A  6EDA               	movwf	fsr2h,c
  1932  00211C  0E00               	movlw	0
  1933  00211E  6EDF               	movwf	indf2,c
  1934                           
  1935                           ;headers\password.h: 18: tamanio_password++;
  1936  002120  4A46               	infsnz	_tamanio_password,f,c
  1937  002122  2A47               	incf	_tamanio_password+1,f,c
  1938  002124  0012               	return	
  1939  002126                     l217:
  1940  002126  0012               	return		;funcret
  1941  002128                     __end_of_guardar_current_password:
  1942                           	opt stack 0
  1943                           tosu	equ	0xFFF
  1944                           tosh	equ	0xFFE
  1945                           tosl	equ	0xFFD
  1946                           pclath	equ	0xFFA
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postdec1	equ	0xFE5
  1954                           fsr1l	equ	0xFE1
  1955                           indf2	equ	0xFDF
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _guardar_comando *****************
  1961 ;; Defined at:
  1962 ;;		line 20 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  tecla           1    wreg     unsigned char 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  tecla           1   37[COMRAM] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2  152[None  ] int 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1980 ;;Total ram usage:        3 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    2
  1983 ;; This function calls:
  1984 ;;		_sprintf
  1985 ;; This function is called by:
  1986 ;;		_ingresar_comando
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text9
  1991  001DE6                     __ptext9:
  1992                           	opt stack 0
  1993  001DE6                     _guardar_comando:
  1994                           	opt stack 26
  1995                           
  1996                           ;incstack = 0
  1997                           ;guardar_comando@tecla stored from wreg
  1998  001DE6  6E26               	movwf	guardar_comando@tecla,c
  1999                           
  2000                           ;headers\teclado.h: 22: sprintf(buffer2,"%01u",tecla);
  2001  001DE8  0EA1               	movlw	low _buffer2
  2002  001DEA  6E0D               	movwf	sprintf@sp,c
  2003  001DEC  0E00               	movlw	high _buffer2
  2004  001DEE  6E0E               	movwf	sprintf@sp+1,c
  2005  001DF0  0E5F               	movlw	low STR_1
  2006  001DF2  6E0F               	movwf	sprintf@f,c
  2007  001DF4  0E0F               	movlw	high STR_1
  2008  001DF6  6E10               	movwf	sprintf@f+1,c
  2009  001DF8  C026  F011         	movff	guardar_comando@tecla,?_sprintf+4
  2010  001DFC  6A12               	clrf	?_sprintf+5,c
  2011  001DFE  ECBB  F007         	call	_sprintf	;wreg free
  2012                           
  2013                           ;headers\teclado.h: 23: if (tamanio_comando <3){
  2014  001E02  BE45               	btfsc	_tamanio_comando+1,7,c
  2015  001E04  D006               	goto	l2163
  2016  001E06  5045               	movf	_tamanio_comando+1,w,c
  2017  001E08  E11D               	bnz	l154
  2018  001E0A  0E03               	movlw	3
  2019  001E0C  5C44               	subwf	_tamanio_comando,w,c
  2020  001E0E  B0D8               	btfsc	status,0,c
  2021  001E10  0012               	return	
  2022  001E12                     l2163:
  2023                           
  2024                           ;headers\teclado.h: 24: comando[tamanio_comando] = *buffer2;
  2025  001E12  0E92               	movlw	low _comando
  2026  001E14  2444               	addwf	_tamanio_comando,w,c
  2027  001E16  6ED9               	movwf	fsr2l,c
  2028  001E18  0E00               	movlw	high _comando
  2029  001E1A  2045               	addwfc	_tamanio_comando+1,w,c
  2030  001E1C  6EDA               	movwf	fsr2h,c
  2031  001E1E  C0A1  FFDF         	movff	_buffer2,indf2
  2032                           
  2033                           ;headers\teclado.h: 25: comando [tamanio_comando+1] = '\0';
  2034  001E22  0E01               	movlw	1
  2035  001E24  2444               	addwf	_tamanio_comando,w,c
  2036  001E26  6E24               	movwf	??_guardar_comando& (0+255),c
  2037  001E28  0E00               	movlw	0
  2038  001E2A  2045               	addwfc	_tamanio_comando+1,w,c
  2039  001E2C  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  2040  001E2E  0E92               	movlw	low _comando
  2041  001E30  2424               	addwf	??_guardar_comando,w,c
  2042  001E32  6ED9               	movwf	fsr2l,c
  2043  001E34  0E00               	movlw	high _comando
  2044  001E36  2025               	addwfc	??_guardar_comando+1,w,c
  2045  001E38  6EDA               	movwf	fsr2h,c
  2046  001E3A  0E00               	movlw	0
  2047  001E3C  6EDF               	movwf	indf2,c
  2048                           
  2049                           ;headers\teclado.h: 26: tamanio_comando++;
  2050  001E3E  4A44               	infsnz	_tamanio_comando,f,c
  2051  001E40  2A45               	incf	_tamanio_comando+1,f,c
  2052  001E42  0012               	return	
  2053  001E44                     l154:
  2054  001E44  0012               	return		;funcret
  2055  001E46                     __end_of_guardar_comando:
  2056                           	opt stack 0
  2057                           tosu	equ	0xFFF
  2058                           tosh	equ	0xFFE
  2059                           tosl	equ	0xFFD
  2060                           pclath	equ	0xFFA
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           postinc0	equ	0xFEE
  2066                           wreg	equ	0xFE8
  2067                           postdec1	equ	0xFE5
  2068                           fsr1l	equ	0xFE1
  2069                           indf2	equ	0xFDF
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _ingresar_password *****************
  2075 ;; Defined at:
  2076 ;;		line 91 in file "main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  i               2   27[COMRAM] int 
  2081 ;;  i               2   29[COMRAM] int 
  2082 ;;  clear          16   11[COMRAM] unsigned char [16]
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  2  239[None  ] int 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2095 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2096 ;;Total ram usage:       21 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    5
  2099 ;; This function calls:
  2100 ;;		_lcd_comand
  2101 ;;		_lcd_gotoxy
  2102 ;;		_lcd_putrs
  2103 ;;		_validar_password
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text10
  2110  0017E2                     __ptext10:
  2111                           	opt stack 0
  2112  0017E2                     _ingresar_password:
  2113                           	opt stack 25
  2114                           
  2115                           ;main.c: 92: char clear[16];
  2116                           ;main.c: 93: for (int i=0;i<16;i++) clear[i]=' ';
  2117                           
  2118                           ;incstack = 0
  2119  0017E2  0E00               	movlw	0
  2120  0017E4  6E1F               	movwf	ingresar_password@i+1,c
  2121  0017E6  0E00               	movlw	0
  2122  0017E8  6E1E               	movwf	ingresar_password@i,c
  2123  0017EA                     l2705:
  2124  0017EA  BE1F               	btfsc	ingresar_password@i+1,7,c
  2125  0017EC  D008               	goto	l2709
  2126  0017EE  501F               	movf	ingresar_password@i+1,w,c
  2127  0017F0  E112               	bnz	l2715
  2128  0017F2  0E10               	movlw	16
  2129  0017F4  5C1E               	subwf	ingresar_password@i,w,c
  2130  0017F6  B0D8               	btfsc	status,0,c
  2131  0017F8  D00E               	goto	l2715
  2132  0017FA  D001               	goto	l2709
  2133  0017FC  D00C               	goto	l2715
  2134  0017FE                     l2709:
  2135  0017FE  0E0C               	movlw	low ingresar_password@clear
  2136  001800  241E               	addwf	ingresar_password@i,w,c
  2137  001802  6ED9               	movwf	fsr2l,c
  2138  001804  0E00               	movlw	high ingresar_password@clear
  2139  001806  201F               	addwfc	ingresar_password@i+1,w,c
  2140  001808  6EDA               	movwf	fsr2h,c
  2141  00180A  0E20               	movlw	32
  2142  00180C  6EDF               	movwf	indf2,c
  2143  00180E  4A1E               	infsnz	ingresar_password@i,f,c
  2144  001810  2A1F               	incf	ingresar_password@i+1,f,c
  2145  001812  D7EB               	goto	l2705
  2146  001814  D000               	goto	l2715
  2147  001816                     l2715:
  2148                           
  2149                           ;main.c: 95: if(tamanio_password < 6){
  2150  001816  BE47               	btfsc	_tamanio_password+1,7,c
  2151  001818  D006               	goto	l2717
  2152  00181A  5047               	movf	_tamanio_password+1,w,c
  2153  00181C  E118               	bnz	l2723
  2154  00181E  0E06               	movlw	6
  2155  001820  5C46               	subwf	_tamanio_password,w,c
  2156  001822  B0D8               	btfsc	status,0,c
  2157  001824  D014               	goto	l2723
  2158  001826                     l2717:
  2159                           
  2160                           ;main.c: 97: lcd_comand(0b00001100);
  2161  001826  0E0C               	movlw	12
  2162  001828  EC1C  F011         	call	_lcd_comand
  2163                           
  2164                           ;main.c: 98: lcd_gotoxy(1,1);
  2165  00182C  0E01               	movlw	1
  2166  00182E  6E05               	movwf	lcd_gotoxy@y,c
  2167  001830  0E01               	movlw	1
  2168  001832  ECD7  F010         	call	_lcd_gotoxy
  2169                           
  2170                           ;main.c: 99: lcd_putrs("Inserte password");
  2171  001836  0E0F               	movlw	low STR_12
  2172  001838  6E09               	movwf	lcd_putrs@ptr,c
  2173  00183A  0E0F               	movlw	high STR_12
  2174  00183C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2175  00183E  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2176                           
  2177                           ;main.c: 100: lcd_gotoxy(tamanio_password+1,2);
  2178  001842  0E02               	movlw	2
  2179  001844  6E05               	movwf	lcd_gotoxy@y,c
  2180  001846  2846               	incf	_tamanio_password,w,c
  2181  001848  ECD7  F010         	call	_lcd_gotoxy
  2182  00184C  D000               	goto	l2723
  2183  00184E                     l2723:
  2184                           
  2185                           ;main.c: 102: }
  2186                           ;main.c: 104: validar_password();
  2187  00184E  EC23  F00F         	call	_validar_password	;wreg free
  2188                           
  2189                           ;main.c: 105: if (tamanio_password >= 6 && !autorizado){
  2190  001852  BE47               	btfsc	_tamanio_password+1,7,c
  2191  001854  0012               	return	
  2192  001856  5047               	movf	_tamanio_password+1,w,c
  2193  001858  E104               	bnz	u2200
  2194  00185A  0E06               	movlw	6
  2195  00185C  5C46               	subwf	_tamanio_password,w,c
  2196  00185E  A0D8               	btfss	status,0,c
  2197  001860  0012               	return	
  2198  001862                     u2200:
  2199  001862  503E               	movf	_autorizado,w,c
  2200  001864  103F               	iorwf	_autorizado+1,w,c
  2201  001866  A4D8               	btfss	status,2,c
  2202  001868  0012               	return	
  2203                           
  2204                           ;main.c: 106: tamanio_password = 0;
  2205  00186A  0E00               	movlw	0
  2206  00186C  6E47               	movwf	_tamanio_password+1,c
  2207  00186E  0E00               	movlw	0
  2208  001870  6E46               	movwf	_tamanio_password,c
  2209                           
  2210                           ;main.c: 107: lcd_gotoxy(1,2);
  2211  001872  0E02               	movlw	2
  2212  001874  6E05               	movwf	lcd_gotoxy@y,c
  2213  001876  0E01               	movlw	1
  2214  001878  ECD7  F010         	call	_lcd_gotoxy
  2215                           
  2216                           ;main.c: 108: lcd_putrs("ERROR pass");
  2217  00187C  0E4B               	movlw	low STR_13
  2218  00187E  6E09               	movwf	lcd_putrs@ptr,c
  2219  001880  0E0F               	movlw	high STR_13
  2220  001882  6E0A               	movwf	lcd_putrs@ptr+1,c
  2221  001884  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2222                           
  2223                           ;main.c: 109: for (int i=0;i<9;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2224  001888  0E00               	movlw	0
  2225  00188A  6E1D               	movwf	ingresar_password@i_972+1,c
  2226  00188C  0E00               	movlw	0
  2227  00188E  6E1C               	movwf	ingresar_password@i_972,c
  2228  001890                     l2737:
  2229  001890  BE1D               	btfsc	ingresar_password@i_972+1,7,c
  2230  001892  D008               	goto	l2741
  2231  001894  501D               	movf	ingresar_password@i_972+1,w,c
  2232  001896  E112               	bnz	l2745
  2233  001898  0E09               	movlw	9
  2234  00189A  5C1C               	subwf	ingresar_password@i_972,w,c
  2235  00189C  B0D8               	btfsc	status,0,c
  2236  00189E  D00E               	goto	l2745
  2237  0018A0  D001               	goto	l2741
  2238  0018A2  D00C               	goto	l2745
  2239  0018A4                     l2741:
  2240  0018A4  0EFF               	movlw	255
  2241  0018A6  6E0B               	movwf	??_ingresar_password& (0+255),c
  2242  0018A8  0E8A               	movlw	138
  2243  0018AA                     u2307:
  2244  0018AA  2EE8               	decfsz	wreg,f,c
  2245  0018AC  D7FE               	goto	u2307
  2246  0018AE  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  2247  0018B0  D7FC               	goto	u2307
  2248  0018B2  D000               	nop2	
  2249  0018B4  4A1C               	infsnz	ingresar_password@i_972,f,c
  2250  0018B6  2A1D               	incf	ingresar_password@i_972+1,f,c
  2251  0018B8  D7EB               	goto	l2737
  2252  0018BA  D000               	goto	l2745
  2253  0018BC                     l2745:
  2254                           
  2255                           ;main.c: 110: lcd_gotoxy(1,2);
  2256  0018BC  0E02               	movlw	2
  2257  0018BE  6E05               	movwf	lcd_gotoxy@y,c
  2258  0018C0  0E01               	movlw	1
  2259  0018C2  ECD7  F010         	call	_lcd_gotoxy
  2260                           
  2261                           ;main.c: 111: lcd_putrs(clear);
  2262  0018C6  0E0C               	movlw	low ingresar_password@clear
  2263  0018C8  6E09               	movwf	lcd_putrs@ptr,c
  2264  0018CA  0E00               	movlw	high ingresar_password@clear
  2265  0018CC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2266  0018CE  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2267  0018D2  0012               	return	
  2268  0018D4  0012               	return		;funcret
  2269  0018D6                     __end_of_ingresar_password:
  2270                           	opt stack 0
  2271                           tosu	equ	0xFFF
  2272                           tosh	equ	0xFFE
  2273                           tosl	equ	0xFFD
  2274                           pclath	equ	0xFFA
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _validar_password *****************
  2289 ;; Defined at:
  2290 ;;		line 22 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  i               2    2[COMRAM] int 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  2  219[None  ] int 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2307 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2308 ;;Total ram usage:        4 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; This function calls:
  2311 ;;		Nothing
  2312 ;; This function is called by:
  2313 ;;		_ingresar_password
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text11
  2318  001E46                     __ptext11:
  2319                           	opt stack 0
  2320  001E46                     _validar_password:
  2321                           	opt stack 29
  2322                           
  2323                           ;headers\password.h: 24: autorizado = 1;
  2324                           
  2325                           ;incstack = 0
  2326  001E46  0E00               	movlw	0
  2327  001E48  6E3F               	movwf	_autorizado+1,c
  2328  001E4A  0E01               	movlw	1
  2329  001E4C  6E3E               	movwf	_autorizado,c
  2330                           
  2331                           ;headers\password.h: 25: int i = 0;
  2332  001E4E  0E00               	movlw	0
  2333  001E50  6E04               	movwf	validar_password@i+1,c
  2334  001E52  0E00               	movlw	0
  2335  001E54  6E03               	movwf	validar_password@i,c
  2336                           
  2337                           ;headers\password.h: 26: while (i < 6 && autorizado==1){
  2338  001E56  D018               	goto	l2507
  2339  001E58                     l2501:
  2340                           
  2341                           ;headers\password.h: 28: if (current_password[i] != password[i])
  2342  001E58  0EC2               	movlw	low _password
  2343  001E5A  2403               	addwf	validar_password@i,w,c
  2344  001E5C  6ED9               	movwf	fsr2l,c
  2345  001E5E  0E00               	movlw	high _password
  2346  001E60  2004               	addwfc	validar_password@i+1,w,c
  2347  001E62  6EDA               	movwf	fsr2h,c
  2348  001E64  0E88               	movlw	low _current_password
  2349  001E66  2403               	addwf	validar_password@i,w,c
  2350  001E68  6EE1               	movwf	fsr1l,c
  2351  001E6A  0E00               	movlw	high _current_password
  2352  001E6C  2004               	addwfc	validar_password@i+1,w,c
  2353  001E6E  6EE2               	movwf	fsr1h,c
  2354  001E70  50DE               	movf	postinc2,w,c
  2355  001E72  18E6               	xorwf	postinc1,w,c
  2356  001E74  B4D8               	btfsc	status,2,c
  2357  001E76  D005               	goto	l2505
  2358                           
  2359                           ;headers\password.h: 29: autorizado = 0;
  2360  001E78  0E00               	movlw	0
  2361  001E7A  6E3F               	movwf	_autorizado+1,c
  2362  001E7C  0E00               	movlw	0
  2363  001E7E  6E3E               	movwf	_autorizado,c
  2364  001E80  D000               	goto	l2505
  2365  001E82                     l2505:
  2366                           
  2367                           ;headers\password.h: 31: i++;
  2368  001E82  4A03               	infsnz	validar_password@i,f,c
  2369  001E84  2A04               	incf	validar_password@i+1,f,c
  2370  001E86  D000               	goto	l2507
  2371  001E88                     l2507:
  2372  001E88  BE04               	btfsc	validar_password@i+1,7,c
  2373  001E8A  D006               	goto	l2509
  2374  001E8C  5004               	movf	validar_password@i+1,w,c
  2375  001E8E  E10A               	bnz	l226
  2376  001E90  0E06               	movlw	6
  2377  001E92  5C03               	subwf	validar_password@i,w,c
  2378  001E94  B0D8               	btfsc	status,0,c
  2379  001E96  0012               	return	
  2380  001E98                     l2509:
  2381  001E98  043E               	decf	_autorizado,w,c
  2382  001E9A  103F               	iorwf	_autorizado+1,w,c
  2383  001E9C  A4D8               	btfss	status,2,c
  2384  001E9E  0012               	return	
  2385  001EA0  D7DB               	goto	l2501
  2386  001EA2  0012               	return	
  2387  001EA4                     l226:
  2388  001EA4  0012               	return		;funcret
  2389  001EA6                     __end_of_validar_password:
  2390                           	opt stack 0
  2391                           tosu	equ	0xFFF
  2392                           tosh	equ	0xFFE
  2393                           tosl	equ	0xFFD
  2394                           pclath	equ	0xFFA
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           postinc1	equ	0xFE6
  2402                           postdec1	equ	0xFE5
  2403                           fsr1h	equ	0xFE2
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _caratula *****************
  2412 ;; Defined at:
  2413 ;;		line 35 in file "main.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  2416 ;;		 -> STR_15(9), 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  i               2   53[COMRAM] int 
  2419 ;;  clear          16   37[COMRAM] unsigned char [16]
  2420 ;; Return value:  Size  Location     Type
  2421 ;;		None               void
  2422 ;; Registers used:
  2423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2430 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2432 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;Total ram usage:       20 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    5
  2436 ;; This function calls:
  2437 ;;		_lcd_comand
  2438 ;;		_lcd_gotoxy
  2439 ;;		_lcd_putrs
  2440 ;;		_sprintf
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text12
  2447  0018D6                     __ptext12:
  2448                           	opt stack 0
  2449  0018D6                     _caratula:
  2450                           	opt stack 25
  2451                           
  2452                           ;main.c: 38: char clear[16];
  2453                           ;main.c: 39: for (int i=0;i<16;i++) clear[i]=' ';
  2454                           
  2455                           ;incstack = 0
  2456  0018D6  0E00               	movlw	0
  2457  0018D8  6E37               	movwf	caratula@i+1,c
  2458  0018DA  0E00               	movlw	0
  2459  0018DC  6E36               	movwf	caratula@i,c
  2460  0018DE                     l2655:
  2461  0018DE  BE37               	btfsc	caratula@i+1,7,c
  2462  0018E0  D008               	goto	l2659
  2463  0018E2  5037               	movf	caratula@i+1,w,c
  2464  0018E4  E112               	bnz	l2665
  2465  0018E6  0E10               	movlw	16
  2466  0018E8  5C36               	subwf	caratula@i,w,c
  2467  0018EA  B0D8               	btfsc	status,0,c
  2468  0018EC  D00E               	goto	l2665
  2469  0018EE  D001               	goto	l2659
  2470  0018F0  D00C               	goto	l2665
  2471  0018F2                     l2659:
  2472  0018F2  0E26               	movlw	low caratula@clear
  2473  0018F4  2436               	addwf	caratula@i,w,c
  2474  0018F6  6ED9               	movwf	fsr2l,c
  2475  0018F8  0E00               	movlw	high caratula@clear
  2476  0018FA  2037               	addwfc	caratula@i+1,w,c
  2477  0018FC  6EDA               	movwf	fsr2h,c
  2478  0018FE  0E20               	movlw	32
  2479  001900  6EDF               	movwf	indf2,c
  2480  001902  4A36               	infsnz	caratula@i,f,c
  2481  001904  2A37               	incf	caratula@i+1,f,c
  2482  001906  D7EB               	goto	l2655
  2483  001908  D000               	goto	l2665
  2484  00190A                     l2665:
  2485                           
  2486                           ;main.c: 41: lcd_comand(0b00001100);
  2487  00190A  0E0C               	movlw	12
  2488  00190C  EC1C  F011         	call	_lcd_comand
  2489                           
  2490                           ;main.c: 42: lcd_gotoxy(1,1);
  2491  001910  0E01               	movlw	1
  2492  001912  6E05               	movwf	lcd_gotoxy@y,c
  2493  001914  0E01               	movlw	1
  2494  001916  ECD7  F010         	call	_lcd_gotoxy
  2495                           
  2496                           ;main.c: 43: lcd_putrs(titulo);
  2497  00191A  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  2498  00191E  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  2499  001922  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2500                           
  2501                           ;main.c: 45: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  2502  001926  0EA1               	movlw	low _buffer2
  2503  001928  6E0D               	movwf	sprintf@sp,c
  2504  00192A  0E00               	movlw	high _buffer2
  2505  00192C  6E0E               	movwf	sprintf@sp+1,c
  2506  00192E  0E31               	movlw	low STR_10
  2507  001930  6E0F               	movwf	sprintf@f,c
  2508  001932  0E0F               	movlw	high STR_10
  2509  001934  6E10               	movwf	sprintf@f+1,c
  2510  001936  C053  F011         	movff	_dia,?_sprintf+4
  2511  00193A  C054  F012         	movff	_dia+1,?_sprintf+5
  2512  00193E  C059  F013         	movff	_mes,?_sprintf+6
  2513  001942  C05A  F014         	movff	_mes+1,?_sprintf+7
  2514  001946  C051  F015         	movff	_anio,?_sprintf+8
  2515  00194A  C052  F016         	movff	_anio+1,?_sprintf+9
  2516  00194E  ECBB  F007         	call	_sprintf	;wreg free
  2517                           
  2518                           ;main.c: 46: lcd_gotoxy(9,1);
  2519  001952  0E01               	movlw	1
  2520  001954  6E05               	movwf	lcd_gotoxy@y,c
  2521  001956  0E09               	movlw	9
  2522  001958  ECD7  F010         	call	_lcd_gotoxy
  2523                           
  2524                           ;main.c: 47: lcd_putrs(buffer2);
  2525  00195C  0EA1               	movlw	low _buffer2
  2526  00195E  6E09               	movwf	lcd_putrs@ptr,c
  2527  001960  0E00               	movlw	high _buffer2
  2528  001962  6E0A               	movwf	lcd_putrs@ptr+1,c
  2529  001964  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2530                           
  2531                           ;main.c: 49: sprintf(buffer2,"  %02u:%02u:%02u",hora,minuto,segundo);
  2532  001968  0EA1               	movlw	low _buffer2
  2533  00196A  6E0D               	movwf	sprintf@sp,c
  2534  00196C  0E00               	movlw	high _buffer2
  2535  00196E  6E0E               	movwf	sprintf@sp+1,c
  2536  001970  0E20               	movlw	low STR_11
  2537  001972  6E0F               	movwf	sprintf@f,c
  2538  001974  0E0F               	movlw	high STR_11
  2539  001976  6E10               	movwf	sprintf@f+1,c
  2540  001978  C057  F011         	movff	_hora,?_sprintf+4
  2541  00197C  C058  F012         	movff	_hora+1,?_sprintf+5
  2542  001980  C05B  F013         	movff	_minuto,?_sprintf+6
  2543  001984  C05C  F014         	movff	_minuto+1,?_sprintf+7
  2544  001988  C042  F015         	movff	_segundo,?_sprintf+8
  2545  00198C  C043  F016         	movff	_segundo+1,?_sprintf+9
  2546  001990  ECBB  F007         	call	_sprintf	;wreg free
  2547                           
  2548                           ;main.c: 50: lcd_gotoxy(1,2);
  2549  001994  0E02               	movlw	2
  2550  001996  6E05               	movwf	lcd_gotoxy@y,c
  2551  001998  0E01               	movlw	1
  2552  00199A  ECD7  F010         	call	_lcd_gotoxy
  2553                           
  2554                           ;main.c: 51: lcd_putrs(buffer2);
  2555  00199E  0EA1               	movlw	low _buffer2
  2556  0019A0  6E09               	movwf	lcd_putrs@ptr,c
  2557  0019A2  0E00               	movlw	high _buffer2
  2558  0019A4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2559  0019A6  ECB0  F00F         	call	_lcd_putrs	;wreg free
  2560  0019AA  0012               	return		;funcret
  2561  0019AC                     __end_of_caratula:
  2562                           	opt stack 0
  2563                           tosu	equ	0xFFF
  2564                           tosh	equ	0xFFE
  2565                           tosl	equ	0xFFD
  2566                           pclath	equ	0xFFA
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           postinc1	equ	0xFE6
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _sprintf *****************
  2584 ;; Defined at:
  2585 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2588 ;;		 -> buffer2(20), 
  2589 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2590 ;;		 -> STR_14(5), STR_11(17), STR_10(15), STR_2(5), 
  2591 ;;		 -> STR_1(5), 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  tmpval          4    0        struct .
  2594 ;;  cp              3    0        PTR const unsigned char 
  2595 ;;  width           2   32[COMRAM] int 
  2596 ;;  val             2   29[COMRAM] unsigned int 
  2597 ;;  ap              2   26[COMRAM] PTR void [1]
  2598 ;;		 -> ?_sprintf(2), 
  2599 ;;  len             2    0        unsigned int 
  2600 ;;  c               1   34[COMRAM] char 
  2601 ;;  prec            1   31[COMRAM] char 
  2602 ;;  flag            1   28[COMRAM] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  2   12[COMRAM] int 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2612 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2613 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2615 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2616 ;;Total ram usage:       23 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    1
  2619 ;; This function calls:
  2620 ;;		___lwdiv
  2621 ;;		___lwmod
  2622 ;;		___wmul
  2623 ;;		_isdigit
  2624 ;; This function is called by:
  2625 ;;		_guardar_comando
  2626 ;;		_imprimir_tecla
  2627 ;;		_caratula
  2628 ;;		_mostrar_guardar_password
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text13
  2633  000F76                     __ptext13:
  2634                           	opt stack 0
  2635  000F76                     _sprintf:
  2636                           	opt stack 27
  2637                           
  2638                           ;doprnt.c: 494: va_list ap;
  2639                           ;doprnt.c: 499: signed char c;
  2640                           ;doprnt.c: 501: int width;
  2641                           ;doprnt.c: 506: signed char prec;
  2642                           ;doprnt.c: 508: unsigned char flag;
  2643                           ;doprnt.c: 523: union {
  2644                           ;doprnt.c: 524: unsigned long vd;
  2645                           ;doprnt.c: 525: double integ;
  2646                           ;doprnt.c: 526: } tmpval;
  2647                           ;doprnt.c: 528: unsigned int val;
  2648                           ;doprnt.c: 529: unsigned len;
  2649                           ;doprnt.c: 530: const char * cp;
  2650                           ;doprnt.c: 533: *ap = __va_start();
  2651                           
  2652                           ;incstack = 0
  2653  000F76  0E11               	movlw	low (?_sprintf+4)
  2654  000F78  6E1B               	movwf	sprintf@ap,c
  2655  000F7A  0E00               	movlw	high (?_sprintf+4)
  2656  000F7C  6E1C               	movwf	sprintf@ap+1,c
  2657                           
  2658                           ;doprnt.c: 536: while(c = *f++) {
  2659  000F7E  D117               	goto	l2137
  2660  000F80                     l2055:
  2661                           
  2662                           ;doprnt.c: 538: if(c != '%')
  2663  000F80  0E25               	movlw	37
  2664  000F82  1823               	xorwf	sprintf@c,w,c
  2665  000F84  B4D8               	btfsc	status,2,c
  2666  000F86  D009               	goto	l2061
  2667                           
  2668                           ;doprnt.c: 540: {
  2669                           ;doprnt.c: 541: ((*sp++ = (c)));
  2670  000F88  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2671  000F8C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2672  000F90  C023  FFDF         	movff	sprintf@c,indf2
  2673  000F94  4A0D               	infsnz	sprintf@sp,f,c
  2674  000F96  2A0E               	incf	sprintf@sp+1,f,c
  2675                           
  2676                           ;doprnt.c: 542: continue;
  2677  000F98  D10A               	goto	l2137
  2678  000F9A                     l2061:
  2679                           
  2680                           ;doprnt.c: 543: }
  2681                           ;doprnt.c: 546: width = 0;
  2682  000F9A  0E00               	movlw	0
  2683  000F9C  6E22               	movwf	sprintf@width+1,c
  2684  000F9E  0E00               	movlw	0
  2685  000FA0  6E21               	movwf	sprintf@width,c
  2686                           
  2687                           ;doprnt.c: 548: flag = 0;
  2688  000FA2  0E00               	movlw	0
  2689  000FA4  6E1D               	movwf	sprintf@flag,c
  2690                           
  2691                           ;doprnt.c: 551: switch(*f) {
  2692                           
  2693                           ;doprnt.c: 550: for(;;) {
  2694  000FA6  D005               	goto	l2067
  2695  000FA8                     l2063:
  2696                           
  2697                           ;doprnt.c: 580: flag |= 0x04;
  2698  000FA8  841D               	bsf	sprintf@flag,2,c
  2699                           
  2700                           ;doprnt.c: 581: f++;
  2701  000FAA  4A0F               	infsnz	sprintf@f,f,c
  2702  000FAC  2A10               	incf	sprintf@f+1,f,c
  2703                           
  2704                           ;doprnt.c: 582: continue;
  2705  000FAE  D001               	goto	l2067
  2706                           
  2707                           ;doprnt.c: 584: }
  2708  000FB0  D00B               	goto	l2069
  2709  000FB2                     l2067:
  2710  000FB2  C00F  FFF6         	movff	sprintf@f,tblptrl
  2711  000FB6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2712  000FBA                     	if	0	;tblptru may be non-zero
  2713  000FBA                     	endif
  2714  000FBA                     	if	0	;tblptru may be non-zero
  2715  000FBA                     	endif
  2716  000FBA  0008               	tblrd		*
  2717  000FBC  50F5               	movf	tablat,w,c
  2718                           
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 1, Range of values is 48 to 48
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte            4     3 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  000FBE  0A30               	xorlw	48	; case 48
  2726  000FC0  B4D8               	btfsc	status,2,c
  2727  000FC2  D7F2               	goto	l2063
  2728                           
  2729                           ;doprnt.c: 585: break;
  2730  000FC4  D001               	goto	l2069
  2731                           
  2732                           ;doprnt.c: 586: }
  2733  000FC6  D7F5               	goto	l2067
  2734  000FC8                     l2069:
  2735                           
  2736                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2737  000FC8  C00F  FFF6         	movff	sprintf@f,tblptrl
  2738  000FCC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2739  000FD0                     	if	0	;tblptru may be non-zero
  2740  000FD0                     	endif
  2741  000FD0                     	if	0	;tblptru may be non-zero
  2742  000FD0                     	endif
  2743  000FD0  0008               	tblrd		*
  2744  000FD2  50F5               	movf	tablat,w,c
  2745  000FD4  ECE9  F010         	call	_isdigit
  2746  000FD8  A0D8               	btfss	status,0,c
  2747  000FDA  D03A               	goto	l2085
  2748                           
  2749                           ;doprnt.c: 598: width = 0;
  2750  000FDC  0E00               	movlw	0
  2751  000FDE  6E22               	movwf	sprintf@width+1,c
  2752  000FE0  0E00               	movlw	0
  2753  000FE2  6E21               	movwf	sprintf@width,c
  2754  000FE4  D000               	goto	l2073
  2755  000FE6                     l2073:
  2756                           
  2757                           ;doprnt.c: 600: width *= 10;
  2758  000FE6  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2759  000FEA  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2760  000FEE  0E00               	movlw	0
  2761  000FF0  6E04               	movwf	___wmul@multiplicand+1,c
  2762  000FF2  0E0A               	movlw	10
  2763  000FF4  6E03               	movwf	___wmul@multiplicand,c
  2764  000FF6  ECC3  F010         	call	___wmul	;wreg free
  2765  000FFA  C001  F021         	movff	?___wmul,sprintf@width
  2766  000FFE  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2767                           
  2768                           ;doprnt.c: 601: width += *f++ - '0';
  2769  001002  0ED0               	movlw	208
  2770  001004  6E17               	movwf	??_sprintf& (0+255),c
  2771  001006  0EFF               	movlw	255
  2772  001008  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2773  00100A  C00F  FFF6         	movff	sprintf@f,tblptrl
  2774  00100E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2775  001012                     	if	0	;tblptru may be non-zero
  2776  001012                     	endif
  2777  001012                     	if	0	;tblptru may be non-zero
  2778  001012                     	endif
  2779  001012  0008               	tblrd		*
  2780  001014  50F5               	movf	tablat,w,c
  2781  001016  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2782  001018  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2783  00101A  5017               	movf	??_sprintf,w,c
  2784  00101C  2619               	addwf	??_sprintf+2,f,c
  2785  00101E  5018               	movf	??_sprintf+1,w,c
  2786  001020  221A               	addwfc	??_sprintf+3,f,c
  2787  001022  5019               	movf	??_sprintf+2,w,c
  2788  001024  2621               	addwf	sprintf@width,f,c
  2789  001026  501A               	movf	??_sprintf+3,w,c
  2790  001028  2222               	addwfc	sprintf@width+1,f,c
  2791  00102A  4A0F               	infsnz	sprintf@f,f,c
  2792  00102C  2A10               	incf	sprintf@f+1,f,c
  2793                           
  2794                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2795  00102E  C00F  FFF6         	movff	sprintf@f,tblptrl
  2796  001032  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2797  001036                     	if	0	;tblptru may be non-zero
  2798  001036                     	endif
  2799  001036                     	if	0	;tblptru may be non-zero
  2800  001036                     	endif
  2801  001036  0008               	tblrd		*
  2802  001038  50F5               	movf	tablat,w,c
  2803  00103A  ECE9  F010         	call	_isdigit
  2804  00103E  A0D8               	btfss	status,0,c
  2805  001040  D007               	goto	l2085
  2806  001042  D7D1               	goto	l2073
  2807                           
  2808                           ;doprnt.c: 608: }
  2809                           ;doprnt.c: 635: switch(c = *f++) {
  2810  001044  D005               	goto	l2085
  2811                           
  2812                           ;doprnt.c: 638: goto alldone;
  2813                           
  2814                           ;doprnt.c: 637: case 0:
  2815  001046  D0C1               	goto	l2139
  2816                           
  2817                           ;doprnt.c: 813: continue;
  2818                           
  2819                           ;doprnt.c: 802: default:
  2820  001048  D0B2               	goto	l2137
  2821  00104A                     l2081:
  2822                           
  2823                           ;doprnt.c: 818: flag |= 0xC0;
  2824  00104A  0EC0               	movlw	192
  2825  00104C  121D               	iorwf	sprintf@flag,f,c
  2826                           
  2827                           ;doprnt.c: 822: }
  2828                           
  2829                           ;doprnt.c: 819: break;
  2830  00104E  D011               	goto	l2087
  2831  001050                     l2085:
  2832  001050  C00F  FFF6         	movff	sprintf@f,tblptrl
  2833  001054  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2834  001058  4A0F               	infsnz	sprintf@f,f,c
  2835  00105A  2A10               	incf	sprintf@f+1,f,c
  2836  00105C                     	if	0	;tblptru may be non-zero
  2837  00105C                     	endif
  2838  00105C                     	if	0	;tblptru may be non-zero
  2839  00105C                     	endif
  2840  00105C  0008               	tblrd		*
  2841  00105E  CFF5 F023          	movff	tablat,sprintf@c
  2842  001062  5023               	movf	sprintf@c,w,c
  2843                           
  2844                           ; Switch size 1, requested type "space"
  2845                           ; Number of cases is 2, Range of values is 0 to 117
  2846                           ; switch strategies available:
  2847                           ; Name         Instructions Cycles
  2848                           ; simple_byte            7     4 (average)
  2849                           ;	Chosen strategy is simple_byte
  2850  001064  0A00               	xorlw	0	; case 0
  2851  001066  B4D8               	btfsc	status,2,c
  2852  001068  D0B0               	goto	l2139
  2853  00106A  0A75               	xorlw	117	; case 117
  2854  00106C  B4D8               	btfsc	status,2,c
  2855  00106E  D7ED               	goto	l2081
  2856  001070  D09E               	goto	l2137
  2857  001072                     l2087:
  2858                           
  2859                           ;doprnt.c: 1273: {
  2860                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2861  001072  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2862  001076  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2863  00107A  CFDE F01E          	movff	postinc2,sprintf@val
  2864  00107E  CFDD F01F          	movff	postdec2,sprintf@val+1
  2865  001082  0E02               	movlw	2
  2866  001084  261B               	addwf	sprintf@ap,f,c
  2867  001086  0E00               	movlw	0
  2868  001088  221C               	addwfc	sprintf@ap+1,f,c
  2869                           
  2870                           ;doprnt.c: 1287: }
  2871                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2872  00108A  0E01               	movlw	1
  2873  00108C  6E23               	movwf	sprintf@c,c
  2874  00108E                     l2093:
  2875  00108E  0E05               	movlw	5
  2876  001090  1823               	xorwf	sprintf@c,w,c
  2877  001092  B4D8               	btfsc	status,2,c
  2878  001094  D016               	goto	l2105
  2879  001096  D001               	goto	l2097
  2880  001098  D014               	goto	l2105
  2881  00109A                     l2097:
  2882                           
  2883                           ;doprnt.c: 1306: if(val < dpowers[c])
  2884  00109A  5023               	movf	sprintf@c,w,c
  2885  00109C  0D02               	mullw	2
  2886  00109E  0E01               	movlw	low _dpowers
  2887  0010A0  24F3               	addwf	prodl,w,c
  2888  0010A2  6EF6               	movwf	tblptrl,c
  2889  0010A4  0E0F               	movlw	high _dpowers
  2890  0010A6  20F4               	addwfc	prodh,w,c
  2891  0010A8  6EF7               	movwf	tblptrh,c
  2892  0010AA                     	if	0	;There are less than 3 active tblptr bytes
  2893  0010AA                     	endif
  2894  0010AA  0009               	tblrd		*+
  2895  0010AC  50F5               	movf	tablat,w,c
  2896  0010AE  5C1E               	subwf	sprintf@val,w,c
  2897  0010B0  0009               	tblrd		*+
  2898  0010B2  50F5               	movf	tablat,w,c
  2899  0010B4  581F               	subwfb	sprintf@val+1,w,c
  2900  0010B6  A0D8               	btfss	status,0,c
  2901  0010B8  D004               	goto	l2105
  2902  0010BA  D001               	goto	l2101
  2903                           
  2904                           ;doprnt.c: 1307: break;
  2905  0010BC  D002               	goto	l2105
  2906  0010BE                     l2101:
  2907  0010BE  2A23               	incf	sprintf@c,f,c
  2908  0010C0  D7E6               	goto	l2093
  2909  0010C2                     l2105:
  2910                           
  2911                           ;doprnt.c: 1381: if(width > c)
  2912  0010C2  0E80               	movlw	128
  2913  0010C4  BE23               	btfsc	sprintf@c,7,c
  2914  0010C6  0E7F               	movlw	127
  2915  0010C8  6E17               	movwf	??_sprintf& (0+255),c
  2916  0010CA  5021               	movf	sprintf@width,w,c
  2917  0010CC  5C23               	subwf	sprintf@c,w,c
  2918  0010CE  5022               	movf	sprintf@width+1,w,c
  2919  0010D0  0A80               	xorlw	128
  2920  0010D2  5817               	subwfb	??_sprintf& (0+255),w,c
  2921  0010D4  B0D8               	btfsc	status,0,c
  2922  0010D6  D007               	goto	l2109
  2923                           
  2924                           ;doprnt.c: 1382: width -= c;
  2925  0010D8  5023               	movf	sprintf@c,w,c
  2926  0010DA  5E21               	subwf	sprintf@width,f,c
  2927  0010DC  0E00               	movlw	0
  2928  0010DE  BE23               	btfsc	sprintf@c,7,c
  2929  0010E0  0EFF               	movlw	255
  2930  0010E2  5A22               	subwfb	sprintf@width+1,f,c
  2931  0010E4  D005               	goto	l2111
  2932  0010E6                     l2109:
  2933                           
  2934                           ;doprnt.c: 1383: else
  2935                           ;doprnt.c: 1384: width = 0;
  2936  0010E6  0E00               	movlw	0
  2937  0010E8  6E22               	movwf	sprintf@width+1,c
  2938  0010EA  0E00               	movlw	0
  2939  0010EC  6E21               	movwf	sprintf@width,c
  2940  0010EE  D000               	goto	l2111
  2941  0010F0                     l2111:
  2942                           
  2943                           ;doprnt.c: 1387: if(flag & 0x04) {
  2944  0010F0  A41D               	btfss	sprintf@flag,2,c
  2945  0010F2  D015               	goto	l2121
  2946                           
  2947                           ;doprnt.c: 1415: if(width)
  2948  0010F4  5021               	movf	sprintf@width,w,c
  2949  0010F6  1022               	iorwf	sprintf@width+1,w,c
  2950  0010F8  B4D8               	btfsc	status,2,c
  2951  0010FA  D026               	goto	l358
  2952  0010FC                     l2115:
  2953                           
  2954                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2955  0010FC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2956  001100  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2957  001104  0E30               	movlw	48
  2958  001106  6EDF               	movwf	indf2,c
  2959  001108  4A0D               	infsnz	sprintf@sp,f,c
  2960  00110A  2A0E               	incf	sprintf@sp+1,f,c
  2961                           
  2962                           ;doprnt.c: 1418: while(--width);
  2963  00110C  0621               	decf	sprintf@width,f,c
  2964  00110E  A0D8               	btfss	status,0,c
  2965  001110  0622               	decf	sprintf@width+1,f,c
  2966  001112  5021               	movf	sprintf@width,w,c
  2967  001114  1022               	iorwf	sprintf@width+1,w,c
  2968  001116  B4D8               	btfsc	status,2,c
  2969  001118  D017               	goto	l358
  2970  00111A  D7F0               	goto	l2115
  2971                           
  2972                           ;doprnt.c: 1420: } else
  2973  00111C  D015               	goto	l358
  2974  00111E                     l2121:
  2975                           
  2976                           ;doprnt.c: 1422: {
  2977                           ;doprnt.c: 1424: if(width
  2978                           ;doprnt.c: 1428: )
  2979  00111E  5021               	movf	sprintf@width,w,c
  2980  001120  1022               	iorwf	sprintf@width+1,w,c
  2981  001122  B4D8               	btfsc	status,2,c
  2982  001124  D011               	goto	l358
  2983  001126                     l2123:
  2984                           
  2985                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2986  001126  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2987  00112A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2988  00112E  0E20               	movlw	32
  2989  001130  6EDF               	movwf	indf2,c
  2990  001132  4A0D               	infsnz	sprintf@sp,f,c
  2991  001134  2A0E               	incf	sprintf@sp+1,f,c
  2992                           
  2993                           ;doprnt.c: 1431: while(--width);
  2994  001136  0621               	decf	sprintf@width,f,c
  2995  001138  A0D8               	btfss	status,0,c
  2996  00113A  0622               	decf	sprintf@width+1,f,c
  2997  00113C  5021               	movf	sprintf@width,w,c
  2998  00113E  1022               	iorwf	sprintf@width+1,w,c
  2999  001140  B4D8               	btfsc	status,2,c
  3000  001142  D002               	goto	l358
  3001  001144  D7F0               	goto	l2123
  3002  001146  D000               	goto	l358
  3003  001148                     l358:
  3004                           
  3005                           ;doprnt.c: 1469: }
  3006                           ;doprnt.c: 1472: prec = c;
  3007  001148  C023  F020         	movff	sprintf@c,sprintf@prec
  3008                           
  3009                           ;doprnt.c: 1474: while(prec--) {
  3010  00114C  D02A               	goto	l2135
  3011  00114E                     l2129:
  3012                           
  3013                           ;doprnt.c: 1478: {
  3014                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3015  00114E  5020               	movf	sprintf@prec,w,c
  3016  001150  0D02               	mullw	2
  3017  001152  0E01               	movlw	low _dpowers
  3018  001154  24F3               	addwf	prodl,w,c
  3019  001156  6EF6               	movwf	tblptrl,c
  3020  001158  0E0F               	movlw	high _dpowers
  3021  00115A  20F4               	addwfc	prodh,w,c
  3022  00115C  6EF7               	movwf	tblptrh,c
  3023  00115E                     	if	0	;There are less than 3 active tblptr bytes
  3024  00115E                     	endif
  3025  00115E  0009               	tblrd		*+
  3026  001160  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3027  001164  000A               	tblrd		*-
  3028  001166  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3029  00116A  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  3030  00116E  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3031  001172  EC82  F00F         	call	___lwdiv	;wreg free
  3032  001176  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3033  00117A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3034  00117E  0E00               	movlw	0
  3035  001180  6E0B               	movwf	___lwmod@divisor+1,c
  3036  001182  0E0A               	movlw	10
  3037  001184  6E0A               	movwf	___lwmod@divisor,c
  3038  001186  EC01  F010         	call	___lwmod	;wreg free
  3039  00118A  5008               	movf	?___lwmod,w,c
  3040  00118C  0F30               	addlw	48
  3041  00118E  6E23               	movwf	sprintf@c,c
  3042                           
  3043                           ;doprnt.c: 1523: }
  3044                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3045  001190  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3046  001194  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3047  001198  C023  FFDF         	movff	sprintf@c,indf2
  3048  00119C  4A0D               	infsnz	sprintf@sp,f,c
  3049  00119E  2A0E               	incf	sprintf@sp+1,f,c
  3050  0011A0  D000               	goto	l2135
  3051  0011A2                     l2135:
  3052  0011A2  0620               	decf	sprintf@prec,f,c
  3053  0011A4  2820               	incf	sprintf@prec,w,c
  3054  0011A6  B4D8               	btfsc	status,2,c
  3055  0011A8  D002               	goto	l2137
  3056  0011AA  D7D1               	goto	l2129
  3057  0011AC  D000               	goto	l2137
  3058  0011AE                     l2137:
  3059  0011AE  C00F  FFF6         	movff	sprintf@f,tblptrl
  3060  0011B2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3061  0011B6  4A0F               	infsnz	sprintf@f,f,c
  3062  0011B8  2A10               	incf	sprintf@f+1,f,c
  3063  0011BA                     	if	0	;tblptru may be non-zero
  3064  0011BA                     	endif
  3065  0011BA                     	if	0	;tblptru may be non-zero
  3066  0011BA                     	endif
  3067  0011BA  0008               	tblrd		*
  3068  0011BC  CFF5 F023          	movff	tablat,sprintf@c
  3069  0011C0  5023               	movf	sprintf@c,w,c
  3070  0011C2  B4D8               	btfsc	status,2,c
  3071  0011C4  D002               	goto	l2139
  3072  0011C6  D6DC               	goto	l2055
  3073  0011C8  D000               	goto	l2139
  3074  0011CA                     l2139:
  3075                           
  3076                           ;doprnt.c: 1538: *sp = 0;
  3077  0011CA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3078  0011CE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3079  0011D2  0E00               	movlw	0
  3080  0011D4  6EDF               	movwf	indf2,c
  3081  0011D6  0012               	return	
  3082                           
  3083                           ;doprnt.c: 1540: return 0;
  3084                           ;	Return value of _sprintf is never used
  3085  0011D8  0012               	return		;funcret
  3086  0011DA                     __end_of_sprintf:
  3087                           	opt stack 0
  3088                           tosu	equ	0xFFF
  3089                           tosh	equ	0xFFE
  3090                           tosl	equ	0xFFD
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           postinc0	equ	0xFEE
  3099                           wreg	equ	0xFE8
  3100                           postinc1	equ	0xFE6
  3101                           postdec1	equ	0xFE5
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _isdigit *****************
  3112 ;; Defined at:
  3113 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  c               1    wreg     unsigned char 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  c               1    2[COMRAM] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3131 ;;Total ram usage:        3 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_sprintf
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text14
  3141  0021D2                     __ptext14:
  3142                           	opt stack 0
  3143  0021D2                     _isdigit:
  3144                           	opt stack 27
  3145                           
  3146                           ;incstack = 0
  3147                           ;isdigit@c stored from wreg
  3148  0021D2  6E03               	movwf	isdigit@c,c
  3149  0021D4  0E00               	movlw	0
  3150  0021D6  6E02               	movwf	_isdigit$2103,c
  3151  0021D8  0E3A               	movlw	58
  3152  0021DA  6003               	cpfslt	isdigit@c,c
  3153  0021DC  D006               	goto	l2005
  3154  0021DE  0E2F               	movlw	47
  3155  0021E0  6403               	cpfsgt	isdigit@c,c
  3156  0021E2  D003               	goto	l2005
  3157  0021E4  0E01               	movlw	1
  3158  0021E6  6E02               	movwf	_isdigit$2103,c
  3159  0021E8  D000               	goto	l2005
  3160  0021EA                     l2005:
  3161  0021EA  C002  F001         	movff	_isdigit$2103,??_isdigit
  3162  0021EE  3001               	rrcf	??_isdigit,w,c
  3163  0021F0  0012               	return	
  3164  0021F2  0012               	return		;funcret
  3165  0021F4                     __end_of_isdigit:
  3166                           	opt stack 0
  3167                           tosu	equ	0xFFF
  3168                           tosh	equ	0xFFE
  3169                           tosl	equ	0xFFD
  3170                           pclath	equ	0xFFA
  3171                           tblptru	equ	0xFF8
  3172                           tblptrh	equ	0xFF7
  3173                           tblptrl	equ	0xFF6
  3174                           tablat	equ	0xFF5
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           postinc1	equ	0xFE6
  3180                           postdec1	equ	0xFE5
  3181                           fsr1h	equ	0xFE2
  3182                           fsr1l	equ	0xFE1
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function ___wmul *****************
  3191 ;; Defined at:
  3192 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  multiplier      2    0[COMRAM] unsigned int 
  3195 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  product         2    4[COMRAM] unsigned int 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  2    0[COMRAM] unsigned int 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, prodl, prodh
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;Total ram usage:        6 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_sprintf
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text15
  3221  002186                     __ptext15:
  3222                           	opt stack 0
  3223  002186                     ___wmul:
  3224                           	opt stack 27
  3225                           
  3226                           ;incstack = 0
  3227  002186  5001               	movf	___wmul@multiplier,w,c
  3228  002188  0203               	mulwf	___wmul@multiplicand,c
  3229  00218A  CFF3 F005          	movff	prodl,___wmul@product
  3230  00218E  CFF4 F006          	movff	prodh,___wmul@product+1
  3231  002192  5001               	movf	___wmul@multiplier,w,c
  3232  002194  0204               	mulwf	___wmul@multiplicand+1,c
  3233  002196  50F3               	movf	prodl,w,c
  3234  002198  2606               	addwf	___wmul@product+1,f,c
  3235  00219A  5002               	movf	___wmul@multiplier+1,w,c
  3236  00219C  0203               	mulwf	___wmul@multiplicand,c
  3237  00219E  50F3               	movf	prodl,w,c
  3238  0021A0  2606               	addwf	___wmul@product+1,f,c
  3239  0021A2  C005  F001         	movff	___wmul@product,?___wmul
  3240  0021A6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3241  0021AA  0012               	return	
  3242  0021AC  0012               	return		;funcret
  3243  0021AE                     __end_of___wmul:
  3244                           	opt stack 0
  3245                           tosu	equ	0xFFF
  3246                           tosh	equ	0xFFE
  3247                           tosl	equ	0xFFD
  3248                           pclath	equ	0xFFA
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodh	equ	0xFF4
  3254                           prodl	equ	0xFF3
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           postinc1	equ	0xFE6
  3258                           postdec1	equ	0xFE5
  3259                           fsr1h	equ	0xFE2
  3260                           fsr1l	equ	0xFE1
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function ___lwmod *****************
  3269 ;; Defined at:
  3270 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  dividend        2    7[COMRAM] unsigned int 
  3273 ;;  divisor         2    9[COMRAM] unsigned int 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  counter         1   11[COMRAM] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  2    7[COMRAM] unsigned int 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3288 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3289 ;;Total ram usage:        5 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_sprintf
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text16
  3299  002002                     __ptext16:
  3300                           	opt stack 0
  3301  002002                     ___lwmod:
  3302                           	opt stack 27
  3303                           
  3304                           ;incstack = 0
  3305  002002  500A               	movf	___lwmod@divisor,w,c
  3306  002004  100B               	iorwf	___lwmod@divisor+1,w,c
  3307  002006  B4D8               	btfsc	status,2,c
  3308  002008  D01D               	goto	l1012
  3309  00200A  0E01               	movlw	1
  3310  00200C  6E0C               	movwf	___lwmod@counter,c
  3311  00200E  D005               	goto	l2043
  3312  002010                     l2041:
  3313  002010  90D8               	bcf	status,0,c
  3314  002012  360A               	rlcf	___lwmod@divisor,f,c
  3315  002014  360B               	rlcf	___lwmod@divisor+1,f,c
  3316  002016  2A0C               	incf	___lwmod@counter,f,c
  3317  002018  D000               	goto	l2043
  3318  00201A                     l2043:
  3319  00201A  BE0B               	btfsc	___lwmod@divisor+1,7,c
  3320  00201C  D002               	goto	l2045
  3321  00201E  D7F8               	goto	l2041
  3322  002020  D000               	goto	l2045
  3323  002022                     l2045:
  3324  002022  500A               	movf	___lwmod@divisor,w,c
  3325  002024  5C08               	subwf	___lwmod@dividend,w,c
  3326  002026  500B               	movf	___lwmod@divisor+1,w,c
  3327  002028  5809               	subwfb	___lwmod@dividend+1,w,c
  3328  00202A  A0D8               	btfss	status,0,c
  3329  00202C  D005               	goto	l2049
  3330  00202E  500A               	movf	___lwmod@divisor,w,c
  3331  002030  5E08               	subwf	___lwmod@dividend,f,c
  3332  002032  500B               	movf	___lwmod@divisor+1,w,c
  3333  002034  5A09               	subwfb	___lwmod@dividend+1,f,c
  3334  002036  D000               	goto	l2049
  3335  002038                     l2049:
  3336  002038  90D8               	bcf	status,0,c
  3337  00203A  320B               	rrcf	___lwmod@divisor+1,f,c
  3338  00203C  320A               	rrcf	___lwmod@divisor,f,c
  3339  00203E  2E0C               	decfsz	___lwmod@counter,f,c
  3340  002040  D7F0               	goto	l2045
  3341  002042  D000               	goto	l1012
  3342  002044                     l1012:
  3343  002044  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3344  002048  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3345  00204C  0012               	return		;funcret
  3346  00204E                     __end_of___lwmod:
  3347                           	opt stack 0
  3348                           tosu	equ	0xFFF
  3349                           tosh	equ	0xFFE
  3350                           tosl	equ	0xFFD
  3351                           pclath	equ	0xFFA
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postinc1	equ	0xFE6
  3361                           postdec1	equ	0xFE5
  3362                           fsr1h	equ	0xFE2
  3363                           fsr1l	equ	0xFE1
  3364                           indf2	equ	0xFDF
  3365                           postinc2	equ	0xFDE
  3366                           postdec2	equ	0xFDD
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function ___lwdiv *****************
  3372 ;; Defined at:
  3373 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  dividend        2    0[COMRAM] unsigned int 
  3376 ;;  divisor         2    2[COMRAM] unsigned int 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  quotient        2    4[COMRAM] unsigned int 
  3379 ;;  counter         1    6[COMRAM] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  2    0[COMRAM] unsigned int 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3390 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;Total ram usage:        7 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_sprintf
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text17
  3403  001F04                     __ptext17:
  3404                           	opt stack 0
  3405  001F04                     ___lwdiv:
  3406                           	opt stack 27
  3407                           
  3408                           ;incstack = 0
  3409  001F04  0E00               	movlw	0
  3410  001F06  6E06               	movwf	___lwdiv@quotient+1,c
  3411  001F08  0E00               	movlw	0
  3412  001F0A  6E05               	movwf	___lwdiv@quotient,c
  3413  001F0C  5003               	movf	___lwdiv@divisor,w,c
  3414  001F0E  1004               	iorwf	___lwdiv@divisor+1,w,c
  3415  001F10  B4D8               	btfsc	status,2,c
  3416  001F12  D021               	goto	l1002
  3417  001F14  0E01               	movlw	1
  3418  001F16  6E07               	movwf	___lwdiv@counter,c
  3419  001F18  D005               	goto	l2023
  3420  001F1A                     l2021:
  3421  001F1A  90D8               	bcf	status,0,c
  3422  001F1C  3603               	rlcf	___lwdiv@divisor,f,c
  3423  001F1E  3604               	rlcf	___lwdiv@divisor+1,f,c
  3424  001F20  2A07               	incf	___lwdiv@counter,f,c
  3425  001F22  D000               	goto	l2023
  3426  001F24                     l2023:
  3427  001F24  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3428  001F26  D002               	goto	l2025
  3429  001F28  D7F8               	goto	l2021
  3430  001F2A  D000               	goto	l2025
  3431  001F2C                     l2025:
  3432  001F2C  90D8               	bcf	status,0,c
  3433  001F2E  3605               	rlcf	___lwdiv@quotient,f,c
  3434  001F30  3606               	rlcf	___lwdiv@quotient+1,f,c
  3435  001F32  5003               	movf	___lwdiv@divisor,w,c
  3436  001F34  5C01               	subwf	___lwdiv@dividend,w,c
  3437  001F36  5004               	movf	___lwdiv@divisor+1,w,c
  3438  001F38  5802               	subwfb	___lwdiv@dividend+1,w,c
  3439  001F3A  A0D8               	btfss	status,0,c
  3440  001F3C  D006               	goto	l2033
  3441  001F3E  5003               	movf	___lwdiv@divisor,w,c
  3442  001F40  5E01               	subwf	___lwdiv@dividend,f,c
  3443  001F42  5004               	movf	___lwdiv@divisor+1,w,c
  3444  001F44  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3445  001F46  8005               	bsf	___lwdiv@quotient,0,c
  3446  001F48  D000               	goto	l2033
  3447  001F4A                     l2033:
  3448  001F4A  90D8               	bcf	status,0,c
  3449  001F4C  3204               	rrcf	___lwdiv@divisor+1,f,c
  3450  001F4E  3203               	rrcf	___lwdiv@divisor,f,c
  3451  001F50  2E07               	decfsz	___lwdiv@counter,f,c
  3452  001F52  D7EC               	goto	l2025
  3453  001F54  D000               	goto	l1002
  3454  001F56                     l1002:
  3455  001F56  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3456  001F5A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3457  001F5E  0012               	return		;funcret
  3458  001F60                     __end_of___lwdiv:
  3459                           	opt stack 0
  3460                           tosu	equ	0xFFF
  3461                           tosh	equ	0xFFE
  3462                           tosl	equ	0xFFD
  3463                           pclath	equ	0xFFA
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postinc1	equ	0xFE6
  3473                           postdec1	equ	0xFE5
  3474                           fsr1h	equ	0xFE2
  3475                           fsr1l	equ	0xFE1
  3476                           indf2	equ	0xFDF
  3477                           postinc2	equ	0xFDE
  3478                           postdec2	equ	0xFDD
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _lcd_putrs *****************
  3484 ;; Defined at:
  3485 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3488 ;;		 -> STR_17(11), STR_15(9), STR_13(11), STR_12(17), 
  3489 ;;		 -> ingresar_password@clear(16), STR_9(2), STR_8(2), STR_7(2), 
  3490 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3491 ;;		 -> buffer2(20), 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;		None               void
  3496 ;; Registers used:
  3497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3507 ;;Total ram usage:        2 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    4
  3510 ;; This function calls:
  3511 ;;		_lcd_putc
  3512 ;; This function is called by:
  3513 ;;		_imprimir_tecla
  3514 ;;		_guardar_tecla_presionada
  3515 ;;		_leer_teclado
  3516 ;;		_caratula
  3517 ;;		_ingresar_password
  3518 ;;		_main
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text18
  3523  001F60                     __ptext18:
  3524                           	opt stack 0
  3525  001F60                     _lcd_putrs:
  3526                           	opt stack 23
  3527                           
  3528                           ;unmc_lcd_216.c: 223: while(*ptr){
  3529                           
  3530                           ;incstack = 0
  3531  001F60  D015               	goto	l2149
  3532  001F62                     l2145:
  3533                           
  3534                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3535  001F62  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3536  001F66  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3537  001F6A  6AF8               	clrf	tblptru,c
  3538  001F6C  0E0E               	movlw	(high __ramtop+-1)
  3539  001F6E  64F7               	cpfsgt	tblptrh,c
  3540  001F70  D003               	bra	u1477
  3541  001F72  0008               	tblrd		*
  3542  001F74  50F5               	movf	tablat,w,c
  3543  001F76  D005               	bra	u1470
  3544  001F78                     u1477:
  3545  001F78  CFF6 FFE9          	movff	tblptrl,fsr0l
  3546  001F7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3547  001F80  50EF               	movf	indf0,w,c
  3548  001F82                     u1470:
  3549  001F82  EC27  F010         	call	_lcd_putc
  3550  001F86  4A09               	infsnz	lcd_putrs@ptr,f,c
  3551  001F88  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3552  001F8A  D000               	goto	l2149
  3553  001F8C                     l2149:
  3554  001F8C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3555  001F90  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3556  001F94  6AF8               	clrf	tblptru,c
  3557  001F96  0E0E               	movlw	(high __ramtop+-1)
  3558  001F98  64F7               	cpfsgt	tblptrh,c
  3559  001F9A  D003               	bra	u1487
  3560  001F9C  0008               	tblrd		*
  3561  001F9E  50F5               	movf	tablat,w,c
  3562  001FA0  D005               	bra	u1480
  3563  001FA2                     u1487:
  3564  001FA2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3565  001FA6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3566  001FAA  50EF               	movf	indf0,w,c
  3567  001FAC                     u1480:
  3568  001FAC  0900               	iorlw	0
  3569  001FAE  A4D8               	btfss	status,2,c
  3570  001FB0  D7D8               	goto	l2145
  3571  001FB2  0012               	return		;funcret
  3572  001FB4                     __end_of_lcd_putrs:
  3573                           	opt stack 0
  3574                           tosu	equ	0xFFF
  3575                           tosh	equ	0xFFE
  3576                           tosl	equ	0xFFD
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           indf0	equ	0xFEF
  3585                           postinc0	equ	0xFEE
  3586                           fsr0h	equ	0xFEA
  3587                           fsr0l	equ	0xFE9
  3588                           wreg	equ	0xFE8
  3589                           postinc1	equ	0xFE6
  3590                           postdec1	equ	0xFE5
  3591                           fsr1h	equ	0xFE2
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _lcd_putc *****************
  3601 ;; Defined at:
  3602 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  c               1    wreg     unsigned char 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  c               1    7[COMRAM] unsigned char 
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3620 ;;Total ram usage:        1 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    3
  3623 ;; This function calls:
  3624 ;;		_lcd_gotoxy
  3625 ;;		_lcd_send_byte
  3626 ;; This function is called by:
  3627 ;;		_lcd_putrs
  3628 ;;		_lcd_puts
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text19
  3633  00204E                     __ptext19:
  3634                           	opt stack 0
  3635  00204E                     _lcd_putc:
  3636                           	opt stack 23
  3637                           
  3638                           ;incstack = 0
  3639                           ;lcd_putc@c stored from wreg
  3640  00204E  6E08               	movwf	lcd_putc@c,c
  3641                           
  3642                           ;unmc_lcd_216.c: 173: switch(c){
  3643  002050  D018               	goto	l1995
  3644  002052                     l1985:
  3645                           
  3646                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3647  002052  0E01               	movlw	1
  3648  002054  6E03               	movwf	lcd_send_byte@n,c
  3649  002056  0E00               	movlw	0
  3650  002058  EC94  F010         	call	_lcd_send_byte
  3651                           
  3652                           ;unmc_lcd_216.c: 176: break;
  3653  00205C  0012               	return	
  3654  00205E                     l1987:
  3655                           
  3656                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3657  00205E  0E02               	movlw	2
  3658  002060  6E05               	movwf	lcd_gotoxy@y,c
  3659  002062  0E01               	movlw	1
  3660  002064  ECD7  F010         	call	_lcd_gotoxy
  3661                           
  3662                           ;unmc_lcd_216.c: 179: break;
  3663  002068  0012               	return	
  3664  00206A                     l1989:
  3665                           
  3666                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3667  00206A  0E10               	movlw	16
  3668  00206C  6E03               	movwf	lcd_send_byte@n,c
  3669  00206E  0E00               	movlw	0
  3670  002070  EC94  F010         	call	_lcd_send_byte
  3671                           
  3672                           ;unmc_lcd_216.c: 182: break;
  3673  002074  0012               	return	
  3674  002076                     l1991:
  3675                           
  3676                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3677  002076  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3678  00207A  0E01               	movlw	1
  3679  00207C  EC94  F010         	call	_lcd_send_byte
  3680                           
  3681                           ;unmc_lcd_216.c: 186: }
  3682                           
  3683                           ;unmc_lcd_216.c: 185: break;
  3684  002080  0012               	return	
  3685  002082                     l1995:
  3686  002082  5008               	movf	lcd_putc@c,w,c
  3687                           
  3688                           ; Switch size 1, requested type "space"
  3689                           ; Number of cases is 3, Range of values is 8 to 12
  3690                           ; switch strategies available:
  3691                           ; Name         Instructions Cycles
  3692                           ; simple_byte           10     6 (average)
  3693                           ;	Chosen strategy is simple_byte
  3694  002084  0A08               	xorlw	8	; case 8
  3695  002086  B4D8               	btfsc	status,2,c
  3696  002088  D7F0               	goto	l1989
  3697  00208A  0A02               	xorlw	2	; case 10
  3698  00208C  B4D8               	btfsc	status,2,c
  3699  00208E  D7E7               	goto	l1987
  3700  002090  0A06               	xorlw	6	; case 12
  3701  002092  B4D8               	btfsc	status,2,c
  3702  002094  D7DE               	goto	l1985
  3703  002096  D7EF               	goto	l1991
  3704  002098  0012               	return		;funcret
  3705  00209A                     __end_of_lcd_putc:
  3706                           	opt stack 0
  3707                           tosu	equ	0xFFF
  3708                           tosh	equ	0xFFE
  3709                           tosl	equ	0xFFD
  3710                           pclath	equ	0xFFA
  3711                           tblptru	equ	0xFF8
  3712                           tblptrh	equ	0xFF7
  3713                           tblptrl	equ	0xFF6
  3714                           tablat	equ	0xFF5
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           indf0	equ	0xFEF
  3718                           postinc0	equ	0xFEE
  3719                           fsr0h	equ	0xFEA
  3720                           fsr0l	equ	0xFE9
  3721                           wreg	equ	0xFE8
  3722                           postinc1	equ	0xFE6
  3723                           postdec1	equ	0xFE5
  3724                           fsr1h	equ	0xFE2
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function _lcd_gotoxy *****************
  3734 ;; Defined at:
  3735 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  x               1    wreg     unsigned char 
  3738 ;;  y               1    4[COMRAM] unsigned char 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  x               1    5[COMRAM] unsigned char 
  3741 ;;  address         1    6[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;		None               void
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3751 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3752 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3754 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3755 ;;Total ram usage:        3 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    2
  3758 ;; This function calls:
  3759 ;;		_lcd_send_byte
  3760 ;; This function is called by:
  3761 ;;		_caratula
  3762 ;;		_ingresar_password
  3763 ;;		_main
  3764 ;;		_lcd_putc
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text20
  3769  0021AE                     __ptext20:
  3770                           	opt stack 0
  3771  0021AE                     _lcd_gotoxy:
  3772                           	opt stack 23
  3773                           
  3774                           ;incstack = 0
  3775                           ;lcd_gotoxy@x stored from wreg
  3776  0021AE  6E06               	movwf	lcd_gotoxy@x,c
  3777                           
  3778                           ;unmc_lcd_216.c: 159: int8 address;
  3779                           ;unmc_lcd_216.c: 161: if(y != 1)
  3780  0021B0  0405               	decf	lcd_gotoxy@y,w,c
  3781  0021B2  B4D8               	btfsc	status,2,c
  3782  0021B4  D002               	goto	l1977
  3783                           
  3784                           ;unmc_lcd_216.c: 162: address = 0x40;
  3785  0021B6  0E40               	movlw	64
  3786  0021B8  D001               	goto	L1
  3787  0021BA                     l1977:
  3788                           
  3789                           ;unmc_lcd_216.c: 163: else
  3790                           ;unmc_lcd_216.c: 164: address=0;
  3791  0021BA  0E00               	movlw	0
  3792  0021BC                     L1:
  3793  0021BC  6E07               	movwf	lcd_gotoxy@address,c
  3794  0021BE  D000               	goto	l1979
  3795  0021C0                     l1979:
  3796                           
  3797                           ;unmc_lcd_216.c: 166: address += x-1;
  3798  0021C0  0406               	decf	lcd_gotoxy@x,w,c
  3799  0021C2  2607               	addwf	lcd_gotoxy@address,f,c
  3800                           
  3801                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  3802  0021C4  5007               	movf	lcd_gotoxy@address,w,c
  3803  0021C6  0980               	iorlw	128
  3804  0021C8  6E03               	movwf	lcd_send_byte@n,c
  3805  0021CA  0E00               	movlw	0
  3806  0021CC  EC94  F010         	call	_lcd_send_byte
  3807  0021D0  0012               	return		;funcret
  3808  0021D2                     __end_of_lcd_gotoxy:
  3809                           	opt stack 0
  3810                           tosu	equ	0xFFF
  3811                           tosh	equ	0xFFE
  3812                           tosl	equ	0xFFD
  3813                           pclath	equ	0xFFA
  3814                           tblptru	equ	0xFF8
  3815                           tblptrh	equ	0xFF7
  3816                           tblptrl	equ	0xFF6
  3817                           tablat	equ	0xFF5
  3818                           prodh	equ	0xFF4
  3819                           prodl	equ	0xFF3
  3820                           indf0	equ	0xFEF
  3821                           postinc0	equ	0xFEE
  3822                           fsr0h	equ	0xFEA
  3823                           fsr0l	equ	0xFE9
  3824                           wreg	equ	0xFE8
  3825                           postinc1	equ	0xFE6
  3826                           postdec1	equ	0xFE5
  3827                           fsr1h	equ	0xFE2
  3828                           fsr1l	equ	0xFE1
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _Setup *****************
  3837 ;; Defined at:
  3838 ;;		line 61 in file "main.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;		None               void
  3845 ;; Registers used:
  3846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    3
  3859 ;; This function calls:
  3860 ;;		_Write_RTC
  3861 ;;		_lcd_comand
  3862 ;;		_lcd_init
  3863 ;; This function is called by:
  3864 ;;		_main
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           	psect	text21
  3869  00209A                     __ptext21:
  3870                           	opt stack 0
  3871  00209A                     _Setup:
  3872                           	opt stack 27
  3873                           
  3874                           ;main.c: 63: OSCTUNEbits.INTSRC=1;
  3875                           
  3876                           ;incstack = 0
  3877  00209A  8E9B               	bsf	3995,7,c	;volatile
  3878                           
  3879                           ;main.c: 64: OSCTUNEbits.PLLEN=0;
  3880  00209C  9C9B               	bcf	3995,6,c	;volatile
  3881                           
  3882                           ;main.c: 65: OSCCONbits.IRCF0=1;
  3883  00209E  88D3               	bsf	4051,4,c	;volatile
  3884                           
  3885                           ;main.c: 66: OSCCONbits.IRCF1=1;
  3886  0020A0  8AD3               	bsf	4051,5,c	;volatile
  3887                           
  3888                           ;main.c: 67: OSCCONbits.IRCF2=1;
  3889  0020A2  8CD3               	bsf	4051,6,c	;volatile
  3890                           
  3891                           ;main.c: 68: OSCCONbits.SCS0=0;
  3892  0020A4  90D3               	bcf	4051,0,c	;volatile
  3893                           
  3894                           ;main.c: 69: OSCCONbits.SCS1=0;
  3895  0020A6  92D3               	bcf	4051,1,c	;volatile
  3896                           
  3897                           ;main.c: 70: TRISA = 0b11110000;
  3898  0020A8  0EF0               	movlw	240
  3899  0020AA  6E92               	movwf	3986,c	;volatile
  3900                           
  3901                           ;main.c: 71: TRISB = 0;
  3902  0020AC  0E00               	movlw	0
  3903  0020AE  6E93               	movwf	3987,c	;volatile
  3904                           
  3905                           ;main.c: 72: TRISC = 0b00000111;
  3906  0020B0  0E07               	movlw	7
  3907  0020B2  6E94               	movwf	3988,c	;volatile
  3908                           
  3909                           ;main.c: 76: ANCON0=0b11111111;
  3910  0020B4  010F               	movlb	15	; () banked
  3911  0020B6  6948               	setf	72,b	;volatile
  3912                           
  3913                           ; BSR set to: 15
  3914                           ;main.c: 78: ANCON1=0b11111111;
  3915  0020B8  010F               	movlb	15	; () banked
  3916  0020BA  6949               	setf	73,b	;volatile
  3917                           
  3918                           ;main.c: 79: ADCON0=0b00101101;
  3919  0020BC  0E2D               	movlw	45
  3920  0020BE  6EC2               	movwf	4034,c	;volatile
  3921                           
  3922                           ;main.c: 80: ADCON1=0b00010000;
  3923  0020C0  0E10               	movlw	16
  3924  0020C2  6EC1               	movwf	4033,c	;volatile
  3925                           
  3926                           ; BSR set to: 15
  3927                           ;main.c: 81: RTCCFGbits.RTCEN=1;
  3928  0020C4  010F               	movlb	15	; () banked
  3929  0020C6  8F3F               	bsf	63,7,b	;volatile
  3930                           
  3931                           ; BSR set to: 15
  3932                           ;main.c: 82: RTCCFGbits.RTCWREN=1;
  3933  0020C8  010F               	movlb	15	; () banked
  3934  0020CA  8B3F               	bsf	63,5,b	;volatile
  3935                           
  3936                           ; BSR set to: 15
  3937                           ;main.c: 83: T1CONbits.T1OSCEN=1;
  3938  0020CC  86CD               	bsf	4045,3,c	;volatile
  3939                           
  3940                           ; BSR set to: 15
  3941                           ;main.c: 84: Write_RTC();
  3942  0020CE  ECED  F008         	call	_Write_RTC	;wreg free
  3943                           
  3944                           ;main.c: 85: lcd_init();
  3945  0020D2  EC0F  F00E         	call	_lcd_init	;wreg free
  3946                           
  3947                           ;main.c: 86: lcd_comand(0b00001100);
  3948  0020D6  0E0C               	movlw	12
  3949  0020D8  EC1C  F011         	call	_lcd_comand
  3950                           
  3951                           ;main.c: 87: LATBbits.LATB1 = 1;;
  3952  0020DC  828A               	bsf	3978,1,c	;volatile
  3953                           
  3954                           ;main.c: 88: LATBbits.LATB0 = 1;;
  3955  0020DE  808A               	bsf	3978,0,c	;volatile
  3956  0020E0  0012               	return		;funcret
  3957  0020E2                     __end_of_Setup:
  3958                           	opt stack 0
  3959                           tosu	equ	0xFFF
  3960                           tosh	equ	0xFFE
  3961                           tosl	equ	0xFFD
  3962                           pclath	equ	0xFFA
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           prodh	equ	0xFF4
  3968                           prodl	equ	0xFF3
  3969                           indf0	equ	0xFEF
  3970                           postinc0	equ	0xFEE
  3971                           fsr0h	equ	0xFEA
  3972                           fsr0l	equ	0xFE9
  3973                           wreg	equ	0xFE8
  3974                           postinc1	equ	0xFE6
  3975                           postdec1	equ	0xFE5
  3976                           fsr1h	equ	0xFE2
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _lcd_init *****************
  3986 ;; Defined at:
  3987 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  i               1    4[COMRAM] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;		None               void
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4005 ;;Total ram usage:        1 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    2
  4008 ;; This function calls:
  4009 ;;		_Delay1KTCYx
  4010 ;;		_lcd_send_byte
  4011 ;;		_lcd_send_nibble
  4012 ;; This function is called by:
  4013 ;;		_Setup
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	text22
  4018  001C1E                     __ptext22:
  4019                           	opt stack 0
  4020  001C1E                     _lcd_init:
  4021                           	opt stack 27
  4022                           
  4023                           ;unmc_lcd_216.c: 120: int8 i;
  4024                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  4025                           
  4026                           ;incstack = 0
  4027  001C1E  9693               	bcf	3987,3,c	;volatile
  4028                           
  4029                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  4030  001C20  9493               	bcf	3987,2,c	;volatile
  4031                           
  4032                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  4033  001C22  968A               	bcf	3978,3,c	;volatile
  4034                           
  4035                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  4036  001C24  948A               	bcf	3978,2,c	;volatile
  4037                           
  4038                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  4039  001C26  9893               	bcf	3987,4,c	;volatile
  4040                           
  4041                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  4042  001C28  9A93               	bcf	3987,5,c	;volatile
  4043                           
  4044                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  4045  001C2A  9C93               	bcf	3987,6,c	;volatile
  4046                           
  4047                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  4048  001C2C  9E93               	bcf	3987,7,c	;volatile
  4049                           
  4050                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  4051  001C2E  0E0A               	movlw	10
  4052  001C30  ECFA  F010         	call	_Delay1KTCYx
  4053                           
  4054                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  4055  001C34  0E0A               	movlw	10
  4056  001C36  ECFA  F010         	call	_Delay1KTCYx
  4057                           
  4058                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  4059  001C3A  0E0A               	movlw	10
  4060  001C3C  ECFA  F010         	call	_Delay1KTCYx
  4061                           
  4062                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  4063  001C40  0E00               	movlw	0
  4064  001C42  6E05               	movwf	lcd_init@i,c
  4065  001C44                     l2519:
  4066  001C44  0E02               	movlw	2
  4067  001C46  6405               	cpfsgt	lcd_init@i,c
  4068  001C48  D001               	goto	l2523
  4069  001C4A  D008               	goto	l2529
  4070  001C4C                     l2523:
  4071                           
  4072                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  4073  001C4C  0E03               	movlw	3
  4074  001C4E  EC4F  F00E         	call	_lcd_send_nibble
  4075                           
  4076                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  4077  001C52  0E0A               	movlw	10
  4078  001C54  ECFA  F010         	call	_Delay1KTCYx
  4079  001C58  2A05               	incf	lcd_init@i,f,c
  4080  001C5A  D7F4               	goto	l2519
  4081  001C5C                     l2529:
  4082                           
  4083                           ;unmc_lcd_216.c: 146: }
  4084                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  4085  001C5C  0E02               	movlw	2
  4086  001C5E  EC4F  F00E         	call	_lcd_send_nibble
  4087                           
  4088                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  4089  001C62  0E00               	movlw	0
  4090  001C64  6E05               	movwf	lcd_init@i,c
  4091  001C66  0E03               	movlw	3
  4092  001C68  6405               	cpfsgt	lcd_init@i,c
  4093  001C6A  D002               	goto	l2537
  4094  001C6C  0012               	return	
  4095  001C6E  0012               	return	
  4096  001C70                     l2537:
  4097                           
  4098                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  4099  001C70  5005               	movf	lcd_init@i,w,c
  4100  001C72  0D01               	mullw	1
  4101  001C74  0E0B               	movlw	low _LCD_INIT_STRING
  4102  001C76  24F3               	addwf	prodl,w,c
  4103  001C78  6EF6               	movwf	tblptrl,c
  4104  001C7A  0E0F               	movlw	high _LCD_INIT_STRING
  4105  001C7C  20F4               	addwfc	prodh,w,c
  4106  001C7E  6EF7               	movwf	tblptrh,c
  4107  001C80                     	if	0	;There are less than 3 active tblptr bytes
  4108  001C80                     	endif
  4109  001C80  0008               	tblrd		*
  4110  001C82  CFF5 F003          	movff	tablat,lcd_send_byte@n
  4111  001C86  0E00               	movlw	0
  4112  001C88  EC94  F010         	call	_lcd_send_byte
  4113                           
  4114                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  4115  001C8C  0E0A               	movlw	10
  4116  001C8E  ECFA  F010         	call	_Delay1KTCYx
  4117  001C92  2A05               	incf	lcd_init@i,f,c
  4118  001C94  0E03               	movlw	3
  4119  001C96  6405               	cpfsgt	lcd_init@i,c
  4120  001C98  D7EB               	goto	l2537
  4121  001C9A  0012               	return	
  4122  001C9C  0012               	return		;funcret
  4123  001C9E                     __end_of_lcd_init:
  4124                           	opt stack 0
  4125                           tosu	equ	0xFFF
  4126                           tosh	equ	0xFFE
  4127                           tosl	equ	0xFFD
  4128                           pclath	equ	0xFFA
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           indf0	equ	0xFEF
  4136                           postinc0	equ	0xFEE
  4137                           fsr0h	equ	0xFEA
  4138                           fsr0l	equ	0xFE9
  4139                           wreg	equ	0xFE8
  4140                           postinc1	equ	0xFE6
  4141                           postdec1	equ	0xFE5
  4142                           fsr1h	equ	0xFE2
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           postinc2	equ	0xFDE
  4146                           postdec2	equ	0xFDD
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _Delay1KTCYx *****************
  4152 ;; Defined at:
  4153 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  unit            1    wreg     unsigned char 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  unit            1    0[COMRAM] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		wreg
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4171 ;;Total ram usage:        1 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_lcd_init
  4177 ;;		_DelayPORXLCD
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text23
  4182  0021F4                     __ptext23:
  4183                           	opt stack 0
  4184  0021F4                     _Delay1KTCYx:
  4185                           	opt stack 28
  4186                           
  4187                           ;incstack = 0
  4188                           ;Delay1KTCYx@unit stored from wreg
  4189  0021F4  6E01               	movwf	Delay1KTCYx@unit,c
  4190  0021F6  0EFA               	movlw	250
  4191  0021F8                     u2317:
  4192  0021F8  F000               	nop	
  4193  0021FA  2EE8               	decfsz	wreg,f,c
  4194  0021FC  D7FD               	goto	u2317
  4195  0021FE  2E01               	decfsz	Delay1KTCYx@unit,f,c
  4196  002200  D7FA               	goto	l1325
  4197  002202  0012               	return	
  4198  002204  0012               	return		;funcret
  4199  002206                     __end_of_Delay1KTCYx:
  4200                           	opt stack 0
  4201                           tosu	equ	0xFFF
  4202                           tosh	equ	0xFFE
  4203                           tosl	equ	0xFFD
  4204                           pclath	equ	0xFFA
  4205                           tblptru	equ	0xFF8
  4206                           tblptrh	equ	0xFF7
  4207                           tblptrl	equ	0xFF6
  4208                           tablat	equ	0xFF5
  4209                           prodh	equ	0xFF4
  4210                           prodl	equ	0xFF3
  4211                           indf0	equ	0xFEF
  4212                           postinc0	equ	0xFEE
  4213                           fsr0h	equ	0xFEA
  4214                           fsr0l	equ	0xFE9
  4215                           wreg	equ	0xFE8
  4216                           postinc1	equ	0xFE6
  4217                           postdec1	equ	0xFE5
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _lcd_comand *****************
  4228 ;; Defined at:
  4229 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  d               1    wreg     unsigned char 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  d               1    4[COMRAM] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4246 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4247 ;;Total ram usage:        1 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    2
  4250 ;; This function calls:
  4251 ;;		_lcd_send_byte
  4252 ;; This function is called by:
  4253 ;;		_caratula
  4254 ;;		_Setup
  4255 ;;		_ingresar_password
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text24
  4260  002238                     __ptext24:
  4261                           	opt stack 0
  4262  002238                     _lcd_comand:
  4263                           	opt stack 27
  4264                           
  4265                           ;incstack = 0
  4266                           ;lcd_comand@d stored from wreg
  4267  002238  6E05               	movwf	lcd_comand@d,c
  4268                           
  4269                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  4270  00223A  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  4271  00223E  0E00               	movlw	0
  4272  002240  EC94  F010         	call	_lcd_send_byte
  4273  002244  0012               	return		;funcret
  4274  002246                     __end_of_lcd_comand:
  4275                           	opt stack 0
  4276                           tosu	equ	0xFFF
  4277                           tosh	equ	0xFFE
  4278                           tosl	equ	0xFFD
  4279                           pclath	equ	0xFFA
  4280                           tblptru	equ	0xFF8
  4281                           tblptrh	equ	0xFF7
  4282                           tblptrl	equ	0xFF6
  4283                           tablat	equ	0xFF5
  4284                           prodh	equ	0xFF4
  4285                           prodl	equ	0xFF3
  4286                           indf0	equ	0xFEF
  4287                           postinc0	equ	0xFEE
  4288                           fsr0h	equ	0xFEA
  4289                           fsr0l	equ	0xFE9
  4290                           wreg	equ	0xFE8
  4291                           postinc1	equ	0xFE6
  4292                           postdec1	equ	0xFE5
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _lcd_send_byte *****************
  4303 ;; Defined at:
  4304 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  address         1    wreg     unsigned char 
  4307 ;;  n               1    2[COMRAM] unsigned char 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  address         1    3[COMRAM] unsigned char 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;		None               void
  4312 ;; Registers used:
  4313 ;;		wreg, status,2, status,0, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4319 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4323 ;;Total ram usage:        2 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    1
  4326 ;; This function calls:
  4327 ;;		_Delay100TCYx
  4328 ;;		_lcd_send_nibble
  4329 ;; This function is called by:
  4330 ;;		_lcd_init
  4331 ;;		_lcd_gotoxy
  4332 ;;		_lcd_putc
  4333 ;;		_lcd_comand
  4334 ;;		_lcd_setcursor_vb
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text25
  4339  002128                     __ptext25:
  4340                           	opt stack 0
  4341  002128                     _lcd_send_byte:
  4342                           	opt stack 24
  4343                           
  4344                           ;incstack = 0
  4345                           ;lcd_send_byte@address stored from wreg
  4346  002128  6E04               	movwf	lcd_send_byte@address,c
  4347                           
  4348                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  4349  00212A  968A               	bcf	3978,3,c	;volatile
  4350                           
  4351                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  4352  00212C  0E02               	movlw	2
  4353  00212E  EC03  F011         	call	_Delay100TCYx
  4354                           
  4355                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  4356  002132  9893               	bcf	3987,4,c	;volatile
  4357                           
  4358                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  4359  002134  9A93               	bcf	3987,5,c	;volatile
  4360                           
  4361                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  4362  002136  9C93               	bcf	3987,6,c	;volatile
  4363                           
  4364                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  4365  002138  9E93               	bcf	3987,7,c	;volatile
  4366                           
  4367                           ;unmc_lcd_216.c: 101: if(address)
  4368  00213A  5004               	movf	lcd_send_byte@address,w,c
  4369  00213C  B4D8               	btfsc	status,2,c
  4370  00213E  D002               	goto	l279
  4371                           
  4372                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  4373  002140  868A               	bsf	3978,3,c	;volatile
  4374  002142  D001               	goto	l280
  4375  002144                     l279:
  4376                           
  4377                           ;unmc_lcd_216.c: 103: else
  4378                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  4379  002144  968A               	bcf	3978,3,c	;volatile
  4380  002146                     l280:
  4381                           
  4382                           ;unmc_lcd_216.c: 106: __nop();
  4383  002146  F000               	nop	
  4384                           
  4385                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  4386  002148  3803               	swapf	lcd_send_byte@n,w,c
  4387  00214A  0B0F               	andlw	15
  4388  00214C  EC4F  F00E         	call	_lcd_send_nibble
  4389                           
  4390                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  4391  002150  5003               	movf	lcd_send_byte@n,w,c
  4392  002152  0B0F               	andlw	15
  4393  002154  EC4F  F00E         	call	_lcd_send_nibble
  4394  002158  0012               	return		;funcret
  4395  00215A                     __end_of_lcd_send_byte:
  4396                           	opt stack 0
  4397                           tosu	equ	0xFFF
  4398                           tosh	equ	0xFFE
  4399                           tosl	equ	0xFFD
  4400                           pclath	equ	0xFFA
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           indf0	equ	0xFEF
  4408                           postinc0	equ	0xFEE
  4409                           fsr0h	equ	0xFEA
  4410                           fsr0l	equ	0xFE9
  4411                           wreg	equ	0xFE8
  4412                           postinc1	equ	0xFE6
  4413                           postdec1	equ	0xFE5
  4414                           fsr1h	equ	0xFE2
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _lcd_send_nibble *****************
  4424 ;; Defined at:
  4425 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  nibble          1    wreg     unsigned char 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  nibble          1    1[COMRAM] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4443 ;;Total ram usage:        2 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_lcd_send_byte
  4449 ;;		_lcd_init
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text26
  4454  001C9E                     __ptext26:
  4455                           	opt stack 0
  4456  001C9E                     _lcd_send_nibble:
  4457                           	opt stack 24
  4458                           
  4459                           ;incstack = 0
  4460                           ;lcd_send_nibble@nibble stored from wreg
  4461  001C9E  6E02               	movwf	lcd_send_nibble@nibble,c
  4462                           
  4463                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  4464  001CA0  A002               	btfss	lcd_send_nibble@nibble,0,c
  4465  001CA2  D003               	goto	u1150
  4466  001CA4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4467  001CA6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4468  001CA8  D001               	goto	u1168
  4469  001CAA                     u1150:
  4470  001CAA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4471  001CAC                     u1168:
  4472  001CAC  3A01               	swapf	??_lcd_send_nibble,f,c
  4473  001CAE  508A               	movf	3978,w,c	;volatile
  4474  001CB0  1801               	xorwf	??_lcd_send_nibble,w,c
  4475  001CB2  0BEF               	andlw	-17
  4476  001CB4  1801               	xorwf	??_lcd_send_nibble,w,c
  4477  001CB6  6E8A               	movwf	3978,c	;volatile
  4478                           
  4479                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  4480  001CB8  A202               	btfss	lcd_send_nibble@nibble,1,c
  4481  001CBA  D003               	goto	u1170
  4482  001CBC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4483  001CBE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4484  001CC0  D001               	goto	u1188
  4485  001CC2                     u1170:
  4486  001CC2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4487  001CC4                     u1188:
  4488  001CC4  3A01               	swapf	??_lcd_send_nibble,f,c
  4489  001CC6  4601               	rlncf	??_lcd_send_nibble,f,c
  4490  001CC8  508A               	movf	3978,w,c	;volatile
  4491  001CCA  1801               	xorwf	??_lcd_send_nibble,w,c
  4492  001CCC  0BDF               	andlw	-33
  4493  001CCE  1801               	xorwf	??_lcd_send_nibble,w,c
  4494  001CD0  6E8A               	movwf	3978,c	;volatile
  4495                           
  4496                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  4497  001CD2  A402               	btfss	lcd_send_nibble@nibble,2,c
  4498  001CD4  D003               	goto	u1190
  4499  001CD6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4500  001CD8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4501  001CDA  D001               	goto	u1208
  4502  001CDC                     u1190:
  4503  001CDC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4504  001CDE                     u1208:
  4505  001CDE  3A01               	swapf	??_lcd_send_nibble,f,c
  4506  001CE0  4601               	rlncf	??_lcd_send_nibble,f,c
  4507  001CE2  4601               	rlncf	??_lcd_send_nibble,f,c
  4508  001CE4  508A               	movf	3978,w,c	;volatile
  4509  001CE6  1801               	xorwf	??_lcd_send_nibble,w,c
  4510  001CE8  0BBF               	andlw	-65
  4511  001CEA  1801               	xorwf	??_lcd_send_nibble,w,c
  4512  001CEC  6E8A               	movwf	3978,c	;volatile
  4513                           
  4514                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  4515  001CEE  A602               	btfss	lcd_send_nibble@nibble,3,c
  4516  001CF0  D003               	goto	u1210
  4517  001CF2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4518  001CF4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4519  001CF6  D001               	goto	u1228
  4520  001CF8                     u1210:
  4521  001CF8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4522  001CFA                     u1228:
  4523  001CFA  3201               	rrcf	??_lcd_send_nibble,f,c
  4524  001CFC  3201               	rrcf	??_lcd_send_nibble,f,c
  4525  001CFE  508A               	movf	3978,w,c	;volatile
  4526  001D00  1801               	xorwf	??_lcd_send_nibble,w,c
  4527  001D02  0B7F               	andlw	-129
  4528  001D04  1801               	xorwf	??_lcd_send_nibble,w,c
  4529  001D06  6E8A               	movwf	3978,c	;volatile
  4530                           
  4531                           ;unmc_lcd_216.c: 32: __nop();
  4532  001D08  F000               	nop	
  4533                           
  4534                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  4535  001D0A  848A               	bsf	3978,2,c	;volatile
  4536                           
  4537                           ;unmc_lcd_216.c: 34: __nop();__nop();
  4538  001D0C  F000               	nop	
  4539  001D0E  F000               	nop	
  4540                           
  4541                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  4542  001D10  948A               	bcf	3978,2,c	;volatile
  4543  001D12  0012               	return		;funcret
  4544  001D14                     __end_of_lcd_send_nibble:
  4545                           	opt stack 0
  4546                           tosu	equ	0xFFF
  4547                           tosh	equ	0xFFE
  4548                           tosl	equ	0xFFD
  4549                           pclath	equ	0xFFA
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           indf0	equ	0xFEF
  4557                           postinc0	equ	0xFEE
  4558                           fsr0h	equ	0xFEA
  4559                           fsr0l	equ	0xFE9
  4560                           wreg	equ	0xFE8
  4561                           postinc1	equ	0xFE6
  4562                           postdec1	equ	0xFE5
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function _Delay100TCYx *****************
  4573 ;; Defined at:
  4574 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  unit            1    wreg     unsigned char 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  unit            1    0[COMRAM] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;		None               void
  4581 ;; Registers used:
  4582 ;;		wreg
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4592 ;;Total ram usage:        1 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_lcd_send_byte
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text27
  4602  002206                     __ptext27:
  4603                           	opt stack 0
  4604  002206                     _Delay100TCYx:
  4605                           	opt stack 24
  4606                           
  4607                           ;incstack = 0
  4608                           ;Delay100TCYx@unit stored from wreg
  4609  002206  6E01               	movwf	Delay100TCYx@unit,c
  4610  002208  0E21               	movlw	33
  4611  00220A                     u2327:
  4612  00220A  2EE8               	decfsz	wreg,f,c
  4613  00220C  D7FE               	goto	u2327
  4614  00220E  F000               	nop	
  4615  002210  2E01               	decfsz	Delay100TCYx@unit,f,c
  4616  002212  D7FA               	goto	l1951
  4617  002214  0012               	return	
  4618  002216  0012               	return		;funcret
  4619  002218                     __end_of_Delay100TCYx:
  4620                           	opt stack 0
  4621                           tosu	equ	0xFFF
  4622                           tosh	equ	0xFFE
  4623                           tosl	equ	0xFFD
  4624                           pclath	equ	0xFFA
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           indf0	equ	0xFEF
  4632                           postinc0	equ	0xFEE
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           postinc1	equ	0xFE6
  4637                           postdec1	equ	0xFE5
  4638                           fsr1h	equ	0xFE2
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _Write_RTC *****************
  4648 ;; Defined at:
  4649 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;		None               void
  4656 ;; Registers used:
  4657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4667 ;;Total ram usage:        0 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    2
  4670 ;; This function calls:
  4671 ;;		_RtccWrOn
  4672 ;;		_RtccWriteDate
  4673 ;;		_RtccWriteTime
  4674 ;;		___awdiv
  4675 ;; This function is called by:
  4676 ;;		_Setup
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           	psect	text28
  4681  0011DA                     __ptext28:
  4682                           	opt stack 0
  4683  0011DA                     _Write_RTC:
  4684                           	opt stack 27
  4685                           
  4686                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  4687                           
  4688                           ;incstack = 0
  4689  0011DA  EC0C  F011         	call	_RtccWrOn	;wreg free
  4690                           
  4691                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  4692  0011DE  80A3               	bsf	4003,0,c	;volatile
  4693                           
  4694                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  4695  0011E0  C042  F001         	movff	_segundo,___awdiv@dividend
  4696  0011E4  C043  F002         	movff	_segundo+1,___awdiv@dividend+1
  4697  0011E8  0E00               	movlw	0
  4698  0011EA  6E04               	movwf	___awdiv@divisor+1,c
  4699  0011EC  0E0A               	movlw	10
  4700  0011EE  6E03               	movwf	___awdiv@divisor,c
  4701  0011F0  EC7D  F00D         	call	___awdiv	;wreg free
  4702  0011F4  5001               	movf	?___awdiv,w,c
  4703  0011F6  0100               	movlb	0	; () banked
  4704  0011F8  6FC0               	movwf	_segundo_d& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  4708  0011FA  0100               	movlb	0	; () banked
  4709  0011FC  51C0               	movf	_segundo_d& (0+255),w,b
  4710  0011FE  0D0A               	mullw	10
  4711  001200  50F3               	movf	prodl,w,c
  4712  001202  0800               	sublw	0
  4713  001204  2442               	addwf	_segundo,w,c
  4714  001206  0100               	movlb	0	; () banked
  4715  001208  6FC1               	movwf	_segundo_u& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  4719  00120A  0100               	movlb	0	; () banked
  4720  00120C  51C0               	movf	_segundo_d& (0+255),w,b
  4721  00120E  0D10               	mullw	16
  4722  001210  50F3               	movf	prodl,w,c
  4723  001212  0100               	movlb	0	; () banked
  4724  001214  25C1               	addwf	_segundo_u& (0+255),w,b
  4725  001216  6E4E               	movwf	_RtccTime+1,c
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  4729  001218  C05B  F001         	movff	_minuto,___awdiv@dividend
  4730  00121C  C05C  F002         	movff	_minuto+1,___awdiv@dividend+1
  4731  001220  0E00               	movlw	0
  4732  001222  6E04               	movwf	___awdiv@divisor+1,c
  4733  001224  0E0A               	movlw	10
  4734  001226  6E03               	movwf	___awdiv@divisor,c
  4735  001228  EC7D  F00D         	call	___awdiv	;wreg free
  4736  00122C  5001               	movf	?___awdiv,w,c
  4737  00122E  0100               	movlb	0	; () banked
  4738  001230  6FBE               	movwf	_minuto_d& (0+255),b
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  4742  001232  0100               	movlb	0	; () banked
  4743  001234  51BE               	movf	_minuto_d& (0+255),w,b
  4744  001236  0D0A               	mullw	10
  4745  001238  50F3               	movf	prodl,w,c
  4746  00123A  0800               	sublw	0
  4747  00123C  245B               	addwf	_minuto,w,c
  4748  00123E  0100               	movlb	0	; () banked
  4749  001240  6FBF               	movwf	_minuto_u& (0+255),b
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  4753  001242  0100               	movlb	0	; () banked
  4754  001244  51BE               	movf	_minuto_d& (0+255),w,b
  4755  001246  0D10               	mullw	16
  4756  001248  50F3               	movf	prodl,w,c
  4757  00124A  0100               	movlb	0	; () banked
  4758  00124C  25BF               	addwf	_minuto_u& (0+255),w,b
  4759  00124E  6E4F               	movwf	_RtccTime+2,c
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  4763  001250  C057  F001         	movff	_hora,___awdiv@dividend
  4764  001254  C058  F002         	movff	_hora+1,___awdiv@dividend+1
  4765  001258  0E00               	movlw	0
  4766  00125A  6E04               	movwf	___awdiv@divisor+1,c
  4767  00125C  0E0A               	movlw	10
  4768  00125E  6E03               	movwf	___awdiv@divisor,c
  4769  001260  EC7D  F00D         	call	___awdiv	;wreg free
  4770  001264  5001               	movf	?___awdiv,w,c
  4771  001266  0100               	movlb	0	; () banked
  4772  001268  6FBA               	movwf	_hora_d& (0+255),b
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  4776  00126A  0100               	movlb	0	; () banked
  4777  00126C  51BA               	movf	_hora_d& (0+255),w,b
  4778  00126E  0D0A               	mullw	10
  4779  001270  50F3               	movf	prodl,w,c
  4780  001272  0800               	sublw	0
  4781  001274  2457               	addwf	_hora,w,c
  4782  001276  0100               	movlb	0	; () banked
  4783  001278  6FBB               	movwf	_hora_u& (0+255),b
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  4787  00127A  0100               	movlb	0	; () banked
  4788  00127C  51BA               	movf	_hora_d& (0+255),w,b
  4789  00127E  0D10               	mullw	16
  4790  001280  50F3               	movf	prodl,w,c
  4791  001282  0100               	movlb	0	; () banked
  4792  001284  25BB               	addwf	_hora_u& (0+255),w,b
  4793  001286  6E50               	movwf	_RtccTime+3,c
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  4797  001288  C051  F001         	movff	_anio,___awdiv@dividend
  4798  00128C  C052  F002         	movff	_anio+1,___awdiv@dividend+1
  4799  001290  0E00               	movlw	0
  4800  001292  6E04               	movwf	___awdiv@divisor+1,c
  4801  001294  0E0A               	movlw	10
  4802  001296  6E03               	movwf	___awdiv@divisor,c
  4803  001298  EC7D  F00D         	call	___awdiv	;wreg free
  4804  00129C  5001               	movf	?___awdiv,w,c
  4805  00129E  0100               	movlb	0	; () banked
  4806  0012A0  6FB5               	movwf	_anio_d& (0+255),b
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  4810  0012A2  0100               	movlb	0	; () banked
  4811  0012A4  51B5               	movf	_anio_d& (0+255),w,b
  4812  0012A6  0D0A               	mullw	10
  4813  0012A8  50F3               	movf	prodl,w,c
  4814  0012AA  0800               	sublw	0
  4815  0012AC  2451               	addwf	_anio,w,c
  4816  0012AE  0100               	movlb	0	; () banked
  4817  0012B0  6FB6               	movwf	_anio_u& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  4821  0012B2  0100               	movlb	0	; () banked
  4822  0012B4  51B5               	movf	_anio_d& (0+255),w,b
  4823  0012B6  0D10               	mullw	16
  4824  0012B8  50F3               	movf	prodl,w,c
  4825  0012BA  0100               	movlb	0	; () banked
  4826  0012BC  25B6               	addwf	_anio_u& (0+255),w,b
  4827  0012BE  6E4C               	movwf	_RtccDate+3,c
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  4831  0012C0  C059  F001         	movff	_mes,___awdiv@dividend
  4832  0012C4  C05A  F002         	movff	_mes+1,___awdiv@dividend+1
  4833  0012C8  0E00               	movlw	0
  4834  0012CA  6E04               	movwf	___awdiv@divisor+1,c
  4835  0012CC  0E0A               	movlw	10
  4836  0012CE  6E03               	movwf	___awdiv@divisor,c
  4837  0012D0  EC7D  F00D         	call	___awdiv	;wreg free
  4838  0012D4  5001               	movf	?___awdiv,w,c
  4839  0012D6  0100               	movlb	0	; () banked
  4840  0012D8  6FBC               	movwf	_mes_d& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  4844  0012DA  0100               	movlb	0	; () banked
  4845  0012DC  51BC               	movf	_mes_d& (0+255),w,b
  4846  0012DE  0D0A               	mullw	10
  4847  0012E0  50F3               	movf	prodl,w,c
  4848  0012E2  0800               	sublw	0
  4849  0012E4  2459               	addwf	_mes,w,c
  4850  0012E6  0100               	movlb	0	; () banked
  4851  0012E8  6FBD               	movwf	_mes_u& (0+255),b
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  4855  0012EA  0100               	movlb	0	; () banked
  4856  0012EC  51BC               	movf	_mes_d& (0+255),w,b
  4857  0012EE  0D10               	mullw	16
  4858  0012F0  50F3               	movf	prodl,w,c
  4859  0012F2  0100               	movlb	0	; () banked
  4860  0012F4  25BD               	addwf	_mes_u& (0+255),w,b
  4861  0012F6  6E4B               	movwf	_RtccDate+2,c
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  4865  0012F8  C053  F001         	movff	_dia,___awdiv@dividend
  4866  0012FC  C054  F002         	movff	_dia+1,___awdiv@dividend+1
  4867  001300  0E00               	movlw	0
  4868  001302  6E04               	movwf	___awdiv@divisor+1,c
  4869  001304  0E0A               	movlw	10
  4870  001306  6E03               	movwf	___awdiv@divisor,c
  4871  001308  EC7D  F00D         	call	___awdiv	;wreg free
  4872  00130C  5001               	movf	?___awdiv,w,c
  4873  00130E  0100               	movlb	0	; () banked
  4874  001310  6FB8               	movwf	_fecha_d& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  4878  001312  0100               	movlb	0	; () banked
  4879  001314  51B8               	movf	_fecha_d& (0+255),w,b
  4880  001316  0D0A               	mullw	10
  4881  001318  50F3               	movf	prodl,w,c
  4882  00131A  0800               	sublw	0
  4883  00131C  2453               	addwf	_dia,w,c
  4884  00131E  0100               	movlb	0	; () banked
  4885  001320  6FB9               	movwf	_fecha_u& (0+255),b
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  4889  001322  0100               	movlb	0	; () banked
  4890  001324  51B8               	movf	_fecha_d& (0+255),w,b
  4891  001326  0D10               	mullw	16
  4892  001328  50F3               	movf	prodl,w,c
  4893  00132A  0100               	movlb	0	; () banked
  4894  00132C  25B9               	addwf	_fecha_u& (0+255),w,b
  4895  00132E  6E4A               	movwf	_RtccDate+1,c
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  4899  001330  C055  F0B7         	movff	_diasem,_dia_semana
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  4903  001334  C055  F049         	movff	_diasem,_RtccDate
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  4907  001338  0E4D               	movlw	low _RtccTime
  4908  00133A  6E01               	movwf	RtccWriteTime@pTm,c
  4909  00133C  0E00               	movlw	high _RtccTime
  4910  00133E  6E02               	movwf	RtccWriteTime@pTm+1,c
  4911  001340  0E01               	movlw	1
  4912  001342  6E03               	movwf	RtccWriteTime@di,c
  4913  001344  EC6B  F00B         	call	_RtccWriteTime	;wreg free
  4914                           
  4915                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  4916  001348  0E49               	movlw	low _RtccDate
  4917  00134A  6E01               	movwf	RtccWriteDate@pDt,c
  4918  00134C  0E00               	movlw	high _RtccDate
  4919  00134E  6E02               	movwf	RtccWriteDate@pDt+1,c
  4920  001350  0E01               	movlw	1
  4921  001352  6E03               	movwf	RtccWriteDate@di,c
  4922  001354  ECAF  F009         	call	_RtccWriteDate	;wreg free
  4923                           
  4924                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  4925  001358  010F               	movlb	15	; () banked
  4926  00135A  8F3F               	bsf	63,7,b	;volatile
  4927                           
  4928                           ; BSR set to: 15
  4929  00135C  0012               	return		;funcret
  4930  00135E                     __end_of_Write_RTC:
  4931                           	opt stack 0
  4932                           tosu	equ	0xFFF
  4933                           tosh	equ	0xFFE
  4934                           tosl	equ	0xFFD
  4935                           pclath	equ	0xFFA
  4936                           tblptru	equ	0xFF8
  4937                           tblptrh	equ	0xFF7
  4938                           tblptrl	equ	0xFF6
  4939                           tablat	equ	0xFF5
  4940                           prodh	equ	0xFF4
  4941                           prodl	equ	0xFF3
  4942                           indf0	equ	0xFEF
  4943                           postinc0	equ	0xFEE
  4944                           fsr0h	equ	0xFEA
  4945                           fsr0l	equ	0xFE9
  4946                           wreg	equ	0xFE8
  4947                           postinc1	equ	0xFE6
  4948                           postdec1	equ	0xFE5
  4949                           fsr1h	equ	0xFE2
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function ___awdiv *****************
  4959 ;; Defined at:
  4960 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  dividend        2    0[COMRAM] int 
  4963 ;;  divisor         2    2[COMRAM] int 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  quotient        2    6[COMRAM] int 
  4966 ;;  sign            1    5[COMRAM] unsigned char 
  4967 ;;  counter         1    4[COMRAM] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  2    0[COMRAM] int 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4978 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4980 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4981 ;;Total ram usage:        8 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_Write_RTC
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text29
  4991  001AFA                     __ptext29:
  4992                           	opt stack 0
  4993  001AFA                     ___awdiv:
  4994                           	opt stack 28
  4995                           
  4996                           ; BSR set to: 15
  4997                           ;incstack = 0
  4998  001AFA  0E00               	movlw	0
  4999  001AFC  6E06               	movwf	___awdiv@sign,c
  5000  001AFE  AE04               	btfss	___awdiv@divisor+1,7,c
  5001  001B00  D007               	goto	l2337
  5002  001B02  6C03               	negf	___awdiv@divisor,c
  5003  001B04  1E04               	comf	___awdiv@divisor+1,f,c
  5004  001B06  B0D8               	btfsc	status,0,c
  5005  001B08  2A04               	incf	___awdiv@divisor+1,f,c
  5006  001B0A  0E01               	movlw	1
  5007  001B0C  6E06               	movwf	___awdiv@sign,c
  5008  001B0E  D000               	goto	l2337
  5009  001B10                     l2337:
  5010  001B10  AE02               	btfss	___awdiv@dividend+1,7,c
  5011  001B12  D007               	goto	l2343
  5012  001B14  6C01               	negf	___awdiv@dividend,c
  5013  001B16  1E02               	comf	___awdiv@dividend+1,f,c
  5014  001B18  B0D8               	btfsc	status,0,c
  5015  001B1A  2A02               	incf	___awdiv@dividend+1,f,c
  5016  001B1C  0E01               	movlw	1
  5017  001B1E  1A06               	xorwf	___awdiv@sign,f,c
  5018  001B20  D000               	goto	l2343
  5019  001B22                     l2343:
  5020  001B22  0E00               	movlw	0
  5021  001B24  6E08               	movwf	___awdiv@quotient+1,c
  5022  001B26  0E00               	movlw	0
  5023  001B28  6E07               	movwf	___awdiv@quotient,c
  5024  001B2A  5003               	movf	___awdiv@divisor,w,c
  5025  001B2C  1004               	iorwf	___awdiv@divisor+1,w,c
  5026  001B2E  B4D8               	btfsc	status,2,c
  5027  001B30  D021               	goto	l2365
  5028  001B32  0E01               	movlw	1
  5029  001B34  6E05               	movwf	___awdiv@counter,c
  5030  001B36  D005               	goto	l2351
  5031  001B38                     l2349:
  5032  001B38  90D8               	bcf	status,0,c
  5033  001B3A  3603               	rlcf	___awdiv@divisor,f,c
  5034  001B3C  3604               	rlcf	___awdiv@divisor+1,f,c
  5035  001B3E  2A05               	incf	___awdiv@counter,f,c
  5036  001B40  D000               	goto	l2351
  5037  001B42                     l2351:
  5038  001B42  BE04               	btfsc	___awdiv@divisor+1,7,c
  5039  001B44  D002               	goto	l2353
  5040  001B46  D7F8               	goto	l2349
  5041  001B48  D000               	goto	l2353
  5042  001B4A                     l2353:
  5043  001B4A  90D8               	bcf	status,0,c
  5044  001B4C  3607               	rlcf	___awdiv@quotient,f,c
  5045  001B4E  3608               	rlcf	___awdiv@quotient+1,f,c
  5046  001B50  5003               	movf	___awdiv@divisor,w,c
  5047  001B52  5C01               	subwf	___awdiv@dividend,w,c
  5048  001B54  5004               	movf	___awdiv@divisor+1,w,c
  5049  001B56  5802               	subwfb	___awdiv@dividend+1,w,c
  5050  001B58  A0D8               	btfss	status,0,c
  5051  001B5A  D006               	goto	l2361
  5052  001B5C  5003               	movf	___awdiv@divisor,w,c
  5053  001B5E  5E01               	subwf	___awdiv@dividend,f,c
  5054  001B60  5004               	movf	___awdiv@divisor+1,w,c
  5055  001B62  5A02               	subwfb	___awdiv@dividend+1,f,c
  5056  001B64  8007               	bsf	___awdiv@quotient,0,c
  5057  001B66  D000               	goto	l2361
  5058  001B68                     l2361:
  5059  001B68  90D8               	bcf	status,0,c
  5060  001B6A  3204               	rrcf	___awdiv@divisor+1,f,c
  5061  001B6C  3203               	rrcf	___awdiv@divisor,f,c
  5062  001B6E  2E05               	decfsz	___awdiv@counter,f,c
  5063  001B70  D7EC               	goto	l2353
  5064  001B72  D000               	goto	l2365
  5065  001B74                     l2365:
  5066  001B74  5006               	movf	___awdiv@sign,w,c
  5067  001B76  B4D8               	btfsc	status,2,c
  5068  001B78  D005               	goto	l2369
  5069  001B7A  6C07               	negf	___awdiv@quotient,c
  5070  001B7C  1E08               	comf	___awdiv@quotient+1,f,c
  5071  001B7E  B0D8               	btfsc	status,0,c
  5072  001B80  2A08               	incf	___awdiv@quotient+1,f,c
  5073  001B82  D000               	goto	l2369
  5074  001B84                     l2369:
  5075  001B84  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5076  001B88  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5077  001B8C  0012               	return	
  5078  001B8E  0012               	return		;funcret
  5079  001B90                     __end_of___awdiv:
  5080                           	opt stack 0
  5081                           tosu	equ	0xFFF
  5082                           tosh	equ	0xFFE
  5083                           tosl	equ	0xFFD
  5084                           pclath	equ	0xFFA
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           indf0	equ	0xFEF
  5092                           postinc0	equ	0xFEE
  5093                           fsr0h	equ	0xFEA
  5094                           fsr0l	equ	0xFE9
  5095                           wreg	equ	0xFE8
  5096                           postinc1	equ	0xFE6
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _RtccWriteTime *****************
  5108 ;; Defined at:
  5109 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  pTm             2    0[COMRAM] PTR const struct .
  5112 ;;		 -> RtccTime(4), 
  5113 ;;  di              1    2[COMRAM] enum E7121
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  tempHourWDay    2    9[COMRAM] struct .
  5116 ;;  tempMinSec      2    7[COMRAM] struct .
  5117 ;;  wasWrEn         1    6[COMRAM] enum E7121
  5118 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5119 ;;  wasOn           1    4[COMRAM] enum E7121
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      enum E7337
  5122 ;; Registers used:
  5123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5129 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5130 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5132 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5133 ;;Total ram usage:       11 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    1
  5136 ;; This function calls:
  5137 ;;		_RtccWrOn
  5138 ;; This function is called by:
  5139 ;;		_Write_RTC
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text30
  5144  0016D6                     __ptext30:
  5145                           	opt stack 0
  5146  0016D6                     _RtccWriteTime:
  5147                           	opt stack 27
  5148                           
  5149                           ;incstack = 0
  5150  0016D6  0E00               	movlw	0
  5151  0016D8  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5152  0016DA  EE20 F002          	lfsr	2,2
  5153  0016DE  5001               	movf	RtccWriteTime@pTm,w,c
  5154  0016E0  26D9               	addwf	fsr2l,f,c
  5155  0016E2  5002               	movf	RtccWriteTime@pTm+1,w,c
  5156  0016E4  22DA               	addwfc	fsr2h,f,c
  5157  0016E6  0E5A               	movlw	90
  5158  0016E8  60DF               	cpfslt	indf2,c
  5159  0016EA  0012               	return	
  5160  0016EC  EE20 F001          	lfsr	2,1
  5161  0016F0  5001               	movf	RtccWriteTime@pTm,w,c
  5162  0016F2  26D9               	addwf	fsr2l,f,c
  5163  0016F4  5002               	movf	RtccWriteTime@pTm+1,w,c
  5164  0016F6  22DA               	addwfc	fsr2h,f,c
  5165  0016F8  0E5A               	movlw	90
  5166  0016FA  60DF               	cpfslt	indf2,c
  5167  0016FC  0012               	return	
  5168  0016FE  EE20 F003          	lfsr	2,3
  5169  001702  5001               	movf	RtccWriteTime@pTm,w,c
  5170  001704  26D9               	addwf	fsr2l,f,c
  5171  001706  5002               	movf	RtccWriteTime@pTm+1,w,c
  5172  001708  22DA               	addwfc	fsr2h,f,c
  5173  00170A  0E24               	movlw	36
  5174  00170C  64DF               	cpfsgt	indf2,c
  5175  00170E  D002               	goto	l2193
  5176  001710  0012               	return	
  5177                           
  5178                           ;	Return value of _RtccWriteTime is never used
  5179  001712  0012               	return	
  5180  001714                     l2193:
  5181  001714  EE20 F002          	lfsr	2,2
  5182  001718  5001               	movf	RtccWriteTime@pTm,w,c
  5183  00171A  26D9               	addwf	fsr2l,f,c
  5184  00171C  5002               	movf	RtccWriteTime@pTm+1,w,c
  5185  00171E  22DA               	addwfc	fsr2h,f,c
  5186  001720  50DF               	movf	indf2,w,c
  5187  001722  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  5188  001724  EE20 F001          	lfsr	2,1
  5189  001728  5001               	movf	RtccWriteTime@pTm,w,c
  5190  00172A  26D9               	addwf	fsr2l,f,c
  5191  00172C  5002               	movf	RtccWriteTime@pTm+1,w,c
  5192  00172E  22DA               	addwfc	fsr2h,f,c
  5193  001730  50DF               	movf	indf2,w,c
  5194  001732  6E08               	movwf	RtccWriteTime@tempMinSec,c
  5195  001734  5003               	movf	RtccWriteTime@di,w,c
  5196  001736  B4D8               	btfsc	status,2,c
  5197  001738  D002               	goto	l2199
  5198  00173A  9CF2               	bcf	intcon,6,c	;volatile
  5199  00173C  D000               	goto	l2199
  5200  00173E                     l2199:
  5201  00173E  0E00               	movlw	0
  5202  001740  BB3F               	btfsc	63,5,b	;volatile
  5203  001742  0E01               	movlw	1
  5204  001744  6E07               	movwf	RtccWriteTime@wasWrEn,c
  5205  001746  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5206  001748  A4D8               	btfss	status,2,c
  5207  00174A  D003               	goto	l2203
  5208  00174C  EC0C  F011         	call	_RtccWrOn	;wreg free
  5209  001750  D000               	goto	l2203
  5210  001752                     l2203:
  5211  001752  0E00               	movlw	0
  5212  001754  BF3F               	btfsc	63,7,b	;volatile
  5213  001756  0E01               	movlw	1
  5214  001758  6E05               	movwf	RtccWriteTime@wasOn,c
  5215  00175A  5005               	movf	RtccWriteTime@wasOn,w,c
  5216  00175C  B4D8               	btfsc	status,2,c
  5217  00175E  D007               	goto	l2209
  5218  001760  0E00               	movlw	0
  5219  001762  BE91               	btfsc	3985,7,c	;volatile
  5220  001764  0E01               	movlw	1
  5221  001766  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5222  001768  010F               	movlb	15	; () banked
  5223  00176A  9F3F               	bcf	63,7,b	;volatile
  5224  00176C  D000               	goto	l2209
  5225  00176E                     l2209:
  5226  00176E  0EFC               	movlw	252
  5227  001770  010F               	movlb	15	; () banked
  5228  001772  173F               	andwf	63,f,b	;volatile
  5229  001774  010F               	movlb	15	; () banked
  5230  001776  813F               	bsf	63,0,b	;volatile
  5231                           
  5232                           ; BSR set to: 15
  5233  001778  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  5234                           
  5235                           ; BSR set to: 15
  5236  00177C  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  5237                           
  5238                           ; BSR set to: 15
  5239  001780  EE20 F003          	lfsr	2,3
  5240  001784  5001               	movf	RtccWriteTime@pTm,w,c
  5241  001786  26D9               	addwf	fsr2l,f,c
  5242  001788  5002               	movf	RtccWriteTime@pTm+1,w,c
  5243  00178A  22DA               	addwfc	fsr2h,f,c
  5244  00178C  50DF               	movf	indf2,w,c
  5245  00178E  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  5246                           
  5247                           ; BSR set to: 15
  5248  001790  0EFC               	movlw	252
  5249  001792  010F               	movlb	15	; () banked
  5250  001794  173F               	andwf	63,f,b	;volatile
  5251                           
  5252                           ; BSR set to: 15
  5253  001796  010F               	movlb	15	; () banked
  5254  001798  813F               	bsf	63,0,b	;volatile
  5255                           
  5256                           ; BSR set to: 15
  5257  00179A  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  5258                           
  5259                           ; BSR set to: 15
  5260  00179E  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  5261                           
  5262                           ; BSR set to: 15
  5263  0017A2  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  5264                           
  5265                           ; BSR set to: 15
  5266  0017A6  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  5267                           
  5268                           ; BSR set to: 15
  5269  0017AA  5005               	movf	RtccWriteTime@wasOn,w,c
  5270  0017AC  B4D8               	btfsc	status,2,c
  5271  0017AE  D00D               	goto	l2241
  5272                           
  5273                           ; BSR set to: 15
  5274  0017B0  010F               	movlb	15	; () banked
  5275  0017B2  8F3F               	bsf	63,7,b	;volatile
  5276                           
  5277                           ; BSR set to: 15
  5278  0017B4  5006               	movf	RtccWriteTime@wasAlrm,w,c
  5279  0017B6  B4D8               	btfsc	status,2,c
  5280  0017B8  D002               	goto	l2237
  5281                           
  5282                           ; BSR set to: 15
  5283  0017BA  8E91               	bsf	3985,7,c	;volatile
  5284  0017BC  D000               	goto	l2237
  5285  0017BE                     l2237:
  5286                           
  5287                           ; BSR set to: 15
  5288  0017BE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5289  0017C0  B4D8               	btfsc	status,2,c
  5290  0017C2  D009               	goto	l2245
  5291                           
  5292                           ; BSR set to: 15
  5293  0017C4  EC0C  F011         	call	_RtccWrOn	;wreg free
  5294  0017C8  D006               	goto	l2245
  5295  0017CA                     l2241:
  5296  0017CA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5297  0017CC  A4D8               	btfss	status,2,c
  5298  0017CE  D003               	goto	l2245
  5299  0017D0  010F               	movlb	15	; () banked
  5300  0017D2  9B3F               	bcf	63,5,b	;volatile
  5301                           
  5302                           ; BSR set to: 15
  5303  0017D4  D000               	goto	l2245
  5304  0017D6                     l2245:
  5305  0017D6  5003               	movf	RtccWriteTime@di,w,c
  5306  0017D8  B4D8               	btfsc	status,2,c
  5307  0017DA  0012               	return	
  5308  0017DC  8CF2               	bsf	intcon,6,c	;volatile
  5309  0017DE  0012               	return	
  5310                           
  5311                           ;	Return value of _RtccWriteTime is never used
  5312  0017E0  0012               	return		;funcret
  5313  0017E2                     __end_of_RtccWriteTime:
  5314                           	opt stack 0
  5315                           tosu	equ	0xFFF
  5316                           tosh	equ	0xFFE
  5317                           tosl	equ	0xFFD
  5318                           pclath	equ	0xFFA
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodh	equ	0xFF4
  5324                           prodl	equ	0xFF3
  5325                           intcon	equ	0xFF2
  5326                           indf0	equ	0xFEF
  5327                           postinc0	equ	0xFEE
  5328                           fsr0h	equ	0xFEA
  5329                           fsr0l	equ	0xFE9
  5330                           wreg	equ	0xFE8
  5331                           postinc1	equ	0xFE6
  5332                           postdec1	equ	0xFE5
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _RtccWriteDate *****************
  5343 ;; Defined at:
  5344 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  pDt             2    0[COMRAM] PTR const struct .
  5347 ;;		 -> RtccDate(4), 
  5348 ;;  di              1    2[COMRAM] enum E7121
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  tempHourWDay    2   11[COMRAM] struct .
  5351 ;;  tempDayMonth    2    9[COMRAM] struct .
  5352 ;;  tempYear        2    6[COMRAM] struct .
  5353 ;;  wasWrEn         1    8[COMRAM] enum E7121
  5354 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5355 ;;  wasOn           1    4[COMRAM] enum E7121
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      enum E7337
  5358 ;; Registers used:
  5359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5365 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5366 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5368 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5369 ;;Total ram usage:       13 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    1
  5372 ;; This function calls:
  5373 ;;		_RtccWrOn
  5374 ;; This function is called by:
  5375 ;;		_Write_RTC
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text31
  5380  00135E                     __ptext31:
  5381                           	opt stack 0
  5382  00135E                     _RtccWriteDate:
  5383                           	opt stack 27
  5384                           
  5385                           ;incstack = 0
  5386  00135E  0E00               	movlw	0
  5387  001360  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5388  001362  EE20 F002          	lfsr	2,2
  5389  001366  5001               	movf	RtccWriteDate@pDt,w,c
  5390  001368  26D9               	addwf	fsr2l,f,c
  5391  00136A  5002               	movf	RtccWriteDate@pDt+1,w,c
  5392  00136C  22DA               	addwfc	fsr2h,f,c
  5393  00136E  0E13               	movlw	19
  5394  001370  60DF               	cpfslt	indf2,c
  5395  001372  0012               	return	
  5396  001374  EE20 F002          	lfsr	2,2
  5397  001378  5001               	movf	RtccWriteDate@pDt,w,c
  5398  00137A  26D9               	addwf	fsr2l,f,c
  5399  00137C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5400  00137E  22DA               	addwfc	fsr2h,f,c
  5401  001380  50DF               	movf	indf2,w,c
  5402  001382  B4D8               	btfsc	status,2,c
  5403  001384  0012               	return	
  5404  001386  EE20 F001          	lfsr	2,1
  5405  00138A  5001               	movf	RtccWriteDate@pDt,w,c
  5406  00138C  26D9               	addwf	fsr2l,f,c
  5407  00138E  5002               	movf	RtccWriteDate@pDt+1,w,c
  5408  001390  22DA               	addwfc	fsr2h,f,c
  5409  001392  0E32               	movlw	50
  5410  001394  60DF               	cpfslt	indf2,c
  5411  001396  0012               	return	
  5412  001398  EE20 F001          	lfsr	2,1
  5413  00139C  5001               	movf	RtccWriteDate@pDt,w,c
  5414  00139E  26D9               	addwf	fsr2l,f,c
  5415  0013A0  5002               	movf	RtccWriteDate@pDt+1,w,c
  5416  0013A2  22DA               	addwfc	fsr2h,f,c
  5417  0013A4  50DF               	movf	indf2,w,c
  5418  0013A6  B4D8               	btfsc	status,2,c
  5419  0013A8  0012               	return	
  5420  0013AA  EE20 F003          	lfsr	2,3
  5421  0013AE  5001               	movf	RtccWriteDate@pDt,w,c
  5422  0013B0  26D9               	addwf	fsr2l,f,c
  5423  0013B2  5002               	movf	RtccWriteDate@pDt+1,w,c
  5424  0013B4  22DA               	addwfc	fsr2h,f,c
  5425  0013B6  0E99               	movlw	153
  5426  0013B8  64DF               	cpfsgt	indf2,c
  5427  0013BA  D002               	goto	l2261
  5428  0013BC  0012               	return	
  5429                           
  5430                           ;	Return value of _RtccWriteDate is never used
  5431  0013BE  0012               	return	
  5432  0013C0                     l2261:
  5433  0013C0  EE20 F003          	lfsr	2,3
  5434  0013C4  5001               	movf	RtccWriteDate@pDt,w,c
  5435  0013C6  26D9               	addwf	fsr2l,f,c
  5436  0013C8  5002               	movf	RtccWriteDate@pDt+1,w,c
  5437  0013CA  22DA               	addwfc	fsr2h,f,c
  5438  0013CC  50DF               	movf	indf2,w,c
  5439  0013CE  6E07               	movwf	RtccWriteDate@tempYear,c
  5440  0013D0  EE20 F001          	lfsr	2,1
  5441  0013D4  5001               	movf	RtccWriteDate@pDt,w,c
  5442  0013D6  26D9               	addwf	fsr2l,f,c
  5443  0013D8  5002               	movf	RtccWriteDate@pDt+1,w,c
  5444  0013DA  22DA               	addwfc	fsr2h,f,c
  5445  0013DC  50DF               	movf	indf2,w,c
  5446  0013DE  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  5447  0013E0  EE20 F002          	lfsr	2,2
  5448  0013E4  5001               	movf	RtccWriteDate@pDt,w,c
  5449  0013E6  26D9               	addwf	fsr2l,f,c
  5450  0013E8  5002               	movf	RtccWriteDate@pDt+1,w,c
  5451  0013EA  22DA               	addwfc	fsr2h,f,c
  5452  0013EC  50DF               	movf	indf2,w,c
  5453  0013EE  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  5454  0013F0  5003               	movf	RtccWriteDate@di,w,c
  5455  0013F2  B4D8               	btfsc	status,2,c
  5456  0013F4  D002               	goto	l2267
  5457  0013F6  9CF2               	bcf	intcon,6,c	;volatile
  5458  0013F8  D000               	goto	l2267
  5459  0013FA                     l2267:
  5460  0013FA  0E00               	movlw	0
  5461  0013FC  BB3F               	btfsc	63,5,b	;volatile
  5462  0013FE  0E01               	movlw	1
  5463  001400  6E09               	movwf	RtccWriteDate@wasWrEn,c
  5464  001402  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5465  001404  A4D8               	btfss	status,2,c
  5466  001406  D003               	goto	l2271
  5467  001408  EC0C  F011         	call	_RtccWrOn	;wreg free
  5468  00140C  D000               	goto	l2271
  5469  00140E                     l2271:
  5470  00140E  0E00               	movlw	0
  5471  001410  BF3F               	btfsc	63,7,b	;volatile
  5472  001412  0E01               	movlw	1
  5473  001414  6E05               	movwf	RtccWriteDate@wasOn,c
  5474  001416  5005               	movf	RtccWriteDate@wasOn,w,c
  5475  001418  B4D8               	btfsc	status,2,c
  5476  00141A  D007               	goto	l2277
  5477  00141C  0E00               	movlw	0
  5478  00141E  BE91               	btfsc	3985,7,c	;volatile
  5479  001420  0E01               	movlw	1
  5480  001422  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5481  001424  010F               	movlb	15	; () banked
  5482  001426  9F3F               	bcf	63,7,b	;volatile
  5483  001428  D000               	goto	l2277
  5484  00142A                     l2277:
  5485  00142A  0EFC               	movlw	252
  5486  00142C  010F               	movlb	15	; () banked
  5487  00142E  173F               	andwf	63,f,b	;volatile
  5488  001430  010F               	movlb	15	; () banked
  5489  001432  813F               	bsf	63,0,b	;volatile
  5490                           
  5491                           ; BSR set to: 15
  5492  001434  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  5493                           
  5494                           ; BSR set to: 15
  5495  001438  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  5496                           
  5497                           ; BSR set to: 15
  5498  00143C  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  5499  001440  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  5500  001444  50DF               	movf	indf2,w,c
  5501  001446  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  5502                           
  5503                           ; BSR set to: 15
  5504  001448  0EFC               	movlw	252
  5505  00144A  010F               	movlb	15	; () banked
  5506  00144C  173F               	andwf	63,f,b	;volatile
  5507                           
  5508                           ; BSR set to: 15
  5509  00144E  0E03               	movlw	3
  5510  001450  010F               	movlb	15	; () banked
  5511  001452  133F               	iorwf	63,f,b	;volatile
  5512                           
  5513                           ; BSR set to: 15
  5514  001454  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  5515                           
  5516                           ; BSR set to: 15
  5517  001458  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  5518                           
  5519                           ; BSR set to: 15
  5520  00145C  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  5521                           
  5522                           ; BSR set to: 15
  5523  001460  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  5524                           
  5525                           ; BSR set to: 15
  5526  001464  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  5527                           
  5528                           ; BSR set to: 15
  5529  001468  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  5530                           
  5531                           ; BSR set to: 15
  5532  00146C  5005               	movf	RtccWriteDate@wasOn,w,c
  5533  00146E  B4D8               	btfsc	status,2,c
  5534  001470  D00D               	goto	l2313
  5535                           
  5536                           ; BSR set to: 15
  5537  001472  010F               	movlb	15	; () banked
  5538  001474  8F3F               	bsf	63,7,b	;volatile
  5539                           
  5540                           ; BSR set to: 15
  5541  001476  5006               	movf	RtccWriteDate@wasAlrm,w,c
  5542  001478  B4D8               	btfsc	status,2,c
  5543  00147A  D002               	goto	l2309
  5544                           
  5545                           ; BSR set to: 15
  5546  00147C  8E91               	bsf	3985,7,c	;volatile
  5547  00147E  D000               	goto	l2309
  5548  001480                     l2309:
  5549                           
  5550                           ; BSR set to: 15
  5551  001480  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5552  001482  B4D8               	btfsc	status,2,c
  5553  001484  D009               	goto	l2317
  5554                           
  5555                           ; BSR set to: 15
  5556  001486  EC0C  F011         	call	_RtccWrOn	;wreg free
  5557  00148A  D006               	goto	l2317
  5558  00148C                     l2313:
  5559  00148C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5560  00148E  A4D8               	btfss	status,2,c
  5561  001490  D003               	goto	l2317
  5562  001492  010F               	movlb	15	; () banked
  5563  001494  9B3F               	bcf	63,5,b	;volatile
  5564                           
  5565                           ; BSR set to: 15
  5566  001496  D000               	goto	l2317
  5567  001498                     l2317:
  5568  001498  5003               	movf	RtccWriteDate@di,w,c
  5569  00149A  B4D8               	btfsc	status,2,c
  5570  00149C  0012               	return	
  5571  00149E  9CF2               	bcf	intcon,6,c	;volatile
  5572  0014A0  0012               	return	
  5573                           
  5574                           ;	Return value of _RtccWriteDate is never used
  5575  0014A2  0012               	return		;funcret
  5576  0014A4                     __end_of_RtccWriteDate:
  5577                           	opt stack 0
  5578                           tosu	equ	0xFFF
  5579                           tosh	equ	0xFFE
  5580                           tosl	equ	0xFFD
  5581                           pclath	equ	0xFFA
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           indf0	equ	0xFEF
  5590                           postinc0	equ	0xFEE
  5591                           fsr0h	equ	0xFEA
  5592                           fsr0l	equ	0xFE9
  5593                           wreg	equ	0xFE8
  5594                           postinc1	equ	0xFE6
  5595                           postdec1	equ	0xFE5
  5596                           fsr1h	equ	0xFE2
  5597                           fsr1l	equ	0xFE1
  5598                           indf2	equ	0xFDF
  5599                           postinc2	equ	0xFDE
  5600                           postdec2	equ	0xFDD
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _RtccWrOn *****************
  5606 ;; Defined at:
  5607 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  data            2    0        unsigned int 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5625 ;;Total ram usage:        0 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_Write_RTC
  5631 ;;		_RtccWriteDate
  5632 ;;		_RtccWriteTime
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text32
  5637  002218                     __ptext32:
  5638                           	opt stack 0
  5639  002218                     _RtccWrOn:
  5640                           	opt stack 27
  5641                           
  5642                           ;incstack = 0
  5643  002218  9CF2               	bcf	intcon,6,c	;volatile
  5644  00221A  0E55               	movlw	85
  5645  00221C  6EA7               	movwf	4007,c	;volatile
  5646  00221E  0EAA               	movlw	170
  5647  002220  6EA7               	movwf	4007,c	;volatile
  5648  002222  010F               	movlb	15	; () banked
  5649  002224  8B3F               	bsf	63,5,b	;volatile
  5650                           
  5651                           ; BSR set to: 15
  5652  002226  8CF2               	bsf	intcon,6,c	;volatile
  5653                           
  5654                           ; BSR set to: 15
  5655  002228  0012               	return		;funcret
  5656  00222A                     __end_of_RtccWrOn:
  5657                           	opt stack 0
  5658                           tosu	equ	0xFFF
  5659                           tosh	equ	0xFFE
  5660                           tosl	equ	0xFFD
  5661                           pclath	equ	0xFFA
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           indf0	equ	0xFEF
  5670                           postinc0	equ	0xFEE
  5671                           fsr0h	equ	0xFEA
  5672                           fsr0l	equ	0xFE9
  5673                           wreg	equ	0xFE8
  5674                           postinc1	equ	0xFE6
  5675                           postdec1	equ	0xFE5
  5676                           fsr1h	equ	0xFE2
  5677                           fsr1l	equ	0xFE1
  5678                           indf2	equ	0xFDF
  5679                           postinc2	equ	0xFDE
  5680                           postdec2	equ	0xFDD
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function _Read_RTC *****************
  5686 ;; Defined at:
  5687 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    1
  5708 ;; This function calls:
  5709 ;;		_RtccReadDate
  5710 ;;		_RtccReadTime
  5711 ;; This function is called by:
  5712 ;;		_main
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text33
  5717  0015C2                     __ptext33:
  5718                           	opt stack 0
  5719  0015C2                     _Read_RTC:
  5720                           	opt stack 29
  5721                           
  5722                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  5723                           
  5724                           ; BSR set to: 15
  5725                           ;incstack = 0
  5726  0015C2  0E4D               	movlw	low _RtccTime
  5727  0015C4  6E01               	movwf	RtccReadTime@pTm,c
  5728  0015C6  0E00               	movlw	high _RtccTime
  5729  0015C8  6E02               	movwf	RtccReadTime@pTm+1,c
  5730  0015CA  EC8A  F00E         	call	_RtccReadTime	;wreg free
  5731                           
  5732                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  5733  0015CE  504E               	movf	_RtccTime+1,w,c
  5734  0015D0  0B0F               	andlw	15
  5735  0015D2  0100               	movlb	0	; () banked
  5736  0015D4  6FC1               	movwf	_segundo_u& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  5740  0015D6  384E               	swapf	_RtccTime+1,w,c
  5741  0015D8  0B0F               	andlw	15
  5742  0015DA  0B0F               	andlw	15
  5743  0015DC  0100               	movlb	0	; () banked
  5744  0015DE  6FC0               	movwf	_segundo_d& (0+255),b
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  5748  0015E0  504F               	movf	_RtccTime+2,w,c
  5749  0015E2  0B0F               	andlw	15
  5750  0015E4  0100               	movlb	0	; () banked
  5751  0015E6  6FBF               	movwf	_minuto_u& (0+255),b
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  5755  0015E8  384F               	swapf	_RtccTime+2,w,c
  5756  0015EA  0B0F               	andlw	15
  5757  0015EC  0B0F               	andlw	15
  5758  0015EE  0100               	movlb	0	; () banked
  5759  0015F0  6FBE               	movwf	_minuto_d& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  5763  0015F2  5050               	movf	_RtccTime+3,w,c
  5764  0015F4  0B0F               	andlw	15
  5765  0015F6  0100               	movlb	0	; () banked
  5766  0015F8  6FBB               	movwf	_hora_u& (0+255),b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  5770  0015FA  3850               	swapf	_RtccTime+3,w,c
  5771  0015FC  0B0F               	andlw	15
  5772  0015FE  0B0F               	andlw	15
  5773  001600  0100               	movlb	0	; () banked
  5774  001602  6FBA               	movwf	_hora_d& (0+255),b
  5775                           
  5776                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  5777  001604  0E49               	movlw	low _RtccDate
  5778  001606  6E01               	movwf	RtccReadDate@pDt,c
  5779  001608  0E00               	movlw	high _RtccDate
  5780  00160A  6E02               	movwf	RtccReadDate@pDt+1,c
  5781  00160C  ECC8  F00D         	call	_RtccReadDate	;wreg free
  5782                           
  5783                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  5784  001610  504A               	movf	_RtccDate+1,w,c
  5785  001612  0B0F               	andlw	15
  5786  001614  0100               	movlb	0	; () banked
  5787  001616  6FB9               	movwf	_fecha_u& (0+255),b
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  5791  001618  384A               	swapf	_RtccDate+1,w,c
  5792  00161A  0B0F               	andlw	15
  5793  00161C  0B0F               	andlw	15
  5794  00161E  0100               	movlb	0	; () banked
  5795  001620  6FB8               	movwf	_fecha_d& (0+255),b
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  5799  001622  504B               	movf	_RtccDate+2,w,c
  5800  001624  0B0F               	andlw	15
  5801  001626  0100               	movlb	0	; () banked
  5802  001628  6FBD               	movwf	_mes_u& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  5806  00162A  384B               	swapf	_RtccDate+2,w,c
  5807  00162C  0B0F               	andlw	15
  5808  00162E  0B0F               	andlw	15
  5809  001630  0100               	movlb	0	; () banked
  5810  001632  6FBC               	movwf	_mes_d& (0+255),b
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  5814  001634  C049  F0B7         	movff	_RtccDate,_dia_semana
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  5818  001638  504C               	movf	_RtccDate+3,w,c
  5819  00163A  0B0F               	andlw	15
  5820  00163C  0100               	movlb	0	; () banked
  5821  00163E  6FB6               	movwf	_anio_u& (0+255),b
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  5825  001640  384C               	swapf	_RtccDate+3,w,c
  5826  001642  0B0F               	andlw	15
  5827  001644  0B0F               	andlw	15
  5828  001646  0100               	movlb	0	; () banked
  5829  001648  6FB5               	movwf	_anio_d& (0+255),b
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  5833  00164A  0100               	movlb	0	; () banked
  5834  00164C  51C0               	movf	_segundo_d& (0+255),w,b
  5835  00164E  0D0A               	mullw	10
  5836  001650  0100               	movlb	0	; () banked
  5837  001652  51C1               	movf	_segundo_u& (0+255),w,b
  5838  001654  24F3               	addwf	prodl,w,c
  5839  001656  6E42               	movwf	_segundo,c
  5840  001658  0100               	movlb	0	; () banked
  5841  00165A  0E00               	movlw	0
  5842  00165C  20F4               	addwfc	prodh,w,c
  5843  00165E  6E43               	movwf	_segundo+1,c
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  5847  001660  0100               	movlb	0	; () banked
  5848  001662  51BE               	movf	_minuto_d& (0+255),w,b
  5849  001664  0D0A               	mullw	10
  5850  001666  0100               	movlb	0	; () banked
  5851  001668  51BF               	movf	_minuto_u& (0+255),w,b
  5852  00166A  24F3               	addwf	prodl,w,c
  5853  00166C  6E5B               	movwf	_minuto,c
  5854  00166E  0100               	movlb	0	; () banked
  5855  001670  0E00               	movlw	0
  5856  001672  20F4               	addwfc	prodh,w,c
  5857  001674  6E5C               	movwf	_minuto+1,c
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  5861  001676  0100               	movlb	0	; () banked
  5862  001678  51BA               	movf	_hora_d& (0+255),w,b
  5863  00167A  0D0A               	mullw	10
  5864  00167C  0100               	movlb	0	; () banked
  5865  00167E  51BB               	movf	_hora_u& (0+255),w,b
  5866  001680  24F3               	addwf	prodl,w,c
  5867  001682  6E57               	movwf	_hora,c
  5868  001684  0100               	movlb	0	; () banked
  5869  001686  0E00               	movlw	0
  5870  001688  20F4               	addwfc	prodh,w,c
  5871  00168A  6E58               	movwf	_hora+1,c
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  5875  00168C  0100               	movlb	0	; () banked
  5876  00168E  51B8               	movf	_fecha_d& (0+255),w,b
  5877  001690  0D0A               	mullw	10
  5878  001692  0100               	movlb	0	; () banked
  5879  001694  51B9               	movf	_fecha_u& (0+255),w,b
  5880  001696  24F3               	addwf	prodl,w,c
  5881  001698  6E53               	movwf	_dia,c
  5882  00169A  0100               	movlb	0	; () banked
  5883  00169C  0E00               	movlw	0
  5884  00169E  20F4               	addwfc	prodh,w,c
  5885  0016A0  6E54               	movwf	_dia+1,c
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  5889  0016A2  C0B7  F055         	movff	_dia_semana,_diasem
  5890  0016A6  6A56               	clrf	_diasem+1,c
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  5894  0016A8  0100               	movlb	0	; () banked
  5895  0016AA  51BC               	movf	_mes_d& (0+255),w,b
  5896  0016AC  0D0A               	mullw	10
  5897  0016AE  0100               	movlb	0	; () banked
  5898  0016B0  51BD               	movf	_mes_u& (0+255),w,b
  5899  0016B2  24F3               	addwf	prodl,w,c
  5900  0016B4  6E59               	movwf	_mes,c
  5901  0016B6  0100               	movlb	0	; () banked
  5902  0016B8  0E00               	movlw	0
  5903  0016BA  20F4               	addwfc	prodh,w,c
  5904  0016BC  6E5A               	movwf	_mes+1,c
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  5908  0016BE  0100               	movlb	0	; () banked
  5909  0016C0  51B5               	movf	_anio_d& (0+255),w,b
  5910  0016C2  0D0A               	mullw	10
  5911  0016C4  0100               	movlb	0	; () banked
  5912  0016C6  51B6               	movf	_anio_u& (0+255),w,b
  5913  0016C8  24F3               	addwf	prodl,w,c
  5914  0016CA  6E51               	movwf	_anio,c
  5915  0016CC  0100               	movlb	0	; () banked
  5916  0016CE  0E00               	movlw	0
  5917  0016D0  20F4               	addwfc	prodh,w,c
  5918  0016D2  6E52               	movwf	_anio+1,c
  5919                           
  5920                           ; BSR set to: 0
  5921  0016D4  0012               	return		;funcret
  5922  0016D6                     __end_of_Read_RTC:
  5923                           	opt stack 0
  5924                           tosu	equ	0xFFF
  5925                           tosh	equ	0xFFE
  5926                           tosl	equ	0xFFD
  5927                           pclath	equ	0xFFA
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           intcon	equ	0xFF2
  5935                           indf0	equ	0xFEF
  5936                           postinc0	equ	0xFEE
  5937                           fsr0h	equ	0xFEA
  5938                           fsr0l	equ	0xFE9
  5939                           wreg	equ	0xFE8
  5940                           postinc1	equ	0xFE6
  5941                           postdec1	equ	0xFE5
  5942                           fsr1h	equ	0xFE2
  5943                           fsr1l	equ	0xFE1
  5944                           indf2	equ	0xFDF
  5945                           postinc2	equ	0xFDE
  5946                           postdec2	equ	0xFDD
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _RtccReadTime *****************
  5952 ;; Defined at:
  5953 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  pTm             2    0[COMRAM] PTR struct .
  5956 ;;		 -> RtccTime(4), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  rTD0            8   10[COMRAM] struct .
  5959 ;;  rTD1            8    2[COMRAM] struct .
  5960 ;; Return value:  Size  Location     Type
  5961 ;;		None               void
  5962 ;; Registers used:
  5963 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5970 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5972 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5973 ;;Total ram usage:       18 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_Read_RTC
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           	psect	text34
  5983  001D14                     __ptext34:
  5984                           	opt stack 0
  5985  001D14                     _RtccReadTime:
  5986                           	opt stack 29
  5987  001D14  0EFC               	movlw	252
  5988  001D16  010F               	movlb	15	; () banked
  5989  001D18  173F               	andwf	63,f,b	;volatile
  5990                           
  5991                           ; BSR set to: 15
  5992  001D1A  010F               	movlb	15	; () banked
  5993  001D1C  813F               	bsf	63,0,b	;volatile
  5994                           
  5995                           ; BSR set to: 15
  5996  001D1E  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  5997                           
  5998                           ; BSR set to: 15
  5999  001D22  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  6000                           
  6001                           ; BSR set to: 15
  6002  001D26  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  6003                           
  6004                           ; BSR set to: 15
  6005  001D2A  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  6006                           
  6007                           ; BSR set to: 15
  6008  001D2E  0EFC               	movlw	252
  6009  001D30  010F               	movlb	15	; () banked
  6010  001D32  173F               	andwf	63,f,b	;volatile
  6011  001D34  010F               	movlb	15	; () banked
  6012  001D36  813F               	bsf	63,0,b	;volatile
  6013                           
  6014                           ; BSR set to: 15
  6015  001D38  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  6016                           
  6017                           ; BSR set to: 15
  6018  001D3C  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  6019                           
  6020                           ; BSR set to: 15
  6021  001D40  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  6022                           
  6023                           ; BSR set to: 15
  6024  001D44  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  6025                           
  6026                           ; BSR set to: 15
  6027  001D48  5009               	movf	RtccReadTime@rTD1+6,w,c
  6028  001D4A  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  6029  001D4C  A4D8               	btfss	status,2,c
  6030  001D4E  D7E2               	goto	l2423
  6031                           
  6032                           ; BSR set to: 15
  6033                           
  6034                           ; BSR set to: 15
  6035  001D50  EE20 F003          	lfsr	2,3
  6036  001D54  5001               	movf	RtccReadTime@pTm,w,c
  6037  001D56  26D9               	addwf	fsr2l,f,c
  6038  001D58  5002               	movf	RtccReadTime@pTm+1,w,c
  6039  001D5A  22DA               	addwfc	fsr2h,f,c
  6040  001D5C  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  6041  001D60  EE20 F002          	lfsr	2,2
  6042  001D64  5001               	movf	RtccReadTime@pTm,w,c
  6043  001D66  26D9               	addwf	fsr2l,f,c
  6044  001D68  5002               	movf	RtccReadTime@pTm+1,w,c
  6045  001D6A  22DA               	addwfc	fsr2h,f,c
  6046  001D6C  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  6047  001D70  EE20 F001          	lfsr	2,1
  6048  001D74  5001               	movf	RtccReadTime@pTm,w,c
  6049  001D76  26D9               	addwf	fsr2l,f,c
  6050  001D78  5002               	movf	RtccReadTime@pTm+1,w,c
  6051  001D7A  22DA               	addwfc	fsr2h,f,c
  6052  001D7C  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  6053                           
  6054                           ; BSR set to: 15
  6055  001D80  0012               	return		;funcret
  6056  001D82                     __end_of_RtccReadTime:
  6057                           	opt stack 0
  6058                           tosu	equ	0xFFF
  6059                           tosh	equ	0xFFE
  6060                           tosl	equ	0xFFD
  6061                           pclath	equ	0xFFA
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           indf0	equ	0xFEF
  6070                           postinc0	equ	0xFEE
  6071                           fsr0h	equ	0xFEA
  6072                           fsr0l	equ	0xFE9
  6073                           wreg	equ	0xFE8
  6074                           postinc1	equ	0xFE6
  6075                           postdec1	equ	0xFE5
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _RtccReadDate *****************
  6086 ;; Defined at:
  6087 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  pDt             2    0[COMRAM] PTR struct .
  6090 ;;		 -> RtccDate(4), 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  rTD0            8   10[COMRAM] struct .
  6093 ;;  rTD1            8    2[COMRAM] struct .
  6094 ;; Return value:  Size  Location     Type
  6095 ;;		None               void
  6096 ;; Registers used:
  6097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6104 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6106 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6107 ;;Total ram usage:       18 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_Read_RTC
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text35
  6117  001B90                     __ptext35:
  6118                           	opt stack 0
  6119  001B90                     _RtccReadDate:
  6120                           	opt stack 29
  6121  001B90  0EFC               	movlw	252
  6122  001B92  010F               	movlb	15	; () banked
  6123  001B94  173F               	andwf	63,f,b	;volatile
  6124  001B96  0E03               	movlw	3
  6125  001B98  010F               	movlb	15	; () banked
  6126  001B9A  133F               	iorwf	63,f,b	;volatile
  6127                           
  6128                           ; BSR set to: 15
  6129  001B9C  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  6130                           
  6131                           ; BSR set to: 15
  6132  001BA0  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  6133                           
  6134                           ; BSR set to: 15
  6135  001BA4  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  6136                           
  6137                           ; BSR set to: 15
  6138  001BA8  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  6139                           
  6140                           ; BSR set to: 15
  6141  001BAC  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  6142                           
  6143                           ; BSR set to: 15
  6144  001BB0  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  6145  001BB4  0EFC               	movlw	252
  6146  001BB6  010F               	movlb	15	; () banked
  6147  001BB8  173F               	andwf	63,f,b	;volatile
  6148  001BBA  0E03               	movlw	3
  6149  001BBC  010F               	movlb	15	; () banked
  6150  001BBE  133F               	iorwf	63,f,b	;volatile
  6151                           
  6152                           ; BSR set to: 15
  6153  001BC0  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  6154                           
  6155                           ; BSR set to: 15
  6156  001BC4  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  6157                           
  6158                           ; BSR set to: 15
  6159  001BC8  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  6160                           
  6161                           ; BSR set to: 15
  6162  001BCC  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  6163                           
  6164                           ; BSR set to: 15
  6165  001BD0  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  6166                           
  6167                           ; BSR set to: 15
  6168  001BD4  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  6169  001BD8  5005               	movf	RtccReadDate@rTD1+2,w,c
  6170  001BDA  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  6171  001BDC  A4D8               	btfss	status,2,c
  6172  001BDE  D7D8               	goto	l2449
  6173                           
  6174                           ; BSR set to: 15
  6175                           
  6176                           ; BSR set to: 15
  6177  001BE0  EE20 F001          	lfsr	2,1
  6178  001BE4  5001               	movf	RtccReadDate@pDt,w,c
  6179  001BE6  26D9               	addwf	fsr2l,f,c
  6180  001BE8  5002               	movf	RtccReadDate@pDt+1,w,c
  6181  001BEA  22DA               	addwfc	fsr2h,f,c
  6182  001BEC  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  6183  001BF0  EE20 F002          	lfsr	2,2
  6184  001BF4  5001               	movf	RtccReadDate@pDt,w,c
  6185  001BF6  26D9               	addwf	fsr2l,f,c
  6186  001BF8  5002               	movf	RtccReadDate@pDt+1,w,c
  6187  001BFA  22DA               	addwfc	fsr2h,f,c
  6188  001BFC  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  6189                           
  6190                           ; BSR set to: 15
  6191  001C00  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  6192  001C04  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  6193  001C08  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  6194                           
  6195                           ; BSR set to: 15
  6196  001C0C  EE20 F003          	lfsr	2,3
  6197  001C10  5001               	movf	RtccReadDate@pDt,w,c
  6198  001C12  26D9               	addwf	fsr2l,f,c
  6199  001C14  5002               	movf	RtccReadDate@pDt+1,w,c
  6200  001C16  22DA               	addwfc	fsr2h,f,c
  6201  001C18  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  6202                           
  6203                           ; BSR set to: 15
  6204  001C1C  0012               	return		;funcret
  6205  001C1E                     __end_of_RtccReadDate:
  6206                           	opt stack 0
  6207                           tosu	equ	0xFFF
  6208                           tosh	equ	0xFFE
  6209                           tosl	equ	0xFFD
  6210                           pclath	equ	0xFFA
  6211                           tblptru	equ	0xFF8
  6212                           tblptrh	equ	0xFF7
  6213                           tblptrl	equ	0xFF6
  6214                           tablat	equ	0xFF5
  6215                           prodh	equ	0xFF4
  6216                           prodl	equ	0xFF3
  6217                           intcon	equ	0xFF2
  6218                           indf0	equ	0xFEF
  6219                           postinc0	equ	0xFEE
  6220                           fsr0h	equ	0xFEA
  6221                           fsr0l	equ	0xFE9
  6222                           wreg	equ	0xFE8
  6223                           postinc1	equ	0xFE6
  6224                           postdec1	equ	0xFE5
  6225                           fsr1h	equ	0xFE2
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           tosu	equ	0xFFF
  6234                           tosh	equ	0xFFE
  6235                           tosl	equ	0xFFD
  6236                           pclath	equ	0xFFA
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           indf0	equ	0xFEF
  6245                           postinc0	equ	0xFEE
  6246                           fsr0h	equ	0xFEA
  6247                           fsr0l	equ	0xFE9
  6248                           wreg	equ	0xFE8
  6249                           postinc1	equ	0xFE6
  6250                           postdec1	equ	0xFE5
  6251                           fsr1h	equ	0xFE2
  6252                           fsr1l	equ	0xFE1
  6253                           indf2	equ	0xFDF
  6254                           postinc2	equ	0xFDE
  6255                           postdec2	equ	0xFDD
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260                           	psect	text36
  6261  000000                     __ptext36:
  6262                           	opt stack 0
  6263                           tosu	equ	0xFFF
  6264                           tosh	equ	0xFFE
  6265                           tosl	equ	0xFFD
  6266                           pclath	equ	0xFFA
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           intcon	equ	0xFF2
  6274                           indf0	equ	0xFEF
  6275                           postinc0	equ	0xFEE
  6276                           fsr0h	equ	0xFEA
  6277                           fsr0l	equ	0xFE9
  6278                           wreg	equ	0xFE8
  6279                           postinc1	equ	0xFE6
  6280                           postdec1	equ	0xFE5
  6281                           fsr1h	equ	0xFE2
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290                           	psect	rparam
  6291  0000                     tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           indf0	equ	0xFEF
  6303                           postinc0	equ	0xFEE
  6304                           fsr0h	equ	0xFEA
  6305                           fsr0l	equ	0xFE9
  6306                           wreg	equ	0xFE8
  6307                           postinc1	equ	0xFE6
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    14
    Data        20
    BSS         104
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     61      95
    BANK0           160      0     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[5]), STR_11(CODE[17]), STR_10(CODE[15]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_17(CODE[11]), STR_15(CODE[9]), STR_13(CODE[11]), STR_12(CODE[17]), 
		 -> ingresar_password@clear(COMRAM[16]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> buffer2(BANK0[20]), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 9
		 -> STR_15(CODE[9]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validar(COMRAM[2]), NULL(NULL[0]), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_16(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_caratula
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   47798
                                             55 COMRAM     6     6      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                    _limpiar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     219
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _limpiar_comando                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4   26507
                                             45 COMRAM     7     3      4
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   13412
                                             39 COMRAM     6     0      6
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    7502
                                             36 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                       1     1      0    5136
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    2344
                                             38 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                      3     3      0    2322
                                             35 COMRAM     3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    4959
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                            20    18      2    7207
                                             35 COMRAM    20    18      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2300
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    2814
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    1937
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1269
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _guardar_tecla_presionada
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _limpiar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      68       5       65.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     3D      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C7       6        0.0%
DATA                 0      0      C7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 25 19:19:31 2016

                                _a 0095                                  _b 0097  
                                _c 0099                                  _i 009B  
                                _j 009D                                  _k 009F  
                   ?_lcd_send_byte 0003                       ___awdiv@sign 0006  
              ___wmul@multiplicand 0003                        lcd_comand@d 0005  
                     __CFG_CP0$OFF 000000         ??_mostrar_guardar_password 0025  
                              l202 15A8                                l217 2126  
                              l161 1F02                                l226 1EA4  
                              l154 1E44                                l170 1A86  
                              l171 1A82                                l174 1AAE  
                              l190 154E                                l183 1AF0  
                              l175 1AAA                                l280 2146  
                              l193 1578                                l178 1AD8  
                              l194 1574                                l179 1AD4  
                              l197 1592                                l189 1552  
                              l358 1148                                l198 158E  
                              l279 2144                                _dia 0053  
                              _key 0048                                _mes 0059  
                              tosl 000FFD                                wreg 000FE8  
                  RtccReadDate@pDt 0001                        lcd_gotoxy@x 0006  
                      lcd_gotoxy@y 0005                               l1002 1F56  
                             l1012 2044                               l2021 1F1A  
                             l2005 21EA                               l2101 10BE  
                             l2023 1F24                               l2111 10F0  
                             l2033 1F4A                               l2025 1F2C  
                             l2041 2010                               l2121 111E  
                             l2105 10C2                               l2203 1752  
                             l2043 201A                               l2123 1126  
                             l2115 10FC                               l1325 21F6  
                             l2045 2022                               l2109 10E6  
                             l2061 0F9A                               l2135 11A2  
                             l2063 0FA8                               l2055 0F80  
                             l2313 148C                               l2241 17CA  
                             l2209 176E                               l2145 1F62  
                             l2049 2038                               l2129 114E  
                             l2081 104A                               l2073 0FE6  
                             l2137 11AE                               l2139 11CA  
                             l2067 0FB2                               l2163 1E12  
                             l2171 1FC2                               l2317 1498  
                             l2309 1480                               l2261 13C0  
                             l2245 17D6                               l2237 17BE  
                             l2149 1F8C                               l2093 108E  
                             l2085 1050                               l2069 0FC8  
                             l2501 1E58                               l2181 20F4  
                             l2423 1D14                               l2271 140E  
                             l2351 1B42                               l2343 1B22  
                             l2087 1072                               l2193 1714  
                             l2361 1B68                               l2353 1B4A  
                             l2337 1B10                               l2097 109A  
                             l2505 1E82                               l2177 1FF2  
                             l2267 13FA                               l2523 1C4C  
                             l2507 1E88                               l2277 142A  
                             l2349 1B38                               l2365 1B74  
                             l2509 1E98                               l2199 173E  
                             l2519 1C44                               l2449 1B90  
                             l2369 1B84                               l2537 1C70  
                             l2529 1C5C                               l2705 17EA  
                             l2723 184E                               l2715 1816  
                             l2651 15B0                               l2741 18A4  
                             l2717 1826                               l2709 17FE  
                             l1951 2208                               l2655 18DE  
                             l2665 190A                               l2745 18BC  
                             l2737 1890                               l2593 1EE8  
                             l2659 18F2                               l2595 1EEE  
                             l2589 1EB0                               l2765 19F0  
                             l2757 19CA                               l1991 2076  
                             l1977 21BA                               l1985 2052  
                             l1979 21C0                               l1987 205E  
                             l1995 2082                               l1989 206A  
                             STR_1 0F5F                               STR_2 0F5F  
                             STR_3 0F6A                               STR_4 0F6C  
                             STR_5 0F6E                               STR_6 0F70  
                             STR_7 0F6A                               STR_8 0F68  
                             STR_9 0F72                    _guardar_comando 1DE6  
                             u1210 1CF8                               u1150 1CAA  
                             u1208 1CDE                               u2200 1862  
                             u1170 1CC2                               u1228 1CFA  
                             u1190 1CDC                               u1168 1CAC  
                             u2250 1A04                               u2307 18AA  
                             u1188 1CC4                               u2260 1A06  
                             u2317 21F8                               u1470 1F82  
                             u2327 220A                               u1480 1FAC  
                             u2098 155E                               u1477 1F78  
                             u1487 1FA2                               u2297 15B6  
                             u1908 1A96                               u1938 1AC0  
                             u1878 1A6E                   ?_lcd_send_nibble 0001  
                             _anio 0051                               _flag 02F8  
                             _main 19AC                               _hora 0057  
                      main@validar 003A                               fsr0h 000FEA  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                    __CFG_T1DIG$ON 000000                               prodh 000FF4  
                             prodl 000FF3                               start 0000  
                    __CFG_IESO$OFF 000000                   RtccReadDate@rTD0 000B  
                 RtccReadDate@rTD1 0003                       ___param_bank 000010  
                  RtccReadTime@pTm 0001                        _Delay1KTCYx 21F4  
                    __CFG_PLLDIV$1 000000                              ?_main 0001  
                  __end_of___awdiv 1B90                              STR_10 0F31  
                            STR_11 0F20                              STR_12 0F0F  
                            STR_13 0F4B                              STR_14 0F5F  
                            STR_15 0F56                              STR_16 0F64  
                            STR_17 0F40              __size_of_Delay100TCYx 0012  
                  ___awdiv@divisor 0003                    __end_of___lwdiv 1F60  
                  __end_of___lwmod 204E                   ?_validar_comando 0001  
                  ___awdiv@counter 0005                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                    ?_leer_teclado 002E                     __CFG_FCMEN$OFF 000000  
                            _Setup 209A                     _ocultar_teclas 0040  
                            _datos 0060                    __end_of_dpowers 0F0B  
                            _mes_d 00BC                              _mes_u 00BD  
                  __end_of_isdigit 21F4                              main@i 0038  
                   __pbitbssCOMRAM 02F8                              pclath 000FFA  
                            tablat 000FF5                       lcd_putrs@ptr 0009  
                            status 000FD8                    __end_of_sprintf 11DA  
                validar_password@i 0003            __CFG_DSWDTOSC$INTOSCREF 000000  
                  __initialization 1D82                       _Delay100TCYx 2206  
                     __end_of_main 1A5E                    ??_lcd_send_byte 0004  
                 RtccReadTime@rTD0 000B                   RtccReadTime@rTD1 0003  
                 __end_of_Read_RTC 16D6           _guardar_current_password 20E2  
        __size_of_ingresar_comando 000A                             ??_main 0038  
                    __activetblptr 000002                     ??_leer_teclado 0032  
          __end_of_guardar_comando 1E46                   __end_of_RtccWrOn 222A  
                           ?_Setup 0001                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _EECON2 000FA7  
                           _ANCON0 000F48                             _ANCON1 000F49  
                 ___awdiv@dividend 0001                     __CFG_WDTEN$OFF 000000  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                   __CFG_WPCFG$OFF 000000                   __end_of_caratula 19AC  
                   __CFG_WPDIS$OFF 000000                     __CFG_XINST$OFF 000000  
                 __end_of_lcd_init 1C9E                   __end_of_lcd_putc 209A  
                ?_validar_password 0001                             ___wmul 2186  
                        ??___awdiv 0005                     __CFG_STVREN$ON 000000  
         __size_of_limpiar_comando 000A                             _diasem 0055  
                           _anio_d 00B5                             _anio_u 00B6  
                        ??___lwdiv 0005                          ??___lwmod 000C  
               ??_validar_password 0001                             _hora_d 00BA  
                           _hora_u 00BB                             clear_0 1D88  
                           clear_1 1D96                   ___awdiv@quotient 0007  
                           _minuto 005B   __end_of_mostrar_guardar_password 2186  
            __end_of_RtccWriteDate 14A4              __end_of_RtccWriteTime 17E2  
                 RtccWriteTime@pTm 0001           _guardar_tecla_presionada 1A5E  
                     __pdataCOMRAM 0051                          ??_isdigit 0001  
                 ??_imprimir_tecla 0024                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_sprintf 0017  
                       __accesstop 0060            __end_of__initialization 1DDC  
               __size_of_Write_RTC 0184                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001                      __end_of_Setup 20E2  
                     __pidataBANK0 225A                    __CFG_DSWDTPS$G2 000000  
                 leer_teclado@doit 0030                leer_teclado@ocultar 002E  
                  __CFG_OSC$INTOSC 000000                   ?_guardar_comando 0001  
                          ??_Setup 000E                  lcd_gotoxy@address 0007  
               __size_of_lcd_putrs 0054                       sprintf@width 0021  
                       __pbssBANK0 0060                          ?_Read_RTC 0001  
                  _tamanio_comando 0044                         _dia_semana 00B7  
        RtccWriteTime@tempHourWDay 000A               __end_of_leer_teclado 15C2  
                        ?_RtccWrOn 0001                     lcd_send_byte@n 0003  
                          ?___wmul 0001                      ?_RtccReadDate 0001  
                    ?_RtccReadTime 0001                   _ingresar_comando 2250  
                     ?_Delay1KTCYx 0001                  __end_of_Write_RTC 135E  
                ??_limpiar_comando 0001                         _lcd_comand 2238  
                        ?_caratula 0024                         _lcd_gotoxy 21AE  
                          _RTCVALH 000F99                            _RTCVALL 000F98  
                    caratula@clear 0026                          ?_lcd_init 0001  
                        ?_lcd_putc 0001                         ??_Read_RTC 0013  
__size_of_mostrar_guardar_password 002C          ?_mostrar_guardar_password 0001  
       ??_guardar_current_password 0001                            __Hparam 0000  
                          __Lparam 0000           __size_of_lcd_send_nibble 0076  
                       ??_RtccWrOn 0001               guardar_comando@tecla 0026  
                   ??_RtccReadDate 0003                         _autorizado 003E  
                   ??_RtccReadTime 0003                            ___awdiv 1AFA  
                __end_of_lcd_putrs 1FB4                    __size_of___wmul 0028  
                          ___lwdiv 1F04                            ___lwmod 2002  
                     __psmallconst 0F00                        _RtccTimeVal 008E  
                          __pcinit 1D82                            _fecha_d 00B8  
                          _fecha_u 00B9                            __ramtop 0F00  
    mostrar_guardar_password@tecla 0025                            __ptext0 19AC  
                          __ptext1 1EA6                            __ptext2 2246  
                          __ptext3 14A4                            __ptext4 1A5E  
                          __ptext5 2250                            __ptext6 215A  
                          __ptext7 1FB4                            __ptext8 20E2  
                          __ptext9 1DE6                            _buffer2 00A1  
                          _comando 0092                          _T1CONbits 000FCD  
                          _dpowers 0F01                            _isdigit 21D2  
                       ??_caratula 0026                            _segundo 0042  
                          _sprintf 0F76                         ??_lcd_init 0005  
                       ??_lcd_putc 0008               end_of_initialization 1DDC  
         __size_of_validar_comando 005E               lcd_send_byte@address 0004  
                    __Lmediumconst 0000                            postdec1 000FE5  
                          postdec2 000FDD         ??_guardar_tecla_presionada 002E  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE              __end_of_lcd_send_byte 215A  
                        _PORTAbits 000F80                          _PORTCbits 000F82  
                 __CFG_DSBOREN$OFF 000000                        ?_lcd_comand 0001  
                 __CFG_CPUDIV$OSC1 000000                 ingresar_password@i 001E  
                        _TRISBbits 000F93                        ?_lcd_gotoxy 0005  
        __size_of_validar_password 0060                    _LCD_INIT_STRING 0F0B  
                 validar_comando@i 0008              __size_of_leer_teclado 011E  
                 _current_password 0088                   __CFG_IOL1WAY$OFF 000000  
        RtccWriteDate@tempDayMonth 000A                __CFG_MSSP7B_EN$MSK7 000000  
                    leer_teclado@i 0033                   Delay100TCYx@unit 0001  
                   __end_of___wmul 21AE                      __pidataCOMRAM 222A  
        RtccWriteDate@tempHourWDay 000C                  ??_lcd_send_nibble 0001  
             __size_of_Delay1KTCYx 0012                   __CFG_DSWDTEN$OFF 000000  
              start_initialization 1D82                 main@ocultar_teclas 003C  
                     _leer_teclado 14A4               __end_of_RtccReadDate 1C1E  
             __end_of_RtccReadTime 1D82           __end_of_ingresar_comando 225A  
             RtccWriteTime@wasAlrm 0006               RtccWriteTime@wasWrEn 0007  
 __end_of_guardar_current_password 2128      guardar_current_password@valor 0003  
           __size_of_RtccWriteDate 0146                    RtccWriteDate@di 0003  
           __size_of_RtccWriteTime 010C                  __size_of_Read_RTC 0114  
                ??_validar_comando 0005                __size_of_lcd_comand 000E  
                  _limpiar_comando 2246                __size_of_lcd_gotoxy 0024  
                         ??___wmul 0005                        __pdataBANK0 00C2  
                __size_of_RtccWrOn 0012                    RtccWriteTime@di 0003  
                 __CFG_LPT1OSC$OFF 000000                        _ALRMCFGbits 000F91  
          __end_of_LCD_INIT_STRING 0F0F                        __pbssCOMRAM 003E  
                        _Write_RTC 11DA                       _isdigit$2103 0002  
                __size_of_caratula 00D6                    Delay1KTCYx@unit 0001  
         __size_of_guardar_comando 0060                  __size_of_lcd_init 0080  
                      sprintf@flag 001D                  __size_of_lcd_putc 004C  
                      sprintf@prec 0020            __size_of_imprimir_tecla 004E  
      _visualizar_tecla_presionada 005D                          __pnvBANK0 00B5  
                 _tamanio_password 0046                   ___lwdiv@dividend 0001  
                    ?_Delay100TCYx 0001   __end_of_guardar_tecla_presionada 1AFA  
                         ?___awdiv 0001                           ?___lwdiv 0001  
                         ?___lwmod 0008            RtccWriteTime@tempMinSec 0008  
                        _lcd_putrs 1F60                      _RtccWriteDate 135E  
                      __smallconst 0F00                      _RtccWriteTime 16D6  
                         ?_isdigit 0001               __CFG_RTCOSC$T1OSCREF 000000  
                 _validar_password 1E46                     __size_of_Setup 0048  
                       ?_Write_RTC 0001                   ___lwdiv@quotient 0005  
                         ?_sprintf 000D                          caratula@i 0036  
                _ingresar_password 17E2                   _RtccAlrmTimeDate 0070  
                   ___wmul@product 0005            __end_of_limpiar_comando 2250  
                         _LATAbits 000F89                           _LATBbits 000F8A  
               ?_ingresar_password 0001                           _PIE3bits 000FA3  
                        _segundo_d 00C0                     ??_Delay100TCYx 0001  
                        _segundo_u 00C1                   __CFG_WDTPS$32768 000000  
              ??_ingresar_password 000B                 RtccWriteDate@wasOn 0005  
        guardar_tecla_presionada@i 002A           validar_comando@candidato 0001  
               _Rtcc_read_TimeDate 0080                     ?_RtccWriteDate 0001  
                       ?_lcd_putrs 0009                  ___wmul@multiplier 0001  
                   ?_RtccWriteTime 0001  __size_of_guardar_current_password 0046  
                   caratula@titulo 0024          ?_guardar_current_password 0001  
                        lcd_init@i 0005              __size_of_RtccReadDate 008E  
                     ??_lcd_comand 0005                          lcd_putc@c 0008  
            __size_of_RtccReadTime 006E                imprimir_tecla@tecla 0024  
                     ??_lcd_gotoxy 0006          __end_of_ingresar_password 18D6  
         _mostrar_guardar_password 215A                          copy_data0 1DB0  
                        copy_data1 1DD0                           _Read_RTC 15C2  
                  _lcd_send_nibble 1C9E                           __Hrparam 0000  
                         _RtccDate 0049                           __Lrparam 0000  
                ??_guardar_comando 0024                           _RtccTime 004D  
                         _RtccWrOn 2218                 __end_of_lcd_comand 2246  
               __end_of_lcd_gotoxy 21D2      guardar_tecla_presionada@letra 0028  
                     _RtccReadDate 1B90                   __size_of___awdiv 0096  
                     _RtccReadTime 1D14                   __size_of___lwdiv 005C  
              ingresar_comando@key 0027                   __size_of___lwmod 004C  
                     _RtccTimeDate 0078                         sprintf@val 001E  
                         _caratula 18D6                   __size_of_isdigit 0022  
                  ___lwdiv@divisor 0003                        ??_Write_RTC 000E  
                  ___lwdiv@counter 0007  __size_of_guardar_tecla_presionada 009C  
                         __ptext10 17E2                           __ptext11 1E46  
                         __ptext20 21AE                           __ptext12 18D6  
                         __ptext21 209A                           __ptext13 0F76  
                         __ptext30 16D6                           __ptext22 1C1E  
                         __ptext14 21D2                           __ptext31 135E  
                         __ptext23 21F4                           __ptext15 2186  
                         __ptext32 2218                           __ptext24 2238  
                         __ptext16 2002                           __ptext33 15C2  
                         __ptext25 2128                           __ptext17 1F04  
                         __ptext34 1D14                           __ptext26 1C9E  
                         __ptext18 1F60                           __ptext35 1B90  
                         __ptext27 2206                           __ptext19 204E  
                         __ptext36 0000                           __ptext28 11DA  
                         __ptext29 1AFA          ?_guardar_tecla_presionada 0028  
                  _validar_comando 1EA6                           _lcd_init 1C1E  
                         _lcd_putc 204E                   __size_of_sprintf 0264  
                ?_ingresar_comando 0001             __size_of_lcd_send_byte 0032  
                   _imprimir_tecla 1FB4                      __size_of_main 00B2  
                 ?_limpiar_comando 0001                 ??_ingresar_comando 0027  
                         _minuto_d 00BE                           _minuto_u 00BF  
                         _password 00C2                      ??_Delay1KTCYx 0001  
                  ??_RtccWriteDate 0004                    ??_RtccWriteTime 0004  
                      ??_lcd_putrs 000B                        _OSCTUNEbits 000F9B  
                       _INTCONbits 000FF2                 RtccWriteTime@wasOn 0005  
             __end_of_Delay100TCYx 2218                           isdigit@c 0003  
     guardar_tecla_presionada@doit 002C         __size_of_ingresar_password 00F4  
           __end_of_imprimir_tecla 2002                          sprintf@ap 001B  
          __end_of_lcd_send_nibble 1D14                          sprintf@sp 000D  
                 ___lwmod@dividend 0008                         _OSCCONbits 000FD3  
         __end_of_validar_password 1EA6              RtccWriteDate@tempYear 0007  
                    _lcd_send_byte 2128                         _RTCCFGbits 000F3F  
          __end_of_validar_comando 1F04             validar_comando@validar 0003  
                         sprintf@c 0023                           sprintf@f 000F  
                  ___lwmod@divisor 000A                __end_of_Delay1KTCYx 2206  
                  ___lwmod@counter 000C               RtccWriteDate@wasAlrm 0006  
             RtccWriteDate@wasWrEn 0009             ingresar_password@i_972 001C  
                  ?_imprimir_tecla 0001             ingresar_password@clear 000C  
            lcd_send_nibble@nibble 0002  
