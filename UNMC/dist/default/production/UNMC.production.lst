

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Sep 23 00:55:40 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   100  0000                     
   101                           	psect	idataCOMRAM
   102  00DD8C                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _anio
   106  00DD8C  000F               	dw	15
   107                           
   108                           ;initializer for _mes
   109  00DD8E  0009               	dw	9
   110                           
   111                           	psect	idataBANK0
   112  00DE01                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _password
   116  00DE01  31                 	db	49
   117  00DE02  32                 	db	50
   118  00DE03  33                 	db	51
   119  00DE04  34                 	db	52
   120  00DE05  35                 	db	53
   121  00DE06  36                 	db	54
   122  00DE07  00                 	db	0
   123                           
   124                           ;initializer for _diasem
   125  00DE08  0003               	dw	3
   126                           
   127                           ;initializer for _encendida
   128  00DE0A  0001               	dw	1
   129                           
   130                           ;initializer for _dia
   131  00DE0C  0008               	dw	8
   132                           
   133                           ;initializer for _hora
   134  00DE0E  0012               	dw	18
   135                           
   136                           ;initializer for _minuto
   137  00DE10  001E               	dw	30
   138                           
   139                           	psect	mediumconst
   140  00FEA2                     __pmediumconst:
   141                           	opt stack 0
   142  00FEA2  00                 	db	0
   143  00FEA3                     _dpowers:
   144                           	opt stack 0
   145  00FEA3  0001               	dw	1
   146  00FEA5  000A               	dw	10
   147  00FEA7  0064               	dw	100
   148  00FEA9  03E8               	dw	1000
   149  00FEAB  2710               	dw	10000
   150  00FEAD                     __end_of_dpowers:
   151                           	opt stack 0
   152  00FEAD                     _LCD_INIT_STRING:
   153                           	opt stack 0
   154  00FEAD  28                 	db	40
   155  00FEAE  0C                 	db	12
   156  00FEAF  01                 	db	1
   157  00FEB0  06                 	db	6
   158  00FEB1                     __end_of_LCD_INIT_STRING:
   159                           	opt stack 0
   160  00FEB1                     STR_17:
   161                           
   162                           ; BSR set to: 15
   163  00FEB1  50                 	db	80	;'P'
   164  00FEB2  61                 	db	97	;'a'
   165  00FEB3  73                 	db	115	;'s'
   166  00FEB4  73                 	db	115	;'s'
   167  00FEB5  77                 	db	119	;'w'
   168  00FEB6  6F                 	db	111	;'o'
   169  00FEB7  72                 	db	114	;'r'
   170  00FEB8  64                 	db	100	;'d'
   171  00FEB9  20                 	db	32
   172  00FEBA  61                 	db	97	;'a'
   173  00FEBB  63                 	db	99	;'c'
   174  00FEBC  74                 	db	116	;'t'
   175  00FEBD  75                 	db	117	;'u'
   176  00FEBE  61                 	db	97	;'a'
   177  00FEBF  6C                 	db	108	;'l'
   178  00FEC0  3A                 	db	58	;':'
   179  00FEC1  20                 	db	32
   180  00FEC2  20                 	db	32
   181  00FEC3  20                 	db	32
   182  00FEC4  20                 	db	32
   183  00FEC5  20                 	db	32
   184  00FEC6  20                 	db	32
   185  00FEC7  20                 	db	32
   186  00FEC8  20                 	db	32
   187  00FEC9  20                 	db	32
   188  00FECA  20                 	db	32
   189  00FECB  00                 	db	0
   190  00FECC                     STR_5:
   191                           
   192                           ; BSR set to: 15
   193  00FECC  20                 	db	32
   194  00FECD  20                 	db	32
   195  00FECE  20                 	db	32
   196  00FECF  20                 	db	32
   197  00FED0  20                 	db	32
   198  00FED1  20                 	db	32
   199  00FED2  20                 	db	32
   200  00FED3  20                 	db	32
   201  00FED4  20                 	db	32
   202  00FED5  20                 	db	32
   203  00FED6  20                 	db	32
   204  00FED7  20                 	db	32
   205  00FED8  20                 	db	32
   206  00FED9  20                 	db	32
   207  00FEDA  20                 	db	32
   208  00FEDB  20                 	db	32
   209  00FEDC  20                 	db	32
   210  00FEDD  20                 	db	32
   211  00FEDE  20                 	db	32
   212  00FEDF  20                 	db	32
   213  00FEE0  20                 	db	32
   214  00FEE1  20                 	db	32
   215  00FEE2  20                 	db	32
   216  00FEE3  20                 	db	32
   217  00FEE4  20                 	db	32
   218  00FEE5  00                 	db	0
   219  00FEE6                     STR_19:
   220                           
   221                           ; BSR set to: 15
   222  00FEE6  43                 	db	67	;'C'
   223  00FEE7  6F                 	db	111	;'o'
   224  00FEE8  6E                 	db	110	;'n'
   225  00FEE9  66                 	db	102	;'f'
   226  00FEEA  69                 	db	105	;'i'
   227  00FEEB  72                 	db	114	;'r'
   228  00FEEC  6D                 	db	109	;'m'
   229  00FEED  65                 	db	101	;'e'
   230  00FEEE  20                 	db	32
   231  00FEEF  70                 	db	112	;'p'
   232  00FEF0  61                 	db	97	;'a'
   233  00FEF1  73                 	db	115	;'s'
   234  00FEF2  73                 	db	115	;'s'
   235  00FEF3  3A                 	db	58	;':'
   236  00FEF4  20                 	db	32
   237  00FEF5  20                 	db	32
   238  00FEF6  20                 	db	32
   239  00FEF7  20                 	db	32
   240  00FEF8  20                 	db	32
   241  00FEF9  20                 	db	32
   242  00FEFA  20                 	db	32
   243  00FEFB  20                 	db	32
   244  00FEFC  00                 	db	0
   245  00FEFD                     STR_15:
   246                           
   247                           ; BSR set to: 15
   248  00FEFD  49                 	db	73	;'I'
   249  00FEFE  6E                 	db	110	;'n'
   250  00FEFF  73                 	db	115	;'s'
   251  00FF00  65                 	db	101	;'e'
   252  00FF01  72                 	db	114	;'r'
   253  00FF02  74                 	db	116	;'t'
   254  00FF03  65                 	db	101	;'e'
   255  00FF04  20                 	db	32
   256  00FF05  6D                 	db	109	;'m'
   257  00FF06  69                 	db	105	;'i'
   258  00FF07  6E                 	db	110	;'n'
   259  00FF08  75                 	db	117	;'u'
   260  00FF09  74                 	db	116	;'t'
   261  00FF0A  6F                 	db	111	;'o'
   262  00FF0B  73                 	db	115	;'s'
   263  00FF0C  3A                 	db	58	;':'
   264  00FF0D  20                 	db	32
   265  00FF0E  20                 	db	32
   266  00FF0F  20                 	db	32
   267  00FF10  20                 	db	32
   268  00FF11  20                 	db	32
   269  00FF12  00                 	db	0
   270  00FF13                     STR_18:
   271                           
   272                           ; BSR set to: 15
   273  00FF13  4E                 	db	78	;'N'
   274  00FF14  75                 	db	117	;'u'
   275  00FF15  65                 	db	101	;'e'
   276  00FF16  76                 	db	118	;'v'
   277  00FF17  6F                 	db	111	;'o'
   278  00FF18  20                 	db	32
   279  00FF19  70                 	db	112	;'p'
   280  00FF1A  61                 	db	97	;'a'
   281  00FF1B  73                 	db	115	;'s'
   282  00FF1C  73                 	db	115	;'s'
   283  00FF1D  3A                 	db	58	;':'
   284  00FF1E  20                 	db	32
   285  00FF1F  20                 	db	32
   286  00FF20  20                 	db	32
   287  00FF21  20                 	db	32
   288  00FF22  20                 	db	32
   289  00FF23  20                 	db	32
   290  00FF24  20                 	db	32
   291  00FF25  20                 	db	32
   292  00FF26  00                 	db	0
   293  00FF27                     STR_16:
   294                           
   295                           ; BSR set to: 15
   296  00FF27  49                 	db	73	;'I'
   297  00FF28  6E                 	db	110	;'n'
   298  00FF29  73                 	db	115	;'s'
   299  00FF2A  65                 	db	101	;'e'
   300  00FF2B  72                 	db	114	;'r'
   301  00FF2C  74                 	db	116	;'t'
   302  00FF2D  65                 	db	101	;'e'
   303  00FF2E  20                 	db	32
   304  00FF2F  68                 	db	104	;'h'
   305  00FF30  6F                 	db	111	;'o'
   306  00FF31  72                 	db	114	;'r'
   307  00FF32  61                 	db	97	;'a'
   308  00FF33  3A                 	db	58	;':'
   309  00FF34  20                 	db	32
   310  00FF35  20                 	db	32
   311  00FF36  20                 	db	32
   312  00FF37  20                 	db	32
   313  00FF38  20                 	db	32
   314  00FF39  00                 	db	0
   315  00FF3A                     STR_12:
   316                           
   317                           ; BSR set to: 15
   318  00FF3A  49                 	db	73	;'I'
   319  00FF3B  6E                 	db	110	;'n'
   320  00FF3C  73                 	db	115	;'s'
   321  00FF3D  65                 	db	101	;'e'
   322  00FF3E  72                 	db	114	;'r'
   323  00FF3F  74                 	db	116	;'t'
   324  00FF40  65                 	db	101	;'e'
   325  00FF41  20                 	db	32
   326  00FF42  61                 	db	97	;'a'
   327  00FF43  6E                 	db	110	;'n'
   328  00FF44  69                 	db	105	;'i'
   329  00FF45  6F                 	db	111	;'o'
   330  00FF46  3A                 	db	58	;':'
   331  00FF47  20                 	db	32
   332  00FF48  20                 	db	32
   333  00FF49  20                 	db	32
   334  00FF4A  20                 	db	32
   335  00FF4B  20                 	db	32
   336  00FF4C  00                 	db	0
   337  00FF4D                     STR_29:
   338                           
   339                           ; BSR set to: 15
   340  00FF4D  76                 	db	118	;'v'
   341  00FF4E  61                 	db	97	;'a'
   342  00FF4F  6C                 	db	108	;'l'
   343  00FF50  6F                 	db	111	;'o'
   344  00FF51  72                 	db	114	;'r'
   345  00FF52  20                 	db	32
   346  00FF53  3E                 	db	62	;'>'
   347  00FF54  3D                 	db	61	;'='
   348  00FF55  25                 	db	37
   349  00FF56  64                 	db	100	;'d'
   350  00FF57  20                 	db	32
   351  00FF58  79                 	db	121	;'y'
   352  00FF59  20                 	db	32
   353  00FF5A  3C                 	db	60	;'<'
   354  00FF5B  3D                 	db	61	;'='
   355  00FF5C  25                 	db	37
   356  00FF5D  64                 	db	100	;'d'
   357  00FF5E  00                 	db	0
   358  00FF5F                     STR_14:
   359                           
   360                           ; BSR set to: 15
   361  00FF5F  49                 	db	73	;'I'
   362  00FF60  6E                 	db	110	;'n'
   363  00FF61  73                 	db	115	;'s'
   364  00FF62  65                 	db	101	;'e'
   365  00FF63  72                 	db	114	;'r'
   366  00FF64  74                 	db	116	;'t'
   367  00FF65  65                 	db	101	;'e'
   368  00FF66  20                 	db	32
   369  00FF67  64                 	db	100	;'d'
   370  00FF68  69                 	db	105	;'i'
   371  00FF69  61                 	db	97	;'a'
   372  00FF6A  3A                 	db	58	;':'
   373  00FF6B  20                 	db	32
   374  00FF6C  20                 	db	32
   375  00FF6D  20                 	db	32
   376  00FF6E  20                 	db	32
   377  00FF6F  20                 	db	32
   378  00FF70  00                 	db	0
   379  00FF71                     STR_13:
   380                           
   381                           ; BSR set to: 15
   382  00FF71  49                 	db	73	;'I'
   383  00FF72  6E                 	db	110	;'n'
   384  00FF73  73                 	db	115	;'s'
   385  00FF74  65                 	db	101	;'e'
   386  00FF75  72                 	db	114	;'r'
   387  00FF76  74                 	db	116	;'t'
   388  00FF77  65                 	db	101	;'e'
   389  00FF78  20                 	db	32
   390  00FF79  6D                 	db	109	;'m'
   391  00FF7A  65                 	db	101	;'e'
   392  00FF7B  73                 	db	115	;'s'
   393  00FF7C  3A                 	db	58	;':'
   394  00FF7D  20                 	db	32
   395  00FF7E  20                 	db	32
   396  00FF7F  20                 	db	32
   397  00FF80  20                 	db	32
   398  00FF81  20                 	db	32
   399  00FF82  00                 	db	0
   400  00FF83                     STR_21:
   401                           
   402                           ; BSR set to: 15
   403  00FF83  23                 	db	35
   404  00FF84  23                 	db	35
   405  00FF85  23                 	db	35
   406  00FF86  20                 	db	32
   407  00FF87  41                 	db	65	;'A'
   408  00FF88  43                 	db	67	;'C'
   409  00FF89  54                 	db	84	;'T'
   410  00FF8A  49                 	db	73	;'I'
   411  00FF8B  56                 	db	86	;'V'
   412  00FF8C  41                 	db	65	;'A'
   413  00FF8D  44                 	db	68	;'D'
   414  00FF8E  41                 	db	65	;'A'
   415  00FF8F  20                 	db	32
   416  00FF90  23                 	db	35
   417  00FF91  23                 	db	35
   418  00FF92  23                 	db	35
   419  00FF93  00                 	db	0
   420  00FF94                     STR_20:
   421                           
   422                           ; BSR set to: 15
   423  00FF94  23                 	db	35
   424  00FF95  23                 	db	35
   425  00FF96  23                 	db	35
   426  00FF97  23                 	db	35
   427  00FF98  20                 	db	32
   428  00FF99  41                 	db	65	;'A'
   429  00FF9A  4C                 	db	76	;'L'
   430  00FF9B  41                 	db	65	;'A'
   431  00FF9C  52                 	db	82	;'R'
   432  00FF9D  4D                 	db	77	;'M'
   433  00FF9E  41                 	db	65	;'A'
   434  00FF9F  20                 	db	32
   435  00FFA0  23                 	db	35
   436  00FFA1  23                 	db	35
   437  00FFA2  23                 	db	35
   438  00FFA3  23                 	db	35
   439  00FFA4  00                 	db	0
   440  00FFA5                     STR_6:
   441                           
   442                           ; BSR set to: 15
   443  00FFA5  49                 	db	73	;'I'
   444  00FFA6  6E                 	db	110	;'n'
   445  00FFA7  73                 	db	115	;'s'
   446  00FFA8  65                 	db	101	;'e'
   447  00FFA9  72                 	db	114	;'r'
   448  00FFAA  74                 	db	116	;'t'
   449  00FFAB  65                 	db	101	;'e'
   450  00FFAC  20                 	db	32
   451  00FFAD  70                 	db	112	;'p'
   452  00FFAE  61                 	db	97	;'a'
   453  00FFAF  73                 	db	115	;'s'
   454  00FFB0  73                 	db	115	;'s'
   455  00FFB1  77                 	db	119	;'w'
   456  00FFB2  6F                 	db	111	;'o'
   457  00FFB3  72                 	db	114	;'r'
   458  00FFB4  64                 	db	100	;'d'
   459  00FFB5  00                 	db	0
   460  00FFB6                     STR_1:
   461                           
   462                           ; BSR set to: 15
   463  00FFB6  25                 	db	37
   464  00FFB7  30                 	db	48	;'0'
   465  00FFB8  32                 	db	50	;'2'
   466  00FFB9  75                 	db	117	;'u'
   467  00FFBA  2F                 	db	47
   468  00FFBB  25                 	db	37
   469  00FFBC  30                 	db	48	;'0'
   470  00FFBD  32                 	db	50	;'2'
   471  00FFBE  75                 	db	117	;'u'
   472  00FFBF  2F                 	db	47
   473  00FFC0  25                 	db	37
   474  00FFC1  30                 	db	48	;'0'
   475  00FFC2  32                 	db	50	;'2'
   476  00FFC3  75                 	db	117	;'u'
   477  00FFC4  00                 	db	0
   478  00FFC5                     STR_2:
   479                           
   480                           ; BSR set to: 15
   481  00FFC5  25                 	db	37
   482  00FFC6  30                 	db	48	;'0'
   483  00FFC7  32                 	db	50	;'2'
   484  00FFC8  75                 	db	117	;'u'
   485  00FFC9  3A                 	db	58	;':'
   486  00FFCA  25                 	db	37
   487  00FFCB  30                 	db	48	;'0'
   488  00FFCC  32                 	db	50	;'2'
   489  00FFCD  75                 	db	117	;'u'
   490  00FFCE  3A                 	db	58	;':'
   491  00FFCF  25                 	db	37
   492  00FFD0  30                 	db	48	;'0'
   493  00FFD1  32                 	db	50	;'2'
   494  00FFD2  75                 	db	117	;'u'
   495  00FFD3  00                 	db	0
   496  00FFD4                     STR_7:
   497                           
   498                           ; BSR set to: 15
   499  00FFD4  45                 	db	69	;'E'
   500  00FFD5  52                 	db	82	;'R'
   501  00FFD6  52                 	db	82	;'R'
   502  00FFD7  4F                 	db	79	;'O'
   503  00FFD8  52                 	db	82	;'R'
   504  00FFD9  20                 	db	32
   505  00FFDA  70                 	db	112	;'p'
   506  00FFDB  61                 	db	97	;'a'
   507  00FFDC  73                 	db	115	;'s'
   508  00FFDD  73                 	db	115	;'s'
   509  00FFDE  00                 	db	0
   510  00FFDF                     STR_22:
   511                           
   512                           ; BSR set to: 15
   513  00FFDF  57                 	db	87	;'W'
   514  00FFE0  65                 	db	101	;'e'
   515  00FFE1  6C                 	db	108	;'l'
   516  00FFE2  63                 	db	99	;'c'
   517  00FFE3  6F                 	db	111	;'o'
   518  00FFE4  6D                 	db	109	;'m'
   519  00FFE5  65                 	db	101	;'e'
   520  00FFE6  20                 	db	32
   521  00FFE7  00                 	db	0
   522  00FFE8                     STR_8:
   523                           
   524                           ; BSR set to: 15
   525  00FFE8  25                 	db	37
   526  00FFE9  30                 	db	48	;'0'
   527  00FFEA  31                 	db	49	;'1'
   528  00FFEB  75                 	db	117	;'u'
   529  00FFEC  00                 	db	0
   530  00FFED                     STR_4:
   531                           
   532                           ; BSR set to: 15
   533  00FFED  4F                 	db	79	;'O'
   534  00FFEE  46                 	db	70	;'F'
   535  00FFEF  46                 	db	70	;'F'
   536  00FFF0  00                 	db	0
   537  00FFF1                     STR_3:
   538                           
   539                           ; BSR set to: 15
   540  00FFF1  4F                 	db	79	;'O'
   541  00FFF2  4E                 	db	78	;'N'
   542  00FFF3  00                 	db	0
   543  00FFF4                     STR_25:
   544                           
   545                           ; BSR set to: 15
   546  00FFF4  2A                 	db	42
   547  00FFF5  00                 	db	0
   548  0000                     
   549                           ; #config settings
   550  00FFF6  00                 	db	0	; dummy byte at the end
   551  0000                     
   552                           	psect	nvCOMRAM
   553  00005E                     __pnvCOMRAM:
   554                           	opt stack 0
   555  00005E                     _segundo_d:
   556                           	opt stack 0
   557  00005E                     	ds	1
   558                           
   559                           	psect	nvBANK0
   560  0000F3                     __pnvBANK0:
   561                           	opt stack 0
   562  0000F3                     _anio_d:
   563                           	opt stack 0
   564  0000F3                     	ds	1
   565  0000F4                     _anio_u:
   566                           	opt stack 0
   567  0000F4                     	ds	1
   568  0000F5                     _dia_semana:
   569                           	opt stack 0
   570  0000F5                     	ds	1
   571  0000F6                     _fecha_d:
   572                           	opt stack 0
   573  0000F6                     	ds	1
   574  0000F7                     _fecha_u:
   575                           	opt stack 0
   576  0000F7                     	ds	1
   577  0000F8                     _hora_d:
   578                           	opt stack 0
   579  0000F8                     	ds	1
   580  0000F9                     _hora_u:
   581                           	opt stack 0
   582  0000F9                     	ds	1
   583  0000FA                     _mes_d:
   584                           	opt stack 0
   585  0000FA                     	ds	1
   586  0000FB                     _mes_u:
   587                           	opt stack 0
   588  0000FB                     	ds	1
   589  0000FC                     _minuto_d:
   590                           	opt stack 0
   591  0000FC                     	ds	1
   592  0000FD                     _minuto_u:
   593                           	opt stack 0
   594  0000FD                     	ds	1
   595  0000FE                     _segundo_u:
   596                           	opt stack 0
   597  0000FE                     	ds	1
   598  0000                     _ANCON0	set	3912
   599  0000                     _ANCON1	set	3913
   600  0000                     _RTCCFG	set	3903
   601  0000                     _RTCCFGbits	set	3903
   602  0000                     _ADCON0	set	4034
   603  0000                     _ADCON1	set	4033
   604  0000                     _ALRMCFGbits	set	3985
   605  0000                     _EECON2	set	4007
   606  0000                     _INTCONbits	set	4082
   607  0000                     _LATAbits	set	3977
   608  0000                     _LATBbits	set	3978
   609  0000                     _LATCbits	set	3979
   610  0000                     _OSCCONbits	set	4051
   611  0000                     _OSCTUNEbits	set	3995
   612  0000                     _PIE3bits	set	4003
   613  0000                     _PORTAbits	set	3968
   614  0000                     _PORTCbits	set	3970
   615  0000                     _RTCVALH	set	3993
   616  0000                     _RTCVALL	set	3992
   617  0000                     _T1CONbits	set	4045
   618  0000                     _TRISA	set	3986
   619  0000                     _TRISB	set	3987
   620  0000                     _TRISBbits	set	3987
   621  0000                     _TRISC	set	3988
   622                           
   623                           	psect	cinit
   624  00E5D2                     __pcinit:
   625                           	opt stack 0
   626  00E5D2                     start_initialization:
   627                           	opt stack 0
   628  00E5D2                     __initialization:
   629                           	opt stack 0
   630                           
   631                           ; Clear objects allocated to BANK1 (16 bytes)
   632  00E5D2  EE01  F000         	lfsr	0,__pbssBANK1
   633  00E5D6  0E10               	movlw	16
   634  00E5D8                     clear_0:
   635  00E5D8  6AEE               	clrf	postinc0,c
   636  00E5DA  06E8               	decf	wreg,f,c
   637  00E5DC  E1FD               	bnz	clear_0
   638                           
   639                           ; Clear objects allocated to BANK0 (130 bytes)
   640  00E5DE  EE00  F060         	lfsr	0,__pbssBANK0
   641  00E5E2  0E82               	movlw	130
   642  00E5E4                     clear_1:
   643  00E5E4  6AEE               	clrf	postinc0,c
   644  00E5E6  06E8               	decf	wreg,f,c
   645  00E5E8  E1FD               	bnz	clear_1
   646                           
   647                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   648  00E5EA  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   649                           
   650                           ; Clear objects allocated to COMRAM (21 bytes)
   651  00E5EC  EE00  F045         	lfsr	0,__pbssCOMRAM
   652  00E5F0  0E15               	movlw	21
   653  00E5F2                     clear_2:
   654  00E5F2  6AEE               	clrf	postinc0,c
   655  00E5F4  06E8               	decf	wreg,f,c
   656  00E5F6  E1FD               	bnz	clear_2
   657                           
   658                           ; Initialize objects allocated to BANK0 (17 bytes)
   659                           ; load TBLPTR registers with __pidataBANK0
   660  00E5F8  0E01               	movlw	low __pidataBANK0
   661  00E5FA  6EF6               	movwf	tblptrl,c
   662  00E5FC  0EDE               	movlw	high __pidataBANK0
   663  00E5FE  6EF7               	movwf	tblptrh,c
   664  00E600  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   665  00E602  6EF8               	movwf	tblptru,c
   666  00E604  EE00  F0E2         	lfsr	0,__pdataBANK0
   667  00E608  EE10 F011          	lfsr	1,17
   668  00E60C                     copy_data0:
   669  00E60C  0009               	tblrd		*+
   670  00E60E  CFF5 FFEE          	movff	tablat,postinc0
   671  00E612  50E5               	movf	postdec1,w,c
   672  00E614  50E1               	movf	fsr1l,w,c
   673  00E616  E1FA               	bnz	copy_data0
   674                           
   675                           ; Initialize objects allocated to COMRAM (4 bytes)
   676                           ; load TBLPTR registers with __pidataCOMRAM
   677  00E618  0E8C               	movlw	low __pidataCOMRAM
   678  00E61A  6EF6               	movwf	tblptrl,c
   679  00E61C  0EDD               	movlw	high __pidataCOMRAM
   680  00E61E  6EF7               	movwf	tblptrh,c
   681  00E620  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   682  00E622  6EF8               	movwf	tblptru,c
   683  00E624  EE00  F05A         	lfsr	0,__pdataCOMRAM
   684  00E628  EE10 F004          	lfsr	1,4
   685  00E62C                     copy_data1:
   686  00E62C  0009               	tblrd		*+
   687  00E62E  CFF5 FFEE          	movff	tablat,postinc0
   688  00E632  50E5               	movf	postdec1,w,c
   689  00E634  50E1               	movf	fsr1l,w,c
   690  00E636  E1FA               	bnz	copy_data1
   691  00E638                     end_of_initialization:
   692                           	opt stack 0
   693  00E638                     __end_of__initialization:
   694                           	opt stack 0
   695  00E638  0E00               	movlw	low (__Lmediumconst shr (0+16))
   696  00E63A  6EF8               	movwf	tblptru,c
   697  00E63C  0100               	movlb	0
   698  00E63E  EF4B  F07A         	goto	_main	;jump to C main() function
   699                           tblptru	equ	0xFF8
   700                           tblptrh	equ	0xFF7
   701                           tblptrl	equ	0xFF6
   702                           tablat	equ	0xFF5
   703                           postinc0	equ	0xFEE
   704                           wreg	equ	0xFE8
   705                           postdec1	equ	0xFE5
   706                           fsr1l	equ	0xFE1
   707                           
   708                           	psect	bitbssCOMRAM
   709  0002F8                     __pbitbssCOMRAM:
   710                           	opt stack 0
   711  0002F8                     _flag:
   712                           	opt stack 0
   713  0002F8                     	ds	1
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           fsr1l	equ	0xFE1
   722                           
   723                           	psect	bssCOMRAM
   724  000045                     __pbssCOMRAM:
   725                           	opt stack 0
   726  000045                     _autorizado:
   727                           	opt stack 0
   728  000045                     	ds	2
   729  000047                     _tamanio_comando:
   730                           	opt stack 0
   731  000047                     	ds	2
   732  000049                     _key:
   733                           	opt stack 0
   734  000049                     	ds	1
   735  00004A                     _RtccDate:
   736                           	opt stack 0
   737  00004A                     	ds	4
   738  00004E                     _RtccTime:
   739                           	opt stack 0
   740  00004E                     	ds	4
   741  000052                     _tamanio_dia:
   742                           	opt stack 0
   743  000052                     	ds	2
   744  000054                     _tamanio_hora:
   745                           	opt stack 0
   746  000054                     	ds	2
   747  000056                     _tamanio_mes:
   748                           	opt stack 0
   749  000056                     	ds	2
   750  000058                     _tamanio_password:
   751                           	opt stack 0
   752  000058                     	ds	2
   753                           tblptru	equ	0xFF8
   754                           tblptrh	equ	0xFF7
   755                           tblptrl	equ	0xFF6
   756                           tablat	equ	0xFF5
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           postdec1	equ	0xFE5
   760                           fsr1l	equ	0xFE1
   761                           
   762                           	psect	dataCOMRAM
   763  00005A                     __pdataCOMRAM:
   764                           	opt stack 0
   765  00005A                     _anio:
   766                           	opt stack 0
   767  00005A                     	ds	2
   768  00005C                     _mes:
   769                           	opt stack 0
   770  00005C                     	ds	2
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           postdec1	equ	0xFE5
   778                           fsr1l	equ	0xFE1
   779                           
   780                           	psect	bssBANK0
   781  000060                     __pbssBANK0:
   782                           	opt stack 0
   783  000060                     _RtccTimeDate:
   784                           	opt stack 0
   785  000060                     	ds	8
   786  000068                     _RtccTimeVal:
   787                           	opt stack 0
   788  000068                     	ds	4
   789  00006C                     	ds	3
   790  00006F                     	ds	3
   791  000072                     	ds	3
   792  000075                     	ds	3
   793  000078                     	ds	3
   794  00007B                     _a:
   795                           	opt stack 0
   796  00007B                     	ds	2
   797  00007D                     _activada:
   798                           	opt stack 0
   799  00007D                     	ds	2
   800  00007F                     _b:
   801                           	opt stack 0
   802  00007F                     	ds	2
   803  000081                     _c:
   804                           	opt stack 0
   805  000081                     	ds	2
   806  000083                     _funcion_pulsador_B:
   807                           	opt stack 0
   808  000083                     	ds	2
   809  000085                     _funcion_pulsador_C:
   810                           	opt stack 0
   811  000085                     	ds	2
   812  000087                     _funcion_pulsador_D:
   813                           	opt stack 0
   814  000087                     	ds	2
   815  000089                     _i:
   816                           	opt stack 0
   817  000089                     	ds	2
   818  00008B                     _intentos:
   819                           	opt stack 0
   820  00008B                     	ds	2
   821  00008D                     _intentos_fallidos:
   822                           	opt stack 0
   823  00008D                     	ds	2
   824  00008F                     _j:
   825                           	opt stack 0
   826  00008F                     	ds	2
   827  000091                     _k:
   828                           	opt stack 0
   829  000091                     	ds	2
   830  000093                     _ocultar_teclas:
   831                           	opt stack 0
   832  000093                     	ds	2
   833  000095                     _puntero_funcion:
   834                           	opt stack 0
   835  000095                     	ds	2
   836  000097                     _segundo:
   837                           	opt stack 0
   838  000097                     	ds	2
   839  000099                     	ds	2
   840  00009B                     	ds	2
   841  00009D                     fecha@valor_max:
   842                           	opt stack 0
   843  00009D                     	ds	2
   844  00009F                     fecha@valor_min:
   845                           	opt stack 0
   846  00009F                     	ds	2
   847  0000A1                     _buffer2:
   848                           	opt stack 0
   849  0000A1                     	ds	20
   850  0000B5                     _current_password:
   851                           	opt stack 0
   852  0000B5                     	ds	7
   853  0000BC                     _new_password:
   854                           	opt stack 0
   855  0000BC                     	ds	7
   856  0000C3                     _temporal:
   857                           	opt stack 0
   858  0000C3                     	ds	7
   859  0000CA                     _comando:
   860                           	opt stack 0
   861  0000CA                     	ds	3
   862  0000CD                     fecha@day:
   863                           	opt stack 0
   864  0000CD                     	ds	3
   865  0000D0                     fecha@hour:
   866                           	opt stack 0
   867  0000D0                     	ds	3
   868  0000D3                     fecha@minutes:
   869                           	opt stack 0
   870  0000D3                     	ds	3
   871  0000D6                     fecha@month:
   872                           	opt stack 0
   873  0000D6                     	ds	3
   874  0000D9                     fecha@year:
   875                           	opt stack 0
   876  0000D9                     	ds	3
   877  0000DC                     _tamanio_anio:
   878                           	opt stack 0
   879  0000DC                     	ds	2
   880  0000DE                     _tamanio_minutos:
   881                           	opt stack 0
   882  0000DE                     	ds	2
   883  0000E0                     _tamanio_new_password:
   884                           	opt stack 0
   885  0000E0                     	ds	2
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           postinc0	equ	0xFEE
   891                           wreg	equ	0xFE8
   892                           postdec1	equ	0xFE5
   893                           fsr1l	equ	0xFE1
   894                           
   895                           	psect	dataBANK0
   896  0000E2                     __pdataBANK0:
   897                           	opt stack 0
   898  0000E2                     _password:
   899                           	opt stack 0
   900  0000E2                     	ds	7
   901  0000E9                     _diasem:
   902                           	opt stack 0
   903  0000E9                     	ds	2
   904  0000EB                     _encendida:
   905                           	opt stack 0
   906  0000EB                     	ds	2
   907  0000ED                     _dia:
   908                           	opt stack 0
   909  0000ED                     	ds	2
   910  0000EF                     _hora:
   911                           	opt stack 0
   912  0000EF                     	ds	2
   913  0000F1                     _minuto:
   914                           	opt stack 0
   915  0000F1                     	ds	2
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	bssBANK1
   926  000100                     __pbssBANK1:
   927                           	opt stack 0
   928  000100                     _RtccAlrmTimeDate:
   929                           	opt stack 0
   930  000100                     	ds	8
   931  000108                     _Rtcc_read_TimeDate:
   932                           	opt stack 0
   933  000108                     	ds	8
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	cstackCOMRAM
   944  000001                     __pcstackCOMRAM:
   945                           	opt stack 0
   946  000001                     ??_isdigit:
   947  000001                     ??_lcd_send_nibble:
   948  000001                     ?___wmul:
   949                           	opt stack 0
   950  000001                     ?___awdiv:
   951                           	opt stack 0
   952  000001                     ?___awmod:
   953                           	opt stack 0
   954  000001                     ?___lwdiv:
   955                           	opt stack 0
   956  000001                     Delay100TCYx@unit:
   957                           	opt stack 0
   958  000001                     Delay1KTCYx@unit:
   959                           	opt stack 0
   960  000001                     guardar_elemento_arreglo@arreglo:
   961                           	opt stack 0
   962  000001                     verficar_password@verifica:
   963                           	opt stack 0
   964  000001                     RtccReadDate@pDt:
   965                           	opt stack 0
   966  000001                     RtccReadTime@pTm:
   967                           	opt stack 0
   968  000001                     RtccWriteDate@pDt:
   969                           	opt stack 0
   970  000001                     RtccWriteTime@pTm:
   971                           	opt stack 0
   972  000001                     ___wmul@multiplier:
   973                           	opt stack 0
   974  000001                     ___awdiv@dividend:
   975                           	opt stack 0
   976  000001                     ___awmod@dividend:
   977                           	opt stack 0
   978  000001                     ___lwdiv@dividend:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x0
   982  000001                     	ds	1
   983  000002                     lcd_send_nibble@nibble:
   984                           	opt stack 0
   985  000002                     _isdigit$2710:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1
   989  000002                     	ds	1
   990  000003                     lcd_send_byte@n:
   991                           	opt stack 0
   992  000003                     guardar_elemento_arreglo@valor:
   993                           	opt stack 0
   994  000003                     RtccWriteDate@di:
   995                           	opt stack 0
   996  000003                     RtccWriteTime@di:
   997                           	opt stack 0
   998  000003                     isdigit@c:
   999                           	opt stack 0
  1000  000003                     validar_password@i:
  1001                           	opt stack 0
  1002  000003                     ___wmul@multiplicand:
  1003                           	opt stack 0
  1004  000003                     ___awdiv@divisor:
  1005                           	opt stack 0
  1006  000003                     ___awmod@divisor:
  1007                           	opt stack 0
  1008  000003                     ___lwdiv@divisor:
  1009                           	opt stack 0
  1010  000003                     RtccReadDate@rTD1:
  1011                           	opt stack 0
  1012  000003                     RtccReadTime@rTD1:
  1013                           	opt stack 0
  1014                           
  1015                           ; 8 bytes @ 0x2
  1016  000003                     	ds	1
  1017  000004                     lcd_send_byte@address:
  1018                           	opt stack 0
  1019  000004                     guardar_elemento_arreglo@tamanio:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x3
  1023  000004                     	ds	1
  1024  000005                     lcd_init@i:
  1025                           	opt stack 0
  1026  000005                     lcd_gotoxy@y:
  1027                           	opt stack 0
  1028  000005                     lcd_comand@d:
  1029                           	opt stack 0
  1030  000005                     RtccWriteDate@wasOn:
  1031                           	opt stack 0
  1032  000005                     RtccWriteTime@wasOn:
  1033                           	opt stack 0
  1034  000005                     ___awdiv@counter:
  1035                           	opt stack 0
  1036  000005                     ___awmod@counter:
  1037                           	opt stack 0
  1038  000005                     verficar_password@i:
  1039                           	opt stack 0
  1040  000005                     ___wmul@product:
  1041                           	opt stack 0
  1042  000005                     ___lwdiv@quotient:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x4
  1046  000005                     	ds	1
  1047  000006                     ??_guardar_elemento_arreglo:
  1048  000006                     lcd_gotoxy@x:
  1049                           	opt stack 0
  1050  000006                     RtccWriteDate@wasAlrm:
  1051                           	opt stack 0
  1052  000006                     RtccWriteTime@wasAlrm:
  1053                           	opt stack 0
  1054  000006                     ___awdiv@sign:
  1055                           	opt stack 0
  1056  000006                     ___awmod@sign:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x5
  1060  000006                     	ds	1
  1061  000007                     ??_obtener_dia_mes:
  1062  000007                     ?_atoi:
  1063                           	opt stack 0
  1064  000007                     lcd_gotoxy@address:
  1065                           	opt stack 0
  1066  000007                     RtccWriteTime@wasWrEn:
  1067                           	opt stack 0
  1068  000007                     ___lwdiv@counter:
  1069                           	opt stack 0
  1070  000007                     RtccWriteDate@tempYear:
  1071                           	opt stack 0
  1072  000007                     atoi@s:
  1073                           	opt stack 0
  1074  000007                     ___awdiv@quotient:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x6
  1078  000007                     	ds	1
  1079  000008                     ?___lwmod:
  1080                           	opt stack 0
  1081  000008                     lcd_putc@c:
  1082                           	opt stack 0
  1083  000008                     guardar_current_password@valor:
  1084                           	opt stack 0
  1085  000008                     guardar_password_temporal@valor:
  1086                           	opt stack 0
  1087  000008                     guardar_nuevo_password@valor:
  1088                           	opt stack 0
  1089  000008                     RtccWriteTime@tempMinSec:
  1090                           	opt stack 0
  1091  000008                     ___lwmod@dividend:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x7
  1095  000008                     	ds	1
  1096  000009                     ??_atoi:
  1097  000009                     RtccWriteDate@wasWrEn:
  1098                           	opt stack 0
  1099  000009                     lcd_putrs@ptr:
  1100                           	opt stack 0
  1101  000009                     confirmar_nuevo_password@confirmar:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x8
  1105  000009                     	ds	1
  1106  00000A                     RtccWriteDate@tempDayMonth:
  1107                           	opt stack 0
  1108  00000A                     RtccWriteTime@tempHourWDay:
  1109                           	opt stack 0
  1110  00000A                     ___lwmod@divisor:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x9
  1114  00000A                     	ds	1
  1115  00000B                     confirmar_nuevo_password@valor:
  1116                           	opt stack 0
  1117  00000B                     atoi@sign:
  1118                           	opt stack 0
  1119  00000B                     clear_display@pos:
  1120                           	opt stack 0
  1121  00000B                     mostrar_titulo_menu@titulo_menu:
  1122                           	opt stack 0
  1123  00000B                     RtccReadDate@rTD0:
  1124                           	opt stack 0
  1125  00000B                     RtccReadTime@rTD0:
  1126                           	opt stack 0
  1127                           
  1128                           ; 8 bytes @ 0xA
  1129  00000B                     	ds	1
  1130  00000C                     ___lwmod@counter:
  1131                           	opt stack 0
  1132  00000C                     RtccWriteDate@tempHourWDay:
  1133                           	opt stack 0
  1134  00000C                     atoi@a:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0xB
  1138  00000C                     	ds	1
  1139  00000D                     ??_menu_ingresar_password:
  1140  00000D                     ?_sprintf:
  1141                           	opt stack 0
  1142  00000D                     menu_cambiar_password@verifica:
  1143                           	opt stack 0
  1144  00000D                     sprintf@sp:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0xC
  1148  00000D                     	ds	1
  1149  00000E                     menu_ingresar_password@i:
  1150                           	opt stack 0
  1151  00000E                     convertir_a_int@array:
  1152                           	opt stack 0
  1153  00000E                     confirmar_nuevo_password@i:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0xD
  1157  00000E                     	ds	1
  1158  00000F                     sprintf@f:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0xE
  1162  00000F                     	ds	1
  1163  000010                     actualizar_password@valor:
  1164                           	opt stack 0
  1165  000010                     convertir_a_int@valor:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0xF
  1169  000010                     	ds	1
  1170  000011                     actualizar_password@confirmar:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x10
  1174  000011                     	ds	1
  1175  000012                     
  1176                           ; 0 bytes @ 0x11
  1177  000012                     	ds	1
  1178  000013                     actualizar_password@j:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x12
  1182  000013                     	ds	3
  1183  000016                     actualiza_elemento@elemento:
  1184                           	opt stack 0
  1185  000016                     actualiza_dia@elemento:
  1186                           	opt stack 0
  1187  000016                     actualizar_hora@elemento:
  1188                           	opt stack 0
  1189  000016                     actualizar_minutos@elemento:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x15
  1193  000016                     	ds	1
  1194  000017                     ??_sprintf:
  1195                           
  1196                           ; 0 bytes @ 0x16
  1197  000017                     	ds	1
  1198  000018                     actualiza_elemento@valor:
  1199                           	opt stack 0
  1200  000018                     actualiza_dia@valor:
  1201                           	opt stack 0
  1202  000018                     actualizar_hora@valor:
  1203                           	opt stack 0
  1204  000018                     actualizar_minutos@valor:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x17
  1208  000018                     	ds	2
  1209  00001A                     
  1210                           ; 0 bytes @ 0x19
  1211  00001A                     	ds	1
  1212  00001B                     sprintf@prec:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x1A
  1216  00001B                     	ds	1
  1217  00001C                     sprintf@ap:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x1B
  1221  00001C                     	ds	2
  1222  00001E                     sprintf@val:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x1D
  1226  00001E                     	ds	2
  1227  000020                     sprintf@flag:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x1F
  1231  000020                     	ds	1
  1232  000021                     sprintf@width:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x20
  1236  000021                     	ds	2
  1237  000023                     sprintf@c:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x22
  1241  000023                     	ds	1
  1242  000024                     ??_guardar_comando:
  1243  000024                     caratula@titulo:
  1244                           	opt stack 0
  1245  000024                     guardar_elemento@array:
  1246                           	opt stack 0
  1247  000024                     imprimir_tecla@aux:
  1248                           	opt stack 0
  1249                           
  1250                           ; 20 bytes @ 0x23
  1251  000024                     	ds	2
  1252  000026                     _caratula$650:
  1253                           	opt stack 0
  1254  000026                     guardar_elemento@tamanio_array:
  1255                           	opt stack 0
  1256  000026                     guardar_comando@aux:
  1257                           	opt stack 0
  1258                           
  1259                           ; 20 bytes @ 0x25
  1260  000026                     	ds	2
  1261  000028                     guardar_elemento@validacion:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x27
  1265  000028                     	ds	2
  1266  00002A                     guardar_elemento@dato_fecha:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x29
  1270  00002A                     	ds	2
  1271  00002C                     guardar_elemento@doit:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x2B
  1275  00002C                     	ds	2
  1276  00002E                     ??_guardar_elemento:
  1277                           
  1278                           ; 0 bytes @ 0x2D
  1279  00002E                     	ds	2
  1280  000030                     guardar_elemento@tecla:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x2F
  1284  000030                     	ds	1
  1285  000031                     guardar_elemento@i:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x30
  1289  000031                     	ds	2
  1290  000033                     guardar_elemento@valor:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x32
  1294  000033                     	ds	2
  1295  000035                     cambiar_dia@validacion:
  1296                           	opt stack 0
  1297  000035                     cambiar_mes@validacion:
  1298                           	opt stack 0
  1299  000035                     cambiar_anio@validacion:
  1300                           	opt stack 0
  1301  000035                     cambiar_hora@validacion:
  1302                           	opt stack 0
  1303  000035                     cambiar_minutos@validacion:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x34
  1307  000035                     	ds	2
  1308  000037                     cambiar_dia@tecla:
  1309                           	opt stack 0
  1310  000037                     cambiar_mes@tecla:
  1311                           	opt stack 0
  1312  000037                     cambiar_anio@tecla:
  1313                           	opt stack 0
  1314  000037                     cambiar_hora@tecla:
  1315                           	opt stack 0
  1316  000037                     cambiar_minutos@tecla:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x36
  1320  000037                     	ds	1
  1321  000038                     imprimir_tecla@tecla:
  1322                           	opt stack 0
  1323  000038                     _cambiar_mes$1391:
  1324                           	opt stack 0
  1325  000038                     _cambiar_anio$1395:
  1326                           	opt stack 0
  1327  000038                     _cambiar_minutos$1414:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x37
  1331  000038                     	ds	1
  1332  000039                     mostrar_guardar_password@tecla:
  1333                           	opt stack 0
  1334  000039                     mostrar_guardar_temporal_password@tecla:
  1335                           	opt stack 0
  1336  000039                     mostrar_guardar_nuevo_password@tecla:
  1337                           	opt stack 0
  1338  000039                     confirmar_actualizar_password@tecla:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x38
  1342  000039                     	ds	1
  1343  00003A                     guardar_comando@tecla:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x39
  1347  00003A                     	ds	1
  1348  00003B                     ingresar_comando@key:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x3A
  1352  00003B                     	ds	1
  1353  00003C                     guardar_tecla_presionada@i:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x3B
  1357  00003C                     	ds	2
  1358  00003E                     leer_teclado@ocultar:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x3D
  1362  00003E                     	ds	2
  1363  000040                     ??_leer_teclado:
  1364                           
  1365                           ; 0 bytes @ 0x3F
  1366  000040                     	ds	1
  1367  000041                     leer_teclado@i:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x40
  1371  000041                     	ds	2
  1372  000043                     main@ocultar_teclas:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x42
  1376  000043                     	ds	2
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postdec1	equ	0xFE5
  1384                           fsr1l	equ	0xFE1
  1385                           
  1386 ;;
  1387 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1388 ;;
  1389 ;; *************** function _main *****************
  1390 ;; Defined at:
  1391 ;;		line 267 in file "main.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  ocultar_tecl    2   66[COMRAM] int 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2  298[None  ] int 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels required when called:    9
  1411 ;; This function calls:
  1412 ;;		_Read_RTC
  1413 ;;		_Setup
  1414 ;;		_activar_sonido_alarma
  1415 ;;		_atoi
  1416 ;;		_caratula
  1417 ;;		_desactivar_sonido_alarma
  1418 ;;		_inicializar_teclado
  1419 ;;		_leer_teclado
  1420 ;;		_mensaje_alarma_activada
  1421 ;;		_menu_cambiar_fecha
  1422 ;;		_menu_cambiar_horario
  1423 ;;		_menu_cambiar_password
  1424 ;;		_menu_ingresar_password
  1425 ;; This function is called by:
  1426 ;;		Startup code after reset
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text0
  1431  00F496                     __ptext0:
  1432                           	opt stack 0
  1433  00F496                     _main:
  1434                           	opt stack 22
  1435                           
  1436                           ;main.c: 269: Setup();
  1437                           
  1438                           ; BSR set to: 15
  1439                           ;incstack = 0
  1440  00F496  EC26  F071         	call	_Setup	;wreg free
  1441                           
  1442                           ;main.c: 270: inicializar_teclado();
  1443  00F49A  EC39  F070         	call	_inicializar_teclado	;wreg free
  1444                           
  1445                           ;main.c: 271: int ocultar_teclas = 1;
  1446  00F49E  0E00               	movlw	0
  1447  00F4A0  6E44               	movwf	main@ocultar_teclas+1,c
  1448  00F4A2  0E01               	movlw	1
  1449  00F4A4  6E43               	movwf	main@ocultar_teclas,c
  1450  00F4A6  D000               	goto	l4244
  1451  00F4A8                     l4244:
  1452                           
  1453                           ;main.c: 274: {
  1454                           ;main.c: 275: Read_RTC();
  1455  00F4A8  ECBA  F079         	call	_Read_RTC	;wreg free
  1456                           
  1457                           ;main.c: 277: if (intentos_fallidos > 2){
  1458  00F4AC  0100               	movlb	0	; () banked
  1459  00F4AE  BF8E               	btfsc	(_intentos_fallidos+1)& (0+255),7,b
  1460  00F4B0  D016               	goto	l4254
  1461  00F4B2  0100               	movlb	0	; () banked
  1462  00F4B4  518E               	movf	(_intentos_fallidos+1)& (0+255),w,b
  1463  00F4B6  E105               	bnz	u3700
  1464  00F4B8  0E03               	movlw	3
  1465  00F4BA  0100               	movlb	0	; () banked
  1466  00F4BC  5D8D               	subwf	_intentos_fallidos& (0+255),w,b
  1467  00F4BE  A0D8               	btfss	status,0,c
  1468  00F4C0  D00E               	goto	l4254
  1469  00F4C2                     u3700:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 278: activada = 1;
  1473  00F4C2  0E00               	movlw	0
  1474  00F4C4  0100               	movlb	0	; () banked
  1475  00F4C6  6F7E               	movwf	(_activada+1)& (0+255),b
  1476  00F4C8  0E01               	movlw	1
  1477  00F4CA  6F7D               	movwf	_activada& (0+255),b
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;main.c: 279: mensaje_alarma_activada();
  1481  00F4CC  ECD3  F070         	call	_mensaje_alarma_activada	;wreg free
  1482                           
  1483                           ;main.c: 280: funcion_pulsador_B = desactivar_alarma;
  1484  00F4D0  0E9C               	movlw	low _desactivar_alarma
  1485  00F4D2  0100               	movlb	0	; () banked
  1486  00F4D4  6F83               	movwf	_funcion_pulsador_B& (0+255),b
  1487  00F4D6  0EE0               	movlw	high _desactivar_alarma
  1488  00F4D8  0100               	movlb	0	; () banked
  1489  00F4DA  6F84               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  1490  00F4DC  D000               	goto	l4254
  1491  00F4DE                     l4254:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 281: }
  1495                           ;main.c: 283: if (activada)
  1496  00F4DE  0100               	movlb	0	; () banked
  1497  00F4E0  517D               	movf	_activada& (0+255),w,b
  1498  00F4E2  0100               	movlb	0	; () banked
  1499  00F4E4  117E               	iorwf	(_activada+1)& (0+255),w,b
  1500  00F4E6  B4D8               	btfsc	status,2,c
  1501  00F4E8  D003               	goto	l4258
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 284: activar_sonido_alarma();
  1505  00F4EA  ECC8  F06E         	call	_activar_sonido_alarma	;wreg free
  1506  00F4EE  D000               	goto	l4258
  1507  00F4F0                     l4258:
  1508                           
  1509                           ;main.c: 286: if (!autorizado && intentos_fallidos <=2){
  1510  00F4F0  5045               	movf	_autorizado,w,c
  1511  00F4F2  1046               	iorwf	_autorizado+1,w,c
  1512  00F4F4  A4D8               	btfss	status,2,c
  1513  00F4F6  D014               	goto	l4266
  1514  00F4F8  0100               	movlb	0	; () banked
  1515  00F4FA  BF8E               	btfsc	(_intentos_fallidos+1)& (0+255),7,b
  1516  00F4FC  D008               	goto	l4262
  1517  00F4FE  0100               	movlb	0	; () banked
  1518  00F500  518E               	movf	(_intentos_fallidos+1)& (0+255),w,b
  1519  00F502  E10E               	bnz	l4266
  1520  00F504  0E03               	movlw	3
  1521  00F506  0100               	movlb	0	; () banked
  1522  00F508  5D8D               	subwf	_intentos_fallidos& (0+255),w,b
  1523  00F50A  B0D8               	btfsc	status,0,c
  1524  00F50C  D009               	goto	l4266
  1525  00F50E                     l4262:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;main.c: 287: puntero_funcion = mostrar_guardar_password;
  1529  00F50E  0EF4               	movlw	low _mostrar_guardar_password
  1530  00F510  0100               	movlb	0	; () banked
  1531  00F512  6F95               	movwf	_puntero_funcion& (0+255),b
  1532  00F514  0EE0               	movlw	high _mostrar_guardar_password
  1533  00F516  0100               	movlb	0	; () banked
  1534  00F518  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 288: menu_ingresar_password();
  1538  00F51A  ECBB  F076         	call	_menu_ingresar_password	;wreg free
  1539  00F51E  D000               	goto	l4266
  1540  00F520                     l4266:
  1541                           
  1542                           ;main.c: 289: }
  1543                           ;main.c: 291: if (autorizado){
  1544  00F520  5045               	movf	_autorizado,w,c
  1545  00F522  1046               	iorwf	_autorizado+1,w,c
  1546  00F524  B4D8               	btfsc	status,2,c
  1547  00F526  D047               	goto	l4292
  1548                           
  1549                           ;main.c: 292: desactivar_sonido_alarma();
  1550  00F528  EC36  F06F         	call	_desactivar_sonido_alarma	;wreg free
  1551                           
  1552                           ;main.c: 294: puntero_funcion = &ingresar_comando;
  1553  00F52C  0EAC               	movlw	low _ingresar_comando
  1554  00F52E  0100               	movlb	0	; () banked
  1555  00F530  6F95               	movwf	_puntero_funcion& (0+255),b
  1556  00F532  0EDD               	movlw	high _ingresar_comando
  1557  00F534  0100               	movlb	0	; () banked
  1558  00F536  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;main.c: 295: funcion_pulsador_C = restaurar_comando;
  1562  00F538  0EB0               	movlw	low _restaurar_comando
  1563  00F53A  0100               	movlb	0	; () banked
  1564  00F53C  6F85               	movwf	_funcion_pulsador_C& (0+255),b
  1565  00F53E  0EDE               	movlw	high _restaurar_comando
  1566  00F540  0100               	movlb	0	; () banked
  1567  00F542  6F86               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 296: funcion_pulsador_D = restaurar_comando;
  1571  00F544  0EB0               	movlw	low _restaurar_comando
  1572  00F546  0100               	movlb	0	; () banked
  1573  00F548  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  1574  00F54A  0EDE               	movlw	high _restaurar_comando
  1575  00F54C  0100               	movlb	0	; () banked
  1576  00F54E  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1577                           
  1578                           ;main.c: 298: switch (atoi(comando))
  1579  00F550  D01C               	goto	l4290
  1580  00F552                     l4276:
  1581  00F552  EC53  F078         	call	_menu_cambiar_password	;wreg free
  1582  00F556  D02F               	goto	l4292
  1583  00F558                     l4278:
  1584  00F558  ECE8  F077         	call	_menu_cambiar_fecha	;wreg free
  1585  00F55C  D02C               	goto	l4292
  1586  00F55E                     l4280:
  1587  00F55E  EC24  F076         	call	_menu_cambiar_horario	;wreg free
  1588  00F562  D029               	goto	l4292
  1589  00F564                     l4282:
  1590  00F564  0EDF               	movlw	low STR_22
  1591  00F566  6E24               	movwf	caratula@titulo,c
  1592  00F568  0EFF               	movlw	high STR_22
  1593  00F56A  6E25               	movwf	caratula@titulo+1,c
  1594  00F56C  EC7D  F077         	call	_caratula	;wreg free
  1595                           
  1596                           ;main.c: 304: if (tamanio_comando >= 2)
  1597  00F570  BE48               	btfsc	_tamanio_comando+1,7,c
  1598  00F572  D021               	goto	l4292
  1599  00F574  5048               	movf	_tamanio_comando+1,w,c
  1600  00F576  E104               	bnz	u3750
  1601  00F578  0E02               	movlw	2
  1602  00F57A  5C47               	subwf	_tamanio_comando,w,c
  1603  00F57C  A0D8               	btfss	status,0,c
  1604  00F57E  D01B               	goto	l4292
  1605  00F580                     u3750:
  1606                           
  1607                           ;main.c: 305: tamanio_comando = 0;
  1608  00F580  0E00               	movlw	0
  1609  00F582  6E48               	movwf	_tamanio_comando+1,c
  1610  00F584  0E00               	movlw	0
  1611  00F586  6E47               	movwf	_tamanio_comando,c
  1612                           
  1613                           ;main.c: 307: }
  1614                           
  1615                           ;main.c: 306: break;
  1616  00F588  D016               	goto	l4292
  1617  00F58A                     l4290:
  1618  00F58A  0ECA               	movlw	low _comando
  1619  00F58C  6E07               	movwf	atoi@s,c
  1620  00F58E  0E00               	movlw	high _comando
  1621  00F590  6E08               	movwf	atoi@s+1,c
  1622  00F592  EC13  F077         	call	_atoi	;wreg free
  1623                           
  1624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1625                           ; Switch size 1, requested type "space"
  1626                           ; Number of cases is 1, Range of values is 0 to 0
  1627                           ; switch strategies available:
  1628                           ; Name         Instructions Cycles
  1629                           ; simple_byte            4     3 (average)
  1630                           ;	Chosen strategy is simple_byte
  1631  00F596  5008               	movf	?_atoi+1,w,c
  1632  00F598  0A00               	xorlw	0	; case 0
  1633  00F59A  A4D8               	btfss	status,2,c
  1634  00F59C  D7E3               	goto	l4282
  1635                           
  1636                           ; Switch size 1, requested type "space"
  1637                           ; Number of cases is 3, Range of values is 10 to 12
  1638                           ; switch strategies available:
  1639                           ; Name         Instructions Cycles
  1640                           ; simple_byte           10     6 (average)
  1641                           ;	Chosen strategy is simple_byte
  1642  00F59E  5007               	movf	?_atoi,w,c
  1643  00F5A0  0A0A               	xorlw	10	; case 10
  1644  00F5A2  B4D8               	btfsc	status,2,c
  1645  00F5A4  D7D6               	goto	l4276
  1646  00F5A6  0A01               	xorlw	1	; case 11
  1647  00F5A8  B4D8               	btfsc	status,2,c
  1648  00F5AA  D7D6               	goto	l4278
  1649  00F5AC  0A07               	xorlw	7	; case 12
  1650  00F5AE  B4D8               	btfsc	status,2,c
  1651  00F5B0  D7D6               	goto	l4280
  1652  00F5B2  D7D8               	goto	l4282
  1653  00F5B4  D000               	goto	l4292
  1654  00F5B6                     l4292:
  1655                           
  1656                           ;main.c: 308: }
  1657                           ;main.c: 310: leer_teclado(ocultar_teclas);
  1658  00F5B6  C043  F03E         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1659  00F5BA  C044  F03F         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1660  00F5BE  EC87  F07B         	call	_leer_teclado	;wreg free
  1661  00F5C2  D772               	goto	l4244
  1662                           
  1663                           ;main.c: 311: }
  1664                           ;main.c: 312: return 0;
  1665                           ;	Return value of _main is never used
  1666  00F5C4  EF00  F000         	goto	start
  1667  00F5C8                     __end_of_main:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _menu_cambiar_password *****************
  1680 ;; Defined at:
  1681 ;;		line 198 in file "main.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  verifica        2   12[COMRAM] int 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;		None               void
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1699 ;;Total ram usage:        2 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    6
  1702 ;; This function calls:
  1703 ;;		_clear_display
  1704 ;;		_mostrar_titulo_menu
  1705 ;;		_verficar_password
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text1
  1712  00F0A6                     __ptext1:
  1713                           	opt stack 0
  1714  00F0A6                     _menu_cambiar_password:
  1715                           	opt stack 24
  1716                           
  1717                           ;main.c: 200: int verifica;
  1718                           ;main.c: 202: funcion_pulsador_C = cancelar_cambio_password;
  1719                           
  1720                           ;incstack = 0
  1721  00F0A6  0E26               	movlw	low _cancelar_cambio_password
  1722  00F0A8  0100               	movlb	0	; () banked
  1723  00F0AA  6F85               	movwf	_funcion_pulsador_C& (0+255),b
  1724  00F0AC  0EE0               	movlw	high _cancelar_cambio_password
  1725  00F0AE  0100               	movlb	0	; () banked
  1726  00F0B0  6F86               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 204: verficar_password(&verifica);
  1730  00F0B2  0E0D               	movlw	low menu_cambiar_password@verifica
  1731  00F0B4  6E01               	movwf	verficar_password@verifica,c
  1732  00F0B6  0E00               	movlw	high menu_cambiar_password@verifica
  1733  00F0B8  6E02               	movwf	verficar_password@verifica+1,c
  1734  00F0BA  ECD1  F073         	call	_verficar_password	;wreg free
  1735                           
  1736                           ;main.c: 205: if(!verifica){
  1737  00F0BE  500D               	movf	menu_cambiar_password@verifica,w,c
  1738  00F0C0  100E               	iorwf	menu_cambiar_password@verifica+1,w,c
  1739  00F0C2  A4D8               	btfss	status,2,c
  1740  00F0C4  D015               	goto	l4108
  1741                           
  1742                           ;main.c: 206: puntero_funcion = &mostrar_guardar_temporal_password;
  1743  00F0C6  0EC8               	movlw	low _mostrar_guardar_temporal_password
  1744  00F0C8  0100               	movlb	0	; () banked
  1745  00F0CA  6F95               	movwf	_puntero_funcion& (0+255),b
  1746  00F0CC  0EE0               	movlw	high _mostrar_guardar_temporal_password
  1747  00F0CE  0100               	movlb	0	; () banked
  1748  00F0D0  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 207: mostrar_titulo_menu("Password actual:          ");
  1752  00F0D2  0EB1               	movlw	low STR_17
  1753  00F0D4  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1754  00F0D6  0EFE               	movlw	high STR_17
  1755  00F0D8  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1756  00F0DA  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  1757                           
  1758                           ;main.c: 208: clear_display(tamanio_password+1);
  1759  00F0DE  0E01               	movlw	1
  1760  00F0E0  2458               	addwf	_tamanio_password,w,c
  1761  00F0E2  6E0B               	movwf	clear_display@pos,c
  1762  00F0E4  0E00               	movlw	0
  1763  00F0E6  2059               	addwfc	_tamanio_password+1,w,c
  1764  00F0E8  6E0C               	movwf	clear_display@pos+1,c
  1765  00F0EA  ECDF  F06F         	call	_clear_display	;wreg free
  1766                           
  1767                           ;main.c: 210: }else {
  1768  00F0EE  0012               	return	
  1769  00F0F0                     l4108:
  1770                           
  1771                           ;main.c: 211: if (tamanio_new_password <= 6){
  1772  00F0F0  0100               	movlb	0	; () banked
  1773  00F0F2  BFE1               	btfsc	(_tamanio_new_password+1)& (0+255),7,b
  1774  00F0F4  D008               	goto	l4110
  1775  00F0F6  0100               	movlb	0	; () banked
  1776  00F0F8  51E1               	movf	(_tamanio_new_password+1)& (0+255),w,b
  1777  00F0FA  E12B               	bnz	l4120
  1778  00F0FC  0E07               	movlw	7
  1779  00F0FE  0100               	movlb	0	; () banked
  1780  00F100  5DE0               	subwf	_tamanio_new_password& (0+255),w,b
  1781  00F102  B0D8               	btfsc	status,0,c
  1782  00F104  D026               	goto	l4120
  1783  00F106                     l4110:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 212: puntero_funcion = &mostrar_guardar_nuevo_password;
  1787  00F106  0E20               	movlw	low _mostrar_guardar_nuevo_password
  1788  00F108  0100               	movlb	0	; () banked
  1789  00F10A  6F95               	movwf	_puntero_funcion& (0+255),b
  1790  00F10C  0EE1               	movlw	high _mostrar_guardar_nuevo_password
  1791  00F10E  0100               	movlb	0	; () banked
  1792  00F110  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 214: mostrar_titulo_menu("Nuevo pass:        ");
  1796  00F112  0E13               	movlw	low STR_18
  1797  00F114  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1798  00F116  0EFF               	movlw	high STR_18
  1799  00F118  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1800  00F11A  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  1801                           
  1802                           ;main.c: 215: clear_display(tamanio_new_password+1);
  1803  00F11E  0E01               	movlw	1
  1804  00F120  0100               	movlb	0	; () banked
  1805  00F122  25E0               	addwf	_tamanio_new_password& (0+255),w,b
  1806  00F124  6E0B               	movwf	clear_display@pos,c
  1807  00F126  0E00               	movlw	0
  1808  00F128  0100               	movlb	0	; () banked
  1809  00F12A  21E1               	addwfc	(_tamanio_new_password+1)& (0+255),w,b
  1810  00F12C  6E0C               	movwf	clear_display@pos+1,c
  1811  00F12E  ECDF  F06F         	call	_clear_display	;wreg free
  1812                           
  1813                           ;main.c: 217: if (tamanio_new_password == 6) tamanio_new_password++;
  1814  00F132  0E06               	movlw	6
  1815  00F134  0100               	movlb	0	; () banked
  1816  00F136  19E0               	xorwf	_tamanio_new_password& (0+255),w,b
  1817  00F138  0100               	movlb	0	; () banked
  1818  00F13A  11E1               	iorwf	(_tamanio_new_password+1)& (0+255),w,b
  1819  00F13C  A4D8               	btfss	status,2,c
  1820  00F13E  D004               	goto	l4118
  1821                           
  1822                           ; BSR set to: 0
  1823  00F140  0100               	movlb	0	; () banked
  1824  00F142  4BE0               	infsnz	_tamanio_new_password& (0+255),f,b
  1825  00F144  2BE1               	incf	(_tamanio_new_password+1)& (0+255),f,b
  1826  00F146  D000               	goto	l4118
  1827  00F148                     l4118:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 218: tamanio_password = 0;
  1831  00F148  0E00               	movlw	0
  1832  00F14A  6E59               	movwf	_tamanio_password+1,c
  1833  00F14C  0E00               	movlw	0
  1834  00F14E  6E58               	movwf	_tamanio_password,c
  1835                           
  1836                           ;main.c: 220: }else {
  1837  00F150  0012               	return	
  1838  00F152                     l4120:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 221: puntero_funcion = &confirmar_actualizar_password;
  1842  00F152  0E4C               	movlw	low _confirmar_actualizar_password
  1843  00F154  0100               	movlb	0	; () banked
  1844  00F156  6F95               	movwf	_puntero_funcion& (0+255),b
  1845  00F158  0EE1               	movlw	high _confirmar_actualizar_password
  1846  00F15A  0100               	movlb	0	; () banked
  1847  00F15C  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 223: mostrar_titulo_menu("Confirme pass:        ");
  1851  00F15E  0EE6               	movlw	low STR_19
  1852  00F160  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1853  00F162  0EFE               	movlw	high STR_19
  1854  00F164  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1855  00F166  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  1856                           
  1857                           ;main.c: 224: clear_display(tamanio_password+1);
  1858  00F16A  0E01               	movlw	1
  1859  00F16C  2458               	addwf	_tamanio_password,w,c
  1860  00F16E  6E0B               	movwf	clear_display@pos,c
  1861  00F170  0E00               	movlw	0
  1862  00F172  2059               	addwfc	_tamanio_password+1,w,c
  1863  00F174  6E0C               	movwf	clear_display@pos+1,c
  1864  00F176  ECDF  F06F         	call	_clear_display	;wreg free
  1865  00F17A  0012               	return	
  1866  00F17C  0012               	return		;funcret
  1867  00F17E                     __end_of_menu_cambiar_password:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1l	equ	0xFE1
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _verficar_password *****************
  1880 ;; Defined at:
  1881 ;;		line 56 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  verifica        2    0[COMRAM] PTR int 
  1884 ;;		 -> menu_cambiar_password@verifica(2), 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  i               2    4[COMRAM] int 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;		None               void
  1889 ;; Registers used:
  1890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1899 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;Total ram usage:        6 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_menu_cambiar_password
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text2
  1910  00E7A2                     __ptext2:
  1911                           	opt stack 0
  1912  00E7A2                     _verficar_password:
  1913                           	opt stack 29
  1914                           
  1915                           ;alarma.c: 58: *verifica=1;
  1916                           
  1917                           ;incstack = 0
  1918  00E7A2  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1919  00E7A6  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1920  00E7AA  0E01               	movlw	1
  1921  00E7AC  6EDE               	movwf	postinc2,c
  1922  00E7AE  0E00               	movlw	0
  1923  00E7B0  6EDD               	movwf	postdec2,c
  1924                           
  1925                           ;alarma.c: 59: int i = 0;
  1926  00E7B2  0E00               	movlw	0
  1927  00E7B4  6E06               	movwf	verficar_password@i+1,c
  1928  00E7B6  0E00               	movlw	0
  1929  00E7B8  6E05               	movwf	verficar_password@i,c
  1930                           
  1931                           ;alarma.c: 60: while (i < 6 && *verifica == 1){
  1932  00E7BA  D01C               	goto	l3904
  1933  00E7BC                     l3898:
  1934                           
  1935                           ;alarma.c: 61: if (password[i] != *(temporal+i))
  1936  00E7BC  0EC3               	movlw	low _temporal
  1937  00E7BE  2405               	addwf	verficar_password@i,w,c
  1938  00E7C0  6ED9               	movwf	fsr2l,c
  1939  00E7C2  0E00               	movlw	high _temporal
  1940  00E7C4  2006               	addwfc	verficar_password@i+1,w,c
  1941  00E7C6  6EDA               	movwf	fsr2h,c
  1942  00E7C8  0EE2               	movlw	low _password
  1943  00E7CA  2405               	addwf	verficar_password@i,w,c
  1944  00E7CC  6EE1               	movwf	fsr1l,c
  1945  00E7CE  0E00               	movlw	high _password
  1946  00E7D0  2006               	addwfc	verficar_password@i+1,w,c
  1947  00E7D2  6EE2               	movwf	fsr1h,c
  1948  00E7D4  50DE               	movf	postinc2,w,c
  1949  00E7D6  18E6               	xorwf	postinc1,w,c
  1950  00E7D8  B4D8               	btfsc	status,2,c
  1951  00E7DA  D009               	goto	l3902
  1952                           
  1953                           ;alarma.c: 62: *verifica = 0;
  1954  00E7DC  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1955  00E7E0  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1956  00E7E4  0E00               	movlw	0
  1957  00E7E6  6EDE               	movwf	postinc2,c
  1958  00E7E8  0E00               	movlw	0
  1959  00E7EA  6EDD               	movwf	postdec2,c
  1960  00E7EC  D000               	goto	l3902
  1961  00E7EE                     l3902:
  1962                           
  1963                           ;alarma.c: 64: i++;
  1964  00E7EE  4A05               	infsnz	verficar_password@i,f,c
  1965  00E7F0  2A06               	incf	verficar_password@i+1,f,c
  1966  00E7F2  D000               	goto	l3904
  1967  00E7F4                     l3904:
  1968  00E7F4  BE06               	btfsc	verficar_password@i+1,7,c
  1969  00E7F6  D006               	goto	l3906
  1970  00E7F8  5006               	movf	verficar_password@i+1,w,c
  1971  00E7FA  E10E               	bnz	l836
  1972  00E7FC  0E06               	movlw	6
  1973  00E7FE  5C05               	subwf	verficar_password@i,w,c
  1974  00E800  B0D8               	btfsc	status,0,c
  1975  00E802  0012               	return	
  1976  00E804                     l3906:
  1977  00E804  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1978  00E808  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1979  00E80C  04DE               	decf	postinc2,w,c
  1980  00E80E  10DE               	iorwf	postinc2,w,c
  1981  00E810  A4D8               	btfss	status,2,c
  1982  00E812  0012               	return	
  1983  00E814  D7D3               	goto	l3898
  1984  00E816  0012               	return	
  1985  00E818                     l836:
  1986  00E818  0012               	return		;funcret
  1987  00E81A                     __end_of_verficar_password:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           postinc1	equ	0xFE6
  1996                           postdec1	equ	0xFE5
  1997                           fsr1h	equ	0xFE2
  1998                           fsr1l	equ	0xFE1
  1999                           postinc2	equ	0xFDE
  2000                           postdec2	equ	0xFDD
  2001                           fsr2h	equ	0xFDA
  2002                           fsr2l	equ	0xFD9
  2003                           status	equ	0xFD8
  2004                           
  2005 ;; *************** function _menu_cambiar_horario *****************
  2006 ;; Defined at:
  2007 ;;		line 179 in file "main.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    6
  2028 ;; This function calls:
  2029 ;;		_clear_display
  2030 ;;		_mostrar_titulo_menu
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text3
  2037  00EC48                     __ptext3:
  2038                           	opt stack 0
  2039  00EC48                     _menu_cambiar_horario:
  2040                           	opt stack 24
  2041                           
  2042                           ;main.c: 181: funcion_pulsador_C = cancelar_cambio_hora;
  2043                           
  2044                           ;incstack = 0
  2045  00EC48  0EA2               	movlw	low _cancelar_cambio_hora
  2046  00EC4A  0100               	movlb	0	; () banked
  2047  00EC4C  6F85               	movwf	_funcion_pulsador_C& (0+255),b
  2048  00EC4E  0EDD               	movlw	high _cancelar_cambio_hora
  2049  00EC50  0100               	movlb	0	; () banked
  2050  00EC52  6F86               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2051                           
  2052                           ;main.c: 183: if (tamanio_minutos != 2){
  2053  00EC54  0E02               	movlw	2
  2054  00EC56  0100               	movlb	0	; () banked
  2055  00EC58  19DE               	xorwf	_tamanio_minutos& (0+255),w,b
  2056  00EC5A  0100               	movlb	0	; () banked
  2057  00EC5C  11DF               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  2058  00EC5E  B4D8               	btfsc	status,2,c
  2059  00EC60  D01D               	goto	l4088
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 184: mostrar_titulo_menu("Inserte minutos:     ");
  2063  00EC62  0EFD               	movlw	low STR_15
  2064  00EC64  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2065  00EC66  0EFE               	movlw	high STR_15
  2066  00EC68  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2067  00EC6A  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  2068                           
  2069                           ;main.c: 185: puntero_funcion = cambiar_minutos;
  2070  00EC6E  0E42               	movlw	low _cambiar_minutos
  2071  00EC70  0100               	movlb	0	; () banked
  2072  00EC72  6F95               	movwf	_puntero_funcion& (0+255),b
  2073  00EC74  0EE6               	movlw	high _cambiar_minutos
  2074  00EC76  0100               	movlb	0	; () banked
  2075  00EC78  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 186: funcion_pulsador_D = borrar_minutos;
  2079  00EC7A  0E5A               	movlw	low _borrar_minutos
  2080  00EC7C  0100               	movlb	0	; () banked
  2081  00EC7E  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  2082  00EC80  0EDE               	movlw	high _borrar_minutos
  2083  00EC82  0100               	movlb	0	; () banked
  2084  00EC84  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2085                           
  2086                           ;main.c: 187: clear_display(tamanio_minutos+1);
  2087  00EC86  0E01               	movlw	1
  2088  00EC88  0100               	movlb	0	; () banked
  2089  00EC8A  25DE               	addwf	_tamanio_minutos& (0+255),w,b
  2090  00EC8C  6E0B               	movwf	clear_display@pos,c
  2091  00EC8E  0E00               	movlw	0
  2092  00EC90  0100               	movlb	0	; () banked
  2093  00EC92  21DF               	addwfc	(_tamanio_minutos+1)& (0+255),w,b
  2094  00EC94  6E0C               	movwf	clear_display@pos+1,c
  2095  00EC96  ECDF  F06F         	call	_clear_display	;wreg free
  2096                           
  2097                           ;main.c: 189: }else if (tamanio_hora != 2){
  2098  00EC9A  0012               	return	
  2099  00EC9C                     l4088:
  2100  00EC9C  0E02               	movlw	2
  2101  00EC9E  1854               	xorwf	_tamanio_hora,w,c
  2102  00ECA0  1055               	iorwf	_tamanio_hora+1,w,c
  2103  00ECA2  B4D8               	btfsc	status,2,c
  2104  00ECA4  0012               	return	
  2105                           
  2106                           ;main.c: 190: mostrar_titulo_menu("Inserte hora:     ");
  2107  00ECA6  0E27               	movlw	low STR_16
  2108  00ECA8  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2109  00ECAA  0EFF               	movlw	high STR_16
  2110  00ECAC  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2111  00ECAE  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  2112                           
  2113                           ;main.c: 191: puntero_funcion = cambiar_hora;
  2114  00ECB2  0E96               	movlw	low _cambiar_hora
  2115  00ECB4  0100               	movlb	0	; () banked
  2116  00ECB6  6F95               	movwf	_puntero_funcion& (0+255),b
  2117  00ECB8  0EE4               	movlw	high _cambiar_hora
  2118  00ECBA  0100               	movlb	0	; () banked
  2119  00ECBC  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;main.c: 192: funcion_pulsador_D = borrar_hora;
  2123  00ECBE  0EF0               	movlw	low _borrar_hora
  2124  00ECC0  0100               	movlb	0	; () banked
  2125  00ECC2  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  2126  00ECC4  0EDD               	movlw	high _borrar_hora
  2127  00ECC6  0100               	movlb	0	; () banked
  2128  00ECC8  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2129                           
  2130                           ;main.c: 193: clear_display(tamanio_hora+1);
  2131  00ECCA  0E01               	movlw	1
  2132  00ECCC  2454               	addwf	_tamanio_hora,w,c
  2133  00ECCE  6E0B               	movwf	clear_display@pos,c
  2134  00ECD0  0E00               	movlw	0
  2135  00ECD2  2055               	addwfc	_tamanio_hora+1,w,c
  2136  00ECD4  6E0C               	movwf	clear_display@pos+1,c
  2137  00ECD6  ECDF  F06F         	call	_clear_display	;wreg free
  2138  00ECDA  0012               	return	
  2139  00ECDC  0012               	return		;funcret
  2140  00ECDE                     __end_of_menu_cambiar_horario:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postinc1	equ	0xFE6
  2149                           postdec1	equ	0xFE5
  2150                           fsr1h	equ	0xFE2
  2151                           fsr1l	equ	0xFE1
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function _menu_cambiar_fecha *****************
  2159 ;; Defined at:
  2160 ;;		line 154 in file "main.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    6
  2181 ;; This function calls:
  2182 ;;		_clear_display
  2183 ;;		_mostrar_titulo_menu
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text4
  2190  00EFD0                     __ptext4:
  2191                           	opt stack 0
  2192  00EFD0                     _menu_cambiar_fecha:
  2193                           	opt stack 24
  2194                           
  2195                           ;main.c: 156: funcion_pulsador_C = cancelar_cambio_fecha;
  2196                           
  2197                           ;incstack = 0
  2198  00EFD0  0E98               	movlw	low _cancelar_cambio_fecha
  2199  00EFD2  0100               	movlb	0	; () banked
  2200  00EFD4  6F85               	movwf	_funcion_pulsador_C& (0+255),b
  2201  00EFD6  0EDD               	movlw	high _cancelar_cambio_fecha
  2202  00EFD8  0100               	movlb	0	; () banked
  2203  00EFDA  6F86               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2204                           
  2205                           ;main.c: 158: if (tamanio_anio != 2){
  2206  00EFDC  0E02               	movlw	2
  2207  00EFDE  0100               	movlb	0	; () banked
  2208  00EFE0  19DC               	xorwf	_tamanio_anio& (0+255),w,b
  2209  00EFE2  0100               	movlb	0	; () banked
  2210  00EFE4  11DD               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  2211  00EFE6  B4D8               	btfsc	status,2,c
  2212  00EFE8  D01D               	goto	l4064
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 159: mostrar_titulo_menu("Inserte anio:     ");
  2216  00EFEA  0E3A               	movlw	low STR_12
  2217  00EFEC  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2218  00EFEE  0EFF               	movlw	high STR_12
  2219  00EFF0  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2220  00EFF2  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  2221                           
  2222                           ;main.c: 160: puntero_funcion = &cambiar_anio;
  2223  00EFF6  0E1A               	movlw	low _cambiar_anio
  2224  00EFF8  0100               	movlb	0	; () banked
  2225  00EFFA  6F95               	movwf	_puntero_funcion& (0+255),b
  2226  00EFFC  0EE8               	movlw	high _cambiar_anio
  2227  00EFFE  0100               	movlb	0	; () banked
  2228  00F000  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;main.c: 161: funcion_pulsador_D = borrar_anio;
  2232  00F002  0E48               	movlw	low _borrar_anio
  2233  00F004  0100               	movlb	0	; () banked
  2234  00F006  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  2235  00F008  0EDE               	movlw	high _borrar_anio
  2236  00F00A  0100               	movlb	0	; () banked
  2237  00F00C  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2238                           
  2239                           ;main.c: 162: clear_display(tamanio_anio+1);
  2240  00F00E  0E01               	movlw	1
  2241  00F010  0100               	movlb	0	; () banked
  2242  00F012  25DC               	addwf	_tamanio_anio& (0+255),w,b
  2243  00F014  6E0B               	movwf	clear_display@pos,c
  2244  00F016  0E00               	movlw	0
  2245  00F018  0100               	movlb	0	; () banked
  2246  00F01A  21DD               	addwfc	(_tamanio_anio+1)& (0+255),w,b
  2247  00F01C  6E0C               	movwf	clear_display@pos+1,c
  2248  00F01E  ECDF  F06F         	call	_clear_display	;wreg free
  2249                           
  2250                           ;main.c: 164: }else if (tamanio_mes != 2){
  2251  00F022  0012               	return	
  2252  00F024                     l4064:
  2253  00F024  0E02               	movlw	2
  2254  00F026  1856               	xorwf	_tamanio_mes,w,c
  2255  00F028  1057               	iorwf	_tamanio_mes+1,w,c
  2256  00F02A  B4D8               	btfsc	status,2,c
  2257  00F02C  D01B               	goto	l4072
  2258                           
  2259                           ;main.c: 165: mostrar_titulo_menu("Inserte mes:     ");
  2260  00F02E  0E71               	movlw	low STR_13
  2261  00F030  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2262  00F032  0EFF               	movlw	high STR_13
  2263  00F034  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2264  00F036  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  2265                           
  2266                           ;main.c: 166: puntero_funcion = &cambiar_mes;
  2267  00F03A  0E64               	movlw	low _cambiar_mes
  2268  00F03C  0100               	movlb	0	; () banked
  2269  00F03E  6F95               	movwf	_puntero_funcion& (0+255),b
  2270  00F040  0EE5               	movlw	high _cambiar_mes
  2271  00F042  0100               	movlb	0	; () banked
  2272  00F044  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 167: funcion_pulsador_D = borrar_mes;
  2276  00F046  0ED0               	movlw	low _borrar_mes
  2277  00F048  0100               	movlb	0	; () banked
  2278  00F04A  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  2279  00F04C  0EDD               	movlw	high _borrar_mes
  2280  00F04E  0100               	movlb	0	; () banked
  2281  00F050  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2282                           
  2283                           ;main.c: 168: clear_display(tamanio_mes+1);
  2284  00F052  0E01               	movlw	1
  2285  00F054  2456               	addwf	_tamanio_mes,w,c
  2286  00F056  6E0B               	movwf	clear_display@pos,c
  2287  00F058  0E00               	movlw	0
  2288  00F05A  2057               	addwfc	_tamanio_mes+1,w,c
  2289  00F05C  6E0C               	movwf	clear_display@pos+1,c
  2290  00F05E  ECDF  F06F         	call	_clear_display	;wreg free
  2291                           
  2292                           ;main.c: 170: }else if (tamanio_dia != 2){
  2293  00F062  0012               	return	
  2294  00F064                     l4072:
  2295  00F064  0E02               	movlw	2
  2296  00F066  1852               	xorwf	_tamanio_dia,w,c
  2297  00F068  1053               	iorwf	_tamanio_dia+1,w,c
  2298  00F06A  B4D8               	btfsc	status,2,c
  2299  00F06C  0012               	return	
  2300                           
  2301                           ;main.c: 171: mostrar_titulo_menu("Inserte dia:     ");
  2302  00F06E  0E5F               	movlw	low STR_14
  2303  00F070  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2304  00F072  0EFF               	movlw	high STR_14
  2305  00F074  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2306  00F076  EC4C  F06F         	call	_mostrar_titulo_menu	;wreg free
  2307                           
  2308                           ;main.c: 172: puntero_funcion = &cambiar_dia;
  2309  00F07A  0E80               	movlw	low _cambiar_dia
  2310  00F07C  0100               	movlb	0	; () banked
  2311  00F07E  6F95               	movwf	_puntero_funcion& (0+255),b
  2312  00F080  0EE3               	movlw	high _cambiar_dia
  2313  00F082  0100               	movlb	0	; () banked
  2314  00F084  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;main.c: 173: funcion_pulsador_D = borrar_dia;
  2318  00F086  0EE0               	movlw	low _borrar_dia
  2319  00F088  0100               	movlb	0	; () banked
  2320  00F08A  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  2321  00F08C  0EDD               	movlw	high _borrar_dia
  2322  00F08E  0100               	movlb	0	; () banked
  2323  00F090  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2324                           
  2325                           ;main.c: 174: clear_display(tamanio_dia+1);
  2326  00F092  0E01               	movlw	1
  2327  00F094  2452               	addwf	_tamanio_dia,w,c
  2328  00F096  6E0B               	movwf	clear_display@pos,c
  2329  00F098  0E00               	movlw	0
  2330  00F09A  2053               	addwfc	_tamanio_dia+1,w,c
  2331  00F09C  6E0C               	movwf	clear_display@pos+1,c
  2332  00F09E  ECDF  F06F         	call	_clear_display	;wreg free
  2333  00F0A2  0012               	return	
  2334  00F0A4  0012               	return		;funcret
  2335  00F0A6                     __end_of_menu_cambiar_fecha:
  2336                           	opt stack 0
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postinc1	equ	0xFE6
  2344                           postdec1	equ	0xFE5
  2345                           fsr1h	equ	0xFE2
  2346                           fsr1l	equ	0xFE1
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _mostrar_titulo_menu *****************
  2354 ;; Defined at:
  2355 ;;		line 117 in file "main.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  titulo_menu     2   10[COMRAM] PTR const unsigned char 
  2358 ;;		 -> STR_19(23), STR_18(20), STR_17(27), STR_16(19), 
  2359 ;;		 -> STR_15(22), STR_14(18), STR_13(18), STR_12(19), 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;Total ram usage:        2 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    5
  2378 ;; This function calls:
  2379 ;;		_lcd_gotoxy
  2380 ;;		_lcd_putrs
  2381 ;; This function is called by:
  2382 ;;		_menu_cambiar_fecha
  2383 ;;		_menu_cambiar_horario
  2384 ;;		_menu_cambiar_password
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text5
  2389  00DE98                     __ptext5:
  2390                           	opt stack 0
  2391  00DE98                     _mostrar_titulo_menu:
  2392                           	opt stack 24
  2393                           
  2394                           ;main.c: 118: lcd_gotoxy(1,1);
  2395                           
  2396                           ;incstack = 0
  2397  00DE98  0E01               	movlw	1
  2398  00DE9A  6E05               	movwf	lcd_gotoxy@y,c
  2399  00DE9C  0E01               	movlw	1
  2400  00DE9E  EC01  F070         	call	_lcd_gotoxy
  2401                           
  2402                           ;main.c: 119: lcd_putrs(titulo_menu);
  2403  00DEA2  C00B  F009         	movff	mostrar_titulo_menu@titulo_menu,lcd_putrs@ptr
  2404  00DEA6  C00C  F00A         	movff	mostrar_titulo_menu@titulo_menu+1,lcd_putrs@ptr+1
  2405  00DEAA  EC96  F071         	call	_lcd_putrs	;wreg free
  2406  00DEAE  0012               	return		;funcret
  2407  00DEB0                     __end_of_mostrar_titulo_menu:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           postinc1	equ	0xFE6
  2416                           postdec1	equ	0xFE5
  2417                           fsr1h	equ	0xFE2
  2418                           fsr1l	equ	0xFE1
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _mensaje_alarma_activada *****************
  2426 ;; Defined at:
  2427 ;;		line 229 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    5
  2448 ;; This function calls:
  2449 ;;		_lcd_gotoxy
  2450 ;;		_lcd_putrs
  2451 ;; This function is called by:
  2452 ;;		_main
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text6
  2457  00E1A6                     __ptext6:
  2458                           	opt stack 0
  2459  00E1A6                     _mensaje_alarma_activada:
  2460                           	opt stack 25
  2461                           
  2462                           ;main.c: 230: lcd_gotoxy(1,1);
  2463                           
  2464                           ;incstack = 0
  2465  00E1A6  0E01               	movlw	1
  2466  00E1A8  6E05               	movwf	lcd_gotoxy@y,c
  2467  00E1AA  0E01               	movlw	1
  2468  00E1AC  EC01  F070         	call	_lcd_gotoxy
  2469                           
  2470                           ;main.c: 231: lcd_putrs("#### ALARMA ####");
  2471  00E1B0  0E94               	movlw	low STR_20
  2472  00E1B2  6E09               	movwf	lcd_putrs@ptr,c
  2473  00E1B4  0EFF               	movlw	high STR_20
  2474  00E1B6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2475  00E1B8  EC96  F071         	call	_lcd_putrs	;wreg free
  2476                           
  2477                           ;main.c: 232: lcd_gotoxy(1,2);
  2478  00E1BC  0E02               	movlw	2
  2479  00E1BE  6E05               	movwf	lcd_gotoxy@y,c
  2480  00E1C0  0E01               	movlw	1
  2481  00E1C2  EC01  F070         	call	_lcd_gotoxy
  2482                           
  2483                           ;main.c: 233: lcd_putrs("### ACTIVADA ###");
  2484  00E1C6  0E83               	movlw	low STR_21
  2485  00E1C8  6E09               	movwf	lcd_putrs@ptr,c
  2486  00E1CA  0EFF               	movlw	high STR_21
  2487  00E1CC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2488  00E1CE  EC96  F071         	call	_lcd_putrs	;wreg free
  2489  00E1D2  0012               	return		;funcret
  2490  00E1D4                     __end_of_mensaje_alarma_activada:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postinc1	equ	0xFE6
  2499                           postdec1	equ	0xFE5
  2500                           fsr1h	equ	0xFE2
  2501                           fsr1l	equ	0xFE1
  2502                           postinc2	equ	0xFDE
  2503                           postdec2	equ	0xFDD
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _leer_teclado *****************
  2509 ;; Defined at:
  2510 ;;		line 57 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  ocultar         2   61[COMRAM] int 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  i               2   64[COMRAM] int 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;		None               void
  2517 ;; Registers used:
  2518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2527 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2528 ;;Total ram usage:        5 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    8
  2531 ;; This function calls:
  2532 ;;		Absolute function
  2533 ;;		_borrar_anio
  2534 ;;		_borrar_dia
  2535 ;;		_borrar_hora
  2536 ;;		_borrar_mes
  2537 ;;		_borrar_minutos
  2538 ;;		_cambiar_anio
  2539 ;;		_cambiar_dia
  2540 ;;		_cambiar_hora
  2541 ;;		_cambiar_mes
  2542 ;;		_cambiar_minutos
  2543 ;;		_cancelar_cambio_fecha
  2544 ;;		_cancelar_cambio_hora
  2545 ;;		_cancelar_cambio_password
  2546 ;;		_confirmar_actualizar_password
  2547 ;;		_desactivar_alarma
  2548 ;;		_guardar_tecla_presionada
  2549 ;;		_ingresar_comando
  2550 ;;		_lcd_putrs
  2551 ;;		_mostrar_guardar_nuevo_password
  2552 ;;		_mostrar_guardar_password
  2553 ;;		_mostrar_guardar_temporal_password
  2554 ;;		_restaurar_comando
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text7
  2561  00F70E                     __ptext7:
  2562                           	opt stack 0
  2563  00F70E                     _leer_teclado:
  2564                           	opt stack 22
  2565                           
  2566                           ;teclado.c: 58: int i;
  2567                           ;teclado.c: 59: ocultar_teclas = ocultar;
  2568                           
  2569                           ;incstack = 0
  2570  00F70E  C03E  F093         	movff	leer_teclado@ocultar,_ocultar_teclas
  2571  00F712  C03F  F094         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  2572                           
  2573                           ;teclado.c: 61: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  2574  00F716  8089               	bsf	3977,0,c	;volatile
  2575  00F718  9289               	bcf	3977,1,c	;volatile
  2576  00F71A  9489               	bcf	3977,2,c	;volatile
  2577  00F71C  9689               	bcf	3977,3,c	;volatile
  2578  00F71E  0E00               	movlw	0
  2579  00F720  6E42               	movwf	leer_teclado@i+1,c
  2580  00F722  0E01               	movlw	1
  2581  00F724  6E41               	movwf	leer_teclado@i,c
  2582                           
  2583                           ;teclado.c: 62: guardar_tecla_presionada(i);
  2584  00F726  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2585  00F72A  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2586  00F72E  ECCA  F074         	call	_guardar_tecla_presionada	;wreg free
  2587                           
  2588                           ;teclado.c: 63: if (PORTCbits.RC2==1){key='A';while(PORTCbits.RC2==1){};}
  2589  00F732  A482               	btfss	3970,2,c	;volatile
  2590  00F734  D005               	goto	l433
  2591  00F736  0E41               	movlw	65
  2592  00F738  6E49               	movwf	_key,c
  2593  00F73A  D000               	goto	l434
  2594  00F73C                     l434:
  2595  00F73C  B482               	btfsc	3970,2,c	;volatile
  2596  00F73E  D7FE               	goto	l434
  2597  00F740                     l433:
  2598                           
  2599                           ;teclado.c: 65: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  2600  00F740  9089               	bcf	3977,0,c	;volatile
  2601  00F742  8289               	bsf	3977,1,c	;volatile
  2602  00F744  9489               	bcf	3977,2,c	;volatile
  2603  00F746  9689               	bcf	3977,3,c	;volatile
  2604  00F748  0E00               	movlw	0
  2605  00F74A  6E42               	movwf	leer_teclado@i+1,c
  2606  00F74C  0E04               	movlw	4
  2607  00F74E  6E41               	movwf	leer_teclado@i,c
  2608                           
  2609                           ;teclado.c: 66: guardar_tecla_presionada(i);
  2610  00F750  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2611  00F754  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2612  00F758  ECCA  F074         	call	_guardar_tecla_presionada	;wreg free
  2613                           
  2614                           ;teclado.c: 67: if (PORTCbits.RC2==1){key='B';funcion_pulsador_B();while(PORTCbits.RC2==
      +                          1){};}
  2615  00F75C  A482               	btfss	3970,2,c	;volatile
  2616  00F75E  D011               	goto	l437
  2617  00F760  0E42               	movlw	66
  2618  00F762  6E49               	movwf	_key,c
  2619  00F764  D801               	call	u3558
  2620  00F766  D00B               	goto	l438
  2621  00F768                     u3558:
  2622  00F768  0005               	push	
  2623  00F76A  0100               	movlb	0	; () banked
  2624  00F76C  6EFA               	movwf	pclath,c
  2625  00F76E  5183               	movf	_funcion_pulsador_B& (0+255),w,b
  2626  00F770  6EFD               	movwf	tosl,c
  2627  00F772  5184               	movf	(_funcion_pulsador_B+1)& (0+255),w,b
  2628  00F774  6EFE               	movwf	tosh,c
  2629  00F776  50F8               	movf	tblptru,w,c
  2630  00F778  6EFF               	movwf	tosu,c
  2631  00F77A  50FA               	movf	pclath,w,c
  2632  00F77C  0012               	return		;indir
  2633  00F77E                     l438:
  2634  00F77E  B482               	btfsc	3970,2,c	;volatile
  2635  00F780  D7FE               	goto	l438
  2636  00F782                     l437:
  2637                           
  2638                           ;teclado.c: 69: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  2639  00F782  9089               	bcf	3977,0,c	;volatile
  2640  00F784  9289               	bcf	3977,1,c	;volatile
  2641  00F786  8489               	bsf	3977,2,c	;volatile
  2642  00F788  9689               	bcf	3977,3,c	;volatile
  2643  00F78A  0E00               	movlw	0
  2644  00F78C  6E42               	movwf	leer_teclado@i+1,c
  2645  00F78E  0E07               	movlw	7
  2646  00F790  6E41               	movwf	leer_teclado@i,c
  2647                           
  2648                           ;teclado.c: 70: guardar_tecla_presionada(i);
  2649  00F792  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2650  00F796  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2651  00F79A  ECCA  F074         	call	_guardar_tecla_presionada	;wreg free
  2652                           
  2653                           ;teclado.c: 71: if (PORTCbits.RC2==1){key='C';funcion_pulsador_C();while(PORTCbits.RC2==
      +                          1){};}
  2654  00F79E  A482               	btfss	3970,2,c	;volatile
  2655  00F7A0  D011               	goto	l441
  2656  00F7A2  0E43               	movlw	67
  2657  00F7A4  6E49               	movwf	_key,c
  2658  00F7A6  D801               	call	u3588
  2659  00F7A8  D00B               	goto	l442
  2660  00F7AA                     u3588:
  2661  00F7AA  0005               	push	
  2662  00F7AC  0100               	movlb	0	; () banked
  2663  00F7AE  6EFA               	movwf	pclath,c
  2664  00F7B0  5185               	movf	_funcion_pulsador_C& (0+255),w,b
  2665  00F7B2  6EFD               	movwf	tosl,c
  2666  00F7B4  5186               	movf	(_funcion_pulsador_C+1)& (0+255),w,b
  2667  00F7B6  6EFE               	movwf	tosh,c
  2668  00F7B8  50F8               	movf	tblptru,w,c
  2669  00F7BA  6EFF               	movwf	tosu,c
  2670  00F7BC  50FA               	movf	pclath,w,c
  2671  00F7BE  0012               	return		;indir
  2672  00F7C0                     l442:
  2673  00F7C0  B482               	btfsc	3970,2,c	;volatile
  2674  00F7C2  D7FE               	goto	l442
  2675  00F7C4                     l441:
  2676                           
  2677                           ;teclado.c: 73: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2678  00F7C4  9089               	bcf	3977,0,c	;volatile
  2679  00F7C6  9289               	bcf	3977,1,c	;volatile
  2680  00F7C8  9489               	bcf	3977,2,c	;volatile
  2681  00F7CA  8689               	bsf	3977,3,c	;volatile
  2682                           
  2683                           ;teclado.c: 74: {
  2684                           ;teclado.c: 75: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  2685  00F7CC  AA80               	btfss	3968,5,c	;volatile
  2686  00F7CE  D00B               	goto	l445
  2687  00F7D0  0E2A               	movlw	42
  2688  00F7D2  6E49               	movwf	_key,c
  2689  00F7D4  0EF4               	movlw	low STR_25
  2690  00F7D6  6E09               	movwf	lcd_putrs@ptr,c
  2691  00F7D8  0EFF               	movlw	high STR_25
  2692  00F7DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2693  00F7DC  EC96  F071         	call	_lcd_putrs	;wreg free
  2694  00F7E0  D000               	goto	l446
  2695  00F7E2                     l446:
  2696  00F7E2  BA80               	btfsc	3968,5,c	;volatile
  2697  00F7E4  D7FE               	goto	l446
  2698  00F7E6                     l445:
  2699                           
  2700                           ;teclado.c: 76: if (PORTAbits.RA7==1){key=0;puntero_funcion(key);while(PORTAbits.RA7==1)
      +                          {};}
  2701  00F7E6  AE80               	btfss	3968,7,c	;volatile
  2702  00F7E8  D012               	goto	l449
  2703  00F7EA  0E00               	movlw	0
  2704  00F7EC  6E49               	movwf	_key,c
  2705  00F7EE  D801               	call	u3638
  2706  00F7F0  D00C               	goto	l450
  2707  00F7F2                     u3638:
  2708  00F7F2  0005               	push	
  2709  00F7F4  0100               	movlb	0	; () banked
  2710  00F7F6  6EFA               	movwf	pclath,c
  2711  00F7F8  5195               	movf	_puntero_funcion& (0+255),w,b
  2712  00F7FA  6EFD               	movwf	tosl,c
  2713  00F7FC  5196               	movf	(_puntero_funcion+1)& (0+255),w,b
  2714  00F7FE  6EFE               	movwf	tosh,c
  2715  00F800  50F8               	movf	tblptru,w,c
  2716  00F802  6EFF               	movwf	tosu,c
  2717  00F804  50FA               	movf	pclath,w,c
  2718  00F806  5049               	movf	_key,w,c
  2719  00F808  0012               	return		;indir
  2720  00F80A                     l450:
  2721  00F80A  BE80               	btfsc	3968,7,c	;volatile
  2722  00F80C  D7FE               	goto	l450
  2723  00F80E                     l449:
  2724                           
  2725                           ;teclado.c: 77: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  2726  00F80E  AC80               	btfss	3968,6,c	;volatile
  2727  00F810  D00B               	goto	l453
  2728  00F812  0E23               	movlw	35
  2729  00F814  6E49               	movwf	_key,c
  2730  00F816  0E92               	movlw	low (STR_21+15)
  2731  00F818  6E09               	movwf	lcd_putrs@ptr,c
  2732  00F81A  0EFF               	movlw	high (STR_21+15)
  2733  00F81C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2734  00F81E  EC96  F071         	call	_lcd_putrs
  2735  00F822  D000               	goto	l454
  2736  00F824                     l454:
  2737  00F824  BC80               	btfsc	3968,6,c	;volatile
  2738  00F826  D7FE               	goto	l454
  2739  00F828                     l453:
  2740                           
  2741                           ;teclado.c: 78: if (PORTCbits.RC2==1){key='D';funcion_pulsador_D();while(PORTCbits.RC2==
      +                          1){};}
  2742  00F828  A482               	btfss	3970,2,c	;volatile
  2743  00F82A  D013               	goto	l4236
  2744  00F82C  0E44               	movlw	68
  2745  00F82E  6E49               	movwf	_key,c
  2746  00F830  D801               	call	u3688
  2747  00F832  D00B               	goto	l458
  2748  00F834                     u3688:
  2749  00F834  0005               	push	
  2750  00F836  0100               	movlb	0	; () banked
  2751  00F838  6EFA               	movwf	pclath,c
  2752  00F83A  5187               	movf	_funcion_pulsador_D& (0+255),w,b
  2753  00F83C  6EFD               	movwf	tosl,c
  2754  00F83E  5188               	movf	(_funcion_pulsador_D+1)& (0+255),w,b
  2755  00F840  6EFE               	movwf	tosh,c
  2756  00F842  50F8               	movf	tblptru,w,c
  2757  00F844  6EFF               	movwf	tosu,c
  2758  00F846  50FA               	movf	pclath,w,c
  2759  00F848  0012               	return		;indir
  2760  00F84A                     l458:
  2761  00F84A  A482               	btfss	3970,2,c	;volatile
  2762  00F84C  D002               	goto	l4236
  2763  00F84E  D7FD               	goto	l458
  2764  00F850  D000               	goto	l4236
  2765  00F852                     l4236:
  2766                           
  2767                           ;teclado.c: 79: }
  2768                           ;teclado.c: 80: _delay((unsigned long)((98)*(8000000/4000.0)));
  2769  00F852  0EFF               	movlw	255
  2770  00F854  6E40               	movwf	??_leer_teclado& (0+255),c
  2771  00F856  0E8A               	movlw	138
  2772  00F858                     u3777:
  2773  00F858  2EE8               	decfsz	wreg,f,c
  2774  00F85A  D7FE               	goto	u3777
  2775  00F85C  2E40               	decfsz	??_leer_teclado& (0+255),f,c
  2776  00F85E  D7FC               	goto	u3777
  2777  00F860  D000               	nop2	
  2778  00F862  0012               	return		;funcret
  2779  00F864                     __end_of_leer_teclado:
  2780                           	opt stack 0
  2781                           tosu	equ	0xFFF
  2782                           tosh	equ	0xFFE
  2783                           tosl	equ	0xFFD
  2784                           pclath	equ	0xFFA
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           postinc0	equ	0xFEE
  2790                           wreg	equ	0xFE8
  2791                           postinc1	equ	0xFE6
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _guardar_tecla_presionada *****************
  2802 ;; Defined at:
  2803 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  i               2   59[COMRAM] int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;		None               void
  2810 ;; Registers used:
  2811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2821 ;;Total ram usage:        2 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    7
  2824 ;; This function calls:
  2825 ;;		Absolute function
  2826 ;;		_cambiar_anio
  2827 ;;		_cambiar_dia
  2828 ;;		_cambiar_hora
  2829 ;;		_cambiar_mes
  2830 ;;		_cambiar_minutos
  2831 ;;		_confirmar_actualizar_password
  2832 ;;		_ingresar_comando
  2833 ;;		_mostrar_guardar_nuevo_password
  2834 ;;		_mostrar_guardar_password
  2835 ;;		_mostrar_guardar_temporal_password
  2836 ;; This function is called by:
  2837 ;;		_leer_teclado
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text8
  2842  00E994                     __ptext8:
  2843                           	opt stack 0
  2844  00E994                     _guardar_tecla_presionada:
  2845                           	opt stack 22
  2846                           
  2847                           ;teclado.c: 52: if (PORTAbits.RA5==1){key=i;puntero_funcion(key);while(PORTAbits.RA5==1)
      +                          {};}
  2848                           
  2849                           ;incstack = 0
  2850  00E994  AA80               	btfss	3968,5,c	;volatile
  2851  00E996  D012               	goto	l418
  2852  00E998  C03C  F049         	movff	guardar_tecla_presionada@i,_key
  2853  00E99C  D801               	call	u3338
  2854  00E99E  D00C               	goto	l419
  2855  00E9A0                     u3338:
  2856  00E9A0  0005               	push	
  2857  00E9A2  0100               	movlb	0	; () banked
  2858  00E9A4  6EFA               	movwf	pclath,c
  2859  00E9A6  5195               	movf	_puntero_funcion& (0+255),w,b
  2860  00E9A8  6EFD               	movwf	tosl,c
  2861  00E9AA  5196               	movf	(_puntero_funcion+1)& (0+255),w,b
  2862  00E9AC  6EFE               	movwf	tosh,c
  2863  00E9AE  50F8               	movf	tblptru,w,c
  2864  00E9B0  6EFF               	movwf	tosu,c
  2865  00E9B2  50FA               	movf	pclath,w,c
  2866  00E9B4  5049               	movf	_key,w,c
  2867  00E9B6  0012               	return		;indir
  2868  00E9B8                     l419:
  2869  00E9B8  BA80               	btfsc	3968,5,c	;volatile
  2870  00E9BA  D7FE               	goto	l419
  2871  00E9BC                     l418:
  2872                           
  2873                           ;teclado.c: 53: if (PORTAbits.RA7==1){key=(i)+1;puntero_funcion(key);while(PORTAbits.RA7
      +                          ==1){};}
  2874  00E9BC  AE80               	btfss	3968,7,c	;volatile
  2875  00E9BE  D012               	goto	l422
  2876  00E9C0  283C               	incf	guardar_tecla_presionada@i,w,c
  2877  00E9C2  6E49               	movwf	_key,c
  2878  00E9C4  D801               	call	u3368
  2879  00E9C6  D00C               	goto	l423
  2880  00E9C8                     u3368:
  2881  00E9C8  0005               	push	
  2882  00E9CA  0100               	movlb	0	; () banked
  2883  00E9CC  6EFA               	movwf	pclath,c
  2884  00E9CE  5195               	movf	_puntero_funcion& (0+255),w,b
  2885  00E9D0  6EFD               	movwf	tosl,c
  2886  00E9D2  5196               	movf	(_puntero_funcion+1)& (0+255),w,b
  2887  00E9D4  6EFE               	movwf	tosh,c
  2888  00E9D6  50F8               	movf	tblptru,w,c
  2889  00E9D8  6EFF               	movwf	tosu,c
  2890  00E9DA  50FA               	movf	pclath,w,c
  2891  00E9DC  5049               	movf	_key,w,c
  2892  00E9DE  0012               	return		;indir
  2893  00E9E0                     l423:
  2894  00E9E0  BE80               	btfsc	3968,7,c	;volatile
  2895  00E9E2  D7FE               	goto	l423
  2896  00E9E4                     l422:
  2897                           
  2898                           ;teclado.c: 54: if (PORTAbits.RA6==1){key=(i)+2;puntero_funcion(key);while(PORTAbits.RA6
      +                          ==1){};}
  2899  00E9E4  AC80               	btfss	3968,6,c	;volatile
  2900  00E9E6  0012               	return	
  2901  00E9E8  503C               	movf	guardar_tecla_presionada@i,w,c
  2902  00E9EA  0F02               	addlw	2
  2903  00E9EC  6E49               	movwf	_key,c
  2904  00E9EE  D801               	call	u3398
  2905  00E9F0  D00C               	goto	l427
  2906  00E9F2                     u3398:
  2907  00E9F2  0005               	push	
  2908  00E9F4  0100               	movlb	0	; () banked
  2909  00E9F6  6EFA               	movwf	pclath,c
  2910  00E9F8  5195               	movf	_puntero_funcion& (0+255),w,b
  2911  00E9FA  6EFD               	movwf	tosl,c
  2912  00E9FC  5196               	movf	(_puntero_funcion+1)& (0+255),w,b
  2913  00E9FE  6EFE               	movwf	tosh,c
  2914  00EA00  50F8               	movf	tblptru,w,c
  2915  00EA02  6EFF               	movwf	tosu,c
  2916  00EA04  50FA               	movf	pclath,w,c
  2917  00EA06  5049               	movf	_key,w,c
  2918  00EA08  0012               	return		;indir
  2919  00EA0A                     l427:
  2920  00EA0A  AC80               	btfss	3968,6,c	;volatile
  2921  00EA0C  0012               	return	
  2922  00EA0E  D7FD               	goto	l427
  2923  00EA10  0012               	return	
  2924  00EA12  0012               	return		;funcret
  2925  00EA14                     __end_of_guardar_tecla_presionada:
  2926                           	opt stack 0
  2927                           tosu	equ	0xFFF
  2928                           tosh	equ	0xFFE
  2929                           tosl	equ	0xFFD
  2930                           pclath	equ	0xFFA
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           postinc0	equ	0xFEE
  2936                           wreg	equ	0xFE8
  2937                           postinc1	equ	0xFE6
  2938                           postdec1	equ	0xFE5
  2939                           fsr1h	equ	0xFE2
  2940                           fsr1l	equ	0xFE1
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _ingresar_comando *****************
  2948 ;; Defined at:
  2949 ;;		line 150 in file "main.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  key             1    wreg     unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  key             1   58[COMRAM] unsigned char 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;Total ram usage:        1 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    3
  2970 ;; This function calls:
  2971 ;;		_guardar_comando
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;;		_guardar_tecla_presionada
  2975 ;;		_leer_teclado
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text9
  2980  00DDAC                     __ptext9:
  2981                           	opt stack 0
  2982  00DDAC                     _ingresar_comando:
  2983                           	opt stack 26
  2984                           
  2985                           ;incstack = 0
  2986                           ;ingresar_comando@key stored from wreg
  2987  00DDAC  6E3B               	movwf	ingresar_comando@key,c
  2988                           
  2989                           ;main.c: 151: guardar_comando(key);
  2990  00DDAE  503B               	movf	ingresar_comando@key,w,c
  2991  00DDB0  EC1B  F072         	call	_guardar_comando
  2992  00DDB4  0012               	return		;funcret
  2993  00DDB6                     __end_of_ingresar_comando:
  2994                           	opt stack 0
  2995                           tosu	equ	0xFFF
  2996                           tosh	equ	0xFFE
  2997                           tosl	equ	0xFFD
  2998                           pclath	equ	0xFFA
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postinc1	equ	0xFE6
  3006                           postdec1	equ	0xFE5
  3007                           fsr1h	equ	0xFE2
  3008                           fsr1l	equ	0xFE1
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _confirmar_actualizar_password *****************
  3016 ;; Defined at:
  3017 ;;		line 143 in file "main.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  tecla           1    wreg     unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  tecla           1   56[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    6
  3038 ;; This function calls:
  3039 ;;		_actualizar_password
  3040 ;;		_imprimir_tecla
  3041 ;;		_sprintf
  3042 ;; This function is called by:
  3043 ;;		_menu_cambiar_password
  3044 ;;		_guardar_tecla_presionada
  3045 ;;		_leer_teclado
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text10
  3050  00E14C                     __ptext10:
  3051                           	opt stack 0
  3052  00E14C                     _confirmar_actualizar_password:
  3053                           	opt stack 22
  3054                           
  3055                           ;incstack = 0
  3056                           ;confirmar_actualizar_password@tecla stored from wreg
  3057  00E14C  6E39               	movwf	confirmar_actualizar_password@tecla,c
  3058                           
  3059                           ;main.c: 145: imprimir_tecla(tecla);
  3060  00E14E  5039               	movf	confirmar_actualizar_password@tecla,w,c
  3061  00E150  EC03  F071         	call	_imprimir_tecla
  3062                           
  3063                           ;main.c: 146: sprintf(buffer2,"%01u",tecla);
  3064  00E154  0EA1               	movlw	low _buffer2
  3065  00E156  6E0D               	movwf	sprintf@sp,c
  3066  00E158  0E00               	movlw	high _buffer2
  3067  00E15A  6E0E               	movwf	sprintf@sp+1,c
  3068  00E15C  0EE8               	movlw	low STR_8
  3069  00E15E  6E0F               	movwf	sprintf@f,c
  3070  00E160  0EFF               	movlw	high STR_8
  3071  00E162  6E10               	movwf	sprintf@f+1,c
  3072  00E164  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  3073  00E168  6A12               	clrf	?_sprintf+5,c
  3074  00E16A  ECD5  F07D         	call	_sprintf	;wreg free
  3075                           
  3076                           ;main.c: 147: actualizar_password(buffer2[0]);
  3077  00E16E  0100               	movlb	0	; () banked
  3078  00E170  51A1               	movf	_buffer2& (0+255),w,b
  3079  00E172  EC6F  F076         	call	_actualizar_password
  3080  00E176  0012               	return		;funcret
  3081  00E178                     __end_of_confirmar_actualizar_password:
  3082                           	opt stack 0
  3083                           tosu	equ	0xFFF
  3084                           tosh	equ	0xFFE
  3085                           tosl	equ	0xFFD
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postinc1	equ	0xFE6
  3094                           postdec1	equ	0xFE5
  3095                           fsr1h	equ	0xFE2
  3096                           fsr1l	equ	0xFE1
  3097                           postinc2	equ	0xFDE
  3098                           postdec2	equ	0xFDD
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _mostrar_guardar_nuevo_password *****************
  3104 ;; Defined at:
  3105 ;;		line 136 in file "main.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  tecla           1    wreg     unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  tecla           1   56[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3123 ;;Total ram usage:        1 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    6
  3126 ;; This function calls:
  3127 ;;		_guardar_nuevo_password
  3128 ;;		_imprimir_tecla
  3129 ;;		_sprintf
  3130 ;; This function is called by:
  3131 ;;		_menu_cambiar_password
  3132 ;;		_guardar_tecla_presionada
  3133 ;;		_leer_teclado
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text11
  3138  00E120                     __ptext11:
  3139                           	opt stack 0
  3140  00E120                     _mostrar_guardar_nuevo_password:
  3141                           	opt stack 23
  3142                           
  3143                           ;incstack = 0
  3144                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  3145  00E120  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  3146                           
  3147                           ;main.c: 138: imprimir_tecla(tecla);
  3148  00E122  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  3149  00E124  EC03  F071         	call	_imprimir_tecla
  3150                           
  3151                           ;main.c: 139: sprintf(buffer2,"%01u",tecla);
  3152  00E128  0EA1               	movlw	low _buffer2
  3153  00E12A  6E0D               	movwf	sprintf@sp,c
  3154  00E12C  0E00               	movlw	high _buffer2
  3155  00E12E  6E0E               	movwf	sprintf@sp+1,c
  3156  00E130  0EE8               	movlw	low STR_8
  3157  00E132  6E0F               	movwf	sprintf@f,c
  3158  00E134  0EFF               	movlw	high STR_8
  3159  00E136  6E10               	movwf	sprintf@f+1,c
  3160  00E138  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  3161  00E13C  6A12               	clrf	?_sprintf+5,c
  3162  00E13E  ECD5  F07D         	call	_sprintf	;wreg free
  3163                           
  3164                           ;main.c: 140: guardar_nuevo_password(*buffer2);
  3165  00E142  0100               	movlb	0	; () banked
  3166  00E144  51A1               	movf	_buffer2& (0+255),w,b
  3167  00E146  EC74  F06F         	call	_guardar_nuevo_password
  3168  00E14A  0012               	return		;funcret
  3169  00E14C                     __end_of_mostrar_guardar_nuevo_password:
  3170                           	opt stack 0
  3171                           tosu	equ	0xFFF
  3172                           tosh	equ	0xFFE
  3173                           tosl	equ	0xFFD
  3174                           pclath	equ	0xFFA
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           postinc0	equ	0xFEE
  3180                           wreg	equ	0xFE8
  3181                           postinc1	equ	0xFE6
  3182                           postdec1	equ	0xFE5
  3183                           fsr1h	equ	0xFE2
  3184                           fsr1l	equ	0xFE1
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _mostrar_guardar_password *****************
  3192 ;; Defined at:
  3193 ;;		line 122 in file "main.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  tecla           1    wreg     unsigned char 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  tecla           1   56[COMRAM] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;Total ram usage:        1 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    6
  3214 ;; This function calls:
  3215 ;;		_guardar_current_password
  3216 ;;		_imprimir_tecla
  3217 ;;		_sprintf
  3218 ;; This function is called by:
  3219 ;;		_desactivar_alarma
  3220 ;;		_main
  3221 ;;		_guardar_tecla_presionada
  3222 ;;		_leer_teclado
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text12
  3227  00E0F4                     __ptext12:
  3228                           	opt stack 0
  3229  00E0F4                     _mostrar_guardar_password:
  3230                           	opt stack 23
  3231                           
  3232                           ;incstack = 0
  3233                           ;mostrar_guardar_password@tecla stored from wreg
  3234  00E0F4  6E39               	movwf	mostrar_guardar_password@tecla,c
  3235                           
  3236                           ;main.c: 124: imprimir_tecla(tecla);
  3237  00E0F6  5039               	movf	mostrar_guardar_password@tecla,w,c
  3238  00E0F8  EC03  F071         	call	_imprimir_tecla
  3239                           
  3240                           ;main.c: 125: sprintf(buffer2,"%01u",tecla);
  3241  00E0FC  0EA1               	movlw	low _buffer2
  3242  00E0FE  6E0D               	movwf	sprintf@sp,c
  3243  00E100  0E00               	movlw	high _buffer2
  3244  00E102  6E0E               	movwf	sprintf@sp+1,c
  3245  00E104  0EE8               	movlw	low STR_8
  3246  00E106  6E0F               	movwf	sprintf@f,c
  3247  00E108  0EFF               	movlw	high STR_8
  3248  00E10A  6E10               	movwf	sprintf@f+1,c
  3249  00E10C  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  3250  00E110  6A12               	clrf	?_sprintf+5,c
  3251  00E112  ECD5  F07D         	call	_sprintf	;wreg free
  3252                           
  3253                           ;main.c: 126: guardar_current_password(*buffer2);
  3254  00E116  0100               	movlb	0	; () banked
  3255  00E118  51A1               	movf	_buffer2& (0+255),w,b
  3256  00E11A  EC66  F06F         	call	_guardar_current_password
  3257  00E11E  0012               	return		;funcret
  3258  00E120                     __end_of_mostrar_guardar_password:
  3259                           	opt stack 0
  3260                           tosu	equ	0xFFF
  3261                           tosh	equ	0xFFE
  3262                           tosl	equ	0xFFD
  3263                           pclath	equ	0xFFA
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           postinc1	equ	0xFE6
  3271                           postdec1	equ	0xFE5
  3272                           fsr1h	equ	0xFE2
  3273                           fsr1l	equ	0xFE1
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _cambiar_hora *****************
  3281 ;; Defined at:
  3282 ;;		line 170 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  tecla           1    wreg     unsigned char 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  tecla           1   54[COMRAM] unsigned char 
  3287 ;;  validacion      2   52[COMRAM] int 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;		None               void
  3290 ;; Registers used:
  3291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3298 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;Total ram usage:        3 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    6
  3304 ;; This function calls:
  3305 ;;		_guardar_elemento
  3306 ;; This function is called by:
  3307 ;;		_menu_cambiar_horario
  3308 ;;		_guardar_tecla_presionada
  3309 ;;		_leer_teclado
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text13
  3314  00E496                     __ptext13:
  3315                           	opt stack 0
  3316  00E496                     _cambiar_hora:
  3317                           	opt stack 22
  3318                           
  3319                           ;incstack = 0
  3320                           ;cambiar_hora@tecla stored from wreg
  3321  00E496  6E37               	movwf	cambiar_hora@tecla,c
  3322                           
  3323                           ;fecha.c: 172: valor_min = 0;
  3324  00E498  0E00               	movlw	0
  3325  00E49A  0100               	movlb	0	; () banked
  3326  00E49C  6FA0               	movwf	(fecha@valor_min+1)& (0+255),b
  3327  00E49E  0E00               	movlw	0
  3328  00E4A0  6F9F               	movwf	fecha@valor_min& (0+255),b
  3329                           
  3330                           ;fecha.c: 173: valor_max = 23;
  3331  00E4A2  0E00               	movlw	0
  3332  00E4A4  0100               	movlb	0	; () banked
  3333  00E4A6  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  3334  00E4A8  0E17               	movlw	23
  3335  00E4AA  6F9D               	movwf	fecha@valor_max& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;fecha.c: 175: int validacion = tamanio_hora < 3 - 1;
  3339  00E4AC  BE55               	btfsc	_tamanio_hora+1,7,c
  3340  00E4AE  D006               	goto	u3201
  3341  00E4B0  5055               	movf	_tamanio_hora+1,w,c
  3342  00E4B2  E106               	bnz	u3200
  3343  00E4B4  0E02               	movlw	2
  3344  00E4B6  5C54               	subwf	_tamanio_hora,w,c
  3345  00E4B8  B0D8               	btfsc	status,0,c
  3346  00E4BA  D002               	goto	u3200
  3347  00E4BC                     u3201:
  3348  00E4BC  0E01               	movlw	1
  3349  00E4BE  D001               	goto	u3210
  3350  00E4C0                     u3200:
  3351  00E4C0  0E00               	movlw	0
  3352  00E4C2                     u3210:
  3353  00E4C2  6E35               	movwf	cambiar_hora@validacion,c
  3354  00E4C4  6A36               	clrf	cambiar_hora@validacion+1,c
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;fecha.c: 176: guardar_elemento(tecla,hour,&tamanio_hora,validacion,&hora,actualizar_hor
      +                          a);
  3358  00E4C6  0ED0               	movlw	low fecha@hour
  3359  00E4C8  6E24               	movwf	guardar_elemento@array,c
  3360  00E4CA  0E00               	movlw	high fecha@hour
  3361  00E4CC  6E25               	movwf	guardar_elemento@array+1,c
  3362  00E4CE  0E54               	movlw	low _tamanio_hora
  3363  00E4D0  6E26               	movwf	guardar_elemento@tamanio_array,c
  3364  00E4D2  0E00               	movlw	high _tamanio_hora
  3365  00E4D4  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3366  00E4D6  C035  F028         	movff	cambiar_hora@validacion,guardar_elemento@validacion
  3367  00E4DA  C036  F029         	movff	cambiar_hora@validacion+1,guardar_elemento@validacion+1
  3368  00E4DE  0EEF               	movlw	low _hora
  3369  00E4E0  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3370  00E4E2  0E00               	movlw	high _hora
  3371  00E4E4  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3372  00E4E6  0EE0               	movlw	low _actualizar_hora
  3373  00E4E8  6E2C               	movwf	guardar_elemento@doit,c
  3374  00E4EA  0EDF               	movlw	high _actualizar_hora
  3375  00E4EC  6E2D               	movwf	guardar_elemento@doit+1,c
  3376  00E4EE  5037               	movf	cambiar_hora@tecla,w,c
  3377  00E4F0  ECF5  F07C         	call	_guardar_elemento
  3378  00E4F4  0012               	return		;funcret
  3379  00E4F6                     __end_of_cambiar_hora:
  3380                           	opt stack 0
  3381                           tosu	equ	0xFFF
  3382                           tosh	equ	0xFFE
  3383                           tosl	equ	0xFFD
  3384                           pclath	equ	0xFFA
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postinc1	equ	0xFE6
  3392                           postdec1	equ	0xFE5
  3393                           fsr1h	equ	0xFE2
  3394                           fsr1l	equ	0xFE1
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _cambiar_minutos *****************
  3402 ;; Defined at:
  3403 ;;		line 179 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  tecla           1    wreg     unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  tecla           1   54[COMRAM] unsigned char 
  3408 ;;  validacion      2   52[COMRAM] int 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3419 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3421 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3422 ;;Total ram usage:        4 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		_guardar_elemento
  3427 ;; This function is called by:
  3428 ;;		_menu_cambiar_horario
  3429 ;;		_guardar_tecla_presionada
  3430 ;;		_leer_teclado
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text14
  3435  00E642                     __ptext14:
  3436                           	opt stack 0
  3437  00E642                     _cambiar_minutos:
  3438                           	opt stack 22
  3439                           
  3440                           ;incstack = 0
  3441                           ;cambiar_minutos@tecla stored from wreg
  3442  00E642  6E37               	movwf	cambiar_minutos@tecla,c
  3443                           
  3444                           ;fecha.c: 181: valor_min = 0;
  3445  00E644  0E00               	movlw	0
  3446  00E646  0100               	movlb	0	; () banked
  3447  00E648  6FA0               	movwf	(fecha@valor_min+1)& (0+255),b
  3448  00E64A  0E00               	movlw	0
  3449  00E64C  6F9F               	movwf	fecha@valor_min& (0+255),b
  3450                           
  3451                           ;fecha.c: 182: valor_max = 59;
  3452  00E64E  0E00               	movlw	0
  3453  00E650  0100               	movlb	0	; () banked
  3454  00E652  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  3455  00E654  0E3B               	movlw	59
  3456  00E656  6F9D               	movwf	fecha@valor_max& (0+255),b
  3457                           
  3458                           ;fecha.c: 184: int validacion = (tamanio_minutos < 3 - 1 && tamanio_hora == 0);
  3459  00E658  0E00               	movlw	0
  3460  00E65A  6E38               	movwf	_cambiar_minutos$1414,c
  3461                           
  3462                           ; BSR set to: 0
  3463  00E65C  0100               	movlb	0	; () banked
  3464  00E65E  BFDF               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  3465  00E660  D008               	goto	l3850
  3466  00E662  0100               	movlb	0	; () banked
  3467  00E664  51DF               	movf	(_tamanio_minutos+1)& (0+255),w,b
  3468  00E666  E10C               	bnz	l3854
  3469  00E668  0E02               	movlw	2
  3470  00E66A  0100               	movlb	0	; () banked
  3471  00E66C  5DDE               	subwf	_tamanio_minutos& (0+255),w,b
  3472  00E66E  B0D8               	btfsc	status,0,c
  3473  00E670  D007               	goto	l3854
  3474  00E672                     l3850:
  3475                           
  3476                           ; BSR set to: 0
  3477  00E672  5054               	movf	_tamanio_hora,w,c
  3478  00E674  1055               	iorwf	_tamanio_hora+1,w,c
  3479  00E676  A4D8               	btfss	status,2,c
  3480  00E678  D003               	goto	l3854
  3481                           
  3482                           ; BSR set to: 0
  3483  00E67A  0E01               	movlw	1
  3484  00E67C  6E38               	movwf	_cambiar_minutos$1414,c
  3485  00E67E  D000               	goto	l3854
  3486  00E680                     l3854:
  3487                           
  3488                           ; BSR set to: 0
  3489  00E680  C038  F035         	movff	_cambiar_minutos$1414,cambiar_minutos@validacion
  3490  00E684  6A36               	clrf	cambiar_minutos@validacion+1,c
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;fecha.c: 185: guardar_elemento(tecla,minutes,&tamanio_minutos,validacion,&minuto,actual
      +                          izar_minutos);
  3494  00E686  0ED3               	movlw	low fecha@minutes
  3495  00E688  6E24               	movwf	guardar_elemento@array,c
  3496  00E68A  0E00               	movlw	high fecha@minutes
  3497  00E68C  6E25               	movwf	guardar_elemento@array+1,c
  3498  00E68E  0EDE               	movlw	low _tamanio_minutos
  3499  00E690  6E26               	movwf	guardar_elemento@tamanio_array,c
  3500  00E692  0E00               	movlw	high _tamanio_minutos
  3501  00E694  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3502  00E696  C035  F028         	movff	cambiar_minutos@validacion,guardar_elemento@validacion
  3503  00E69A  C036  F029         	movff	cambiar_minutos@validacion+1,guardar_elemento@validacion+1
  3504  00E69E  0EF1               	movlw	low _minuto
  3505  00E6A0  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3506  00E6A2  0E00               	movlw	high _minuto
  3507  00E6A4  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3508  00E6A6  0E7C               	movlw	low _actualizar_minutos
  3509  00E6A8  6E2C               	movwf	guardar_elemento@doit,c
  3510  00E6AA  0EDF               	movlw	high _actualizar_minutos
  3511  00E6AC  6E2D               	movwf	guardar_elemento@doit+1,c
  3512  00E6AE  5037               	movf	cambiar_minutos@tecla,w,c
  3513  00E6B0  ECF5  F07C         	call	_guardar_elemento
  3514  00E6B4  0012               	return		;funcret
  3515  00E6B6                     __end_of_cambiar_minutos:
  3516                           	opt stack 0
  3517                           tosu	equ	0xFFF
  3518                           tosh	equ	0xFFE
  3519                           tosl	equ	0xFFD
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postinc1	equ	0xFE6
  3528                           postdec1	equ	0xFE5
  3529                           fsr1h	equ	0xFE2
  3530                           fsr1l	equ	0xFE1
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _cambiar_dia *****************
  3538 ;; Defined at:
  3539 ;;		line 91 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  tecla           1    wreg     unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  tecla           1   54[COMRAM] unsigned char 
  3544 ;;  validacion      2   52[COMRAM] int 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;		None               void
  3547 ;; Registers used:
  3548 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3555 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3557 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3558 ;;Total ram usage:        3 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    6
  3561 ;; This function calls:
  3562 ;;		_guardar_elemento
  3563 ;;		_obtener_dia_mes
  3564 ;; This function is called by:
  3565 ;;		_menu_cambiar_fecha
  3566 ;;		_guardar_tecla_presionada
  3567 ;;		_leer_teclado
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text15
  3572  00E380                     __ptext15:
  3573                           	opt stack 0
  3574  00E380                     _cambiar_dia:
  3575                           	opt stack 22
  3576                           
  3577                           ;incstack = 0
  3578                           ;cambiar_dia@tecla stored from wreg
  3579  00E380  6E37               	movwf	cambiar_dia@tecla,c
  3580                           
  3581                           ;fecha.c: 93: valor_min = 1;
  3582  00E382  0E00               	movlw	0
  3583  00E384  0100               	movlb	0	; () banked
  3584  00E386  6FA0               	movwf	(fecha@valor_min+1)& (0+255),b
  3585  00E388  0E01               	movlw	1
  3586  00E38A  6F9F               	movwf	fecha@valor_min& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;fecha.c: 94: obtener_dia_mes();
  3590  00E38C  ECBF  F078         	call	_obtener_dia_mes	;wreg free
  3591                           
  3592                           ;fecha.c: 96: int validacion = tamanio_dia < 3 - 1;
  3593  00E390  BE53               	btfsc	_tamanio_dia+1,7,c
  3594  00E392  D006               	goto	u3131
  3595  00E394  5053               	movf	_tamanio_dia+1,w,c
  3596  00E396  E106               	bnz	u3130
  3597  00E398  0E02               	movlw	2
  3598  00E39A  5C52               	subwf	_tamanio_dia,w,c
  3599  00E39C  B0D8               	btfsc	status,0,c
  3600  00E39E  D002               	goto	u3130
  3601  00E3A0                     u3131:
  3602  00E3A0  0E01               	movlw	1
  3603  00E3A2  D001               	goto	u3140
  3604  00E3A4                     u3130:
  3605  00E3A4  0E00               	movlw	0
  3606  00E3A6                     u3140:
  3607  00E3A6  6E35               	movwf	cambiar_dia@validacion,c
  3608  00E3A8  6A36               	clrf	cambiar_dia@validacion+1,c
  3609                           
  3610                           ;fecha.c: 97: guardar_elemento(tecla,day,&tamanio_dia,validacion,&dia,actualiza_dia);
  3611  00E3AA  0ECD               	movlw	low fecha@day
  3612  00E3AC  6E24               	movwf	guardar_elemento@array,c
  3613  00E3AE  0E00               	movlw	high fecha@day
  3614  00E3B0  6E25               	movwf	guardar_elemento@array+1,c
  3615  00E3B2  0E52               	movlw	low _tamanio_dia
  3616  00E3B4  6E26               	movwf	guardar_elemento@tamanio_array,c
  3617  00E3B6  0E00               	movlw	high _tamanio_dia
  3618  00E3B8  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3619  00E3BA  C035  F028         	movff	cambiar_dia@validacion,guardar_elemento@validacion
  3620  00E3BE  C036  F029         	movff	cambiar_dia@validacion+1,guardar_elemento@validacion+1
  3621  00E3C2  0EED               	movlw	low _dia
  3622  00E3C4  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3623  00E3C6  0E00               	movlw	high _dia
  3624  00E3C8  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3625  00E3CA  0E20               	movlw	low _actualiza_dia
  3626  00E3CC  6E2C               	movwf	guardar_elemento@doit,c
  3627  00E3CE  0EDF               	movlw	high _actualiza_dia
  3628  00E3D0  6E2D               	movwf	guardar_elemento@doit+1,c
  3629  00E3D2  5037               	movf	cambiar_dia@tecla,w,c
  3630  00E3D4  ECF5  F07C         	call	_guardar_elemento
  3631  00E3D8  0012               	return		;funcret
  3632  00E3DA                     __end_of_cambiar_dia:
  3633                           	opt stack 0
  3634                           tosu	equ	0xFFF
  3635                           tosh	equ	0xFFE
  3636                           tosl	equ	0xFFD
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postinc1	equ	0xFE6
  3645                           postdec1	equ	0xFE5
  3646                           fsr1h	equ	0xFE2
  3647                           fsr1l	equ	0xFE1
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _cambiar_mes *****************
  3655 ;; Defined at:
  3656 ;;		line 101 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  tecla           1    wreg     unsigned char 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  tecla           1   54[COMRAM] unsigned char 
  3661 ;;  validacion      2   52[COMRAM] int 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;		None               void
  3664 ;; Registers used:
  3665 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3672 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3674 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3675 ;;Total ram usage:        4 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    6
  3678 ;; This function calls:
  3679 ;;		_guardar_elemento
  3680 ;; This function is called by:
  3681 ;;		_menu_cambiar_fecha
  3682 ;;		_guardar_tecla_presionada
  3683 ;;		_leer_teclado
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text16
  3688  00E564                     __ptext16:
  3689                           	opt stack 0
  3690  00E564                     _cambiar_mes:
  3691                           	opt stack 22
  3692                           
  3693                           ;incstack = 0
  3694                           ;cambiar_mes@tecla stored from wreg
  3695  00E564  6E37               	movwf	cambiar_mes@tecla,c
  3696                           
  3697                           ;fecha.c: 103: valor_min = 1;
  3698  00E566  0E00               	movlw	0
  3699  00E568  0100               	movlb	0	; () banked
  3700  00E56A  6FA0               	movwf	(fecha@valor_min+1)& (0+255),b
  3701  00E56C  0E01               	movlw	1
  3702  00E56E  6F9F               	movwf	fecha@valor_min& (0+255),b
  3703                           
  3704                           ;fecha.c: 104: valor_max = 12;
  3705  00E570  0E00               	movlw	0
  3706  00E572  0100               	movlb	0	; () banked
  3707  00E574  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  3708  00E576  0E0C               	movlw	12
  3709  00E578  6F9D               	movwf	fecha@valor_max& (0+255),b
  3710                           
  3711                           ;fecha.c: 106: int validacion = (tamanio_mes < 3 - 1 && tamanio_dia == 0);
  3712  00E57A  0E00               	movlw	0
  3713  00E57C  6E38               	movwf	_cambiar_mes$1391,c
  3714                           
  3715                           ; BSR set to: 0
  3716  00E57E  BE57               	btfsc	_tamanio_mes+1,7,c
  3717  00E580  D006               	goto	l3818
  3718  00E582  5057               	movf	_tamanio_mes+1,w,c
  3719  00E584  E10B               	bnz	l3822
  3720  00E586  0E02               	movlw	2
  3721  00E588  5C56               	subwf	_tamanio_mes,w,c
  3722  00E58A  B0D8               	btfsc	status,0,c
  3723  00E58C  D007               	goto	l3822
  3724  00E58E                     l3818:
  3725                           
  3726                           ; BSR set to: 0
  3727  00E58E  5052               	movf	_tamanio_dia,w,c
  3728  00E590  1053               	iorwf	_tamanio_dia+1,w,c
  3729  00E592  A4D8               	btfss	status,2,c
  3730  00E594  D003               	goto	l3822
  3731                           
  3732                           ; BSR set to: 0
  3733  00E596  0E01               	movlw	1
  3734  00E598  6E38               	movwf	_cambiar_mes$1391,c
  3735  00E59A  D000               	goto	l3822
  3736  00E59C                     l3822:
  3737                           
  3738                           ; BSR set to: 0
  3739  00E59C  C038  F035         	movff	_cambiar_mes$1391,cambiar_mes@validacion
  3740  00E5A0  6A36               	clrf	cambiar_mes@validacion+1,c
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;fecha.c: 107: guardar_elemento(tecla,month,&tamanio_mes,validacion,&mes,actualiza_eleme
      +                          nto);
  3744  00E5A2  0ED6               	movlw	low fecha@month
  3745  00E5A4  6E24               	movwf	guardar_elemento@array,c
  3746  00E5A6  0E00               	movlw	high fecha@month
  3747  00E5A8  6E25               	movwf	guardar_elemento@array+1,c
  3748  00E5AA  0E56               	movlw	low _tamanio_mes
  3749  00E5AC  6E26               	movwf	guardar_elemento@tamanio_array,c
  3750  00E5AE  0E00               	movlw	high _tamanio_mes
  3751  00E5B0  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3752  00E5B2  C035  F028         	movff	cambiar_mes@validacion,guardar_elemento@validacion
  3753  00E5B6  C036  F029         	movff	cambiar_mes@validacion+1,guardar_elemento@validacion+1
  3754  00E5BA  0E5C               	movlw	low _mes
  3755  00E5BC  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3756  00E5BE  0E00               	movlw	high _mes
  3757  00E5C0  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3758  00E5C2  0E82               	movlw	low _actualiza_elemento
  3759  00E5C4  6E2C               	movwf	guardar_elemento@doit,c
  3760  00E5C6  0EDE               	movlw	high _actualiza_elemento
  3761  00E5C8  6E2D               	movwf	guardar_elemento@doit+1,c
  3762  00E5CA  5037               	movf	cambiar_mes@tecla,w,c
  3763  00E5CC  ECF5  F07C         	call	_guardar_elemento
  3764  00E5D0  0012               	return		;funcret
  3765  00E5D2                     __end_of_cambiar_mes:
  3766                           	opt stack 0
  3767                           tosu	equ	0xFFF
  3768                           tosh	equ	0xFFE
  3769                           tosl	equ	0xFFD
  3770                           pclath	equ	0xFFA
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           postinc0	equ	0xFEE
  3776                           wreg	equ	0xFE8
  3777                           postinc1	equ	0xFE6
  3778                           postdec1	equ	0xFE5
  3779                           fsr1h	equ	0xFE2
  3780                           fsr1l	equ	0xFE1
  3781                           postinc2	equ	0xFDE
  3782                           postdec2	equ	0xFDD
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _cambiar_anio *****************
  3788 ;; Defined at:
  3789 ;;		line 111 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  tecla           1    wreg     unsigned char 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  tecla           1   54[COMRAM] unsigned char 
  3794 ;;  validacion      2   52[COMRAM] int 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;		None               void
  3797 ;; Registers used:
  3798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3805 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3807 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3808 ;;Total ram usage:        4 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    6
  3811 ;; This function calls:
  3812 ;;		_guardar_elemento
  3813 ;; This function is called by:
  3814 ;;		_menu_cambiar_fecha
  3815 ;;		_guardar_tecla_presionada
  3816 ;;		_leer_teclado
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text17
  3821  00E81A                     __ptext17:
  3822                           	opt stack 0
  3823  00E81A                     _cambiar_anio:
  3824                           	opt stack 22
  3825                           
  3826                           ;incstack = 0
  3827                           ;cambiar_anio@tecla stored from wreg
  3828  00E81A  6E37               	movwf	cambiar_anio@tecla,c
  3829                           
  3830                           ;fecha.c: 113: valor_min = 16;
  3831  00E81C  0E00               	movlw	0
  3832  00E81E  0100               	movlb	0	; () banked
  3833  00E820  6FA0               	movwf	(fecha@valor_min+1)& (0+255),b
  3834  00E822  0E10               	movlw	16
  3835  00E824  6F9F               	movwf	fecha@valor_min& (0+255),b
  3836                           
  3837                           ;fecha.c: 114: valor_max = 99;
  3838  00E826  0E00               	movlw	0
  3839  00E828  0100               	movlb	0	; () banked
  3840  00E82A  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  3841  00E82C  0E63               	movlw	99
  3842  00E82E  6F9D               	movwf	fecha@valor_max& (0+255),b
  3843                           
  3844                           ;fecha.c: 116: int validacion = (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia
      +                           == 0);
  3845  00E830  0E00               	movlw	0
  3846  00E832  6E38               	movwf	_cambiar_anio$1395,c
  3847                           
  3848                           ; BSR set to: 0
  3849  00E834  0100               	movlb	0	; () banked
  3850  00E836  BFDD               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  3851  00E838  D008               	goto	l3830
  3852  00E83A  0100               	movlb	0	; () banked
  3853  00E83C  51DD               	movf	(_tamanio_anio+1)& (0+255),w,b
  3854  00E83E  E110               	bnz	l3836
  3855  00E840  0E02               	movlw	2
  3856  00E842  0100               	movlb	0	; () banked
  3857  00E844  5DDC               	subwf	_tamanio_anio& (0+255),w,b
  3858  00E846  B0D8               	btfsc	status,0,c
  3859  00E848  D00B               	goto	l3836
  3860  00E84A                     l3830:
  3861                           
  3862                           ; BSR set to: 0
  3863  00E84A  5056               	movf	_tamanio_mes,w,c
  3864  00E84C  1057               	iorwf	_tamanio_mes+1,w,c
  3865  00E84E  A4D8               	btfss	status,2,c
  3866  00E850  D007               	goto	l3836
  3867                           
  3868                           ; BSR set to: 0
  3869  00E852  5052               	movf	_tamanio_dia,w,c
  3870  00E854  1053               	iorwf	_tamanio_dia+1,w,c
  3871  00E856  A4D8               	btfss	status,2,c
  3872  00E858  D003               	goto	l3836
  3873                           
  3874                           ; BSR set to: 0
  3875  00E85A  0E01               	movlw	1
  3876  00E85C  6E38               	movwf	_cambiar_anio$1395,c
  3877  00E85E  D000               	goto	l3836
  3878  00E860                     l3836:
  3879                           
  3880                           ; BSR set to: 0
  3881  00E860  C038  F035         	movff	_cambiar_anio$1395,cambiar_anio@validacion
  3882  00E864  6A36               	clrf	cambiar_anio@validacion+1,c
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;fecha.c: 117: guardar_elemento(tecla,year,&tamanio_anio,validacion,&anio,actualiza_elem
      +                          ento);
  3886  00E866  0ED9               	movlw	low fecha@year
  3887  00E868  6E24               	movwf	guardar_elemento@array,c
  3888  00E86A  0E00               	movlw	high fecha@year
  3889  00E86C  6E25               	movwf	guardar_elemento@array+1,c
  3890  00E86E  0EDC               	movlw	low _tamanio_anio
  3891  00E870  6E26               	movwf	guardar_elemento@tamanio_array,c
  3892  00E872  0E00               	movlw	high _tamanio_anio
  3893  00E874  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3894  00E876  C035  F028         	movff	cambiar_anio@validacion,guardar_elemento@validacion
  3895  00E87A  C036  F029         	movff	cambiar_anio@validacion+1,guardar_elemento@validacion+1
  3896  00E87E  0E5A               	movlw	low _anio
  3897  00E880  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3898  00E882  0E00               	movlw	high _anio
  3899  00E884  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3900  00E886  0E82               	movlw	low _actualiza_elemento
  3901  00E888  6E2C               	movwf	guardar_elemento@doit,c
  3902  00E88A  0EDE               	movlw	high _actualiza_elemento
  3903  00E88C  6E2D               	movwf	guardar_elemento@doit+1,c
  3904  00E88E  5037               	movf	cambiar_anio@tecla,w,c
  3905  00E890  ECF5  F07C         	call	_guardar_elemento
  3906  00E894  0012               	return		;funcret
  3907  00E896                     __end_of_cambiar_anio:
  3908                           	opt stack 0
  3909                           tosu	equ	0xFFF
  3910                           tosh	equ	0xFFE
  3911                           tosl	equ	0xFFD
  3912                           pclath	equ	0xFFA
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postinc1	equ	0xFE6
  3920                           postdec1	equ	0xFE5
  3921                           fsr1h	equ	0xFE2
  3922                           fsr1l	equ	0xFE1
  3923                           postinc2	equ	0xFDE
  3924                           postdec2	equ	0xFDD
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _mostrar_guardar_temporal_password *****************
  3930 ;; Defined at:
  3931 ;;		line 129 in file "main.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  tecla           1    wreg     unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  tecla           1   56[COMRAM] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;		None               void
  3938 ;; Registers used:
  3939 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3948 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3949 ;;Total ram usage:        1 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    6
  3952 ;; This function calls:
  3953 ;;		_guardar_password_temporal
  3954 ;;		_imprimir_tecla
  3955 ;;		_sprintf
  3956 ;; This function is called by:
  3957 ;;		_menu_cambiar_password
  3958 ;;		_guardar_tecla_presionada
  3959 ;;		_leer_teclado
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text18
  3964  00E0C8                     __ptext18:
  3965                           	opt stack 0
  3966  00E0C8                     _mostrar_guardar_temporal_password:
  3967                           	opt stack 23
  3968                           
  3969                           ;incstack = 0
  3970                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  3971  00E0C8  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  3972                           
  3973                           ;main.c: 131: imprimir_tecla(tecla);
  3974  00E0CA  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  3975  00E0CC  EC03  F071         	call	_imprimir_tecla
  3976                           
  3977                           ;main.c: 132: sprintf(buffer2,"%01u",tecla);
  3978  00E0D0  0EA1               	movlw	low _buffer2
  3979  00E0D2  6E0D               	movwf	sprintf@sp,c
  3980  00E0D4  0E00               	movlw	high _buffer2
  3981  00E0D6  6E0E               	movwf	sprintf@sp+1,c
  3982  00E0D8  0EE8               	movlw	low STR_8
  3983  00E0DA  6E0F               	movwf	sprintf@f,c
  3984  00E0DC  0EFF               	movlw	high STR_8
  3985  00E0DE  6E10               	movwf	sprintf@f+1,c
  3986  00E0E0  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  3987  00E0E4  6A12               	clrf	?_sprintf+5,c
  3988  00E0E6  ECD5  F07D         	call	_sprintf	;wreg free
  3989                           
  3990                           ;main.c: 133: guardar_password_temporal(*buffer2);
  3991  00E0EA  0100               	movlb	0	; () banked
  3992  00E0EC  51A1               	movf	_buffer2& (0+255),w,b
  3993  00E0EE  EC82  F06F         	call	_guardar_password_temporal
  3994  00E0F2  0012               	return		;funcret
  3995  00E0F4                     __end_of_mostrar_guardar_temporal_password:
  3996                           	opt stack 0
  3997                           tosu	equ	0xFFF
  3998                           tosh	equ	0xFFE
  3999                           tosl	equ	0xFFD
  4000                           pclath	equ	0xFFA
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           postinc1	equ	0xFE6
  4008                           postdec1	equ	0xFE5
  4009                           fsr1h	equ	0xFE2
  4010                           fsr1l	equ	0xFE1
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _guardar_password_temporal *****************
  4018 ;; Defined at:
  4019 ;;		line 31 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  valor           1    wreg     const unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  valor           1    7[COMRAM] const unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;		None               void
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4037 ;;Total ram usage:        1 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    1
  4040 ;; This function calls:
  4041 ;;		_guardar_elemento_arreglo
  4042 ;; This function is called by:
  4043 ;;		_mostrar_guardar_temporal_password
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text19
  4048  00DF04                     __ptext19:
  4049                           	opt stack 0
  4050  00DF04                     _guardar_password_temporal:
  4051                           	opt stack 27
  4052                           
  4053                           ;incstack = 0
  4054                           ;guardar_password_temporal@valor stored from wreg
  4055  00DF04  6E08               	movwf	guardar_password_temporal@valor,c
  4056                           
  4057                           ;alarma.c: 32: guardar_elemento_arreglo(temporal,valor, &tamanio_password );
  4058  00DF06  0EC3               	movlw	low _temporal
  4059  00DF08  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4060  00DF0A  0E00               	movlw	high _temporal
  4061  00DF0C  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4062  00DF0E  C008  F003         	movff	guardar_password_temporal@valor,guardar_elemento_arreglo@valor
  4063  00DF12  0E58               	movlw	low _tamanio_password
  4064  00DF14  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4065  00DF16  0E00               	movlw	high _tamanio_password
  4066  00DF18  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4067  00DF1A  EC96  F073         	call	_guardar_elemento_arreglo	;wreg free
  4068  00DF1E  0012               	return		;funcret
  4069  00DF20                     __end_of_guardar_password_temporal:
  4070                           	opt stack 0
  4071                           tosu	equ	0xFFF
  4072                           tosh	equ	0xFFE
  4073                           tosl	equ	0xFFD
  4074                           pclath	equ	0xFFA
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           postinc0	equ	0xFEE
  4080                           wreg	equ	0xFE8
  4081                           postinc1	equ	0xFE6
  4082                           postdec1	equ	0xFE5
  4083                           fsr1h	equ	0xFE2
  4084                           fsr1l	equ	0xFE1
  4085                           postinc2	equ	0xFDE
  4086                           postdec2	equ	0xFDD
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function _guardar_nuevo_password *****************
  4092 ;; Defined at:
  4093 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  valor           1    wreg     unsigned char 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  valor           1    7[COMRAM] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;		None               void
  4100 ;; Registers used:
  4101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4111 ;;Total ram usage:        1 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    1
  4114 ;; This function calls:
  4115 ;;		_guardar_elemento_arreglo
  4116 ;; This function is called by:
  4117 ;;		_mostrar_guardar_nuevo_password
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text20
  4122  00DEE8                     __ptext20:
  4123                           	opt stack 0
  4124  00DEE8                     _guardar_nuevo_password:
  4125                           	opt stack 27
  4126                           
  4127                           ;incstack = 0
  4128                           ;guardar_nuevo_password@valor stored from wreg
  4129  00DEE8  6E08               	movwf	guardar_nuevo_password@valor,c
  4130                           
  4131                           ;alarma.c: 36: guardar_elemento_arreglo(new_password,valor, &tamanio_new_password );
  4132  00DEEA  0EBC               	movlw	low _new_password
  4133  00DEEC  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4134  00DEEE  0E00               	movlw	high _new_password
  4135  00DEF0  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4136  00DEF2  C008  F003         	movff	guardar_nuevo_password@valor,guardar_elemento_arreglo@valor
  4137  00DEF6  0EE0               	movlw	low _tamanio_new_password
  4138  00DEF8  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4139  00DEFA  0E00               	movlw	high _tamanio_new_password
  4140  00DEFC  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4141  00DEFE  EC96  F073         	call	_guardar_elemento_arreglo	;wreg free
  4142  00DF02  0012               	return		;funcret
  4143  00DF04                     __end_of_guardar_nuevo_password:
  4144                           	opt stack 0
  4145                           tosu	equ	0xFFF
  4146                           tosh	equ	0xFFE
  4147                           tosl	equ	0xFFD
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postinc1	equ	0xFE6
  4156                           postdec1	equ	0xFE5
  4157                           fsr1h	equ	0xFE2
  4158                           fsr1l	equ	0xFE1
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function _guardar_comando *****************
  4166 ;; Defined at:
  4167 ;;		line 29 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  tecla           1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  tecla           1   57[COMRAM] unsigned char 
  4172 ;;  aux            20   37[COMRAM] unsigned char [20]
  4173 ;; Return value:  Size  Location     Type
  4174 ;;		None               void
  4175 ;; Registers used:
  4176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4183 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4185 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4186 ;;Total ram usage:       23 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    2
  4189 ;; This function calls:
  4190 ;;		_sprintf
  4191 ;; This function is called by:
  4192 ;;		_ingresar_comando
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text21
  4197  00E436                     __ptext21:
  4198                           	opt stack 0
  4199  00E436                     _guardar_comando:
  4200                           	opt stack 26
  4201                           
  4202                           ;incstack = 0
  4203                           ;guardar_comando@tecla stored from wreg
  4204  00E436  6E3A               	movwf	guardar_comando@tecla,c
  4205                           
  4206                           ;teclado.c: 31: unsigned char aux[20];
  4207                           ;teclado.c: 32: sprintf(aux,"%01u",tecla);
  4208  00E438  0E26               	movlw	low guardar_comando@aux
  4209  00E43A  6E0D               	movwf	sprintf@sp,c
  4210  00E43C  0E00               	movlw	high guardar_comando@aux
  4211  00E43E  6E0E               	movwf	sprintf@sp+1,c
  4212  00E440  0EE8               	movlw	low STR_8
  4213  00E442  6E0F               	movwf	sprintf@f,c
  4214  00E444  0EFF               	movlw	high STR_8
  4215  00E446  6E10               	movwf	sprintf@f+1,c
  4216  00E448  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  4217  00E44C  6A12               	clrf	?_sprintf+5,c
  4218  00E44E  ECD5  F07D         	call	_sprintf	;wreg free
  4219                           
  4220                           ;teclado.c: 33: if (tamanio_comando < 2){
  4221  00E452  BE48               	btfsc	_tamanio_comando+1,7,c
  4222  00E454  D006               	goto	l3654
  4223  00E456  5048               	movf	_tamanio_comando+1,w,c
  4224  00E458  E11D               	bnz	l410
  4225  00E45A  0E02               	movlw	2
  4226  00E45C  5C47               	subwf	_tamanio_comando,w,c
  4227  00E45E  B0D8               	btfsc	status,0,c
  4228  00E460  0012               	return	
  4229  00E462                     l3654:
  4230                           
  4231                           ;teclado.c: 34: comando[tamanio_comando] = *aux;
  4232  00E462  0ECA               	movlw	low _comando
  4233  00E464  2447               	addwf	_tamanio_comando,w,c
  4234  00E466  6ED9               	movwf	fsr2l,c
  4235  00E468  0E00               	movlw	high _comando
  4236  00E46A  2048               	addwfc	_tamanio_comando+1,w,c
  4237  00E46C  6EDA               	movwf	fsr2h,c
  4238  00E46E  C026  FFDF         	movff	guardar_comando@aux,indf2
  4239                           
  4240                           ;teclado.c: 35: comando [tamanio_comando+1] = 0;
  4241  00E472  0E01               	movlw	1
  4242  00E474  2447               	addwf	_tamanio_comando,w,c
  4243  00E476  6E24               	movwf	??_guardar_comando& (0+255),c
  4244  00E478  0E00               	movlw	0
  4245  00E47A  2048               	addwfc	_tamanio_comando+1,w,c
  4246  00E47C  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  4247  00E47E  0ECA               	movlw	low _comando
  4248  00E480  2424               	addwf	??_guardar_comando,w,c
  4249  00E482  6ED9               	movwf	fsr2l,c
  4250  00E484  0E00               	movlw	high _comando
  4251  00E486  2025               	addwfc	??_guardar_comando+1,w,c
  4252  00E488  6EDA               	movwf	fsr2h,c
  4253  00E48A  0E00               	movlw	0
  4254  00E48C  6EDF               	movwf	indf2,c
  4255                           
  4256                           ;teclado.c: 36: tamanio_comando++;
  4257  00E48E  4A47               	infsnz	_tamanio_comando,f,c
  4258  00E490  2A48               	incf	_tamanio_comando+1,f,c
  4259  00E492  0012               	return	
  4260  00E494                     l410:
  4261  00E494  0012               	return		;funcret
  4262  00E496                     __end_of_guardar_comando:
  4263                           	opt stack 0
  4264                           tosu	equ	0xFFF
  4265                           tosh	equ	0xFFE
  4266                           tosl	equ	0xFFD
  4267                           pclath	equ	0xFFA
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postinc1	equ	0xFE6
  4275                           postdec1	equ	0xFE5
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function _imprimir_tecla *****************
  4286 ;; Defined at:
  4287 ;;		line 40 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  tecla           1    wreg     unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  tecla           1   55[COMRAM] unsigned char 
  4292 ;;  aux            20   35[COMRAM] unsigned char [20]
  4293 ;; Return value:  Size  Location     Type
  4294 ;;		None               void
  4295 ;; Registers used:
  4296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4303 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4305 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4306 ;;Total ram usage:       21 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    5
  4309 ;; This function calls:
  4310 ;;		_lcd_putrs
  4311 ;;		_sprintf
  4312 ;; This function is called by:
  4313 ;;		_mostrar_guardar_password
  4314 ;;		_mostrar_guardar_temporal_password
  4315 ;;		_mostrar_guardar_nuevo_password
  4316 ;;		_confirmar_actualizar_password
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text22
  4321  00E206                     __ptext22:
  4322                           	opt stack 0
  4323  00E206                     _imprimir_tecla:
  4324                           	opt stack 23
  4325                           
  4326                           ;incstack = 0
  4327                           ;imprimir_tecla@tecla stored from wreg
  4328  00E206  6E38               	movwf	imprimir_tecla@tecla,c
  4329                           
  4330                           ;teclado.c: 42: unsigned char aux[20];
  4331                           ;teclado.c: 43: sprintf(aux,"%01u",tecla);
  4332  00E208  0E24               	movlw	low imprimir_tecla@aux
  4333  00E20A  6E0D               	movwf	sprintf@sp,c
  4334  00E20C  0E00               	movlw	high imprimir_tecla@aux
  4335  00E20E  6E0E               	movwf	sprintf@sp+1,c
  4336  00E210  0EE8               	movlw	low STR_8
  4337  00E212  6E0F               	movwf	sprintf@f,c
  4338  00E214  0EFF               	movlw	high STR_8
  4339  00E216  6E10               	movwf	sprintf@f+1,c
  4340  00E218  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  4341  00E21C  6A12               	clrf	?_sprintf+5,c
  4342  00E21E  ECD5  F07D         	call	_sprintf	;wreg free
  4343                           
  4344                           ;teclado.c: 44: if (ocultar_teclas == 1){
  4345  00E222  0100               	movlb	0	; () banked
  4346  00E224  0593               	decf	_ocultar_teclas& (0+255),w,b
  4347  00E226  0100               	movlb	0	; () banked
  4348  00E228  1194               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  4349  00E22A  A4D8               	btfss	status,2,c
  4350  00E22C  D007               	goto	l3614
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;teclado.c: 45: lcd_putrs("*");
  4354  00E22E  0EF4               	movlw	low STR_25
  4355  00E230  6E09               	movwf	lcd_putrs@ptr,c
  4356  00E232  0EFF               	movlw	high STR_25
  4357  00E234  6E0A               	movwf	lcd_putrs@ptr+1,c
  4358  00E236  EC96  F071         	call	_lcd_putrs	;wreg free
  4359                           
  4360                           ;teclado.c: 46: }else{
  4361  00E23A  0012               	return	
  4362  00E23C                     l3614:
  4363                           
  4364                           ;teclado.c: 47: lcd_putrs(aux);
  4365  00E23C  0E24               	movlw	low imprimir_tecla@aux
  4366  00E23E  6E09               	movwf	lcd_putrs@ptr,c
  4367  00E240  0E00               	movlw	high imprimir_tecla@aux
  4368  00E242  6E0A               	movwf	lcd_putrs@ptr+1,c
  4369  00E244  EC96  F071         	call	_lcd_putrs	;wreg free
  4370  00E248  0012               	return	
  4371  00E24A  0012               	return		;funcret
  4372  00E24C                     __end_of_imprimir_tecla:
  4373                           	opt stack 0
  4374                           tosu	equ	0xFFF
  4375                           tosh	equ	0xFFE
  4376                           tosl	equ	0xFFD
  4377                           pclath	equ	0xFFA
  4378                           tblptru	equ	0xFF8
  4379                           tblptrh	equ	0xFF7
  4380                           tblptrl	equ	0xFF6
  4381                           tablat	equ	0xFF5
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postinc1	equ	0xFE6
  4385                           postdec1	equ	0xFE5
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _actualizar_password *****************
  4396 ;; Defined at:
  4397 ;;		line 82 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  valor           1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  valor           1   15[COMRAM] unsigned char 
  4402 ;;  j               2   18[COMRAM] int 
  4403 ;;  confirmar       2   16[COMRAM] int 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4416 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4417 ;;Total ram usage:        5 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    3
  4420 ;; This function calls:
  4421 ;;		_confirmar_nuevo_password
  4422 ;;		_restaurar_comando
  4423 ;; This function is called by:
  4424 ;;		_confirmar_actualizar_password
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text23
  4429  00ECDE                     __ptext23:
  4430                           	opt stack 0
  4431  00ECDE                     _actualizar_password:
  4432                           	opt stack 24
  4433                           
  4434                           ;incstack = 0
  4435                           ;actualizar_password@valor stored from wreg
  4436  00ECDE  6E10               	movwf	actualizar_password@valor,c
  4437                           
  4438                           ;alarma.c: 84: int confirmar=1;
  4439  00ECE0  0E00               	movlw	0
  4440  00ECE2  6E12               	movwf	actualizar_password@confirmar+1,c
  4441  00ECE4  0E01               	movlw	1
  4442  00ECE6  6E11               	movwf	actualizar_password@confirmar,c
  4443                           
  4444                           ;alarma.c: 85: confirmar_nuevo_password(&confirmar,valor);
  4445  00ECE8  0E11               	movlw	low actualizar_password@confirmar
  4446  00ECEA  6E09               	movwf	confirmar_nuevo_password@confirmar,c
  4447  00ECEC  0E00               	movlw	high actualizar_password@confirmar
  4448  00ECEE  6E0A               	movwf	confirmar_nuevo_password@confirmar+1,c
  4449  00ECF0  C010  F00B         	movff	actualizar_password@valor,confirmar_nuevo_password@valor
  4450  00ECF4  EC92  F075         	call	_confirmar_nuevo_password	;wreg free
  4451                           
  4452                           ;alarma.c: 87: if (confirmar && tamanio_password >= 6){
  4453  00ECF8  5011               	movf	actualizar_password@confirmar,w,c
  4454  00ECFA  1012               	iorwf	actualizar_password@confirmar+1,w,c
  4455  00ECFC  B4D8               	btfsc	status,2,c
  4456  00ECFE  0012               	return	
  4457  00ED00  BE59               	btfsc	_tamanio_password+1,7,c
  4458  00ED02  0012               	return	
  4459  00ED04  5059               	movf	_tamanio_password+1,w,c
  4460  00ED06  E104               	bnz	u2840
  4461  00ED08  0E06               	movlw	6
  4462  00ED0A  5C58               	subwf	_tamanio_password,w,c
  4463  00ED0C  A0D8               	btfss	status,0,c
  4464  00ED0E  0012               	return	
  4465  00ED10                     u2840:
  4466                           
  4467                           ;alarma.c: 89: int j;
  4468                           ;alarma.c: 90: for (j=0; j < 6; j++ )
  4469  00ED10  0E00               	movlw	0
  4470  00ED12  6E14               	movwf	actualizar_password@j+1,c
  4471  00ED14  0E00               	movlw	0
  4472  00ED16  6E13               	movwf	actualizar_password@j,c
  4473  00ED18                     l3630:
  4474  00ED18  BE14               	btfsc	actualizar_password@j+1,7,c
  4475  00ED1A  D008               	goto	l3634
  4476  00ED1C  5014               	movf	actualizar_password@j+1,w,c
  4477  00ED1E  E118               	bnz	l3640
  4478  00ED20  0E06               	movlw	6
  4479  00ED22  5C13               	subwf	actualizar_password@j,w,c
  4480  00ED24  B0D8               	btfsc	status,0,c
  4481  00ED26  D014               	goto	l3640
  4482  00ED28  D001               	goto	l3634
  4483  00ED2A  D012               	goto	l3640
  4484  00ED2C                     l3634:
  4485                           
  4486                           ;alarma.c: 91: password[j] = new_password[j];
  4487  00ED2C  0EBC               	movlw	low _new_password
  4488  00ED2E  2413               	addwf	actualizar_password@j,w,c
  4489  00ED30  6ED9               	movwf	fsr2l,c
  4490  00ED32  0E00               	movlw	high _new_password
  4491  00ED34  2014               	addwfc	actualizar_password@j+1,w,c
  4492  00ED36  6EDA               	movwf	fsr2h,c
  4493  00ED38  0EE2               	movlw	low _password
  4494  00ED3A  2413               	addwf	actualizar_password@j,w,c
  4495  00ED3C  6EE1               	movwf	fsr1l,c
  4496  00ED3E  0E00               	movlw	high _password
  4497  00ED40  2014               	addwfc	actualizar_password@j+1,w,c
  4498  00ED42  6EE2               	movwf	fsr1h,c
  4499  00ED44  CFDF FFE7          	movff	indf2,indf1
  4500  00ED48  4A13               	infsnz	actualizar_password@j,f,c
  4501  00ED4A  2A14               	incf	actualizar_password@j+1,f,c
  4502  00ED4C  D7E5               	goto	l3630
  4503  00ED4E  D000               	goto	l3640
  4504  00ED50                     l3640:
  4505                           
  4506                           ;alarma.c: 92: restaurar_comando();
  4507  00ED50  EC58  F06F         	call	_restaurar_comando	;wreg free
  4508                           
  4509                           ;alarma.c: 94: new_password[0] = 0;
  4510  00ED54  0E00               	movlw	0
  4511  00ED56  0100               	movlb	0	; () banked
  4512  00ED58  6FBC               	movwf	_new_password& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;alarma.c: 95: temporal[0] = 0;
  4516  00ED5A  0E00               	movlw	0
  4517  00ED5C  0100               	movlb	0	; () banked
  4518  00ED5E  6FC3               	movwf	_temporal& (0+255),b
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;alarma.c: 97: tamanio_new_password = 0;
  4522  00ED60  0E00               	movlw	0
  4523  00ED62  0100               	movlb	0	; () banked
  4524  00ED64  6FE1               	movwf	(_tamanio_new_password+1)& (0+255),b
  4525  00ED66  0E00               	movlw	0
  4526  00ED68  6FE0               	movwf	_tamanio_new_password& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;alarma.c: 98: tamanio_password = 0;
  4530  00ED6A  0E00               	movlw	0
  4531  00ED6C  6E59               	movwf	_tamanio_password+1,c
  4532  00ED6E  0E00               	movlw	0
  4533  00ED70  6E58               	movwf	_tamanio_password,c
  4534  00ED72  0012               	return	
  4535                           
  4536                           ; BSR set to: 0
  4537  00ED74  0012               	return		;funcret
  4538  00ED76                     __end_of_actualizar_password:
  4539                           	opt stack 0
  4540                           tosu	equ	0xFFF
  4541                           tosh	equ	0xFFE
  4542                           tosl	equ	0xFFD
  4543                           pclath	equ	0xFFA
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           indf1	equ	0xFE7
  4551                           postinc1	equ	0xFE6
  4552                           postdec1	equ	0xFE5
  4553                           fsr1h	equ	0xFE2
  4554                           fsr1l	equ	0xFE1
  4555                           indf2	equ	0xFDF
  4556                           postinc2	equ	0xFDE
  4557                           postdec2	equ	0xFDD
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _confirmar_nuevo_password *****************
  4563 ;; Defined at:
  4564 ;;		line 68 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  confirmar       2    8[COMRAM] PTR int 
  4567 ;;		 -> actualizar_password@confirmar(2), 
  4568 ;;  valor           1   10[COMRAM] unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  i               2   13[COMRAM] int 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;		None               void
  4573 ;; Registers used:
  4574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4580 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4583 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4584 ;;Total ram usage:        7 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    2
  4587 ;; This function calls:
  4588 ;;		_guardar_current_password
  4589 ;; This function is called by:
  4590 ;;		_actualizar_password
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text24
  4595  00EB24                     __ptext24:
  4596                           	opt stack 0
  4597  00EB24                     _confirmar_nuevo_password:
  4598                           	opt stack 24
  4599                           
  4600                           ;alarma.c: 70: guardar_current_password(valor);
  4601                           
  4602                           ;incstack = 0
  4603  00EB24  500B               	movf	confirmar_nuevo_password@valor,w,c
  4604  00EB26  EC66  F06F         	call	_guardar_current_password
  4605                           
  4606                           ;alarma.c: 72: if (tamanio_password >= 6 && *confirmar){
  4607  00EB2A  BE59               	btfsc	_tamanio_password+1,7,c
  4608  00EB2C  0012               	return	
  4609  00EB2E  5059               	movf	_tamanio_password+1,w,c
  4610  00EB30  E104               	bnz	u2670
  4611  00EB32  0E06               	movlw	6
  4612  00EB34  5C58               	subwf	_tamanio_password,w,c
  4613  00EB36  A0D8               	btfss	status,0,c
  4614  00EB38  0012               	return	
  4615  00EB3A                     u2670:
  4616  00EB3A  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4617  00EB3E  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4618  00EB42  50DE               	movf	postinc2,w,c
  4619  00EB44  10DE               	iorwf	postinc2,w,c
  4620  00EB46  B4D8               	btfsc	status,2,c
  4621  00EB48  0012               	return	
  4622                           
  4623                           ;alarma.c: 73: int i = 0;
  4624  00EB4A  0E00               	movlw	0
  4625  00EB4C  6E0F               	movwf	confirmar_nuevo_password@i+1,c
  4626  00EB4E  0E00               	movlw	0
  4627  00EB50  6E0E               	movwf	confirmar_nuevo_password@i,c
  4628                           
  4629                           ;alarma.c: 74: while (i < 6 && *confirmar){
  4630  00EB52  D01C               	goto	l3542
  4631  00EB54                     l3536:
  4632                           
  4633                           ;alarma.c: 75: if (new_password[i] != current_password[i])
  4634  00EB54  0EB5               	movlw	low _current_password
  4635  00EB56  240E               	addwf	confirmar_nuevo_password@i,w,c
  4636  00EB58  6ED9               	movwf	fsr2l,c
  4637  00EB5A  0E00               	movlw	high _current_password
  4638  00EB5C  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  4639  00EB5E  6EDA               	movwf	fsr2h,c
  4640  00EB60  0EBC               	movlw	low _new_password
  4641  00EB62  240E               	addwf	confirmar_nuevo_password@i,w,c
  4642  00EB64  6EE1               	movwf	fsr1l,c
  4643  00EB66  0E00               	movlw	high _new_password
  4644  00EB68  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  4645  00EB6A  6EE2               	movwf	fsr1h,c
  4646  00EB6C  50DE               	movf	postinc2,w,c
  4647  00EB6E  18E6               	xorwf	postinc1,w,c
  4648  00EB70  B4D8               	btfsc	status,2,c
  4649  00EB72  D009               	goto	l3540
  4650                           
  4651                           ;alarma.c: 76: *confirmar = 0;
  4652  00EB74  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4653  00EB78  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4654  00EB7C  0E00               	movlw	0
  4655  00EB7E  6EDE               	movwf	postinc2,c
  4656  00EB80  0E00               	movlw	0
  4657  00EB82  6EDD               	movwf	postdec2,c
  4658  00EB84  D000               	goto	l3540
  4659  00EB86                     l3540:
  4660                           
  4661                           ;alarma.c: 77: i++;
  4662  00EB86  4A0E               	infsnz	confirmar_nuevo_password@i,f,c
  4663  00EB88  2A0F               	incf	confirmar_nuevo_password@i+1,f,c
  4664  00EB8A  D000               	goto	l3542
  4665  00EB8C                     l3542:
  4666  00EB8C  BE0F               	btfsc	confirmar_nuevo_password@i+1,7,c
  4667  00EB8E  D006               	goto	l3544
  4668  00EB90  500F               	movf	confirmar_nuevo_password@i+1,w,c
  4669  00EB92  E10E               	bnz	l846
  4670  00EB94  0E06               	movlw	6
  4671  00EB96  5C0E               	subwf	confirmar_nuevo_password@i,w,c
  4672  00EB98  B0D8               	btfsc	status,0,c
  4673  00EB9A  0012               	return	
  4674  00EB9C                     l3544:
  4675  00EB9C  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4676  00EBA0  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4677  00EBA4  50DE               	movf	postinc2,w,c
  4678  00EBA6  10DE               	iorwf	postinc2,w,c
  4679  00EBA8  B4D8               	btfsc	status,2,c
  4680  00EBAA  0012               	return	
  4681  00EBAC  D7D3               	goto	l3536
  4682  00EBAE  0012               	return	
  4683  00EBB0                     l846:
  4684  00EBB0  0012               	return		;funcret
  4685  00EBB2                     __end_of_confirmar_nuevo_password:
  4686                           	opt stack 0
  4687                           tosu	equ	0xFFF
  4688                           tosh	equ	0xFFE
  4689                           tosl	equ	0xFFD
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           indf1	equ	0xFE7
  4698                           postinc1	equ	0xFE6
  4699                           postdec1	equ	0xFE5
  4700                           fsr1h	equ	0xFE2
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function _guardar_current_password *****************
  4710 ;; Defined at:
  4711 ;;		line 27 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  valor           1    wreg     const unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  valor           1    7[COMRAM] const unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;		None               void
  4718 ;; Registers used:
  4719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4729 ;;Total ram usage:        1 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    1
  4732 ;; This function calls:
  4733 ;;		_guardar_elemento_arreglo
  4734 ;; This function is called by:
  4735 ;;		_mostrar_guardar_password
  4736 ;;		_confirmar_nuevo_password
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text25
  4741  00DECC                     __ptext25:
  4742                           	opt stack 0
  4743  00DECC                     _guardar_current_password:
  4744                           	opt stack 27
  4745                           
  4746                           ;incstack = 0
  4747                           ;guardar_current_password@valor stored from wreg
  4748  00DECC  6E08               	movwf	guardar_current_password@valor,c
  4749                           
  4750                           ;alarma.c: 28: guardar_elemento_arreglo(current_password,valor, &tamanio_password );
  4751  00DECE  0EB5               	movlw	low _current_password
  4752  00DED0  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4753  00DED2  0E00               	movlw	high _current_password
  4754  00DED4  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4755  00DED6  C008  F003         	movff	guardar_current_password@valor,guardar_elemento_arreglo@valor
  4756  00DEDA  0E58               	movlw	low _tamanio_password
  4757  00DEDC  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4758  00DEDE  0E00               	movlw	high _tamanio_password
  4759  00DEE0  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4760  00DEE2  EC96  F073         	call	_guardar_elemento_arreglo	;wreg free
  4761  00DEE6  0012               	return		;funcret
  4762  00DEE8                     __end_of_guardar_current_password:
  4763                           	opt stack 0
  4764                           tosu	equ	0xFFF
  4765                           tosh	equ	0xFFE
  4766                           tosl	equ	0xFFD
  4767                           pclath	equ	0xFFA
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           indf1	equ	0xFE7
  4775                           postinc1	equ	0xFE6
  4776                           postdec1	equ	0xFE5
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           postdec2	equ	0xFDD
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _guardar_elemento_arreglo *****************
  4787 ;; Defined at:
  4788 ;;		line 17 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  arreglo         2    0[COMRAM] PTR unsigned char 
  4791 ;;		 -> temporal(7), new_password(7), current_password(7), 
  4792 ;;  valor           1    2[COMRAM] const unsigned char 
  4793 ;;  tamanio         2    3[COMRAM] PTR int 
  4794 ;;		 -> tamanio_new_password(2), tamanio_password(2), 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4806 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4809 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4810 ;;Total ram usage:        7 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_guardar_current_password
  4816 ;;		_guardar_password_temporal
  4817 ;;		_guardar_nuevo_password
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text26
  4822  00E72C                     __ptext26:
  4823                           	opt stack 0
  4824  00E72C                     _guardar_elemento_arreglo:
  4825                           	opt stack 27
  4826                           
  4827                           ;alarma.c: 19: if (*tamanio < 6){
  4828                           
  4829                           ;incstack = 0
  4830  00E72C  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  4831  00E730  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  4832  00E734  0E01               	movlw	1
  4833  00E736  BEDB               	btfsc	plusw2,7,c
  4834  00E738  D007               	goto	l3268
  4835  00E73A  0E01               	movlw	1
  4836  00E73C  50DB               	movf	plusw2,w,c
  4837  00E73E  E130               	bnz	l808
  4838  00E740  0E06               	movlw	6
  4839  00E742  5CDE               	subwf	postinc2,w,c
  4840  00E744  B0D8               	btfsc	status,0,c
  4841  00E746  0012               	return	
  4842  00E748                     l3268:
  4843                           
  4844                           ;alarma.c: 20: arreglo[*tamanio] = valor;
  4845  00E748  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  4846  00E74C  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  4847  00E750  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  4848  00E754  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  4849  00E758  5006               	movf	??_guardar_elemento_arreglo,w,c
  4850  00E75A  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  4851  00E75C  6ED9               	movwf	fsr2l,c
  4852  00E75E  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  4853  00E760  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  4854  00E762  6EDA               	movwf	fsr2h,c
  4855  00E764  C003  FFDF         	movff	guardar_elemento_arreglo@valor,indf2
  4856                           
  4857                           ;alarma.c: 21: arreglo [*tamanio + 1] = '\0';
  4858  00E768  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  4859  00E76C  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  4860  00E770  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  4861  00E774  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  4862  00E778  0E01               	movlw	1
  4863  00E77A  2606               	addwf	??_guardar_elemento_arreglo,f,c
  4864  00E77C  0E00               	movlw	0
  4865  00E77E  2207               	addwfc	??_guardar_elemento_arreglo+1,f,c
  4866  00E780  5006               	movf	??_guardar_elemento_arreglo,w,c
  4867  00E782  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  4868  00E784  6ED9               	movwf	fsr2l,c
  4869  00E786  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  4870  00E788  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  4871  00E78A  6EDA               	movwf	fsr2h,c
  4872  00E78C  0E00               	movlw	0
  4873  00E78E  6EDF               	movwf	indf2,c
  4874                           
  4875                           ;alarma.c: 22: (*tamanio)++;
  4876  00E790  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  4877  00E794  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  4878  00E798  2ADE               	incf	postinc2,f,c
  4879  00E79A  0E00               	movlw	0
  4880  00E79C  22DD               	addwfc	postdec2,f,c
  4881  00E79E  0012               	return	
  4882  00E7A0                     l808:
  4883  00E7A0  0012               	return		;funcret
  4884  00E7A2                     __end_of_guardar_elemento_arreglo:
  4885                           	opt stack 0
  4886                           tosu	equ	0xFFF
  4887                           tosh	equ	0xFFE
  4888                           tosl	equ	0xFFD
  4889                           pclath	equ	0xFFA
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           indf1	equ	0xFE7
  4897                           postinc1	equ	0xFE6
  4898                           postdec1	equ	0xFE5
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           plusw2	equ	0xFDB
  4905                           fsr2h	equ	0xFDA
  4906                           fsr2l	equ	0xFD9
  4907                           status	equ	0xFD8
  4908                           
  4909 ;; *************** function _obtener_dia_mes *****************
  4910 ;; Defined at:
  4911 ;;		line 76 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4927 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    1
  4932 ;; This function calls:
  4933 ;;		___awmod
  4934 ;; This function is called by:
  4935 ;;		_cambiar_dia
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text27
  4940  00F17E                     __ptext27:
  4941                           	opt stack 0
  4942  00F17E                     _obtener_dia_mes:
  4943                           	opt stack 26
  4944                           
  4945                           ;fecha.c: 78: if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 
      +                          || mes == 12)
  4946                           
  4947                           ;incstack = 0
  4948  00F17E  045C               	decf	_mes,w,c
  4949  00F180  105D               	iorwf	_mes+1,w,c
  4950  00F182  B4D8               	btfsc	status,2,c
  4951  00F184  D01E               	goto	l3718
  4952  00F186  0E03               	movlw	3
  4953  00F188  185C               	xorwf	_mes,w,c
  4954  00F18A  105D               	iorwf	_mes+1,w,c
  4955  00F18C  B4D8               	btfsc	status,2,c
  4956  00F18E  D019               	goto	l3718
  4957  00F190  0E05               	movlw	5
  4958  00F192  185C               	xorwf	_mes,w,c
  4959  00F194  105D               	iorwf	_mes+1,w,c
  4960  00F196  B4D8               	btfsc	status,2,c
  4961  00F198  D014               	goto	l3718
  4962  00F19A  0E07               	movlw	7
  4963  00F19C  185C               	xorwf	_mes,w,c
  4964  00F19E  105D               	iorwf	_mes+1,w,c
  4965  00F1A0  B4D8               	btfsc	status,2,c
  4966  00F1A2  D00F               	goto	l3718
  4967  00F1A4  0E08               	movlw	8
  4968  00F1A6  185C               	xorwf	_mes,w,c
  4969  00F1A8  105D               	iorwf	_mes+1,w,c
  4970  00F1AA  B4D8               	btfsc	status,2,c
  4971  00F1AC  D00A               	goto	l3718
  4972  00F1AE  0E0A               	movlw	10
  4973  00F1B0  185C               	xorwf	_mes,w,c
  4974  00F1B2  105D               	iorwf	_mes+1,w,c
  4975  00F1B4  B4D8               	btfsc	status,2,c
  4976  00F1B6  D005               	goto	l3718
  4977  00F1B8  0E0C               	movlw	12
  4978  00F1BA  185C               	xorwf	_mes,w,c
  4979  00F1BC  105D               	iorwf	_mes+1,w,c
  4980  00F1BE  A4D8               	btfss	status,2,c
  4981  00F1C0  D006               	goto	l3720
  4982  00F1C2                     l3718:
  4983                           
  4984                           ;fecha.c: 79: valor_max = 31;
  4985  00F1C2  0E00               	movlw	0
  4986  00F1C4  0100               	movlb	0	; () banked
  4987  00F1C6  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  4988  00F1C8  0E1F               	movlw	31
  4989  00F1CA  6F9D               	movwf	fecha@valor_max& (0+255),b
  4990  00F1CC  0012               	return	
  4991  00F1CE                     l3720:
  4992                           
  4993                           ;fecha.c: 80: else if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
  4994  00F1CE  0E04               	movlw	4
  4995  00F1D0  185C               	xorwf	_mes,w,c
  4996  00F1D2  105D               	iorwf	_mes+1,w,c
  4997  00F1D4  B4D8               	btfsc	status,2,c
  4998  00F1D6  D00F               	goto	l3728
  4999  00F1D8  0E06               	movlw	6
  5000  00F1DA  185C               	xorwf	_mes,w,c
  5001  00F1DC  105D               	iorwf	_mes+1,w,c
  5002  00F1DE  B4D8               	btfsc	status,2,c
  5003  00F1E0  D00A               	goto	l3728
  5004  00F1E2  0E09               	movlw	9
  5005  00F1E4  185C               	xorwf	_mes,w,c
  5006  00F1E6  105D               	iorwf	_mes+1,w,c
  5007  00F1E8  B4D8               	btfsc	status,2,c
  5008  00F1EA  D005               	goto	l3728
  5009  00F1EC  0E0B               	movlw	11
  5010  00F1EE  185C               	xorwf	_mes,w,c
  5011  00F1F0  105D               	iorwf	_mes+1,w,c
  5012  00F1F2  A4D8               	btfss	status,2,c
  5013  00F1F4  D006               	goto	l3730
  5014  00F1F6                     l3728:
  5015                           
  5016                           ;fecha.c: 81: valor_max = 30;
  5017  00F1F6  0E00               	movlw	0
  5018  00F1F8  0100               	movlb	0	; () banked
  5019  00F1FA  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  5020  00F1FC  0E1E               	movlw	30
  5021  00F1FE  6F9D               	movwf	fecha@valor_max& (0+255),b
  5022  00F200  0012               	return	
  5023  00F202                     l3730:
  5024                           
  5025                           ;fecha.c: 82: else{
  5026                           ;fecha.c: 83: if ((anio%4==0) && (anio%100!=0) || anio%400==0)
  5027  00F202  0E03               	movlw	3
  5028  00F204  145A               	andwf	_anio,w,c
  5029  00F206  6E07               	movwf	??_obtener_dia_mes& (0+255),c
  5030  00F208  0E00               	movlw	0
  5031  00F20A  145B               	andwf	_anio+1,w,c
  5032  00F20C  6E08               	movwf	(??_obtener_dia_mes+1)& (0+255),c
  5033  00F20E  5007               	movf	??_obtener_dia_mes,w,c
  5034  00F210  1008               	iorwf	??_obtener_dia_mes+1,w,c
  5035  00F212  A4D8               	btfss	status,2,c
  5036  00F214  D00E               	goto	l3734
  5037  00F216  C05A  F001         	movff	_anio,___awmod@dividend
  5038  00F21A  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5039  00F21E  0E00               	movlw	0
  5040  00F220  6E04               	movwf	___awmod@divisor+1,c
  5041  00F222  0E64               	movlw	100
  5042  00F224  6E03               	movwf	___awmod@divisor,c
  5043  00F226  EC0A  F075         	call	___awmod	;wreg free
  5044  00F22A  5001               	movf	?___awmod,w,c
  5045  00F22C  1002               	iorwf	?___awmod+1,w,c
  5046  00F22E  A4D8               	btfss	status,2,c
  5047  00F230  D00E               	goto	l3736
  5048  00F232                     l3734:
  5049  00F232  C05A  F001         	movff	_anio,___awmod@dividend
  5050  00F236  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5051  00F23A  0E01               	movlw	1
  5052  00F23C  6E04               	movwf	___awmod@divisor+1,c
  5053  00F23E  0E90               	movlw	144
  5054  00F240  6E03               	movwf	___awmod@divisor,c
  5055  00F242  EC0A  F075         	call	___awmod	;wreg free
  5056  00F246  5001               	movf	?___awmod,w,c
  5057  00F248  1002               	iorwf	?___awmod+1,w,c
  5058  00F24A  A4D8               	btfss	status,2,c
  5059  00F24C  D006               	goto	l3738
  5060  00F24E                     l3736:
  5061                           
  5062                           ;fecha.c: 84: valor_max =29;
  5063  00F24E  0E00               	movlw	0
  5064  00F250  0100               	movlb	0	; () banked
  5065  00F252  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  5066  00F254  0E1D               	movlw	29
  5067  00F256  6F9D               	movwf	fecha@valor_max& (0+255),b
  5068  00F258  0012               	return	
  5069  00F25A                     l3738:
  5070                           
  5071                           ;fecha.c: 85: else
  5072                           ;fecha.c: 86: valor_max =28;
  5073  00F25A  0E00               	movlw	0
  5074  00F25C  0100               	movlb	0	; () banked
  5075  00F25E  6F9E               	movwf	(fecha@valor_max+1)& (0+255),b
  5076  00F260  0E1C               	movlw	28
  5077  00F262  6F9D               	movwf	fecha@valor_max& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080                           
  5081                           ; BSR set to: 0
  5082  00F264  0012               	return	
  5083                           
  5084                           ; BSR set to: 0
  5085                           
  5086                           ; BSR set to: 0
  5087  00F266  0012               	return		;funcret
  5088  00F268                     __end_of_obtener_dia_mes:
  5089                           	opt stack 0
  5090                           tosu	equ	0xFFF
  5091                           tosh	equ	0xFFE
  5092                           tosl	equ	0xFFD
  5093                           pclath	equ	0xFFA
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           indf1	equ	0xFE7
  5101                           postinc1	equ	0xFE6
  5102                           postdec1	equ	0xFE5
  5103                           fsr1h	equ	0xFE2
  5104                           fsr1l	equ	0xFE1
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           plusw2	equ	0xFDB
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function ___awmod *****************
  5114 ;; Defined at:
  5115 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  dividend        2    0[COMRAM] int 
  5118 ;;  divisor         2    2[COMRAM] int 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  sign            1    5[COMRAM] unsigned char 
  5121 ;;  counter         1    4[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  2    0[COMRAM] int 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5131 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5134 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;Total ram usage:        6 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_obtener_dia_mes
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text28
  5145  00EA14                     __ptext28:
  5146                           	opt stack 0
  5147  00EA14                     ___awmod:
  5148                           	opt stack 26
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;incstack = 0
  5152  00EA14  0E00               	movlw	0
  5153  00EA16  6E06               	movwf	___awmod@sign,c
  5154  00EA18  AE02               	btfss	___awmod@dividend+1,7,c
  5155  00EA1A  D007               	goto	l3554
  5156  00EA1C  6C01               	negf	___awmod@dividend,c
  5157  00EA1E  1E02               	comf	___awmod@dividend+1,f,c
  5158  00EA20  B0D8               	btfsc	status,0,c
  5159  00EA22  2A02               	incf	___awmod@dividend+1,f,c
  5160  00EA24  0E01               	movlw	1
  5161  00EA26  6E06               	movwf	___awmod@sign,c
  5162  00EA28  D000               	goto	l3554
  5163  00EA2A                     l3554:
  5164  00EA2A  AE04               	btfss	___awmod@divisor+1,7,c
  5165  00EA2C  D005               	goto	l3558
  5166  00EA2E  6C03               	negf	___awmod@divisor,c
  5167  00EA30  1E04               	comf	___awmod@divisor+1,f,c
  5168  00EA32  B0D8               	btfsc	status,0,c
  5169  00EA34  2A04               	incf	___awmod@divisor+1,f,c
  5170  00EA36  D000               	goto	l3558
  5171  00EA38                     l3558:
  5172  00EA38  5003               	movf	___awmod@divisor,w,c
  5173  00EA3A  1004               	iorwf	___awmod@divisor+1,w,c
  5174  00EA3C  B4D8               	btfsc	status,2,c
  5175  00EA3E  D01D               	goto	l3574
  5176  00EA40  0E01               	movlw	1
  5177  00EA42  6E05               	movwf	___awmod@counter,c
  5178  00EA44  D005               	goto	l3564
  5179  00EA46                     l3562:
  5180  00EA46  90D8               	bcf	status,0,c
  5181  00EA48  3603               	rlcf	___awmod@divisor,f,c
  5182  00EA4A  3604               	rlcf	___awmod@divisor+1,f,c
  5183  00EA4C  2A05               	incf	___awmod@counter,f,c
  5184  00EA4E  D000               	goto	l3564
  5185  00EA50                     l3564:
  5186  00EA50  BE04               	btfsc	___awmod@divisor+1,7,c
  5187  00EA52  D002               	goto	l3566
  5188  00EA54  D7F8               	goto	l3562
  5189  00EA56  D000               	goto	l3566
  5190  00EA58                     l3566:
  5191  00EA58  5003               	movf	___awmod@divisor,w,c
  5192  00EA5A  5C01               	subwf	___awmod@dividend,w,c
  5193  00EA5C  5004               	movf	___awmod@divisor+1,w,c
  5194  00EA5E  5802               	subwfb	___awmod@dividend+1,w,c
  5195  00EA60  A0D8               	btfss	status,0,c
  5196  00EA62  D005               	goto	l3570
  5197  00EA64  5003               	movf	___awmod@divisor,w,c
  5198  00EA66  5E01               	subwf	___awmod@dividend,f,c
  5199  00EA68  5004               	movf	___awmod@divisor+1,w,c
  5200  00EA6A  5A02               	subwfb	___awmod@dividend+1,f,c
  5201  00EA6C  D000               	goto	l3570
  5202  00EA6E                     l3570:
  5203  00EA6E  90D8               	bcf	status,0,c
  5204  00EA70  3204               	rrcf	___awmod@divisor+1,f,c
  5205  00EA72  3203               	rrcf	___awmod@divisor,f,c
  5206  00EA74  2E05               	decfsz	___awmod@counter,f,c
  5207  00EA76  D7F0               	goto	l3566
  5208  00EA78  D000               	goto	l3574
  5209  00EA7A                     l3574:
  5210  00EA7A  5006               	movf	___awmod@sign,w,c
  5211  00EA7C  B4D8               	btfsc	status,2,c
  5212  00EA7E  D005               	goto	l3578
  5213  00EA80  6C01               	negf	___awmod@dividend,c
  5214  00EA82  1E02               	comf	___awmod@dividend+1,f,c
  5215  00EA84  B0D8               	btfsc	status,0,c
  5216  00EA86  2A02               	incf	___awmod@dividend+1,f,c
  5217  00EA88  D000               	goto	l3578
  5218  00EA8A                     l3578:
  5219  00EA8A  C001  F001         	movff	___awmod@dividend,?___awmod
  5220  00EA8E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5221  00EA92  0012               	return	
  5222  00EA94  0012               	return		;funcret
  5223  00EA96                     __end_of___awmod:
  5224                           	opt stack 0
  5225                           tosu	equ	0xFFF
  5226                           tosh	equ	0xFFE
  5227                           tosl	equ	0xFFD
  5228                           pclath	equ	0xFFA
  5229                           tblptru	equ	0xFF8
  5230                           tblptrh	equ	0xFF7
  5231                           tblptrl	equ	0xFF6
  5232                           tablat	equ	0xFF5
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf1	equ	0xFE7
  5236                           postinc1	equ	0xFE6
  5237                           postdec1	equ	0xFE5
  5238                           fsr1h	equ	0xFE2
  5239                           fsr1l	equ	0xFE1
  5240                           indf2	equ	0xFDF
  5241                           postinc2	equ	0xFDE
  5242                           postdec2	equ	0xFDD
  5243                           plusw2	equ	0xFDB
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function _guardar_elemento *****************
  5249 ;; Defined at:
  5250 ;;		line 12 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  tecla           1    wreg     unsigned char 
  5253 ;;  array           2   35[COMRAM] PTR unsigned char 
  5254 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5255 ;;		 -> fecha@day(3), 
  5256 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  5257 ;;		 -> tamanio_hora(2), tamanio_minutos(2), tamanio_dia(2), tamanio_mes(2), 
  5258 ;;		 -> tamanio_anio(2), 
  5259 ;;  validacion      2   39[COMRAM] int 
  5260 ;;  dato_fecha      2   41[COMRAM] PTR int 
  5261 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5262 ;;		 -> dia(2), 
  5263 ;;  doit            2   43[COMRAM] PTR FTN(PTR int ,const i
  5264 ;;		 -> actualizar_minutos(0), actualizar_hora(0), actualiza_dia(0), actualiza_elemento(0), 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  tecla           1   47[COMRAM] unsigned char 
  5267 ;;  i               2   48[COMRAM] int 
  5268 ;;  valor           2   50[COMRAM] int 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;		None               void
  5271 ;; Registers used:
  5272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5278 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5279 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5280 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5281 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5282 ;;Total ram usage:       17 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    5
  5285 ;; This function calls:
  5286 ;;		_actualiza_dia
  5287 ;;		_actualiza_elemento
  5288 ;;		_actualizar_hora
  5289 ;;		_actualizar_minutos
  5290 ;;		_convertir_a_int
  5291 ;;		_lcd_gotoxy
  5292 ;;		_lcd_putrs
  5293 ;;		_sprintf
  5294 ;; This function is called by:
  5295 ;;		_cambiar_dia
  5296 ;;		_cambiar_mes
  5297 ;;		_cambiar_anio
  5298 ;;		_cambiar_hora
  5299 ;;		_cambiar_minutos
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text29
  5304  00F9EA                     __ptext29:
  5305                           	opt stack 0
  5306  00F9EA                     _guardar_elemento:
  5307                           	opt stack 22
  5308                           
  5309                           ;incstack = 0
  5310                           ;guardar_elemento@tecla stored from wreg
  5311  00F9EA  6E30               	movwf	guardar_elemento@tecla,c
  5312                           
  5313                           ;fecha.c: 14: int valor = 0;
  5314  00F9EC  0E00               	movlw	0
  5315  00F9EE  6E34               	movwf	guardar_elemento@valor+1,c
  5316  00F9F0  0E00               	movlw	0
  5317  00F9F2  6E33               	movwf	guardar_elemento@valor,c
  5318                           
  5319                           ;fecha.c: 16: if (validacion){
  5320  00F9F4  5028               	movf	guardar_elemento@validacion,w,c
  5321  00F9F6  1029               	iorwf	guardar_elemento@validacion+1,w,c
  5322  00F9F8  B4D8               	btfsc	status,2,c
  5323  00F9FA  D044               	goto	l3674
  5324                           
  5325                           ;fecha.c: 18: sprintf(buffer2,"%01u",tecla);
  5326  00F9FC  0EA1               	movlw	low _buffer2
  5327  00F9FE  6E0D               	movwf	sprintf@sp,c
  5328  00FA00  0E00               	movlw	high _buffer2
  5329  00FA02  6E0E               	movwf	sprintf@sp+1,c
  5330  00FA04  0EE8               	movlw	low STR_8
  5331  00FA06  6E0F               	movwf	sprintf@f,c
  5332  00FA08  0EFF               	movlw	high STR_8
  5333  00FA0A  6E10               	movwf	sprintf@f+1,c
  5334  00FA0C  C030  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  5335  00FA10  6A12               	clrf	?_sprintf+5,c
  5336  00FA12  ECD5  F07D         	call	_sprintf	;wreg free
  5337                           
  5338                           ;fecha.c: 19: array[*tamanio_array] = *buffer2;
  5339  00FA16  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5340  00FA1A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5341  00FA1E  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5342  00FA22  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5343  00FA26  502E               	movf	??_guardar_elemento,w,c
  5344  00FA28  2424               	addwf	guardar_elemento@array,w,c
  5345  00FA2A  6ED9               	movwf	fsr2l,c
  5346  00FA2C  502F               	movf	??_guardar_elemento+1,w,c
  5347  00FA2E  2025               	addwfc	guardar_elemento@array+1,w,c
  5348  00FA30  6EDA               	movwf	fsr2h,c
  5349  00FA32  C0A1  FFDF         	movff	_buffer2,indf2
  5350                           
  5351                           ;fecha.c: 20: array [(*tamanio_array)+1] = 0;
  5352  00FA36  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5353  00FA3A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5354  00FA3E  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5355  00FA42  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5356  00FA46  0E01               	movlw	1
  5357  00FA48  262E               	addwf	??_guardar_elemento,f,c
  5358  00FA4A  0E00               	movlw	0
  5359  00FA4C  222F               	addwfc	??_guardar_elemento+1,f,c
  5360  00FA4E  502E               	movf	??_guardar_elemento,w,c
  5361  00FA50  2424               	addwf	guardar_elemento@array,w,c
  5362  00FA52  6ED9               	movwf	fsr2l,c
  5363  00FA54  502F               	movf	??_guardar_elemento+1,w,c
  5364  00FA56  2025               	addwfc	guardar_elemento@array+1,w,c
  5365  00FA58  6EDA               	movwf	fsr2h,c
  5366  00FA5A  0E00               	movlw	0
  5367  00FA5C  6EDF               	movwf	indf2,c
  5368                           
  5369                           ;fecha.c: 21: (*tamanio_array)++;
  5370  00FA5E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5371  00FA62  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5372  00FA66  2ADE               	incf	postinc2,f,c
  5373  00FA68  0E00               	movlw	0
  5374  00FA6A  22DD               	addwfc	postdec2,f,c
  5375                           
  5376                           ;fecha.c: 23: lcd_gotoxy(1,2);
  5377  00FA6C  0E02               	movlw	2
  5378  00FA6E  6E05               	movwf	lcd_gotoxy@y,c
  5379  00FA70  0E01               	movlw	1
  5380  00FA72  EC01  F070         	call	_lcd_gotoxy
  5381                           
  5382                           ;fecha.c: 24: lcd_putrs(array);
  5383  00FA76  C024  F009         	movff	guardar_elemento@array,lcd_putrs@ptr
  5384  00FA7A  C025  F00A         	movff	guardar_elemento@array+1,lcd_putrs@ptr+1
  5385  00FA7E  EC96  F071         	call	_lcd_putrs	;wreg free
  5386  00FA82  D000               	goto	l3674
  5387  00FA84                     l3674:
  5388                           
  5389                           ;fecha.c: 25: }
  5390                           ;fecha.c: 27: if (*tamanio_array >= 3 - 1){
  5391  00FA84  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5392  00FA88  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5393  00FA8C  0E01               	movlw	1
  5394  00FA8E  BEDB               	btfsc	plusw2,7,c
  5395  00FA90  0012               	return	
  5396  00FA92  0E01               	movlw	1
  5397  00FA94  50DB               	movf	plusw2,w,c
  5398  00FA96  E104               	bnz	u2890
  5399  00FA98  0E02               	movlw	2
  5400  00FA9A  5CDE               	subwf	postinc2,w,c
  5401  00FA9C  A0D8               	btfss	status,0,c
  5402  00FA9E  0012               	return	
  5403  00FAA0                     u2890:
  5404                           
  5405                           ;fecha.c: 29: convertir_a_int(array,&valor);
  5406  00FAA0  C024  F00E         	movff	guardar_elemento@array,convertir_a_int@array
  5407  00FAA4  C025  F00F         	movff	guardar_elemento@array+1,convertir_a_int@array+1
  5408  00FAA8  0E33               	movlw	low guardar_elemento@valor
  5409  00FAAA  6E10               	movwf	convertir_a_int@valor,c
  5410  00FAAC  0E00               	movlw	high guardar_elemento@valor
  5411  00FAAE  6E11               	movwf	convertir_a_int@valor+1,c
  5412  00FAB0  EC9F  F06F         	call	_convertir_a_int	;wreg free
  5413                           
  5414                           ;fecha.c: 31: if(valor >= valor_min && valor <= valor_max){
  5415  00FAB4  0100               	movlb	0	; () banked
  5416  00FAB6  519F               	movf	fecha@valor_min& (0+255),w,b
  5417  00FAB8  5C33               	subwf	guardar_elemento@valor,w,c
  5418  00FABA  5034               	movf	guardar_elemento@valor+1,w,c
  5419  00FABC  0A80               	xorlw	128
  5420  00FABE  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5421  00FAC0  0100               	movlb	0	; () banked
  5422  00FAC2  51A0               	movf	(fecha@valor_min+1)& (0+255),w,b
  5423  00FAC4  0A80               	xorlw	128
  5424  00FAC6  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5425  00FAC8  A0D8               	btfss	status,0,c
  5426  00FACA  D029               	goto	l3686
  5427                           
  5428                           ; BSR set to: 0
  5429  00FACC  5033               	movf	guardar_elemento@valor,w,c
  5430  00FACE  0100               	movlb	0	; () banked
  5431  00FAD0  5D9D               	subwf	fecha@valor_max& (0+255),w,b
  5432  00FAD2  0100               	movlb	0	; () banked
  5433  00FAD4  519E               	movf	(fecha@valor_max+1)& (0+255),w,b
  5434  00FAD6  0A80               	xorlw	128
  5435  00FAD8  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5436  00FADA  5034               	movf	guardar_elemento@valor+1,w,c
  5437  00FADC  0A80               	xorlw	128
  5438  00FADE  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5439  00FAE0  A0D8               	btfss	status,0,c
  5440  00FAE2  D01D               	goto	l3686
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;fecha.c: 32: doit(dato_fecha,valor);
  5444  00FAE4  C02A  F016         	movff	guardar_elemento@dato_fecha,actualizar_minutos@elemento
  5445  00FAE8  C02B  F017         	movff	guardar_elemento@dato_fecha+1,actualizar_minutos@elemento+1
  5446  00FAEC  C033  F018         	movff	guardar_elemento@valor,actualizar_minutos@valor
  5447  00FAF0  C034  F019         	movff	guardar_elemento@valor+1,actualizar_minutos@valor+1
  5448  00FAF4  D801               	call	u2928
  5449  00FAF6  D00A               	goto	l3684
  5450  00FAF8                     u2928:
  5451  00FAF8  0005               	push	
  5452  00FAFA  6EFA               	movwf	pclath,c
  5453  00FAFC  502C               	movf	guardar_elemento@doit,w,c
  5454  00FAFE  6EFD               	movwf	tosl,c
  5455  00FB00  502D               	movf	guardar_elemento@doit+1,w,c
  5456  00FB02  6EFE               	movwf	tosh,c
  5457  00FB04  50F8               	movf	tblptru,w,c
  5458  00FB06  6EFF               	movwf	tosu,c
  5459  00FB08  50FA               	movf	pclath,w,c
  5460  00FB0A  0012               	return		;indir
  5461  00FB0C                     l3684:
  5462                           
  5463                           ;fecha.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  5464  00FB0C  0EFF               	movlw	255
  5465  00FB0E  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5466  00FB10  0E8A               	movlw	138
  5467  00FB12                     u3787:
  5468  00FB12  2EE8               	decfsz	wreg,f,c
  5469  00FB14  D7FE               	goto	u3787
  5470  00FB16  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5471  00FB18  D7FC               	goto	u3787
  5472  00FB1A  D000               	nop2	
  5473                           
  5474                           ;fecha.c: 35: }else{
  5475  00FB1C  0012               	return	
  5476  00FB1E                     l3686:
  5477                           
  5478                           ;fecha.c: 36: *tamanio_array = 0;
  5479  00FB1E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5480  00FB22  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5481  00FB26  0E00               	movlw	0
  5482  00FB28  6EDE               	movwf	postinc2,c
  5483  00FB2A  0E00               	movlw	0
  5484  00FB2C  6EDD               	movwf	postdec2,c
  5485                           
  5486                           ;fecha.c: 37: *array = 0;
  5487  00FB2E  C024  FFD9         	movff	guardar_elemento@array,fsr2l
  5488  00FB32  C025  FFDA         	movff	guardar_elemento@array+1,fsr2h
  5489  00FB36  0E00               	movlw	0
  5490  00FB38  6EDF               	movwf	indf2,c
  5491                           
  5492                           ;fecha.c: 38: lcd_gotoxy(1,2);
  5493  00FB3A  0E02               	movlw	2
  5494  00FB3C  6E05               	movwf	lcd_gotoxy@y,c
  5495  00FB3E  0E01               	movlw	1
  5496  00FB40  EC01  F070         	call	_lcd_gotoxy
  5497                           
  5498                           ;fecha.c: 39: sprintf(buffer2,"valor >=%d y <=%d",valor_min,valor_max);
  5499  00FB44  0EA1               	movlw	low _buffer2
  5500  00FB46  6E0D               	movwf	sprintf@sp,c
  5501  00FB48  0E00               	movlw	high _buffer2
  5502  00FB4A  6E0E               	movwf	sprintf@sp+1,c
  5503  00FB4C  0E4D               	movlw	low STR_29
  5504  00FB4E  6E0F               	movwf	sprintf@f,c
  5505  00FB50  0EFF               	movlw	high STR_29
  5506  00FB52  6E10               	movwf	sprintf@f+1,c
  5507  00FB54  C09F  F011         	movff	fecha@valor_min,?_sprintf+4
  5508  00FB58  C0A0  F012         	movff	fecha@valor_min+1,?_sprintf+5
  5509  00FB5C  C09D  F013         	movff	fecha@valor_max,?_sprintf+6
  5510  00FB60  C09E  F014         	movff	fecha@valor_max+1,?_sprintf+7
  5511  00FB64  ECD5  F07D         	call	_sprintf	;wreg free
  5512                           
  5513                           ;fecha.c: 40: lcd_putrs(buffer2);
  5514  00FB68  0EA1               	movlw	low _buffer2
  5515  00FB6A  6E09               	movwf	lcd_putrs@ptr,c
  5516  00FB6C  0E00               	movlw	high _buffer2
  5517  00FB6E  6E0A               	movwf	lcd_putrs@ptr+1,c
  5518  00FB70  EC96  F071         	call	_lcd_putrs	;wreg free
  5519                           
  5520                           ;fecha.c: 42: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  5521  00FB74  0E00               	movlw	0
  5522  00FB76  6E32               	movwf	guardar_elemento@i+1,c
  5523  00FB78  0E00               	movlw	0
  5524  00FB7A  6E31               	movwf	guardar_elemento@i,c
  5525  00FB7C                     l3696:
  5526  00FB7C  BE32               	btfsc	guardar_elemento@i+1,7,c
  5527  00FB7E  D008               	goto	l3700
  5528  00FB80  5032               	movf	guardar_elemento@i+1,w,c
  5529  00FB82  E112               	bnz	l595
  5530  00FB84  0E04               	movlw	4
  5531  00FB86  5C31               	subwf	guardar_elemento@i,w,c
  5532  00FB88  B0D8               	btfsc	status,0,c
  5533  00FB8A  0012               	return	
  5534  00FB8C  D001               	goto	l3700
  5535  00FB8E  0012               	return	
  5536  00FB90                     l3700:
  5537  00FB90  0EFF               	movlw	255
  5538  00FB92  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5539  00FB94  0E8A               	movlw	138
  5540  00FB96                     u3797:
  5541  00FB96  2EE8               	decfsz	wreg,f,c
  5542  00FB98  D7FE               	goto	u3797
  5543  00FB9A  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5544  00FB9C  D7FC               	goto	u3797
  5545  00FB9E  D000               	nop2	
  5546  00FBA0  4A31               	infsnz	guardar_elemento@i,f,c
  5547  00FBA2  2A32               	incf	guardar_elemento@i+1,f,c
  5548  00FBA4  D7EB               	goto	l3696
  5549  00FBA6  0012               	return	
  5550  00FBA8                     l595:
  5551  00FBA8  0012               	return		;funcret
  5552  00FBAA                     __end_of_guardar_elemento:
  5553                           	opt stack 0
  5554                           tosu	equ	0xFFF
  5555                           tosh	equ	0xFFE
  5556                           tosl	equ	0xFFD
  5557                           pclath	equ	0xFFA
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           indf1	equ	0xFE7
  5565                           postinc1	equ	0xFE6
  5566                           postdec1	equ	0xFE5
  5567                           fsr1h	equ	0xFE2
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           plusw2	equ	0xFDB
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _convertir_a_int *****************
  5578 ;; Defined at:
  5579 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  array           2   13[COMRAM] PTR unsigned char 
  5582 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5583 ;;		 -> fecha@day(3), 
  5584 ;;  valor           2   15[COMRAM] PTR int 
  5585 ;;		 -> guardar_elemento@valor(2), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;		None               void
  5590 ;; Registers used:
  5591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5600 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5601 ;;Total ram usage:        4 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    2
  5604 ;; This function calls:
  5605 ;;		_atoi
  5606 ;; This function is called by:
  5607 ;;		_guardar_elemento
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text30
  5612  00DF3E                     __ptext30:
  5613                           	opt stack 0
  5614  00DF3E                     _convertir_a_int:
  5615                           	opt stack 24
  5616                           
  5617                           ;fecha.c: 9: *valor = atoi(array);
  5618                           
  5619                           ;incstack = 0
  5620  00DF3E  C00E  F007         	movff	convertir_a_int@array,atoi@s
  5621  00DF42  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  5622  00DF46  EC13  F077         	call	_atoi	;wreg free
  5623  00DF4A  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  5624  00DF4E  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  5625  00DF52  C007  FFDE         	movff	?_atoi,postinc2
  5626  00DF56  C008  FFDD         	movff	?_atoi+1,postdec2
  5627  00DF5A  0012               	return		;funcret
  5628  00DF5C                     __end_of_convertir_a_int:
  5629                           	opt stack 0
  5630                           tosu	equ	0xFFF
  5631                           tosh	equ	0xFFE
  5632                           tosl	equ	0xFFD
  5633                           pclath	equ	0xFFA
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf1	equ	0xFE7
  5641                           postinc1	equ	0xFE6
  5642                           postdec1	equ	0xFE5
  5643                           fsr1h	equ	0xFE2
  5644                           fsr1l	equ	0xFE1
  5645                           indf2	equ	0xFDF
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           plusw2	equ	0xFDB
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _atoi *****************
  5654 ;; Defined at:
  5655 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  s               2    6[COMRAM] PTR const unsigned char 
  5658 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5659 ;;		 -> fecha@day(3), comando(3), 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  a               2   11[COMRAM] int 
  5662 ;;  sign            1   10[COMRAM] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  2    6[COMRAM] int 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5673 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5675 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5676 ;;Total ram usage:        7 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    1
  5679 ;; This function calls:
  5680 ;;		___wmul
  5681 ;;		_isdigit
  5682 ;; This function is called by:
  5683 ;;		_main
  5684 ;;		_convertir_a_int
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text31
  5689  00EE26                     __ptext31:
  5690                           	opt stack 0
  5691  00EE26                     _atoi:
  5692                           	opt stack 24
  5693                           
  5694                           ;incstack = 0
  5695  00EE26  D003               	goto	l3294
  5696  00EE28                     l3292:
  5697  00EE28  4A07               	infsnz	atoi@s,f,c
  5698  00EE2A  2A08               	incf	atoi@s+1,f,c
  5699  00EE2C  D000               	goto	l3294
  5700  00EE2E                     l3294:
  5701  00EE2E  C007  FFD9         	movff	atoi@s,fsr2l
  5702  00EE32  C008  FFDA         	movff	atoi@s+1,fsr2h
  5703  00EE36  0E20               	movlw	32
  5704  00EE38  18DE               	xorwf	postinc2,w,c
  5705  00EE3A  B4D8               	btfsc	status,2,c
  5706  00EE3C  D7F5               	goto	l3292
  5707  00EE3E  C007  FFD9         	movff	atoi@s,fsr2l
  5708  00EE42  C008  FFDA         	movff	atoi@s+1,fsr2h
  5709  00EE46  0E09               	movlw	9
  5710  00EE48  18DE               	xorwf	postinc2,w,c
  5711  00EE4A  B4D8               	btfsc	status,2,c
  5712  00EE4C  D7ED               	goto	l3292
  5713  00EE4E  0E00               	movlw	0
  5714  00EE50  6E0D               	movwf	atoi@a+1,c
  5715  00EE52  0E00               	movlw	0
  5716  00EE54  6E0C               	movwf	atoi@a,c
  5717  00EE56  0E00               	movlw	0
  5718  00EE58  6E0B               	movwf	atoi@sign,c
  5719  00EE5A  C007  FFD9         	movff	atoi@s,fsr2l
  5720  00EE5E  C008  FFDA         	movff	atoi@s+1,fsr2h
  5721  00EE62  0E2D               	movlw	45
  5722  00EE64  18DE               	xorwf	postinc2,w,c
  5723  00EE66  A4D8               	btfss	status,2,c
  5724  00EE68  D002               	goto	l3304
  5725  00EE6A  2A0B               	incf	atoi@sign,f,c
  5726  00EE6C  D025               	goto	l3310
  5727  00EE6E                     l3304:
  5728  00EE6E  C007  FFD9         	movff	atoi@s,fsr2l
  5729  00EE72  C008  FFDA         	movff	atoi@s+1,fsr2h
  5730  00EE76  0E2B               	movlw	43
  5731  00EE78  18DE               	xorwf	postinc2,w,c
  5732  00EE7A  A4D8               	btfss	status,2,c
  5733  00EE7C  D020               	goto	l3312
  5734  00EE7E  D01C               	goto	l3310
  5735  00EE80  D01E               	goto	l3312
  5736  00EE82                     l3308:
  5737  00EE82  C00C  F001         	movff	atoi@a,___wmul@multiplier
  5738  00EE86  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  5739  00EE8A  0E00               	movlw	0
  5740  00EE8C  6E04               	movwf	___wmul@multiplicand+1,c
  5741  00EE8E  0E0A               	movlw	10
  5742  00EE90  6E03               	movwf	___wmul@multiplicand,c
  5743  00EE92  EC25  F070         	call	___wmul	;wreg free
  5744  00EE96  C007  FFD9         	movff	atoi@s,fsr2l
  5745  00EE9A  C008  FFDA         	movff	atoi@s+1,fsr2h
  5746  00EE9E  50DF               	movf	indf2,w,c
  5747  00EEA0  6E09               	movwf	??_atoi& (0+255),c
  5748  00EEA2  6A0A               	clrf	(??_atoi+1)& (0+255),c
  5749  00EEA4  5001               	movf	?___wmul,w,c
  5750  00EEA6  2609               	addwf	??_atoi,f,c
  5751  00EEA8  5002               	movf	?___wmul+1,w,c
  5752  00EEAA  220A               	addwfc	??_atoi+1,f,c
  5753  00EEAC  0ED0               	movlw	208
  5754  00EEAE  2409               	addwf	??_atoi,w,c
  5755  00EEB0  6E0C               	movwf	atoi@a,c
  5756  00EEB2  0EFF               	movlw	255
  5757  00EEB4  200A               	addwfc	??_atoi+1,w,c
  5758  00EEB6  6E0D               	movwf	atoi@a+1,c
  5759  00EEB8                     l3310:
  5760  00EEB8  4A07               	infsnz	atoi@s,f,c
  5761  00EEBA  2A08               	incf	atoi@s+1,f,c
  5762  00EEBC  D000               	goto	l3312
  5763  00EEBE                     l3312:
  5764  00EEBE  C007  FFD9         	movff	atoi@s,fsr2l
  5765  00EEC2  C008  FFDA         	movff	atoi@s+1,fsr2h
  5766  00EEC6  50DF               	movf	indf2,w,c
  5767  00EEC8  ECCE  F06F         	call	_isdigit
  5768  00EECC  B0D8               	btfsc	status,0,c
  5769  00EECE  D7D9               	goto	l3308
  5770  00EED0  500B               	movf	atoi@sign,w,c
  5771  00EED2  B4D8               	btfsc	status,2,c
  5772  00EED4  D00D               	goto	l1186
  5773  00EED6  C00C  F009         	movff	atoi@a,??_atoi
  5774  00EEDA  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  5775  00EEDE  1E09               	comf	??_atoi,f,c
  5776  00EEE0  1E0A               	comf	??_atoi+1,f,c
  5777  00EEE2  4A09               	infsnz	??_atoi,f,c
  5778  00EEE4  2A0A               	incf	??_atoi+1,f,c
  5779  00EEE6  C009  F007         	movff	??_atoi,?_atoi
  5780  00EEEA  C00A  F008         	movff	??_atoi+1,?_atoi+1
  5781  00EEEE  0012               	return	
  5782  00EEF0                     l1186:
  5783  00EEF0  C00C  F007         	movff	atoi@a,?_atoi
  5784  00EEF4  C00D  F008         	movff	atoi@a+1,?_atoi+1
  5785  00EEF8  0012               	return		;funcret
  5786  00EEFA                     __end_of_atoi:
  5787                           	opt stack 0
  5788                           tosu	equ	0xFFF
  5789                           tosh	equ	0xFFE
  5790                           tosl	equ	0xFFD
  5791                           pclath	equ	0xFFA
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           indf1	equ	0xFE7
  5799                           postinc1	equ	0xFE6
  5800                           postdec1	equ	0xFE5
  5801                           fsr1h	equ	0xFE2
  5802                           fsr1l	equ	0xFE1
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           plusw2	equ	0xFDB
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _actualizar_hora *****************
  5812 ;; Defined at:
  5813 ;;		line 155 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  elemento        2   21[COMRAM] PTR int 
  5816 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5817 ;;		 -> dia(2), 
  5818 ;;  valor           2   23[COMRAM] const int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5833 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5834 ;;Total ram usage:        4 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    4
  5837 ;; This function calls:
  5838 ;;		_Write_RTC
  5839 ;;		_actualiza_elemento
  5840 ;;		_inicializar_hora
  5841 ;;		_restaurar_comando
  5842 ;; This function is called by:
  5843 ;;		_cambiar_hora
  5844 ;;		_guardar_elemento
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text32
  5849  00DFE0                     __ptext32:
  5850                           	opt stack 0
  5851  00DFE0                     _actualizar_hora:
  5852                           	opt stack 22
  5853                           
  5854                           ;fecha.c: 157: actualiza_elemento(elemento,valor);
  5855                           
  5856                           ;incstack = 0
  5857  00DFE0  C016  F016         	movff	actualizar_hora@elemento,actualiza_elemento@elemento
  5858  00DFE4  C017  F017         	movff	actualizar_hora@elemento+1,actualiza_elemento@elemento+1
  5859  00DFE8  C018  F018         	movff	actualizar_hora@valor,actualiza_elemento@valor
  5860  00DFEC  C019  F019         	movff	actualizar_hora@valor+1,actualiza_elemento@valor+1
  5861  00DFF0  EC41  F06F         	call	_actualiza_elemento	;wreg free
  5862                           
  5863                           ;fecha.c: 158: Write_RTC();
  5864  00DFF4  EC32  F07C         	call	_Write_RTC	;wreg free
  5865                           
  5866                           ;fecha.c: 159: restaurar_comando();
  5867  00DFF8  EC58  F06F         	call	_restaurar_comando	;wreg free
  5868                           
  5869                           ;fecha.c: 160: inicializar_hora();
  5870  00DFFC  ECAE  F06F         	call	_inicializar_hora	;wreg free
  5871  00E000  0012               	return		;funcret
  5872  00E002                     __end_of_actualizar_hora:
  5873                           	opt stack 0
  5874                           tosu	equ	0xFFF
  5875                           tosh	equ	0xFFE
  5876                           tosl	equ	0xFFD
  5877                           pclath	equ	0xFFA
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           indf1	equ	0xFE7
  5885                           postinc1	equ	0xFE6
  5886                           postdec1	equ	0xFE5
  5887                           fsr1h	equ	0xFE2
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           postdec2	equ	0xFDD
  5892                           plusw2	equ	0xFDB
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _actualiza_dia *****************
  5898 ;; Defined at:
  5899 ;;		line 69 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  elemento        2   21[COMRAM] PTR int 
  5902 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5903 ;;		 -> dia(2), 
  5904 ;;  valor           2   23[COMRAM] const int 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;		None               void
  5909 ;; Registers used:
  5910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5916 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5920 ;;Total ram usage:        4 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    4
  5923 ;; This function calls:
  5924 ;;		_actualiza_elemento
  5925 ;;		_inicializar_fecha
  5926 ;;		_restaurar_comando
  5927 ;; This function is called by:
  5928 ;;		_cambiar_dia
  5929 ;;		_guardar_elemento
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text33
  5934  00DF20                     __ptext33:
  5935                           	opt stack 0
  5936  00DF20                     _actualiza_dia:
  5937                           	opt stack 22
  5938                           
  5939                           ;fecha.c: 71: actualiza_elemento(elemento,valor);
  5940                           
  5941                           ;incstack = 0
  5942  00DF20  C016  F016         	movff	actualiza_dia@elemento,actualiza_elemento@elemento
  5943  00DF24  C017  F017         	movff	actualiza_dia@elemento+1,actualiza_elemento@elemento+1
  5944  00DF28  C018  F018         	movff	actualiza_dia@valor,actualiza_elemento@valor
  5945  00DF2C  C019  F019         	movff	actualiza_dia@valor+1,actualiza_elemento@valor+1
  5946  00DF30  EC41  F06F         	call	_actualiza_elemento	;wreg free
  5947                           
  5948                           ;fecha.c: 72: restaurar_comando();
  5949  00DF34  EC58  F06F         	call	_restaurar_comando	;wreg free
  5950                           
  5951                           ;fecha.c: 73: inicializar_fecha();
  5952  00DF38  ECBC  F070         	call	_inicializar_fecha	;wreg free
  5953  00DF3C  0012               	return		;funcret
  5954  00DF3E                     __end_of_actualiza_dia:
  5955                           	opt stack 0
  5956                           tosu	equ	0xFFF
  5957                           tosh	equ	0xFFE
  5958                           tosl	equ	0xFFD
  5959                           pclath	equ	0xFFA
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           postinc0	equ	0xFEE
  5965                           wreg	equ	0xFE8
  5966                           indf1	equ	0xFE7
  5967                           postinc1	equ	0xFE6
  5968                           postdec1	equ	0xFE5
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           postdec2	equ	0xFDD
  5974                           plusw2	equ	0xFDB
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _actualiza_elemento *****************
  5980 ;; Defined at:
  5981 ;;		line 48 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  elemento        2   21[COMRAM] PTR int 
  5984 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5985 ;;		 -> dia(2), 
  5986 ;;  valor           2   23[COMRAM] const int 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6001 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6002 ;;Total ram usage:        4 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    3
  6005 ;; This function calls:
  6006 ;;		_Write_RTC
  6007 ;; This function is called by:
  6008 ;;		_actualiza_dia
  6009 ;;		_cambiar_mes
  6010 ;;		_cambiar_anio
  6011 ;;		_actualizar_hora
  6012 ;;		_guardar_elemento
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text34
  6017  00DE82                     __ptext34:
  6018                           	opt stack 0
  6019  00DE82                     _actualiza_elemento:
  6020                           	opt stack 22
  6021                           
  6022                           ;fecha.c: 50: *elemento = valor;
  6023                           
  6024                           ;incstack = 0
  6025  00DE82  C016  FFD9         	movff	actualiza_elemento@elemento,fsr2l
  6026  00DE86  C017  FFDA         	movff	actualiza_elemento@elemento+1,fsr2h
  6027  00DE8A  C018  FFDE         	movff	actualiza_elemento@valor,postinc2
  6028  00DE8E  C019  FFDD         	movff	actualiza_elemento@valor+1,postdec2
  6029                           
  6030                           ;fecha.c: 51: Write_RTC();
  6031  00DE92  EC32  F07C         	call	_Write_RTC	;wreg free
  6032  00DE96  0012               	return		;funcret
  6033  00DE98                     __end_of_actualiza_elemento:
  6034                           	opt stack 0
  6035                           tosu	equ	0xFFF
  6036                           tosh	equ	0xFFE
  6037                           tosl	equ	0xFFD
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           indf1	equ	0xFE7
  6046                           postinc1	equ	0xFE6
  6047                           postdec1	equ	0xFE5
  6048                           fsr1h	equ	0xFE2
  6049                           fsr1l	equ	0xFE1
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           plusw2	equ	0xFDB
  6054                           fsr2h	equ	0xFDA
  6055                           fsr2l	equ	0xFD9
  6056                           status	equ	0xFD8
  6057                           
  6058 ;; *************** function _actualizar_minutos *****************
  6059 ;; Defined at:
  6060 ;;		line 163 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  elemento        2   21[COMRAM] PTR int 
  6063 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6064 ;;		 -> dia(2), 
  6065 ;;  valor           2   23[COMRAM] const int 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;		None
  6068 ;; Return value:  Size  Location     Type
  6069 ;;		None               void
  6070 ;; Registers used:
  6071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6080 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6081 ;;Total ram usage:        4 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    3
  6084 ;; This function calls:
  6085 ;;		_Write_RTC
  6086 ;; This function is called by:
  6087 ;;		_cambiar_minutos
  6088 ;;		_guardar_elemento
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text35
  6093  00DF7C                     __ptext35:
  6094                           	opt stack 0
  6095  00DF7C                     _actualizar_minutos:
  6096                           	opt stack 23
  6097                           
  6098                           ;fecha.c: 165: *elemento = valor;
  6099                           
  6100                           ;incstack = 0
  6101  00DF7C  C016  FFD9         	movff	actualizar_minutos@elemento,fsr2l
  6102  00DF80  C017  FFDA         	movff	actualizar_minutos@elemento+1,fsr2h
  6103  00DF84  C018  FFDE         	movff	actualizar_minutos@valor,postinc2
  6104  00DF88  C019  FFDD         	movff	actualizar_minutos@valor+1,postdec2
  6105                           
  6106                           ;fecha.c: 166: segundo = 00;
  6107  00DF8C  0E00               	movlw	0
  6108  00DF8E  0100               	movlb	0	; () banked
  6109  00DF90  6F98               	movwf	(_segundo+1)& (0+255),b
  6110  00DF92  0E00               	movlw	0
  6111  00DF94  6F97               	movwf	_segundo& (0+255),b
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;fecha.c: 167: Write_RTC();
  6115  00DF96  EC32  F07C         	call	_Write_RTC	;wreg free
  6116  00DF9A  0012               	return		;funcret
  6117  00DF9C                     __end_of_actualizar_minutos:
  6118                           	opt stack 0
  6119                           tosu	equ	0xFFF
  6120                           tosh	equ	0xFFE
  6121                           tosl	equ	0xFFD
  6122                           pclath	equ	0xFFA
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           postinc0	equ	0xFEE
  6128                           wreg	equ	0xFE8
  6129                           indf1	equ	0xFE7
  6130                           postinc1	equ	0xFE6
  6131                           postdec1	equ	0xFE5
  6132                           fsr1h	equ	0xFE2
  6133                           fsr1l	equ	0xFE1
  6134                           indf2	equ	0xFDF
  6135                           postinc2	equ	0xFDE
  6136                           postdec2	equ	0xFDD
  6137                           plusw2	equ	0xFDB
  6138                           fsr2h	equ	0xFDA
  6139                           fsr2l	equ	0xFD9
  6140                           status	equ	0xFD8
  6141                           
  6142 ;; *************** function _cancelar_cambio_password *****************
  6143 ;; Defined at:
  6144 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;		None
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;		None
  6149 ;; Return value:  Size  Location     Type
  6150 ;;		None               void
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6162 ;;Total ram usage:        0 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    1
  6165 ;; This function calls:
  6166 ;;		_restaurar_comando
  6167 ;; This function is called by:
  6168 ;;		_menu_cambiar_password
  6169 ;;		_leer_teclado
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text36
  6174  00E026                     __ptext36:
  6175                           	opt stack 0
  6176  00E026                     _cancelar_cambio_password:
  6177                           	opt stack 28
  6178                           
  6179                           ;alarma.c: 4: new_password[0] = 0;
  6180                           
  6181                           ;incstack = 0
  6182  00E026  0E00               	movlw	0
  6183  00E028  0100               	movlb	0	; () banked
  6184  00E02A  6FBC               	movwf	_new_password& (0+255),b
  6185                           
  6186                           ;alarma.c: 5: temporal[0] = 0;
  6187  00E02C  0E00               	movlw	0
  6188  00E02E  0100               	movlb	0	; () banked
  6189  00E030  6FC3               	movwf	_temporal& (0+255),b
  6190                           
  6191                           ;alarma.c: 7: tamanio_new_password = 0;
  6192  00E032  0E00               	movlw	0
  6193  00E034  0100               	movlb	0	; () banked
  6194  00E036  6FE1               	movwf	(_tamanio_new_password+1)& (0+255),b
  6195  00E038  0E00               	movlw	0
  6196  00E03A  6FE0               	movwf	_tamanio_new_password& (0+255),b
  6197                           
  6198                           ;alarma.c: 8: tamanio_password = 0;
  6199  00E03C  0E00               	movlw	0
  6200  00E03E  6E59               	movwf	_tamanio_password+1,c
  6201  00E040  0E00               	movlw	0
  6202  00E042  6E58               	movwf	_tamanio_password,c
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;alarma.c: 10: restaurar_comando();
  6206  00E044  EC58  F06F         	call	_restaurar_comando	;wreg free
  6207  00E048  0012               	return		;funcret
  6208  00E04A                     __end_of_cancelar_cambio_password:
  6209                           	opt stack 0
  6210                           tosu	equ	0xFFF
  6211                           tosh	equ	0xFFE
  6212                           tosl	equ	0xFFD
  6213                           pclath	equ	0xFFA
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           postinc0	equ	0xFEE
  6219                           wreg	equ	0xFE8
  6220                           indf1	equ	0xFE7
  6221                           postinc1	equ	0xFE6
  6222                           postdec1	equ	0xFE5
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _cancelar_cambio_hora *****************
  6234 ;; Defined at:
  6235 ;;		line 188 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;		None
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;		None               void
  6242 ;; Registers used:
  6243 ;;		wreg, status,2, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6253 ;;Total ram usage:        0 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    1
  6256 ;; This function calls:
  6257 ;;		_inicializar_hora
  6258 ;;		_restaurar_comando
  6259 ;; This function is called by:
  6260 ;;		_menu_cambiar_horario
  6261 ;;		_leer_teclado
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text37
  6266  00DDA2                     __ptext37:
  6267                           	opt stack 0
  6268  00DDA2                     _cancelar_cambio_hora:
  6269                           	opt stack 28
  6270                           
  6271                           ;fecha.c: 189: inicializar_hora();
  6272                           
  6273                           ;incstack = 0
  6274  00DDA2  ECAE  F06F         	call	_inicializar_hora	;wreg free
  6275                           
  6276                           ;fecha.c: 190: restaurar_comando();
  6277  00DDA6  EC58  F06F         	call	_restaurar_comando	;wreg free
  6278  00DDAA  0012               	return		;funcret
  6279  00DDAC                     __end_of_cancelar_cambio_hora:
  6280                           	opt stack 0
  6281                           tosu	equ	0xFFF
  6282                           tosh	equ	0xFFE
  6283                           tosl	equ	0xFFD
  6284                           pclath	equ	0xFFA
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           postinc0	equ	0xFEE
  6290                           wreg	equ	0xFE8
  6291                           indf1	equ	0xFE7
  6292                           postinc1	equ	0xFE6
  6293                           postdec1	equ	0xFE5
  6294                           fsr1h	equ	0xFE2
  6295                           fsr1l	equ	0xFE1
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           plusw2	equ	0xFDB
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _cancelar_cambio_fecha *****************
  6305 ;; Defined at:
  6306 ;;		line 121 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;		None               void
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6324 ;;Total ram usage:        0 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    1
  6327 ;; This function calls:
  6328 ;;		_inicializar_fecha
  6329 ;;		_restaurar_comando
  6330 ;; This function is called by:
  6331 ;;		_menu_cambiar_fecha
  6332 ;;		_leer_teclado
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text38
  6337  00DD98                     __ptext38:
  6338                           	opt stack 0
  6339  00DD98                     _cancelar_cambio_fecha:
  6340                           	opt stack 28
  6341                           
  6342                           ;fecha.c: 122: inicializar_fecha();
  6343                           
  6344                           ;incstack = 0
  6345  00DD98  ECBC  F070         	call	_inicializar_fecha	;wreg free
  6346                           
  6347                           ;fecha.c: 123: restaurar_comando();
  6348  00DD9C  EC58  F06F         	call	_restaurar_comando	;wreg free
  6349  00DDA0  0012               	return		;funcret
  6350  00DDA2                     __end_of_cancelar_cambio_fecha:
  6351                           	opt stack 0
  6352                           tosu	equ	0xFFF
  6353                           tosh	equ	0xFFE
  6354                           tosl	equ	0xFFD
  6355                           pclath	equ	0xFFA
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           indf1	equ	0xFE7
  6363                           postinc1	equ	0xFE6
  6364                           postdec1	equ	0xFE5
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           plusw2	equ	0xFDB
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _borrar_hora *****************
  6376 ;; Defined at:
  6377 ;;		line 193 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;		None               void
  6384 ;; Registers used:
  6385 ;;		wreg, status,2
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; This function calls:
  6398 ;;		Nothing
  6399 ;; This function is called by:
  6400 ;;		_menu_cambiar_horario
  6401 ;;		_leer_teclado
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text39
  6406  00DDF0                     __ptext39:
  6407                           	opt stack 0
  6408  00DDF0                     _borrar_hora:
  6409                           	opt stack 29
  6410                           
  6411                           ;fecha.c: 194: *hour = 0;
  6412                           
  6413                           ;incstack = 0
  6414  00DDF0  0E00               	movlw	0
  6415  00DDF2  0100               	movlb	0	; () banked
  6416  00DDF4  6FD0               	movwf	fecha@hour& (0+255),b
  6417                           
  6418                           ;fecha.c: 195: tamanio_hora = 0;
  6419  00DDF6  0E00               	movlw	0
  6420  00DDF8  6E55               	movwf	_tamanio_hora+1,c
  6421  00DDFA  0E00               	movlw	0
  6422  00DDFC  6E54               	movwf	_tamanio_hora,c
  6423                           
  6424                           ; BSR set to: 0
  6425  00DDFE  0012               	return		;funcret
  6426  00DE00                     __end_of_borrar_hora:
  6427                           	opt stack 0
  6428                           tosu	equ	0xFFF
  6429                           tosh	equ	0xFFE
  6430                           tosl	equ	0xFFD
  6431                           pclath	equ	0xFFA
  6432                           tblptru	equ	0xFF8
  6433                           tblptrh	equ	0xFF7
  6434                           tblptrl	equ	0xFF6
  6435                           tablat	equ	0xFF5
  6436                           postinc0	equ	0xFEE
  6437                           wreg	equ	0xFE8
  6438                           indf1	equ	0xFE7
  6439                           postinc1	equ	0xFE6
  6440                           postdec1	equ	0xFE5
  6441                           fsr1h	equ	0xFE2
  6442                           fsr1l	equ	0xFE1
  6443                           indf2	equ	0xFDF
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           plusw2	equ	0xFDB
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _borrar_minutos *****************
  6452 ;; Defined at:
  6453 ;;		line 199 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;		None               void
  6460 ;; Registers used:
  6461 ;;		wreg, status,2
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6471 ;;Total ram usage:        0 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; This function calls:
  6474 ;;		Nothing
  6475 ;; This function is called by:
  6476 ;;		_menu_cambiar_horario
  6477 ;;		_leer_teclado
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text40
  6482  00DE5A                     __ptext40:
  6483                           	opt stack 0
  6484  00DE5A                     _borrar_minutos:
  6485                           	opt stack 29
  6486                           
  6487                           ;fecha.c: 200: *minutes = 0;
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;incstack = 0
  6491  00DE5A  0E00               	movlw	0
  6492  00DE5C  0100               	movlb	0	; () banked
  6493  00DE5E  6FD3               	movwf	fecha@minutes& (0+255),b
  6494                           
  6495                           ;fecha.c: 201: tamanio_minutos = 0;
  6496  00DE60  0E00               	movlw	0
  6497  00DE62  0100               	movlb	0	; () banked
  6498  00DE64  6FDF               	movwf	(_tamanio_minutos+1)& (0+255),b
  6499  00DE66  0E00               	movlw	0
  6500  00DE68  6FDE               	movwf	_tamanio_minutos& (0+255),b
  6501                           
  6502                           ; BSR set to: 0
  6503  00DE6A  0012               	return		;funcret
  6504  00DE6C                     __end_of_borrar_minutos:
  6505                           	opt stack 0
  6506                           tosu	equ	0xFFF
  6507                           tosh	equ	0xFFE
  6508                           tosl	equ	0xFFD
  6509                           pclath	equ	0xFFA
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           indf1	equ	0xFE7
  6517                           postinc1	equ	0xFE6
  6518                           postdec1	equ	0xFE5
  6519                           fsr1h	equ	0xFE2
  6520                           fsr1l	equ	0xFE1
  6521                           indf2	equ	0xFDF
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           plusw2	equ	0xFDB
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _borrar_dia *****************
  6530 ;; Defined at:
  6531 ;;		line 126 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, status,2
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_menu_cambiar_fecha
  6555 ;;		_leer_teclado
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text41
  6560  00DDE0                     __ptext41:
  6561                           	opt stack 0
  6562  00DDE0                     _borrar_dia:
  6563                           	opt stack 29
  6564                           
  6565                           ;fecha.c: 127: *day = 0;
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;incstack = 0
  6569  00DDE0  0E00               	movlw	0
  6570  00DDE2  0100               	movlb	0	; () banked
  6571  00DDE4  6FCD               	movwf	fecha@day& (0+255),b
  6572                           
  6573                           ;fecha.c: 128: tamanio_dia = 0;
  6574  00DDE6  0E00               	movlw	0
  6575  00DDE8  6E53               	movwf	_tamanio_dia+1,c
  6576  00DDEA  0E00               	movlw	0
  6577  00DDEC  6E52               	movwf	_tamanio_dia,c
  6578                           
  6579                           ; BSR set to: 0
  6580  00DDEE  0012               	return		;funcret
  6581  00DDF0                     __end_of_borrar_dia:
  6582                           	opt stack 0
  6583                           tosu	equ	0xFFF
  6584                           tosh	equ	0xFFE
  6585                           tosl	equ	0xFFD
  6586                           pclath	equ	0xFFA
  6587                           tblptru	equ	0xFF8
  6588                           tblptrh	equ	0xFF7
  6589                           tblptrl	equ	0xFF6
  6590                           tablat	equ	0xFF5
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           indf1	equ	0xFE7
  6594                           postinc1	equ	0xFE6
  6595                           postdec1	equ	0xFE5
  6596                           fsr1h	equ	0xFE2
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           plusw2	equ	0xFDB
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _borrar_mes *****************
  6607 ;; Defined at:
  6608 ;;		line 132 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;		None
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;		None
  6613 ;; Return value:  Size  Location     Type
  6614 ;;		None               void
  6615 ;; Registers used:
  6616 ;;		wreg, status,2
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6626 ;;Total ram usage:        0 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_menu_cambiar_fecha
  6632 ;;		_leer_teclado
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text42
  6637  00DDD0                     __ptext42:
  6638                           	opt stack 0
  6639  00DDD0                     _borrar_mes:
  6640                           	opt stack 29
  6641                           
  6642                           ;fecha.c: 133: *month = 0;
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;incstack = 0
  6646  00DDD0  0E00               	movlw	0
  6647  00DDD2  0100               	movlb	0	; () banked
  6648  00DDD4  6FD6               	movwf	fecha@month& (0+255),b
  6649                           
  6650                           ;fecha.c: 134: tamanio_mes = 0;
  6651  00DDD6  0E00               	movlw	0
  6652  00DDD8  6E57               	movwf	_tamanio_mes+1,c
  6653  00DDDA  0E00               	movlw	0
  6654  00DDDC  6E56               	movwf	_tamanio_mes,c
  6655                           
  6656                           ; BSR set to: 0
  6657  00DDDE  0012               	return		;funcret
  6658  00DDE0                     __end_of_borrar_mes:
  6659                           	opt stack 0
  6660                           tosu	equ	0xFFF
  6661                           tosh	equ	0xFFE
  6662                           tosl	equ	0xFFD
  6663                           pclath	equ	0xFFA
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           postinc0	equ	0xFEE
  6669                           wreg	equ	0xFE8
  6670                           indf1	equ	0xFE7
  6671                           postinc1	equ	0xFE6
  6672                           postdec1	equ	0xFE5
  6673                           fsr1h	equ	0xFE2
  6674                           fsr1l	equ	0xFE1
  6675                           indf2	equ	0xFDF
  6676                           postinc2	equ	0xFDE
  6677                           postdec2	equ	0xFDD
  6678                           plusw2	equ	0xFDB
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _borrar_anio *****************
  6684 ;; Defined at:
  6685 ;;		line 137 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;		None               void
  6692 ;; Registers used:
  6693 ;;		wreg, status,2
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6703 ;;Total ram usage:        0 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_menu_cambiar_fecha
  6709 ;;		_leer_teclado
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text43
  6714  00DE48                     __ptext43:
  6715                           	opt stack 0
  6716  00DE48                     _borrar_anio:
  6717                           	opt stack 29
  6718                           
  6719                           ;fecha.c: 138: *year = 0;
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;incstack = 0
  6723  00DE48  0E00               	movlw	0
  6724  00DE4A  0100               	movlb	0	; () banked
  6725  00DE4C  6FD9               	movwf	fecha@year& (0+255),b
  6726                           
  6727                           ;fecha.c: 139: tamanio_anio = 0;
  6728  00DE4E  0E00               	movlw	0
  6729  00DE50  0100               	movlb	0	; () banked
  6730  00DE52  6FDD               	movwf	(_tamanio_anio+1)& (0+255),b
  6731  00DE54  0E00               	movlw	0
  6732  00DE56  6FDC               	movwf	_tamanio_anio& (0+255),b
  6733                           
  6734                           ; BSR set to: 0
  6735  00DE58  0012               	return		;funcret
  6736  00DE5A                     __end_of_borrar_anio:
  6737                           	opt stack 0
  6738                           tosu	equ	0xFFF
  6739                           tosh	equ	0xFFE
  6740                           tosl	equ	0xFFD
  6741                           pclath	equ	0xFFA
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           indf1	equ	0xFE7
  6749                           postinc1	equ	0xFE6
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           plusw2	equ	0xFDB
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _restaurar_comando *****************
  6762 ;; Defined at:
  6763 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;		None               void
  6770 ;; Registers used:
  6771 ;;		wreg, status,2
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;Total ram usage:        0 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_main
  6787 ;;		_inicializar_teclado
  6788 ;;		_actualiza_dia
  6789 ;;		_cancelar_cambio_fecha
  6790 ;;		_actualizar_hora
  6791 ;;		_cancelar_cambio_hora
  6792 ;;		_cancelar_cambio_password
  6793 ;;		_actualizar_password
  6794 ;;		_leer_teclado
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text44
  6799  00DEB0                     __ptext44:
  6800                           	opt stack 0
  6801  00DEB0                     _restaurar_comando:
  6802                           	opt stack 29
  6803                           
  6804                           ;teclado.c: 11: tamanio_comando = 0;
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;incstack = 0
  6808  00DEB0  0E00               	movlw	0
  6809  00DEB2  6E48               	movwf	_tamanio_comando+1,c
  6810  00DEB4  0E00               	movlw	0
  6811  00DEB6  6E47               	movwf	_tamanio_comando,c
  6812                           
  6813                           ;teclado.c: 13: comando[0] = 'x';
  6814  00DEB8  0E78               	movlw	120
  6815  00DEBA  0100               	movlb	0	; () banked
  6816  00DEBC  6FCA               	movwf	_comando& (0+255),b
  6817                           
  6818                           ;teclado.c: 14: comando[1] = 'x';
  6819  00DEBE  0E78               	movlw	120
  6820  00DEC0  0100               	movlb	0	; () banked
  6821  00DEC2  6FCB               	movwf	(_comando+1)& (0+255),b
  6822                           
  6823                           ;teclado.c: 15: comando[2] = 0;
  6824  00DEC4  0E00               	movlw	0
  6825  00DEC6  0100               	movlb	0	; () banked
  6826  00DEC8  6FCC               	movwf	(_comando+2)& (0+255),b
  6827                           
  6828                           ; BSR set to: 0
  6829  00DECA  0012               	return		;funcret
  6830  00DECC                     __end_of_restaurar_comando:
  6831                           	opt stack 0
  6832                           tosu	equ	0xFFF
  6833                           tosh	equ	0xFFE
  6834                           tosl	equ	0xFFD
  6835                           pclath	equ	0xFFA
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           indf1	equ	0xFE7
  6843                           postinc1	equ	0xFE6
  6844                           postdec1	equ	0xFE5
  6845                           fsr1h	equ	0xFE2
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           plusw2	equ	0xFDB
  6851                           fsr2h	equ	0xFDA
  6852                           fsr2l	equ	0xFD9
  6853                           status	equ	0xFD8
  6854                           
  6855 ;; *************** function _desactivar_alarma *****************
  6856 ;; Defined at:
  6857 ;;		line 251 in file "main.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;		None
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;		None
  6862 ;; Return value:  Size  Location     Type
  6863 ;;		None               void
  6864 ;; Registers used:
  6865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6875 ;;Total ram usage:        0 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    7
  6878 ;; This function calls:
  6879 ;;		_clear_display
  6880 ;;		_inicializar_intentos_fallidos
  6881 ;;		_menu_ingresar_password
  6882 ;; This function is called by:
  6883 ;;		_main
  6884 ;;		_leer_teclado
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text45
  6889  00E09C                     __ptext45:
  6890                           	opt stack 0
  6891  00E09C                     _desactivar_alarma:
  6892                           	opt stack 22
  6893                           
  6894                           ;main.c: 252: if (!autorizado){
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;incstack = 0
  6898  00E09C  5045               	movf	_autorizado,w,c
  6899  00E09E  1046               	iorwf	_autorizado+1,w,c
  6900  00E0A0  A4D8               	btfss	status,2,c
  6901  00E0A2  0012               	return	
  6902                           
  6903                           ;main.c: 253: inicializar_intentos_fallidos();
  6904  00E0A4  ECDB  F06E         	call	_inicializar_intentos_fallidos	;wreg free
  6905                           
  6906                           ;main.c: 254: puntero_funcion = mostrar_guardar_password;
  6907  00E0A8  0EF4               	movlw	low _mostrar_guardar_password
  6908  00E0AA  0100               	movlb	0	; () banked
  6909  00E0AC  6F95               	movwf	_puntero_funcion& (0+255),b
  6910  00E0AE  0EE0               	movlw	high _mostrar_guardar_password
  6911  00E0B0  0100               	movlb	0	; () banked
  6912  00E0B2  6F96               	movwf	(_puntero_funcion+1)& (0+255),b
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 255: menu_ingresar_password();
  6916  00E0B4  ECBB  F076         	call	_menu_ingresar_password	;wreg free
  6917                           
  6918                           ;main.c: 256: clear_display(tamanio_password);
  6919  00E0B8  C058  F00B         	movff	_tamanio_password,clear_display@pos
  6920  00E0BC  C059  F00C         	movff	_tamanio_password+1,clear_display@pos+1
  6921  00E0C0  ECDF  F06F         	call	_clear_display	;wreg free
  6922  00E0C4  0012               	return	
  6923  00E0C6  0012               	return		;funcret
  6924  00E0C8                     __end_of_desactivar_alarma:
  6925                           	opt stack 0
  6926                           tosu	equ	0xFFF
  6927                           tosh	equ	0xFFE
  6928                           tosl	equ	0xFFD
  6929                           pclath	equ	0xFFA
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           postinc0	equ	0xFEE
  6935                           wreg	equ	0xFE8
  6936                           indf1	equ	0xFE7
  6937                           postinc1	equ	0xFE6
  6938                           postdec1	equ	0xFE5
  6939                           fsr1h	equ	0xFE2
  6940                           fsr1l	equ	0xFE1
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           postdec2	equ	0xFDD
  6944                           plusw2	equ	0xFDB
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function _menu_ingresar_password *****************
  6950 ;; Defined at:
  6951 ;;		line 96 in file "main.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  i               2   13[COMRAM] int 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6969 ;;Total ram usage:        3 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    6
  6972 ;; This function calls:
  6973 ;;		_clear_display
  6974 ;;		_lcd_comand
  6975 ;;		_lcd_gotoxy
  6976 ;;		_lcd_putrs
  6977 ;;		_validar_password
  6978 ;; This function is called by:
  6979 ;;		_desactivar_alarma
  6980 ;;		_main
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text46
  6985  00ED76                     __ptext46:
  6986                           	opt stack 0
  6987  00ED76                     _menu_ingresar_password:
  6988                           	opt stack 24
  6989                           
  6990                           ;main.c: 98: lcd_comand(0b00001100);
  6991                           
  6992                           ;incstack = 0
  6993  00ED76  0E0C               	movlw	12
  6994  00ED78  ECE1  F06E         	call	_lcd_comand
  6995                           
  6996                           ;main.c: 99: lcd_gotoxy(1,1);
  6997  00ED7C  0E01               	movlw	1
  6998  00ED7E  6E05               	movwf	lcd_gotoxy@y,c
  6999  00ED80  0E01               	movlw	1
  7000  00ED82  EC01  F070         	call	_lcd_gotoxy
  7001                           
  7002                           ;main.c: 100: lcd_putrs("Inserte password");
  7003  00ED86  0EA5               	movlw	low STR_6
  7004  00ED88  6E09               	movwf	lcd_putrs@ptr,c
  7005  00ED8A  0EFF               	movlw	high STR_6
  7006  00ED8C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7007  00ED8E  EC96  F071         	call	_lcd_putrs	;wreg free
  7008                           
  7009                           ;main.c: 101: lcd_gotoxy(tamanio_password+1,2);
  7010  00ED92  0E02               	movlw	2
  7011  00ED94  6E05               	movwf	lcd_gotoxy@y,c
  7012  00ED96  2858               	incf	_tamanio_password,w,c
  7013  00ED98  EC01  F070         	call	_lcd_gotoxy
  7014                           
  7015                           ;main.c: 103: validar_password();
  7016  00ED9C  EC4B  F074         	call	_validar_password	;wreg free
  7017                           
  7018                           ;main.c: 104: if (tamanio_password >= 6 && !autorizado){
  7019  00EDA0  BE59               	btfsc	_tamanio_password+1,7,c
  7020  00EDA2  0012               	return	
  7021  00EDA4  5059               	movf	_tamanio_password+1,w,c
  7022  00EDA6  E104               	bnz	u3090
  7023  00EDA8  0E06               	movlw	6
  7024  00EDAA  5C58               	subwf	_tamanio_password,w,c
  7025  00EDAC  A0D8               	btfss	status,0,c
  7026  00EDAE  0012               	return	
  7027  00EDB0                     u3090:
  7028  00EDB0  5045               	movf	_autorizado,w,c
  7029  00EDB2  1046               	iorwf	_autorizado+1,w,c
  7030  00EDB4  A4D8               	btfss	status,2,c
  7031  00EDB6  0012               	return	
  7032                           
  7033                           ;main.c: 105: lcd_gotoxy(1,2);
  7034  00EDB8  0E02               	movlw	2
  7035  00EDBA  6E05               	movwf	lcd_gotoxy@y,c
  7036  00EDBC  0E01               	movlw	1
  7037  00EDBE  EC01  F070         	call	_lcd_gotoxy
  7038                           
  7039                           ;main.c: 106: lcd_putrs("ERROR pass");
  7040  00EDC2  0ED4               	movlw	low STR_7
  7041  00EDC4  6E09               	movwf	lcd_putrs@ptr,c
  7042  00EDC6  0EFF               	movlw	high STR_7
  7043  00EDC8  6E0A               	movwf	lcd_putrs@ptr+1,c
  7044  00EDCA  EC96  F071         	call	_lcd_putrs	;wreg free
  7045                           
  7046                           ;main.c: 108: intentos_fallidos++;
  7047  00EDCE  0100               	movlb	0	; () banked
  7048  00EDD0  4B8D               	infsnz	_intentos_fallidos& (0+255),f,b
  7049  00EDD2  2B8E               	incf	(_intentos_fallidos+1)& (0+255),f,b
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;main.c: 109: tamanio_password = 0;
  7053  00EDD4  0E00               	movlw	0
  7054  00EDD6  6E59               	movwf	_tamanio_password+1,c
  7055  00EDD8  0E00               	movlw	0
  7056  00EDDA  6E58               	movwf	_tamanio_password,c
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;main.c: 110: *current_password = 0;;
  7060  00EDDC  0E00               	movlw	0
  7061  00EDDE  0100               	movlb	0	; () banked
  7062  00EDE0  6FB5               	movwf	_current_password& (0+255),b
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;main.c: 112: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  7066  00EDE2  0E00               	movlw	0
  7067  00EDE4  6E0F               	movwf	menu_ingresar_password@i+1,c
  7068  00EDE6  0E00               	movlw	0
  7069  00EDE8  6E0E               	movwf	menu_ingresar_password@i,c
  7070  00EDEA                     l3764:
  7071                           
  7072                           ; BSR set to: 0
  7073  00EDEA  BE0F               	btfsc	menu_ingresar_password@i+1,7,c
  7074  00EDEC  D008               	goto	l3768
  7075  00EDEE  500F               	movf	menu_ingresar_password@i+1,w,c
  7076  00EDF0  E112               	bnz	l3772
  7077  00EDF2  0E04               	movlw	4
  7078  00EDF4  5C0E               	subwf	menu_ingresar_password@i,w,c
  7079  00EDF6  B0D8               	btfsc	status,0,c
  7080  00EDF8  D00E               	goto	l3772
  7081  00EDFA  D001               	goto	l3768
  7082                           
  7083                           ; BSR set to: 0
  7084  00EDFC  D00C               	goto	l3772
  7085  00EDFE                     l3768:
  7086  00EDFE  0EFF               	movlw	255
  7087  00EE00  6E0D               	movwf	??_menu_ingresar_password& (0+255),c
  7088  00EE02  0E8A               	movlw	138
  7089  00EE04                     u3807:
  7090  00EE04  2EE8               	decfsz	wreg,f,c
  7091  00EE06  D7FE               	goto	u3807
  7092  00EE08  2E0D               	decfsz	??_menu_ingresar_password& (0+255),f,c
  7093  00EE0A  D7FC               	goto	u3807
  7094  00EE0C  D000               	nop2	
  7095  00EE0E  4A0E               	infsnz	menu_ingresar_password@i,f,c
  7096  00EE10  2A0F               	incf	menu_ingresar_password@i+1,f,c
  7097  00EE12  D7EB               	goto	l3764
  7098  00EE14  D000               	goto	l3772
  7099  00EE16                     l3772:
  7100                           
  7101                           ;main.c: 113: clear_display(tamanio_password);
  7102  00EE16  C058  F00B         	movff	_tamanio_password,clear_display@pos
  7103  00EE1A  C059  F00C         	movff	_tamanio_password+1,clear_display@pos+1
  7104  00EE1E  ECDF  F06F         	call	_clear_display	;wreg free
  7105  00EE22  0012               	return	
  7106  00EE24  0012               	return		;funcret
  7107  00EE26                     __end_of_menu_ingresar_password:
  7108                           	opt stack 0
  7109                           tosu	equ	0xFFF
  7110                           tosh	equ	0xFFE
  7111                           tosl	equ	0xFFD
  7112                           pclath	equ	0xFFA
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           postinc0	equ	0xFEE
  7118                           wreg	equ	0xFE8
  7119                           indf1	equ	0xFE7
  7120                           postinc1	equ	0xFE6
  7121                           postdec1	equ	0xFE5
  7122                           fsr1h	equ	0xFE2
  7123                           fsr1l	equ	0xFE1
  7124                           indf2	equ	0xFDF
  7125                           postinc2	equ	0xFDE
  7126                           postdec2	equ	0xFDD
  7127                           plusw2	equ	0xFDB
  7128                           fsr2h	equ	0xFDA
  7129                           fsr2l	equ	0xFD9
  7130                           status	equ	0xFD8
  7131                           
  7132 ;; *************** function _validar_password *****************
  7133 ;; Defined at:
  7134 ;;		line 39 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;		None
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  i               2    2[COMRAM] int 
  7139 ;; Return value:  Size  Location     Type
  7140 ;;		None               void
  7141 ;; Registers used:
  7142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7151 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7152 ;;Total ram usage:        4 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_menu_ingresar_password
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text47
  7162  00E896                     __ptext47:
  7163                           	opt stack 0
  7164  00E896                     _validar_password:
  7165                           	opt stack 29
  7166                           
  7167                           ;alarma.c: 41: autorizado = 1;
  7168                           
  7169                           ;incstack = 0
  7170  00E896  0E00               	movlw	0
  7171  00E898  6E46               	movwf	_autorizado+1,c
  7172  00E89A  0E01               	movlw	1
  7173  00E89C  6E45               	movwf	_autorizado,c
  7174                           
  7175                           ;alarma.c: 42: int i = 0;
  7176  00E89E  0E00               	movlw	0
  7177  00E8A0  6E04               	movwf	validar_password@i+1,c
  7178  00E8A2  0E00               	movlw	0
  7179  00E8A4  6E03               	movwf	validar_password@i,c
  7180                           
  7181                           ;alarma.c: 43: while (i < 6 && autorizado==1){
  7182  00E8A6  D018               	goto	l3598
  7183  00E8A8                     l3592:
  7184                           
  7185                           ;alarma.c: 44: if (current_password[i] != password[i])
  7186  00E8A8  0EE2               	movlw	low _password
  7187  00E8AA  2403               	addwf	validar_password@i,w,c
  7188  00E8AC  6ED9               	movwf	fsr2l,c
  7189  00E8AE  0E00               	movlw	high _password
  7190  00E8B0  2004               	addwfc	validar_password@i+1,w,c
  7191  00E8B2  6EDA               	movwf	fsr2h,c
  7192  00E8B4  0EB5               	movlw	low _current_password
  7193  00E8B6  2403               	addwf	validar_password@i,w,c
  7194  00E8B8  6EE1               	movwf	fsr1l,c
  7195  00E8BA  0E00               	movlw	high _current_password
  7196  00E8BC  2004               	addwfc	validar_password@i+1,w,c
  7197  00E8BE  6EE2               	movwf	fsr1h,c
  7198  00E8C0  50DE               	movf	postinc2,w,c
  7199  00E8C2  18E6               	xorwf	postinc1,w,c
  7200  00E8C4  B4D8               	btfsc	status,2,c
  7201  00E8C6  D005               	goto	l3596
  7202                           
  7203                           ;alarma.c: 45: autorizado = 0;
  7204  00E8C8  0E00               	movlw	0
  7205  00E8CA  6E46               	movwf	_autorizado+1,c
  7206  00E8CC  0E00               	movlw	0
  7207  00E8CE  6E45               	movwf	_autorizado,c
  7208  00E8D0  D000               	goto	l3596
  7209  00E8D2                     l3596:
  7210                           
  7211                           ;alarma.c: 46: i++;
  7212  00E8D2  4A03               	infsnz	validar_password@i,f,c
  7213  00E8D4  2A04               	incf	validar_password@i+1,f,c
  7214  00E8D6  D000               	goto	l3598
  7215  00E8D8                     l3598:
  7216  00E8D8  BE04               	btfsc	validar_password@i+1,7,c
  7217  00E8DA  D006               	goto	l3600
  7218  00E8DC  5004               	movf	validar_password@i+1,w,c
  7219  00E8DE  E10A               	bnz	l3602
  7220  00E8E0  0E06               	movlw	6
  7221  00E8E2  5C03               	subwf	validar_password@i,w,c
  7222  00E8E4  B0D8               	btfsc	status,0,c
  7223  00E8E6  D006               	goto	l3602
  7224  00E8E8                     l3600:
  7225  00E8E8  0445               	decf	_autorizado,w,c
  7226  00E8EA  1046               	iorwf	_autorizado+1,w,c
  7227  00E8EC  A4D8               	btfss	status,2,c
  7228  00E8EE  D002               	goto	l3602
  7229  00E8F0  D7DB               	goto	l3592
  7230  00E8F2  D000               	goto	l3602
  7231  00E8F4                     l3602:
  7232                           
  7233                           ;alarma.c: 47: }
  7234                           ;alarma.c: 49: if (autorizado == 1){
  7235  00E8F4  0445               	decf	_autorizado,w,c
  7236  00E8F6  1046               	iorwf	_autorizado+1,w,c
  7237  00E8F8  A4D8               	btfss	status,2,c
  7238  00E8FA  0012               	return	
  7239                           
  7240                           ;alarma.c: 50: tamanio_password = 0;
  7241  00E8FC  0E00               	movlw	0
  7242  00E8FE  6E59               	movwf	_tamanio_password+1,c
  7243  00E900  0E00               	movlw	0
  7244  00E902  6E58               	movwf	_tamanio_password,c
  7245                           
  7246                           ;alarma.c: 51: encendida = 1;
  7247  00E904  0E00               	movlw	0
  7248  00E906  0100               	movlb	0	; () banked
  7249  00E908  6FEC               	movwf	(_encendida+1)& (0+255),b
  7250  00E90A  0E01               	movlw	1
  7251  00E90C  6FEB               	movwf	_encendida& (0+255),b
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;alarma.c: 52: LATBbits.LATB1 = 1;;
  7255  00E90E  828A               	bsf	3978,1,c	;volatile
  7256  00E910  0012               	return	
  7257                           
  7258                           ; BSR set to: 0
  7259  00E912  0012               	return		;funcret
  7260  00E914                     __end_of_validar_password:
  7261                           	opt stack 0
  7262                           tosu	equ	0xFFF
  7263                           tosh	equ	0xFFE
  7264                           tosl	equ	0xFFD
  7265                           pclath	equ	0xFFA
  7266                           tblptru	equ	0xFF8
  7267                           tblptrh	equ	0xFF7
  7268                           tblptrl	equ	0xFF6
  7269                           tablat	equ	0xFF5
  7270                           postinc0	equ	0xFEE
  7271                           wreg	equ	0xFE8
  7272                           indf1	equ	0xFE7
  7273                           postinc1	equ	0xFE6
  7274                           postdec1	equ	0xFE5
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _clear_display *****************
  7286 ;; Defined at:
  7287 ;;		line 90 in file "main.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  pos             2   10[COMRAM] const int 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;		None               void
  7294 ;; Registers used:
  7295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;Total ram usage:        2 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    5
  7308 ;; This function calls:
  7309 ;;		_lcd_gotoxy
  7310 ;;		_lcd_putrs
  7311 ;; This function is called by:
  7312 ;;		_menu_ingresar_password
  7313 ;;		_menu_cambiar_fecha
  7314 ;;		_menu_cambiar_horario
  7315 ;;		_menu_cambiar_password
  7316 ;;		_desactivar_alarma
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text48
  7321  00DFBE                     __ptext48:
  7322                           	opt stack 0
  7323  00DFBE                     _clear_display:
  7324                           	opt stack 24
  7325                           
  7326                           ;main.c: 91: lcd_gotoxy(pos,2);
  7327                           
  7328                           ;incstack = 0
  7329  00DFBE  0E02               	movlw	2
  7330  00DFC0  6E05               	movwf	lcd_gotoxy@y,c
  7331  00DFC2  500B               	movf	clear_display@pos,w,c
  7332  00DFC4  EC01  F070         	call	_lcd_gotoxy
  7333                           
  7334                           ;main.c: 92: lcd_putrs("                         ");
  7335  00DFC8  0ECC               	movlw	low STR_5
  7336  00DFCA  6E09               	movwf	lcd_putrs@ptr,c
  7337  00DFCC  0EFE               	movlw	high STR_5
  7338  00DFCE  6E0A               	movwf	lcd_putrs@ptr+1,c
  7339  00DFD0  EC96  F071         	call	_lcd_putrs	;wreg free
  7340                           
  7341                           ;main.c: 93: lcd_gotoxy(pos,2);
  7342  00DFD4  0E02               	movlw	2
  7343  00DFD6  6E05               	movwf	lcd_gotoxy@y,c
  7344  00DFD8  500B               	movf	clear_display@pos,w,c
  7345  00DFDA  EC01  F070         	call	_lcd_gotoxy
  7346  00DFDE  0012               	return		;funcret
  7347  00DFE0                     __end_of_clear_display:
  7348                           	opt stack 0
  7349                           tosu	equ	0xFFF
  7350                           tosh	equ	0xFFE
  7351                           tosl	equ	0xFFD
  7352                           pclath	equ	0xFFA
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           postinc0	equ	0xFEE
  7358                           wreg	equ	0xFE8
  7359                           indf1	equ	0xFE7
  7360                           postinc1	equ	0xFE6
  7361                           postdec1	equ	0xFE5
  7362                           fsr1h	equ	0xFE2
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           plusw2	equ	0xFDB
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function _inicializar_hora *****************
  7373 ;; Defined at:
  7374 ;;		line 147 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;		None               void
  7381 ;; Registers used:
  7382 ;;		wreg, status,2
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7392 ;;Total ram usage:        0 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_actualizar_hora
  7398 ;;		_cancelar_cambio_hora
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text49
  7403  00DF5C                     __ptext49:
  7404                           	opt stack 0
  7405  00DF5C                     _inicializar_hora:
  7406                           	opt stack 25
  7407                           
  7408                           ;fecha.c: 148: *hour = 0;
  7409                           
  7410                           ;incstack = 0
  7411  00DF5C  0E00               	movlw	0
  7412  00DF5E  0100               	movlb	0	; () banked
  7413  00DF60  6FD0               	movwf	fecha@hour& (0+255),b
  7414                           
  7415                           ;fecha.c: 149: *minutes = 0;
  7416  00DF62  0E00               	movlw	0
  7417  00DF64  0100               	movlb	0	; () banked
  7418  00DF66  6FD3               	movwf	fecha@minutes& (0+255),b
  7419                           
  7420                           ;fecha.c: 151: tamanio_hora = 0;
  7421  00DF68  0E00               	movlw	0
  7422  00DF6A  6E55               	movwf	_tamanio_hora+1,c
  7423  00DF6C  0E00               	movlw	0
  7424  00DF6E  6E54               	movwf	_tamanio_hora,c
  7425                           
  7426                           ;fecha.c: 152: tamanio_minutos = 0;
  7427  00DF70  0E00               	movlw	0
  7428  00DF72  0100               	movlb	0	; () banked
  7429  00DF74  6FDF               	movwf	(_tamanio_minutos+1)& (0+255),b
  7430  00DF76  0E00               	movlw	0
  7431  00DF78  6FDE               	movwf	_tamanio_minutos& (0+255),b
  7432                           
  7433                           ; BSR set to: 0
  7434  00DF7A  0012               	return		;funcret
  7435  00DF7C                     __end_of_inicializar_hora:
  7436                           	opt stack 0
  7437                           tosu	equ	0xFFF
  7438                           tosh	equ	0xFFE
  7439                           tosl	equ	0xFFD
  7440                           pclath	equ	0xFFA
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           indf1	equ	0xFE7
  7448                           postinc1	equ	0xFE6
  7449                           postdec1	equ	0xFE5
  7450                           fsr1h	equ	0xFE2
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           plusw2	equ	0xFDB
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _inicializar_fecha *****************
  7461 ;; Defined at:
  7462 ;;		line 59 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;		None               void
  7469 ;; Registers used:
  7470 ;;		wreg, status,2
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7480 ;;Total ram usage:        0 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; This function calls:
  7483 ;;		Nothing
  7484 ;; This function is called by:
  7485 ;;		_actualiza_dia
  7486 ;;		_cancelar_cambio_fecha
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text50
  7491  00E178                     __ptext50:
  7492                           	opt stack 0
  7493  00E178                     _inicializar_fecha:
  7494                           	opt stack 25
  7495                           
  7496                           ;fecha.c: 60: *day = 0;
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;incstack = 0
  7500  00E178  0E00               	movlw	0
  7501  00E17A  0100               	movlb	0	; () banked
  7502  00E17C  6FCD               	movwf	fecha@day& (0+255),b
  7503                           
  7504                           ;fecha.c: 61: *month = 0;
  7505  00E17E  0E00               	movlw	0
  7506  00E180  0100               	movlb	0	; () banked
  7507  00E182  6FD6               	movwf	fecha@month& (0+255),b
  7508                           
  7509                           ;fecha.c: 62: *year = 0;
  7510  00E184  0E00               	movlw	0
  7511  00E186  0100               	movlb	0	; () banked
  7512  00E188  6FD9               	movwf	fecha@year& (0+255),b
  7513                           
  7514                           ;fecha.c: 64: tamanio_dia = 0;
  7515  00E18A  0E00               	movlw	0
  7516  00E18C  6E53               	movwf	_tamanio_dia+1,c
  7517  00E18E  0E00               	movlw	0
  7518  00E190  6E52               	movwf	_tamanio_dia,c
  7519                           
  7520                           ;fecha.c: 65: tamanio_mes = 0;
  7521  00E192  0E00               	movlw	0
  7522  00E194  6E57               	movwf	_tamanio_mes+1,c
  7523  00E196  0E00               	movlw	0
  7524  00E198  6E56               	movwf	_tamanio_mes,c
  7525                           
  7526                           ;fecha.c: 66: tamanio_anio = 0;
  7527  00E19A  0E00               	movlw	0
  7528  00E19C  0100               	movlb	0	; () banked
  7529  00E19E  6FDD               	movwf	(_tamanio_anio+1)& (0+255),b
  7530  00E1A0  0E00               	movlw	0
  7531  00E1A2  6FDC               	movwf	_tamanio_anio& (0+255),b
  7532                           
  7533                           ; BSR set to: 0
  7534  00E1A4  0012               	return		;funcret
  7535  00E1A6                     __end_of_inicializar_fecha:
  7536                           	opt stack 0
  7537                           tosu	equ	0xFFF
  7538                           tosh	equ	0xFFE
  7539                           tosl	equ	0xFFD
  7540                           pclath	equ	0xFFA
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           indf1	equ	0xFE7
  7548                           postinc1	equ	0xFE6
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           plusw2	equ	0xFDB
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _inicializar_teclado *****************
  7561 ;; Defined at:
  7562 ;;		line 19 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7580 ;;Total ram usage:        0 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    1
  7583 ;; This function calls:
  7584 ;;		_restaurar_comando
  7585 ;; This function is called by:
  7586 ;;		_main
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text51
  7591  00E072                     __ptext51:
  7592                           	opt stack 0
  7593  00E072                     _inicializar_teclado:
  7594                           	opt stack 29
  7595                           
  7596                           ;teclado.c: 21: funcion_pulsador_B = restaurar_comando;
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;incstack = 0
  7600  00E072  0EB0               	movlw	low _restaurar_comando
  7601  00E074  0100               	movlb	0	; () banked
  7602  00E076  6F83               	movwf	_funcion_pulsador_B& (0+255),b
  7603  00E078  0EDE               	movlw	high _restaurar_comando
  7604  00E07A  0100               	movlb	0	; () banked
  7605  00E07C  6F84               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  7606                           
  7607                           ;teclado.c: 22: funcion_pulsador_C = restaurar_comando;
  7608  00E07E  0EB0               	movlw	low _restaurar_comando
  7609  00E080  0100               	movlb	0	; () banked
  7610  00E082  6F85               	movwf	_funcion_pulsador_C& (0+255),b
  7611  00E084  0EDE               	movlw	high _restaurar_comando
  7612  00E086  0100               	movlb	0	; () banked
  7613  00E088  6F86               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  7614                           
  7615                           ;teclado.c: 23: funcion_pulsador_D = restaurar_comando;
  7616  00E08A  0EB0               	movlw	low _restaurar_comando
  7617  00E08C  0100               	movlb	0	; () banked
  7618  00E08E  6F87               	movwf	_funcion_pulsador_D& (0+255),b
  7619  00E090  0EDE               	movlw	high _restaurar_comando
  7620  00E092  0100               	movlb	0	; () banked
  7621  00E094  6F88               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;teclado.c: 25: restaurar_comando();
  7625  00E096  EC58  F06F         	call	_restaurar_comando	;wreg free
  7626  00E09A  0012               	return		;funcret
  7627  00E09C                     __end_of_inicializar_teclado:
  7628                           	opt stack 0
  7629                           tosu	equ	0xFFF
  7630                           tosh	equ	0xFFE
  7631                           tosl	equ	0xFFD
  7632                           pclath	equ	0xFFA
  7633                           tblptru	equ	0xFF8
  7634                           tblptrh	equ	0xFF7
  7635                           tblptrl	equ	0xFF6
  7636                           tablat	equ	0xFF5
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           indf1	equ	0xFE7
  7640                           postinc1	equ	0xFE6
  7641                           postdec1	equ	0xFE5
  7642                           fsr1h	equ	0xFE2
  7643                           fsr1l	equ	0xFE1
  7644                           indf2	equ	0xFDF
  7645                           postinc2	equ	0xFDE
  7646                           postdec2	equ	0xFDD
  7647                           plusw2	equ	0xFDB
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function _desactivar_sonido_alarma *****************
  7653 ;; Defined at:
  7654 ;;		line 243 in file "main.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;		None               void
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, cstack
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7672 ;;Total ram usage:        0 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    1
  7675 ;; This function calls:
  7676 ;;		_inicializar_intentos_fallidos
  7677 ;; This function is called by:
  7678 ;;		_main
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text52
  7683  00DE6C                     __ptext52:
  7684                           	opt stack 0
  7685  00DE6C                     _desactivar_sonido_alarma:
  7686                           	opt stack 29
  7687                           
  7688                           ;main.c: 244: activada=0;
  7689                           
  7690                           ;incstack = 0
  7691  00DE6C  0E00               	movlw	0
  7692  00DE6E  0100               	movlb	0	; () banked
  7693  00DE70  6F7E               	movwf	(_activada+1)& (0+255),b
  7694  00DE72  0E00               	movlw	0
  7695  00DE74  6F7D               	movwf	_activada& (0+255),b
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;main.c: 245: LATBbits.LATB0 = 0;;
  7699  00DE76  908A               	bcf	3978,0,c	;volatile
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;main.c: 246: LATCbits.LATC7 = 0;;
  7703  00DE78  9E8B               	bcf	3979,7,c	;volatile
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;main.c: 247: LATCbits.LATC6 = 0;;
  7707  00DE7A  9C8B               	bcf	3979,6,c	;volatile
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;main.c: 248: inicializar_intentos_fallidos();
  7711  00DE7C  ECDB  F06E         	call	_inicializar_intentos_fallidos	;wreg free
  7712  00DE80  0012               	return		;funcret
  7713  00DE82                     __end_of_desactivar_sonido_alarma:
  7714                           	opt stack 0
  7715                           tosu	equ	0xFFF
  7716                           tosh	equ	0xFFE
  7717                           tosl	equ	0xFFD
  7718                           pclath	equ	0xFFA
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           indf1	equ	0xFE7
  7726                           postinc1	equ	0xFE6
  7727                           postdec1	equ	0xFE5
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           plusw2	equ	0xFDB
  7734                           fsr2h	equ	0xFDA
  7735                           fsr2l	equ	0xFD9
  7736                           status	equ	0xFD8
  7737                           
  7738 ;; *************** function _inicializar_intentos_fallidos *****************
  7739 ;; Defined at:
  7740 ;;		line 13 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;		None
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;                  2   84[None  ] int 
  7747 ;; Registers used:
  7748 ;;		wreg, status,2
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7758 ;;Total ram usage:        0 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_desactivar_sonido_alarma
  7764 ;;		_desactivar_alarma
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           	psect	text53
  7769  00DDB6                     __ptext53:
  7770                           	opt stack 0
  7771  00DDB6                     _inicializar_intentos_fallidos:
  7772                           	opt stack 28
  7773                           
  7774                           ;alarma.c: 14: intentos_fallidos = 0;
  7775                           
  7776                           ;incstack = 0
  7777  00DDB6  0E00               	movlw	0
  7778  00DDB8  0100               	movlb	0	; () banked
  7779  00DDBA  6F8E               	movwf	(_intentos_fallidos+1)& (0+255),b
  7780  00DDBC  0E00               	movlw	0
  7781  00DDBE  6F8D               	movwf	_intentos_fallidos& (0+255),b
  7782                           
  7783                           ; BSR set to: 0
  7784  00DDC0  0012               	return		;funcret
  7785  00DDC2                     __end_of_inicializar_intentos_fallidos:
  7786                           	opt stack 0
  7787                           tosu	equ	0xFFF
  7788                           tosh	equ	0xFFE
  7789                           tosl	equ	0xFFD
  7790                           pclath	equ	0xFFA
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           postinc0	equ	0xFEE
  7796                           wreg	equ	0xFE8
  7797                           indf1	equ	0xFE7
  7798                           postinc1	equ	0xFE6
  7799                           postdec1	equ	0xFE5
  7800                           fsr1h	equ	0xFE2
  7801                           fsr1l	equ	0xFE1
  7802                           indf2	equ	0xFDF
  7803                           postinc2	equ	0xFDE
  7804                           postdec2	equ	0xFDD
  7805                           plusw2	equ	0xFDB
  7806                           fsr2h	equ	0xFDA
  7807                           fsr2l	equ	0xFD9
  7808                           status	equ	0xFD8
  7809                           
  7810 ;; *************** function _caratula *****************
  7811 ;; Defined at:
  7812 ;;		line 35 in file "main.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  titulo          2   35[COMRAM] PTR const unsigned char 
  7815 ;;		 -> STR_22(9), 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7831 ;;Total ram usage:        4 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    5
  7834 ;; This function calls:
  7835 ;;		_lcd_comand
  7836 ;;		_lcd_gotoxy
  7837 ;;		_lcd_putrs
  7838 ;;		_sprintf
  7839 ;; This function is called by:
  7840 ;;		_main
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text54
  7845  00EEFA                     __ptext54:
  7846                           	opt stack 0
  7847  00EEFA                     _caratula:
  7848                           	opt stack 25
  7849                           
  7850                           ;main.c: 37: lcd_comand(0b00001100);
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;incstack = 0
  7854  00EEFA  0E0C               	movlw	12
  7855  00EEFC  ECE1  F06E         	call	_lcd_comand
  7856                           
  7857                           ;main.c: 38: lcd_gotoxy(1,1);
  7858  00EF00  0E01               	movlw	1
  7859  00EF02  6E05               	movwf	lcd_gotoxy@y,c
  7860  00EF04  0E01               	movlw	1
  7861  00EF06  EC01  F070         	call	_lcd_gotoxy
  7862                           
  7863                           ;main.c: 39: lcd_putrs(titulo);
  7864  00EF0A  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  7865  00EF0E  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  7866  00EF12  EC96  F071         	call	_lcd_putrs	;wreg free
  7867                           
  7868                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  7869  00EF16  0EA1               	movlw	low _buffer2
  7870  00EF18  6E0D               	movwf	sprintf@sp,c
  7871  00EF1A  0E00               	movlw	high _buffer2
  7872  00EF1C  6E0E               	movwf	sprintf@sp+1,c
  7873  00EF1E  0EB6               	movlw	low STR_1
  7874  00EF20  6E0F               	movwf	sprintf@f,c
  7875  00EF22  0EFF               	movlw	high STR_1
  7876  00EF24  6E10               	movwf	sprintf@f+1,c
  7877  00EF26  C0ED  F011         	movff	_dia,?_sprintf+4
  7878  00EF2A  C0EE  F012         	movff	_dia+1,?_sprintf+5
  7879  00EF2E  C05C  F013         	movff	_mes,?_sprintf+6
  7880  00EF32  C05D  F014         	movff	_mes+1,?_sprintf+7
  7881  00EF36  C05A  F015         	movff	_anio,?_sprintf+8
  7882  00EF3A  C05B  F016         	movff	_anio+1,?_sprintf+9
  7883  00EF3E  ECD5  F07D         	call	_sprintf	;wreg free
  7884                           
  7885                           ;main.c: 42: lcd_gotoxy(9,1);
  7886  00EF42  0E01               	movlw	1
  7887  00EF44  6E05               	movwf	lcd_gotoxy@y,c
  7888  00EF46  0E09               	movlw	9
  7889  00EF48  EC01  F070         	call	_lcd_gotoxy
  7890                           
  7891                           ;main.c: 43: lcd_putrs(buffer2);
  7892  00EF4C  0EA1               	movlw	low _buffer2
  7893  00EF4E  6E09               	movwf	lcd_putrs@ptr,c
  7894  00EF50  0E00               	movlw	high _buffer2
  7895  00EF52  6E0A               	movwf	lcd_putrs@ptr+1,c
  7896  00EF54  EC96  F071         	call	_lcd_putrs	;wreg free
  7897                           
  7898                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  7899  00EF58  0EA1               	movlw	low _buffer2
  7900  00EF5A  6E0D               	movwf	sprintf@sp,c
  7901  00EF5C  0E00               	movlw	high _buffer2
  7902  00EF5E  6E0E               	movwf	sprintf@sp+1,c
  7903  00EF60  0EC5               	movlw	low STR_2
  7904  00EF62  6E0F               	movwf	sprintf@f,c
  7905  00EF64  0EFF               	movlw	high STR_2
  7906  00EF66  6E10               	movwf	sprintf@f+1,c
  7907  00EF68  C0EF  F011         	movff	_hora,?_sprintf+4
  7908  00EF6C  C0F0  F012         	movff	_hora+1,?_sprintf+5
  7909  00EF70  C0F1  F013         	movff	_minuto,?_sprintf+6
  7910  00EF74  C0F2  F014         	movff	_minuto+1,?_sprintf+7
  7911  00EF78  C097  F015         	movff	_segundo,?_sprintf+8
  7912  00EF7C  C098  F016         	movff	_segundo+1,?_sprintf+9
  7913  00EF80  ECD5  F07D         	call	_sprintf	;wreg free
  7914                           
  7915                           ;main.c: 46: lcd_gotoxy(1,2);
  7916  00EF84  0E02               	movlw	2
  7917  00EF86  6E05               	movwf	lcd_gotoxy@y,c
  7918  00EF88  0E01               	movlw	1
  7919  00EF8A  EC01  F070         	call	_lcd_gotoxy
  7920                           
  7921                           ;main.c: 47: lcd_putrs(buffer2);
  7922  00EF8E  0EA1               	movlw	low _buffer2
  7923  00EF90  6E09               	movwf	lcd_putrs@ptr,c
  7924  00EF92  0E00               	movlw	high _buffer2
  7925  00EF94  6E0A               	movwf	lcd_putrs@ptr+1,c
  7926  00EF96  EC96  F071         	call	_lcd_putrs	;wreg free
  7927                           
  7928                           ;main.c: 49: lcd_gotoxy(13,2);
  7929  00EF9A  0E02               	movlw	2
  7930  00EF9C  6E05               	movwf	lcd_gotoxy@y,c
  7931  00EF9E  0E0D               	movlw	13
  7932  00EFA0  EC01  F070         	call	_lcd_gotoxy
  7933                           
  7934                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  7935  00EFA4  0100               	movlb	0	; () banked
  7936  00EFA6  51EB               	movf	_encendida& (0+255),w,b
  7937  00EFA8  0100               	movlb	0	; () banked
  7938  00EFAA  11EC               	iorwf	(_encendida+1)& (0+255),w,b
  7939  00EFAC  A4D8               	btfss	status,2,c
  7940  00EFAE  D004               	goto	l4028
  7941                           
  7942                           ; BSR set to: 0
  7943  00EFB0  0EED               	movlw	low STR_4
  7944  00EFB2  6E26               	movwf	_caratula$650,c
  7945  00EFB4  0EFF               	movlw	high STR_4
  7946  00EFB6  D003               	goto	L1
  7947  00EFB8                     l4028:
  7948                           
  7949                           ; BSR set to: 0
  7950  00EFB8  0EF1               	movlw	low STR_3
  7951  00EFBA  6E26               	movwf	_caratula$650,c
  7952  00EFBC  0EFF               	movlw	high STR_3
  7953  00EFBE                     L1:
  7954  00EFBE  6E27               	movwf	_caratula$650+1,c
  7955  00EFC0  D000               	goto	l4030
  7956  00EFC2                     l4030:
  7957                           
  7958                           ; BSR set to: 0
  7959  00EFC2  C026  F009         	movff	_caratula$650,lcd_putrs@ptr
  7960  00EFC6  C027  F00A         	movff	_caratula$650+1,lcd_putrs@ptr+1
  7961  00EFCA  EC96  F071         	call	_lcd_putrs	;wreg free
  7962  00EFCE  0012               	return		;funcret
  7963  00EFD0                     __end_of_caratula:
  7964                           	opt stack 0
  7965                           tosu	equ	0xFFF
  7966                           tosh	equ	0xFFE
  7967                           tosl	equ	0xFFD
  7968                           pclath	equ	0xFFA
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           postinc0	equ	0xFEE
  7974                           wreg	equ	0xFE8
  7975                           indf1	equ	0xFE7
  7976                           postinc1	equ	0xFE6
  7977                           postdec1	equ	0xFE5
  7978                           fsr1h	equ	0xFE2
  7979                           fsr1l	equ	0xFE1
  7980                           indf2	equ	0xFDF
  7981                           postinc2	equ	0xFDE
  7982                           postdec2	equ	0xFDD
  7983                           plusw2	equ	0xFDB
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function _sprintf *****************
  7989 ;; Defined at:
  7990 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  sp              2   12[COMRAM] PTR unsigned char 
  7993 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  7994 ;;  f               2   14[COMRAM] PTR const unsigned char 
  7995 ;;		 -> STR_29(18), STR_28(5), STR_24(5), STR_23(5), 
  7996 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  7997 ;;		 -> STR_2(15), STR_1(15), 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  tmpval          4    0        struct .
  8000 ;;  cp              3    0        PTR const unsigned char 
  8001 ;;  width           2   32[COMRAM] int 
  8002 ;;  val             2   29[COMRAM] unsigned int 
  8003 ;;  ap              2   27[COMRAM] PTR void [1]
  8004 ;;		 -> ?_sprintf(2), 
  8005 ;;  len             2    0        unsigned int 
  8006 ;;  c               1   34[COMRAM] char 
  8007 ;;  flag            1   31[COMRAM] unsigned char 
  8008 ;;  prec            1   26[COMRAM] char 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  2   12[COMRAM] int 
  8011 ;; Registers used:
  8012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8018 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8019 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8020 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8021 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8022 ;;Total ram usage:       23 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    1
  8025 ;; This function calls:
  8026 ;;		___lwdiv
  8027 ;;		___lwmod
  8028 ;;		___wmul
  8029 ;;		_isdigit
  8030 ;; This function is called by:
  8031 ;;		_caratula
  8032 ;;		_mostrar_guardar_password
  8033 ;;		_mostrar_guardar_temporal_password
  8034 ;;		_mostrar_guardar_nuevo_password
  8035 ;;		_confirmar_actualizar_password
  8036 ;;		_guardar_comando
  8037 ;;		_imprimir_tecla
  8038 ;;		_guardar_elemento
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text55
  8043  00FBAA                     __ptext55:
  8044                           	opt stack 0
  8045  00FBAA                     _sprintf:
  8046                           	opt stack 27
  8047                           
  8048                           ;doprnt.c: 494: va_list ap;
  8049                           ;doprnt.c: 499: signed char c;
  8050                           ;doprnt.c: 501: int width;
  8051                           ;doprnt.c: 506: signed char prec;
  8052                           ;doprnt.c: 508: unsigned char flag;
  8053                           ;doprnt.c: 523: union {
  8054                           ;doprnt.c: 524: unsigned long vd;
  8055                           ;doprnt.c: 525: double integ;
  8056                           ;doprnt.c: 526: } tmpval;
  8057                           ;doprnt.c: 528: unsigned int val;
  8058                           ;doprnt.c: 529: unsigned len;
  8059                           ;doprnt.c: 530: const char * cp;
  8060                           ;doprnt.c: 533: *ap = __va_start();
  8061                           
  8062                           ;incstack = 0
  8063  00FBAA  0E11               	movlw	low (?_sprintf+4)
  8064  00FBAC  6E1C               	movwf	sprintf@ap,c
  8065  00FBAE  0E00               	movlw	high (?_sprintf+4)
  8066  00FBB0  6E1D               	movwf	sprintf@ap+1,c
  8067                           
  8068                           ;doprnt.c: 536: while(c = *f++) {
  8069  00FBB2  D161               	goto	l3502
  8070  00FBB4                     l3390:
  8071                           
  8072                           ;doprnt.c: 538: if(c != '%')
  8073  00FBB4  0E25               	movlw	37
  8074  00FBB6  1823               	xorwf	sprintf@c,w,c
  8075  00FBB8  B4D8               	btfsc	status,2,c
  8076  00FBBA  D009               	goto	l3396
  8077                           
  8078                           ;doprnt.c: 540: {
  8079                           ;doprnt.c: 541: ((*sp++ = (c)));
  8080  00FBBC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8081  00FBC0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8082  00FBC4  C023  FFDF         	movff	sprintf@c,indf2
  8083  00FBC8  4A0D               	infsnz	sprintf@sp,f,c
  8084  00FBCA  2A0E               	incf	sprintf@sp+1,f,c
  8085                           
  8086                           ;doprnt.c: 542: continue;
  8087  00FBCC  D154               	goto	l3502
  8088  00FBCE                     l3396:
  8089                           
  8090                           ;doprnt.c: 543: }
  8091                           ;doprnt.c: 546: width = 0;
  8092  00FBCE  0E00               	movlw	0
  8093  00FBD0  6E22               	movwf	sprintf@width+1,c
  8094  00FBD2  0E00               	movlw	0
  8095  00FBD4  6E21               	movwf	sprintf@width,c
  8096                           
  8097                           ;doprnt.c: 548: flag = 0;
  8098  00FBD6  0E00               	movlw	0
  8099  00FBD8  6E20               	movwf	sprintf@flag,c
  8100                           
  8101                           ;doprnt.c: 551: switch(*f) {
  8102                           
  8103                           ;doprnt.c: 550: for(;;) {
  8104  00FBDA  D005               	goto	l3402
  8105  00FBDC                     l3398:
  8106                           
  8107                           ;doprnt.c: 580: flag |= 0x04;
  8108  00FBDC  8420               	bsf	sprintf@flag,2,c
  8109                           
  8110                           ;doprnt.c: 581: f++;
  8111  00FBDE  4A0F               	infsnz	sprintf@f,f,c
  8112  00FBE0  2A10               	incf	sprintf@f+1,f,c
  8113                           
  8114                           ;doprnt.c: 582: continue;
  8115  00FBE2  D001               	goto	l3402
  8116                           
  8117                           ;doprnt.c: 584: }
  8118  00FBE4  D00B               	goto	l3404
  8119  00FBE6                     l3402:
  8120  00FBE6  C00F  FFF6         	movff	sprintf@f,tblptrl
  8121  00FBEA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8122  00FBEE                     	if	0	;tblptru may be non-zero
  8123  00FBEE                     	endif
  8124  00FBEE                     	if	0	;tblptru may be non-zero
  8125  00FBEE                     	endif
  8126  00FBEE  0008               	tblrd		*
  8127  00FBF0  50F5               	movf	tablat,w,c
  8128                           
  8129                           ; Switch size 1, requested type "space"
  8130                           ; Number of cases is 1, Range of values is 48 to 48
  8131                           ; switch strategies available:
  8132                           ; Name         Instructions Cycles
  8133                           ; simple_byte            4     3 (average)
  8134                           ;	Chosen strategy is simple_byte
  8135  00FBF2  0A30               	xorlw	48	; case 48
  8136  00FBF4  B4D8               	btfsc	status,2,c
  8137  00FBF6  D7F2               	goto	l3398
  8138                           
  8139                           ;doprnt.c: 585: break;
  8140  00FBF8  D001               	goto	l3404
  8141                           
  8142                           ;doprnt.c: 586: }
  8143  00FBFA  D7F5               	goto	l3402
  8144  00FBFC                     l3404:
  8145                           
  8146                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8147  00FBFC  C00F  FFF6         	movff	sprintf@f,tblptrl
  8148  00FC00  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8149  00FC04                     	if	0	;tblptru may be non-zero
  8150  00FC04                     	endif
  8151  00FC04                     	if	0	;tblptru may be non-zero
  8152  00FC04                     	endif
  8153  00FC04  0008               	tblrd		*
  8154  00FC06  50F5               	movf	tablat,w,c
  8155  00FC08  ECCE  F06F         	call	_isdigit
  8156  00FC0C  A0D8               	btfss	status,0,c
  8157  00FC0E  D03A               	goto	l3420
  8158                           
  8159                           ;doprnt.c: 598: width = 0;
  8160  00FC10  0E00               	movlw	0
  8161  00FC12  6E22               	movwf	sprintf@width+1,c
  8162  00FC14  0E00               	movlw	0
  8163  00FC16  6E21               	movwf	sprintf@width,c
  8164  00FC18  D000               	goto	l3408
  8165  00FC1A                     l3408:
  8166                           
  8167                           ;doprnt.c: 600: width *= 10;
  8168  00FC1A  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8169  00FC1E  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8170  00FC22  0E00               	movlw	0
  8171  00FC24  6E04               	movwf	___wmul@multiplicand+1,c
  8172  00FC26  0E0A               	movlw	10
  8173  00FC28  6E03               	movwf	___wmul@multiplicand,c
  8174  00FC2A  EC25  F070         	call	___wmul	;wreg free
  8175  00FC2E  C001  F021         	movff	?___wmul,sprintf@width
  8176  00FC32  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8177                           
  8178                           ;doprnt.c: 601: width += *f++ - '0';
  8179  00FC36  0ED0               	movlw	208
  8180  00FC38  6E17               	movwf	??_sprintf& (0+255),c
  8181  00FC3A  0EFF               	movlw	255
  8182  00FC3C  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8183  00FC3E  C00F  FFF6         	movff	sprintf@f,tblptrl
  8184  00FC42  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8185  00FC46                     	if	0	;tblptru may be non-zero
  8186  00FC46                     	endif
  8187  00FC46                     	if	0	;tblptru may be non-zero
  8188  00FC46                     	endif
  8189  00FC46  0008               	tblrd		*
  8190  00FC48  50F5               	movf	tablat,w,c
  8191  00FC4A  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8192  00FC4C  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8193  00FC4E  5017               	movf	??_sprintf,w,c
  8194  00FC50  2619               	addwf	??_sprintf+2,f,c
  8195  00FC52  5018               	movf	??_sprintf+1,w,c
  8196  00FC54  221A               	addwfc	??_sprintf+3,f,c
  8197  00FC56  5019               	movf	??_sprintf+2,w,c
  8198  00FC58  2621               	addwf	sprintf@width,f,c
  8199  00FC5A  501A               	movf	??_sprintf+3,w,c
  8200  00FC5C  2222               	addwfc	sprintf@width+1,f,c
  8201  00FC5E  4A0F               	infsnz	sprintf@f,f,c
  8202  00FC60  2A10               	incf	sprintf@f+1,f,c
  8203                           
  8204                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8205  00FC62  C00F  FFF6         	movff	sprintf@f,tblptrl
  8206  00FC66  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8207  00FC6A                     	if	0	;tblptru may be non-zero
  8208  00FC6A                     	endif
  8209  00FC6A                     	if	0	;tblptru may be non-zero
  8210  00FC6A                     	endif
  8211  00FC6A  0008               	tblrd		*
  8212  00FC6C  50F5               	movf	tablat,w,c
  8213  00FC6E  ECCE  F06F         	call	_isdigit
  8214  00FC72  A0D8               	btfss	status,0,c
  8215  00FC74  D007               	goto	l3420
  8216  00FC76  D7D1               	goto	l3408
  8217                           
  8218                           ;doprnt.c: 608: }
  8219                           ;doprnt.c: 635: switch(c = *f++) {
  8220  00FC78  D005               	goto	l3420
  8221                           
  8222                           ;doprnt.c: 638: goto alldone;
  8223                           
  8224                           ;doprnt.c: 637: case 0:
  8225  00FC7A  D10B               	goto	l3504
  8226                           
  8227                           ;doprnt.c: 698: case 'i':
  8228                           ;doprnt.c: 699: break;
  8229                           
  8230                           ;doprnt.c: 697: case 'd':
  8231  00FC7C  D01A               	goto	l886
  8232                           
  8233                           ;doprnt.c: 813: continue;
  8234                           
  8235                           ;doprnt.c: 802: default:
  8236  00FC7E  D0FB               	goto	l3502
  8237  00FC80                     l3416:
  8238                           
  8239                           ;doprnt.c: 818: flag |= 0x40;
  8240  00FC80  8C20               	bsf	sprintf@flag,6,c
  8241                           
  8242                           ;doprnt.c: 822: }
  8243                           
  8244                           ;doprnt.c: 819: break;
  8245  00FC82  D017               	goto	l886
  8246  00FC84                     l3420:
  8247  00FC84  C00F  FFF6         	movff	sprintf@f,tblptrl
  8248  00FC88  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8249  00FC8C  4A0F               	infsnz	sprintf@f,f,c
  8250  00FC8E  2A10               	incf	sprintf@f+1,f,c
  8251  00FC90                     	if	0	;tblptru may be non-zero
  8252  00FC90                     	endif
  8253  00FC90                     	if	0	;tblptru may be non-zero
  8254  00FC90                     	endif
  8255  00FC90  0008               	tblrd		*
  8256  00FC92  CFF5 F023          	movff	tablat,sprintf@c
  8257  00FC96  5023               	movf	sprintf@c,w,c
  8258                           
  8259                           ; Switch size 1, requested type "space"
  8260                           ; Number of cases is 4, Range of values is 0 to 117
  8261                           ; switch strategies available:
  8262                           ; Name         Instructions Cycles
  8263                           ; simple_byte           13     7 (average)
  8264                           ;	Chosen strategy is simple_byte
  8265  00FC98  0A00               	xorlw	0	; case 0
  8266  00FC9A  B4D8               	btfsc	status,2,c
  8267  00FC9C  D0FA               	goto	l3504
  8268  00FC9E  0A64               	xorlw	100	; case 100
  8269  00FCA0  B4D8               	btfsc	status,2,c
  8270  00FCA2  D007               	goto	l886
  8271  00FCA4  0A0D               	xorlw	13	; case 105
  8272  00FCA6  B4D8               	btfsc	status,2,c
  8273  00FCA8  D004               	goto	l886
  8274  00FCAA  0A1C               	xorlw	28	; case 117
  8275  00FCAC  B4D8               	btfsc	status,2,c
  8276  00FCAE  D7E8               	goto	l3416
  8277  00FCB0  D0E2               	goto	l3502
  8278  00FCB2                     l886:
  8279                           
  8280                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8281  00FCB2  BC20               	btfsc	sprintf@flag,6,c
  8282  00FCB4  D015               	goto	l3432
  8283                           
  8284                           ;doprnt.c: 1253: {
  8285                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8286  00FCB6  C01C  FFD9         	movff	sprintf@ap,fsr2l
  8287  00FCBA  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  8288  00FCBE  CFDE F01E          	movff	postinc2,sprintf@val
  8289  00FCC2  CFDD F01F          	movff	postdec2,sprintf@val+1
  8290  00FCC6  0E02               	movlw	2
  8291  00FCC8  261C               	addwf	sprintf@ap,f,c
  8292  00FCCA  0E00               	movlw	0
  8293  00FCCC  221D               	addwfc	sprintf@ap+1,f,c
  8294                           
  8295                           ;doprnt.c: 1261: if((int)val < 0) {
  8296  00FCCE  AE1F               	btfss	sprintf@val+1,7,c
  8297  00FCD0  D014               	goto	l3436
  8298                           
  8299                           ;doprnt.c: 1262: flag |= 0x03;
  8300  00FCD2  0E03               	movlw	3
  8301  00FCD4  1220               	iorwf	sprintf@flag,f,c
  8302                           
  8303                           ;doprnt.c: 1263: val = -val;
  8304  00FCD6  6C1E               	negf	sprintf@val,c
  8305  00FCD8  1E1F               	comf	sprintf@val+1,f,c
  8306  00FCDA  B0D8               	btfsc	status,0,c
  8307  00FCDC  2A1F               	incf	sprintf@val+1,f,c
  8308                           
  8309                           ;doprnt.c: 1264: }
  8310                           ;doprnt.c: 1266: }
  8311  00FCDE  D00D               	goto	l3436
  8312  00FCE0                     l3432:
  8313                           
  8314                           ;doprnt.c: 1268: else
  8315                           ;doprnt.c: 1273: {
  8316                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8317  00FCE0  C01C  FFD9         	movff	sprintf@ap,fsr2l
  8318  00FCE4  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  8319  00FCE8  CFDE F01E          	movff	postinc2,sprintf@val
  8320  00FCEC  CFDD F01F          	movff	postdec2,sprintf@val+1
  8321  00FCF0  0E02               	movlw	2
  8322  00FCF2  261C               	addwf	sprintf@ap,f,c
  8323  00FCF4  0E00               	movlw	0
  8324  00FCF6  221D               	addwfc	sprintf@ap+1,f,c
  8325  00FCF8  D000               	goto	l3436
  8326  00FCFA                     l3436:
  8327                           
  8328                           ;doprnt.c: 1287: }
  8329                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8330  00FCFA  0E01               	movlw	1
  8331  00FCFC  6E23               	movwf	sprintf@c,c
  8332  00FCFE                     l3438:
  8333  00FCFE  0E05               	movlw	5
  8334  00FD00  1823               	xorwf	sprintf@c,w,c
  8335  00FD02  B4D8               	btfsc	status,2,c
  8336  00FD04  D016               	goto	l3450
  8337  00FD06  D001               	goto	l3442
  8338  00FD08  D014               	goto	l3450
  8339  00FD0A                     l3442:
  8340                           
  8341                           ;doprnt.c: 1306: if(val < dpowers[c])
  8342  00FD0A  5023               	movf	sprintf@c,w,c
  8343  00FD0C  0D02               	mullw	2
  8344  00FD0E  0EA3               	movlw	low _dpowers
  8345  00FD10  24F3               	addwf	prodl,w,c
  8346  00FD12  6EF6               	movwf	tblptrl,c
  8347  00FD14  0EFE               	movlw	high _dpowers
  8348  00FD16  20F4               	addwfc	prodh,w,c
  8349  00FD18  6EF7               	movwf	tblptrh,c
  8350  00FD1A                     	if	0	;There are less than 3 active tblptr bytes
  8351  00FD1A                     	endif
  8352  00FD1A  0009               	tblrd		*+
  8353  00FD1C  50F5               	movf	tablat,w,c
  8354  00FD1E  5C1E               	subwf	sprintf@val,w,c
  8355  00FD20  0009               	tblrd		*+
  8356  00FD22  50F5               	movf	tablat,w,c
  8357  00FD24  581F               	subwfb	sprintf@val+1,w,c
  8358  00FD26  A0D8               	btfss	status,0,c
  8359  00FD28  D004               	goto	l3450
  8360  00FD2A  D001               	goto	l3446
  8361                           
  8362                           ;doprnt.c: 1307: break;
  8363  00FD2C  D002               	goto	l3450
  8364  00FD2E                     l3446:
  8365  00FD2E  2A23               	incf	sprintf@c,f,c
  8366  00FD30  D7E6               	goto	l3438
  8367  00FD32                     l3450:
  8368                           
  8369                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8370  00FD32  5021               	movf	sprintf@width,w,c
  8371  00FD34  1022               	iorwf	sprintf@width+1,w,c
  8372  00FD36  B4D8               	btfsc	status,2,c
  8373  00FD38  D00A               	goto	l3456
  8374  00FD3A  C020  F017         	movff	sprintf@flag,??_sprintf
  8375  00FD3E  0E03               	movlw	3
  8376  00FD40  1617               	andwf	??_sprintf,f,c
  8377  00FD42  B4D8               	btfsc	status,2,c
  8378  00FD44  D004               	goto	l3456
  8379                           
  8380                           ;doprnt.c: 1346: width--;
  8381  00FD46  0621               	decf	sprintf@width,f,c
  8382  00FD48  A0D8               	btfss	status,0,c
  8383  00FD4A  0622               	decf	sprintf@width+1,f,c
  8384  00FD4C  D000               	goto	l3456
  8385  00FD4E                     l3456:
  8386                           
  8387                           ;doprnt.c: 1381: if(width > c)
  8388  00FD4E  0E80               	movlw	128
  8389  00FD50  BE23               	btfsc	sprintf@c,7,c
  8390  00FD52  0E7F               	movlw	127
  8391  00FD54  6E17               	movwf	??_sprintf& (0+255),c
  8392  00FD56  5021               	movf	sprintf@width,w,c
  8393  00FD58  5C23               	subwf	sprintf@c,w,c
  8394  00FD5A  5022               	movf	sprintf@width+1,w,c
  8395  00FD5C  0A80               	xorlw	128
  8396  00FD5E  5817               	subwfb	??_sprintf& (0+255),w,c
  8397  00FD60  B0D8               	btfsc	status,0,c
  8398  00FD62  D007               	goto	l3460
  8399                           
  8400                           ;doprnt.c: 1382: width -= c;
  8401  00FD64  5023               	movf	sprintf@c,w,c
  8402  00FD66  5E21               	subwf	sprintf@width,f,c
  8403  00FD68  0E00               	movlw	0
  8404  00FD6A  BE23               	btfsc	sprintf@c,7,c
  8405  00FD6C  0EFF               	movlw	255
  8406  00FD6E  5A22               	subwfb	sprintf@width+1,f,c
  8407  00FD70  D005               	goto	l3462
  8408  00FD72                     l3460:
  8409                           
  8410                           ;doprnt.c: 1383: else
  8411                           ;doprnt.c: 1384: width = 0;
  8412  00FD72  0E00               	movlw	0
  8413  00FD74  6E22               	movwf	sprintf@width+1,c
  8414  00FD76  0E00               	movlw	0
  8415  00FD78  6E21               	movwf	sprintf@width,c
  8416  00FD7A  D000               	goto	l3462
  8417  00FD7C                     l3462:
  8418                           
  8419                           ;doprnt.c: 1387: if(flag & 0x04) {
  8420  00FD7C  A420               	btfss	sprintf@flag,2,c
  8421  00FD7E  D024               	goto	l3478
  8422                           
  8423                           ;doprnt.c: 1392: if(flag & 0x03)
  8424  00FD80  C020  F017         	movff	sprintf@flag,??_sprintf
  8425  00FD84  0E03               	movlw	3
  8426  00FD86  1617               	andwf	??_sprintf,f,c
  8427  00FD88  B4D8               	btfsc	status,2,c
  8428  00FD8A  D009               	goto	l3470
  8429                           
  8430                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  8431  00FD8C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8432  00FD90  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8433  00FD94  0E2D               	movlw	45
  8434  00FD96  6EDF               	movwf	indf2,c
  8435  00FD98  4A0D               	infsnz	sprintf@sp,f,c
  8436  00FD9A  2A0E               	incf	sprintf@sp+1,f,c
  8437  00FD9C  D000               	goto	l3470
  8438  00FD9E                     l3470:
  8439                           
  8440                           ;doprnt.c: 1415: if(width)
  8441  00FD9E  5021               	movf	sprintf@width,w,c
  8442  00FDA0  1022               	iorwf	sprintf@width+1,w,c
  8443  00FDA2  B4D8               	btfsc	status,2,c
  8444  00FDA4  D035               	goto	l3492
  8445  00FDA6                     l3472:
  8446                           
  8447                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8448  00FDA6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8449  00FDAA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8450  00FDAE  0E30               	movlw	48
  8451  00FDB0  6EDF               	movwf	indf2,c
  8452  00FDB2  4A0D               	infsnz	sprintf@sp,f,c
  8453  00FDB4  2A0E               	incf	sprintf@sp+1,f,c
  8454                           
  8455                           ;doprnt.c: 1418: while(--width);
  8456  00FDB6  0621               	decf	sprintf@width,f,c
  8457  00FDB8  A0D8               	btfss	status,0,c
  8458  00FDBA  0622               	decf	sprintf@width+1,f,c
  8459  00FDBC  5021               	movf	sprintf@width,w,c
  8460  00FDBE  1022               	iorwf	sprintf@width+1,w,c
  8461  00FDC0  B4D8               	btfsc	status,2,c
  8462  00FDC2  D026               	goto	l3492
  8463  00FDC4  D7F0               	goto	l3472
  8464                           
  8465                           ;doprnt.c: 1420: } else
  8466  00FDC6  D024               	goto	l3492
  8467  00FDC8                     l3478:
  8468                           
  8469                           ;doprnt.c: 1422: {
  8470                           ;doprnt.c: 1424: if(width
  8471                           ;doprnt.c: 1428: )
  8472  00FDC8  5021               	movf	sprintf@width,w,c
  8473  00FDCA  1022               	iorwf	sprintf@width+1,w,c
  8474  00FDCC  B4D8               	btfsc	status,2,c
  8475  00FDCE  D011               	goto	l3486
  8476  00FDD0                     l3480:
  8477                           
  8478                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8479  00FDD0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8480  00FDD4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8481  00FDD8  0E20               	movlw	32
  8482  00FDDA  6EDF               	movwf	indf2,c
  8483  00FDDC  4A0D               	infsnz	sprintf@sp,f,c
  8484  00FDDE  2A0E               	incf	sprintf@sp+1,f,c
  8485                           
  8486                           ;doprnt.c: 1431: while(--width);
  8487  00FDE0  0621               	decf	sprintf@width,f,c
  8488  00FDE2  A0D8               	btfss	status,0,c
  8489  00FDE4  0622               	decf	sprintf@width+1,f,c
  8490  00FDE6  5021               	movf	sprintf@width,w,c
  8491  00FDE8  1022               	iorwf	sprintf@width+1,w,c
  8492  00FDEA  B4D8               	btfsc	status,2,c
  8493  00FDEC  D002               	goto	l3486
  8494  00FDEE  D7F0               	goto	l3480
  8495  00FDF0  D000               	goto	l3486
  8496  00FDF2                     l3486:
  8497                           
  8498                           ;doprnt.c: 1438: if(flag & 0x03)
  8499  00FDF2  C020  F017         	movff	sprintf@flag,??_sprintf
  8500  00FDF6  0E03               	movlw	3
  8501  00FDF8  1617               	andwf	??_sprintf,f,c
  8502  00FDFA  B4D8               	btfsc	status,2,c
  8503  00FDFC  D009               	goto	l3492
  8504                           
  8505                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8506  00FDFE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8507  00FE02  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8508  00FE06  0E2D               	movlw	45
  8509  00FE08  6EDF               	movwf	indf2,c
  8510  00FE0A  4A0D               	infsnz	sprintf@sp,f,c
  8511  00FE0C  2A0E               	incf	sprintf@sp+1,f,c
  8512  00FE0E  D000               	goto	l3492
  8513  00FE10                     l3492:
  8514                           
  8515                           ;doprnt.c: 1469: }
  8516                           ;doprnt.c: 1472: prec = c;
  8517  00FE10  C023  F01B         	movff	sprintf@c,sprintf@prec
  8518                           
  8519                           ;doprnt.c: 1474: while(prec--) {
  8520  00FE14  D02A               	goto	l3500
  8521  00FE16                     l3494:
  8522                           
  8523                           ;doprnt.c: 1478: {
  8524                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8525  00FE16  501B               	movf	sprintf@prec,w,c
  8526  00FE18  0D02               	mullw	2
  8527  00FE1A  0EA3               	movlw	low _dpowers
  8528  00FE1C  24F3               	addwf	prodl,w,c
  8529  00FE1E  6EF6               	movwf	tblptrl,c
  8530  00FE20  0EFE               	movlw	high _dpowers
  8531  00FE22  20F4               	addwfc	prodh,w,c
  8532  00FE24  6EF7               	movwf	tblptrh,c
  8533  00FE26                     	if	0	;There are less than 3 active tblptr bytes
  8534  00FE26                     	endif
  8535  00FE26  0009               	tblrd		*+
  8536  00FE28  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8537  00FE2C  000A               	tblrd		*-
  8538  00FE2E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8539  00FE32  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  8540  00FE36  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  8541  00FE3A  ECED  F071         	call	___lwdiv	;wreg free
  8542  00FE3E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8543  00FE42  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8544  00FE46  0E00               	movlw	0
  8545  00FE48  6E0B               	movwf	___lwmod@divisor+1,c
  8546  00FE4A  0E0A               	movlw	10
  8547  00FE4C  6E0A               	movwf	___lwmod@divisor,c
  8548  00FE4E  EC70  F071         	call	___lwmod	;wreg free
  8549  00FE52  5008               	movf	?___lwmod,w,c
  8550  00FE54  0F30               	addlw	48
  8551  00FE56  6E23               	movwf	sprintf@c,c
  8552                           
  8553                           ;doprnt.c: 1523: }
  8554                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8555  00FE58  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8556  00FE5C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8557  00FE60  C023  FFDF         	movff	sprintf@c,indf2
  8558  00FE64  4A0D               	infsnz	sprintf@sp,f,c
  8559  00FE66  2A0E               	incf	sprintf@sp+1,f,c
  8560  00FE68  D000               	goto	l3500
  8561  00FE6A                     l3500:
  8562  00FE6A  061B               	decf	sprintf@prec,f,c
  8563  00FE6C  281B               	incf	sprintf@prec,w,c
  8564  00FE6E  B4D8               	btfsc	status,2,c
  8565  00FE70  D002               	goto	l3502
  8566  00FE72  D7D1               	goto	l3494
  8567  00FE74  D000               	goto	l3502
  8568  00FE76                     l3502:
  8569  00FE76  C00F  FFF6         	movff	sprintf@f,tblptrl
  8570  00FE7A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8571  00FE7E  4A0F               	infsnz	sprintf@f,f,c
  8572  00FE80  2A10               	incf	sprintf@f+1,f,c
  8573  00FE82                     	if	0	;tblptru may be non-zero
  8574  00FE82                     	endif
  8575  00FE82                     	if	0	;tblptru may be non-zero
  8576  00FE82                     	endif
  8577  00FE82  0008               	tblrd		*
  8578  00FE84  CFF5 F023          	movff	tablat,sprintf@c
  8579  00FE88  5023               	movf	sprintf@c,w,c
  8580  00FE8A  B4D8               	btfsc	status,2,c
  8581  00FE8C  D002               	goto	l3504
  8582  00FE8E  D692               	goto	l3390
  8583  00FE90  D000               	goto	l3504
  8584  00FE92                     l3504:
  8585                           
  8586                           ;doprnt.c: 1538: *sp = 0;
  8587  00FE92  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8588  00FE96  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8589  00FE9A  0E00               	movlw	0
  8590  00FE9C  6EDF               	movwf	indf2,c
  8591  00FE9E  0012               	return	
  8592                           
  8593                           ;doprnt.c: 1540: return 0;
  8594                           ;	Return value of _sprintf is never used
  8595  00FEA0  0012               	return		;funcret
  8596  00FEA2                     __end_of_sprintf:
  8597                           	opt stack 0
  8598                           tosu	equ	0xFFF
  8599                           tosh	equ	0xFFE
  8600                           tosl	equ	0xFFD
  8601                           pclath	equ	0xFFA
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           indf1	equ	0xFE7
  8611                           postinc1	equ	0xFE6
  8612                           postdec1	equ	0xFE5
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           plusw2	equ	0xFDB
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _isdigit *****************
  8624 ;; Defined at:
  8625 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  c               1    wreg     unsigned char 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  c               1    2[COMRAM] unsigned char 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;		None               void
  8632 ;; Registers used:
  8633 ;;		wreg, status,2, status,0
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8642 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8643 ;;Total ram usage:        3 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; This function calls:
  8646 ;;		Nothing
  8647 ;; This function is called by:
  8648 ;;		_sprintf
  8649 ;;		_atoi
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text56
  8654  00DF9C                     __ptext56:
  8655                           	opt stack 0
  8656  00DF9C                     _isdigit:
  8657                           	opt stack 27
  8658                           
  8659                           ;incstack = 0
  8660                           ;isdigit@c stored from wreg
  8661  00DF9C  6E03               	movwf	isdigit@c,c
  8662  00DF9E  0E00               	movlw	0
  8663  00DFA0  6E02               	movwf	_isdigit$2710,c
  8664  00DFA2  0E3A               	movlw	58
  8665  00DFA4  6003               	cpfslt	isdigit@c,c
  8666  00DFA6  D006               	goto	l3278
  8667  00DFA8  0E2F               	movlw	47
  8668  00DFAA  6403               	cpfsgt	isdigit@c,c
  8669  00DFAC  D003               	goto	l3278
  8670  00DFAE  0E01               	movlw	1
  8671  00DFB0  6E02               	movwf	_isdigit$2710,c
  8672  00DFB2  D000               	goto	l3278
  8673  00DFB4                     l3278:
  8674  00DFB4  C002  F001         	movff	_isdigit$2710,??_isdigit
  8675  00DFB8  3001               	rrcf	??_isdigit,w,c
  8676  00DFBA  0012               	return	
  8677  00DFBC  0012               	return		;funcret
  8678  00DFBE                     __end_of_isdigit:
  8679                           	opt stack 0
  8680                           tosu	equ	0xFFF
  8681                           tosh	equ	0xFFE
  8682                           tosl	equ	0xFFD
  8683                           pclath	equ	0xFFA
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodh	equ	0xFF4
  8689                           prodl	equ	0xFF3
  8690                           postinc0	equ	0xFEE
  8691                           wreg	equ	0xFE8
  8692                           indf1	equ	0xFE7
  8693                           postinc1	equ	0xFE6
  8694                           postdec1	equ	0xFE5
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           plusw2	equ	0xFDB
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function ___wmul *****************
  8706 ;; Defined at:
  8707 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  multiplier      2    0[COMRAM] unsigned int 
  8710 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  product         2    4[COMRAM] unsigned int 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  2    0[COMRAM] unsigned int 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0, prodl, prodh
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8726 ;;Total ram usage:        6 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_sprintf
  8732 ;;		_atoi
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           	psect	text57
  8737  00E04A                     __ptext57:
  8738                           	opt stack 0
  8739  00E04A                     ___wmul:
  8740                           	opt stack 27
  8741                           
  8742                           ;incstack = 0
  8743  00E04A  5001               	movf	___wmul@multiplier,w,c
  8744  00E04C  0203               	mulwf	___wmul@multiplicand,c
  8745  00E04E  CFF3 F005          	movff	prodl,___wmul@product
  8746  00E052  CFF4 F006          	movff	prodh,___wmul@product+1
  8747  00E056  5001               	movf	___wmul@multiplier,w,c
  8748  00E058  0204               	mulwf	___wmul@multiplicand+1,c
  8749  00E05A  50F3               	movf	prodl,w,c
  8750  00E05C  2606               	addwf	___wmul@product+1,f,c
  8751  00E05E  5002               	movf	___wmul@multiplier+1,w,c
  8752  00E060  0203               	mulwf	___wmul@multiplicand,c
  8753  00E062  50F3               	movf	prodl,w,c
  8754  00E064  2606               	addwf	___wmul@product+1,f,c
  8755  00E066  C005  F001         	movff	___wmul@product,?___wmul
  8756  00E06A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8757  00E06E  0012               	return	
  8758  00E070  0012               	return		;funcret
  8759  00E072                     __end_of___wmul:
  8760                           	opt stack 0
  8761                           tosu	equ	0xFFF
  8762                           tosh	equ	0xFFE
  8763                           tosl	equ	0xFFD
  8764                           pclath	equ	0xFFA
  8765                           tblptru	equ	0xFF8
  8766                           tblptrh	equ	0xFF7
  8767                           tblptrl	equ	0xFF6
  8768                           tablat	equ	0xFF5
  8769                           prodh	equ	0xFF4
  8770                           prodl	equ	0xFF3
  8771                           postinc0	equ	0xFEE
  8772                           wreg	equ	0xFE8
  8773                           indf1	equ	0xFE7
  8774                           postinc1	equ	0xFE6
  8775                           postdec1	equ	0xFE5
  8776                           fsr1h	equ	0xFE2
  8777                           fsr1l	equ	0xFE1
  8778                           indf2	equ	0xFDF
  8779                           postinc2	equ	0xFDE
  8780                           postdec2	equ	0xFDD
  8781                           plusw2	equ	0xFDB
  8782                           fsr2h	equ	0xFDA
  8783                           fsr2l	equ	0xFD9
  8784                           status	equ	0xFD8
  8785                           
  8786 ;; *************** function ___lwmod *****************
  8787 ;; Defined at:
  8788 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  dividend        2    7[COMRAM] unsigned int 
  8791 ;;  divisor         2    9[COMRAM] unsigned int 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  counter         1   11[COMRAM] unsigned char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  2    7[COMRAM] unsigned int 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8806 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8807 ;;Total ram usage:        5 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; This function calls:
  8810 ;;		Nothing
  8811 ;; This function is called by:
  8812 ;;		_sprintf
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           	psect	text58
  8817  00E2E0                     __ptext58:
  8818                           	opt stack 0
  8819  00E2E0                     ___lwmod:
  8820                           	opt stack 27
  8821                           
  8822                           ;incstack = 0
  8823  00E2E0  500A               	movf	___lwmod@divisor,w,c
  8824  00E2E2  100B               	iorwf	___lwmod@divisor+1,w,c
  8825  00E2E4  B4D8               	btfsc	status,2,c
  8826  00E2E6  D01D               	goto	l1573
  8827  00E2E8  0E01               	movlw	1
  8828  00E2EA  6E0C               	movwf	___lwmod@counter,c
  8829  00E2EC  D005               	goto	l3370
  8830  00E2EE                     l3368:
  8831  00E2EE  90D8               	bcf	status,0,c
  8832  00E2F0  360A               	rlcf	___lwmod@divisor,f,c
  8833  00E2F2  360B               	rlcf	___lwmod@divisor+1,f,c
  8834  00E2F4  2A0C               	incf	___lwmod@counter,f,c
  8835  00E2F6  D000               	goto	l3370
  8836  00E2F8                     l3370:
  8837  00E2F8  BE0B               	btfsc	___lwmod@divisor+1,7,c
  8838  00E2FA  D002               	goto	l3372
  8839  00E2FC  D7F8               	goto	l3368
  8840  00E2FE  D000               	goto	l3372
  8841  00E300                     l3372:
  8842  00E300  500A               	movf	___lwmod@divisor,w,c
  8843  00E302  5C08               	subwf	___lwmod@dividend,w,c
  8844  00E304  500B               	movf	___lwmod@divisor+1,w,c
  8845  00E306  5809               	subwfb	___lwmod@dividend+1,w,c
  8846  00E308  A0D8               	btfss	status,0,c
  8847  00E30A  D005               	goto	l3376
  8848  00E30C  500A               	movf	___lwmod@divisor,w,c
  8849  00E30E  5E08               	subwf	___lwmod@dividend,f,c
  8850  00E310  500B               	movf	___lwmod@divisor+1,w,c
  8851  00E312  5A09               	subwfb	___lwmod@dividend+1,f,c
  8852  00E314  D000               	goto	l3376
  8853  00E316                     l3376:
  8854  00E316  90D8               	bcf	status,0,c
  8855  00E318  320B               	rrcf	___lwmod@divisor+1,f,c
  8856  00E31A  320A               	rrcf	___lwmod@divisor,f,c
  8857  00E31C  2E0C               	decfsz	___lwmod@counter,f,c
  8858  00E31E  D7F0               	goto	l3372
  8859  00E320  D000               	goto	l1573
  8860  00E322                     l1573:
  8861  00E322  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8862  00E326  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8863  00E32A  0012               	return		;funcret
  8864  00E32C                     __end_of___lwmod:
  8865                           	opt stack 0
  8866                           tosu	equ	0xFFF
  8867                           tosh	equ	0xFFE
  8868                           tosl	equ	0xFFD
  8869                           pclath	equ	0xFFA
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           postinc0	equ	0xFEE
  8877                           wreg	equ	0xFE8
  8878                           indf1	equ	0xFE7
  8879                           postinc1	equ	0xFE6
  8880                           postdec1	equ	0xFE5
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           plusw2	equ	0xFDB
  8887                           fsr2h	equ	0xFDA
  8888                           fsr2l	equ	0xFD9
  8889                           status	equ	0xFD8
  8890                           
  8891 ;; *************** function ___lwdiv *****************
  8892 ;; Defined at:
  8893 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  dividend        2    0[COMRAM] unsigned int 
  8896 ;;  divisor         2    2[COMRAM] unsigned int 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  quotient        2    4[COMRAM] unsigned int 
  8899 ;;  counter         1    6[COMRAM] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  2    0[COMRAM] unsigned int 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2, status,0
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8910 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8912 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8913 ;;Total ram usage:        7 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_sprintf
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text59
  8923  00E3DA                     __ptext59:
  8924                           	opt stack 0
  8925  00E3DA                     ___lwdiv:
  8926                           	opt stack 27
  8927                           
  8928                           ;incstack = 0
  8929  00E3DA  0E00               	movlw	0
  8930  00E3DC  6E06               	movwf	___lwdiv@quotient+1,c
  8931  00E3DE  0E00               	movlw	0
  8932  00E3E0  6E05               	movwf	___lwdiv@quotient,c
  8933  00E3E2  5003               	movf	___lwdiv@divisor,w,c
  8934  00E3E4  1004               	iorwf	___lwdiv@divisor+1,w,c
  8935  00E3E6  B4D8               	btfsc	status,2,c
  8936  00E3E8  D021               	goto	l1563
  8937  00E3EA  0E01               	movlw	1
  8938  00E3EC  6E07               	movwf	___lwdiv@counter,c
  8939  00E3EE  D005               	goto	l3350
  8940  00E3F0                     l3348:
  8941  00E3F0  90D8               	bcf	status,0,c
  8942  00E3F2  3603               	rlcf	___lwdiv@divisor,f,c
  8943  00E3F4  3604               	rlcf	___lwdiv@divisor+1,f,c
  8944  00E3F6  2A07               	incf	___lwdiv@counter,f,c
  8945  00E3F8  D000               	goto	l3350
  8946  00E3FA                     l3350:
  8947  00E3FA  BE04               	btfsc	___lwdiv@divisor+1,7,c
  8948  00E3FC  D002               	goto	l3352
  8949  00E3FE  D7F8               	goto	l3348
  8950  00E400  D000               	goto	l3352
  8951  00E402                     l3352:
  8952  00E402  90D8               	bcf	status,0,c
  8953  00E404  3605               	rlcf	___lwdiv@quotient,f,c
  8954  00E406  3606               	rlcf	___lwdiv@quotient+1,f,c
  8955  00E408  5003               	movf	___lwdiv@divisor,w,c
  8956  00E40A  5C01               	subwf	___lwdiv@dividend,w,c
  8957  00E40C  5004               	movf	___lwdiv@divisor+1,w,c
  8958  00E40E  5802               	subwfb	___lwdiv@dividend+1,w,c
  8959  00E410  A0D8               	btfss	status,0,c
  8960  00E412  D006               	goto	l3360
  8961  00E414  5003               	movf	___lwdiv@divisor,w,c
  8962  00E416  5E01               	subwf	___lwdiv@dividend,f,c
  8963  00E418  5004               	movf	___lwdiv@divisor+1,w,c
  8964  00E41A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  8965  00E41C  8005               	bsf	___lwdiv@quotient,0,c
  8966  00E41E  D000               	goto	l3360
  8967  00E420                     l3360:
  8968  00E420  90D8               	bcf	status,0,c
  8969  00E422  3204               	rrcf	___lwdiv@divisor+1,f,c
  8970  00E424  3203               	rrcf	___lwdiv@divisor,f,c
  8971  00E426  2E07               	decfsz	___lwdiv@counter,f,c
  8972  00E428  D7EC               	goto	l3352
  8973  00E42A  D000               	goto	l1563
  8974  00E42C                     l1563:
  8975  00E42C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8976  00E430  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8977  00E434  0012               	return		;funcret
  8978  00E436                     __end_of___lwdiv:
  8979                           	opt stack 0
  8980                           tosu	equ	0xFFF
  8981                           tosh	equ	0xFFE
  8982                           tosl	equ	0xFFD
  8983                           pclath	equ	0xFFA
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           postinc0	equ	0xFEE
  8991                           wreg	equ	0xFE8
  8992                           indf1	equ	0xFE7
  8993                           postinc1	equ	0xFE6
  8994                           postdec1	equ	0xFE5
  8995                           fsr1h	equ	0xFE2
  8996                           fsr1l	equ	0xFE1
  8997                           indf2	equ	0xFDF
  8998                           postinc2	equ	0xFDE
  8999                           postdec2	equ	0xFDD
  9000                           plusw2	equ	0xFDB
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function _lcd_putrs *****************
  9006 ;; Defined at:
  9007 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  9010 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  9011 ;;		 -> fecha@day(3), STR_27(2), STR_26(2), STR_25(2), 
  9012 ;;		 -> imprimir_tecla@aux(20), STR_22(9), STR_21(17), STR_20(17), 
  9013 ;;		 -> STR_19(23), STR_18(20), STR_17(27), STR_16(19), 
  9014 ;;		 -> STR_15(22), STR_14(18), STR_13(18), STR_12(19), 
  9015 ;;		 -> STR_7(11), STR_6(17), STR_5(26), STR_4(4), 
  9016 ;;		 -> STR_3(3), buffer2(20), 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;		None
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9032 ;;Total ram usage:        2 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    4
  9035 ;; This function calls:
  9036 ;;		_lcd_putc
  9037 ;; This function is called by:
  9038 ;;		_caratula
  9039 ;;		_clear_display
  9040 ;;		_menu_ingresar_password
  9041 ;;		_mostrar_titulo_menu
  9042 ;;		_mensaje_alarma_activada
  9043 ;;		_imprimir_tecla
  9044 ;;		_leer_teclado
  9045 ;;		_guardar_elemento
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           	psect	text60
  9050  00E32C                     __ptext60:
  9051                           	opt stack 0
  9052  00E32C                     _lcd_putrs:
  9053                           	opt stack 25
  9054                           
  9055                           ;unmc_lcd_216.c: 223: while(*ptr){
  9056                           
  9057                           ;incstack = 0
  9058  00E32C  D015               	goto	l3386
  9059  00E32E                     l3382:
  9060                           
  9061                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  9062  00E32E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9063  00E332  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9064  00E336  6AF8               	clrf	tblptru,c
  9065  00E338  0E0E               	movlw	(high __ramtop+-1)
  9066  00E33A  64F7               	cpfsgt	tblptrh,c
  9067  00E33C  D003               	bra	u2447
  9068  00E33E  0008               	tblrd		*
  9069  00E340  50F5               	movf	tablat,w,c
  9070  00E342  D005               	bra	u2440
  9071  00E344                     u2447:
  9072  00E344  CFF6 FFE9          	movff	tblptrl,fsr0l
  9073  00E348  CFF7 FFEA          	movff	tblptrh,fsr0h
  9074  00E34C  50EF               	movf	indf0,w,c
  9075  00E34E                     u2440:
  9076  00E34E  EC4A  F071         	call	_lcd_putc
  9077  00E352  4A09               	infsnz	lcd_putrs@ptr,f,c
  9078  00E354  2A0A               	incf	lcd_putrs@ptr+1,f,c
  9079  00E356  D000               	goto	l3386
  9080  00E358                     l3386:
  9081  00E358  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9082  00E35C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9083  00E360  6AF8               	clrf	tblptru,c
  9084  00E362  0E0E               	movlw	(high __ramtop+-1)
  9085  00E364  64F7               	cpfsgt	tblptrh,c
  9086  00E366  D003               	bra	u2457
  9087  00E368  0008               	tblrd		*
  9088  00E36A  50F5               	movf	tablat,w,c
  9089  00E36C  D005               	bra	u2450
  9090  00E36E                     u2457:
  9091  00E36E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9092  00E372  CFF7 FFEA          	movff	tblptrh,fsr0h
  9093  00E376  50EF               	movf	indf0,w,c
  9094  00E378                     u2450:
  9095  00E378  0900               	iorlw	0
  9096  00E37A  A4D8               	btfss	status,2,c
  9097  00E37C  D7D8               	goto	l3382
  9098  00E37E  0012               	return		;funcret
  9099  00E380                     __end_of_lcd_putrs:
  9100                           	opt stack 0
  9101                           tosu	equ	0xFFF
  9102                           tosh	equ	0xFFE
  9103                           tosl	equ	0xFFD
  9104                           pclath	equ	0xFFA
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           indf0	equ	0xFEF
  9112                           postinc0	equ	0xFEE
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           indf1	equ	0xFE7
  9117                           postinc1	equ	0xFE6
  9118                           postdec1	equ	0xFE5
  9119                           fsr1h	equ	0xFE2
  9120                           fsr1l	equ	0xFE1
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           plusw2	equ	0xFDB
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function _lcd_putc *****************
  9130 ;; Defined at:
  9131 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  c               1    wreg     unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  c               1    7[COMRAM] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;		None               void
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9148 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9149 ;;Total ram usage:        1 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    3
  9152 ;; This function calls:
  9153 ;;		_lcd_gotoxy
  9154 ;;		_lcd_send_byte
  9155 ;; This function is called by:
  9156 ;;		_lcd_putrs
  9157 ;;		_lcd_puts
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text61
  9162  00E294                     __ptext61:
  9163                           	opt stack 0
  9164  00E294                     _lcd_putc:
  9165                           	opt stack 25
  9166                           
  9167                           ;incstack = 0
  9168                           ;lcd_putc@c stored from wreg
  9169  00E294  6E08               	movwf	lcd_putc@c,c
  9170                           
  9171                           ;unmc_lcd_216.c: 173: switch(c){
  9172  00E296  D018               	goto	l3330
  9173  00E298                     l3320:
  9174                           
  9175                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9176  00E298  0E01               	movlw	1
  9177  00E29A  6E03               	movwf	lcd_send_byte@n,c
  9178  00E29C  0E00               	movlw	0
  9179  00E29E  ECEA  F070         	call	_lcd_send_byte
  9180                           
  9181                           ;unmc_lcd_216.c: 176: break;
  9182  00E2A2  0012               	return	
  9183  00E2A4                     l3322:
  9184                           
  9185                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9186  00E2A4  0E02               	movlw	2
  9187  00E2A6  6E05               	movwf	lcd_gotoxy@y,c
  9188  00E2A8  0E01               	movlw	1
  9189  00E2AA  EC01  F070         	call	_lcd_gotoxy
  9190                           
  9191                           ;unmc_lcd_216.c: 179: break;
  9192  00E2AE  0012               	return	
  9193  00E2B0                     l3324:
  9194                           
  9195                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9196  00E2B0  0E10               	movlw	16
  9197  00E2B2  6E03               	movwf	lcd_send_byte@n,c
  9198  00E2B4  0E00               	movlw	0
  9199  00E2B6  ECEA  F070         	call	_lcd_send_byte
  9200                           
  9201                           ;unmc_lcd_216.c: 182: break;
  9202  00E2BA  0012               	return	
  9203  00E2BC                     l3326:
  9204                           
  9205                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  9206  00E2BC  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  9207  00E2C0  0E01               	movlw	1
  9208  00E2C2  ECEA  F070         	call	_lcd_send_byte
  9209                           
  9210                           ;unmc_lcd_216.c: 186: }
  9211                           
  9212                           ;unmc_lcd_216.c: 185: break;
  9213  00E2C6  0012               	return	
  9214  00E2C8                     l3330:
  9215  00E2C8  5008               	movf	lcd_putc@c,w,c
  9216                           
  9217                           ; Switch size 1, requested type "space"
  9218                           ; Number of cases is 3, Range of values is 8 to 12
  9219                           ; switch strategies available:
  9220                           ; Name         Instructions Cycles
  9221                           ; simple_byte           10     6 (average)
  9222                           ;	Chosen strategy is simple_byte
  9223  00E2CA  0A08               	xorlw	8	; case 8
  9224  00E2CC  B4D8               	btfsc	status,2,c
  9225  00E2CE  D7F0               	goto	l3324
  9226  00E2D0  0A02               	xorlw	2	; case 10
  9227  00E2D2  B4D8               	btfsc	status,2,c
  9228  00E2D4  D7E7               	goto	l3322
  9229  00E2D6  0A06               	xorlw	6	; case 12
  9230  00E2D8  B4D8               	btfsc	status,2,c
  9231  00E2DA  D7DE               	goto	l3320
  9232  00E2DC  D7EF               	goto	l3326
  9233  00E2DE  0012               	return		;funcret
  9234  00E2E0                     __end_of_lcd_putc:
  9235                           	opt stack 0
  9236                           tosu	equ	0xFFF
  9237                           tosh	equ	0xFFE
  9238                           tosl	equ	0xFFD
  9239                           pclath	equ	0xFFA
  9240                           tblptru	equ	0xFF8
  9241                           tblptrh	equ	0xFF7
  9242                           tblptrl	equ	0xFF6
  9243                           tablat	equ	0xFF5
  9244                           prodh	equ	0xFF4
  9245                           prodl	equ	0xFF3
  9246                           indf0	equ	0xFEF
  9247                           postinc0	equ	0xFEE
  9248                           fsr0h	equ	0xFEA
  9249                           fsr0l	equ	0xFE9
  9250                           wreg	equ	0xFE8
  9251                           indf1	equ	0xFE7
  9252                           postinc1	equ	0xFE6
  9253                           postdec1	equ	0xFE5
  9254                           fsr1h	equ	0xFE2
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           plusw2	equ	0xFDB
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _lcd_gotoxy *****************
  9265 ;; Defined at:
  9266 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  x               1    wreg     unsigned char 
  9269 ;;  y               1    4[COMRAM] unsigned char 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;  x               1    5[COMRAM] unsigned char 
  9272 ;;  address         1    6[COMRAM] unsigned char 
  9273 ;; Return value:  Size  Location     Type
  9274 ;;		None               void
  9275 ;; Registers used:
  9276 ;;		wreg, status,2, status,0, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9282 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9285 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9286 ;;Total ram usage:        3 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    2
  9289 ;; This function calls:
  9290 ;;		_lcd_send_byte
  9291 ;; This function is called by:
  9292 ;;		_caratula
  9293 ;;		_clear_display
  9294 ;;		_menu_ingresar_password
  9295 ;;		_mostrar_titulo_menu
  9296 ;;		_mensaje_alarma_activada
  9297 ;;		_lcd_putc
  9298 ;;		_guardar_elemento
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           	psect	text62
  9303  00E002                     __ptext62:
  9304                           	opt stack 0
  9305  00E002                     _lcd_gotoxy:
  9306                           	opt stack 25
  9307                           
  9308                           ;incstack = 0
  9309                           ;lcd_gotoxy@x stored from wreg
  9310  00E002  6E06               	movwf	lcd_gotoxy@x,c
  9311                           
  9312                           ;unmc_lcd_216.c: 159: int8 address;
  9313                           ;unmc_lcd_216.c: 161: if(y != 1)
  9314  00E004  0405               	decf	lcd_gotoxy@y,w,c
  9315  00E006  B4D8               	btfsc	status,2,c
  9316  00E008  D002               	goto	l3210
  9317                           
  9318                           ;unmc_lcd_216.c: 162: address = 0x40;
  9319  00E00A  0E40               	movlw	64
  9320  00E00C  D001               	goto	L2
  9321  00E00E                     l3210:
  9322                           
  9323                           ;unmc_lcd_216.c: 163: else
  9324                           ;unmc_lcd_216.c: 164: address=0;
  9325  00E00E  0E00               	movlw	0
  9326  00E010                     L2:
  9327  00E010  6E07               	movwf	lcd_gotoxy@address,c
  9328  00E012  D000               	goto	l3212
  9329  00E014                     l3212:
  9330                           
  9331                           ;unmc_lcd_216.c: 166: address += x-1;
  9332  00E014  0406               	decf	lcd_gotoxy@x,w,c
  9333  00E016  2607               	addwf	lcd_gotoxy@address,f,c
  9334                           
  9335                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  9336  00E018  5007               	movf	lcd_gotoxy@address,w,c
  9337  00E01A  0980               	iorlw	128
  9338  00E01C  6E03               	movwf	lcd_send_byte@n,c
  9339  00E01E  0E00               	movlw	0
  9340  00E020  ECEA  F070         	call	_lcd_send_byte
  9341  00E024  0012               	return		;funcret
  9342  00E026                     __end_of_lcd_gotoxy:
  9343                           	opt stack 0
  9344                           tosu	equ	0xFFF
  9345                           tosh	equ	0xFFE
  9346                           tosl	equ	0xFFD
  9347                           pclath	equ	0xFFA
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           indf0	equ	0xFEF
  9355                           postinc0	equ	0xFEE
  9356                           fsr0h	equ	0xFEA
  9357                           fsr0l	equ	0xFE9
  9358                           wreg	equ	0xFE8
  9359                           indf1	equ	0xFE7
  9360                           postinc1	equ	0xFE6
  9361                           postdec1	equ	0xFE5
  9362                           fsr1h	equ	0xFE2
  9363                           fsr1l	equ	0xFE1
  9364                           indf2	equ	0xFDF
  9365                           postinc2	equ	0xFDE
  9366                           postdec2	equ	0xFDD
  9367                           plusw2	equ	0xFDB
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function _activar_sonido_alarma *****************
  9373 ;; Defined at:
  9374 ;;		line 237 in file "main.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;		None
  9379 ;; Return value:  Size  Location     Type
  9380 ;;		None               void
  9381 ;; Registers used:
  9382 ;;		None
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9392 ;;Total ram usage:        0 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; This function calls:
  9395 ;;		Nothing
  9396 ;; This function is called by:
  9397 ;;		_main
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           	psect	text63
  9402  00DD90                     __ptext63:
  9403                           	opt stack 0
  9404  00DD90                     _activar_sonido_alarma:
  9405                           	opt stack 30
  9406                           
  9407                           ;main.c: 238: LATBbits.LATB0 = !LATBbits.LATB0;;
  9408                           
  9409                           ;incstack = 0
  9410  00DD90  708A               	btg	3978,0,c	;volatile
  9411                           
  9412                           ;main.c: 239: LATCbits.LATC7 = !LATCbits.LATC7;;
  9413  00DD92  7E8B               	btg	3979,7,c	;volatile
  9414                           
  9415                           ;main.c: 240: LATCbits.LATC6 = !LATCbits.LATC6;;
  9416  00DD94  7C8B               	btg	3979,6,c	;volatile
  9417  00DD96  0012               	return		;funcret
  9418  00DD98                     __end_of_activar_sonido_alarma:
  9419                           	opt stack 0
  9420                           tosu	equ	0xFFF
  9421                           tosh	equ	0xFFE
  9422                           tosl	equ	0xFFD
  9423                           pclath	equ	0xFFA
  9424                           tblptru	equ	0xFF8
  9425                           tblptrh	equ	0xFF7
  9426                           tblptrl	equ	0xFF6
  9427                           tablat	equ	0xFF5
  9428                           prodh	equ	0xFF4
  9429                           prodl	equ	0xFF3
  9430                           indf0	equ	0xFEF
  9431                           postinc0	equ	0xFEE
  9432                           fsr0h	equ	0xFEA
  9433                           fsr0l	equ	0xFE9
  9434                           wreg	equ	0xFE8
  9435                           indf1	equ	0xFE7
  9436                           postinc1	equ	0xFE6
  9437                           postdec1	equ	0xFE5
  9438                           fsr1h	equ	0xFE2
  9439                           fsr1l	equ	0xFE1
  9440                           indf2	equ	0xFDF
  9441                           postinc2	equ	0xFDE
  9442                           postdec2	equ	0xFDD
  9443                           plusw2	equ	0xFDB
  9444                           fsr2h	equ	0xFDA
  9445                           fsr2l	equ	0xFD9
  9446                           status	equ	0xFD8
  9447                           
  9448 ;; *************** function _Setup *****************
  9449 ;; Defined at:
  9450 ;;		line 59 in file "main.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;		None
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;		None
  9455 ;; Return value:  Size  Location     Type
  9456 ;;		None               void
  9457 ;; Registers used:
  9458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9468 ;;Total ram usage:        0 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:    3
  9471 ;; This function calls:
  9472 ;;		_Write_RTC
  9473 ;;		_lcd_comand
  9474 ;;		_lcd_init
  9475 ;; This function is called by:
  9476 ;;		_main
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           	psect	text64
  9481  00E24C                     __ptext64:
  9482                           	opt stack 0
  9483  00E24C                     _Setup:
  9484                           	opt stack 27
  9485                           
  9486                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  9487                           
  9488                           ;incstack = 0
  9489  00E24C  8E9B               	bsf	3995,7,c	;volatile
  9490                           
  9491                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  9492  00E24E  9C9B               	bcf	3995,6,c	;volatile
  9493                           
  9494                           ;main.c: 63: OSCCONbits.IRCF0=1;
  9495  00E250  88D3               	bsf	4051,4,c	;volatile
  9496                           
  9497                           ;main.c: 64: OSCCONbits.IRCF1=1;
  9498  00E252  8AD3               	bsf	4051,5,c	;volatile
  9499                           
  9500                           ;main.c: 65: OSCCONbits.IRCF2=1;
  9501  00E254  8CD3               	bsf	4051,6,c	;volatile
  9502                           
  9503                           ;main.c: 66: OSCCONbits.SCS0=0;
  9504  00E256  90D3               	bcf	4051,0,c	;volatile
  9505                           
  9506                           ;main.c: 67: OSCCONbits.SCS1=0;
  9507  00E258  92D3               	bcf	4051,1,c	;volatile
  9508                           
  9509                           ;main.c: 68: TRISA = 0b11110000;
  9510  00E25A  0EF0               	movlw	240
  9511  00E25C  6E92               	movwf	3986,c	;volatile
  9512                           
  9513                           ;main.c: 69: TRISB = 0;
  9514  00E25E  0E00               	movlw	0
  9515  00E260  6E93               	movwf	3987,c	;volatile
  9516                           
  9517                           ;main.c: 70: TRISC = 0b00000111;
  9518  00E262  0E07               	movlw	7
  9519  00E264  6E94               	movwf	3988,c	;volatile
  9520                           
  9521                           ;main.c: 74: ANCON0=0b11111111;
  9522  00E266  010F               	movlb	15	; () banked
  9523  00E268  6948               	setf	72,b	;volatile
  9524                           
  9525                           ; BSR set to: 15
  9526                           ;main.c: 76: ANCON1=0b11111111;
  9527  00E26A  010F               	movlb	15	; () banked
  9528  00E26C  6949               	setf	73,b	;volatile
  9529                           
  9530                           ;main.c: 77: ADCON0=0b00101101;
  9531  00E26E  0E2D               	movlw	45
  9532  00E270  6EC2               	movwf	4034,c	;volatile
  9533                           
  9534                           ;main.c: 78: ADCON1=0b00010000;
  9535  00E272  0E10               	movlw	16
  9536  00E274  6EC1               	movwf	4033,c	;volatile
  9537                           
  9538                           ; BSR set to: 15
  9539                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  9540  00E276  010F               	movlb	15	; () banked
  9541  00E278  8F3F               	bsf	63,7,b	;volatile
  9542                           
  9543                           ; BSR set to: 15
  9544                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  9545  00E27A  010F               	movlb	15	; () banked
  9546  00E27C  8B3F               	bsf	63,5,b	;volatile
  9547                           
  9548                           ; BSR set to: 15
  9549                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  9550  00E27E  86CD               	bsf	4045,3,c	;volatile
  9551                           
  9552                           ; BSR set to: 15
  9553                           ;main.c: 82: Write_RTC();
  9554  00E280  EC32  F07C         	call	_Write_RTC	;wreg free
  9555                           
  9556                           ;main.c: 83: lcd_init();
  9557  00E284  EC8A  F074         	call	_lcd_init	;wreg free
  9558                           
  9559                           ;main.c: 84: lcd_comand(0b00001100);
  9560  00E288  0E0C               	movlw	12
  9561  00E28A  ECE1  F06E         	call	_lcd_comand
  9562                           
  9563                           ;main.c: 85: LATBbits.LATB1 = 0;;
  9564  00E28E  928A               	bcf	3978,1,c	;volatile
  9565                           
  9566                           ;main.c: 86: LATBbits.LATB0 = 0;;
  9567  00E290  908A               	bcf	3978,0,c	;volatile
  9568  00E292  0012               	return		;funcret
  9569  00E294                     __end_of_Setup:
  9570                           	opt stack 0
  9571                           tosu	equ	0xFFF
  9572                           tosh	equ	0xFFE
  9573                           tosl	equ	0xFFD
  9574                           pclath	equ	0xFFA
  9575                           tblptru	equ	0xFF8
  9576                           tblptrh	equ	0xFF7
  9577                           tblptrl	equ	0xFF6
  9578                           tablat	equ	0xFF5
  9579                           prodh	equ	0xFF4
  9580                           prodl	equ	0xFF3
  9581                           indf0	equ	0xFEF
  9582                           postinc0	equ	0xFEE
  9583                           fsr0h	equ	0xFEA
  9584                           fsr0l	equ	0xFE9
  9585                           wreg	equ	0xFE8
  9586                           indf1	equ	0xFE7
  9587                           postinc1	equ	0xFE6
  9588                           postdec1	equ	0xFE5
  9589                           fsr1h	equ	0xFE2
  9590                           fsr1l	equ	0xFE1
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           postdec2	equ	0xFDD
  9594                           plusw2	equ	0xFDB
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _lcd_init *****************
  9600 ;; Defined at:
  9601 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  i               1    4[COMRAM] unsigned char 
  9606 ;; Return value:  Size  Location     Type
  9607 ;;		None               void
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9619 ;;Total ram usage:        1 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    2
  9622 ;; This function calls:
  9623 ;;		_Delay1KTCYx
  9624 ;;		_lcd_send_byte
  9625 ;;		_lcd_send_nibble
  9626 ;; This function is called by:
  9627 ;;		_Setup
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           	psect	text65
  9632  00E914                     __ptext65:
  9633                           	opt stack 0
  9634  00E914                     _lcd_init:
  9635                           	opt stack 27
  9636                           
  9637                           ;unmc_lcd_216.c: 120: int8 i;
  9638                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  9639                           
  9640                           ;incstack = 0
  9641  00E914  9693               	bcf	3987,3,c	;volatile
  9642                           
  9643                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  9644  00E916  9493               	bcf	3987,2,c	;volatile
  9645                           
  9646                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  9647  00E918  968A               	bcf	3978,3,c	;volatile
  9648                           
  9649                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  9650  00E91A  948A               	bcf	3978,2,c	;volatile
  9651                           
  9652                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  9653  00E91C  9893               	bcf	3987,4,c	;volatile
  9654                           
  9655                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  9656  00E91E  9A93               	bcf	3987,5,c	;volatile
  9657                           
  9658                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  9659  00E920  9C93               	bcf	3987,6,c	;volatile
  9660                           
  9661                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  9662  00E922  9E93               	bcf	3987,7,c	;volatile
  9663                           
  9664                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  9665  00E924  0E0A               	movlw	10
  9666  00E926  EC1B  F06F         	call	_Delay1KTCYx
  9667                           
  9668                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  9669  00E92A  0E0A               	movlw	10
  9670  00E92C  EC1B  F06F         	call	_Delay1KTCYx
  9671                           
  9672                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  9673  00E930  0E0A               	movlw	10
  9674  00E932  EC1B  F06F         	call	_Delay1KTCYx
  9675                           
  9676                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  9677  00E936  0E00               	movlw	0
  9678  00E938  6E05               	movwf	lcd_init@i,c
  9679  00E93A                     l3864:
  9680  00E93A  0E02               	movlw	2
  9681  00E93C  6405               	cpfsgt	lcd_init@i,c
  9682  00E93E  D001               	goto	l3868
  9683  00E940  D008               	goto	l3874
  9684  00E942                     l3868:
  9685                           
  9686                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  9687  00E942  0E03               	movlw	3
  9688  00E944  EC5B  F073         	call	_lcd_send_nibble
  9689                           
  9690                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  9691  00E948  0E0A               	movlw	10
  9692  00E94A  EC1B  F06F         	call	_Delay1KTCYx
  9693  00E94E  2A05               	incf	lcd_init@i,f,c
  9694  00E950  D7F4               	goto	l3864
  9695  00E952                     l3874:
  9696                           
  9697                           ;unmc_lcd_216.c: 146: }
  9698                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  9699  00E952  0E02               	movlw	2
  9700  00E954  EC5B  F073         	call	_lcd_send_nibble
  9701                           
  9702                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  9703  00E958  0E00               	movlw	0
  9704  00E95A  6E05               	movwf	lcd_init@i,c
  9705  00E95C  0E03               	movlw	3
  9706  00E95E  6405               	cpfsgt	lcd_init@i,c
  9707  00E960  D002               	goto	l3882
  9708  00E962  0012               	return	
  9709  00E964  0012               	return	
  9710  00E966                     l3882:
  9711                           
  9712                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  9713  00E966  5005               	movf	lcd_init@i,w,c
  9714  00E968  0D01               	mullw	1
  9715  00E96A  0EAD               	movlw	low _LCD_INIT_STRING
  9716  00E96C  24F3               	addwf	prodl,w,c
  9717  00E96E  6EF6               	movwf	tblptrl,c
  9718  00E970  0EFE               	movlw	high _LCD_INIT_STRING
  9719  00E972  20F4               	addwfc	prodh,w,c
  9720  00E974  6EF7               	movwf	tblptrh,c
  9721  00E976                     	if	0	;There are less than 3 active tblptr bytes
  9722  00E976                     	endif
  9723  00E976  0008               	tblrd		*
  9724  00E978  CFF5 F003          	movff	tablat,lcd_send_byte@n
  9725  00E97C  0E00               	movlw	0
  9726  00E97E  ECEA  F070         	call	_lcd_send_byte
  9727                           
  9728                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  9729  00E982  0E0A               	movlw	10
  9730  00E984  EC1B  F06F         	call	_Delay1KTCYx
  9731  00E988  2A05               	incf	lcd_init@i,f,c
  9732  00E98A  0E03               	movlw	3
  9733  00E98C  6405               	cpfsgt	lcd_init@i,c
  9734  00E98E  D7EB               	goto	l3882
  9735  00E990  0012               	return	
  9736  00E992  0012               	return		;funcret
  9737  00E994                     __end_of_lcd_init:
  9738                           	opt stack 0
  9739                           tosu	equ	0xFFF
  9740                           tosh	equ	0xFFE
  9741                           tosl	equ	0xFFD
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           indf0	equ	0xFEF
  9750                           postinc0	equ	0xFEE
  9751                           fsr0h	equ	0xFEA
  9752                           fsr0l	equ	0xFE9
  9753                           wreg	equ	0xFE8
  9754                           indf1	equ	0xFE7
  9755                           postinc1	equ	0xFE6
  9756                           postdec1	equ	0xFE5
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           plusw2	equ	0xFDB
  9763                           fsr2h	equ	0xFDA
  9764                           fsr2l	equ	0xFD9
  9765                           status	equ	0xFD8
  9766                           
  9767 ;; *************** function _Delay1KTCYx *****************
  9768 ;; Defined at:
  9769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  unit            1    wreg     unsigned char 
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;  unit            1    0[COMRAM] unsigned char 
  9774 ;; Return value:  Size  Location     Type
  9775 ;;		None               void
  9776 ;; Registers used:
  9777 ;;		wreg
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9786 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9787 ;;Total ram usage:        1 bytes
  9788 ;; Hardware stack levels used:    1
  9789 ;; This function calls:
  9790 ;;		Nothing
  9791 ;; This function is called by:
  9792 ;;		_lcd_init
  9793 ;;		_DelayPORXLCD
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text66
  9798  00DE36                     __ptext66:
  9799                           	opt stack 0
  9800  00DE36                     _Delay1KTCYx:
  9801                           	opt stack 28
  9802                           
  9803                           ;incstack = 0
  9804                           ;Delay1KTCYx@unit stored from wreg
  9805  00DE36  6E01               	movwf	Delay1KTCYx@unit,c
  9806  00DE38  0EFA               	movlw	250
  9807  00DE3A                     u3817:
  9808  00DE3A  F000               	nop	
  9809  00DE3C  2EE8               	decfsz	wreg,f,c
  9810  00DE3E  D7FD               	goto	u3817
  9811  00DE40  2E01               	decfsz	Delay1KTCYx@unit,f,c
  9812  00DE42  D7FA               	goto	l3802
  9813  00DE44  0012               	return	
  9814  00DE46  0012               	return		;funcret
  9815  00DE48                     __end_of_Delay1KTCYx:
  9816                           	opt stack 0
  9817                           tosu	equ	0xFFF
  9818                           tosh	equ	0xFFE
  9819                           tosl	equ	0xFFD
  9820                           pclath	equ	0xFFA
  9821                           tblptru	equ	0xFF8
  9822                           tblptrh	equ	0xFF7
  9823                           tblptrl	equ	0xFF6
  9824                           tablat	equ	0xFF5
  9825                           prodh	equ	0xFF4
  9826                           prodl	equ	0xFF3
  9827                           indf0	equ	0xFEF
  9828                           postinc0	equ	0xFEE
  9829                           fsr0h	equ	0xFEA
  9830                           fsr0l	equ	0xFE9
  9831                           wreg	equ	0xFE8
  9832                           indf1	equ	0xFE7
  9833                           postinc1	equ	0xFE6
  9834                           postdec1	equ	0xFE5
  9835                           fsr1h	equ	0xFE2
  9836                           fsr1l	equ	0xFE1
  9837                           indf2	equ	0xFDF
  9838                           postinc2	equ	0xFDE
  9839                           postdec2	equ	0xFDD
  9840                           plusw2	equ	0xFDB
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845 ;; *************** function _lcd_comand *****************
  9846 ;; Defined at:
  9847 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;  d               1    wreg     unsigned char 
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;  d               1    4[COMRAM] unsigned char 
  9852 ;; Return value:  Size  Location     Type
  9853 ;;		None               void
  9854 ;; Registers used:
  9855 ;;		wreg, status,2, status,0, cstack
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9865 ;;Total ram usage:        1 bytes
  9866 ;; Hardware stack levels used:    1
  9867 ;; Hardware stack levels required when called:    2
  9868 ;; This function calls:
  9869 ;;		_lcd_send_byte
  9870 ;; This function is called by:
  9871 ;;		_caratula
  9872 ;;		_Setup
  9873 ;;		_menu_ingresar_password
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text67
  9878  00DDC2                     __ptext67:
  9879                           	opt stack 0
  9880  00DDC2                     _lcd_comand:
  9881                           	opt stack 27
  9882                           
  9883                           ;incstack = 0
  9884                           ;lcd_comand@d stored from wreg
  9885  00DDC2  6E05               	movwf	lcd_comand@d,c
  9886                           
  9887                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  9888  00DDC4  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  9889  00DDC8  0E00               	movlw	0
  9890  00DDCA  ECEA  F070         	call	_lcd_send_byte
  9891  00DDCE  0012               	return		;funcret
  9892  00DDD0                     __end_of_lcd_comand:
  9893                           	opt stack 0
  9894                           tosu	equ	0xFFF
  9895                           tosh	equ	0xFFE
  9896                           tosl	equ	0xFFD
  9897                           pclath	equ	0xFFA
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           indf0	equ	0xFEF
  9905                           postinc0	equ	0xFEE
  9906                           fsr0h	equ	0xFEA
  9907                           fsr0l	equ	0xFE9
  9908                           wreg	equ	0xFE8
  9909                           indf1	equ	0xFE7
  9910                           postinc1	equ	0xFE6
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           plusw2	equ	0xFDB
  9918                           fsr2h	equ	0xFDA
  9919                           fsr2l	equ	0xFD9
  9920                           status	equ	0xFD8
  9921                           
  9922 ;; *************** function _lcd_send_byte *****************
  9923 ;; Defined at:
  9924 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;  address         1    wreg     unsigned char 
  9927 ;;  n               1    2[COMRAM] unsigned char 
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;  address         1    3[COMRAM] unsigned char 
  9930 ;; Return value:  Size  Location     Type
  9931 ;;		None               void
  9932 ;; Registers used:
  9933 ;;		wreg, status,2, status,0, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9939 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9943 ;;Total ram usage:        2 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    1
  9946 ;; This function calls:
  9947 ;;		_Delay100TCYx
  9948 ;;		_lcd_send_nibble
  9949 ;; This function is called by:
  9950 ;;		_lcd_init
  9951 ;;		_lcd_gotoxy
  9952 ;;		_lcd_putc
  9953 ;;		_lcd_comand
  9954 ;;		_lcd_setcursor_vb
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text68
  9959  00E1D4                     __ptext68:
  9960                           	opt stack 0
  9961  00E1D4                     _lcd_send_byte:
  9962                           	opt stack 26
  9963                           
  9964                           ;incstack = 0
  9965                           ;lcd_send_byte@address stored from wreg
  9966  00E1D4  6E04               	movwf	lcd_send_byte@address,c
  9967                           
  9968                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  9969  00E1D6  968A               	bcf	3978,3,c	;volatile
  9970                           
  9971                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  9972  00E1D8  0E02               	movlw	2
  9973  00E1DA  EC12  F06F         	call	_Delay100TCYx
  9974                           
  9975                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  9976  00E1DE  9893               	bcf	3987,4,c	;volatile
  9977                           
  9978                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  9979  00E1E0  9A93               	bcf	3987,5,c	;volatile
  9980                           
  9981                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  9982  00E1E2  9C93               	bcf	3987,6,c	;volatile
  9983                           
  9984                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  9985  00E1E4  9E93               	bcf	3987,7,c	;volatile
  9986                           
  9987                           ;unmc_lcd_216.c: 101: if(address)
  9988  00E1E6  5004               	movf	lcd_send_byte@address,w,c
  9989  00E1E8  B4D8               	btfsc	status,2,c
  9990  00E1EA  D002               	goto	l331
  9991                           
  9992                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  9993  00E1EC  868A               	bsf	3978,3,c	;volatile
  9994  00E1EE  D001               	goto	l332
  9995  00E1F0                     l331:
  9996                           
  9997                           ;unmc_lcd_216.c: 103: else
  9998                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  9999  00E1F0  968A               	bcf	3978,3,c	;volatile
 10000  00E1F2                     l332:
 10001                           
 10002                           ;unmc_lcd_216.c: 106: __nop();
 10003  00E1F2  F000               	nop	
 10004                           
 10005                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10006  00E1F4  3803               	swapf	lcd_send_byte@n,w,c
 10007  00E1F6  0B0F               	andlw	15
 10008  00E1F8  EC5B  F073         	call	_lcd_send_nibble
 10009                           
 10010                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10011  00E1FC  5003               	movf	lcd_send_byte@n,w,c
 10012  00E1FE  0B0F               	andlw	15
 10013  00E200  EC5B  F073         	call	_lcd_send_nibble
 10014  00E204  0012               	return		;funcret
 10015  00E206                     __end_of_lcd_send_byte:
 10016                           	opt stack 0
 10017                           tosu	equ	0xFFF
 10018                           tosh	equ	0xFFE
 10019                           tosl	equ	0xFFD
 10020                           pclath	equ	0xFFA
 10021                           tblptru	equ	0xFF8
 10022                           tblptrh	equ	0xFF7
 10023                           tblptrl	equ	0xFF6
 10024                           tablat	equ	0xFF5
 10025                           prodh	equ	0xFF4
 10026                           prodl	equ	0xFF3
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           indf1	equ	0xFE7
 10033                           postinc1	equ	0xFE6
 10034                           postdec1	equ	0xFE5
 10035                           fsr1h	equ	0xFE2
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           plusw2	equ	0xFDB
 10041                           fsr2h	equ	0xFDA
 10042                           fsr2l	equ	0xFD9
 10043                           status	equ	0xFD8
 10044                           
 10045 ;; *************** function _lcd_send_nibble *****************
 10046 ;; Defined at:
 10047 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  nibble          1    wreg     unsigned char 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  nibble          1    1[COMRAM] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10065 ;;Total ram usage:        2 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_lcd_send_byte
 10071 ;;		_lcd_init
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text69
 10076  00E6B6                     __ptext69:
 10077                           	opt stack 0
 10078  00E6B6                     _lcd_send_nibble:
 10079                           	opt stack 26
 10080                           
 10081                           ;incstack = 0
 10082                           ;lcd_send_nibble@nibble stored from wreg
 10083  00E6B6  6E02               	movwf	lcd_send_nibble@nibble,c
 10084                           
 10085                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10086  00E6B8  A002               	btfss	lcd_send_nibble@nibble,0,c
 10087  00E6BA  D003               	goto	u1890
 10088  00E6BC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10089  00E6BE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10090  00E6C0  D001               	goto	u1908
 10091  00E6C2                     u1890:
 10092  00E6C2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10093  00E6C4                     u1908:
 10094  00E6C4  3A01               	swapf	??_lcd_send_nibble,f,c
 10095  00E6C6  508A               	movf	3978,w,c	;volatile
 10096  00E6C8  1801               	xorwf	??_lcd_send_nibble,w,c
 10097  00E6CA  0BEF               	andlw	-17
 10098  00E6CC  1801               	xorwf	??_lcd_send_nibble,w,c
 10099  00E6CE  6E8A               	movwf	3978,c	;volatile
 10100                           
 10101                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10102  00E6D0  A202               	btfss	lcd_send_nibble@nibble,1,c
 10103  00E6D2  D003               	goto	u1910
 10104  00E6D4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10105  00E6D6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10106  00E6D8  D001               	goto	u1928
 10107  00E6DA                     u1910:
 10108  00E6DA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10109  00E6DC                     u1928:
 10110  00E6DC  3A01               	swapf	??_lcd_send_nibble,f,c
 10111  00E6DE  4601               	rlncf	??_lcd_send_nibble,f,c
 10112  00E6E0  508A               	movf	3978,w,c	;volatile
 10113  00E6E2  1801               	xorwf	??_lcd_send_nibble,w,c
 10114  00E6E4  0BDF               	andlw	-33
 10115  00E6E6  1801               	xorwf	??_lcd_send_nibble,w,c
 10116  00E6E8  6E8A               	movwf	3978,c	;volatile
 10117                           
 10118                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10119  00E6EA  A402               	btfss	lcd_send_nibble@nibble,2,c
 10120  00E6EC  D003               	goto	u1930
 10121  00E6EE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10122  00E6F0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10123  00E6F2  D001               	goto	u1948
 10124  00E6F4                     u1930:
 10125  00E6F4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10126  00E6F6                     u1948:
 10127  00E6F6  3A01               	swapf	??_lcd_send_nibble,f,c
 10128  00E6F8  4601               	rlncf	??_lcd_send_nibble,f,c
 10129  00E6FA  4601               	rlncf	??_lcd_send_nibble,f,c
 10130  00E6FC  508A               	movf	3978,w,c	;volatile
 10131  00E6FE  1801               	xorwf	??_lcd_send_nibble,w,c
 10132  00E700  0BBF               	andlw	-65
 10133  00E702  1801               	xorwf	??_lcd_send_nibble,w,c
 10134  00E704  6E8A               	movwf	3978,c	;volatile
 10135                           
 10136                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10137  00E706  A602               	btfss	lcd_send_nibble@nibble,3,c
 10138  00E708  D003               	goto	u1950
 10139  00E70A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10140  00E70C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10141  00E70E  D001               	goto	u1968
 10142  00E710                     u1950:
 10143  00E710  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10144  00E712                     u1968:
 10145  00E712  3201               	rrcf	??_lcd_send_nibble,f,c
 10146  00E714  3201               	rrcf	??_lcd_send_nibble,f,c
 10147  00E716  508A               	movf	3978,w,c	;volatile
 10148  00E718  1801               	xorwf	??_lcd_send_nibble,w,c
 10149  00E71A  0B7F               	andlw	-129
 10150  00E71C  1801               	xorwf	??_lcd_send_nibble,w,c
 10151  00E71E  6E8A               	movwf	3978,c	;volatile
 10152                           
 10153                           ;unmc_lcd_216.c: 32: __nop();
 10154  00E720  F000               	nop	
 10155                           
 10156                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10157  00E722  848A               	bsf	3978,2,c	;volatile
 10158                           
 10159                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10160  00E724  F000               	nop	
 10161  00E726  F000               	nop	
 10162                           
 10163                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10164  00E728  948A               	bcf	3978,2,c	;volatile
 10165  00E72A  0012               	return		;funcret
 10166  00E72C                     __end_of_lcd_send_nibble:
 10167                           	opt stack 0
 10168                           tosu	equ	0xFFF
 10169                           tosh	equ	0xFFE
 10170                           tosl	equ	0xFFD
 10171                           pclath	equ	0xFFA
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           indf0	equ	0xFEF
 10179                           postinc0	equ	0xFEE
 10180                           fsr0h	equ	0xFEA
 10181                           fsr0l	equ	0xFE9
 10182                           wreg	equ	0xFE8
 10183                           indf1	equ	0xFE7
 10184                           postinc1	equ	0xFE6
 10185                           postdec1	equ	0xFE5
 10186                           fsr1h	equ	0xFE2
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           plusw2	equ	0xFDB
 10192                           fsr2h	equ	0xFDA
 10193                           fsr2l	equ	0xFD9
 10194                           status	equ	0xFD8
 10195                           
 10196 ;; *************** function _Delay100TCYx *****************
 10197 ;; Defined at:
 10198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;  unit            1    wreg     unsigned char 
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;  unit            1    0[COMRAM] unsigned char 
 10203 ;; Return value:  Size  Location     Type
 10204 ;;		None               void
 10205 ;; Registers used:
 10206 ;;		wreg
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10216 ;;Total ram usage:        1 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		_lcd_send_byte
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           	psect	text70
 10226  00DE24                     __ptext70:
 10227                           	opt stack 0
 10228  00DE24                     _Delay100TCYx:
 10229                           	opt stack 26
 10230                           
 10231                           ;incstack = 0
 10232                           ;Delay100TCYx@unit stored from wreg
 10233  00DE24  6E01               	movwf	Delay100TCYx@unit,c
 10234  00DE26  0E21               	movlw	33
 10235  00DE28                     u3827:
 10236  00DE28  2EE8               	decfsz	wreg,f,c
 10237  00DE2A  D7FE               	goto	u3827
 10238  00DE2C  F000               	nop	
 10239  00DE2E  2E01               	decfsz	Delay100TCYx@unit,f,c
 10240  00DE30  D7FA               	goto	l2996
 10241  00DE32  0012               	return	
 10242  00DE34  0012               	return		;funcret
 10243  00DE36                     __end_of_Delay100TCYx:
 10244                           	opt stack 0
 10245                           tosu	equ	0xFFF
 10246                           tosh	equ	0xFFE
 10247                           tosl	equ	0xFFD
 10248                           pclath	equ	0xFFA
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           indf0	equ	0xFEF
 10256                           postinc0	equ	0xFEE
 10257                           fsr0h	equ	0xFEA
 10258                           fsr0l	equ	0xFE9
 10259                           wreg	equ	0xFE8
 10260                           indf1	equ	0xFE7
 10261                           postinc1	equ	0xFE6
 10262                           postdec1	equ	0xFE5
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           plusw2	equ	0xFDB
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _Write_RTC *****************
 10274 ;; Defined at:
 10275 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;		None
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;		None
 10280 ;; Return value:  Size  Location     Type
 10281 ;;		None               void
 10282 ;; Registers used:
 10283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10293 ;;Total ram usage:        0 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    2
 10296 ;; This function calls:
 10297 ;;		_RtccWrOn
 10298 ;;		_RtccWriteDate
 10299 ;;		_RtccWriteTime
 10300 ;;		___awdiv
 10301 ;; This function is called by:
 10302 ;;		_Setup
 10303 ;;		_actualiza_elemento
 10304 ;;		_actualizar_hora
 10305 ;;		_actualizar_minutos
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           	psect	text71
 10310  00F864                     __ptext71:
 10311                           	opt stack 0
 10312  00F864                     _Write_RTC:
 10313                           	opt stack 23
 10314                           
 10315                           ;unmc_rtcc_02.c: 37: RtccWrOn();
 10316                           
 10317                           ;incstack = 0
 10318  00F864  EC09  F06F         	call	_RtccWrOn	;wreg free
 10319                           
 10320                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
 10321  00F868  80A3               	bsf	4003,0,c	;volatile
 10322                           
 10323                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
 10324  00F86A  C097  F001         	movff	_segundo,___awdiv@dividend
 10325  00F86E  C098  F002         	movff	_segundo+1,___awdiv@dividend+1
 10326  00F872  0E00               	movlw	0
 10327  00F874  6E04               	movwf	___awdiv@divisor+1,c
 10328  00F876  0E0A               	movlw	10
 10329  00F878  6E03               	movwf	___awdiv@divisor,c
 10330  00F87A  ECD9  F075         	call	___awdiv	;wreg free
 10331  00F87E  5001               	movf	?___awdiv,w,c
 10332  00F880  6E5E               	movwf	_segundo_d,c
 10333                           
 10334                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
 10335  00F882  505E               	movf	_segundo_d,w,c
 10336  00F884  0D0A               	mullw	10
 10337  00F886  50F3               	movf	prodl,w,c
 10338  00F888  0800               	sublw	0
 10339  00F88A  0100               	movlb	0	; () banked
 10340  00F88C  2597               	addwf	_segundo& (0+255),w,b
 10341  00F88E  0100               	movlb	0	; () banked
 10342  00F890  6FFE               	movwf	_segundo_u& (0+255),b
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
 10346  00F892  505E               	movf	_segundo_d,w,c
 10347  00F894  0D10               	mullw	16
 10348  00F896  50F3               	movf	prodl,w,c
 10349  00F898  0100               	movlb	0	; () banked
 10350  00F89A  25FE               	addwf	_segundo_u& (0+255),w,b
 10351  00F89C  6E4F               	movwf	_RtccTime+1,c
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
 10355  00F89E  C0F1  F001         	movff	_minuto,___awdiv@dividend
 10356  00F8A2  C0F2  F002         	movff	_minuto+1,___awdiv@dividend+1
 10357  00F8A6  0E00               	movlw	0
 10358  00F8A8  6E04               	movwf	___awdiv@divisor+1,c
 10359  00F8AA  0E0A               	movlw	10
 10360  00F8AC  6E03               	movwf	___awdiv@divisor,c
 10361  00F8AE  ECD9  F075         	call	___awdiv	;wreg free
 10362  00F8B2  5001               	movf	?___awdiv,w,c
 10363  00F8B4  0100               	movlb	0	; () banked
 10364  00F8B6  6FFC               	movwf	_minuto_d& (0+255),b
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
 10368  00F8B8  0100               	movlb	0	; () banked
 10369  00F8BA  51FC               	movf	_minuto_d& (0+255),w,b
 10370  00F8BC  0D0A               	mullw	10
 10371  00F8BE  50F3               	movf	prodl,w,c
 10372  00F8C0  0800               	sublw	0
 10373  00F8C2  0100               	movlb	0	; () banked
 10374  00F8C4  25F1               	addwf	_minuto& (0+255),w,b
 10375  00F8C6  0100               	movlb	0	; () banked
 10376  00F8C8  6FFD               	movwf	_minuto_u& (0+255),b
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
 10380  00F8CA  0100               	movlb	0	; () banked
 10381  00F8CC  51FC               	movf	_minuto_d& (0+255),w,b
 10382  00F8CE  0D10               	mullw	16
 10383  00F8D0  50F3               	movf	prodl,w,c
 10384  00F8D2  0100               	movlb	0	; () banked
 10385  00F8D4  25FD               	addwf	_minuto_u& (0+255),w,b
 10386  00F8D6  6E50               	movwf	_RtccTime+2,c
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
 10390  00F8D8  C0EF  F001         	movff	_hora,___awdiv@dividend
 10391  00F8DC  C0F0  F002         	movff	_hora+1,___awdiv@dividend+1
 10392  00F8E0  0E00               	movlw	0
 10393  00F8E2  6E04               	movwf	___awdiv@divisor+1,c
 10394  00F8E4  0E0A               	movlw	10
 10395  00F8E6  6E03               	movwf	___awdiv@divisor,c
 10396  00F8E8  ECD9  F075         	call	___awdiv	;wreg free
 10397  00F8EC  5001               	movf	?___awdiv,w,c
 10398  00F8EE  0100               	movlb	0	; () banked
 10399  00F8F0  6FF8               	movwf	_hora_d& (0+255),b
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
 10403  00F8F2  0100               	movlb	0	; () banked
 10404  00F8F4  51F8               	movf	_hora_d& (0+255),w,b
 10405  00F8F6  0D0A               	mullw	10
 10406  00F8F8  50F3               	movf	prodl,w,c
 10407  00F8FA  0800               	sublw	0
 10408  00F8FC  0100               	movlb	0	; () banked
 10409  00F8FE  25EF               	addwf	_hora& (0+255),w,b
 10410  00F900  0100               	movlb	0	; () banked
 10411  00F902  6FF9               	movwf	_hora_u& (0+255),b
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
 10415  00F904  0100               	movlb	0	; () banked
 10416  00F906  51F8               	movf	_hora_d& (0+255),w,b
 10417  00F908  0D10               	mullw	16
 10418  00F90A  50F3               	movf	prodl,w,c
 10419  00F90C  0100               	movlb	0	; () banked
 10420  00F90E  25F9               	addwf	_hora_u& (0+255),w,b
 10421  00F910  6E51               	movwf	_RtccTime+3,c
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
 10425  00F912  C05A  F001         	movff	_anio,___awdiv@dividend
 10426  00F916  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
 10427  00F91A  0E00               	movlw	0
 10428  00F91C  6E04               	movwf	___awdiv@divisor+1,c
 10429  00F91E  0E0A               	movlw	10
 10430  00F920  6E03               	movwf	___awdiv@divisor,c
 10431  00F922  ECD9  F075         	call	___awdiv	;wreg free
 10432  00F926  5001               	movf	?___awdiv,w,c
 10433  00F928  0100               	movlb	0	; () banked
 10434  00F92A  6FF3               	movwf	_anio_d& (0+255),b
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
 10438  00F92C  0100               	movlb	0	; () banked
 10439  00F92E  51F3               	movf	_anio_d& (0+255),w,b
 10440  00F930  0D0A               	mullw	10
 10441  00F932  50F3               	movf	prodl,w,c
 10442  00F934  0800               	sublw	0
 10443  00F936  245A               	addwf	_anio,w,c
 10444  00F938  0100               	movlb	0	; () banked
 10445  00F93A  6FF4               	movwf	_anio_u& (0+255),b
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
 10449  00F93C  0100               	movlb	0	; () banked
 10450  00F93E  51F3               	movf	_anio_d& (0+255),w,b
 10451  00F940  0D10               	mullw	16
 10452  00F942  50F3               	movf	prodl,w,c
 10453  00F944  0100               	movlb	0	; () banked
 10454  00F946  25F4               	addwf	_anio_u& (0+255),w,b
 10455  00F948  6E4D               	movwf	_RtccDate+3,c
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
 10459  00F94A  C05C  F001         	movff	_mes,___awdiv@dividend
 10460  00F94E  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
 10461  00F952  0E00               	movlw	0
 10462  00F954  6E04               	movwf	___awdiv@divisor+1,c
 10463  00F956  0E0A               	movlw	10
 10464  00F958  6E03               	movwf	___awdiv@divisor,c
 10465  00F95A  ECD9  F075         	call	___awdiv	;wreg free
 10466  00F95E  5001               	movf	?___awdiv,w,c
 10467  00F960  0100               	movlb	0	; () banked
 10468  00F962  6FFA               	movwf	_mes_d& (0+255),b
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
 10472  00F964  0100               	movlb	0	; () banked
 10473  00F966  51FA               	movf	_mes_d& (0+255),w,b
 10474  00F968  0D0A               	mullw	10
 10475  00F96A  50F3               	movf	prodl,w,c
 10476  00F96C  0800               	sublw	0
 10477  00F96E  245C               	addwf	_mes,w,c
 10478  00F970  0100               	movlb	0	; () banked
 10479  00F972  6FFB               	movwf	_mes_u& (0+255),b
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
 10483  00F974  0100               	movlb	0	; () banked
 10484  00F976  51FA               	movf	_mes_d& (0+255),w,b
 10485  00F978  0D10               	mullw	16
 10486  00F97A  50F3               	movf	prodl,w,c
 10487  00F97C  0100               	movlb	0	; () banked
 10488  00F97E  25FB               	addwf	_mes_u& (0+255),w,b
 10489  00F980  6E4C               	movwf	_RtccDate+2,c
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
 10493  00F982  C0ED  F001         	movff	_dia,___awdiv@dividend
 10494  00F986  C0EE  F002         	movff	_dia+1,___awdiv@dividend+1
 10495  00F98A  0E00               	movlw	0
 10496  00F98C  6E04               	movwf	___awdiv@divisor+1,c
 10497  00F98E  0E0A               	movlw	10
 10498  00F990  6E03               	movwf	___awdiv@divisor,c
 10499  00F992  ECD9  F075         	call	___awdiv	;wreg free
 10500  00F996  5001               	movf	?___awdiv,w,c
 10501  00F998  0100               	movlb	0	; () banked
 10502  00F99A  6FF6               	movwf	_fecha_d& (0+255),b
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
 10506  00F99C  0100               	movlb	0	; () banked
 10507  00F99E  51F6               	movf	_fecha_d& (0+255),w,b
 10508  00F9A0  0D0A               	mullw	10
 10509  00F9A2  50F3               	movf	prodl,w,c
 10510  00F9A4  0800               	sublw	0
 10511  00F9A6  0100               	movlb	0	; () banked
 10512  00F9A8  25ED               	addwf	_dia& (0+255),w,b
 10513  00F9AA  0100               	movlb	0	; () banked
 10514  00F9AC  6FF7               	movwf	_fecha_u& (0+255),b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
 10518  00F9AE  0100               	movlb	0	; () banked
 10519  00F9B0  51F6               	movf	_fecha_d& (0+255),w,b
 10520  00F9B2  0D10               	mullw	16
 10521  00F9B4  50F3               	movf	prodl,w,c
 10522  00F9B6  0100               	movlb	0	; () banked
 10523  00F9B8  25F7               	addwf	_fecha_u& (0+255),w,b
 10524  00F9BA  6E4B               	movwf	_RtccDate+1,c
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
 10528  00F9BC  C0E9  F0F5         	movff	_diasem,_dia_semana
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
 10532  00F9C0  C0E9  F04A         	movff	_diasem,_RtccDate
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
 10536  00F9C4  0E4E               	movlw	low _RtccTime
 10537  00F9C6  6E01               	movwf	RtccWriteTime@pTm,c
 10538  00F9C8  0E00               	movlw	high _RtccTime
 10539  00F9CA  6E02               	movwf	RtccWriteTime@pTm+1,c
 10540  00F9CC  0E01               	movlw	1
 10541  00F9CE  6E03               	movwf	RtccWriteTime@di,c
 10542  00F9D0  EC34  F079         	call	_RtccWriteTime	;wreg free
 10543                           
 10544                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
 10545  00F9D4  0E4A               	movlw	low _RtccDate
 10546  00F9D6  6E01               	movwf	RtccWriteDate@pDt,c
 10547  00F9D8  0E00               	movlw	high _RtccDate
 10548  00F9DA  6E02               	movwf	RtccWriteDate@pDt+1,c
 10549  00F9DC  0E01               	movlw	1
 10550  00F9DE  6E03               	movwf	RtccWriteDate@di,c
 10551  00F9E0  ECE4  F07A         	call	_RtccWriteDate	;wreg free
 10552                           
 10553                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
 10554  00F9E4  010F               	movlb	15	; () banked
 10555  00F9E6  8F3F               	bsf	63,7,b	;volatile
 10556                           
 10557                           ; BSR set to: 15
 10558  00F9E8  0012               	return		;funcret
 10559  00F9EA                     __end_of_Write_RTC:
 10560                           	opt stack 0
 10561                           tosu	equ	0xFFF
 10562                           tosh	equ	0xFFE
 10563                           tosl	equ	0xFFD
 10564                           pclath	equ	0xFFA
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           indf0	equ	0xFEF
 10572                           postinc0	equ	0xFEE
 10573                           fsr0h	equ	0xFEA
 10574                           fsr0l	equ	0xFE9
 10575                           wreg	equ	0xFE8
 10576                           indf1	equ	0xFE7
 10577                           postinc1	equ	0xFE6
 10578                           postdec1	equ	0xFE5
 10579                           fsr1h	equ	0xFE2
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function ___awdiv *****************
 10590 ;; Defined at:
 10591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;  dividend        2    0[COMRAM] int 
 10594 ;;  divisor         2    2[COMRAM] int 
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;  quotient        2    6[COMRAM] int 
 10597 ;;  sign            1    5[COMRAM] unsigned char 
 10598 ;;  counter         1    4[COMRAM] unsigned char 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  2    0[COMRAM] int 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10609 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10611 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10612 ;;Total ram usage:        8 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_Write_RTC
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           	psect	text72
 10622  00EBB2                     __ptext72:
 10623                           	opt stack 0
 10624  00EBB2                     ___awdiv:
 10625                           	opt stack 24
 10626                           
 10627                           ; BSR set to: 15
 10628                           ;incstack = 0
 10629  00EBB2  0E00               	movlw	0
 10630  00EBB4  6E06               	movwf	___awdiv@sign,c
 10631  00EBB6  AE04               	btfss	___awdiv@divisor+1,7,c
 10632  00EBB8  D007               	goto	l3170
 10633  00EBBA  6C03               	negf	___awdiv@divisor,c
 10634  00EBBC  1E04               	comf	___awdiv@divisor+1,f,c
 10635  00EBBE  B0D8               	btfsc	status,0,c
 10636  00EBC0  2A04               	incf	___awdiv@divisor+1,f,c
 10637  00EBC2  0E01               	movlw	1
 10638  00EBC4  6E06               	movwf	___awdiv@sign,c
 10639  00EBC6  D000               	goto	l3170
 10640  00EBC8                     l3170:
 10641  00EBC8  AE02               	btfss	___awdiv@dividend+1,7,c
 10642  00EBCA  D007               	goto	l3176
 10643  00EBCC  6C01               	negf	___awdiv@dividend,c
 10644  00EBCE  1E02               	comf	___awdiv@dividend+1,f,c
 10645  00EBD0  B0D8               	btfsc	status,0,c
 10646  00EBD2  2A02               	incf	___awdiv@dividend+1,f,c
 10647  00EBD4  0E01               	movlw	1
 10648  00EBD6  1A06               	xorwf	___awdiv@sign,f,c
 10649  00EBD8  D000               	goto	l3176
 10650  00EBDA                     l3176:
 10651  00EBDA  0E00               	movlw	0
 10652  00EBDC  6E08               	movwf	___awdiv@quotient+1,c
 10653  00EBDE  0E00               	movlw	0
 10654  00EBE0  6E07               	movwf	___awdiv@quotient,c
 10655  00EBE2  5003               	movf	___awdiv@divisor,w,c
 10656  00EBE4  1004               	iorwf	___awdiv@divisor+1,w,c
 10657  00EBE6  B4D8               	btfsc	status,2,c
 10658  00EBE8  D021               	goto	l3198
 10659  00EBEA  0E01               	movlw	1
 10660  00EBEC  6E05               	movwf	___awdiv@counter,c
 10661  00EBEE  D005               	goto	l3184
 10662  00EBF0                     l3182:
 10663  00EBF0  90D8               	bcf	status,0,c
 10664  00EBF2  3603               	rlcf	___awdiv@divisor,f,c
 10665  00EBF4  3604               	rlcf	___awdiv@divisor+1,f,c
 10666  00EBF6  2A05               	incf	___awdiv@counter,f,c
 10667  00EBF8  D000               	goto	l3184
 10668  00EBFA                     l3184:
 10669  00EBFA  BE04               	btfsc	___awdiv@divisor+1,7,c
 10670  00EBFC  D002               	goto	l3186
 10671  00EBFE  D7F8               	goto	l3182
 10672  00EC00  D000               	goto	l3186
 10673  00EC02                     l3186:
 10674  00EC02  90D8               	bcf	status,0,c
 10675  00EC04  3607               	rlcf	___awdiv@quotient,f,c
 10676  00EC06  3608               	rlcf	___awdiv@quotient+1,f,c
 10677  00EC08  5003               	movf	___awdiv@divisor,w,c
 10678  00EC0A  5C01               	subwf	___awdiv@dividend,w,c
 10679  00EC0C  5004               	movf	___awdiv@divisor+1,w,c
 10680  00EC0E  5802               	subwfb	___awdiv@dividend+1,w,c
 10681  00EC10  A0D8               	btfss	status,0,c
 10682  00EC12  D006               	goto	l3194
 10683  00EC14  5003               	movf	___awdiv@divisor,w,c
 10684  00EC16  5E01               	subwf	___awdiv@dividend,f,c
 10685  00EC18  5004               	movf	___awdiv@divisor+1,w,c
 10686  00EC1A  5A02               	subwfb	___awdiv@dividend+1,f,c
 10687  00EC1C  8007               	bsf	___awdiv@quotient,0,c
 10688  00EC1E  D000               	goto	l3194
 10689  00EC20                     l3194:
 10690  00EC20  90D8               	bcf	status,0,c
 10691  00EC22  3204               	rrcf	___awdiv@divisor+1,f,c
 10692  00EC24  3203               	rrcf	___awdiv@divisor,f,c
 10693  00EC26  2E05               	decfsz	___awdiv@counter,f,c
 10694  00EC28  D7EC               	goto	l3186
 10695  00EC2A  D000               	goto	l3198
 10696  00EC2C                     l3198:
 10697  00EC2C  5006               	movf	___awdiv@sign,w,c
 10698  00EC2E  B4D8               	btfsc	status,2,c
 10699  00EC30  D005               	goto	l3202
 10700  00EC32  6C07               	negf	___awdiv@quotient,c
 10701  00EC34  1E08               	comf	___awdiv@quotient+1,f,c
 10702  00EC36  B0D8               	btfsc	status,0,c
 10703  00EC38  2A08               	incf	___awdiv@quotient+1,f,c
 10704  00EC3A  D000               	goto	l3202
 10705  00EC3C                     l3202:
 10706  00EC3C  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10707  00EC40  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10708  00EC44  0012               	return	
 10709  00EC46  0012               	return		;funcret
 10710  00EC48                     __end_of___awdiv:
 10711                           	opt stack 0
 10712                           tosu	equ	0xFFF
 10713                           tosh	equ	0xFFE
 10714                           tosl	equ	0xFFD
 10715                           pclath	equ	0xFFA
 10716                           tblptru	equ	0xFF8
 10717                           tblptrh	equ	0xFF7
 10718                           tblptrl	equ	0xFF6
 10719                           tablat	equ	0xFF5
 10720                           prodh	equ	0xFF4
 10721                           prodl	equ	0xFF3
 10722                           indf0	equ	0xFEF
 10723                           postinc0	equ	0xFEE
 10724                           fsr0h	equ	0xFEA
 10725                           fsr0l	equ	0xFE9
 10726                           wreg	equ	0xFE8
 10727                           indf1	equ	0xFE7
 10728                           postinc1	equ	0xFE6
 10729                           postdec1	equ	0xFE5
 10730                           fsr1h	equ	0xFE2
 10731                           fsr1l	equ	0xFE1
 10732                           indf2	equ	0xFDF
 10733                           postinc2	equ	0xFDE
 10734                           postdec2	equ	0xFDD
 10735                           plusw2	equ	0xFDB
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _RtccWriteTime *****************
 10741 ;; Defined at:
 10742 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;  pTm             2    0[COMRAM] PTR const struct .
 10745 ;;		 -> RtccTime(4), 
 10746 ;;  di              1    2[COMRAM] enum E7121
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;  tempHourWDay    2    9[COMRAM] struct .
 10749 ;;  tempMinSec      2    7[COMRAM] struct .
 10750 ;;  wasWrEn         1    6[COMRAM] enum E7121
 10751 ;;  wasAlrm         1    5[COMRAM] enum E7121
 10752 ;;  wasOn           1    4[COMRAM] enum E7121
 10753 ;; Return value:  Size  Location     Type
 10754 ;;                  1    wreg      enum E7121
 10755 ;; Registers used:
 10756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10762 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10763 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10764 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10765 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10766 ;;Total ram usage:       11 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; Hardware stack levels required when called:    1
 10769 ;; This function calls:
 10770 ;;		_RtccWrOn
 10771 ;; This function is called by:
 10772 ;;		_Write_RTC
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text73
 10777  00F268                     __ptext73:
 10778                           	opt stack 0
 10779  00F268                     _RtccWriteTime:
 10780                           	opt stack 23
 10781                           
 10782                           ;incstack = 0
 10783  00F268  0E00               	movlw	0
 10784  00F26A  6E06               	movwf	RtccWriteTime@wasAlrm,c
 10785  00F26C  EE20 F002          	lfsr	2,2
 10786  00F270  5001               	movf	RtccWriteTime@pTm,w,c
 10787  00F272  26D9               	addwf	fsr2l,f,c
 10788  00F274  5002               	movf	RtccWriteTime@pTm+1,w,c
 10789  00F276  22DA               	addwfc	fsr2h,f,c
 10790  00F278  0E5A               	movlw	90
 10791  00F27A  60DF               	cpfslt	indf2,c
 10792  00F27C  0012               	return	
 10793  00F27E  EE20 F001          	lfsr	2,1
 10794  00F282  5001               	movf	RtccWriteTime@pTm,w,c
 10795  00F284  26D9               	addwf	fsr2l,f,c
 10796  00F286  5002               	movf	RtccWriteTime@pTm+1,w,c
 10797  00F288  22DA               	addwfc	fsr2h,f,c
 10798  00F28A  0E5A               	movlw	90
 10799  00F28C  60DF               	cpfslt	indf2,c
 10800  00F28E  0012               	return	
 10801  00F290  EE20 F003          	lfsr	2,3
 10802  00F294  5001               	movf	RtccWriteTime@pTm,w,c
 10803  00F296  26D9               	addwf	fsr2l,f,c
 10804  00F298  5002               	movf	RtccWriteTime@pTm+1,w,c
 10805  00F29A  22DA               	addwfc	fsr2h,f,c
 10806  00F29C  0E24               	movlw	36
 10807  00F29E  64DF               	cpfsgt	indf2,c
 10808  00F2A0  D002               	goto	l3034
 10809  00F2A2  0012               	return	
 10810                           
 10811                           ;	Return value of _RtccWriteTime is never used
 10812  00F2A4  0012               	return	
 10813  00F2A6                     l3034:
 10814  00F2A6  EE20 F002          	lfsr	2,2
 10815  00F2AA  5001               	movf	RtccWriteTime@pTm,w,c
 10816  00F2AC  26D9               	addwf	fsr2l,f,c
 10817  00F2AE  5002               	movf	RtccWriteTime@pTm+1,w,c
 10818  00F2B0  22DA               	addwfc	fsr2h,f,c
 10819  00F2B2  50DF               	movf	indf2,w,c
 10820  00F2B4  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 10821  00F2B6  EE20 F001          	lfsr	2,1
 10822  00F2BA  5001               	movf	RtccWriteTime@pTm,w,c
 10823  00F2BC  26D9               	addwf	fsr2l,f,c
 10824  00F2BE  5002               	movf	RtccWriteTime@pTm+1,w,c
 10825  00F2C0  22DA               	addwfc	fsr2h,f,c
 10826  00F2C2  50DF               	movf	indf2,w,c
 10827  00F2C4  6E08               	movwf	RtccWriteTime@tempMinSec,c
 10828  00F2C6  5003               	movf	RtccWriteTime@di,w,c
 10829  00F2C8  B4D8               	btfsc	status,2,c
 10830  00F2CA  D002               	goto	l3040
 10831  00F2CC  9CF2               	bcf	intcon,6,c	;volatile
 10832  00F2CE  D000               	goto	l3040
 10833  00F2D0                     l3040:
 10834  00F2D0  0E00               	movlw	0
 10835  00F2D2  BB3F               	btfsc	63,5,b	;volatile
 10836  00F2D4  0E01               	movlw	1
 10837  00F2D6  6E07               	movwf	RtccWriteTime@wasWrEn,c
 10838  00F2D8  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10839  00F2DA  A4D8               	btfss	status,2,c
 10840  00F2DC  D003               	goto	l3044
 10841  00F2DE  EC09  F06F         	call	_RtccWrOn	;wreg free
 10842  00F2E2  D000               	goto	l3044
 10843  00F2E4                     l3044:
 10844  00F2E4  0E00               	movlw	0
 10845  00F2E6  BF3F               	btfsc	63,7,b	;volatile
 10846  00F2E8  0E01               	movlw	1
 10847  00F2EA  6E05               	movwf	RtccWriteTime@wasOn,c
 10848  00F2EC  5005               	movf	RtccWriteTime@wasOn,w,c
 10849  00F2EE  B4D8               	btfsc	status,2,c
 10850  00F2F0  D007               	goto	l3050
 10851  00F2F2  0E00               	movlw	0
 10852  00F2F4  BE91               	btfsc	3985,7,c	;volatile
 10853  00F2F6  0E01               	movlw	1
 10854  00F2F8  6E06               	movwf	RtccWriteTime@wasAlrm,c
 10855  00F2FA  010F               	movlb	15	; () banked
 10856  00F2FC  9F3F               	bcf	63,7,b	;volatile
 10857  00F2FE  D000               	goto	l3050
 10858  00F300                     l3050:
 10859  00F300  0EFC               	movlw	252
 10860  00F302  010F               	movlb	15	; () banked
 10861  00F304  173F               	andwf	63,f,b	;volatile
 10862  00F306  010F               	movlb	15	; () banked
 10863  00F308  813F               	bsf	63,0,b	;volatile
 10864                           
 10865                           ; BSR set to: 15
 10866  00F30A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 10867                           
 10868                           ; BSR set to: 15
 10869  00F30E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 10870                           
 10871                           ; BSR set to: 15
 10872  00F312  EE20 F003          	lfsr	2,3
 10873  00F316  5001               	movf	RtccWriteTime@pTm,w,c
 10874  00F318  26D9               	addwf	fsr2l,f,c
 10875  00F31A  5002               	movf	RtccWriteTime@pTm+1,w,c
 10876  00F31C  22DA               	addwfc	fsr2h,f,c
 10877  00F31E  50DF               	movf	indf2,w,c
 10878  00F320  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 10879                           
 10880                           ; BSR set to: 15
 10881  00F322  0EFC               	movlw	252
 10882  00F324  010F               	movlb	15	; () banked
 10883  00F326  173F               	andwf	63,f,b	;volatile
 10884                           
 10885                           ; BSR set to: 15
 10886  00F328  010F               	movlb	15	; () banked
 10887  00F32A  813F               	bsf	63,0,b	;volatile
 10888                           
 10889                           ; BSR set to: 15
 10890  00F32C  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 10891                           
 10892                           ; BSR set to: 15
 10893  00F330  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 10894                           
 10895                           ; BSR set to: 15
 10896  00F334  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 10897                           
 10898                           ; BSR set to: 15
 10899  00F338  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 10900                           
 10901                           ; BSR set to: 15
 10902  00F33C  5005               	movf	RtccWriteTime@wasOn,w,c
 10903  00F33E  B4D8               	btfsc	status,2,c
 10904  00F340  D00D               	goto	l3082
 10905                           
 10906                           ; BSR set to: 15
 10907  00F342  010F               	movlb	15	; () banked
 10908  00F344  8F3F               	bsf	63,7,b	;volatile
 10909                           
 10910                           ; BSR set to: 15
 10911  00F346  5006               	movf	RtccWriteTime@wasAlrm,w,c
 10912  00F348  B4D8               	btfsc	status,2,c
 10913  00F34A  D002               	goto	l3078
 10914                           
 10915                           ; BSR set to: 15
 10916  00F34C  8E91               	bsf	3985,7,c	;volatile
 10917  00F34E  D000               	goto	l3078
 10918  00F350                     l3078:
 10919                           
 10920                           ; BSR set to: 15
 10921  00F350  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10922  00F352  B4D8               	btfsc	status,2,c
 10923  00F354  D009               	goto	l3086
 10924                           
 10925                           ; BSR set to: 15
 10926  00F356  EC09  F06F         	call	_RtccWrOn	;wreg free
 10927  00F35A  D006               	goto	l3086
 10928  00F35C                     l3082:
 10929  00F35C  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10930  00F35E  A4D8               	btfss	status,2,c
 10931  00F360  D003               	goto	l3086
 10932  00F362  010F               	movlb	15	; () banked
 10933  00F364  9B3F               	bcf	63,5,b	;volatile
 10934                           
 10935                           ; BSR set to: 15
 10936  00F366  D000               	goto	l3086
 10937  00F368                     l3086:
 10938  00F368  5003               	movf	RtccWriteTime@di,w,c
 10939  00F36A  B4D8               	btfsc	status,2,c
 10940  00F36C  0012               	return	
 10941  00F36E  8CF2               	bsf	intcon,6,c	;volatile
 10942  00F370  0012               	return	
 10943                           
 10944                           ;	Return value of _RtccWriteTime is never used
 10945  00F372  0012               	return		;funcret
 10946  00F374                     __end_of_RtccWriteTime:
 10947                           	opt stack 0
 10948                           tosu	equ	0xFFF
 10949                           tosh	equ	0xFFE
 10950                           tosl	equ	0xFFD
 10951                           pclath	equ	0xFFA
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           indf0	equ	0xFEF
 10960                           postinc0	equ	0xFEE
 10961                           fsr0h	equ	0xFEA
 10962                           fsr0l	equ	0xFE9
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postinc1	equ	0xFE6
 10966                           postdec1	equ	0xFE5
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           plusw2	equ	0xFDB
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function _RtccWriteDate *****************
 10978 ;; Defined at:
 10979 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  pDt             2    0[COMRAM] PTR const struct .
 10982 ;;		 -> RtccDate(4), 
 10983 ;;  di              1    2[COMRAM] enum E7121
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  tempHourWDay    2   11[COMRAM] struct .
 10986 ;;  tempDayMonth    2    9[COMRAM] struct .
 10987 ;;  tempYear        2    6[COMRAM] struct .
 10988 ;;  wasWrEn         1    8[COMRAM] enum E7121
 10989 ;;  wasAlrm         1    5[COMRAM] enum E7121
 10990 ;;  wasOn           1    4[COMRAM] enum E7121
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      enum E7121
 10993 ;; Registers used:
 10994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11001 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11003 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11004 ;;Total ram usage:       13 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    1
 11007 ;; This function calls:
 11008 ;;		_RtccWrOn
 11009 ;; This function is called by:
 11010 ;;		_Write_RTC
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text74
 11015  00F5C8                     __ptext74:
 11016                           	opt stack 0
 11017  00F5C8                     _RtccWriteDate:
 11018                           	opt stack 23
 11019                           
 11020                           ;incstack = 0
 11021  00F5C8  0E00               	movlw	0
 11022  00F5CA  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11023  00F5CC  EE20 F002          	lfsr	2,2
 11024  00F5D0  5001               	movf	RtccWriteDate@pDt,w,c
 11025  00F5D2  26D9               	addwf	fsr2l,f,c
 11026  00F5D4  5002               	movf	RtccWriteDate@pDt+1,w,c
 11027  00F5D6  22DA               	addwfc	fsr2h,f,c
 11028  00F5D8  0E13               	movlw	19
 11029  00F5DA  60DF               	cpfslt	indf2,c
 11030  00F5DC  0012               	return	
 11031  00F5DE  EE20 F002          	lfsr	2,2
 11032  00F5E2  5001               	movf	RtccWriteDate@pDt,w,c
 11033  00F5E4  26D9               	addwf	fsr2l,f,c
 11034  00F5E6  5002               	movf	RtccWriteDate@pDt+1,w,c
 11035  00F5E8  22DA               	addwfc	fsr2h,f,c
 11036  00F5EA  50DF               	movf	indf2,w,c
 11037  00F5EC  B4D8               	btfsc	status,2,c
 11038  00F5EE  0012               	return	
 11039  00F5F0  EE20 F001          	lfsr	2,1
 11040  00F5F4  5001               	movf	RtccWriteDate@pDt,w,c
 11041  00F5F6  26D9               	addwf	fsr2l,f,c
 11042  00F5F8  5002               	movf	RtccWriteDate@pDt+1,w,c
 11043  00F5FA  22DA               	addwfc	fsr2h,f,c
 11044  00F5FC  0E32               	movlw	50
 11045  00F5FE  60DF               	cpfslt	indf2,c
 11046  00F600  0012               	return	
 11047  00F602  EE20 F001          	lfsr	2,1
 11048  00F606  5001               	movf	RtccWriteDate@pDt,w,c
 11049  00F608  26D9               	addwf	fsr2l,f,c
 11050  00F60A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11051  00F60C  22DA               	addwfc	fsr2h,f,c
 11052  00F60E  50DF               	movf	indf2,w,c
 11053  00F610  B4D8               	btfsc	status,2,c
 11054  00F612  0012               	return	
 11055  00F614  EE20 F003          	lfsr	2,3
 11056  00F618  5001               	movf	RtccWriteDate@pDt,w,c
 11057  00F61A  26D9               	addwf	fsr2l,f,c
 11058  00F61C  5002               	movf	RtccWriteDate@pDt+1,w,c
 11059  00F61E  22DA               	addwfc	fsr2h,f,c
 11060  00F620  0E99               	movlw	153
 11061  00F622  64DF               	cpfsgt	indf2,c
 11062  00F624  D002               	goto	l3102
 11063  00F626  0012               	return	
 11064                           
 11065                           ;	Return value of _RtccWriteDate is never used
 11066  00F628  0012               	return	
 11067  00F62A                     l3102:
 11068  00F62A  EE20 F003          	lfsr	2,3
 11069  00F62E  5001               	movf	RtccWriteDate@pDt,w,c
 11070  00F630  26D9               	addwf	fsr2l,f,c
 11071  00F632  5002               	movf	RtccWriteDate@pDt+1,w,c
 11072  00F634  22DA               	addwfc	fsr2h,f,c
 11073  00F636  50DF               	movf	indf2,w,c
 11074  00F638  6E07               	movwf	RtccWriteDate@tempYear,c
 11075  00F63A  EE20 F001          	lfsr	2,1
 11076  00F63E  5001               	movf	RtccWriteDate@pDt,w,c
 11077  00F640  26D9               	addwf	fsr2l,f,c
 11078  00F642  5002               	movf	RtccWriteDate@pDt+1,w,c
 11079  00F644  22DA               	addwfc	fsr2h,f,c
 11080  00F646  50DF               	movf	indf2,w,c
 11081  00F648  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11082  00F64A  EE20 F002          	lfsr	2,2
 11083  00F64E  5001               	movf	RtccWriteDate@pDt,w,c
 11084  00F650  26D9               	addwf	fsr2l,f,c
 11085  00F652  5002               	movf	RtccWriteDate@pDt+1,w,c
 11086  00F654  22DA               	addwfc	fsr2h,f,c
 11087  00F656  50DF               	movf	indf2,w,c
 11088  00F658  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11089  00F65A  5003               	movf	RtccWriteDate@di,w,c
 11090  00F65C  B4D8               	btfsc	status,2,c
 11091  00F65E  D002               	goto	l3108
 11092  00F660  9CF2               	bcf	intcon,6,c	;volatile
 11093  00F662  D000               	goto	l3108
 11094  00F664                     l3108:
 11095  00F664  0E00               	movlw	0
 11096  00F666  BB3F               	btfsc	63,5,b	;volatile
 11097  00F668  0E01               	movlw	1
 11098  00F66A  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11099  00F66C  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11100  00F66E  A4D8               	btfss	status,2,c
 11101  00F670  D003               	goto	l3112
 11102  00F672  EC09  F06F         	call	_RtccWrOn	;wreg free
 11103  00F676  D000               	goto	l3112
 11104  00F678                     l3112:
 11105  00F678  0E00               	movlw	0
 11106  00F67A  BF3F               	btfsc	63,7,b	;volatile
 11107  00F67C  0E01               	movlw	1
 11108  00F67E  6E05               	movwf	RtccWriteDate@wasOn,c
 11109  00F680  5005               	movf	RtccWriteDate@wasOn,w,c
 11110  00F682  B4D8               	btfsc	status,2,c
 11111  00F684  D007               	goto	l3118
 11112  00F686  0E00               	movlw	0
 11113  00F688  BE91               	btfsc	3985,7,c	;volatile
 11114  00F68A  0E01               	movlw	1
 11115  00F68C  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11116  00F68E  010F               	movlb	15	; () banked
 11117  00F690  9F3F               	bcf	63,7,b	;volatile
 11118  00F692  D000               	goto	l3118
 11119  00F694                     l3118:
 11120  00F694  0EFC               	movlw	252
 11121  00F696  010F               	movlb	15	; () banked
 11122  00F698  173F               	andwf	63,f,b	;volatile
 11123  00F69A  010F               	movlb	15	; () banked
 11124  00F69C  813F               	bsf	63,0,b	;volatile
 11125                           
 11126                           ; BSR set to: 15
 11127  00F69E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11128                           
 11129                           ; BSR set to: 15
 11130  00F6A2  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11131                           
 11132                           ; BSR set to: 15
 11133  00F6A6  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11134  00F6AA  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11135  00F6AE  50DF               	movf	indf2,w,c
 11136  00F6B0  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11137                           
 11138                           ; BSR set to: 15
 11139  00F6B2  0EFC               	movlw	252
 11140  00F6B4  010F               	movlb	15	; () banked
 11141  00F6B6  173F               	andwf	63,f,b	;volatile
 11142                           
 11143                           ; BSR set to: 15
 11144  00F6B8  0E03               	movlw	3
 11145  00F6BA  010F               	movlb	15	; () banked
 11146  00F6BC  133F               	iorwf	63,f,b	;volatile
 11147                           
 11148                           ; BSR set to: 15
 11149  00F6BE  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11150                           
 11151                           ; BSR set to: 15
 11152  00F6C2  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11153                           
 11154                           ; BSR set to: 15
 11155  00F6C6  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11156                           
 11157                           ; BSR set to: 15
 11158  00F6CA  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11159                           
 11160                           ; BSR set to: 15
 11161  00F6CE  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11162                           
 11163                           ; BSR set to: 15
 11164  00F6D2  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11165                           
 11166                           ; BSR set to: 15
 11167  00F6D6  5005               	movf	RtccWriteDate@wasOn,w,c
 11168  00F6D8  B4D8               	btfsc	status,2,c
 11169  00F6DA  D00D               	goto	l3154
 11170                           
 11171                           ; BSR set to: 15
 11172  00F6DC  010F               	movlb	15	; () banked
 11173  00F6DE  8F3F               	bsf	63,7,b	;volatile
 11174                           
 11175                           ; BSR set to: 15
 11176  00F6E0  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11177  00F6E2  B4D8               	btfsc	status,2,c
 11178  00F6E4  D002               	goto	l3150
 11179                           
 11180                           ; BSR set to: 15
 11181  00F6E6  8E91               	bsf	3985,7,c	;volatile
 11182  00F6E8  D000               	goto	l3150
 11183  00F6EA                     l3150:
 11184                           
 11185                           ; BSR set to: 15
 11186  00F6EA  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11187  00F6EC  B4D8               	btfsc	status,2,c
 11188  00F6EE  D009               	goto	l3158
 11189                           
 11190                           ; BSR set to: 15
 11191  00F6F0  EC09  F06F         	call	_RtccWrOn	;wreg free
 11192  00F6F4  D006               	goto	l3158
 11193  00F6F6                     l3154:
 11194  00F6F6  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11195  00F6F8  A4D8               	btfss	status,2,c
 11196  00F6FA  D003               	goto	l3158
 11197  00F6FC  010F               	movlb	15	; () banked
 11198  00F6FE  9B3F               	bcf	63,5,b	;volatile
 11199                           
 11200                           ; BSR set to: 15
 11201  00F700  D000               	goto	l3158
 11202  00F702                     l3158:
 11203  00F702  5003               	movf	RtccWriteDate@di,w,c
 11204  00F704  B4D8               	btfsc	status,2,c
 11205  00F706  0012               	return	
 11206  00F708  9CF2               	bcf	intcon,6,c	;volatile
 11207  00F70A  0012               	return	
 11208                           
 11209                           ;	Return value of _RtccWriteDate is never used
 11210  00F70C  0012               	return		;funcret
 11211  00F70E                     __end_of_RtccWriteDate:
 11212                           	opt stack 0
 11213                           tosu	equ	0xFFF
 11214                           tosh	equ	0xFFE
 11215                           tosl	equ	0xFFD
 11216                           pclath	equ	0xFFA
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           indf0	equ	0xFEF
 11225                           postinc0	equ	0xFEE
 11226                           fsr0h	equ	0xFEA
 11227                           fsr0l	equ	0xFE9
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           plusw2	equ	0xFDB
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _RtccWrOn *****************
 11243 ;; Defined at:
 11244 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;		None
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  data            2    0        unsigned int 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;		None               void
 11251 ;; Registers used:
 11252 ;;		wreg, status,2
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11262 ;;Total ram usage:        0 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_Write_RTC
 11268 ;;		_RtccWriteDate
 11269 ;;		_RtccWriteTime
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text75
 11274  00DE12                     __ptext75:
 11275                           	opt stack 0
 11276  00DE12                     _RtccWrOn:
 11277                           	opt stack 23
 11278                           
 11279                           ;incstack = 0
 11280  00DE12  9CF2               	bcf	intcon,6,c	;volatile
 11281  00DE14  0E55               	movlw	85
 11282  00DE16  6EA7               	movwf	4007,c	;volatile
 11283  00DE18  0EAA               	movlw	170
 11284  00DE1A  6EA7               	movwf	4007,c	;volatile
 11285  00DE1C  010F               	movlb	15	; () banked
 11286  00DE1E  8B3F               	bsf	63,5,b	;volatile
 11287                           
 11288                           ; BSR set to: 15
 11289  00DE20  8CF2               	bsf	intcon,6,c	;volatile
 11290                           
 11291                           ; BSR set to: 15
 11292  00DE22  0012               	return		;funcret
 11293  00DE24                     __end_of_RtccWrOn:
 11294                           	opt stack 0
 11295                           tosu	equ	0xFFF
 11296                           tosh	equ	0xFFE
 11297                           tosl	equ	0xFFD
 11298                           pclath	equ	0xFFA
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           intcon	equ	0xFF2
 11306                           indf0	equ	0xFEF
 11307                           postinc0	equ	0xFEE
 11308                           fsr0h	equ	0xFEA
 11309                           fsr0l	equ	0xFE9
 11310                           wreg	equ	0xFE8
 11311                           indf1	equ	0xFE7
 11312                           postinc1	equ	0xFE6
 11313                           postdec1	equ	0xFE5
 11314                           fsr1h	equ	0xFE2
 11315                           fsr1l	equ	0xFE1
 11316                           indf2	equ	0xFDF
 11317                           postinc2	equ	0xFDE
 11318                           postdec2	equ	0xFDD
 11319                           plusw2	equ	0xFDB
 11320                           fsr2h	equ	0xFDA
 11321                           fsr2l	equ	0xFD9
 11322                           status	equ	0xFD8
 11323                           
 11324 ;; *************** function _Read_RTC *****************
 11325 ;; Defined at:
 11326 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;		None
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;		None
 11331 ;; Return value:  Size  Location     Type
 11332 ;;		None               void
 11333 ;; Registers used:
 11334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11344 ;;Total ram usage:        0 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; Hardware stack levels required when called:    1
 11347 ;; This function calls:
 11348 ;;		_RtccReadDate
 11349 ;;		_RtccReadTime
 11350 ;; This function is called by:
 11351 ;;		_main
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text76
 11356  00F374                     __ptext76:
 11357                           	opt stack 0
 11358  00F374                     _Read_RTC:
 11359                           	opt stack 29
 11360                           
 11361                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
 11362                           
 11363                           ; BSR set to: 15
 11364                           ;incstack = 0
 11365  00F374  0E4E               	movlw	low _RtccTime
 11366  00F376  6E01               	movwf	RtccReadTime@pTm,c
 11367  00F378  0E00               	movlw	high _RtccTime
 11368  00F37A  6E02               	movwf	RtccReadTime@pTm+1,c
 11369  00F37C  EC7B  F072         	call	_RtccReadTime	;wreg free
 11370                           
 11371                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
 11372  00F380  504F               	movf	_RtccTime+1,w,c
 11373  00F382  0B0F               	andlw	15
 11374  00F384  0100               	movlb	0	; () banked
 11375  00F386  6FFE               	movwf	_segundo_u& (0+255),b
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 11379  00F388  384F               	swapf	_RtccTime+1,w,c
 11380  00F38A  0B0F               	andlw	15
 11381  00F38C  0B0F               	andlw	15
 11382  00F38E  6E5E               	movwf	_segundo_d,c
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
 11386  00F390  5050               	movf	_RtccTime+2,w,c
 11387  00F392  0B0F               	andlw	15
 11388  00F394  0100               	movlb	0	; () banked
 11389  00F396  6FFD               	movwf	_minuto_u& (0+255),b
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 11393  00F398  3850               	swapf	_RtccTime+2,w,c
 11394  00F39A  0B0F               	andlw	15
 11395  00F39C  0B0F               	andlw	15
 11396  00F39E  0100               	movlb	0	; () banked
 11397  00F3A0  6FFC               	movwf	_minuto_d& (0+255),b
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
 11401  00F3A2  5051               	movf	_RtccTime+3,w,c
 11402  00F3A4  0B0F               	andlw	15
 11403  00F3A6  0100               	movlb	0	; () banked
 11404  00F3A8  6FF9               	movwf	_hora_u& (0+255),b
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 11408  00F3AA  3851               	swapf	_RtccTime+3,w,c
 11409  00F3AC  0B0F               	andlw	15
 11410  00F3AE  0B0F               	andlw	15
 11411  00F3B0  0100               	movlb	0	; () banked
 11412  00F3B2  6FF8               	movwf	_hora_d& (0+255),b
 11413                           
 11414                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
 11415  00F3B4  0E4A               	movlw	low _RtccDate
 11416  00F3B6  6E01               	movwf	RtccReadDate@pDt,c
 11417  00F3B8  0E00               	movlw	high _RtccDate
 11418  00F3BA  6E02               	movwf	RtccReadDate@pDt+1,c
 11419  00F3BC  EC4B  F075         	call	_RtccReadDate	;wreg free
 11420                           
 11421                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
 11422  00F3C0  504B               	movf	_RtccDate+1,w,c
 11423  00F3C2  0B0F               	andlw	15
 11424  00F3C4  0100               	movlb	0	; () banked
 11425  00F3C6  6FF7               	movwf	_fecha_u& (0+255),b
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 11429  00F3C8  384B               	swapf	_RtccDate+1,w,c
 11430  00F3CA  0B0F               	andlw	15
 11431  00F3CC  0B0F               	andlw	15
 11432  00F3CE  0100               	movlb	0	; () banked
 11433  00F3D0  6FF6               	movwf	_fecha_d& (0+255),b
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
 11437  00F3D2  504C               	movf	_RtccDate+2,w,c
 11438  00F3D4  0B0F               	andlw	15
 11439  00F3D6  0100               	movlb	0	; () banked
 11440  00F3D8  6FFB               	movwf	_mes_u& (0+255),b
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 11444  00F3DA  384C               	swapf	_RtccDate+2,w,c
 11445  00F3DC  0B0F               	andlw	15
 11446  00F3DE  0B0F               	andlw	15
 11447  00F3E0  0100               	movlb	0	; () banked
 11448  00F3E2  6FFA               	movwf	_mes_d& (0+255),b
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
 11452  00F3E4  C04A  F0F5         	movff	_RtccDate,_dia_semana
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
 11456  00F3E8  504D               	movf	_RtccDate+3,w,c
 11457  00F3EA  0B0F               	andlw	15
 11458  00F3EC  0100               	movlb	0	; () banked
 11459  00F3EE  6FF4               	movwf	_anio_u& (0+255),b
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
 11463  00F3F0  384D               	swapf	_RtccDate+3,w,c
 11464  00F3F2  0B0F               	andlw	15
 11465  00F3F4  0B0F               	andlw	15
 11466  00F3F6  0100               	movlb	0	; () banked
 11467  00F3F8  6FF3               	movwf	_anio_d& (0+255),b
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
 11471  00F3FA  505E               	movf	_segundo_d,w,c
 11472  00F3FC  0D0A               	mullw	10
 11473  00F3FE  0100               	movlb	0	; () banked
 11474  00F400  51FE               	movf	_segundo_u& (0+255),w,b
 11475  00F402  24F3               	addwf	prodl,w,c
 11476  00F404  0100               	movlb	0	; () banked
 11477  00F406  6F97               	movwf	_segundo& (0+255),b
 11478  00F408  0100               	movlb	0	; () banked
 11479  00F40A  0E00               	movlw	0
 11480  00F40C  20F4               	addwfc	prodh,w,c
 11481  00F40E  0100               	movlb	0	; () banked
 11482  00F410  6F98               	movwf	(_segundo+1)& (0+255),b
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
 11486  00F412  0100               	movlb	0	; () banked
 11487  00F414  51FC               	movf	_minuto_d& (0+255),w,b
 11488  00F416  0D0A               	mullw	10
 11489  00F418  0100               	movlb	0	; () banked
 11490  00F41A  51FD               	movf	_minuto_u& (0+255),w,b
 11491  00F41C  24F3               	addwf	prodl,w,c
 11492  00F41E  0100               	movlb	0	; () banked
 11493  00F420  6FF1               	movwf	_minuto& (0+255),b
 11494  00F422  0100               	movlb	0	; () banked
 11495  00F424  0E00               	movlw	0
 11496  00F426  20F4               	addwfc	prodh,w,c
 11497  00F428  0100               	movlb	0	; () banked
 11498  00F42A  6FF2               	movwf	(_minuto+1)& (0+255),b
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
 11502  00F42C  0100               	movlb	0	; () banked
 11503  00F42E  51F8               	movf	_hora_d& (0+255),w,b
 11504  00F430  0D0A               	mullw	10
 11505  00F432  0100               	movlb	0	; () banked
 11506  00F434  51F9               	movf	_hora_u& (0+255),w,b
 11507  00F436  24F3               	addwf	prodl,w,c
 11508  00F438  0100               	movlb	0	; () banked
 11509  00F43A  6FEF               	movwf	_hora& (0+255),b
 11510  00F43C  0100               	movlb	0	; () banked
 11511  00F43E  0E00               	movlw	0
 11512  00F440  20F4               	addwfc	prodh,w,c
 11513  00F442  0100               	movlb	0	; () banked
 11514  00F444  6FF0               	movwf	(_hora+1)& (0+255),b
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
 11518  00F446  0100               	movlb	0	; () banked
 11519  00F448  51F6               	movf	_fecha_d& (0+255),w,b
 11520  00F44A  0D0A               	mullw	10
 11521  00F44C  0100               	movlb	0	; () banked
 11522  00F44E  51F7               	movf	_fecha_u& (0+255),w,b
 11523  00F450  24F3               	addwf	prodl,w,c
 11524  00F452  0100               	movlb	0	; () banked
 11525  00F454  6FED               	movwf	_dia& (0+255),b
 11526  00F456  0100               	movlb	0	; () banked
 11527  00F458  0E00               	movlw	0
 11528  00F45A  20F4               	addwfc	prodh,w,c
 11529  00F45C  0100               	movlb	0	; () banked
 11530  00F45E  6FEE               	movwf	(_dia+1)& (0+255),b
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
 11534  00F460  C0F5  F0E9         	movff	_dia_semana,_diasem
 11535  00F464  0100               	movlb	0	; () banked
 11536  00F466  6BEA               	clrf	(_diasem+1)& (0+255),b
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
 11540  00F468  0100               	movlb	0	; () banked
 11541  00F46A  51FA               	movf	_mes_d& (0+255),w,b
 11542  00F46C  0D0A               	mullw	10
 11543  00F46E  0100               	movlb	0	; () banked
 11544  00F470  51FB               	movf	_mes_u& (0+255),w,b
 11545  00F472  24F3               	addwf	prodl,w,c
 11546  00F474  6E5C               	movwf	_mes,c
 11547  00F476  0100               	movlb	0	; () banked
 11548  00F478  0E00               	movlw	0
 11549  00F47A  20F4               	addwfc	prodh,w,c
 11550  00F47C  6E5D               	movwf	_mes+1,c
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
 11554  00F47E  0100               	movlb	0	; () banked
 11555  00F480  51F3               	movf	_anio_d& (0+255),w,b
 11556  00F482  0D0A               	mullw	10
 11557  00F484  0100               	movlb	0	; () banked
 11558  00F486  51F4               	movf	_anio_u& (0+255),w,b
 11559  00F488  24F3               	addwf	prodl,w,c
 11560  00F48A  6E5A               	movwf	_anio,c
 11561  00F48C  0100               	movlb	0	; () banked
 11562  00F48E  0E00               	movlw	0
 11563  00F490  20F4               	addwfc	prodh,w,c
 11564  00F492  6E5B               	movwf	_anio+1,c
 11565                           
 11566                           ; BSR set to: 0
 11567  00F494  0012               	return		;funcret
 11568  00F496                     __end_of_Read_RTC:
 11569                           	opt stack 0
 11570                           tosu	equ	0xFFF
 11571                           tosh	equ	0xFFE
 11572                           tosl	equ	0xFFD
 11573                           pclath	equ	0xFFA
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           indf0	equ	0xFEF
 11582                           postinc0	equ	0xFEE
 11583                           fsr0h	equ	0xFEA
 11584                           fsr0l	equ	0xFE9
 11585                           wreg	equ	0xFE8
 11586                           indf1	equ	0xFE7
 11587                           postinc1	equ	0xFE6
 11588                           postdec1	equ	0xFE5
 11589                           fsr1h	equ	0xFE2
 11590                           fsr1l	equ	0xFE1
 11591                           indf2	equ	0xFDF
 11592                           postinc2	equ	0xFDE
 11593                           postdec2	equ	0xFDD
 11594                           plusw2	equ	0xFDB
 11595                           fsr2h	equ	0xFDA
 11596                           fsr2l	equ	0xFD9
 11597                           status	equ	0xFD8
 11598                           
 11599 ;; *************** function _RtccReadTime *****************
 11600 ;; Defined at:
 11601 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;  pTm             2    0[COMRAM] PTR struct .
 11604 ;;		 -> RtccTime(4), 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  rTD0            8   10[COMRAM] struct .
 11607 ;;  rTD1            8    2[COMRAM] struct .
 11608 ;; Return value:  Size  Location     Type
 11609 ;;		None               void
 11610 ;; Registers used:
 11611 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11618 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11620 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11621 ;;Total ram usage:       18 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_Read_RTC
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text77
 11631  00E4F6                     __ptext77:
 11632                           	opt stack 0
 11633  00E4F6                     _RtccReadTime:
 11634                           	opt stack 29
 11635  00E4F6  0EFC               	movlw	252
 11636  00E4F8  010F               	movlb	15	; () banked
 11637  00E4FA  173F               	andwf	63,f,b	;volatile
 11638                           
 11639                           ; BSR set to: 15
 11640  00E4FC  010F               	movlb	15	; () banked
 11641  00E4FE  813F               	bsf	63,0,b	;volatile
 11642                           
 11643                           ; BSR set to: 15
 11644  00E500  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 11645                           
 11646                           ; BSR set to: 15
 11647  00E504  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 11648                           
 11649                           ; BSR set to: 15
 11650  00E508  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 11651                           
 11652                           ; BSR set to: 15
 11653  00E50C  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 11654                           
 11655                           ; BSR set to: 15
 11656  00E510  0EFC               	movlw	252
 11657  00E512  010F               	movlb	15	; () banked
 11658  00E514  173F               	andwf	63,f,b	;volatile
 11659  00E516  010F               	movlb	15	; () banked
 11660  00E518  813F               	bsf	63,0,b	;volatile
 11661                           
 11662                           ; BSR set to: 15
 11663  00E51A  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 11664                           
 11665                           ; BSR set to: 15
 11666  00E51E  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 11667                           
 11668                           ; BSR set to: 15
 11669  00E522  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 11670                           
 11671                           ; BSR set to: 15
 11672  00E526  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 11673                           
 11674                           ; BSR set to: 15
 11675  00E52A  5009               	movf	RtccReadTime@rTD1+6,w,c
 11676  00E52C  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 11677  00E52E  A4D8               	btfss	status,2,c
 11678  00E530  D7E2               	goto	l3946
 11679                           
 11680                           ; BSR set to: 15
 11681                           
 11682                           ; BSR set to: 15
 11683  00E532  EE20 F003          	lfsr	2,3
 11684  00E536  5001               	movf	RtccReadTime@pTm,w,c
 11685  00E538  26D9               	addwf	fsr2l,f,c
 11686  00E53A  5002               	movf	RtccReadTime@pTm+1,w,c
 11687  00E53C  22DA               	addwfc	fsr2h,f,c
 11688  00E53E  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 11689  00E542  EE20 F002          	lfsr	2,2
 11690  00E546  5001               	movf	RtccReadTime@pTm,w,c
 11691  00E548  26D9               	addwf	fsr2l,f,c
 11692  00E54A  5002               	movf	RtccReadTime@pTm+1,w,c
 11693  00E54C  22DA               	addwfc	fsr2h,f,c
 11694  00E54E  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 11695  00E552  EE20 F001          	lfsr	2,1
 11696  00E556  5001               	movf	RtccReadTime@pTm,w,c
 11697  00E558  26D9               	addwf	fsr2l,f,c
 11698  00E55A  5002               	movf	RtccReadTime@pTm+1,w,c
 11699  00E55C  22DA               	addwfc	fsr2h,f,c
 11700  00E55E  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 11701                           
 11702                           ; BSR set to: 15
 11703  00E562  0012               	return		;funcret
 11704  00E564                     __end_of_RtccReadTime:
 11705                           	opt stack 0
 11706                           tosu	equ	0xFFF
 11707                           tosh	equ	0xFFE
 11708                           tosl	equ	0xFFD
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           indf0	equ	0xFEF
 11718                           postinc0	equ	0xFEE
 11719                           fsr0h	equ	0xFEA
 11720                           fsr0l	equ	0xFE9
 11721                           wreg	equ	0xFE8
 11722                           indf1	equ	0xFE7
 11723                           postinc1	equ	0xFE6
 11724                           postdec1	equ	0xFE5
 11725                           fsr1h	equ	0xFE2
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           plusw2	equ	0xFDB
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735 ;; *************** function _RtccReadDate *****************
 11736 ;; Defined at:
 11737 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;  pDt             2    0[COMRAM] PTR struct .
 11740 ;;		 -> RtccDate(4), 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  rTD0            8   10[COMRAM] struct .
 11743 ;;  rTD1            8    2[COMRAM] struct .
 11744 ;; Return value:  Size  Location     Type
 11745 ;;		None               void
 11746 ;; Registers used:
 11747 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11754 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11756 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11757 ;;Total ram usage:       18 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; This function calls:
 11760 ;;		Nothing
 11761 ;; This function is called by:
 11762 ;;		_Read_RTC
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           	psect	text78
 11767  00EA96                     __ptext78:
 11768                           	opt stack 0
 11769  00EA96                     _RtccReadDate:
 11770                           	opt stack 29
 11771  00EA96  0EFC               	movlw	252
 11772  00EA98  010F               	movlb	15	; () banked
 11773  00EA9A  173F               	andwf	63,f,b	;volatile
 11774  00EA9C  0E03               	movlw	3
 11775  00EA9E  010F               	movlb	15	; () banked
 11776  00EAA0  133F               	iorwf	63,f,b	;volatile
 11777                           
 11778                           ; BSR set to: 15
 11779  00EAA2  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 11780                           
 11781                           ; BSR set to: 15
 11782  00EAA6  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 11783                           
 11784                           ; BSR set to: 15
 11785  00EAAA  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 11786                           
 11787                           ; BSR set to: 15
 11788  00EAAE  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 11789                           
 11790                           ; BSR set to: 15
 11791  00EAB2  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 11792                           
 11793                           ; BSR set to: 15
 11794  00EAB6  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 11795  00EABA  0EFC               	movlw	252
 11796  00EABC  010F               	movlb	15	; () banked
 11797  00EABE  173F               	andwf	63,f,b	;volatile
 11798  00EAC0  0E03               	movlw	3
 11799  00EAC2  010F               	movlb	15	; () banked
 11800  00EAC4  133F               	iorwf	63,f,b	;volatile
 11801                           
 11802                           ; BSR set to: 15
 11803  00EAC6  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 11804                           
 11805                           ; BSR set to: 15
 11806  00EACA  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 11807                           
 11808                           ; BSR set to: 15
 11809  00EACE  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 11810                           
 11811                           ; BSR set to: 15
 11812  00EAD2  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 11813                           
 11814                           ; BSR set to: 15
 11815  00EAD6  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 11816                           
 11817                           ; BSR set to: 15
 11818  00EADA  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 11819  00EADE  5005               	movf	RtccReadDate@rTD1+2,w,c
 11820  00EAE0  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 11821  00EAE2  A4D8               	btfss	status,2,c
 11822  00EAE4  D7D8               	goto	l3972
 11823                           
 11824                           ; BSR set to: 15
 11825                           
 11826                           ; BSR set to: 15
 11827  00EAE6  EE20 F001          	lfsr	2,1
 11828  00EAEA  5001               	movf	RtccReadDate@pDt,w,c
 11829  00EAEC  26D9               	addwf	fsr2l,f,c
 11830  00EAEE  5002               	movf	RtccReadDate@pDt+1,w,c
 11831  00EAF0  22DA               	addwfc	fsr2h,f,c
 11832  00EAF2  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 11833  00EAF6  EE20 F002          	lfsr	2,2
 11834  00EAFA  5001               	movf	RtccReadDate@pDt,w,c
 11835  00EAFC  26D9               	addwf	fsr2l,f,c
 11836  00EAFE  5002               	movf	RtccReadDate@pDt+1,w,c
 11837  00EB00  22DA               	addwfc	fsr2h,f,c
 11838  00EB02  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 11839                           
 11840                           ; BSR set to: 15
 11841  00EB06  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 11842  00EB0A  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 11843  00EB0E  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 11844                           
 11845                           ; BSR set to: 15
 11846  00EB12  EE20 F003          	lfsr	2,3
 11847  00EB16  5001               	movf	RtccReadDate@pDt,w,c
 11848  00EB18  26D9               	addwf	fsr2l,f,c
 11849  00EB1A  5002               	movf	RtccReadDate@pDt+1,w,c
 11850  00EB1C  22DA               	addwfc	fsr2h,f,c
 11851  00EB1E  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 11852                           
 11853                           ; BSR set to: 15
 11854  00EB22  0012               	return		;funcret
 11855  00EB24                     __end_of_RtccReadDate:
 11856                           	opt stack 0
 11857                           tosu	equ	0xFFF
 11858                           tosh	equ	0xFFE
 11859                           tosl	equ	0xFFD
 11860                           pclath	equ	0xFFA
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           indf0	equ	0xFEF
 11869                           postinc0	equ	0xFEE
 11870                           fsr0h	equ	0xFEA
 11871                           fsr0l	equ	0xFE9
 11872                           wreg	equ	0xFE8
 11873                           indf1	equ	0xFE7
 11874                           postinc1	equ	0xFE6
 11875                           postdec1	equ	0xFE5
 11876                           fsr1h	equ	0xFE2
 11877                           fsr1l	equ	0xFE1
 11878                           indf2	equ	0xFDF
 11879                           postinc2	equ	0xFDE
 11880                           postdec2	equ	0xFDD
 11881                           plusw2	equ	0xFDB
 11882                           fsr2h	equ	0xFDA
 11883                           fsr2l	equ	0xFD9
 11884                           status	equ	0xFD8
 11885                           tosu	equ	0xFFF
 11886                           tosh	equ	0xFFE
 11887                           tosl	equ	0xFFD
 11888                           pclath	equ	0xFFA
 11889                           tblptru	equ	0xFF8
 11890                           tblptrh	equ	0xFF7
 11891                           tblptrl	equ	0xFF6
 11892                           tablat	equ	0xFF5
 11893                           prodh	equ	0xFF4
 11894                           prodl	equ	0xFF3
 11895                           intcon	equ	0xFF2
 11896                           indf0	equ	0xFEF
 11897                           postinc0	equ	0xFEE
 11898                           fsr0h	equ	0xFEA
 11899                           fsr0l	equ	0xFE9
 11900                           wreg	equ	0xFE8
 11901                           indf1	equ	0xFE7
 11902                           postinc1	equ	0xFE6
 11903                           postdec1	equ	0xFE5
 11904                           fsr1h	equ	0xFE2
 11905                           fsr1l	equ	0xFE1
 11906                           indf2	equ	0xFDF
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           plusw2	equ	0xFDB
 11910                           fsr2h	equ	0xFDA
 11911                           fsr2l	equ	0xFD9
 11912                           status	equ	0xFD8
 11913                           
 11914                           	psect	text79
 11915  000000                     __ptext79:
 11916                           	opt stack 0
 11917                           tosu	equ	0xFFF
 11918                           tosh	equ	0xFFE
 11919                           tosl	equ	0xFFD
 11920                           pclath	equ	0xFFA
 11921                           tblptru	equ	0xFF8
 11922                           tblptrh	equ	0xFF7
 11923                           tblptrl	equ	0xFF6
 11924                           tablat	equ	0xFF5
 11925                           prodh	equ	0xFF4
 11926                           prodl	equ	0xFF3
 11927                           intcon	equ	0xFF2
 11928                           indf0	equ	0xFEF
 11929                           postinc0	equ	0xFEE
 11930                           fsr0h	equ	0xFEA
 11931                           fsr0l	equ	0xFE9
 11932                           wreg	equ	0xFE8
 11933                           indf1	equ	0xFE7
 11934                           postinc1	equ	0xFE6
 11935                           postdec1	equ	0xFE5
 11936                           fsr1h	equ	0xFE2
 11937                           fsr1l	equ	0xFE1
 11938                           indf2	equ	0xFDF
 11939                           postinc2	equ	0xFDE
 11940                           postdec2	equ	0xFDD
 11941                           plusw2	equ	0xFDB
 11942                           fsr2h	equ	0xFDA
 11943                           fsr2l	equ	0xFD9
 11944                           status	equ	0xFD8
 11945                           
 11946                           	psect	rparam
 11947  0000                     tosu	equ	0xFFF
 11948                           tosh	equ	0xFFE
 11949                           tosl	equ	0xFFD
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           indf0	equ	0xFEF
 11959                           postinc0	equ	0xFEE
 11960                           fsr0h	equ	0xFEA
 11961                           fsr0l	equ	0xFE9
 11962                           wreg	equ	0xFE8
 11963                           indf1	equ	0xFE7
 11964                           postinc1	equ	0xFE6
 11965                           postdec1	equ	0xFE5
 11966                           fsr1h	equ	0xFE2
 11967                           fsr1l	equ	0xFE1
 11968                           indf2	equ	0xFDF
 11969                           postinc2	equ	0xFDE
 11970                           postdec2	equ	0xFDD
 11971                           plusw2	equ	0xFDB
 11972                           fsr2h	equ	0xFDA
 11973                           fsr2l	equ	0xFD9
 11974                           status	equ	0xFD8


Data Sizes:
    Strings     325
    Constant    14
    Data        21
    BSS         167
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     68      95
    BANK0           160      0     159
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), comando(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_29(CODE[18]), STR_28(CODE[5]), STR_24(CODE[5]), STR_23(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    confirmar_nuevo_password@confirmar	PTR int  size(2) Largest target is 2
		 -> actualizar_password@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> menu_cambiar_password@verifica(COMRAM[2]), 

    guardar_elemento_arreglo@arreglo	PTR unsigned char  size(2) Largest target is 7
		 -> temporal(BANK0[7]), new_password(BANK0[7]), current_password(BANK0[7]), 

    guardar_elemento_arreglo@tamanio	PTR int  size(2) Largest target is 2
		 -> tamanio_new_password(BANK0[2]), tamanio_password(COMRAM[2]), 

    actualizar_minutos@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualizar_hora@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_dia@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_elemento@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@dato_fecha	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@doit	PTR FTN(PTR int ,const int ,)void  size(2) Largest target is 0
		 -> actualizar_minutos(), actualizar_hora(), actualiza_dia(), actualiza_elemento(), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), 
		 -> tamanio_anio(BANK0[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> guardar_elemento@valor(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), 
		 -> imprimir_tecla@aux(COMRAM[20]), STR_22(CODE[9]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[23]), STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), 
		 -> STR_15(CODE[22]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), 
		 -> STR_7(CODE[11]), STR_6(CODE[17]), STR_5(CODE[26]), STR_4(CODE[4]), 
		 -> STR_3(CODE[3]), buffer2(BANK0[20]), 

    funcion_pulsador_B	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), desactivar_alarma(), 

    funcion_pulsador_D	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), borrar_hora(), borrar_minutos(), 
		 -> borrar_dia(), borrar_mes(), borrar_anio(), 

    puntero_funcion	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), cambiar_hora(), cambiar_minutos(), cambiar_dia(), 
		 -> cambiar_mes(), cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), 
		 -> mostrar_guardar_nuevo_password(), mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    funcion_pulsador_C	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), cancelar_cambio_password(), cancelar_cambio_hora(), 
		 -> cancelar_cambio_fecha(), 

    mostrar_titulo_menu@titulo_menu	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), 
		 -> STR_15(CODE[22]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), 

    caratula$650	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_22(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _menu_cambiar_password->_clear_display
    _menu_cambiar_password->_mostrar_titulo_menu
    _menu_cambiar_horario->_clear_display
    _menu_cambiar_horario->_mostrar_titulo_menu
    _menu_cambiar_fecha->_clear_display
    _menu_cambiar_fecha->_mostrar_titulo_menu
    _mostrar_titulo_menu->_lcd_putrs
    _mensaje_alarma_activada->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _guardar_password_temporal->_guardar_elemento_arreglo
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _guardar_nuevo_password->_guardar_elemento_arreglo
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _actualizar_password->_confirmar_nuevo_password
    _confirmar_nuevo_password->_guardar_current_password
    _guardar_current_password->_guardar_elemento_arreglo
    _cambiar_minutos->_guardar_elemento
    _cambiar_mes->_guardar_elemento
    _cambiar_hora->_guardar_elemento
    _cambiar_dia->_guardar_elemento
    _obtener_dia_mes->___awmod
    _cambiar_anio->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _menu_ingresar_password->_clear_display
    _clear_display->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  421703
                                             66 COMRAM     2     2      0
                           _Read_RTC
                              _Setup
              _activar_sonido_alarma
                               _atoi
                           _caratula
           _desactivar_sonido_alarma
                _inicializar_teclado
                       _leer_teclado
            _mensaje_alarma_activada
                 _menu_cambiar_fecha
               _menu_cambiar_horario
              _menu_cambiar_password
             _menu_ingresar_password
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_password                                2     2      0   11551
                                             12 COMRAM     2     2      0
                      _clear_display
                _mostrar_titulo_menu
                  _verficar_password
 ---------------------------------------------------------------------------------
 (2) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_horario                                 0     0      0   11304
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_fecha                                   0     0      0   11304
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (2) _mostrar_titulo_menu                                  2     0      2    5577
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _mensaje_alarma_activada                              0     0      0    5043
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2  356276
                                             61 COMRAM     5     3      2
                   Absolute function *
                        _borrar_anio *
                         _borrar_dia *
                        _borrar_hora *
                         _borrar_mes *
                     _borrar_minutos *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
              _cancelar_cambio_fecha *
               _cancelar_cambio_hora *
           _cancelar_cambio_password *
      _confirmar_actualizar_password *
                  _desactivar_alarma *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
                  _restaurar_comando *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             2     0      2  167866
                                             59 COMRAM     2     0      2
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   10858
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   10858
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   10858
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3397
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3375
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   11303
                                             56 COMRAM     1     1      0
                _actualizar_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    6767
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _actualizar_password                                  5     5      0    1197
                                             15 COMRAM     5     5      0
           _confirmar_nuevo_password
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _confirmar_nuevo_password                             7     4      3    1036
                                              8 COMRAM     7     4      3
           _guardar_current_password
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_arreglo                             7     2      5     730
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      4     4      0   23966
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          4     4      0   23966
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         3     3      0   23942
                                             52 COMRAM     3     3      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0   24494
                                             52 COMRAM     3     3      0
                   _guardar_elemento
                    _obtener_dia_mes
 ---------------------------------------------------------------------------------
 (4) _obtener_dia_mes                                      2     2      0     552
                                              6 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         4     4      0   23966
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                    17     7     10   23897
                                             35 COMRAM    17     7     10
                      _actualiza_dia *
                 _actualiza_elemento *
                    _actualizar_hora *
                 _actualizar_minutos *
                    _convertir_a_int
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _convertir_a_int                                      4     0      4    1011
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _actualizar_minutos                                   4     0      4    2407
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (5) _actualizar_hora                                      4     0      4    4898
                                             21 COMRAM     4     0      4
                          _Write_RTC
                 _actualiza_elemento
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _actualiza_dia                                        4     0      4    2621
                                             21 COMRAM     4     0      4
                 _actualiza_elemento
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _actualiza_elemento                                   4     0      4    2577
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _desactivar_alarma                                    0     0      0   17257
                      _clear_display
      _inicializar_intentos_fallidos
             _menu_ingresar_password
 ---------------------------------------------------------------------------------
 (1) _menu_ingresar_password                               3     3      0   11530
                                             12 COMRAM     3     3      0
                      _clear_display
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        2     0      2    5727
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_password                             0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_hora                                 0     0      0       0
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_fecha                                0     0      0       0
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_minutos                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_mes                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_hora                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_dia                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_anio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializar_teclado                                  0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _desactivar_sonido_alarma                             0     0      0       0
      _inicializar_intentos_fallidos
 ---------------------------------------------------------------------------------
 (3) _inicializar_intentos_fallidos                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9094
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3295
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    3390
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2321
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1653
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _activar_sonido_alarma                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (7) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (8) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _activar_sonido_alarma
   _atoi
     ___wmul
     _isdigit
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _desactivar_sonido_alarma
     _inicializar_intentos_fallidos
   _inicializar_teclado
     _restaurar_comando
   _leer_teclado
     Absolute function(Fake) *
     _borrar_anio *
     _borrar_dia *
     _borrar_hora *
     _borrar_mes *
     _borrar_minutos *
     _cambiar_anio *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_dia *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _obtener_dia_mes
         ___awmod
     _cambiar_hora *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_mes *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_minutos *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cancelar_cambio_fecha *
       _inicializar_fecha
       _restaurar_comando
     _cancelar_cambio_hora *
       _inicializar_hora
       _restaurar_comando
     _cancelar_cambio_password *
       _restaurar_comando
     _confirmar_actualizar_password *
       _actualizar_password
         _confirmar_nuevo_password
           _guardar_current_password
             _guardar_elemento_arreglo
         _restaurar_comando
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _desactivar_alarma *
       _clear_display
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _inicializar_intentos_fallidos
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
     _guardar_tecla_presionada *
       Absolute function(Fake) *
       _cambiar_anio *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_dia *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _obtener_dia_mes
           ___awmod
       _cambiar_hora *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_mes *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_minutos *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _confirmar_actualizar_password *
         _actualizar_password
           _confirmar_nuevo_password
             _guardar_current_password
               _guardar_elemento_arreglo
           _restaurar_comando
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _restaurar_comando *
   _mensaje_alarma_activada
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _menu_cambiar_fecha
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_horario
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_password
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _verficar_password
   _menu_ingresar_password
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      10       8        6.3%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9F       5       99.4%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     44      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E       6        0.0%
DATA                 0      0     10E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Sep 23 00:55:40 2016

                    cambiar_hora@validacion 0035                           _verficar_password E7A2  
                                         _a 007B                                           _b 007F  
                                         _c 0081                                           _i 0089  
                                         _j 008F                                           _k 0091  
                            ?_lcd_send_byte 0003                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                              ?_borrar_anio 0001                  ??_mostrar_guardar_password 0039  
                              ?_borrar_hora 0001                                         l410 E494  
                                       l331 E1F0                                         l332 E1F2  
                                       l422 E9E4                                         l423 E9E0  
                                       l441 F7C4                                         l433 F740  
                                       l418 E9BC                                         l450 F80A  
                                       l442 F7C0                                         l434 F73C  
                                       l427 EA0A                                         l419 E9B8  
                                       l453 F828                                         l445 F7E6  
                                       l437 F782                                         l454 F824  
                                       l446 F7E2                                         l438 F77E  
                                       l449 F80E                                         l458 F84A  
                                       l808 E7A0                                         l595 FBA8  
                                       l836 E818                                         l846 EBB0  
                                       l886 FCB2                        actualizar_password@j 0013  
                                       _dia 00ED                                         _day 006C  
                                       _key 0049                                         _mes 005C  
                              ___awmod@sign 0006                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                    __size_of_actualizar_hora 0022  
                               lcd_gotoxy@x 0006                                 lcd_gotoxy@y 0005  
         __end_of_guardar_password_temporal DF20                              _borrar_minutos DE5A  
                  _desactivar_sonido_alarma DE6C            __end_of_cancelar_cambio_password E04A  
                                      l3102 F62A                                        l3112 F678  
                                      l3040 F2D0                                        l3050 F300  
                                      l3034 F2A6                                        l3202 EC3C  
                                      l3210 E00E                                        l1186 EEF0  
                                      l3108 F664                                        l3044 F2E4  
                                      l3212 E014                                        l3150 F6EA  
                                      l3118 F694                                        l4030 EFC2  
                                      l3310 EEB8                                        l4110 F106  
                                      l3320 E298                                        l3312 EEBE  
                                      l3304 EE6E                                        l4120 F152  
                                      l3154 F6F6                                        l3082 F35C  
                                      l3170 EBC8                                        l3322 E2A4  
                                      l3330 E2C8                                        l3402 FBE6  
                                      l1563 E42C                                        l3324 E2B0  
                                      l3500 FE6A                                        l3420 FC84  
                                      l3404 FBFC                                        l4028 EFB8  
                                      l3308 EE82                                        l4108 F0F0  
                                      l1573 E322                                        l3158 F702  
                                      l3086 F368                                        l3078 F350  
                                      l3182 EBF0                                        l3326 E2BC  
                                      l3350 E3FA                                        l3502 FE76  
                                      l4118 F148                                        l3184 EBFA  
                                      l3176 EBDA                                        l3360 E420  
                                      l3352 E402                                        l3432 FCE0  
                                      l3416 FC80                                        l3504 FE92  
                                      l3408 FC1A                                        l3600 E8E8  
                                      l4072 F064                                        l4064 F024  
                                      l3194 EC20                                        l3186 EC02  
                                      l3370 E2F8                                        l3450 FD32  
                                      l3442 FD0A                                        l3602 E8F4  
                                      l3348 E3F0                                        l3372 E300  
                                      l3460 FD72                                        l3436 FCFA  
                                      l3292 EE28                                        l3700 FB90  
                                      l3268 E748                                        l3540 EB86  
                                      l4236 F852                                        l4244 F4A8  
                                      l3198 EC2C                                        l3382 E32E  
                                      l3278 DFB4                                        l3470 FD9E  
                                      l3462 FD7C                                        l3446 FD2E  
                                      l3438 FCFE                                        l3390 FBB4  
                                      l3294 EE2E                                        l3542 EB8C  
                                      l3630 ED18                                        l3614 E23C  
                                      l4262 F50E                                        l4254 F4DE  
                                      l3376 E316                                        l3368 E2EE  
                                      l3480 FDD0                                        l3472 FDA6  
                                      l3456 FD4E                                        l3720 F1CE  
                                      l3544 EB9C                                        l3536 EB54  
                                      l3640 ED50                                        l4088 EC9C  
                                      l4280 F55E                                        l3802 DE38  
                                      l3386 E358                                        l3570 EA6E  
                                      l3562 EA46                                        l3554 EA2A  
                                      l3730 F202                                        l3634 ED2C  
                                      l4282 F564                                        l4290 F58A  
                                      l4266 F520                                        l4258 F4F0  
                                      l3492 FE10                                        l3396 FBCE  
                                      l3564 EA50                                        l4276 F552  
                                      l4292 F5B6                                        l3494 FE16  
                                      l3486 FDF2                                        l3478 FDC8  
                                      l3398 FBDC                                        l3566 EA58  
                                      l3574 EA7A                                        l3558 EA38  
                                      l3734 F232                                        l3718 F1C2  
                                      l3654 E462                                        l3830 E84A  
                                      l3822 E59C                                        l3902 E7EE  
                                      l4278 F558                                        l3592 E8A8  
                                      l3736 F24E                                        l3728 F1F6  
                                      l3904 E7F4                                        l3674 FA84  
                                      l3578 EA8A                                        l3738 F25A  
                                      l3818 E58E                                        l3850 E672  
                                      l3906 E804                                        l3596 E8D2  
                                      l3772 EE16                                        l3764 EDEA  
                                      l3684 FB0C                                        l3836 E860  
                                      l3598 E8D8                                        l3686 FB1E  
                                      l3854 E680                                        l3864 E93A  
                                      l3768 EDFE                                        l3696 FB7C  
                                      l3946 E4F6                                        l3882 E966  
                                      l3874 E952                                        l3972 EA96  
                                      l2996 DE26                                        l3868 E942  
                                      l3898 E7BC                                        STR_1 FFB6  
                                      STR_2 FFC5                                        STR_3 FFF1  
                                      STR_4 FFED                                        STR_5 FECC  
                                      STR_6 FFA5                                        STR_7 FFD4  
                                      STR_8 FFE8                                        STR_9 FFE8  
                           _guardar_comando E436                           ?_inicializar_hora 0001  
                                      u3200 E4C0                                        u3201 E4BC  
                                      u3130 E3A4                                        u3210 E4C2  
                                      u3131 E3A0                                        u3140 E3A6  
                                      u2440 E34E                                        u2450 E378  
                                      u3090 EDB0                                        u1910 E6DA  
                                      u2447 E344                                        u2457 E36E  
                                      u1930 E6F4                                        u3338 E9A0  
                                      u1908 E6C4                                        u3700 F4C2  
                                      u1950 E710                                        u2670 EB3A  
                                      u1928 E6DC                                        u2840 ED10  
                                      u3368 E9C8                                        u1890 E6C2  
                                      u1948 E6F6                                        u3398 E9F2  
                                      u3638 F7F2                                        u3558 F768  
                                      u3750 F580                                        u3807 EE04  
                                      u1968 E712                                        u2928 FAF8  
                                      u3817 DE3A                                        u2890 FAA0  
                                      u3827 DE28                                        u3588 F7AA  
                                      u3688 F834                                        u3777 F858  
                                      u3787 FB12                                        u3797 FB96  
                          ?_lcd_send_nibble 0001                                        _anio 005A  
                                      _flag 02F8                                        _atoi EE26  
                        ??_inicializar_hora 0001                                        _main F496  
                                      _hora 00EF                                        _hour 006F  
                                      _year 0078                                        fsr0h 000FEA  
                                      indf0 000FEF                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        indf1 000FE7  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                               __CFG_T1DIG$ON 000000  
                actualizar_minutos@elemento 0016                                        prodh 000FF4  
                                      prodl 000FF3                                        start 0000  
                             __CFG_IESO$OFF 000000                            RtccReadDate@rTD0 000B  
                          RtccReadDate@rTD1 0003                   __end_of_verficar_password E81A  
                __end_of_actualiza_elemento DE98             __end_of_mensaje_alarma_activada E1D4  
                              ___param_bank 000010                             RtccReadTime@pTm 0001  
                      __size_of_cambiar_dia 005A                        __size_of_cambiar_mes 006E  
                         _inicializar_fecha E178                                 _Delay1KTCYx DE36  
                             __CFG_PLLDIV$1 000000                                       ?_atoi 0007  
                                     ?_main 0001                             __end_of___awdiv EC48  
                        ?_inicializar_fecha 0001                                       STR_10 FFE8  
                                     STR_11 FFE8                                       STR_20 FF94  
                                     STR_12 FF3A                                       STR_21 FF83  
                                     STR_13 FF71                                       STR_22 FFDF  
                                     STR_14 FF5F                                       STR_23 FFE8  
                                     STR_15 FEFD                                       STR_24 FFE8  
                                     STR_16 FF27                                       STR_25 FFF4  
                                     STR_17 FEB1                                       STR_26 FFF4  
                                     STR_18 FF13                                       STR_27 FF92  
                                     STR_19 FEE6                                       STR_28 FFE8  
                           __end_of___awmod EA96                                       STR_29 FF4D  
                     __size_of_Delay100TCYx 0012                            _guardar_elemento F9EA  
                           ___awdiv@divisor 0003                             __end_of___lwdiv E436  
                           __end_of___lwmod E32C                           _restaurar_comando DEB0  
                           ___awdiv@counter 0005                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
           ??_confirmar_actualizar_password 0039                               ?_leer_teclado 003E  
              __size_of_inicializar_teclado 002A                          ?_restaurar_comando 0001  
                            __CFG_FCMEN$OFF 000000                        _cancelar_cambio_hora DDA2  
                    __end_of_borrar_minutos DE6C                                       _Setup E24C  
                       ??_inicializar_fecha 0001                              _ocultar_teclas 0093  
                           __end_of_dpowers FEAD                                       _mes_d 00FA  
                                     _mes_u 00FB                             __end_of_isdigit DFBE  
                                     _month 0075                                       atoi@a 000C  
                                     atoi@s 0007                              __pbitbssCOMRAM 02F8  
    __end_of_mostrar_guardar_nuevo_password E14C     __size_of_mostrar_guardar_nuevo_password 002C  
            _mostrar_guardar_nuevo_password E120                                       pclath 000FFA  
                                     tablat 000FF5                           ??_convertir_a_int 0012  
                       ??_restaurar_comando 0001                                       plusw2 000FDB  
                              lcd_putrs@ptr 0009                                       status 000FD8  
                           __end_of_sprintf FEA2                           validar_password@i 0003  
                   __CFG_DSWDTOSC$INTOSCREF 000000                       __end_of_actualiza_dia DF3E  
                           __initialization E5D2                                _Delay100TCYx DE24  
                 __end_of_inicializar_fecha E1A6                                __end_of_atoi EEFA  
                              __end_of_main F5C8                             ??_lcd_send_byte 0004  
                __end_of_actualizar_minutos DF9C                            RtccReadTime@rTD0 000B  
                          RtccReadTime@rTD1 0003                            __end_of_Read_RTC F496  
                  _guardar_current_password DECC                   __size_of_ingresar_comando 000A  
                 __end_of_restaurar_comando DECC                           cambiar_anio@tecla 0037  
                     __size_of_cambiar_anio 007C                       __size_of_cambiar_hora 0060  
                                    ??_atoi 0009                                      ??_main 0043  
                             __activetblptr 000002                              ??_leer_teclado 0040  
                   __end_of_guardar_comando E496            __end_of_guardar_elemento_arreglo E7A2  
                          __end_of_RtccWrOn DE24                       ?_cancelar_cambio_hora 0001  
              __size_of_mostrar_titulo_menu 0018                     actualizar_minutos@valor 0018  
                           ?_borrar_minutos 0001                                      ?_Setup 0001  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _EECON2 000FA7                                      _ANCON0 000F48  
                                    _ANCON1 000F49                            ___awdiv@dividend 0001  
                            __CFG_WDTEN$OFF 000000                            RtccWriteDate@pDt 0001  
                         ??_actualizar_hora 001A                                      _RTCCFG 000F3F  
                            __CFG_WPCFG$OFF 000000      mostrar_guardar_temporal_password@tecla 0039  
                     __end_of_clear_display DFE0                            __end_of_caratula EFD0  
                      cambiar_minutos@tecla 0037                              __CFG_WPDIS$OFF 000000  
                     _cancelar_cambio_fecha DD98                              __CFG_XINST$OFF 000000  
                __size_of_verficar_password 0078                            _cambiar_mes$1391 0038  
                              _cambiar_anio E81A                                _cambiar_hora E496  
                          __end_of_lcd_init E994              guardar_password_temporal@valor 0008  
                          __end_of_lcd_putc E2E0                           ?_validar_password 0001  
                                    ___wmul E04A                                   ??___awdiv 0005  
                            __CFG_STVREN$ON 000000                                   ??___awmod 0005  
                                    _diasem 00E9                                      _anio_d 00F3  
                                    _anio_u 00F4                                   ??___lwdiv 0005  
                                 ??___lwmod 000C           __size_of_cancelar_cambio_password 0024  
                  ??_menu_ingresar_password 000D                   ?_cancelar_cambio_password 0001  
                        ??_validar_password 0001                                      _hora_d 00F8  
                                    _hora_u 00F9                                      clear_0 E5D8  
                                    clear_1 E5E4                                      clear_2 E5F2  
                          ___awdiv@quotient 0007                                      _minuto 00F1  
          __end_of_mostrar_guardar_password E120                             ___awmod@divisor 0003  
                           ___awmod@counter 0005                           cambiar_hora@tecla 0037  
                     __end_of_RtccWriteDate F70E                       __end_of_RtccWriteTime F374  
                          RtccWriteTime@pTm 0001                    __size_of_cambiar_minutos 0074  
                  _guardar_tecla_presionada E994                                __pdataCOMRAM 005A  
                                 ??_isdigit 0001                        __size_of_borrar_anio 0012  
                          ??_imprimir_tecla 0024                        __size_of_borrar_hora 0010  
 __end_of_mostrar_guardar_temporal_password E0F4  __size_of_mostrar_guardar_temporal_password 002C  
       ??_mostrar_guardar_temporal_password 0039          ?_mostrar_guardar_temporal_password 0001  
         _mostrar_guardar_temporal_password E0C8                                __mediumconst FEA2  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                   ??_sprintf 0017  
                                __accesstop 0060                     __end_of__initialization E638  
                        __size_of_Write_RTC 0186                               ___rparam_used 000001  
            __size_of_menu_cambiar_password 00D8               __end_of_menu_cambiar_password F17E  
                              _caratula$650 0026                              __pcstackCOMRAM 0001  
                             __end_of_Setup E294                  __size_of_inicializar_fecha 002E  
                              __pidataBANK0 DE01                 __end_of_actualizar_password ED76  
                           __CFG_DSWDTPS$G2 000000                  __size_of_restaurar_comando 001C  
                  __size_of_obtener_dia_mes 00EA                         leer_teclado@ocultar 003E  
                ??_desactivar_sonido_alarma 0001                      ??_cancelar_cambio_hora 0001  
            mostrar_titulo_menu@titulo_menu 000B                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                                     ??_Setup 000E  
                         lcd_gotoxy@address 0007                          __size_of_lcd_putrs 0054  
                     _activar_sonido_alarma DD90                                sprintf@width 0021  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                 ?_Read_RTC 0001                             _tamanio_comando 0047  
                                _dia_semana 00F5                   RtccWriteTime@tempHourWDay 000A  
                                __pnvCOMRAM 005E                          actualiza_dia@valor 0018  
                  __end_of_guardar_elemento FBAA                      ?_cancelar_cambio_fecha 0001  
                           _tamanio_minutos 00DE                 __size_of_menu_cambiar_fecha 00D6  
         __size_of_guardar_elemento_arreglo 0076               __size_of_menu_cambiar_horario 0096  
                      __end_of_leer_teclado F864                   ?_guardar_elemento_arreglo 0001  
                       _inicializar_teclado E072                           _intentos_fallidos 008D  
                                 ?_RtccWrOn 0001                              lcd_send_byte@n 0003  
                                   ?___wmul 0001                     menu_ingresar_password@i 000E  
                             ?_RtccReadDate 0001                   __size_of_inicializar_hora 0020  
                             ?_RtccReadTime 0001                            _ingresar_comando DDAC  
                              ?_Delay1KTCYx 0001             __size_of_menu_ingresar_password 00B0  
                        guardar_comando@aux 0026                           __end_of_Write_RTC F9EA  
                  ?_mensaje_alarma_activada 0001                          _actualiza_elemento DE82  
                           _convertir_a_int DF3E                       cambiar_mes@validacion 0035  
                                _lcd_comand DDC2                                   ?_caratula 0024  
                 confirmar_nuevo_password@i 000E                        ?_inicializar_teclado 0001  
                  actualizar_password@valor 0010                                  _lcd_gotoxy E002  
                                   _RTCVALH 000F99                                     _RTCVALL 000F98  
                       ?_actualiza_elemento 0016                                   ?_lcd_init 0001  
                         ??_cambiar_minutos 0035                                   ?_lcd_putc 0001  
                                _borrar_dia DDE0               guardar_elemento_arreglo@valor 0003  
                                _borrar_mes DDD0                  ?_guardar_password_temporal 0001  
                  _confirmar_nuevo_password EB24                                  ??_Read_RTC 0013  
         __size_of_mostrar_guardar_password 002C                   ?_mostrar_guardar_password 0001  
                ??_guardar_current_password 0008                           _cambiar_anio$1395 0038  
                actualiza_elemento@elemento 0016                                     __Hparam 0000  
                             ??_cambiar_dia 0035                         _mostrar_titulo_menu DE98  
                             ??_cambiar_mes 0035                                     __Lparam 0000  
                  __size_of_lcd_send_nibble 0076                                  ??_RtccWrOn 0001  
                      guardar_comando@tecla 003A                        guardar_elemento@doit 002C  
                            ??_RtccReadDate 0003                                  _autorizado 0045  
                      ??_actualiza_elemento 0012                              ??_RtccReadTime 0003  
                                   ___awdiv EBB2                           __end_of_lcd_putrs E380  
                                   ___awmod EA14                             __size_of___wmul 0028  
                                   ___lwdiv E3DA                                     ___lwmod E2E0  
                               _RtccTimeVal 0068                                  fecha@month 00D6  
                                   __pcinit E5D2                                     _fecha_d 00F6  
                                   _fecha_u 00F7                                     __ramtop 0F00  
             mostrar_guardar_password@tecla 0039                            ??_borrar_minutos 0001  
                                   __ptext0 F496                                     __ptext1 F0A6  
                                   __ptext2 E7A2                                     __ptext3 EC48  
                                   __ptext4 EFD0                                     __ptext5 DE98  
                                   __ptext6 E1A6                                     __ptext7 F70E  
                                   __ptext8 E994                                     __ptext9 DDAC  
                                   _buffer2 00A1              ?_inicializar_intentos_fallidos 0001  
                                   _comando 00CA                                   _T1CONbits 000FCD  
                                   _dpowers FEA3                                     _isdigit DF9C  
                     ??_inicializar_teclado 0001                             _actualizar_hora DFE0  
                          ___awmod@dividend 0001                                  ??_caratula 0026  
                      ?_mostrar_titulo_menu 000B                                     _minutes 0072  
                        _actualizar_minutos DF7C                                     _segundo 0097  
                         _desactivar_alarma E09C                      ?_activar_sonido_alarma 0001  
                         ??_obtener_dia_mes 0007                                     _sprintf FBAA  
                  ??_guardar_nuevo_password 0008                                  ??_lcd_init 0005  
                        ?_desactivar_alarma 0001                                  ??_lcd_putc 0008  
                      end_of_initialization E638                      _menu_ingresar_password ED76  
                       ?_actualizar_minutos 0016                        lcd_send_byte@address 0004  
                             __Lmediumconst FEA2                     actualiza_elemento@valor 0018  
                       ??_desactivar_alarma 0001                  guardar_elemento@dato_fecha 002A  
                                   postdec1 000FE5                                     postdec2 000FDD  
                ??_guardar_tecla_presionada 003E                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                      _tamanio_new_password 00E0                     __end_of_convertir_a_int DF5C  
                     __end_of_lcd_send_byte E206                        ??_actualizar_minutos 001A  
                       __end_of_cambiar_dia E3DA                         __end_of_cambiar_mes E5D2  
          __end_of_desactivar_sonido_alarma DE82                                   _PORTAbits 000F80  
                                 _PORTCbits 000F82                            __CFG_DSBOREN$OFF 000000  
                 __end_of_desactivar_alarma E0C8                       ??_mostrar_titulo_menu 000D  
                               ?_lcd_comand 0001                            __CFG_CPUDIV$OSC1 000000  
                                 _TRISBbits 000F93                                 ?_lcd_gotoxy 0005  
                 __size_of_validar_password 007E                      __size_of_actualiza_dia 001E  
                           _LCD_INIT_STRING FEAD                                 ?_borrar_dia 0001  
                               ?_borrar_mes 0001                        convertir_a_int@array 000E  
                      convertir_a_int@valor 0010         mostrar_guardar_nuevo_password@tecla 0039  
                     __size_of_leer_teclado 0156                            _current_password 00B5  
                          __CFG_IOL1WAY$OFF 000000                   RtccWriteDate@tempDayMonth 000A  
                       __CFG_MSSP7B_EN$MSK7 000000                               leer_teclado@i 0041  
                          Delay100TCYx@unit 0001                            _inicializar_hora DF5C  
                   __end_of_actualizar_hora E002                              __end_of___wmul E072  
                             __pidataCOMRAM DD8C                   RtccWriteDate@tempHourWDay 000C  
                     actualiza_dia@elemento 0016                               ??_borrar_anio 0001  
                             ??_borrar_hora 0001                           ??_lcd_send_nibble 0001  
         confirmar_nuevo_password@confirmar 0009                        __size_of_Delay1KTCYx 0012  
                          __CFG_DSWDTEN$OFF 000000                            cambiar_dia@tecla 0037  
                    __size_of_clear_display 0022                         start_initialization E5D2  
                        main@ocultar_teclas 0043                                _leer_teclado F70E  
                      __end_of_RtccReadDate EB24                        __end_of_RtccReadTime E564  
           __size_of_guardar_nuevo_password 001C                     ??_cancelar_cambio_fecha 0001  
                  __end_of_ingresar_comando DDB6                        RtccWriteTime@wasAlrm 0006  
                           _puntero_funcion 0095                        RtccWriteTime@wasWrEn 0007  
          __end_of_guardar_current_password DEE8               guardar_current_password@valor 0008  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                         ?_guardar_elemento 0024                      __size_of_RtccWriteTime 010C  
                         __size_of_Read_RTC 0122                  guardar_elemento@validacion 0028  
                  _cancelar_cambio_password E026                                 _cambiar_dia E380  
                       __size_of_lcd_comand 000E                          ??_guardar_elemento 002E  
                               _cambiar_mes E564               menu_cambiar_password@verifica 000D  
                     _menu_cambiar_password F0A6                            cambiar_mes@tecla 0037  
                             _actualiza_dia DF20                         __size_of_lcd_gotoxy 0024  
                                  ??___wmul 0005                            ?_convertir_a_int 000E  
                               __pdataBANK0 00E2                           __size_of_RtccWrOn 0012  
                           RtccWriteTime@di 0003                            __CFG_LPT1OSC$OFF 000000  
                       __size_of_borrar_dia 0010                         __size_of_borrar_mes 0010  
                           _cambiar_minutos E642                                 _ALRMCFGbits 000F91  
                   __end_of_LCD_INIT_STRING FEB1                  __size_of_desactivar_alarma 002C  
              __end_of_menu_cambiar_horario ECDE                  ??_confirmar_nuevo_password 000C  
                               __pbssCOMRAM 0045                __size_of_actualizar_password 0098  
             __size_of_cancelar_cambio_hora 000A                         __end_of_borrar_anio DE5A  
                                 _Write_RTC F864                         __end_of_borrar_hora DE00  
                              _isdigit$2710 0002                           __size_of_caratula 00D6  
                           Delay1KTCYx@unit 0001                              fecha@valor_max 009D  
                            fecha@valor_min 009F                 ??_guardar_password_temporal 0008  
                  __size_of_guardar_comando 0060                           __size_of_lcd_init 0080  
          __size_of_mensaje_alarma_activada 002E       __end_of_confirmar_actualizar_password E178  
    __size_of_confirmar_actualizar_password 002C               _confirmar_actualizar_password E14C  
                               sprintf@flag 0020                           __size_of_lcd_putc 004C  
         __size_of_desactivar_sonido_alarma 0016                  __end_of_menu_cambiar_fecha F0A6  
                               sprintf@prec 001B                     __size_of_imprimir_tecla 0046  
                 ?_desactivar_sonido_alarma 0001                                fecha@minutes 00D3  
                                 __pnvBANK0 00F3                            _tamanio_password 0058  
                             _clear_display DFBE                            ___lwdiv@dividend 0001  
                        verficar_password@i 0005                              ?_actualiza_dia 0016  
                             ?_Delay100TCYx 0001            __end_of_guardar_tecla_presionada EA14  
                             __pmediumconst FEA2                                    ?___awdiv 0001  
                                  ?___awmod 0001                      _guardar_nuevo_password DEE8  
           guardar_elemento_arreglo@arreglo 0001                           guardar_elemento@i 0031  
                                  ?___lwdiv 0001                                    ?___lwmod 0008  
                                 _encendida 00EB                            ?_actualizar_hora 0016  
                   RtccWriteTime@tempMinSec 0008                             _obtener_dia_mes F17E  
           guardar_elemento_arreglo@tamanio 0004                 guardar_nuevo_password@valor 0008  
                                 _lcd_putrs E32C                               _RtccWriteDate F5C8  
                   ??_activar_sonido_alarma 0001                               _RtccWriteTime F268  
                                  ?_isdigit 0001                        __CFG_RTCOSC$T1OSCREF 000000  
                   actualizar_hora@elemento 0016                     ?_menu_ingresar_password 0001  
                          _validar_password E896                              __size_of_Setup 0048  
                                ?_Write_RTC 0001                            ___lwdiv@quotient 0005  
                          clear_display@pos 000B                                   fecha@hour 00D0  
                                  ?_sprintf 000D                                   fecha@year 00D9  
           ??_inicializar_intentos_fallidos 0001                            _RtccAlrmTimeDate 0100  
                  _guardar_elemento_arreglo E72C                              ___wmul@product 0005  
                                  _LATAbits 000F89                                    _LATBbits 000F8A  
                                  _LATCbits 000F8B                              ?_clear_display 000B  
             confirmar_nuevo_password@valor 000B                                    _PIE3bits 000FA3  
                                 _segundo_d 005E                              ??_Delay100TCYx 0001  
                                 _segundo_u 00FE                      ?_menu_cambiar_password 0001  
                             ?_cambiar_anio 0001                               ?_cambiar_hora 0001  
                   __end_of_cambiar_minutos E6B6                                _new_password 00BC  
                          __CFG_WDTPS$32768 000000                                   _valor_max 0099  
                                 _valor_min 009B                 __size_of_actualiza_elemento 0016  
                        RtccWriteDate@wasOn 0005                   cambiar_minutos@validacion 0035  
                 guardar_tecla_presionada@i 003C                   _guardar_password_temporal DF04  
               __end_of_inicializar_teclado E09C                          _Rtcc_read_TimeDate 0108  
                            ?_RtccWriteDate 0001                                  ?_lcd_putrs 0009  
                               _borrar_anio DE48                           ___wmul@multiplier 0001  
                               _borrar_hora DDF0                              ?_RtccWriteTime 0001  
         __size_of_guardar_current_password 001C                              caratula@titulo 0024  
        confirmar_actualizar_password@tecla 0039                   ?_guardar_current_password 0001  
                                 lcd_init@i 0005              __end_of_menu_ingresar_password EE26  
                     __size_of_RtccReadDate 008E                                ??_lcd_comand 0005  
                                 lcd_putc@c 0008                       __size_of_RtccReadTime 006E  
                       imprimir_tecla@tecla 0038                                ??_lcd_gotoxy 0006  
                  _mostrar_guardar_password E0F4                    __end_of_inicializar_hora DF7C  
                              ??_borrar_dia 0001                                   copy_data0 E60C  
                                 copy_data1 E62C                                ??_borrar_mes 0001  
                                  _Read_RTC F374                        _cambiar_minutos$1414 0038  
                              _tamanio_anio 00DC                                _tamanio_hora 0054  
                           ??_actualiza_dia 0016                              ??_cambiar_anio 0035  
                           _lcd_send_nibble E6B6                                    __Hrparam 0000  
                            ??_cambiar_hora 0035                        _menu_cambiar_horario EC48  
                   __end_of_obtener_dia_mes F268                                    _RtccDate 004A  
            ?_confirmar_actualizar_password 0001                                    __Lrparam 0000  
                         ??_guardar_comando 0024                                    _RtccTime 004E  
                                  _RtccWrOn DE12                          _funcion_pulsador_B 0083  
                        _funcion_pulsador_C 0085                          _funcion_pulsador_D 0087  
                        __end_of_lcd_comand DDD0                       guardar_elemento@array 0024  
                     cambiar_dia@validacion 0035                       guardar_elemento@tecla 0030  
                     guardar_elemento@valor 0033               guardar_elemento@tamanio_array 0026  
                        __end_of_lcd_gotoxy E026                                _RtccReadDate EA96  
                          __size_of___awdiv 0096                            __size_of___awmod 0082  
                              _RtccReadTime E4F6                 __end_of_mostrar_titulo_menu DEB0  
                          __size_of___lwdiv 005C                         ingresar_comando@key 003B  
               __size_of_actualizar_minutos 0020                            __size_of___lwmod 004C  
          ??_mostrar_guardar_nuevo_password 0039             ?_mostrar_guardar_nuevo_password 0001  
                        __end_of_borrar_dia DDF0                          __end_of_borrar_mes DDE0  
          __end_of_confirmar_nuevo_password EBB2                                _RtccTimeDate 0060  
                                sprintf@val 001E                                    _activada 007D  
                                  _caratula EEFA                            __size_of_isdigit 0022  
                           ___lwdiv@divisor 0003                      cambiar_anio@validacion 0035  
                               ??_Write_RTC 000E                             ___lwdiv@counter 0007  
         __size_of_guardar_tecla_presionada 0080                                    __ptext10 E14C  
                                  __ptext11 E120                                    __ptext20 DEE8  
                                  __ptext12 E0F4                                    __ptext21 E436  
                                  __ptext13 E496                                    __ptext30 DF3E  
                                  __ptext22 E206                                    __ptext14 E642  
                                  __ptext31 EE26                                    __ptext23 ECDE  
                                  __ptext15 E380                                    __ptext40 DE5A  
                                  __ptext32 DFE0                                    __ptext24 EB24  
                                  __ptext16 E564                                    __ptext41 DDE0  
                                  __ptext33 DF20                                    __ptext25 DECC  
                                  __ptext17 E81A                                    __ptext50 E178  
                                  __ptext42 DDD0                                    __ptext34 DE82  
                                  __ptext26 E72C                                    __ptext18 E0C8  
                                  __ptext51 E072                                    __ptext43 DE48  
                                  __ptext35 DF7C                                    __ptext27 F17E  
                                  __ptext19 DF04                                    __ptext60 E32C  
                                  __ptext52 DE6C                                    __ptext44 DEB0  
                                  __ptext36 E026                                    __ptext28 EA14  
                                  __ptext61 E294                                    __ptext53 DDB6  
                                  __ptext45 E09C                                    __ptext37 DDA2  
                                  __ptext29 F9EA                                    __ptext70 DE24  
                                  __ptext62 E002                                    __ptext54 EEFA  
                                  __ptext46 ED76                                    __ptext38 DD98  
                                  __ptext71 F864                                    __ptext63 DD90  
                                  __ptext55 FBAA                                    __ptext47 E896  
                                  __ptext39 DDF0                                    __ptext72 EBB2  
                                  __ptext64 E24C                                    __ptext56 DF9C  
                                  __ptext48 DFBE                                    __ptext73 F268  
                                  __ptext65 E914                                    __ptext57 E04A  
                                  __ptext49 DF5C                                    __ptext74 F5C8  
                                  __ptext66 DE36                                    __ptext58 E2E0  
                                  __ptext75 DE12                                    __ptext67 DDC2  
                                  __ptext59 E3DA                                    __ptext76 F374  
                                  __ptext68 E1D4                                    __ptext77 E4F6  
                                  __ptext69 E6B6                                    __ptext78 EA96  
                                  __ptext79 0000                   ?_guardar_tecla_presionada 003C  
                                  _lcd_init E914                                    _lcd_putc E294  
                   __size_of_borrar_minutos 0012                            __size_of_sprintf 02F8  
                   _mensaje_alarma_activada E1A6                  ??_cancelar_cambio_password 0001  
                           ??_clear_display 000D                           ?_ingresar_comando 0001  
                    __size_of_lcd_send_byte 0032                              _imprimir_tecla E206  
            __size_of_cancelar_cambio_fecha 000A                                    fecha@day 00CD  
                             __size_of_atoi 00D4                               __size_of_main 0132  
             __end_of_cancelar_cambio_fecha DDA2                          ??_ingresar_comando 003B  
                                  _intentos 008B                       ?_menu_cambiar_horario 0001  
                                  _minuto_d 00FC                                    _minuto_u 00FD  
     __end_of_inicializar_intentos_fallidos DDC2      __size_of_inicializar_intentos_fallidos 000C  
             _inicializar_intentos_fallidos DDB6                                    _password 00E2  
                       _actualizar_password ECDE                                ?_cambiar_dia 0001  
                              ?_cambiar_mes 0001                                    _temporal 00C3  
                          ?_cambiar_minutos 0001                                    atoi@sign 000B  
                             ??_Delay1KTCYx 0001                             ??_RtccWriteDate 0004  
                           ??_RtccWriteTime 0004                actualizar_password@confirmar 0011  
                               ??_lcd_putrs 000B                   __size_of_guardar_elemento 01C0  
                               _OSCTUNEbits 000F9B                                  _INTCONbits 000FF2  
                               _tamanio_dia 0052                        ?_actualizar_password 0001  
                               _tamanio_mes 0056                          RtccWriteTime@wasOn 0005  
                      __end_of_Delay100TCYx DE36                                    isdigit@c 0003  
                    __end_of_imprimir_tecla E24C                                   sprintf@ap 001C  
                   __end_of_lcd_send_nibble E72C                                   sprintf@sp 000D  
                          ___lwmod@dividend 0008                __end_of_cancelar_cambio_hora DDAC  
                   ?_guardar_nuevo_password 0001                                  _OSCCONbits 000FD3  
                          ?_obtener_dia_mes 0001                    __end_of_validar_password E914  
                     RtccWriteDate@tempYear 0007                           imprimir_tecla@aux 0024  
                        _menu_cambiar_fecha EFD0                               _lcd_send_byte E1D4  
                                _RTCCFGbits 000F3F                                    sprintf@c 0023  
                                  sprintf@f 000F                       ??_actualizar_password 0010  
                           ___lwmod@divisor 000A                   verficar_password@verifica 0001  
                       ?_menu_cambiar_fecha 0001                         __end_of_Delay1KTCYx DE48  
                           ___lwmod@counter 000C              __size_of_activar_sonido_alarma 0008  
                  __size_of_convertir_a_int 001E               __end_of_activar_sonido_alarma DD98  
                      __end_of_cambiar_anio E896                  ??_guardar_elemento_arreglo 0006  
                      actualizar_hora@valor 0018          __size_of_guardar_password_temporal 001C  
                      RtccWriteDate@wasAlrm 0006                        __end_of_cambiar_hora E4F6  
                      RtccWriteDate@wasWrEn 0009                   ??_mensaje_alarma_activada 000B  
                           ?_imprimir_tecla 0001                     ??_menu_cambiar_password 000D  
                    ??_menu_cambiar_horario 000D              __end_of_guardar_nuevo_password DF04  
         __size_of_confirmar_nuevo_password 008E                   ?_confirmar_nuevo_password 0009  
                      ??_menu_cambiar_fecha 000D                       lcd_send_nibble@nibble 0002  
