

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 25 21:40:28 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataCOMRAM
    58  00231E                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _anio
    62  00231E  000F               	dw	15
    63                           
    64                           ;initializer for _dia
    65  002320  0008               	dw	8
    66                           
    67                           ;initializer for _diasem
    68  002322  0003               	dw	3
    69                           
    70                           ;initializer for _hora
    71  002324  0012               	dw	18
    72                           
    73                           ;initializer for _mes
    74  002326  0009               	dw	9
    75                           
    76                           ;initializer for _minuto
    77  002328  001E               	dw	30
    78                           
    79                           	psect	idataBANK0
    80  002334                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _password
    84  002334  31                 	db	49
    85  002335  32                 	db	50
    86  002336  33                 	db	51
    87  002337  34                 	db	52
    88  002338  35                 	db	53
    89  002339  36                 	db	54
    90                           
    91                           ;initializer for _comando
    92  00233A  78                 	db	120
    93  00233B  78                 	db	120
    94  00233C  78                 	db	120
    95                           
    96                           	psect	smallconst
    97  000F00                     __psmallconst:
    98                           	opt stack 0
    99  000F00  00                 	db	0
   100  000F01                     _dpowers:
   101                           	opt stack 0
   102  000F01  0001               	dw	1
   103  000F03  000A               	dw	10
   104  000F05  0064               	dw	100
   105  000F07  03E8               	dw	1000
   106  000F09  2710               	dw	10000
   107  000F0B                     __end_of_dpowers:
   108                           	opt stack 0
   109  000F0B                     _LCD_INIT_STRING:
   110                           	opt stack 0
   111  000F0B  28                 	db	40
   112  000F0C  0C                 	db	12
   113  000F0D  01                 	db	1
   114  000F0E  06                 	db	6
   115  000F0F                     __end_of_LCD_INIT_STRING:
   116                           	opt stack 0
   117  000F0F                     STR_12:
   118                           
   119                           ; BSR set to: 15
   120  000F0F  49                 	db	73	;'I'
   121  000F10  6E                 	db	110	;'n'
   122  000F11  73                 	db	115	;'s'
   123  000F12  65                 	db	101	;'e'
   124  000F13  72                 	db	114	;'r'
   125  000F14  74                 	db	116	;'t'
   126  000F15  65                 	db	101	;'e'
   127  000F16  20                 	db	32
   128  000F17  70                 	db	112	;'p'
   129  000F18  61                 	db	97	;'a'
   130  000F19  73                 	db	115	;'s'
   131  000F1A  73                 	db	115	;'s'
   132  000F1B  77                 	db	119	;'w'
   133  000F1C  6F                 	db	111	;'o'
   134  000F1D  72                 	db	114	;'r'
   135  000F1E  64                 	db	100	;'d'
   136  000F1F  00                 	db	0
   137  000F20                     STR_11:
   138                           
   139                           ; BSR set to: 15
   140  000F20  20                 	db	32
   141  000F21  20                 	db	32
   142  000F22  25                 	db	37
   143  000F23  30                 	db	48	;'0'
   144  000F24  32                 	db	50	;'2'
   145  000F25  75                 	db	117	;'u'
   146  000F26  3A                 	db	58	;':'
   147  000F27  25                 	db	37
   148  000F28  30                 	db	48	;'0'
   149  000F29  32                 	db	50	;'2'
   150  000F2A  75                 	db	117	;'u'
   151  000F2B  3A                 	db	58	;':'
   152  000F2C  25                 	db	37
   153  000F2D  30                 	db	48	;'0'
   154  000F2E  32                 	db	50	;'2'
   155  000F2F  75                 	db	117	;'u'
   156  000F30  00                 	db	0
   157  000F31                     STR_10:
   158                           
   159                           ; BSR set to: 15
   160  000F31  25                 	db	37
   161  000F32  30                 	db	48	;'0'
   162  000F33  32                 	db	50	;'2'
   163  000F34  75                 	db	117	;'u'
   164  000F35  2F                 	db	47
   165  000F36  25                 	db	37
   166  000F37  30                 	db	48	;'0'
   167  000F38  32                 	db	50	;'2'
   168  000F39  75                 	db	117	;'u'
   169  000F3A  2F                 	db	47
   170  000F3B  25                 	db	37
   171  000F3C  30                 	db	48	;'0'
   172  000F3D  32                 	db	50	;'2'
   173  000F3E  75                 	db	117	;'u'
   174  000F3F  00                 	db	0
   175  000F40                     STR_20:
   176                           
   177                           ; BSR set to: 15
   178  000F40  63                 	db	99	;'c'
   179  000F41  61                 	db	97	;'a'
   180  000F42  6D                 	db	109	;'m'
   181  000F43  62                 	db	98	;'b'
   182  000F44  69                 	db	105	;'i'
   183  000F45  61                 	db	97	;'a'
   184  000F46  72                 	db	114	;'r'
   185  000F47  20                 	db	32
   186  000F48  70                 	db	112	;'p'
   187  000F49  61                 	db	97	;'a'
   188  000F4A  73                 	db	115	;'s'
   189  000F4B  73                 	db	115	;'s'
   190  000F4C  00                 	db	0
   191  000F4D                     STR_18:
   192                           
   193                           ; BSR set to: 15
   194  000F4D  4D                 	db	77	;'M'
   195  000F4E  65                 	db	101	;'e'
   196  000F4F  6E                 	db	110	;'n'
   197  000F50  75                 	db	117	;'u'
   198  000F51  20                 	db	32
   199  000F52  66                 	db	102	;'f'
   200  000F53  65                 	db	101	;'e'
   201  000F54  63                 	db	99	;'c'
   202  000F55  68                 	db	104	;'h'
   203  000F56  61                 	db	97	;'a'
   204  000F57  00                 	db	0
   205  000F58                     STR_13:
   206                           
   207                           ; BSR set to: 15
   208  000F58  45                 	db	69	;'E'
   209  000F59  52                 	db	82	;'R'
   210  000F5A  52                 	db	82	;'R'
   211  000F5B  4F                 	db	79	;'O'
   212  000F5C  52                 	db	82	;'R'
   213  000F5D  20                 	db	32
   214  000F5E  70                 	db	112	;'p'
   215  000F5F  61                 	db	97	;'a'
   216  000F60  73                 	db	115	;'s'
   217  000F61  73                 	db	115	;'s'
   218  000F62  00                 	db	0
   219  000F63                     STR_16:
   220                           
   221                           ; BSR set to: 15
   222  000F63  57                 	db	87	;'W'
   223  000F64  65                 	db	101	;'e'
   224  000F65  6C                 	db	108	;'l'
   225  000F66  63                 	db	99	;'c'
   226  000F67  6F                 	db	111	;'o'
   227  000F68  6D                 	db	109	;'m'
   228  000F69  65                 	db	101	;'e'
   229  000F6A  20                 	db	32
   230  000F6B  00                 	db	0
   231  000F6C                     STR_1:
   232                           
   233                           ; BSR set to: 15
   234  000F6C  25                 	db	37
   235  000F6D  30                 	db	48	;'0'
   236  000F6E  31                 	db	49	;'1'
   237  000F6F  75                 	db	117	;'u'
   238  000F70  00                 	db	0
   239  000F71                     STR_17:
   240                           
   241                           ; BSR set to: 15
   242  000F71  30                 	db	48	;'0'
   243  000F72  30                 	db	48	;'0'
   244  000F73  31                 	db	49	;'1'
   245  000F74  00                 	db	0
   246  000F75                     STR_19:
   247                           
   248                           ; BSR set to: 15
   249  000F75  30                 	db	48	;'0'
   250  000F76  30                 	db	48	;'0'
   251  000F77  32                 	db	50	;'2'
   252  000F78  00                 	db	0
   253  000F79                     STR_15:
   254                           
   255                           ; BSR set to: 15
   256  000F79  78                 	db	120	;'x'
   257  000F7A  78                 	db	120	;'x'
   258  000F7B  78                 	db	120	;'x'
   259  000F7C  00                 	db	0
   260  000F7D                     STR_8:
   261                           
   262                           ; BSR set to: 15
   263  000F7D  23                 	db	35
   264  000F7E  00                 	db	0
   265  000F7F                     STR_3:
   266                           
   267                           ; BSR set to: 15
   268  000F7F  2A                 	db	42
   269  000F80  00                 	db	0
   270  000F81                     STR_4:
   271                           
   272                           ; BSR set to: 15
   273  000F81  41                 	db	65	;'A'
   274  000F82  00                 	db	0
   275  000F83                     STR_5:
   276                           
   277                           ; BSR set to: 15
   278  000F83  42                 	db	66	;'B'
   279  000F84  00                 	db	0
   280  000F85                     STR_6:
   281                           
   282                           ; BSR set to: 15
   283  000F85  43                 	db	67	;'C'
   284  000F86  00                 	db	0
   285  000F87                     STR_9:
   286                           
   287                           ; BSR set to: 15
   288  000F87  44                 	db	68	;'D'
   289  000F88  00                 	db	0
   290  0000                     
   291                           ; #config settings
   292  000F89  00                 	db	0	; dummy byte at the end
   293  0000                     
   294                           	psect	nvCOMRAM
   295  00005E                     __pnvCOMRAM:
   296                           	opt stack 0
   297  00005E                     _segundo_d:
   298                           	opt stack 0
   299  00005E                     	ds	1
   300                           
   301                           	psect	nvBANK0
   302  0000A4                     __pnvBANK0:
   303                           	opt stack 0
   304  0000A4                     _anio_d:
   305                           	opt stack 0
   306  0000A4                     	ds	1
   307  0000A5                     _anio_u:
   308                           	opt stack 0
   309  0000A5                     	ds	1
   310  0000A6                     _dia_semana:
   311                           	opt stack 0
   312  0000A6                     	ds	1
   313  0000A7                     _fecha_d:
   314                           	opt stack 0
   315  0000A7                     	ds	1
   316  0000A8                     _fecha_u:
   317                           	opt stack 0
   318  0000A8                     	ds	1
   319  0000A9                     _hora_d:
   320                           	opt stack 0
   321  0000A9                     	ds	1
   322  0000AA                     _hora_u:
   323                           	opt stack 0
   324  0000AA                     	ds	1
   325  0000AB                     _mes_d:
   326                           	opt stack 0
   327  0000AB                     	ds	1
   328  0000AC                     _mes_u:
   329                           	opt stack 0
   330  0000AC                     	ds	1
   331  0000AD                     _minuto_d:
   332                           	opt stack 0
   333  0000AD                     	ds	1
   334  0000AE                     _minuto_u:
   335                           	opt stack 0
   336  0000AE                     	ds	1
   337  0000AF                     _segundo_u:
   338                           	opt stack 0
   339  0000AF                     	ds	1
   340  0000                     _ANCON0	set	3912
   341  0000                     _ANCON1	set	3913
   342  0000                     _RTCCFG	set	3903
   343  0000                     _RTCCFGbits	set	3903
   344  0000                     _ADCON0	set	4034
   345  0000                     _ADCON1	set	4033
   346  0000                     _ALRMCFGbits	set	3985
   347  0000                     _EECON2	set	4007
   348  0000                     _INTCONbits	set	4082
   349  0000                     _LATAbits	set	3977
   350  0000                     _LATBbits	set	3978
   351  0000                     _OSCCONbits	set	4051
   352  0000                     _OSCTUNEbits	set	3995
   353  0000                     _PIE3bits	set	4003
   354  0000                     _PORTAbits	set	3968
   355  0000                     _PORTCbits	set	3970
   356  0000                     _RTCVALH	set	3993
   357  0000                     _RTCVALL	set	3992
   358  0000                     _T1CONbits	set	4045
   359  0000                     _TRISA	set	3986
   360  0000                     _TRISB	set	3987
   361  0000                     _TRISBbits	set	3987
   362  0000                     _TRISC	set	3988
   363                           
   364                           	psect	cinit
   365  001EAC                     __pcinit:
   366                           	opt stack 0
   367  001EAC                     start_initialization:
   368                           	opt stack 0
   369  001EAC                     __initialization:
   370                           	opt stack 0
   371                           
   372                           ; Clear objects allocated to BANK0 (68 bytes)
   373  001EAC  EE00  F060         	lfsr	0,__pbssBANK0
   374  001EB0  0E44               	movlw	68
   375  001EB2                     clear_0:
   376  001EB2  6AEE               	clrf	postinc0,c
   377  001EB4  06E8               	decf	wreg,f,c
   378  001EB6  E1FD               	bnz	clear_0
   379                           
   380                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   381  001EB8  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   382                           
   383                           ; Clear objects allocated to COMRAM (17 bytes)
   384  001EBA  EE00  F041         	lfsr	0,__pbssCOMRAM
   385  001EBE  0E11               	movlw	17
   386  001EC0                     clear_1:
   387  001EC0  6AEE               	clrf	postinc0,c
   388  001EC2  06E8               	decf	wreg,f,c
   389  001EC4  E1FD               	bnz	clear_1
   390                           
   391                           ; Initialize objects allocated to BANK0 (9 bytes)
   392                           ; load TBLPTR registers with __pidataBANK0
   393  001EC6  0E34               	movlw	low __pidataBANK0
   394  001EC8  6EF6               	movwf	tblptrl,c
   395  001ECA  0E23               	movlw	high __pidataBANK0
   396  001ECC  6EF7               	movwf	tblptrh,c
   397  001ECE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   398  001ED0  6EF8               	movwf	tblptru,c
   399  001ED2  EE00  F0B0         	lfsr	0,__pdataBANK0
   400  001ED6  EE10 F009          	lfsr	1,9
   401  001EDA                     copy_data0:
   402  001EDA  0009               	tblrd		*+
   403  001EDC  CFF5 FFEE          	movff	tablat,postinc0
   404  001EE0  50E5               	movf	postdec1,w,c
   405  001EE2  50E1               	movf	fsr1l,w,c
   406  001EE4  E1FA               	bnz	copy_data0
   407                           
   408                           ; Initialize objects allocated to COMRAM (12 bytes)
   409                           ; load TBLPTR registers with __pidataCOMRAM
   410  001EE6  0E1E               	movlw	low __pidataCOMRAM
   411  001EE8  6EF6               	movwf	tblptrl,c
   412  001EEA  0E23               	movlw	high __pidataCOMRAM
   413  001EEC  6EF7               	movwf	tblptrh,c
   414  001EEE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   415  001EF0  6EF8               	movwf	tblptru,c
   416  001EF2  EE00  F052         	lfsr	0,__pdataCOMRAM
   417  001EF6  EE10 F00C          	lfsr	1,12
   418  001EFA                     copy_data1:
   419  001EFA  0009               	tblrd		*+
   420  001EFC  CFF5 FFEE          	movff	tablat,postinc0
   421  001F00  50E5               	movf	postdec1,w,c
   422  001F02  50E1               	movf	fsr1l,w,c
   423  001F04  E1FA               	bnz	copy_data1
   424  001F06                     end_of_initialization:
   425                           	opt stack 0
   426  001F06                     __end_of__initialization:
   427                           	opt stack 0
   428  001F06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   429  001F08  6EF8               	movwf	tblptru,c
   430  001F0A  0100               	movlb	0
   431  001F0C  EFB6  F009         	goto	_main	;jump to C main() function
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	bitbssCOMRAM
   442  0002F8                     __pbitbssCOMRAM:
   443                           	opt stack 0
   444  0002F8                     _flag:
   445                           	opt stack 0
   446  0002F8                     	ds	1
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	bssCOMRAM
   457  000041                     __pbssCOMRAM:
   458                           	opt stack 0
   459  000041                     _autorizado:
   460                           	opt stack 0
   461  000041                     	ds	2
   462  000043                     _segundo:
   463                           	opt stack 0
   464  000043                     	ds	2
   465  000045                     _tamanio_comando:
   466                           	opt stack 0
   467  000045                     	ds	2
   468  000047                     _tamanio_password:
   469                           	opt stack 0
   470  000047                     	ds	2
   471  000049                     _key:
   472                           	opt stack 0
   473  000049                     	ds	1
   474  00004A                     _RtccDate:
   475                           	opt stack 0
   476  00004A                     	ds	4
   477  00004E                     _RtccTime:
   478                           	opt stack 0
   479  00004E                     	ds	4
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           postdec1	equ	0xFE5
   487                           fsr1l	equ	0xFE1
   488                           
   489                           	psect	dataCOMRAM
   490  000052                     __pdataCOMRAM:
   491                           	opt stack 0
   492  000052                     _anio:
   493                           	opt stack 0
   494  000052                     	ds	2
   495  000054                     _dia:
   496                           	opt stack 0
   497  000054                     	ds	2
   498  000056                     _diasem:
   499                           	opt stack 0
   500  000056                     	ds	2
   501  000058                     _hora:
   502                           	opt stack 0
   503  000058                     	ds	2
   504  00005A                     _mes:
   505                           	opt stack 0
   506  00005A                     	ds	2
   507  00005C                     _minuto:
   508                           	opt stack 0
   509  00005C                     	ds	2
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssBANK0
   520  000060                     __pbssBANK0:
   521                           	opt stack 0
   522  000060                     _RtccAlrmTimeDate:
   523                           	opt stack 0
   524  000060                     	ds	8
   525  000068                     _RtccTimeDate:
   526                           	opt stack 0
   527  000068                     	ds	8
   528  000070                     _Rtcc_read_TimeDate:
   529                           	opt stack 0
   530  000070                     	ds	8
   531  000078                     _current_password:
   532                           	opt stack 0
   533  000078                     	ds	6
   534  00007E                     _RtccTimeVal:
   535                           	opt stack 0
   536  00007E                     	ds	4
   537  000082                     _a:
   538                           	opt stack 0
   539  000082                     	ds	2
   540  000084                     _b:
   541                           	opt stack 0
   542  000084                     	ds	2
   543  000086                     _c:
   544                           	opt stack 0
   545  000086                     	ds	2
   546  000088                     _i:
   547                           	opt stack 0
   548  000088                     	ds	2
   549  00008A                     _j:
   550                           	opt stack 0
   551  00008A                     	ds	2
   552  00008C                     _k:
   553                           	opt stack 0
   554  00008C                     	ds	2
   555  00008E                     _ocultar_teclas:
   556                           	opt stack 0
   557  00008E                     	ds	2
   558  000090                     _buffer2:
   559                           	opt stack 0
   560  000090                     	ds	20
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	dataBANK0
   571  0000B0                     __pdataBANK0:
   572                           	opt stack 0
   573  0000B0                     _password:
   574                           	opt stack 0
   575  0000B0                     	ds	6
   576  0000B6                     _comando:
   577                           	opt stack 0
   578  0000B6                     	ds	3
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           postdec1	equ	0xFE5
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	cstackCOMRAM
   589  000001                     __pcstackCOMRAM:
   590                           	opt stack 0
   591  000001                     ??_isdigit:
   592  000001                     ??_guardar_current_password:
   593  000001                     ??_lcd_send_nibble:
   594  000001                     ?___wmul:
   595                           	opt stack 0
   596  000001                     ?___awdiv:
   597                           	opt stack 0
   598  000001                     ?___lwdiv:
   599                           	opt stack 0
   600  000001                     Delay100TCYx@unit:
   601                           	opt stack 0
   602  000001                     Delay1KTCYx@unit:
   603                           	opt stack 0
   604  000001                     validar_comando@candidato:
   605                           	opt stack 0
   606  000001                     RtccReadDate@pDt:
   607                           	opt stack 0
   608  000001                     RtccReadTime@pTm:
   609                           	opt stack 0
   610  000001                     RtccWriteDate@pDt:
   611                           	opt stack 0
   612  000001                     RtccWriteTime@pTm:
   613                           	opt stack 0
   614  000001                     ___wmul@multiplier:
   615                           	opt stack 0
   616  000001                     ___awdiv@dividend:
   617                           	opt stack 0
   618  000001                     ___lwdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  000001                     	ds	1
   623  000002                     lcd_send_nibble@nibble:
   624                           	opt stack 0
   625  000002                     _isdigit$2103:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x1
   629  000002                     	ds	1
   630  000003                     guardar_current_password@valor:
   631                           	opt stack 0
   632  000003                     lcd_send_byte@n:
   633                           	opt stack 0
   634  000003                     RtccWriteDate@di:
   635                           	opt stack 0
   636  000003                     RtccWriteTime@di:
   637                           	opt stack 0
   638  000003                     isdigit@c:
   639                           	opt stack 0
   640  000003                     validar_comando@validar:
   641                           	opt stack 0
   642  000003                     validar_password@i:
   643                           	opt stack 0
   644  000003                     ___wmul@multiplicand:
   645                           	opt stack 0
   646  000003                     ___awdiv@divisor:
   647                           	opt stack 0
   648  000003                     ___lwdiv@divisor:
   649                           	opt stack 0
   650  000003                     RtccReadDate@rTD1:
   651                           	opt stack 0
   652  000003                     RtccReadTime@rTD1:
   653                           	opt stack 0
   654                           
   655                           ; 8 bytes @ 0x2
   656  000003                     	ds	1
   657  000004                     lcd_send_byte@address:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x3
   661  000004                     	ds	1
   662  000005                     ??_validar_comando:
   663  000005                     lcd_init@i:
   664                           	opt stack 0
   665  000005                     lcd_gotoxy@y:
   666                           	opt stack 0
   667  000005                     lcd_comand@d:
   668                           	opt stack 0
   669  000005                     RtccWriteDate@wasOn:
   670                           	opt stack 0
   671  000005                     RtccWriteTime@wasOn:
   672                           	opt stack 0
   673  000005                     ___awdiv@counter:
   674                           	opt stack 0
   675  000005                     ___wmul@product:
   676                           	opt stack 0
   677  000005                     ___lwdiv@quotient:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x4
   681  000005                     	ds	1
   682  000006                     lcd_gotoxy@x:
   683                           	opt stack 0
   684  000006                     RtccWriteDate@wasAlrm:
   685                           	opt stack 0
   686  000006                     RtccWriteTime@wasAlrm:
   687                           	opt stack 0
   688  000006                     ___awdiv@sign:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x5
   692  000006                     	ds	1
   693  000007                     lcd_gotoxy@address:
   694                           	opt stack 0
   695  000007                     RtccWriteTime@wasWrEn:
   696                           	opt stack 0
   697  000007                     ___lwdiv@counter:
   698                           	opt stack 0
   699  000007                     RtccWriteDate@tempYear:
   700                           	opt stack 0
   701  000007                     ___awdiv@quotient:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x6
   705  000007                     	ds	1
   706  000008                     ?___lwmod:
   707                           	opt stack 0
   708  000008                     lcd_putc@c:
   709                           	opt stack 0
   710  000008                     validar_comando@i:
   711                           	opt stack 0
   712  000008                     RtccWriteTime@tempMinSec:
   713                           	opt stack 0
   714  000008                     ___lwmod@dividend:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x7
   718  000008                     	ds	1
   719  000009                     RtccWriteDate@wasWrEn:
   720                           	opt stack 0
   721  000009                     lcd_putrs@ptr:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x8
   725  000009                     	ds	1
   726  00000A                     RtccWriteDate@tempDayMonth:
   727                           	opt stack 0
   728  00000A                     RtccWriteTime@tempHourWDay:
   729                           	opt stack 0
   730  00000A                     ___lwmod@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x9
   734  00000A                     	ds	1
   735  00000B                     ??_ingresar_password:
   736  00000B                     RtccReadDate@rTD0:
   737                           	opt stack 0
   738  00000B                     RtccReadTime@rTD0:
   739                           	opt stack 0
   740                           
   741                           ; 8 bytes @ 0xA
   742  00000B                     	ds	1
   743  00000C                     ___lwmod@counter:
   744                           	opt stack 0
   745  00000C                     RtccWriteDate@tempHourWDay:
   746                           	opt stack 0
   747  00000C                     ingresar_password@clear:
   748                           	opt stack 0
   749                           
   750                           ; 16 bytes @ 0xB
   751  00000C                     	ds	1
   752  00000D                     ?_sprintf:
   753                           	opt stack 0
   754  00000D                     sprintf@sp:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0xC
   758  00000D                     	ds	1
   759  00000E                     
   760                           ; 0 bytes @ 0xD
   761  00000E                     	ds	1
   762  00000F                     sprintf@f:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0xE
   766  00000F                     	ds	4
   767  000013                     
   768                           ; 0 bytes @ 0x12
   769  000013                     	ds	4
   770  000017                     ??_sprintf:
   771                           
   772                           ; 0 bytes @ 0x16
   773  000017                     	ds	4
   774  00001B                     sprintf@ap:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x1A
   778  00001B                     	ds	1
   779  00001C                     ingresar_password@i_969:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x1B
   783  00001C                     	ds	1
   784  00001D                     sprintf@flag:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x1C
   788  00001D                     	ds	1
   789  00001E                     ingresar_password@i:
   790                           	opt stack 0
   791  00001E                     sprintf@val:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x1D
   795  00001E                     	ds	2
   796  000020                     sprintf@prec:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x1F
   800  000020                     	ds	1
   801  000021                     sprintf@width:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x20
   805  000021                     	ds	2
   806  000023                     sprintf@c:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x22
   810  000023                     	ds	1
   811  000024                     ??_guardar_comando:
   812  000024                     imprimir_tecla@tecla:
   813                           	opt stack 0
   814  000024                     caratula@titulo:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x23
   818  000024                     	ds	1
   819  000025                     mostrar_guardar_password@tecla:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x24
   823  000025                     	ds	1
   824  000026                     guardar_comando@tecla:
   825                           	opt stack 0
   826  000026                     caratula@clear:
   827                           	opt stack 0
   828                           
   829                           ; 16 bytes @ 0x25
   830  000026                     	ds	1
   831  000027                     ingresar_comando@key:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x26
   835  000027                     	ds	1
   836  000028                     guardar_tecla_presionada@letra:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x27
   840  000028                     	ds	2
   841  00002A                     guardar_tecla_presionada@i:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x29
   845  00002A                     	ds	2
   846  00002C                     guardar_tecla_presionada@doit:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x2B
   850  00002C                     	ds	2
   851  00002E                     leer_teclado@ocultar:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x2D
   855  00002E                     	ds	2
   856  000030                     leer_teclado@doit:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x2F
   860  000030                     	ds	2
   861  000032                     ??_leer_teclado:
   862                           
   863                           ; 0 bytes @ 0x31
   864  000032                     	ds	1
   865  000033                     leer_teclado@i:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x32
   869  000033                     	ds	3
   870  000036                     caratula@i:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x35
   874  000036                     	ds	2
   875  000038                     ??_main:
   876                           
   877                           ; 0 bytes @ 0x37
   878  000038                     	ds	1
   879  000039                     main@ocultar_teclas:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x38
   883  000039                     	ds	2
   884  00003B                     main@i:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x3A
   888  00003B                     	ds	2
   889  00003D                     main@i_995:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x3C
   893  00003D                     	ds	2
   894  00003F                     main@validacion:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x3E
   898  00003F                     	ds	2
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           fsr1l	equ	0xFE1
   907                           
   908 ;;
   909 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   910 ;;
   911 ;; *************** function _main *****************
   912 ;; Defined at:
   913 ;;		line 131 in file "main.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;		None
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  i               2   60[COMRAM] int 
   918 ;;  i               2   58[COMRAM] int 
   919 ;;  validacion      2   62[COMRAM] int 
   920 ;;  ocultar_tecl    2   56[COMRAM] int 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  2  249[None  ] int 
   923 ;; Registers used:
   924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   931 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   933 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   934 ;;Total ram usage:        9 bytes
   935 ;; Hardware stack levels required when called:    9
   936 ;; This function calls:
   937 ;;		_Read_RTC
   938 ;;		_Setup
   939 ;;		_caratula
   940 ;;		_ingresar_password
   941 ;;		_lcd_gotoxy
   942 ;;		_lcd_putrs
   943 ;;		_leer_teclado
   944 ;;		_restaurar_comando
   945 ;;		_validar_comando
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text0
   952  00136C                     __ptext0:
   953                           	opt stack 0
   954  00136C                     _main:
   955                           	opt stack 22
   956                           
   957                           ;main.c: 133: Setup();
   958                           
   959                           ; BSR set to: 15
   960                           ;incstack = 0
   961  00136C  EC8C  F010         	call	_Setup	;wreg free
   962                           
   963                           ;main.c: 134: int ocultar_teclas = 1;
   964  001370  0E00               	movlw	0
   965  001372  6E3A               	movwf	main@ocultar_teclas+1,c
   966  001374  0E01               	movlw	1
   967  001376  6E39               	movwf	main@ocultar_teclas,c
   968                           
   969                           ;main.c: 135: int validacion;
   970                           ;main.c: 136: restaurar_comando();
   971  001378  EC4B  F011         	call	_restaurar_comando	;wreg free
   972  00137C  D000               	goto	l2784
   973  00137E                     l2784:
   974                           
   975                           ;main.c: 139: {
   976                           ;main.c: 140: Read_RTC();
   977  00137E  EC96  F00B         	call	_Read_RTC	;wreg free
   978                           
   979                           ;main.c: 142: if (!autorizado){
   980  001382  5041               	movf	_autorizado,w,c
   981  001384  1042               	iorwf	_autorizado+1,w,c
   982  001386  A4D8               	btfss	status,2,c
   983  001388  D00D               	goto	l2792
   984                           
   985                           ;main.c: 143: leer_teclado(ocultar_teclas,mostrar_guardar_password);
   986  00138A  C039  F02E         	movff	main@ocultar_teclas,leer_teclado@ocultar
   987  00138E  C03A  F02F         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
   988  001392  0E1E               	movlw	low _mostrar_guardar_password
   989  001394  6E30               	movwf	leer_teclado@doit,c
   990  001396  0E22               	movlw	high _mostrar_guardar_password
   991  001398  6E31               	movwf	leer_teclado@doit+1,c
   992  00139A  EC07  F00B         	call	_leer_teclado	;wreg free
   993                           
   994                           ;main.c: 144: ingresar_password();
   995  00139E  ECA4  F00C         	call	_ingresar_password	;wreg free
   996                           
   997                           ;main.c: 145: }else{
   998  0013A2  D7ED               	goto	l2784
   999  0013A4                     l2792:
  1000                           
  1001                           ;main.c: 146: leer_teclado(!ocultar_teclas,ingresar_comando);
  1002  0013A4  5039               	movf	main@ocultar_teclas,w,c
  1003  0013A6  103A               	iorwf	main@ocultar_teclas+1,w,c
  1004  0013A8  A4D8               	btfss	status,2,c
  1005  0013AA  D002               	goto	u2290
  1006  0013AC  0E01               	movlw	1
  1007  0013AE  D001               	goto	u2300
  1008  0013B0                     u2290:
  1009  0013B0  0E00               	movlw	0
  1010  0013B2                     u2300:
  1011  0013B2  6E2E               	movwf	leer_teclado@ocultar,c
  1012  0013B4  6A2F               	clrf	leer_teclado@ocultar+1,c
  1013  0013B6  0E2A               	movlw	low _ingresar_comando
  1014  0013B8  6E30               	movwf	leer_teclado@doit,c
  1015  0013BA  0E23               	movlw	high _ingresar_comando
  1016  0013BC  6E31               	movwf	leer_teclado@doit+1,c
  1017  0013BE  EC07  F00B         	call	_leer_teclado	;wreg free
  1018                           
  1019                           ;main.c: 148: validar_comando("xxx",&validacion);
  1020  0013C2  0E79               	movlw	low STR_15
  1021  0013C4  6E01               	movwf	validar_comando@candidato,c
  1022  0013C6  0E0F               	movlw	high STR_15
  1023  0013C8  6E02               	movwf	validar_comando@candidato+1,c
  1024  0013CA  0E3F               	movlw	low main@validacion
  1025  0013CC  6E03               	movwf	validar_comando@validar,c
  1026  0013CE  0E00               	movlw	high main@validacion
  1027  0013D0  6E04               	movwf	validar_comando@validar+1,c
  1028  0013D2  ECA9  F00E         	call	_validar_comando	;wreg free
  1029                           
  1030                           ;main.c: 149: if(validacion)
  1031  0013D6  503F               	movf	main@validacion,w,c
  1032  0013D8  1040               	iorwf	main@validacion+1,w,c
  1033  0013DA  B4D8               	btfsc	status,2,c
  1034  0013DC  D007               	goto	l2800
  1035                           
  1036                           ;main.c: 150: caratula("Welcome ");
  1037  0013DE  0E63               	movlw	low STR_16
  1038  0013E0  6E24               	movwf	caratula@titulo,c
  1039  0013E2  0E0F               	movlw	high STR_16
  1040  0013E4  6E25               	movwf	caratula@titulo+1,c
  1041  0013E6  EC1E  F00D         	call	_caratula	;wreg free
  1042  0013EA  D000               	goto	l2800
  1043  0013EC                     l2800:
  1044                           
  1045                           ;main.c: 152: validar_comando("001",&validacion);
  1046  0013EC  0E71               	movlw	low STR_17
  1047  0013EE  6E01               	movwf	validar_comando@candidato,c
  1048  0013F0  0E0F               	movlw	high STR_17
  1049  0013F2  6E02               	movwf	validar_comando@candidato+1,c
  1050  0013F4  0E3F               	movlw	low main@validacion
  1051  0013F6  6E03               	movwf	validar_comando@validar,c
  1052  0013F8  0E00               	movlw	high main@validacion
  1053  0013FA  6E04               	movwf	validar_comando@validar+1,c
  1054  0013FC  ECA9  F00E         	call	_validar_comando	;wreg free
  1055                           
  1056                           ;main.c: 153: if(validacion){
  1057  001400  503F               	movf	main@validacion,w,c
  1058  001402  1040               	iorwf	main@validacion+1,w,c
  1059  001404  B4D8               	btfsc	status,2,c
  1060  001406  D028               	goto	l2820
  1061                           
  1062                           ;main.c: 154: lcd_gotoxy(1,2);
  1063  001408  0E02               	movlw	2
  1064  00140A  6E05               	movwf	lcd_gotoxy@y,c
  1065  00140C  0E01               	movlw	1
  1066  00140E  EC39  F011         	call	_lcd_gotoxy
  1067                           
  1068                           ;main.c: 155: lcd_putrs("Menu fecha");
  1069  001412  0E4D               	movlw	low STR_18
  1070  001414  6E09               	movwf	lcd_putrs@ptr,c
  1071  001416  0E0F               	movlw	high STR_18
  1072  001418  6E0A               	movwf	lcd_putrs@ptr+1,c
  1073  00141A  EC16  F010         	call	_lcd_putrs	;wreg free
  1074                           
  1075                           ;main.c: 156: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1076  00141E  0E00               	movlw	0
  1077  001420  6E3C               	movwf	main@i+1,c
  1078  001422  0E00               	movlw	0
  1079  001424  6E3B               	movwf	main@i,c
  1080  001426                     l2810:
  1081  001426  BE3C               	btfsc	main@i+1,7,c
  1082  001428  D008               	goto	l2814
  1083  00142A  503C               	movf	main@i+1,w,c
  1084  00142C  E112               	bnz	l2818
  1085  00142E  0E0A               	movlw	10
  1086  001430  5C3B               	subwf	main@i,w,c
  1087  001432  B0D8               	btfsc	status,0,c
  1088  001434  D00E               	goto	l2818
  1089  001436  D001               	goto	l2814
  1090  001438  D00C               	goto	l2818
  1091  00143A                     l2814:
  1092  00143A  0EFF               	movlw	255
  1093  00143C  6E38               	movwf	??_main& (0+255),c
  1094  00143E  0E8A               	movlw	138
  1095  001440                     u2397:
  1096  001440  2EE8               	decfsz	wreg,f,c
  1097  001442  D7FE               	goto	u2397
  1098  001444  2E38               	decfsz	??_main& (0+255),f,c
  1099  001446  D7FC               	goto	u2397
  1100  001448  D000               	nop2	
  1101  00144A  4A3B               	infsnz	main@i,f,c
  1102  00144C  2A3C               	incf	main@i+1,f,c
  1103  00144E  D7EB               	goto	l2810
  1104  001450  D000               	goto	l2818
  1105  001452                     l2818:
  1106                           
  1107                           ;main.c: 157: restaurar_comando();
  1108  001452  EC4B  F011         	call	_restaurar_comando	;wreg free
  1109  001456  D000               	goto	l2820
  1110  001458                     l2820:
  1111                           
  1112                           ;main.c: 158: }
  1113                           ;main.c: 160: validar_comando("002",&validacion);
  1114  001458  0E75               	movlw	low STR_19
  1115  00145A  6E01               	movwf	validar_comando@candidato,c
  1116  00145C  0E0F               	movlw	high STR_19
  1117  00145E  6E02               	movwf	validar_comando@candidato+1,c
  1118  001460  0E3F               	movlw	low main@validacion
  1119  001462  6E03               	movwf	validar_comando@validar,c
  1120  001464  0E00               	movlw	high main@validacion
  1121  001466  6E04               	movwf	validar_comando@validar+1,c
  1122  001468  ECA9  F00E         	call	_validar_comando	;wreg free
  1123                           
  1124                           ;main.c: 161: if(validacion){
  1125  00146C  503F               	movf	main@validacion,w,c
  1126  00146E  1040               	iorwf	main@validacion+1,w,c
  1127  001470  B4D8               	btfsc	status,2,c
  1128  001472  D785               	goto	l2784
  1129                           
  1130                           ;main.c: 162: lcd_gotoxy(1,2);
  1131  001474  0E02               	movlw	2
  1132  001476  6E05               	movwf	lcd_gotoxy@y,c
  1133  001478  0E01               	movlw	1
  1134  00147A  EC39  F011         	call	_lcd_gotoxy
  1135                           
  1136                           ;main.c: 163: lcd_putrs("cambiar pass");
  1137  00147E  0E40               	movlw	low STR_20
  1138  001480  6E09               	movwf	lcd_putrs@ptr,c
  1139  001482  0E0F               	movlw	high STR_20
  1140  001484  6E0A               	movwf	lcd_putrs@ptr+1,c
  1141  001486  EC16  F010         	call	_lcd_putrs	;wreg free
  1142                           
  1143                           ;main.c: 164: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1144  00148A  0E00               	movlw	0
  1145  00148C  6E3E               	movwf	main@i_995+1,c
  1146  00148E  0E00               	movlw	0
  1147  001490  6E3D               	movwf	main@i_995,c
  1148  001492                     l2830:
  1149  001492  BE3E               	btfsc	main@i_995+1,7,c
  1150  001494  D008               	goto	l2834
  1151  001496  503E               	movf	main@i_995+1,w,c
  1152  001498  E112               	bnz	l2838
  1153  00149A  0E0A               	movlw	10
  1154  00149C  5C3D               	subwf	main@i_995,w,c
  1155  00149E  B0D8               	btfsc	status,0,c
  1156  0014A0  D00E               	goto	l2838
  1157  0014A2  D001               	goto	l2834
  1158  0014A4  D00C               	goto	l2838
  1159  0014A6                     l2834:
  1160  0014A6  0EFF               	movlw	255
  1161  0014A8  6E38               	movwf	??_main& (0+255),c
  1162  0014AA  0E8A               	movlw	138
  1163  0014AC                     u2407:
  1164  0014AC  2EE8               	decfsz	wreg,f,c
  1165  0014AE  D7FE               	goto	u2407
  1166  0014B0  2E38               	decfsz	??_main& (0+255),f,c
  1167  0014B2  D7FC               	goto	u2407
  1168  0014B4  D000               	nop2	
  1169  0014B6  4A3D               	infsnz	main@i_995,f,c
  1170  0014B8  2A3E               	incf	main@i_995+1,f,c
  1171  0014BA  D7EB               	goto	l2830
  1172  0014BC  D000               	goto	l2838
  1173  0014BE                     l2838:
  1174                           
  1175                           ;main.c: 165: restaurar_comando();
  1176  0014BE  EC4B  F011         	call	_restaurar_comando	;wreg free
  1177  0014C2  D75D               	goto	l2784
  1178                           
  1179                           ;main.c: 166: }
  1180                           ;main.c: 168: }
  1181                           ;main.c: 169: }
  1182                           ;main.c: 170: return 0;
  1183                           ;	Return value of _main is never used
  1184  0014C4  EF00  F000         	goto	start
  1185  0014C8                     __end_of_main:
  1186                           	opt stack 0
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           fsr1l	equ	0xFE1
  1195                           status	equ	0xFD8
  1196                           
  1197 ;; *************** function _validar_comando *****************
  1198 ;; Defined at:
  1199 ;;		line 28 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1202 ;;		 -> STR_19(4), STR_17(4), STR_15(4), 
  1203 ;;  validar         2    2[COMRAM] PTR int 
  1204 ;;		 -> main@validacion(2), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  i               2    7[COMRAM] int 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  2    0[COMRAM] int 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1218 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1219 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1220 ;;Total ram usage:        9 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text1
  1230  001D52                     __ptext1:
  1231                           	opt stack 0
  1232  001D52                     _validar_comando:
  1233                           	opt stack 30
  1234                           
  1235                           ;headers\teclado.h: 30: *validar=1;
  1236                           
  1237                           ;incstack = 0
  1238  001D52  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1239  001D56  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1240  001D5A  0E01               	movlw	1
  1241  001D5C  6EDE               	movwf	postinc2,c
  1242  001D5E  0E00               	movlw	0
  1243  001D60  6EDD               	movwf	postdec2,c
  1244                           
  1245                           ;headers\teclado.h: 31: int i = 0;
  1246  001D62  0E00               	movlw	0
  1247  001D64  6E09               	movwf	validar_comando@i+1,c
  1248  001D66  0E00               	movlw	0
  1249  001D68  6E08               	movwf	validar_comando@i,c
  1250                           
  1251                           ;headers\teclado.h: 32: while (i < 3){
  1252  001D6A  D023               	goto	l2622
  1253  001D6C                     l2616:
  1254                           
  1255                           ;headers\teclado.h: 33: if (comando[i] != *(candidato+i))
  1256  001D6C  0EB6               	movlw	low _comando
  1257  001D6E  2408               	addwf	validar_comando@i,w,c
  1258  001D70  6ED9               	movwf	fsr2l,c
  1259  001D72  0E00               	movlw	high _comando
  1260  001D74  2009               	addwfc	validar_comando@i+1,w,c
  1261  001D76  6EDA               	movwf	fsr2h,c
  1262  001D78  50DF               	movf	indf2,w,c
  1263  001D7A  6E05               	movwf	??_validar_comando& (0+255),c
  1264  001D7C  5008               	movf	validar_comando@i,w,c
  1265  001D7E  2401               	addwf	validar_comando@candidato,w,c
  1266  001D80  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1267  001D82  5009               	movf	validar_comando@i+1,w,c
  1268  001D84  2002               	addwfc	validar_comando@candidato+1,w,c
  1269  001D86  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1270  001D88  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1271  001D8C  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1272  001D90                     	if	0	;tblptru may be non-zero
  1273  001D90                     	endif
  1274  001D90                     	if	0	;tblptru may be non-zero
  1275  001D90                     	endif
  1276  001D90  0008               	tblrd		*
  1277  001D92  50F5               	movf	tablat,w,c
  1278  001D94  1805               	xorwf	??_validar_comando,w,c
  1279  001D96  B4D8               	btfsc	status,2,c
  1280  001D98  D009               	goto	l2620
  1281                           
  1282                           ;headers\teclado.h: 34: *validar = 0;
  1283  001D9A  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1284  001D9E  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1285  001DA2  0E00               	movlw	0
  1286  001DA4  6EDE               	movwf	postinc2,c
  1287  001DA6  0E00               	movlw	0
  1288  001DA8  6EDD               	movwf	postdec2,c
  1289  001DAA  D000               	goto	l2620
  1290  001DAC                     l2620:
  1291                           
  1292                           ;headers\teclado.h: 36: i++;
  1293  001DAC  4A08               	infsnz	validar_comando@i,f,c
  1294  001DAE  2A09               	incf	validar_comando@i+1,f,c
  1295  001DB0  D000               	goto	l2622
  1296  001DB2                     l2622:
  1297  001DB2  BE09               	btfsc	validar_comando@i+1,7,c
  1298  001DB4  D7DB               	goto	l2616
  1299  001DB6  5009               	movf	validar_comando@i+1,w,c
  1300  001DB8  E106               	bnz	l157
  1301  001DBA  0E03               	movlw	3
  1302  001DBC  5C08               	subwf	validar_comando@i,w,c
  1303  001DBE  B0D8               	btfsc	status,0,c
  1304  001DC0  0012               	return	
  1305  001DC2  D7D4               	goto	l2616
  1306  001DC4  0012               	return	
  1307  001DC6                     l157:
  1308  001DC6  0012               	return		;funcret
  1309  001DC8                     __end_of_validar_comando:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1l	equ	0xFE1
  1319                           indf2	equ	0xFDF
  1320                           postinc2	equ	0xFDE
  1321                           postdec2	equ	0xFDD
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function _restaurar_comando *****************
  1327 ;; Defined at:
  1328 ;;		line 50 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  2  164[None  ] int 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_main
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text2
  1356  002296                     __ptext2:
  1357                           	opt stack 0
  1358  002296                     _restaurar_comando:
  1359                           	opt stack 30
  1360                           
  1361                           ;headers\teclado.h: 51: tamanio_comando = 0;
  1362                           
  1363                           ;incstack = 0
  1364  002296  0E00               	movlw	0
  1365  002298  6E46               	movwf	_tamanio_comando+1,c
  1366  00229A  0E00               	movlw	0
  1367  00229C  6E45               	movwf	_tamanio_comando,c
  1368                           
  1369                           ;headers\teclado.h: 53: comando[0]='x';
  1370  00229E  0E78               	movlw	120
  1371  0022A0  0100               	movlb	0	; () banked
  1372  0022A2  6FB6               	movwf	_comando& (0+255),b
  1373                           
  1374                           ;headers\teclado.h: 54: comando[1]='x';
  1375  0022A4  0E78               	movlw	120
  1376  0022A6  0100               	movlb	0	; () banked
  1377  0022A8  6FB7               	movwf	(_comando+1)& (0+255),b
  1378                           
  1379                           ;headers\teclado.h: 55: comando[2]='x';
  1380  0022AA  0E78               	movlw	120
  1381  0022AC  0100               	movlb	0	; () banked
  1382  0022AE  6FB8               	movwf	(_comando+2)& (0+255),b
  1383                           
  1384                           ;headers\teclado.h: 56: comando[3]='\0';
  1385  0022B0  0E00               	movlw	0
  1386  0022B2  0100               	movlb	0	; () banked
  1387  0022B4  6FB9               	movwf	(_comando+3)& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390  0022B6  0012               	return		;funcret
  1391  0022B8                     __end_of_restaurar_comando:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           indf2	equ	0xFDF
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function _leer_teclado *****************
  1409 ;; Defined at:
  1410 ;;		line 66 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  ocultar         2   45[COMRAM] int 
  1413 ;;  doit            2   47[COMRAM] PTR FTN()PTR unsigned ch
  1414 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  i               2   50[COMRAM] int 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  2   45[COMRAM] int 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1429 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;Total ram usage:        7 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    8
  1433 ;; This function calls:
  1434 ;;		_guardar_tecla_presionada
  1435 ;;		_ingresar_comando
  1436 ;;		_lcd_putrs
  1437 ;;		_mostrar_guardar_password
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text3
  1444  00160E                     __ptext3:
  1445                           	opt stack 0
  1446  00160E                     _leer_teclado:
  1447                           	opt stack 22
  1448                           
  1449                           ;headers\teclado.h: 67: int i;
  1450                           ;headers\teclado.h: 68: ocultar_teclas = ocultar;
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;incstack = 0
  1454  00160E  C02E  F08E         	movff	leer_teclado@ocultar,_ocultar_teclas
  1455  001612  C02F  F08F         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1456                           
  1457                           ;headers\teclado.h: 70: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=1;
  1458  001616  8089               	bsf	3977,0,c	;volatile
  1459  001618  9289               	bcf	3977,1,c	;volatile
  1460  00161A  9489               	bcf	3977,2,c	;volatile
  1461  00161C  9689               	bcf	3977,3,c	;volatile
  1462  00161E  0E00               	movlw	0
  1463  001620  6E34               	movwf	leer_teclado@i+1,c
  1464  001622  0E01               	movlw	1
  1465  001624  6E33               	movwf	leer_teclado@i,c
  1466                           
  1467                           ;headers\teclado.h: 71: guardar_tecla_presionada("A",i,doit);
  1468  001626  0E81               	movlw	low STR_4
  1469  001628  6E28               	movwf	guardar_tecla_presionada@letra,c
  1470  00162A  0E0F               	movlw	high STR_4
  1471  00162C  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1472  00162E  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1473  001632  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1474  001636  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1475  00163A  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1476  00163E  EC89  F00D         	call	_guardar_tecla_presionada	;wreg free
  1477                           
  1478                           ;headers\teclado.h: 73: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=4;
  1479  001642  9089               	bcf	3977,0,c	;volatile
  1480  001644  8289               	bsf	3977,1,c	;volatile
  1481  001646  9489               	bcf	3977,2,c	;volatile
  1482  001648  9689               	bcf	3977,3,c	;volatile
  1483  00164A  0E00               	movlw	0
  1484  00164C  6E34               	movwf	leer_teclado@i+1,c
  1485  00164E  0E04               	movlw	4
  1486  001650  6E33               	movwf	leer_teclado@i,c
  1487                           
  1488                           ;headers\teclado.h: 74: guardar_tecla_presionada("B",i,doit);
  1489  001652  0E83               	movlw	low STR_5
  1490  001654  6E28               	movwf	guardar_tecla_presionada@letra,c
  1491  001656  0E0F               	movlw	high STR_5
  1492  001658  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1493  00165A  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1494  00165E  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1495  001662  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1496  001666  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1497  00166A  EC89  F00D         	call	_guardar_tecla_presionada	;wreg free
  1498                           
  1499                           ;headers\teclado.h: 76: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA
      +                          3=0;i=7;
  1500  00166E  9089               	bcf	3977,0,c	;volatile
  1501  001670  9289               	bcf	3977,1,c	;volatile
  1502  001672  8489               	bsf	3977,2,c	;volatile
  1503  001674  9689               	bcf	3977,3,c	;volatile
  1504  001676  0E00               	movlw	0
  1505  001678  6E34               	movwf	leer_teclado@i+1,c
  1506  00167A  0E07               	movlw	7
  1507  00167C  6E33               	movwf	leer_teclado@i,c
  1508                           
  1509                           ;headers\teclado.h: 77: guardar_tecla_presionada("C",i,doit);
  1510  00167E  0E85               	movlw	low STR_6
  1511  001680  6E28               	movwf	guardar_tecla_presionada@letra,c
  1512  001682  0E0F               	movlw	high STR_6
  1513  001684  6E29               	movwf	guardar_tecla_presionada@letra+1,c
  1514  001686  C033  F02A         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1515  00168A  C034  F02B         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1516  00168E  C030  F02C         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1517  001692  C031  F02D         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1518  001696  EC89  F00D         	call	_guardar_tecla_presionada	;wreg free
  1519                           
  1520                           ;headers\teclado.h: 79: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=1;
  1521  00169A  9089               	bcf	3977,0,c	;volatile
  1522  00169C  9289               	bcf	3977,1,c	;volatile
  1523  00169E  9489               	bcf	3977,2,c	;volatile
  1524  0016A0  8689               	bsf	3977,3,c	;volatile
  1525                           
  1526                           ;headers\teclado.h: 80: {
  1527                           ;headers\teclado.h: 81: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5=
      +                          =1){};}
  1528  0016A2  AA80               	btfss	3968,5,c	;volatile
  1529  0016A4  D00B               	goto	l187
  1530  0016A6  0E12               	movlw	18
  1531  0016A8  6E49               	movwf	_key,c
  1532  0016AA  0E7F               	movlw	low STR_3
  1533  0016AC  6E09               	movwf	lcd_putrs@ptr,c
  1534  0016AE  0E0F               	movlw	high STR_3
  1535  0016B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1536  0016B2  EC16  F010         	call	_lcd_putrs	;wreg free
  1537  0016B6  D000               	goto	l188
  1538  0016B8                     l188:
  1539  0016B8  BA80               	btfsc	3968,5,c	;volatile
  1540  0016BA  D7FE               	goto	l188
  1541  0016BC                     l187:
  1542                           
  1543                           ;headers\teclado.h: 82: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};
      +                          }
  1544  0016BC  AE80               	btfss	3968,7,c	;volatile
  1545  0016BE  D011               	goto	l191
  1546  0016C0  0E00               	movlw	0
  1547  0016C2  6E49               	movwf	_key,c
  1548  0016C4  D801               	call	u2138
  1549  0016C6  D00B               	goto	l192
  1550  0016C8                     u2138:
  1551  0016C8  0005               	push	
  1552  0016CA  6EFA               	movwf	pclath,c
  1553  0016CC  5030               	movf	leer_teclado@doit,w,c
  1554  0016CE  6EFD               	movwf	tosl,c
  1555  0016D0  5031               	movf	leer_teclado@doit+1,w,c
  1556  0016D2  6EFE               	movwf	tosh,c
  1557  0016D4  50F8               	movf	tblptru,w,c
  1558  0016D6  6EFF               	movwf	tosu,c
  1559  0016D8  50FA               	movf	pclath,w,c
  1560  0016DA  5049               	movf	_key,w,c
  1561  0016DC  0012               	return		;indir
  1562  0016DE                     l192:
  1563  0016DE  BE80               	btfsc	3968,7,c	;volatile
  1564  0016E0  D7FE               	goto	l192
  1565  0016E2                     l191:
  1566                           
  1567                           ;headers\teclado.h: 83: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6=
      +                          =1){};}
  1568  0016E2  AC80               	btfss	3968,6,c	;volatile
  1569  0016E4  D00B               	goto	l195
  1570  0016E6  0E13               	movlw	19
  1571  0016E8  6E49               	movwf	_key,c
  1572  0016EA  0E7D               	movlw	low STR_8
  1573  0016EC  6E09               	movwf	lcd_putrs@ptr,c
  1574  0016EE  0E0F               	movlw	high STR_8
  1575  0016F0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1576  0016F2  EC16  F010         	call	_lcd_putrs
  1577  0016F6  D000               	goto	l196
  1578  0016F8                     l196:
  1579  0016F8  BC80               	btfsc	3968,6,c	;volatile
  1580  0016FA  D7FE               	goto	l196
  1581  0016FC                     l195:
  1582                           
  1583                           ;headers\teclado.h: 84: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2
      +                          ==1){};}
  1584  0016FC  A482               	btfss	3970,2,c	;volatile
  1585  0016FE  D00D               	goto	l2680
  1586  001700  0E44               	movlw	68
  1587  001702  6E49               	movwf	_key,c
  1588  001704  0E87               	movlw	low STR_9
  1589  001706  6E09               	movwf	lcd_putrs@ptr,c
  1590  001708  0E0F               	movlw	high STR_9
  1591  00170A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1592  00170C  EC16  F010         	call	_lcd_putrs	;wreg free
  1593  001710  D000               	goto	l200
  1594  001712                     l200:
  1595  001712  A482               	btfss	3970,2,c	;volatile
  1596  001714  D002               	goto	l2680
  1597  001716  D7FD               	goto	l200
  1598  001718  D000               	goto	l2680
  1599  00171A                     l2680:
  1600                           
  1601                           ;headers\teclado.h: 85: }
  1602                           ;headers\teclado.h: 86: _delay((unsigned long)((98)*(8000000/4000.0)));
  1603  00171A  0EFF               	movlw	255
  1604  00171C  6E32               	movwf	??_leer_teclado& (0+255),c
  1605  00171E  0E8A               	movlw	138
  1606  001720                     u2417:
  1607  001720  2EE8               	decfsz	wreg,f,c
  1608  001722  D7FE               	goto	u2417
  1609  001724  2E32               	decfsz	??_leer_teclado& (0+255),f,c
  1610  001726  D7FC               	goto	u2417
  1611  001728  D000               	nop2	
  1612  00172A  0012               	return		;funcret
  1613  00172C                     __end_of_leer_teclado:
  1614                           	opt stack 0
  1615                           tosu	equ	0xFFF
  1616                           tosh	equ	0xFFE
  1617                           tosl	equ	0xFFD
  1618                           pclath	equ	0xFFA
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           postdec1	equ	0xFE5
  1626                           fsr1l	equ	0xFE1
  1627                           indf2	equ	0xFDF
  1628                           postinc2	equ	0xFDE
  1629                           postdec2	equ	0xFDD
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _guardar_tecla_presionada *****************
  1635 ;; Defined at:
  1636 ;;		line 59 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  letra           2   39[COMRAM] PTR unsigned char 
  1639 ;;		 -> STR_6(2), STR_5(2), STR_4(2), 
  1640 ;;  i               2   41[COMRAM] int 
  1641 ;;  doit            2   43[COMRAM] PTR FTN(PTR unsigned cha
  1642 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  2   39[COMRAM] int 
  1647 ;; Registers used:
  1648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1654 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1658 ;;Total ram usage:        6 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    7
  1661 ;; This function calls:
  1662 ;;		_ingresar_comando
  1663 ;;		_lcd_putrs
  1664 ;;		_mostrar_guardar_password
  1665 ;; This function is called by:
  1666 ;;		_leer_teclado
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text4
  1671  001B12                     __ptext4:
  1672                           	opt stack 0
  1673  001B12                     _guardar_tecla_presionada:
  1674                           	opt stack 22
  1675                           
  1676                           ;headers\teclado.h: 60: if (PORTAbits.RA5==1){key=i; doit(key);while(PORTAbits.RA5==1){}
      +                          ;}
  1677                           
  1678                           ;incstack = 0
  1679  001B12  AA80               	btfss	3968,5,c	;volatile
  1680  001B14  D012               	goto	l168
  1681  001B16  C02A  F049         	movff	guardar_tecla_presionada@i,_key
  1682  001B1A  C049  FFE8         	movff	_key,wreg
  1683  001B1E  D801               	call	u1918
  1684  001B20  D00A               	goto	l169
  1685  001B22                     u1918:
  1686  001B22  0005               	push	
  1687  001B24  6EFA               	movwf	pclath,c
  1688  001B26  502C               	movf	guardar_tecla_presionada@doit,w,c
  1689  001B28  6EFD               	movwf	tosl,c
  1690  001B2A  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1691  001B2C  6EFE               	movwf	tosh,c
  1692  001B2E  50F8               	movf	tblptru,w,c
  1693  001B30  6EFF               	movwf	tosu,c
  1694  001B32  50FA               	movf	pclath,w,c
  1695  001B34  0012               	return		;indir
  1696  001B36                     l169:
  1697  001B36  BA80               	btfsc	3968,5,c	;volatile
  1698  001B38  D7FE               	goto	l169
  1699  001B3A                     l168:
  1700                           
  1701                           ;headers\teclado.h: 61: if (PORTAbits.RA7==1){key=(i)+1; doit(key);while(PORTAbits.RA7==
      +                          1){};}
  1702  001B3A  AE80               	btfss	3968,7,c	;volatile
  1703  001B3C  D012               	goto	l172
  1704  001B3E  282A               	incf	guardar_tecla_presionada@i,w,c
  1705  001B40  6E49               	movwf	_key,c
  1706  001B42  C049  FFE8         	movff	_key,wreg
  1707  001B46  D801               	call	u1948
  1708  001B48  D00A               	goto	l173
  1709  001B4A                     u1948:
  1710  001B4A  0005               	push	
  1711  001B4C  6EFA               	movwf	pclath,c
  1712  001B4E  502C               	movf	guardar_tecla_presionada@doit,w,c
  1713  001B50  6EFD               	movwf	tosl,c
  1714  001B52  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1715  001B54  6EFE               	movwf	tosh,c
  1716  001B56  50F8               	movf	tblptru,w,c
  1717  001B58  6EFF               	movwf	tosu,c
  1718  001B5A  50FA               	movf	pclath,w,c
  1719  001B5C  0012               	return		;indir
  1720  001B5E                     l173:
  1721  001B5E  BE80               	btfsc	3968,7,c	;volatile
  1722  001B60  D7FE               	goto	l173
  1723  001B62                     l172:
  1724                           
  1725                           ;headers\teclado.h: 62: if (PORTAbits.RA6==1){key=(i)+2; doit(key);while(PORTAbits.RA6==
      +                          1){};}
  1726  001B62  AC80               	btfss	3968,6,c	;volatile
  1727  001B64  D013               	goto	l176
  1728  001B66  502A               	movf	guardar_tecla_presionada@i,w,c
  1729  001B68  0F02               	addlw	2
  1730  001B6A  6E49               	movwf	_key,c
  1731  001B6C  C049  FFE8         	movff	_key,wreg
  1732  001B70  D801               	call	u1978
  1733  001B72  D00A               	goto	l177
  1734  001B74                     u1978:
  1735  001B74  0005               	push	
  1736  001B76  6EFA               	movwf	pclath,c
  1737  001B78  502C               	movf	guardar_tecla_presionada@doit,w,c
  1738  001B7A  6EFD               	movwf	tosl,c
  1739  001B7C  502D               	movf	guardar_tecla_presionada@doit+1,w,c
  1740  001B7E  6EFE               	movwf	tosh,c
  1741  001B80  50F8               	movf	tblptru,w,c
  1742  001B82  6EFF               	movwf	tosu,c
  1743  001B84  50FA               	movf	pclath,w,c
  1744  001B86  0012               	return		;indir
  1745  001B88                     l177:
  1746  001B88  BC80               	btfsc	3968,6,c	;volatile
  1747  001B8A  D7FE               	goto	l177
  1748  001B8C                     l176:
  1749                           
  1750                           ;headers\teclado.h: 63: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbit
      +                          s.RC2==1){};}
  1751  001B8C  A482               	btfss	3970,2,c	;volatile
  1752  001B8E  0012               	return	
  1753  001B90  502A               	movf	guardar_tecla_presionada@i,w,c
  1754  001B92  0F0A               	addlw	10
  1755  001B94  6E49               	movwf	_key,c
  1756  001B96  C028  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1757  001B9A  C029  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1758  001B9E  EC16  F010         	call	_lcd_putrs	;wreg free
  1759  001BA2  D000               	goto	l181
  1760  001BA4                     l181:
  1761  001BA4  A482               	btfss	3970,2,c	;volatile
  1762  001BA6  0012               	return	
  1763  001BA8  D7FD               	goto	l181
  1764  001BAA  0012               	return	
  1765  001BAC  0012               	return		;funcret
  1766  001BAE                     __end_of_guardar_tecla_presionada:
  1767                           	opt stack 0
  1768                           tosu	equ	0xFFF
  1769                           tosh	equ	0xFFE
  1770                           tosl	equ	0xFFD
  1771                           pclath	equ	0xFFA
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           indf2	equ	0xFDF
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _ingresar_comando *****************
  1788 ;; Defined at:
  1789 ;;		line 122 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  key             1    wreg     unsigned char 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  key             1   38[COMRAM] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  2  246[None  ] int 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1807 ;;Total ram usage:        1 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    3
  1810 ;; This function calls:
  1811 ;;		_guardar_comando
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;;		_guardar_tecla_presionada
  1815 ;;		_leer_teclado
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text5
  1820  00232A                     __ptext5:
  1821                           	opt stack 0
  1822  00232A                     _ingresar_comando:
  1823                           	opt stack 26
  1824                           
  1825                           ;incstack = 0
  1826                           ;ingresar_comando@key stored from wreg
  1827  00232A  6E27               	movwf	ingresar_comando@key,c
  1828                           
  1829                           ;main.c: 123: guardar_comando(key);
  1830  00232C  5027               	movf	ingresar_comando@key,w,c
  1831  00232E  EC88  F00F         	call	_guardar_comando
  1832  002332  0012               	return		;funcret
  1833  002334                     __end_of_ingresar_comando:
  1834                           	opt stack 0
  1835                           tosu	equ	0xFFF
  1836                           tosh	equ	0xFFE
  1837                           tosl	equ	0xFFD
  1838                           pclath	equ	0xFFA
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           indf2	equ	0xFDF
  1848                           postinc2	equ	0xFDE
  1849                           postdec2	equ	0xFDD
  1850                           fsr2h	equ	0xFDA
  1851                           fsr2l	equ	0xFD9
  1852                           status	equ	0xFD8
  1853                           
  1854 ;; *************** function _mostrar_guardar_password *****************
  1855 ;; Defined at:
  1856 ;;		line 114 in file "main.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;  tecla           1    wreg     unsigned char 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  tecla           1   36[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  2  243[None  ] int 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1874 ;;Total ram usage:        1 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    6
  1877 ;; This function calls:
  1878 ;;		_guardar_current_password
  1879 ;;		_imprimir_tecla
  1880 ;;		_sprintf
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;;		_guardar_tecla_presionada
  1884 ;;		_leer_teclado
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text6
  1889  00221E                     __ptext6:
  1890                           	opt stack 0
  1891  00221E                     _mostrar_guardar_password:
  1892                           	opt stack 23
  1893                           
  1894                           ;incstack = 0
  1895                           ;mostrar_guardar_password@tecla stored from wreg
  1896  00221E  6E25               	movwf	mostrar_guardar_password@tecla,c
  1897                           
  1898                           ;main.c: 116: imprimir_tecla(tecla);
  1899  002220  5025               	movf	mostrar_guardar_password@tecla,w,c
  1900  002222  ECB0  F010         	call	_imprimir_tecla
  1901                           
  1902                           ;main.c: 117: sprintf(buffer2,"%01u",tecla);
  1903  002226  0E90               	movlw	low _buffer2
  1904  002228  6E0D               	movwf	sprintf@sp,c
  1905  00222A  0E00               	movlw	high _buffer2
  1906  00222C  6E0E               	movwf	sprintf@sp+1,c
  1907  00222E  0E6C               	movlw	low STR_1
  1908  002230  6E0F               	movwf	sprintf@f,c
  1909  002232  0E0F               	movlw	high STR_1
  1910  002234  6E10               	movwf	sprintf@f+1,c
  1911  002236  C025  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  1912  00223A  6A12               	clrf	?_sprintf+5,c
  1913  00223C  ECC5  F007         	call	_sprintf	;wreg free
  1914                           
  1915                           ;main.c: 118: guardar_current_password(*buffer2);
  1916  002240  0100               	movlb	0	; () banked
  1917  002242  5190               	movf	_buffer2& (0+255),w,b
  1918  002244  ECD3  F010         	call	_guardar_current_password
  1919  002248  0012               	return		;funcret
  1920  00224A                     __end_of_mostrar_guardar_password:
  1921                           	opt stack 0
  1922                           tosu	equ	0xFFF
  1923                           tosh	equ	0xFFE
  1924                           tosl	equ	0xFFD
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           fsr2h	equ	0xFDA
  1938                           fsr2l	equ	0xFD9
  1939                           status	equ	0xFD8
  1940                           
  1941 ;; *************** function _imprimir_tecla *****************
  1942 ;; Defined at:
  1943 ;;		line 40 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  tecla           1    wreg     unsigned char 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  tecla           1   35[COMRAM] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  2  159[None  ] int 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;Total ram usage:        1 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    5
  1964 ;; This function calls:
  1965 ;;		_lcd_putrs
  1966 ;;		_sprintf
  1967 ;; This function is called by:
  1968 ;;		_mostrar_guardar_password
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text7
  1973  002160                     __ptext7:
  1974                           	opt stack 0
  1975  002160                     _imprimir_tecla:
  1976                           	opt stack 23
  1977                           
  1978                           ;incstack = 0
  1979                           ;imprimir_tecla@tecla stored from wreg
  1980  002160  6E24               	movwf	imprimir_tecla@tecla,c
  1981                           
  1982                           ;headers\teclado.h: 42: sprintf(buffer2,"%01u",tecla);
  1983  002162  0E90               	movlw	low _buffer2
  1984  002164  6E0D               	movwf	sprintf@sp,c
  1985  002166  0E00               	movlw	high _buffer2
  1986  002168  6E0E               	movwf	sprintf@sp+1,c
  1987  00216A  0E6C               	movlw	low STR_1
  1988  00216C  6E0F               	movwf	sprintf@f,c
  1989  00216E  0E0F               	movlw	high STR_1
  1990  002170  6E10               	movwf	sprintf@f+1,c
  1991  002172  C024  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  1992  002176  6A12               	clrf	?_sprintf+5,c
  1993  002178  ECC5  F007         	call	_sprintf	;wreg free
  1994                           
  1995                           ;headers\teclado.h: 43: if (ocultar_teclas == 1){
  1996  00217C  0100               	movlb	0	; () banked
  1997  00217E  058E               	decf	_ocultar_teclas& (0+255),w,b
  1998  002180  0100               	movlb	0	; () banked
  1999  002182  118F               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  2000  002184  A4D8               	btfss	status,2,c
  2001  002186  D007               	goto	l2202
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;headers\teclado.h: 44: lcd_putrs("*");
  2005  002188  0E7F               	movlw	low STR_3
  2006  00218A  6E09               	movwf	lcd_putrs@ptr,c
  2007  00218C  0E0F               	movlw	high STR_3
  2008  00218E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2009  002190  EC16  F010         	call	_lcd_putrs	;wreg free
  2010                           
  2011                           ;headers\teclado.h: 45: }else{
  2012  002194  0012               	return	
  2013  002196                     l2202:
  2014                           
  2015                           ;headers\teclado.h: 46: lcd_putrs(buffer2);
  2016  002196  0E90               	movlw	low _buffer2
  2017  002198  6E09               	movwf	lcd_putrs@ptr,c
  2018  00219A  0E00               	movlw	high _buffer2
  2019  00219C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2020  00219E  EC16  F010         	call	_lcd_putrs	;wreg free
  2021  0021A2  0012               	return	
  2022  0021A4  0012               	return		;funcret
  2023  0021A6                     __end_of_imprimir_tecla:
  2024                           	opt stack 0
  2025                           tosu	equ	0xFFF
  2026                           tosh	equ	0xFFE
  2027                           tosl	equ	0xFFD
  2028                           pclath	equ	0xFFA
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1l	equ	0xFE1
  2037                           indf2	equ	0xFDF
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _guardar_current_password *****************
  2045 ;; Defined at:
  2046 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  valor           1    wreg     unsigned char 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  valor           1    2[COMRAM] unsigned char 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  2  213[None  ] int 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2063 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2064 ;;Total ram usage:        3 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_mostrar_guardar_password
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text8
  2074  0021A6                     __ptext8:
  2075                           	opt stack 0
  2076  0021A6                     _guardar_current_password:
  2077                           	opt stack 28
  2078                           
  2079                           ;incstack = 0
  2080                           ;guardar_current_password@valor stored from wreg
  2081  0021A6  6E03               	movwf	guardar_current_password@valor,c
  2082                           
  2083                           ;headers\password.h: 15: if (tamanio_password < 6){
  2084  0021A8  BE48               	btfsc	_tamanio_password+1,7,c
  2085  0021AA  D006               	goto	l2206
  2086  0021AC  5048               	movf	_tamanio_password+1,w,c
  2087  0021AE  E11D               	bnz	l215
  2088  0021B0  0E06               	movlw	6
  2089  0021B2  5C47               	subwf	_tamanio_password,w,c
  2090  0021B4  B0D8               	btfsc	status,0,c
  2091  0021B6  0012               	return	
  2092  0021B8                     l2206:
  2093                           
  2094                           ;headers\password.h: 16: current_password[tamanio_password] = valor;
  2095  0021B8  0E78               	movlw	low _current_password
  2096  0021BA  2447               	addwf	_tamanio_password,w,c
  2097  0021BC  6ED9               	movwf	fsr2l,c
  2098  0021BE  0E00               	movlw	high _current_password
  2099  0021C0  2048               	addwfc	_tamanio_password+1,w,c
  2100  0021C2  6EDA               	movwf	fsr2h,c
  2101  0021C4  C003  FFDF         	movff	guardar_current_password@valor,indf2
  2102                           
  2103                           ;headers\password.h: 17: current_password [tamanio_password+1] = '\0';
  2104  0021C8  0E01               	movlw	1
  2105  0021CA  2447               	addwf	_tamanio_password,w,c
  2106  0021CC  6E01               	movwf	??_guardar_current_password& (0+255),c
  2107  0021CE  0E00               	movlw	0
  2108  0021D0  2048               	addwfc	_tamanio_password+1,w,c
  2109  0021D2  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  2110  0021D4  0E78               	movlw	low _current_password
  2111  0021D6  2401               	addwf	??_guardar_current_password,w,c
  2112  0021D8  6ED9               	movwf	fsr2l,c
  2113  0021DA  0E00               	movlw	high _current_password
  2114  0021DC  2002               	addwfc	??_guardar_current_password+1,w,c
  2115  0021DE  6EDA               	movwf	fsr2h,c
  2116  0021E0  0E00               	movlw	0
  2117  0021E2  6EDF               	movwf	indf2,c
  2118                           
  2119                           ;headers\password.h: 18: tamanio_password++;
  2120  0021E4  4A47               	infsnz	_tamanio_password,f,c
  2121  0021E6  2A48               	incf	_tamanio_password+1,f,c
  2122  0021E8  0012               	return	
  2123  0021EA                     l215:
  2124  0021EA  0012               	return		;funcret
  2125  0021EC                     __end_of_guardar_current_password:
  2126                           	opt stack 0
  2127                           tosu	equ	0xFFF
  2128                           tosh	equ	0xFFE
  2129                           tosl	equ	0xFFD
  2130                           pclath	equ	0xFFA
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postdec1	equ	0xFE5
  2138                           fsr1l	equ	0xFE1
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           postdec2	equ	0xFDD
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _guardar_comando *****************
  2147 ;; Defined at:
  2148 ;;		line 18 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  tecla           1    wreg     unsigned char 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  tecla           1   37[COMRAM] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  2  148[None  ] int 
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;Total ram usage:        3 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    2
  2169 ;; This function calls:
  2170 ;;		_sprintf
  2171 ;; This function is called by:
  2172 ;;		_ingresar_comando
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text9
  2177  001F10                     __ptext9:
  2178                           	opt stack 0
  2179  001F10                     _guardar_comando:
  2180                           	opt stack 26
  2181                           
  2182                           ;incstack = 0
  2183                           ;guardar_comando@tecla stored from wreg
  2184  001F10  6E26               	movwf	guardar_comando@tecla,c
  2185                           
  2186                           ;headers\teclado.h: 20: sprintf(buffer2,"%01u",tecla);
  2187  001F12  0E90               	movlw	low _buffer2
  2188  001F14  6E0D               	movwf	sprintf@sp,c
  2189  001F16  0E00               	movlw	high _buffer2
  2190  001F18  6E0E               	movwf	sprintf@sp+1,c
  2191  001F1A  0E6C               	movlw	low STR_1
  2192  001F1C  6E0F               	movwf	sprintf@f,c
  2193  001F1E  0E0F               	movlw	high STR_1
  2194  001F20  6E10               	movwf	sprintf@f+1,c
  2195  001F22  C026  F011         	movff	guardar_comando@tecla,?_sprintf+4
  2196  001F26  6A12               	clrf	?_sprintf+5,c
  2197  001F28  ECC5  F007         	call	_sprintf	;wreg free
  2198                           
  2199                           ;headers\teclado.h: 21: if (tamanio_comando <3){
  2200  001F2C  BE46               	btfsc	_tamanio_comando+1,7,c
  2201  001F2E  D006               	goto	l2192
  2202  001F30  5046               	movf	_tamanio_comando+1,w,c
  2203  001F32  E11D               	bnz	l150
  2204  001F34  0E03               	movlw	3
  2205  001F36  5C45               	subwf	_tamanio_comando,w,c
  2206  001F38  B0D8               	btfsc	status,0,c
  2207  001F3A  0012               	return	
  2208  001F3C                     l2192:
  2209                           
  2210                           ;headers\teclado.h: 22: comando[tamanio_comando] = *buffer2;
  2211  001F3C  0EB6               	movlw	low _comando
  2212  001F3E  2445               	addwf	_tamanio_comando,w,c
  2213  001F40  6ED9               	movwf	fsr2l,c
  2214  001F42  0E00               	movlw	high _comando
  2215  001F44  2046               	addwfc	_tamanio_comando+1,w,c
  2216  001F46  6EDA               	movwf	fsr2h,c
  2217  001F48  C090  FFDF         	movff	_buffer2,indf2
  2218                           
  2219                           ;headers\teclado.h: 23: comando [tamanio_comando+1] = '\0';
  2220  001F4C  0E01               	movlw	1
  2221  001F4E  2445               	addwf	_tamanio_comando,w,c
  2222  001F50  6E24               	movwf	??_guardar_comando& (0+255),c
  2223  001F52  0E00               	movlw	0
  2224  001F54  2046               	addwfc	_tamanio_comando+1,w,c
  2225  001F56  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  2226  001F58  0EB6               	movlw	low _comando
  2227  001F5A  2424               	addwf	??_guardar_comando,w,c
  2228  001F5C  6ED9               	movwf	fsr2l,c
  2229  001F5E  0E00               	movlw	high _comando
  2230  001F60  2025               	addwfc	??_guardar_comando+1,w,c
  2231  001F62  6EDA               	movwf	fsr2h,c
  2232  001F64  0E00               	movlw	0
  2233  001F66  6EDF               	movwf	indf2,c
  2234                           
  2235                           ;headers\teclado.h: 24: tamanio_comando++;
  2236  001F68  4A45               	infsnz	_tamanio_comando,f,c
  2237  001F6A  2A46               	incf	_tamanio_comando+1,f,c
  2238  001F6C  0012               	return	
  2239  001F6E                     l150:
  2240  001F6E  0012               	return		;funcret
  2241  001F70                     __end_of_guardar_comando:
  2242                           	opt stack 0
  2243                           tosu	equ	0xFFF
  2244                           tosh	equ	0xFFE
  2245                           tosl	equ	0xFFD
  2246                           pclath	equ	0xFFA
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _ingresar_password *****************
  2263 ;; Defined at:
  2264 ;;		line 89 in file "main.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  i               2   27[COMRAM] int 
  2269 ;;  i               2   29[COMRAM] int 
  2270 ;;  clear          16   11[COMRAM] unsigned char [16]
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  2  234[None  ] int 
  2273 ;; Registers used:
  2274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2281 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2283 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2284 ;;Total ram usage:       21 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    5
  2287 ;; This function calls:
  2288 ;;		_lcd_comand
  2289 ;;		_lcd_gotoxy
  2290 ;;		_lcd_putrs
  2291 ;;		_validar_password
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text10
  2298  001948                     __ptext10:
  2299                           	opt stack 0
  2300  001948                     _ingresar_password:
  2301                           	opt stack 25
  2302                           
  2303                           ;main.c: 90: char clear[16];
  2304                           ;main.c: 91: for (int i=0;i<16;i++) clear[i]=' ';
  2305                           
  2306                           ;incstack = 0
  2307  001948  0E00               	movlw	0
  2308  00194A  6E1F               	movwf	ingresar_password@i+1,c
  2309  00194C  0E00               	movlw	0
  2310  00194E  6E1E               	movwf	ingresar_password@i,c
  2311  001950                     l2734:
  2312  001950  BE1F               	btfsc	ingresar_password@i+1,7,c
  2313  001952  D008               	goto	l2738
  2314  001954  501F               	movf	ingresar_password@i+1,w,c
  2315  001956  E112               	bnz	l2744
  2316  001958  0E10               	movlw	16
  2317  00195A  5C1E               	subwf	ingresar_password@i,w,c
  2318  00195C  B0D8               	btfsc	status,0,c
  2319  00195E  D00E               	goto	l2744
  2320  001960  D001               	goto	l2738
  2321  001962  D00C               	goto	l2744
  2322  001964                     l2738:
  2323  001964  0E0C               	movlw	low ingresar_password@clear
  2324  001966  241E               	addwf	ingresar_password@i,w,c
  2325  001968  6ED9               	movwf	fsr2l,c
  2326  00196A  0E00               	movlw	high ingresar_password@clear
  2327  00196C  201F               	addwfc	ingresar_password@i+1,w,c
  2328  00196E  6EDA               	movwf	fsr2h,c
  2329  001970  0E20               	movlw	32
  2330  001972  6EDF               	movwf	indf2,c
  2331  001974  4A1E               	infsnz	ingresar_password@i,f,c
  2332  001976  2A1F               	incf	ingresar_password@i+1,f,c
  2333  001978  D7EB               	goto	l2734
  2334  00197A  D000               	goto	l2744
  2335  00197C                     l2744:
  2336                           
  2337                           ;main.c: 93: if(tamanio_password < 6){
  2338  00197C  BE48               	btfsc	_tamanio_password+1,7,c
  2339  00197E  D006               	goto	l2746
  2340  001980  5048               	movf	_tamanio_password+1,w,c
  2341  001982  E118               	bnz	l2752
  2342  001984  0E06               	movlw	6
  2343  001986  5C47               	subwf	_tamanio_password,w,c
  2344  001988  B0D8               	btfsc	status,0,c
  2345  00198A  D014               	goto	l2752
  2346  00198C                     l2746:
  2347                           
  2348                           ;main.c: 95: lcd_comand(0b00001100);
  2349  00198C  0E0C               	movlw	12
  2350  00198E  EC88  F011         	call	_lcd_comand
  2351                           
  2352                           ;main.c: 96: lcd_gotoxy(1,1);
  2353  001992  0E01               	movlw	1
  2354  001994  6E05               	movwf	lcd_gotoxy@y,c
  2355  001996  0E01               	movlw	1
  2356  001998  EC39  F011         	call	_lcd_gotoxy
  2357                           
  2358                           ;main.c: 97: lcd_putrs("Inserte password");
  2359  00199C  0E0F               	movlw	low STR_12
  2360  00199E  6E09               	movwf	lcd_putrs@ptr,c
  2361  0019A0  0E0F               	movlw	high STR_12
  2362  0019A2  6E0A               	movwf	lcd_putrs@ptr+1,c
  2363  0019A4  EC16  F010         	call	_lcd_putrs	;wreg free
  2364                           
  2365                           ;main.c: 98: lcd_gotoxy(tamanio_password+1,2);
  2366  0019A8  0E02               	movlw	2
  2367  0019AA  6E05               	movwf	lcd_gotoxy@y,c
  2368  0019AC  2847               	incf	_tamanio_password,w,c
  2369  0019AE  EC39  F011         	call	_lcd_gotoxy
  2370  0019B2  D000               	goto	l2752
  2371  0019B4                     l2752:
  2372                           
  2373                           ;main.c: 100: }
  2374                           ;main.c: 102: validar_password();
  2375  0019B4  ECB8  F00F         	call	_validar_password	;wreg free
  2376                           
  2377                           ;main.c: 103: if (tamanio_password >= 6 && !autorizado){
  2378  0019B8  BE48               	btfsc	_tamanio_password+1,7,c
  2379  0019BA  0012               	return	
  2380  0019BC  5048               	movf	_tamanio_password+1,w,c
  2381  0019BE  E104               	bnz	u2240
  2382  0019C0  0E06               	movlw	6
  2383  0019C2  5C47               	subwf	_tamanio_password,w,c
  2384  0019C4  A0D8               	btfss	status,0,c
  2385  0019C6  0012               	return	
  2386  0019C8                     u2240:
  2387  0019C8  5041               	movf	_autorizado,w,c
  2388  0019CA  1042               	iorwf	_autorizado+1,w,c
  2389  0019CC  A4D8               	btfss	status,2,c
  2390  0019CE  0012               	return	
  2391                           
  2392                           ;main.c: 104: tamanio_password = 0;
  2393  0019D0  0E00               	movlw	0
  2394  0019D2  6E48               	movwf	_tamanio_password+1,c
  2395  0019D4  0E00               	movlw	0
  2396  0019D6  6E47               	movwf	_tamanio_password,c
  2397                           
  2398                           ;main.c: 105: lcd_gotoxy(1,2);
  2399  0019D8  0E02               	movlw	2
  2400  0019DA  6E05               	movwf	lcd_gotoxy@y,c
  2401  0019DC  0E01               	movlw	1
  2402  0019DE  EC39  F011         	call	_lcd_gotoxy
  2403                           
  2404                           ;main.c: 106: lcd_putrs("ERROR pass");
  2405  0019E2  0E58               	movlw	low STR_13
  2406  0019E4  6E09               	movwf	lcd_putrs@ptr,c
  2407  0019E6  0E0F               	movlw	high STR_13
  2408  0019E8  6E0A               	movwf	lcd_putrs@ptr+1,c
  2409  0019EA  EC16  F010         	call	_lcd_putrs	;wreg free
  2410                           
  2411                           ;main.c: 107: for (int i=0;i<6;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2412  0019EE  0E00               	movlw	0
  2413  0019F0  6E1D               	movwf	ingresar_password@i_969+1,c
  2414  0019F2  0E00               	movlw	0
  2415  0019F4  6E1C               	movwf	ingresar_password@i_969,c
  2416  0019F6                     l2766:
  2417  0019F6  BE1D               	btfsc	ingresar_password@i_969+1,7,c
  2418  0019F8  D008               	goto	l2770
  2419  0019FA  501D               	movf	ingresar_password@i_969+1,w,c
  2420  0019FC  E112               	bnz	l2774
  2421  0019FE  0E06               	movlw	6
  2422  001A00  5C1C               	subwf	ingresar_password@i_969,w,c
  2423  001A02  B0D8               	btfsc	status,0,c
  2424  001A04  D00E               	goto	l2774
  2425  001A06  D001               	goto	l2770
  2426  001A08  D00C               	goto	l2774
  2427  001A0A                     l2770:
  2428  001A0A  0EFF               	movlw	255
  2429  001A0C  6E0B               	movwf	??_ingresar_password& (0+255),c
  2430  001A0E  0E8A               	movlw	138
  2431  001A10                     u2427:
  2432  001A10  2EE8               	decfsz	wreg,f,c
  2433  001A12  D7FE               	goto	u2427
  2434  001A14  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  2435  001A16  D7FC               	goto	u2427
  2436  001A18  D000               	nop2	
  2437  001A1A  4A1C               	infsnz	ingresar_password@i_969,f,c
  2438  001A1C  2A1D               	incf	ingresar_password@i_969+1,f,c
  2439  001A1E  D7EB               	goto	l2766
  2440  001A20  D000               	goto	l2774
  2441  001A22                     l2774:
  2442                           
  2443                           ;main.c: 108: lcd_gotoxy(1,2);
  2444  001A22  0E02               	movlw	2
  2445  001A24  6E05               	movwf	lcd_gotoxy@y,c
  2446  001A26  0E01               	movlw	1
  2447  001A28  EC39  F011         	call	_lcd_gotoxy
  2448                           
  2449                           ;main.c: 109: lcd_putrs(clear);
  2450  001A2C  0E0C               	movlw	low ingresar_password@clear
  2451  001A2E  6E09               	movwf	lcd_putrs@ptr,c
  2452  001A30  0E00               	movlw	high ingresar_password@clear
  2453  001A32  6E0A               	movwf	lcd_putrs@ptr+1,c
  2454  001A34  EC16  F010         	call	_lcd_putrs	;wreg free
  2455  001A38  0012               	return	
  2456  001A3A  0012               	return		;funcret
  2457  001A3C                     __end_of_ingresar_password:
  2458                           	opt stack 0
  2459                           tosu	equ	0xFFF
  2460                           tosh	equ	0xFFE
  2461                           tosl	equ	0xFFD
  2462                           pclath	equ	0xFFA
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           postdec1	equ	0xFE5
  2470                           fsr1l	equ	0xFE1
  2471                           indf2	equ	0xFDF
  2472                           postinc2	equ	0xFDE
  2473                           postdec2	equ	0xFDD
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _validar_password *****************
  2479 ;; Defined at:
  2480 ;;		line 22 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  i               2    2[COMRAM] int 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  2  217[None  ] int 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2497 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2498 ;;Total ram usage:        4 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_ingresar_password
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text11
  2508  001F70                     __ptext11:
  2509                           	opt stack 0
  2510  001F70                     _validar_password:
  2511                           	opt stack 29
  2512                           
  2513                           ;headers\password.h: 24: autorizado = 1;
  2514                           
  2515                           ;incstack = 0
  2516  001F70  0E00               	movlw	0
  2517  001F72  6E42               	movwf	_autorizado+1,c
  2518  001F74  0E01               	movlw	1
  2519  001F76  6E41               	movwf	_autorizado,c
  2520                           
  2521                           ;headers\password.h: 25: int i = 0;
  2522  001F78  0E00               	movlw	0
  2523  001F7A  6E04               	movwf	validar_password@i+1,c
  2524  001F7C  0E00               	movlw	0
  2525  001F7E  6E03               	movwf	validar_password@i,c
  2526                           
  2527                           ;headers\password.h: 26: while (i < 6 && autorizado==1){
  2528  001F80  D018               	goto	l2532
  2529  001F82                     l2526:
  2530                           
  2531                           ;headers\password.h: 28: if (current_password[i] != password[i])
  2532  001F82  0EB0               	movlw	low _password
  2533  001F84  2403               	addwf	validar_password@i,w,c
  2534  001F86  6ED9               	movwf	fsr2l,c
  2535  001F88  0E00               	movlw	high _password
  2536  001F8A  2004               	addwfc	validar_password@i+1,w,c
  2537  001F8C  6EDA               	movwf	fsr2h,c
  2538  001F8E  0E78               	movlw	low _current_password
  2539  001F90  2403               	addwf	validar_password@i,w,c
  2540  001F92  6EE1               	movwf	fsr1l,c
  2541  001F94  0E00               	movlw	high _current_password
  2542  001F96  2004               	addwfc	validar_password@i+1,w,c
  2543  001F98  6EE2               	movwf	fsr1h,c
  2544  001F9A  50DE               	movf	postinc2,w,c
  2545  001F9C  18E6               	xorwf	postinc1,w,c
  2546  001F9E  B4D8               	btfsc	status,2,c
  2547  001FA0  D005               	goto	l2530
  2548                           
  2549                           ;headers\password.h: 29: autorizado = 0;
  2550  001FA2  0E00               	movlw	0
  2551  001FA4  6E42               	movwf	_autorizado+1,c
  2552  001FA6  0E00               	movlw	0
  2553  001FA8  6E41               	movwf	_autorizado,c
  2554  001FAA  D000               	goto	l2530
  2555  001FAC                     l2530:
  2556                           
  2557                           ;headers\password.h: 31: i++;
  2558  001FAC  4A03               	infsnz	validar_password@i,f,c
  2559  001FAE  2A04               	incf	validar_password@i+1,f,c
  2560  001FB0  D000               	goto	l2532
  2561  001FB2                     l2532:
  2562  001FB2  BE04               	btfsc	validar_password@i+1,7,c
  2563  001FB4  D006               	goto	l2534
  2564  001FB6  5004               	movf	validar_password@i+1,w,c
  2565  001FB8  E10A               	bnz	l224
  2566  001FBA  0E06               	movlw	6
  2567  001FBC  5C03               	subwf	validar_password@i,w,c
  2568  001FBE  B0D8               	btfsc	status,0,c
  2569  001FC0  0012               	return	
  2570  001FC2                     l2534:
  2571  001FC2  0441               	decf	_autorizado,w,c
  2572  001FC4  1042               	iorwf	_autorizado+1,w,c
  2573  001FC6  A4D8               	btfss	status,2,c
  2574  001FC8  0012               	return	
  2575  001FCA  D7DB               	goto	l2526
  2576  001FCC  0012               	return	
  2577  001FCE                     l224:
  2578  001FCE  0012               	return		;funcret
  2579  001FD0                     __end_of_validar_password:
  2580                           	opt stack 0
  2581                           tosu	equ	0xFFF
  2582                           tosh	equ	0xFFE
  2583                           tosl	equ	0xFFD
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc1	equ	0xFE6
  2592                           postdec1	equ	0xFE5
  2593                           fsr1h	equ	0xFE2
  2594                           fsr1l	equ	0xFE1
  2595                           indf2	equ	0xFDF
  2596                           postinc2	equ	0xFDE
  2597                           postdec2	equ	0xFDD
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _caratula *****************
  2603 ;; Defined at:
  2604 ;;		line 33 in file "main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  2607 ;;		 -> STR_16(9), 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  i               2   53[COMRAM] int 
  2610 ;;  clear          16   37[COMRAM] unsigned char [16]
  2611 ;; Return value:  Size  Location     Type
  2612 ;;		None               void
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2621 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2623 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2624 ;;Total ram usage:       20 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    5
  2627 ;; This function calls:
  2628 ;;		_lcd_comand
  2629 ;;		_lcd_gotoxy
  2630 ;;		_lcd_putrs
  2631 ;;		_sprintf
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text12
  2638  001A3C                     __ptext12:
  2639                           	opt stack 0
  2640  001A3C                     _caratula:
  2641                           	opt stack 25
  2642                           
  2643                           ;main.c: 36: char clear[16];
  2644                           ;main.c: 37: for (int i=0;i<16;i++) clear[i]=' ';
  2645                           
  2646                           ;incstack = 0
  2647  001A3C  0E00               	movlw	0
  2648  001A3E  6E37               	movwf	caratula@i+1,c
  2649  001A40  0E00               	movlw	0
  2650  001A42  6E36               	movwf	caratula@i,c
  2651  001A44                     l2684:
  2652  001A44  BE37               	btfsc	caratula@i+1,7,c
  2653  001A46  D008               	goto	l2688
  2654  001A48  5037               	movf	caratula@i+1,w,c
  2655  001A4A  E112               	bnz	l2694
  2656  001A4C  0E10               	movlw	16
  2657  001A4E  5C36               	subwf	caratula@i,w,c
  2658  001A50  B0D8               	btfsc	status,0,c
  2659  001A52  D00E               	goto	l2694
  2660  001A54  D001               	goto	l2688
  2661  001A56  D00C               	goto	l2694
  2662  001A58                     l2688:
  2663  001A58  0E26               	movlw	low caratula@clear
  2664  001A5A  2436               	addwf	caratula@i,w,c
  2665  001A5C  6ED9               	movwf	fsr2l,c
  2666  001A5E  0E00               	movlw	high caratula@clear
  2667  001A60  2037               	addwfc	caratula@i+1,w,c
  2668  001A62  6EDA               	movwf	fsr2h,c
  2669  001A64  0E20               	movlw	32
  2670  001A66  6EDF               	movwf	indf2,c
  2671  001A68  4A36               	infsnz	caratula@i,f,c
  2672  001A6A  2A37               	incf	caratula@i+1,f,c
  2673  001A6C  D7EB               	goto	l2684
  2674  001A6E  D000               	goto	l2694
  2675  001A70                     l2694:
  2676                           
  2677                           ;main.c: 39: lcd_comand(0b00001100);
  2678  001A70  0E0C               	movlw	12
  2679  001A72  EC88  F011         	call	_lcd_comand
  2680                           
  2681                           ;main.c: 40: lcd_gotoxy(1,1);
  2682  001A76  0E01               	movlw	1
  2683  001A78  6E05               	movwf	lcd_gotoxy@y,c
  2684  001A7A  0E01               	movlw	1
  2685  001A7C  EC39  F011         	call	_lcd_gotoxy
  2686                           
  2687                           ;main.c: 41: lcd_putrs(titulo);
  2688  001A80  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  2689  001A84  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  2690  001A88  EC16  F010         	call	_lcd_putrs	;wreg free
  2691                           
  2692                           ;main.c: 43: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  2693  001A8C  0E90               	movlw	low _buffer2
  2694  001A8E  6E0D               	movwf	sprintf@sp,c
  2695  001A90  0E00               	movlw	high _buffer2
  2696  001A92  6E0E               	movwf	sprintf@sp+1,c
  2697  001A94  0E31               	movlw	low STR_10
  2698  001A96  6E0F               	movwf	sprintf@f,c
  2699  001A98  0E0F               	movlw	high STR_10
  2700  001A9A  6E10               	movwf	sprintf@f+1,c
  2701  001A9C  C054  F011         	movff	_dia,?_sprintf+4
  2702  001AA0  C055  F012         	movff	_dia+1,?_sprintf+5
  2703  001AA4  C05A  F013         	movff	_mes,?_sprintf+6
  2704  001AA8  C05B  F014         	movff	_mes+1,?_sprintf+7
  2705  001AAC  C052  F015         	movff	_anio,?_sprintf+8
  2706  001AB0  C053  F016         	movff	_anio+1,?_sprintf+9
  2707  001AB4  ECC5  F007         	call	_sprintf	;wreg free
  2708                           
  2709                           ;main.c: 44: lcd_gotoxy(9,1);
  2710  001AB8  0E01               	movlw	1
  2711  001ABA  6E05               	movwf	lcd_gotoxy@y,c
  2712  001ABC  0E09               	movlw	9
  2713  001ABE  EC39  F011         	call	_lcd_gotoxy
  2714                           
  2715                           ;main.c: 45: lcd_putrs(buffer2);
  2716  001AC2  0E90               	movlw	low _buffer2
  2717  001AC4  6E09               	movwf	lcd_putrs@ptr,c
  2718  001AC6  0E00               	movlw	high _buffer2
  2719  001AC8  6E0A               	movwf	lcd_putrs@ptr+1,c
  2720  001ACA  EC16  F010         	call	_lcd_putrs	;wreg free
  2721                           
  2722                           ;main.c: 47: sprintf(buffer2,"  %02u:%02u:%02u",hora,minuto,segundo);
  2723  001ACE  0E90               	movlw	low _buffer2
  2724  001AD0  6E0D               	movwf	sprintf@sp,c
  2725  001AD2  0E00               	movlw	high _buffer2
  2726  001AD4  6E0E               	movwf	sprintf@sp+1,c
  2727  001AD6  0E20               	movlw	low STR_11
  2728  001AD8  6E0F               	movwf	sprintf@f,c
  2729  001ADA  0E0F               	movlw	high STR_11
  2730  001ADC  6E10               	movwf	sprintf@f+1,c
  2731  001ADE  C058  F011         	movff	_hora,?_sprintf+4
  2732  001AE2  C059  F012         	movff	_hora+1,?_sprintf+5
  2733  001AE6  C05C  F013         	movff	_minuto,?_sprintf+6
  2734  001AEA  C05D  F014         	movff	_minuto+1,?_sprintf+7
  2735  001AEE  C043  F015         	movff	_segundo,?_sprintf+8
  2736  001AF2  C044  F016         	movff	_segundo+1,?_sprintf+9
  2737  001AF6  ECC5  F007         	call	_sprintf	;wreg free
  2738                           
  2739                           ;main.c: 48: lcd_gotoxy(1,2);
  2740  001AFA  0E02               	movlw	2
  2741  001AFC  6E05               	movwf	lcd_gotoxy@y,c
  2742  001AFE  0E01               	movlw	1
  2743  001B00  EC39  F011         	call	_lcd_gotoxy
  2744                           
  2745                           ;main.c: 49: lcd_putrs(buffer2);
  2746  001B04  0E90               	movlw	low _buffer2
  2747  001B06  6E09               	movwf	lcd_putrs@ptr,c
  2748  001B08  0E00               	movlw	high _buffer2
  2749  001B0A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2750  001B0C  EC16  F010         	call	_lcd_putrs	;wreg free
  2751  001B10  0012               	return		;funcret
  2752  001B12                     __end_of_caratula:
  2753                           	opt stack 0
  2754                           tosu	equ	0xFFF
  2755                           tosh	equ	0xFFE
  2756                           tosl	equ	0xFFD
  2757                           pclath	equ	0xFFA
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postinc1	equ	0xFE6
  2765                           postdec1	equ	0xFE5
  2766                           fsr1h	equ	0xFE2
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _sprintf *****************
  2776 ;; Defined at:
  2777 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2780 ;;		 -> buffer2(20), 
  2781 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2782 ;;		 -> STR_14(5), STR_11(17), STR_10(15), STR_2(5), 
  2783 ;;		 -> STR_1(5), 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  tmpval          4    0        struct .
  2786 ;;  cp              3    0        PTR const unsigned char 
  2787 ;;  width           2   32[COMRAM] int 
  2788 ;;  val             2   29[COMRAM] unsigned int 
  2789 ;;  ap              2   26[COMRAM] PTR void [1]
  2790 ;;		 -> ?_sprintf(2), 
  2791 ;;  len             2    0        unsigned int 
  2792 ;;  c               1   34[COMRAM] char 
  2793 ;;  prec            1   31[COMRAM] char 
  2794 ;;  flag            1   28[COMRAM] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  2   12[COMRAM] int 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2804 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2805 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2806 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2807 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2808 ;;Total ram usage:       23 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    1
  2811 ;; This function calls:
  2812 ;;		___lwdiv
  2813 ;;		___lwmod
  2814 ;;		___wmul
  2815 ;;		_isdigit
  2816 ;; This function is called by:
  2817 ;;		_guardar_comando
  2818 ;;		_imprimir_tecla
  2819 ;;		_caratula
  2820 ;;		_mostrar_guardar_password
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text13
  2825  000F8A                     __ptext13:
  2826                           	opt stack 0
  2827  000F8A                     _sprintf:
  2828                           	opt stack 27
  2829                           
  2830                           ;doprnt.c: 494: va_list ap;
  2831                           ;doprnt.c: 499: signed char c;
  2832                           ;doprnt.c: 501: int width;
  2833                           ;doprnt.c: 506: signed char prec;
  2834                           ;doprnt.c: 508: unsigned char flag;
  2835                           ;doprnt.c: 523: union {
  2836                           ;doprnt.c: 524: unsigned long vd;
  2837                           ;doprnt.c: 525: double integ;
  2838                           ;doprnt.c: 526: } tmpval;
  2839                           ;doprnt.c: 528: unsigned int val;
  2840                           ;doprnt.c: 529: unsigned len;
  2841                           ;doprnt.c: 530: const char * cp;
  2842                           ;doprnt.c: 533: *ap = __va_start();
  2843                           
  2844                           ;incstack = 0
  2845  000F8A  0E11               	movlw	low (?_sprintf+4)
  2846  000F8C  6E1B               	movwf	sprintf@ap,c
  2847  000F8E  0E00               	movlw	high (?_sprintf+4)
  2848  000F90  6E1C               	movwf	sprintf@ap+1,c
  2849                           
  2850                           ;doprnt.c: 536: while(c = *f++) {
  2851  000F92  D117               	goto	l2166
  2852  000F94                     l2084:
  2853                           
  2854                           ;doprnt.c: 538: if(c != '%')
  2855  000F94  0E25               	movlw	37
  2856  000F96  1823               	xorwf	sprintf@c,w,c
  2857  000F98  B4D8               	btfsc	status,2,c
  2858  000F9A  D009               	goto	l2090
  2859                           
  2860                           ;doprnt.c: 540: {
  2861                           ;doprnt.c: 541: ((*sp++ = (c)));
  2862  000F9C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2863  000FA0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2864  000FA4  C023  FFDF         	movff	sprintf@c,indf2
  2865  000FA8  4A0D               	infsnz	sprintf@sp,f,c
  2866  000FAA  2A0E               	incf	sprintf@sp+1,f,c
  2867                           
  2868                           ;doprnt.c: 542: continue;
  2869  000FAC  D10A               	goto	l2166
  2870  000FAE                     l2090:
  2871                           
  2872                           ;doprnt.c: 543: }
  2873                           ;doprnt.c: 546: width = 0;
  2874  000FAE  0E00               	movlw	0
  2875  000FB0  6E22               	movwf	sprintf@width+1,c
  2876  000FB2  0E00               	movlw	0
  2877  000FB4  6E21               	movwf	sprintf@width,c
  2878                           
  2879                           ;doprnt.c: 548: flag = 0;
  2880  000FB6  0E00               	movlw	0
  2881  000FB8  6E1D               	movwf	sprintf@flag,c
  2882                           
  2883                           ;doprnt.c: 551: switch(*f) {
  2884                           
  2885                           ;doprnt.c: 550: for(;;) {
  2886  000FBA  D005               	goto	l2096
  2887  000FBC                     l2092:
  2888                           
  2889                           ;doprnt.c: 580: flag |= 0x04;
  2890  000FBC  841D               	bsf	sprintf@flag,2,c
  2891                           
  2892                           ;doprnt.c: 581: f++;
  2893  000FBE  4A0F               	infsnz	sprintf@f,f,c
  2894  000FC0  2A10               	incf	sprintf@f+1,f,c
  2895                           
  2896                           ;doprnt.c: 582: continue;
  2897  000FC2  D001               	goto	l2096
  2898                           
  2899                           ;doprnt.c: 584: }
  2900  000FC4  D00B               	goto	l2098
  2901  000FC6                     l2096:
  2902  000FC6  C00F  FFF6         	movff	sprintf@f,tblptrl
  2903  000FCA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2904  000FCE                     	if	0	;tblptru may be non-zero
  2905  000FCE                     	endif
  2906  000FCE                     	if	0	;tblptru may be non-zero
  2907  000FCE                     	endif
  2908  000FCE  0008               	tblrd		*
  2909  000FD0  50F5               	movf	tablat,w,c
  2910                           
  2911                           ; Switch size 1, requested type "space"
  2912                           ; Number of cases is 1, Range of values is 48 to 48
  2913                           ; switch strategies available:
  2914                           ; Name         Instructions Cycles
  2915                           ; simple_byte            4     3 (average)
  2916                           ;	Chosen strategy is simple_byte
  2917  000FD2  0A30               	xorlw	48	; case 48
  2918  000FD4  B4D8               	btfsc	status,2,c
  2919  000FD6  D7F2               	goto	l2092
  2920                           
  2921                           ;doprnt.c: 585: break;
  2922  000FD8  D001               	goto	l2098
  2923                           
  2924                           ;doprnt.c: 586: }
  2925  000FDA  D7F5               	goto	l2096
  2926  000FDC                     l2098:
  2927                           
  2928                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2929  000FDC  C00F  FFF6         	movff	sprintf@f,tblptrl
  2930  000FE0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2931  000FE4                     	if	0	;tblptru may be non-zero
  2932  000FE4                     	endif
  2933  000FE4                     	if	0	;tblptru may be non-zero
  2934  000FE4                     	endif
  2935  000FE4  0008               	tblrd		*
  2936  000FE6  50F5               	movf	tablat,w,c
  2937  000FE8  EC5C  F011         	call	_isdigit
  2938  000FEC  A0D8               	btfss	status,0,c
  2939  000FEE  D03A               	goto	l2114
  2940                           
  2941                           ;doprnt.c: 598: width = 0;
  2942  000FF0  0E00               	movlw	0
  2943  000FF2  6E22               	movwf	sprintf@width+1,c
  2944  000FF4  0E00               	movlw	0
  2945  000FF6  6E21               	movwf	sprintf@width,c
  2946  000FF8  D000               	goto	l2102
  2947  000FFA                     l2102:
  2948                           
  2949                           ;doprnt.c: 600: width *= 10;
  2950  000FFA  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2951  000FFE  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2952  001002  0E00               	movlw	0
  2953  001004  6E04               	movwf	___wmul@multiplicand+1,c
  2954  001006  0E0A               	movlw	10
  2955  001008  6E03               	movwf	___wmul@multiplicand,c
  2956  00100A  EC25  F011         	call	___wmul	;wreg free
  2957  00100E  C001  F021         	movff	?___wmul,sprintf@width
  2958  001012  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2959                           
  2960                           ;doprnt.c: 601: width += *f++ - '0';
  2961  001016  0ED0               	movlw	208
  2962  001018  6E17               	movwf	??_sprintf& (0+255),c
  2963  00101A  0EFF               	movlw	255
  2964  00101C  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2965  00101E  C00F  FFF6         	movff	sprintf@f,tblptrl
  2966  001022  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2967  001026                     	if	0	;tblptru may be non-zero
  2968  001026                     	endif
  2969  001026                     	if	0	;tblptru may be non-zero
  2970  001026                     	endif
  2971  001026  0008               	tblrd		*
  2972  001028  50F5               	movf	tablat,w,c
  2973  00102A  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2974  00102C  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2975  00102E  5017               	movf	??_sprintf,w,c
  2976  001030  2619               	addwf	??_sprintf+2,f,c
  2977  001032  5018               	movf	??_sprintf+1,w,c
  2978  001034  221A               	addwfc	??_sprintf+3,f,c
  2979  001036  5019               	movf	??_sprintf+2,w,c
  2980  001038  2621               	addwf	sprintf@width,f,c
  2981  00103A  501A               	movf	??_sprintf+3,w,c
  2982  00103C  2222               	addwfc	sprintf@width+1,f,c
  2983  00103E  4A0F               	infsnz	sprintf@f,f,c
  2984  001040  2A10               	incf	sprintf@f+1,f,c
  2985                           
  2986                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2987  001042  C00F  FFF6         	movff	sprintf@f,tblptrl
  2988  001046  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2989  00104A                     	if	0	;tblptru may be non-zero
  2990  00104A                     	endif
  2991  00104A                     	if	0	;tblptru may be non-zero
  2992  00104A                     	endif
  2993  00104A  0008               	tblrd		*
  2994  00104C  50F5               	movf	tablat,w,c
  2995  00104E  EC5C  F011         	call	_isdigit
  2996  001052  A0D8               	btfss	status,0,c
  2997  001054  D007               	goto	l2114
  2998  001056  D7D1               	goto	l2102
  2999                           
  3000                           ;doprnt.c: 608: }
  3001                           ;doprnt.c: 635: switch(c = *f++) {
  3002  001058  D005               	goto	l2114
  3003                           
  3004                           ;doprnt.c: 638: goto alldone;
  3005                           
  3006                           ;doprnt.c: 637: case 0:
  3007  00105A  D0C1               	goto	l2168
  3008                           
  3009                           ;doprnt.c: 813: continue;
  3010                           
  3011                           ;doprnt.c: 802: default:
  3012  00105C  D0B2               	goto	l2166
  3013  00105E                     l2110:
  3014                           
  3015                           ;doprnt.c: 818: flag |= 0xC0;
  3016  00105E  0EC0               	movlw	192
  3017  001060  121D               	iorwf	sprintf@flag,f,c
  3018                           
  3019                           ;doprnt.c: 822: }
  3020                           
  3021                           ;doprnt.c: 819: break;
  3022  001062  D011               	goto	l2116
  3023  001064                     l2114:
  3024  001064  C00F  FFF6         	movff	sprintf@f,tblptrl
  3025  001068  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3026  00106C  4A0F               	infsnz	sprintf@f,f,c
  3027  00106E  2A10               	incf	sprintf@f+1,f,c
  3028  001070                     	if	0	;tblptru may be non-zero
  3029  001070                     	endif
  3030  001070                     	if	0	;tblptru may be non-zero
  3031  001070                     	endif
  3032  001070  0008               	tblrd		*
  3033  001072  CFF5 F023          	movff	tablat,sprintf@c
  3034  001076  5023               	movf	sprintf@c,w,c
  3035                           
  3036                           ; Switch size 1, requested type "space"
  3037                           ; Number of cases is 2, Range of values is 0 to 117
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte            7     4 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  001078  0A00               	xorlw	0	; case 0
  3043  00107A  B4D8               	btfsc	status,2,c
  3044  00107C  D0B0               	goto	l2168
  3045  00107E  0A75               	xorlw	117	; case 117
  3046  001080  B4D8               	btfsc	status,2,c
  3047  001082  D7ED               	goto	l2110
  3048  001084  D09E               	goto	l2166
  3049  001086                     l2116:
  3050                           
  3051                           ;doprnt.c: 1273: {
  3052                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3053  001086  C01B  FFD9         	movff	sprintf@ap,fsr2l
  3054  00108A  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  3055  00108E  CFDE F01E          	movff	postinc2,sprintf@val
  3056  001092  CFDD F01F          	movff	postdec2,sprintf@val+1
  3057  001096  0E02               	movlw	2
  3058  001098  261B               	addwf	sprintf@ap,f,c
  3059  00109A  0E00               	movlw	0
  3060  00109C  221C               	addwfc	sprintf@ap+1,f,c
  3061                           
  3062                           ;doprnt.c: 1287: }
  3063                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3064  00109E  0E01               	movlw	1
  3065  0010A0  6E23               	movwf	sprintf@c,c
  3066  0010A2                     l2122:
  3067  0010A2  0E05               	movlw	5
  3068  0010A4  1823               	xorwf	sprintf@c,w,c
  3069  0010A6  B4D8               	btfsc	status,2,c
  3070  0010A8  D016               	goto	l2134
  3071  0010AA  D001               	goto	l2126
  3072  0010AC  D014               	goto	l2134
  3073  0010AE                     l2126:
  3074                           
  3075                           ;doprnt.c: 1306: if(val < dpowers[c])
  3076  0010AE  5023               	movf	sprintf@c,w,c
  3077  0010B0  0D02               	mullw	2
  3078  0010B2  0E01               	movlw	low _dpowers
  3079  0010B4  24F3               	addwf	prodl,w,c
  3080  0010B6  6EF6               	movwf	tblptrl,c
  3081  0010B8  0E0F               	movlw	high _dpowers
  3082  0010BA  20F4               	addwfc	prodh,w,c
  3083  0010BC  6EF7               	movwf	tblptrh,c
  3084  0010BE                     	if	0	;There are less than 3 active tblptr bytes
  3085  0010BE                     	endif
  3086  0010BE  0009               	tblrd		*+
  3087  0010C0  50F5               	movf	tablat,w,c
  3088  0010C2  5C1E               	subwf	sprintf@val,w,c
  3089  0010C4  0009               	tblrd		*+
  3090  0010C6  50F5               	movf	tablat,w,c
  3091  0010C8  581F               	subwfb	sprintf@val+1,w,c
  3092  0010CA  A0D8               	btfss	status,0,c
  3093  0010CC  D004               	goto	l2134
  3094  0010CE  D001               	goto	l2130
  3095                           
  3096                           ;doprnt.c: 1307: break;
  3097  0010D0  D002               	goto	l2134
  3098  0010D2                     l2130:
  3099  0010D2  2A23               	incf	sprintf@c,f,c
  3100  0010D4  D7E6               	goto	l2122
  3101  0010D6                     l2134:
  3102                           
  3103                           ;doprnt.c: 1381: if(width > c)
  3104  0010D6  0E80               	movlw	128
  3105  0010D8  BE23               	btfsc	sprintf@c,7,c
  3106  0010DA  0E7F               	movlw	127
  3107  0010DC  6E17               	movwf	??_sprintf& (0+255),c
  3108  0010DE  5021               	movf	sprintf@width,w,c
  3109  0010E0  5C23               	subwf	sprintf@c,w,c
  3110  0010E2  5022               	movf	sprintf@width+1,w,c
  3111  0010E4  0A80               	xorlw	128
  3112  0010E6  5817               	subwfb	??_sprintf& (0+255),w,c
  3113  0010E8  B0D8               	btfsc	status,0,c
  3114  0010EA  D007               	goto	l2138
  3115                           
  3116                           ;doprnt.c: 1382: width -= c;
  3117  0010EC  5023               	movf	sprintf@c,w,c
  3118  0010EE  5E21               	subwf	sprintf@width,f,c
  3119  0010F0  0E00               	movlw	0
  3120  0010F2  BE23               	btfsc	sprintf@c,7,c
  3121  0010F4  0EFF               	movlw	255
  3122  0010F6  5A22               	subwfb	sprintf@width+1,f,c
  3123  0010F8  D005               	goto	l2140
  3124  0010FA                     l2138:
  3125                           
  3126                           ;doprnt.c: 1383: else
  3127                           ;doprnt.c: 1384: width = 0;
  3128  0010FA  0E00               	movlw	0
  3129  0010FC  6E22               	movwf	sprintf@width+1,c
  3130  0010FE  0E00               	movlw	0
  3131  001100  6E21               	movwf	sprintf@width,c
  3132  001102  D000               	goto	l2140
  3133  001104                     l2140:
  3134                           
  3135                           ;doprnt.c: 1387: if(flag & 0x04) {
  3136  001104  A41D               	btfss	sprintf@flag,2,c
  3137  001106  D015               	goto	l2150
  3138                           
  3139                           ;doprnt.c: 1415: if(width)
  3140  001108  5021               	movf	sprintf@width,w,c
  3141  00110A  1022               	iorwf	sprintf@width+1,w,c
  3142  00110C  B4D8               	btfsc	status,2,c
  3143  00110E  D026               	goto	l359
  3144  001110                     l2144:
  3145                           
  3146                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3147  001110  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3148  001114  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3149  001118  0E30               	movlw	48
  3150  00111A  6EDF               	movwf	indf2,c
  3151  00111C  4A0D               	infsnz	sprintf@sp,f,c
  3152  00111E  2A0E               	incf	sprintf@sp+1,f,c
  3153                           
  3154                           ;doprnt.c: 1418: while(--width);
  3155  001120  0621               	decf	sprintf@width,f,c
  3156  001122  A0D8               	btfss	status,0,c
  3157  001124  0622               	decf	sprintf@width+1,f,c
  3158  001126  5021               	movf	sprintf@width,w,c
  3159  001128  1022               	iorwf	sprintf@width+1,w,c
  3160  00112A  B4D8               	btfsc	status,2,c
  3161  00112C  D017               	goto	l359
  3162  00112E  D7F0               	goto	l2144
  3163                           
  3164                           ;doprnt.c: 1420: } else
  3165  001130  D015               	goto	l359
  3166  001132                     l2150:
  3167                           
  3168                           ;doprnt.c: 1422: {
  3169                           ;doprnt.c: 1424: if(width
  3170                           ;doprnt.c: 1428: )
  3171  001132  5021               	movf	sprintf@width,w,c
  3172  001134  1022               	iorwf	sprintf@width+1,w,c
  3173  001136  B4D8               	btfsc	status,2,c
  3174  001138  D011               	goto	l359
  3175  00113A                     l2152:
  3176                           
  3177                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3178  00113A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3179  00113E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3180  001142  0E20               	movlw	32
  3181  001144  6EDF               	movwf	indf2,c
  3182  001146  4A0D               	infsnz	sprintf@sp,f,c
  3183  001148  2A0E               	incf	sprintf@sp+1,f,c
  3184                           
  3185                           ;doprnt.c: 1431: while(--width);
  3186  00114A  0621               	decf	sprintf@width,f,c
  3187  00114C  A0D8               	btfss	status,0,c
  3188  00114E  0622               	decf	sprintf@width+1,f,c
  3189  001150  5021               	movf	sprintf@width,w,c
  3190  001152  1022               	iorwf	sprintf@width+1,w,c
  3191  001154  B4D8               	btfsc	status,2,c
  3192  001156  D002               	goto	l359
  3193  001158  D7F0               	goto	l2152
  3194  00115A  D000               	goto	l359
  3195  00115C                     l359:
  3196                           
  3197                           ;doprnt.c: 1469: }
  3198                           ;doprnt.c: 1472: prec = c;
  3199  00115C  C023  F020         	movff	sprintf@c,sprintf@prec
  3200                           
  3201                           ;doprnt.c: 1474: while(prec--) {
  3202  001160  D02A               	goto	l2164
  3203  001162                     l2158:
  3204                           
  3205                           ;doprnt.c: 1478: {
  3206                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3207  001162  5020               	movf	sprintf@prec,w,c
  3208  001164  0D02               	mullw	2
  3209  001166  0E01               	movlw	low _dpowers
  3210  001168  24F3               	addwf	prodl,w,c
  3211  00116A  6EF6               	movwf	tblptrl,c
  3212  00116C  0E0F               	movlw	high _dpowers
  3213  00116E  20F4               	addwfc	prodh,w,c
  3214  001170  6EF7               	movwf	tblptrh,c
  3215  001172                     	if	0	;There are less than 3 active tblptr bytes
  3216  001172                     	endif
  3217  001172  0009               	tblrd		*+
  3218  001174  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3219  001178  000A               	tblrd		*-
  3220  00117A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3221  00117E  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  3222  001182  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3223  001186  ECE8  F00F         	call	___lwdiv	;wreg free
  3224  00118A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3225  00118E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3226  001192  0E00               	movlw	0
  3227  001194  6E0B               	movwf	___lwmod@divisor+1,c
  3228  001196  0E0A               	movlw	10
  3229  001198  6E0A               	movwf	___lwmod@divisor,c
  3230  00119A  EC40  F010         	call	___lwmod	;wreg free
  3231  00119E  5008               	movf	?___lwmod,w,c
  3232  0011A0  0F30               	addlw	48
  3233  0011A2  6E23               	movwf	sprintf@c,c
  3234                           
  3235                           ;doprnt.c: 1523: }
  3236                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3237  0011A4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3238  0011A8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3239  0011AC  C023  FFDF         	movff	sprintf@c,indf2
  3240  0011B0  4A0D               	infsnz	sprintf@sp,f,c
  3241  0011B2  2A0E               	incf	sprintf@sp+1,f,c
  3242  0011B4  D000               	goto	l2164
  3243  0011B6                     l2164:
  3244  0011B6  0620               	decf	sprintf@prec,f,c
  3245  0011B8  2820               	incf	sprintf@prec,w,c
  3246  0011BA  B4D8               	btfsc	status,2,c
  3247  0011BC  D002               	goto	l2166
  3248  0011BE  D7D1               	goto	l2158
  3249  0011C0  D000               	goto	l2166
  3250  0011C2                     l2166:
  3251  0011C2  C00F  FFF6         	movff	sprintf@f,tblptrl
  3252  0011C6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3253  0011CA  4A0F               	infsnz	sprintf@f,f,c
  3254  0011CC  2A10               	incf	sprintf@f+1,f,c
  3255  0011CE                     	if	0	;tblptru may be non-zero
  3256  0011CE                     	endif
  3257  0011CE                     	if	0	;tblptru may be non-zero
  3258  0011CE                     	endif
  3259  0011CE  0008               	tblrd		*
  3260  0011D0  CFF5 F023          	movff	tablat,sprintf@c
  3261  0011D4  5023               	movf	sprintf@c,w,c
  3262  0011D6  B4D8               	btfsc	status,2,c
  3263  0011D8  D002               	goto	l2168
  3264  0011DA  D6DC               	goto	l2084
  3265  0011DC  D000               	goto	l2168
  3266  0011DE                     l2168:
  3267                           
  3268                           ;doprnt.c: 1538: *sp = 0;
  3269  0011DE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3270  0011E2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3271  0011E6  0E00               	movlw	0
  3272  0011E8  6EDF               	movwf	indf2,c
  3273  0011EA  0012               	return	
  3274                           
  3275                           ;doprnt.c: 1540: return 0;
  3276                           ;	Return value of _sprintf is never used
  3277  0011EC  0012               	return		;funcret
  3278  0011EE                     __end_of_sprintf:
  3279                           	opt stack 0
  3280                           tosu	equ	0xFFF
  3281                           tosh	equ	0xFFE
  3282                           tosl	equ	0xFFD
  3283                           pclath	equ	0xFFA
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           postinc1	equ	0xFE6
  3293                           postdec1	equ	0xFE5
  3294                           fsr1h	equ	0xFE2
  3295                           fsr1l	equ	0xFE1
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function _isdigit *****************
  3304 ;; Defined at:
  3305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  c               1    wreg     unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  c               1    2[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;		None               void
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3322 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3323 ;;Total ram usage:        3 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_sprintf
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text14
  3333  0022B8                     __ptext14:
  3334                           	opt stack 0
  3335  0022B8                     _isdigit:
  3336                           	opt stack 27
  3337                           
  3338                           ;incstack = 0
  3339                           ;isdigit@c stored from wreg
  3340  0022B8  6E03               	movwf	isdigit@c,c
  3341  0022BA  0E00               	movlw	0
  3342  0022BC  6E02               	movwf	_isdigit$2103,c
  3343  0022BE  0E3A               	movlw	58
  3344  0022C0  6003               	cpfslt	isdigit@c,c
  3345  0022C2  D006               	goto	l2034
  3346  0022C4  0E2F               	movlw	47
  3347  0022C6  6403               	cpfsgt	isdigit@c,c
  3348  0022C8  D003               	goto	l2034
  3349  0022CA  0E01               	movlw	1
  3350  0022CC  6E02               	movwf	_isdigit$2103,c
  3351  0022CE  D000               	goto	l2034
  3352  0022D0                     l2034:
  3353  0022D0  C002  F001         	movff	_isdigit$2103,??_isdigit
  3354  0022D4  3001               	rrcf	??_isdigit,w,c
  3355  0022D6  0012               	return	
  3356  0022D8  0012               	return		;funcret
  3357  0022DA                     __end_of_isdigit:
  3358                           	opt stack 0
  3359                           tosu	equ	0xFFF
  3360                           tosh	equ	0xFFE
  3361                           tosl	equ	0xFFD
  3362                           pclath	equ	0xFFA
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postinc1	equ	0xFE6
  3372                           postdec1	equ	0xFE5
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function ___wmul *****************
  3383 ;; Defined at:
  3384 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  multiplier      2    0[COMRAM] unsigned int 
  3387 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  product         2    4[COMRAM] unsigned int 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  2    0[COMRAM] unsigned int 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0, prodl, prodh
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3402 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3403 ;;Total ram usage:        6 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_sprintf
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text15
  3413  00224A                     __ptext15:
  3414                           	opt stack 0
  3415  00224A                     ___wmul:
  3416                           	opt stack 27
  3417                           
  3418                           ;incstack = 0
  3419  00224A  5001               	movf	___wmul@multiplier,w,c
  3420  00224C  0203               	mulwf	___wmul@multiplicand,c
  3421  00224E  CFF3 F005          	movff	prodl,___wmul@product
  3422  002252  CFF4 F006          	movff	prodh,___wmul@product+1
  3423  002256  5001               	movf	___wmul@multiplier,w,c
  3424  002258  0204               	mulwf	___wmul@multiplicand+1,c
  3425  00225A  50F3               	movf	prodl,w,c
  3426  00225C  2606               	addwf	___wmul@product+1,f,c
  3427  00225E  5002               	movf	___wmul@multiplier+1,w,c
  3428  002260  0203               	mulwf	___wmul@multiplicand,c
  3429  002262  50F3               	movf	prodl,w,c
  3430  002264  2606               	addwf	___wmul@product+1,f,c
  3431  002266  C005  F001         	movff	___wmul@product,?___wmul
  3432  00226A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3433  00226E  0012               	return	
  3434  002270  0012               	return		;funcret
  3435  002272                     __end_of___wmul:
  3436                           	opt stack 0
  3437                           tosu	equ	0xFFF
  3438                           tosh	equ	0xFFE
  3439                           tosl	equ	0xFFD
  3440                           pclath	equ	0xFFA
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postinc1	equ	0xFE6
  3450                           postdec1	equ	0xFE5
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function ___lwmod *****************
  3461 ;; Defined at:
  3462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  dividend        2    7[COMRAM] unsigned int 
  3465 ;;  divisor         2    9[COMRAM] unsigned int 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  counter         1   11[COMRAM] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  2    7[COMRAM] unsigned int 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3480 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3481 ;;Total ram usage:        5 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_sprintf
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text16
  3491  002080                     __ptext16:
  3492                           	opt stack 0
  3493  002080                     ___lwmod:
  3494                           	opt stack 27
  3495                           
  3496                           ;incstack = 0
  3497  002080  500A               	movf	___lwmod@divisor,w,c
  3498  002082  100B               	iorwf	___lwmod@divisor+1,w,c
  3499  002084  B4D8               	btfsc	status,2,c
  3500  002086  D01D               	goto	l1013
  3501  002088  0E01               	movlw	1
  3502  00208A  6E0C               	movwf	___lwmod@counter,c
  3503  00208C  D005               	goto	l2072
  3504  00208E                     l2070:
  3505  00208E  90D8               	bcf	status,0,c
  3506  002090  360A               	rlcf	___lwmod@divisor,f,c
  3507  002092  360B               	rlcf	___lwmod@divisor+1,f,c
  3508  002094  2A0C               	incf	___lwmod@counter,f,c
  3509  002096  D000               	goto	l2072
  3510  002098                     l2072:
  3511  002098  BE0B               	btfsc	___lwmod@divisor+1,7,c
  3512  00209A  D002               	goto	l2074
  3513  00209C  D7F8               	goto	l2070
  3514  00209E  D000               	goto	l2074
  3515  0020A0                     l2074:
  3516  0020A0  500A               	movf	___lwmod@divisor,w,c
  3517  0020A2  5C08               	subwf	___lwmod@dividend,w,c
  3518  0020A4  500B               	movf	___lwmod@divisor+1,w,c
  3519  0020A6  5809               	subwfb	___lwmod@dividend+1,w,c
  3520  0020A8  A0D8               	btfss	status,0,c
  3521  0020AA  D005               	goto	l2078
  3522  0020AC  500A               	movf	___lwmod@divisor,w,c
  3523  0020AE  5E08               	subwf	___lwmod@dividend,f,c
  3524  0020B0  500B               	movf	___lwmod@divisor+1,w,c
  3525  0020B2  5A09               	subwfb	___lwmod@dividend+1,f,c
  3526  0020B4  D000               	goto	l2078
  3527  0020B6                     l2078:
  3528  0020B6  90D8               	bcf	status,0,c
  3529  0020B8  320B               	rrcf	___lwmod@divisor+1,f,c
  3530  0020BA  320A               	rrcf	___lwmod@divisor,f,c
  3531  0020BC  2E0C               	decfsz	___lwmod@counter,f,c
  3532  0020BE  D7F0               	goto	l2074
  3533  0020C0  D000               	goto	l1013
  3534  0020C2                     l1013:
  3535  0020C2  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3536  0020C6  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3537  0020CA  0012               	return		;funcret
  3538  0020CC                     __end_of___lwmod:
  3539                           	opt stack 0
  3540                           tosu	equ	0xFFF
  3541                           tosh	equ	0xFFE
  3542                           tosl	equ	0xFFD
  3543                           pclath	equ	0xFFA
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postinc1	equ	0xFE6
  3553                           postdec1	equ	0xFE5
  3554                           fsr1h	equ	0xFE2
  3555                           fsr1l	equ	0xFE1
  3556                           indf2	equ	0xFDF
  3557                           postinc2	equ	0xFDE
  3558                           postdec2	equ	0xFDD
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function ___lwdiv *****************
  3564 ;; Defined at:
  3565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  dividend        2    0[COMRAM] unsigned int 
  3568 ;;  divisor         2    2[COMRAM] unsigned int 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  quotient        2    4[COMRAM] unsigned int 
  3571 ;;  counter         1    6[COMRAM] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  2    0[COMRAM] unsigned int 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3584 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3585 ;;Total ram usage:        7 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_sprintf
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text17
  3595  001FD0                     __ptext17:
  3596                           	opt stack 0
  3597  001FD0                     ___lwdiv:
  3598                           	opt stack 27
  3599                           
  3600                           ;incstack = 0
  3601  001FD0  0E00               	movlw	0
  3602  001FD2  6E06               	movwf	___lwdiv@quotient+1,c
  3603  001FD4  0E00               	movlw	0
  3604  001FD6  6E05               	movwf	___lwdiv@quotient,c
  3605  001FD8  5003               	movf	___lwdiv@divisor,w,c
  3606  001FDA  1004               	iorwf	___lwdiv@divisor+1,w,c
  3607  001FDC  B4D8               	btfsc	status,2,c
  3608  001FDE  D021               	goto	l1003
  3609  001FE0  0E01               	movlw	1
  3610  001FE2  6E07               	movwf	___lwdiv@counter,c
  3611  001FE4  D005               	goto	l2052
  3612  001FE6                     l2050:
  3613  001FE6  90D8               	bcf	status,0,c
  3614  001FE8  3603               	rlcf	___lwdiv@divisor,f,c
  3615  001FEA  3604               	rlcf	___lwdiv@divisor+1,f,c
  3616  001FEC  2A07               	incf	___lwdiv@counter,f,c
  3617  001FEE  D000               	goto	l2052
  3618  001FF0                     l2052:
  3619  001FF0  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3620  001FF2  D002               	goto	l2054
  3621  001FF4  D7F8               	goto	l2050
  3622  001FF6  D000               	goto	l2054
  3623  001FF8                     l2054:
  3624  001FF8  90D8               	bcf	status,0,c
  3625  001FFA  3605               	rlcf	___lwdiv@quotient,f,c
  3626  001FFC  3606               	rlcf	___lwdiv@quotient+1,f,c
  3627  001FFE  5003               	movf	___lwdiv@divisor,w,c
  3628  002000  5C01               	subwf	___lwdiv@dividend,w,c
  3629  002002  5004               	movf	___lwdiv@divisor+1,w,c
  3630  002004  5802               	subwfb	___lwdiv@dividend+1,w,c
  3631  002006  A0D8               	btfss	status,0,c
  3632  002008  D006               	goto	l2062
  3633  00200A  5003               	movf	___lwdiv@divisor,w,c
  3634  00200C  5E01               	subwf	___lwdiv@dividend,f,c
  3635  00200E  5004               	movf	___lwdiv@divisor+1,w,c
  3636  002010  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3637  002012  8005               	bsf	___lwdiv@quotient,0,c
  3638  002014  D000               	goto	l2062
  3639  002016                     l2062:
  3640  002016  90D8               	bcf	status,0,c
  3641  002018  3204               	rrcf	___lwdiv@divisor+1,f,c
  3642  00201A  3203               	rrcf	___lwdiv@divisor,f,c
  3643  00201C  2E07               	decfsz	___lwdiv@counter,f,c
  3644  00201E  D7EC               	goto	l2054
  3645  002020  D000               	goto	l1003
  3646  002022                     l1003:
  3647  002022  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3648  002026  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3649  00202A  0012               	return		;funcret
  3650  00202C                     __end_of___lwdiv:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postinc1	equ	0xFE6
  3665                           postdec1	equ	0xFE5
  3666                           fsr1h	equ	0xFE2
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _lcd_putrs *****************
  3676 ;; Defined at:
  3677 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3680 ;;		 -> STR_20(13), STR_18(11), STR_16(9), STR_13(11), 
  3681 ;;		 -> STR_12(17), ingresar_password@clear(16), STR_9(2), STR_8(2), 
  3682 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  3683 ;;		 -> STR_3(2), buffer2(20), 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;		None               void
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3699 ;;Total ram usage:        2 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    4
  3702 ;; This function calls:
  3703 ;;		_lcd_putc
  3704 ;; This function is called by:
  3705 ;;		_imprimir_tecla
  3706 ;;		_guardar_tecla_presionada
  3707 ;;		_leer_teclado
  3708 ;;		_caratula
  3709 ;;		_ingresar_password
  3710 ;;		_main
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text18
  3715  00202C                     __ptext18:
  3716                           	opt stack 0
  3717  00202C                     _lcd_putrs:
  3718                           	opt stack 23
  3719                           
  3720                           ;unmc_lcd_216.c: 223: while(*ptr){
  3721                           
  3722                           ;incstack = 0
  3723  00202C  D015               	goto	l2178
  3724  00202E                     l2174:
  3725                           
  3726                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3727  00202E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3728  002032  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3729  002036  6AF8               	clrf	tblptru,c
  3730  002038  0E0E               	movlw	(high __ramtop+-1)
  3731  00203A  64F7               	cpfsgt	tblptrh,c
  3732  00203C  D003               	bra	u1527
  3733  00203E  0008               	tblrd		*
  3734  002040  50F5               	movf	tablat,w,c
  3735  002042  D005               	bra	u1520
  3736  002044                     u1527:
  3737  002044  CFF6 FFE9          	movff	tblptrl,fsr0l
  3738  002048  CFF7 FFEA          	movff	tblptrh,fsr0h
  3739  00204C  50EF               	movf	indf0,w,c
  3740  00204E                     u1520:
  3741  00204E  EC66  F010         	call	_lcd_putc
  3742  002052  4A09               	infsnz	lcd_putrs@ptr,f,c
  3743  002054  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3744  002056  D000               	goto	l2178
  3745  002058                     l2178:
  3746  002058  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3747  00205C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3748  002060  6AF8               	clrf	tblptru,c
  3749  002062  0E0E               	movlw	(high __ramtop+-1)
  3750  002064  64F7               	cpfsgt	tblptrh,c
  3751  002066  D003               	bra	u1537
  3752  002068  0008               	tblrd		*
  3753  00206A  50F5               	movf	tablat,w,c
  3754  00206C  D005               	bra	u1530
  3755  00206E                     u1537:
  3756  00206E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3757  002072  CFF7 FFEA          	movff	tblptrh,fsr0h
  3758  002076  50EF               	movf	indf0,w,c
  3759  002078                     u1530:
  3760  002078  0900               	iorlw	0
  3761  00207A  A4D8               	btfss	status,2,c
  3762  00207C  D7D8               	goto	l2174
  3763  00207E  0012               	return		;funcret
  3764  002080                     __end_of_lcd_putrs:
  3765                           	opt stack 0
  3766                           tosu	equ	0xFFF
  3767                           tosh	equ	0xFFE
  3768                           tosl	equ	0xFFD
  3769                           pclath	equ	0xFFA
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           indf0	equ	0xFEF
  3777                           postinc0	equ	0xFEE
  3778                           fsr0h	equ	0xFEA
  3779                           fsr0l	equ	0xFE9
  3780                           wreg	equ	0xFE8
  3781                           postinc1	equ	0xFE6
  3782                           postdec1	equ	0xFE5
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _lcd_putc *****************
  3793 ;; Defined at:
  3794 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  c               1    wreg     unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  c               1    7[COMRAM] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3812 ;;Total ram usage:        1 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    3
  3815 ;; This function calls:
  3816 ;;		_lcd_gotoxy
  3817 ;;		_lcd_send_byte
  3818 ;; This function is called by:
  3819 ;;		_lcd_putrs
  3820 ;;		_lcd_puts
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text19
  3825  0020CC                     __ptext19:
  3826                           	opt stack 0
  3827  0020CC                     _lcd_putc:
  3828                           	opt stack 23
  3829                           
  3830                           ;incstack = 0
  3831                           ;lcd_putc@c stored from wreg
  3832  0020CC  6E08               	movwf	lcd_putc@c,c
  3833                           
  3834                           ;unmc_lcd_216.c: 173: switch(c){
  3835  0020CE  D018               	goto	l2024
  3836  0020D0                     l2014:
  3837                           
  3838                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3839  0020D0  0E01               	movlw	1
  3840  0020D2  6E03               	movwf	lcd_send_byte@n,c
  3841  0020D4  0E00               	movlw	0
  3842  0020D6  ECF6  F010         	call	_lcd_send_byte
  3843                           
  3844                           ;unmc_lcd_216.c: 176: break;
  3845  0020DA  0012               	return	
  3846  0020DC                     l2016:
  3847                           
  3848                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3849  0020DC  0E02               	movlw	2
  3850  0020DE  6E05               	movwf	lcd_gotoxy@y,c
  3851  0020E0  0E01               	movlw	1
  3852  0020E2  EC39  F011         	call	_lcd_gotoxy
  3853                           
  3854                           ;unmc_lcd_216.c: 179: break;
  3855  0020E6  0012               	return	
  3856  0020E8                     l2018:
  3857                           
  3858                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3859  0020E8  0E10               	movlw	16
  3860  0020EA  6E03               	movwf	lcd_send_byte@n,c
  3861  0020EC  0E00               	movlw	0
  3862  0020EE  ECF6  F010         	call	_lcd_send_byte
  3863                           
  3864                           ;unmc_lcd_216.c: 182: break;
  3865  0020F2  0012               	return	
  3866  0020F4                     l2020:
  3867                           
  3868                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3869  0020F4  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3870  0020F8  0E01               	movlw	1
  3871  0020FA  ECF6  F010         	call	_lcd_send_byte
  3872                           
  3873                           ;unmc_lcd_216.c: 186: }
  3874                           
  3875                           ;unmc_lcd_216.c: 185: break;
  3876  0020FE  0012               	return	
  3877  002100                     l2024:
  3878  002100  5008               	movf	lcd_putc@c,w,c
  3879                           
  3880                           ; Switch size 1, requested type "space"
  3881                           ; Number of cases is 3, Range of values is 8 to 12
  3882                           ; switch strategies available:
  3883                           ; Name         Instructions Cycles
  3884                           ; simple_byte           10     6 (average)
  3885                           ;	Chosen strategy is simple_byte
  3886  002102  0A08               	xorlw	8	; case 8
  3887  002104  B4D8               	btfsc	status,2,c
  3888  002106  D7F0               	goto	l2018
  3889  002108  0A02               	xorlw	2	; case 10
  3890  00210A  B4D8               	btfsc	status,2,c
  3891  00210C  D7E7               	goto	l2016
  3892  00210E  0A06               	xorlw	6	; case 12
  3893  002110  B4D8               	btfsc	status,2,c
  3894  002112  D7DE               	goto	l2014
  3895  002114  D7EF               	goto	l2020
  3896  002116  0012               	return		;funcret
  3897  002118                     __end_of_lcd_putc:
  3898                           	opt stack 0
  3899                           tosu	equ	0xFFF
  3900                           tosh	equ	0xFFE
  3901                           tosl	equ	0xFFD
  3902                           pclath	equ	0xFFA
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           indf0	equ	0xFEF
  3910                           postinc0	equ	0xFEE
  3911                           fsr0h	equ	0xFEA
  3912                           fsr0l	equ	0xFE9
  3913                           wreg	equ	0xFE8
  3914                           postinc1	equ	0xFE6
  3915                           postdec1	equ	0xFE5
  3916                           fsr1h	equ	0xFE2
  3917                           fsr1l	equ	0xFE1
  3918                           indf2	equ	0xFDF
  3919                           postinc2	equ	0xFDE
  3920                           postdec2	equ	0xFDD
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _lcd_gotoxy *****************
  3926 ;; Defined at:
  3927 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  x               1    wreg     unsigned char 
  3930 ;;  y               1    4[COMRAM] unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  x               1    5[COMRAM] unsigned char 
  3933 ;;  address         1    6[COMRAM] unsigned char 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;		None               void
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3943 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3946 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3947 ;;Total ram usage:        3 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    2
  3950 ;; This function calls:
  3951 ;;		_lcd_send_byte
  3952 ;; This function is called by:
  3953 ;;		_caratula
  3954 ;;		_ingresar_password
  3955 ;;		_main
  3956 ;;		_lcd_putc
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text20
  3961  002272                     __ptext20:
  3962                           	opt stack 0
  3963  002272                     _lcd_gotoxy:
  3964                           	opt stack 23
  3965                           
  3966                           ;incstack = 0
  3967                           ;lcd_gotoxy@x stored from wreg
  3968  002272  6E06               	movwf	lcd_gotoxy@x,c
  3969                           
  3970                           ;unmc_lcd_216.c: 159: int8 address;
  3971                           ;unmc_lcd_216.c: 161: if(y != 1)
  3972  002274  0405               	decf	lcd_gotoxy@y,w,c
  3973  002276  B4D8               	btfsc	status,2,c
  3974  002278  D002               	goto	l2006
  3975                           
  3976                           ;unmc_lcd_216.c: 162: address = 0x40;
  3977  00227A  0E40               	movlw	64
  3978  00227C  D001               	goto	L1
  3979  00227E                     l2006:
  3980                           
  3981                           ;unmc_lcd_216.c: 163: else
  3982                           ;unmc_lcd_216.c: 164: address=0;
  3983  00227E  0E00               	movlw	0
  3984  002280                     L1:
  3985  002280  6E07               	movwf	lcd_gotoxy@address,c
  3986  002282  D000               	goto	l2008
  3987  002284                     l2008:
  3988                           
  3989                           ;unmc_lcd_216.c: 166: address += x-1;
  3990  002284  0406               	decf	lcd_gotoxy@x,w,c
  3991  002286  2607               	addwf	lcd_gotoxy@address,f,c
  3992                           
  3993                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  3994  002288  5007               	movf	lcd_gotoxy@address,w,c
  3995  00228A  0980               	iorlw	128
  3996  00228C  6E03               	movwf	lcd_send_byte@n,c
  3997  00228E  0E00               	movlw	0
  3998  002290  ECF6  F010         	call	_lcd_send_byte
  3999  002294  0012               	return		;funcret
  4000  002296                     __end_of_lcd_gotoxy:
  4001                           	opt stack 0
  4002                           tosu	equ	0xFFF
  4003                           tosh	equ	0xFFE
  4004                           tosl	equ	0xFFD
  4005                           pclath	equ	0xFFA
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           indf0	equ	0xFEF
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           postinc1	equ	0xFE6
  4018                           postdec1	equ	0xFE5
  4019                           fsr1h	equ	0xFE2
  4020                           fsr1l	equ	0xFE1
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _Setup *****************
  4029 ;; Defined at:
  4030 ;;		line 59 in file "main.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;		None               void
  4037 ;; Registers used:
  4038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    3
  4051 ;; This function calls:
  4052 ;;		_Write_RTC
  4053 ;;		_lcd_comand
  4054 ;;		_lcd_init
  4055 ;; This function is called by:
  4056 ;;		_main
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text21
  4061  002118                     __ptext21:
  4062                           	opt stack 0
  4063  002118                     _Setup:
  4064                           	opt stack 27
  4065                           
  4066                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  4067                           
  4068                           ;incstack = 0
  4069  002118  8E9B               	bsf	3995,7,c	;volatile
  4070                           
  4071                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  4072  00211A  9C9B               	bcf	3995,6,c	;volatile
  4073                           
  4074                           ;main.c: 63: OSCCONbits.IRCF0=1;
  4075  00211C  88D3               	bsf	4051,4,c	;volatile
  4076                           
  4077                           ;main.c: 64: OSCCONbits.IRCF1=1;
  4078  00211E  8AD3               	bsf	4051,5,c	;volatile
  4079                           
  4080                           ;main.c: 65: OSCCONbits.IRCF2=1;
  4081  002120  8CD3               	bsf	4051,6,c	;volatile
  4082                           
  4083                           ;main.c: 66: OSCCONbits.SCS0=0;
  4084  002122  90D3               	bcf	4051,0,c	;volatile
  4085                           
  4086                           ;main.c: 67: OSCCONbits.SCS1=0;
  4087  002124  92D3               	bcf	4051,1,c	;volatile
  4088                           
  4089                           ;main.c: 68: TRISA = 0b11110000;
  4090  002126  0EF0               	movlw	240
  4091  002128  6E92               	movwf	3986,c	;volatile
  4092                           
  4093                           ;main.c: 69: TRISB = 0;
  4094  00212A  0E00               	movlw	0
  4095  00212C  6E93               	movwf	3987,c	;volatile
  4096                           
  4097                           ;main.c: 70: TRISC = 0b00000111;
  4098  00212E  0E07               	movlw	7
  4099  002130  6E94               	movwf	3988,c	;volatile
  4100                           
  4101                           ;main.c: 74: ANCON0=0b11111111;
  4102  002132  010F               	movlb	15	; () banked
  4103  002134  6948               	setf	72,b	;volatile
  4104                           
  4105                           ; BSR set to: 15
  4106                           ;main.c: 76: ANCON1=0b11111111;
  4107  002136  010F               	movlb	15	; () banked
  4108  002138  6949               	setf	73,b	;volatile
  4109                           
  4110                           ;main.c: 77: ADCON0=0b00101101;
  4111  00213A  0E2D               	movlw	45
  4112  00213C  6EC2               	movwf	4034,c	;volatile
  4113                           
  4114                           ;main.c: 78: ADCON1=0b00010000;
  4115  00213E  0E10               	movlw	16
  4116  002140  6EC1               	movwf	4033,c	;volatile
  4117                           
  4118                           ; BSR set to: 15
  4119                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  4120  002142  010F               	movlb	15	; () banked
  4121  002144  8F3F               	bsf	63,7,b	;volatile
  4122                           
  4123                           ; BSR set to: 15
  4124                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  4125  002146  010F               	movlb	15	; () banked
  4126  002148  8B3F               	bsf	63,5,b	;volatile
  4127                           
  4128                           ; BSR set to: 15
  4129                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  4130  00214A  86CD               	bsf	4045,3,c	;volatile
  4131                           
  4132                           ; BSR set to: 15
  4133                           ;main.c: 82: Write_RTC();
  4134  00214C  ECF7  F008         	call	_Write_RTC	;wreg free
  4135                           
  4136                           ;main.c: 83: lcd_init();
  4137  002150  EC69  F00E         	call	_lcd_init	;wreg free
  4138                           
  4139                           ;main.c: 84: lcd_comand(0b00001100);
  4140  002154  0E0C               	movlw	12
  4141  002156  EC88  F011         	call	_lcd_comand
  4142                           
  4143                           ;main.c: 85: LATBbits.LATB1 = 1;;
  4144  00215A  828A               	bsf	3978,1,c	;volatile
  4145                           
  4146                           ;main.c: 86: LATBbits.LATB0 = 1;;
  4147  00215C  808A               	bsf	3978,0,c	;volatile
  4148  00215E  0012               	return		;funcret
  4149  002160                     __end_of_Setup:
  4150                           	opt stack 0
  4151                           tosu	equ	0xFFF
  4152                           tosh	equ	0xFFE
  4153                           tosl	equ	0xFFD
  4154                           pclath	equ	0xFFA
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           indf0	equ	0xFEF
  4162                           postinc0	equ	0xFEE
  4163                           fsr0h	equ	0xFEA
  4164                           fsr0l	equ	0xFE9
  4165                           wreg	equ	0xFE8
  4166                           postinc1	equ	0xFE6
  4167                           postdec1	equ	0xFE5
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _lcd_init *****************
  4178 ;; Defined at:
  4179 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  i               1    4[COMRAM] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4197 ;;Total ram usage:        1 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    2
  4200 ;; This function calls:
  4201 ;;		_Delay1KTCYx
  4202 ;;		_lcd_send_byte
  4203 ;;		_lcd_send_nibble
  4204 ;; This function is called by:
  4205 ;;		_Setup
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text22
  4210  001CD2                     __ptext22:
  4211                           	opt stack 0
  4212  001CD2                     _lcd_init:
  4213                           	opt stack 27
  4214                           
  4215                           ;unmc_lcd_216.c: 120: int8 i;
  4216                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  4217                           
  4218                           ;incstack = 0
  4219  001CD2  9693               	bcf	3987,3,c	;volatile
  4220                           
  4221                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  4222  001CD4  9493               	bcf	3987,2,c	;volatile
  4223                           
  4224                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  4225  001CD6  968A               	bcf	3978,3,c	;volatile
  4226                           
  4227                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  4228  001CD8  948A               	bcf	3978,2,c	;volatile
  4229                           
  4230                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  4231  001CDA  9893               	bcf	3987,4,c	;volatile
  4232                           
  4233                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  4234  001CDC  9A93               	bcf	3987,5,c	;volatile
  4235                           
  4236                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  4237  001CDE  9C93               	bcf	3987,6,c	;volatile
  4238                           
  4239                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  4240  001CE0  9E93               	bcf	3987,7,c	;volatile
  4241                           
  4242                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  4243  001CE2  0E0A               	movlw	10
  4244  001CE4  EC6D  F011         	call	_Delay1KTCYx
  4245                           
  4246                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  4247  001CE8  0E0A               	movlw	10
  4248  001CEA  EC6D  F011         	call	_Delay1KTCYx
  4249                           
  4250                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  4251  001CEE  0E0A               	movlw	10
  4252  001CF0  EC6D  F011         	call	_Delay1KTCYx
  4253                           
  4254                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  4255  001CF4  0E00               	movlw	0
  4256  001CF6  6E05               	movwf	lcd_init@i,c
  4257  001CF8                     l2544:
  4258  001CF8  0E02               	movlw	2
  4259  001CFA  6405               	cpfsgt	lcd_init@i,c
  4260  001CFC  D001               	goto	l2548
  4261  001CFE  D008               	goto	l2554
  4262  001D00                     l2548:
  4263                           
  4264                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  4265  001D00  0E03               	movlw	3
  4266  001D02  ECE4  F00E         	call	_lcd_send_nibble
  4267                           
  4268                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  4269  001D06  0E0A               	movlw	10
  4270  001D08  EC6D  F011         	call	_Delay1KTCYx
  4271  001D0C  2A05               	incf	lcd_init@i,f,c
  4272  001D0E  D7F4               	goto	l2544
  4273  001D10                     l2554:
  4274                           
  4275                           ;unmc_lcd_216.c: 146: }
  4276                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  4277  001D10  0E02               	movlw	2
  4278  001D12  ECE4  F00E         	call	_lcd_send_nibble
  4279                           
  4280                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  4281  001D16  0E00               	movlw	0
  4282  001D18  6E05               	movwf	lcd_init@i,c
  4283  001D1A  0E03               	movlw	3
  4284  001D1C  6405               	cpfsgt	lcd_init@i,c
  4285  001D1E  D002               	goto	l2562
  4286  001D20  0012               	return	
  4287  001D22  0012               	return	
  4288  001D24                     l2562:
  4289                           
  4290                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  4291  001D24  5005               	movf	lcd_init@i,w,c
  4292  001D26  0D01               	mullw	1
  4293  001D28  0E0B               	movlw	low _LCD_INIT_STRING
  4294  001D2A  24F3               	addwf	prodl,w,c
  4295  001D2C  6EF6               	movwf	tblptrl,c
  4296  001D2E  0E0F               	movlw	high _LCD_INIT_STRING
  4297  001D30  20F4               	addwfc	prodh,w,c
  4298  001D32  6EF7               	movwf	tblptrh,c
  4299  001D34                     	if	0	;There are less than 3 active tblptr bytes
  4300  001D34                     	endif
  4301  001D34  0008               	tblrd		*
  4302  001D36  CFF5 F003          	movff	tablat,lcd_send_byte@n
  4303  001D3A  0E00               	movlw	0
  4304  001D3C  ECF6  F010         	call	_lcd_send_byte
  4305                           
  4306                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  4307  001D40  0E0A               	movlw	10
  4308  001D42  EC6D  F011         	call	_Delay1KTCYx
  4309  001D46  2A05               	incf	lcd_init@i,f,c
  4310  001D48  0E03               	movlw	3
  4311  001D4A  6405               	cpfsgt	lcd_init@i,c
  4312  001D4C  D7EB               	goto	l2562
  4313  001D4E  0012               	return	
  4314  001D50  0012               	return		;funcret
  4315  001D52                     __end_of_lcd_init:
  4316                           	opt stack 0
  4317                           tosu	equ	0xFFF
  4318                           tosh	equ	0xFFE
  4319                           tosl	equ	0xFFD
  4320                           pclath	equ	0xFFA
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           indf0	equ	0xFEF
  4328                           postinc0	equ	0xFEE
  4329                           fsr0h	equ	0xFEA
  4330                           fsr0l	equ	0xFE9
  4331                           wreg	equ	0xFE8
  4332                           postinc1	equ	0xFE6
  4333                           postdec1	equ	0xFE5
  4334                           fsr1h	equ	0xFE2
  4335                           fsr1l	equ	0xFE1
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function _Delay1KTCYx *****************
  4344 ;; Defined at:
  4345 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  unit            1    wreg     unsigned char 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  unit            1    0[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;		None               void
  4352 ;; Registers used:
  4353 ;;		wreg
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4363 ;;Total ram usage:        1 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_lcd_init
  4369 ;;		_DelayPORXLCD
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text23
  4374  0022DA                     __ptext23:
  4375                           	opt stack 0
  4376  0022DA                     _Delay1KTCYx:
  4377                           	opt stack 28
  4378                           
  4379                           ;incstack = 0
  4380                           ;Delay1KTCYx@unit stored from wreg
  4381  0022DA  6E01               	movwf	Delay1KTCYx@unit,c
  4382  0022DC  0EFA               	movlw	250
  4383  0022DE                     u2437:
  4384  0022DE  F000               	nop	
  4385  0022E0  2EE8               	decfsz	wreg,f,c
  4386  0022E2  D7FD               	goto	u2437
  4387  0022E4  2E01               	decfsz	Delay1KTCYx@unit,f,c
  4388  0022E6  D7FA               	goto	l1322
  4389  0022E8  0012               	return	
  4390  0022EA  0012               	return		;funcret
  4391  0022EC                     __end_of_Delay1KTCYx:
  4392                           	opt stack 0
  4393                           tosu	equ	0xFFF
  4394                           tosh	equ	0xFFE
  4395                           tosl	equ	0xFFD
  4396                           pclath	equ	0xFFA
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           indf0	equ	0xFEF
  4404                           postinc0	equ	0xFEE
  4405                           fsr0h	equ	0xFEA
  4406                           fsr0l	equ	0xFE9
  4407                           wreg	equ	0xFE8
  4408                           postinc1	equ	0xFE6
  4409                           postdec1	equ	0xFE5
  4410                           fsr1h	equ	0xFE2
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           postdec2	equ	0xFDD
  4415                           fsr2h	equ	0xFDA
  4416                           fsr2l	equ	0xFD9
  4417                           status	equ	0xFD8
  4418                           
  4419 ;; *************** function _lcd_comand *****************
  4420 ;; Defined at:
  4421 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  d               1    wreg     unsigned char 
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;  d               1    4[COMRAM] unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;		None               void
  4428 ;; Registers used:
  4429 ;;		wreg, status,2, status,0, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4439 ;;Total ram usage:        1 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    2
  4442 ;; This function calls:
  4443 ;;		_lcd_send_byte
  4444 ;; This function is called by:
  4445 ;;		_caratula
  4446 ;;		_Setup
  4447 ;;		_ingresar_password
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text24
  4452  002310                     __ptext24:
  4453                           	opt stack 0
  4454  002310                     _lcd_comand:
  4455                           	opt stack 27
  4456                           
  4457                           ;incstack = 0
  4458                           ;lcd_comand@d stored from wreg
  4459  002310  6E05               	movwf	lcd_comand@d,c
  4460                           
  4461                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  4462  002312  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  4463  002316  0E00               	movlw	0
  4464  002318  ECF6  F010         	call	_lcd_send_byte
  4465  00231C  0012               	return		;funcret
  4466  00231E                     __end_of_lcd_comand:
  4467                           	opt stack 0
  4468                           tosu	equ	0xFFF
  4469                           tosh	equ	0xFFE
  4470                           tosl	equ	0xFFD
  4471                           pclath	equ	0xFFA
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           indf0	equ	0xFEF
  4479                           postinc0	equ	0xFEE
  4480                           fsr0h	equ	0xFEA
  4481                           fsr0l	equ	0xFE9
  4482                           wreg	equ	0xFE8
  4483                           postinc1	equ	0xFE6
  4484                           postdec1	equ	0xFE5
  4485                           fsr1h	equ	0xFE2
  4486                           fsr1l	equ	0xFE1
  4487                           indf2	equ	0xFDF
  4488                           postinc2	equ	0xFDE
  4489                           postdec2	equ	0xFDD
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _lcd_send_byte *****************
  4495 ;; Defined at:
  4496 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  address         1    wreg     unsigned char 
  4499 ;;  n               1    2[COMRAM] unsigned char 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  address         1    3[COMRAM] unsigned char 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;		None               void
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4511 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4515 ;;Total ram usage:        2 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    1
  4518 ;; This function calls:
  4519 ;;		_Delay100TCYx
  4520 ;;		_lcd_send_nibble
  4521 ;; This function is called by:
  4522 ;;		_lcd_init
  4523 ;;		_lcd_gotoxy
  4524 ;;		_lcd_putc
  4525 ;;		_lcd_comand
  4526 ;;		_lcd_setcursor_vb
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text25
  4531  0021EC                     __ptext25:
  4532                           	opt stack 0
  4533  0021EC                     _lcd_send_byte:
  4534                           	opt stack 24
  4535                           
  4536                           ;incstack = 0
  4537                           ;lcd_send_byte@address stored from wreg
  4538  0021EC  6E04               	movwf	lcd_send_byte@address,c
  4539                           
  4540                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  4541  0021EE  968A               	bcf	3978,3,c	;volatile
  4542                           
  4543                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  4544  0021F0  0E02               	movlw	2
  4545  0021F2  EC76  F011         	call	_Delay100TCYx
  4546                           
  4547                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  4548  0021F6  9893               	bcf	3987,4,c	;volatile
  4549                           
  4550                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  4551  0021F8  9A93               	bcf	3987,5,c	;volatile
  4552                           
  4553                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  4554  0021FA  9C93               	bcf	3987,6,c	;volatile
  4555                           
  4556                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  4557  0021FC  9E93               	bcf	3987,7,c	;volatile
  4558                           
  4559                           ;unmc_lcd_216.c: 101: if(address)
  4560  0021FE  5004               	movf	lcd_send_byte@address,w,c
  4561  002200  B4D8               	btfsc	status,2,c
  4562  002202  D002               	goto	l280
  4563                           
  4564                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  4565  002204  868A               	bsf	3978,3,c	;volatile
  4566  002206  D001               	goto	l281
  4567  002208                     l280:
  4568                           
  4569                           ;unmc_lcd_216.c: 103: else
  4570                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  4571  002208  968A               	bcf	3978,3,c	;volatile
  4572  00220A                     l281:
  4573                           
  4574                           ;unmc_lcd_216.c: 106: __nop();
  4575  00220A  F000               	nop	
  4576                           
  4577                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  4578  00220C  3803               	swapf	lcd_send_byte@n,w,c
  4579  00220E  0B0F               	andlw	15
  4580  002210  ECE4  F00E         	call	_lcd_send_nibble
  4581                           
  4582                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  4583  002214  5003               	movf	lcd_send_byte@n,w,c
  4584  002216  0B0F               	andlw	15
  4585  002218  ECE4  F00E         	call	_lcd_send_nibble
  4586  00221C  0012               	return		;funcret
  4587  00221E                     __end_of_lcd_send_byte:
  4588                           	opt stack 0
  4589                           tosu	equ	0xFFF
  4590                           tosh	equ	0xFFE
  4591                           tosl	equ	0xFFD
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           indf0	equ	0xFEF
  4600                           postinc0	equ	0xFEE
  4601                           fsr0h	equ	0xFEA
  4602                           fsr0l	equ	0xFE9
  4603                           wreg	equ	0xFE8
  4604                           postinc1	equ	0xFE6
  4605                           postdec1	equ	0xFE5
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function _lcd_send_nibble *****************
  4616 ;; Defined at:
  4617 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  nibble          1    wreg     unsigned char 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  nibble          1    1[COMRAM] unsigned char 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;		None               void
  4624 ;; Registers used:
  4625 ;;		wreg, status,2, status,0
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4635 ;;Total ram usage:        2 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_lcd_send_byte
  4641 ;;		_lcd_init
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text26
  4646  001DC8                     __ptext26:
  4647                           	opt stack 0
  4648  001DC8                     _lcd_send_nibble:
  4649                           	opt stack 24
  4650                           
  4651                           ;incstack = 0
  4652                           ;lcd_send_nibble@nibble stored from wreg
  4653  001DC8  6E02               	movwf	lcd_send_nibble@nibble,c
  4654                           
  4655                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  4656  001DCA  A002               	btfss	lcd_send_nibble@nibble,0,c
  4657  001DCC  D003               	goto	u1200
  4658  001DCE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4659  001DD0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4660  001DD2  D001               	goto	u1218
  4661  001DD4                     u1200:
  4662  001DD4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4663  001DD6                     u1218:
  4664  001DD6  3A01               	swapf	??_lcd_send_nibble,f,c
  4665  001DD8  508A               	movf	3978,w,c	;volatile
  4666  001DDA  1801               	xorwf	??_lcd_send_nibble,w,c
  4667  001DDC  0BEF               	andlw	-17
  4668  001DDE  1801               	xorwf	??_lcd_send_nibble,w,c
  4669  001DE0  6E8A               	movwf	3978,c	;volatile
  4670                           
  4671                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  4672  001DE2  A202               	btfss	lcd_send_nibble@nibble,1,c
  4673  001DE4  D003               	goto	u1220
  4674  001DE6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4675  001DE8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4676  001DEA  D001               	goto	u1238
  4677  001DEC                     u1220:
  4678  001DEC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4679  001DEE                     u1238:
  4680  001DEE  3A01               	swapf	??_lcd_send_nibble,f,c
  4681  001DF0  4601               	rlncf	??_lcd_send_nibble,f,c
  4682  001DF2  508A               	movf	3978,w,c	;volatile
  4683  001DF4  1801               	xorwf	??_lcd_send_nibble,w,c
  4684  001DF6  0BDF               	andlw	-33
  4685  001DF8  1801               	xorwf	??_lcd_send_nibble,w,c
  4686  001DFA  6E8A               	movwf	3978,c	;volatile
  4687                           
  4688                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  4689  001DFC  A402               	btfss	lcd_send_nibble@nibble,2,c
  4690  001DFE  D003               	goto	u1240
  4691  001E00  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4692  001E02  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4693  001E04  D001               	goto	u1258
  4694  001E06                     u1240:
  4695  001E06  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4696  001E08                     u1258:
  4697  001E08  3A01               	swapf	??_lcd_send_nibble,f,c
  4698  001E0A  4601               	rlncf	??_lcd_send_nibble,f,c
  4699  001E0C  4601               	rlncf	??_lcd_send_nibble,f,c
  4700  001E0E  508A               	movf	3978,w,c	;volatile
  4701  001E10  1801               	xorwf	??_lcd_send_nibble,w,c
  4702  001E12  0BBF               	andlw	-65
  4703  001E14  1801               	xorwf	??_lcd_send_nibble,w,c
  4704  001E16  6E8A               	movwf	3978,c	;volatile
  4705                           
  4706                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  4707  001E18  A602               	btfss	lcd_send_nibble@nibble,3,c
  4708  001E1A  D003               	goto	u1260
  4709  001E1C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4710  001E1E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  4711  001E20  D001               	goto	u1278
  4712  001E22                     u1260:
  4713  001E22  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  4714  001E24                     u1278:
  4715  001E24  3201               	rrcf	??_lcd_send_nibble,f,c
  4716  001E26  3201               	rrcf	??_lcd_send_nibble,f,c
  4717  001E28  508A               	movf	3978,w,c	;volatile
  4718  001E2A  1801               	xorwf	??_lcd_send_nibble,w,c
  4719  001E2C  0B7F               	andlw	-129
  4720  001E2E  1801               	xorwf	??_lcd_send_nibble,w,c
  4721  001E30  6E8A               	movwf	3978,c	;volatile
  4722                           
  4723                           ;unmc_lcd_216.c: 32: __nop();
  4724  001E32  F000               	nop	
  4725                           
  4726                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  4727  001E34  848A               	bsf	3978,2,c	;volatile
  4728                           
  4729                           ;unmc_lcd_216.c: 34: __nop();__nop();
  4730  001E36  F000               	nop	
  4731  001E38  F000               	nop	
  4732                           
  4733                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  4734  001E3A  948A               	bcf	3978,2,c	;volatile
  4735  001E3C  0012               	return		;funcret
  4736  001E3E                     __end_of_lcd_send_nibble:
  4737                           	opt stack 0
  4738                           tosu	equ	0xFFF
  4739                           tosh	equ	0xFFE
  4740                           tosl	equ	0xFFD
  4741                           pclath	equ	0xFFA
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           indf0	equ	0xFEF
  4749                           postinc0	equ	0xFEE
  4750                           fsr0h	equ	0xFEA
  4751                           fsr0l	equ	0xFE9
  4752                           wreg	equ	0xFE8
  4753                           postinc1	equ	0xFE6
  4754                           postdec1	equ	0xFE5
  4755                           fsr1h	equ	0xFE2
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _Delay100TCYx *****************
  4765 ;; Defined at:
  4766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  unit            1    wreg     unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  unit            1    0[COMRAM] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;		None               void
  4773 ;; Registers used:
  4774 ;;		wreg
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_lcd_send_byte
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text27
  4794  0022EC                     __ptext27:
  4795                           	opt stack 0
  4796  0022EC                     _Delay100TCYx:
  4797                           	opt stack 24
  4798                           
  4799                           ;incstack = 0
  4800                           ;Delay100TCYx@unit stored from wreg
  4801  0022EC  6E01               	movwf	Delay100TCYx@unit,c
  4802  0022EE  0E21               	movlw	33
  4803  0022F0                     u2447:
  4804  0022F0  2EE8               	decfsz	wreg,f,c
  4805  0022F2  D7FE               	goto	u2447
  4806  0022F4  F000               	nop	
  4807  0022F6  2E01               	decfsz	Delay100TCYx@unit,f,c
  4808  0022F8  D7FA               	goto	l1980
  4809  0022FA  0012               	return	
  4810  0022FC  0012               	return		;funcret
  4811  0022FE                     __end_of_Delay100TCYx:
  4812                           	opt stack 0
  4813                           tosu	equ	0xFFF
  4814                           tosh	equ	0xFFE
  4815                           tosl	equ	0xFFD
  4816                           pclath	equ	0xFFA
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodh	equ	0xFF4
  4822                           prodl	equ	0xFF3
  4823                           indf0	equ	0xFEF
  4824                           postinc0	equ	0xFEE
  4825                           fsr0h	equ	0xFEA
  4826                           fsr0l	equ	0xFE9
  4827                           wreg	equ	0xFE8
  4828                           postinc1	equ	0xFE6
  4829                           postdec1	equ	0xFE5
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _Write_RTC *****************
  4840 ;; Defined at:
  4841 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    2
  4862 ;; This function calls:
  4863 ;;		_RtccWrOn
  4864 ;;		_RtccWriteDate
  4865 ;;		_RtccWriteTime
  4866 ;;		___awdiv
  4867 ;; This function is called by:
  4868 ;;		_Setup
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text28
  4873  0011EE                     __ptext28:
  4874                           	opt stack 0
  4875  0011EE                     _Write_RTC:
  4876                           	opt stack 27
  4877                           
  4878                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  4879                           
  4880                           ;incstack = 0
  4881  0011EE  EC7F  F011         	call	_RtccWrOn	;wreg free
  4882                           
  4883                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  4884  0011F2  80A3               	bsf	4003,0,c	;volatile
  4885                           
  4886                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  4887  0011F4  C043  F001         	movff	_segundo,___awdiv@dividend
  4888  0011F8  C044  F002         	movff	_segundo+1,___awdiv@dividend+1
  4889  0011FC  0E00               	movlw	0
  4890  0011FE  6E04               	movwf	___awdiv@divisor+1,c
  4891  001200  0E0A               	movlw	10
  4892  001202  6E03               	movwf	___awdiv@divisor,c
  4893  001204  ECD7  F00D         	call	___awdiv	;wreg free
  4894  001208  5001               	movf	?___awdiv,w,c
  4895  00120A  6E5E               	movwf	_segundo_d,c
  4896                           
  4897                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  4898  00120C  505E               	movf	_segundo_d,w,c
  4899  00120E  0D0A               	mullw	10
  4900  001210  50F3               	movf	prodl,w,c
  4901  001212  0800               	sublw	0
  4902  001214  2443               	addwf	_segundo,w,c
  4903  001216  0100               	movlb	0	; () banked
  4904  001218  6FAF               	movwf	_segundo_u& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  4908  00121A  505E               	movf	_segundo_d,w,c
  4909  00121C  0D10               	mullw	16
  4910  00121E  50F3               	movf	prodl,w,c
  4911  001220  0100               	movlb	0	; () banked
  4912  001222  25AF               	addwf	_segundo_u& (0+255),w,b
  4913  001224  6E4F               	movwf	_RtccTime+1,c
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  4917  001226  C05C  F001         	movff	_minuto,___awdiv@dividend
  4918  00122A  C05D  F002         	movff	_minuto+1,___awdiv@dividend+1
  4919  00122E  0E00               	movlw	0
  4920  001230  6E04               	movwf	___awdiv@divisor+1,c
  4921  001232  0E0A               	movlw	10
  4922  001234  6E03               	movwf	___awdiv@divisor,c
  4923  001236  ECD7  F00D         	call	___awdiv	;wreg free
  4924  00123A  5001               	movf	?___awdiv,w,c
  4925  00123C  0100               	movlb	0	; () banked
  4926  00123E  6FAD               	movwf	_minuto_d& (0+255),b
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  4930  001240  0100               	movlb	0	; () banked
  4931  001242  51AD               	movf	_minuto_d& (0+255),w,b
  4932  001244  0D0A               	mullw	10
  4933  001246  50F3               	movf	prodl,w,c
  4934  001248  0800               	sublw	0
  4935  00124A  245C               	addwf	_minuto,w,c
  4936  00124C  0100               	movlb	0	; () banked
  4937  00124E  6FAE               	movwf	_minuto_u& (0+255),b
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  4941  001250  0100               	movlb	0	; () banked
  4942  001252  51AD               	movf	_minuto_d& (0+255),w,b
  4943  001254  0D10               	mullw	16
  4944  001256  50F3               	movf	prodl,w,c
  4945  001258  0100               	movlb	0	; () banked
  4946  00125A  25AE               	addwf	_minuto_u& (0+255),w,b
  4947  00125C  6E50               	movwf	_RtccTime+2,c
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  4951  00125E  C058  F001         	movff	_hora,___awdiv@dividend
  4952  001262  C059  F002         	movff	_hora+1,___awdiv@dividend+1
  4953  001266  0E00               	movlw	0
  4954  001268  6E04               	movwf	___awdiv@divisor+1,c
  4955  00126A  0E0A               	movlw	10
  4956  00126C  6E03               	movwf	___awdiv@divisor,c
  4957  00126E  ECD7  F00D         	call	___awdiv	;wreg free
  4958  001272  5001               	movf	?___awdiv,w,c
  4959  001274  0100               	movlb	0	; () banked
  4960  001276  6FA9               	movwf	_hora_d& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  4964  001278  0100               	movlb	0	; () banked
  4965  00127A  51A9               	movf	_hora_d& (0+255),w,b
  4966  00127C  0D0A               	mullw	10
  4967  00127E  50F3               	movf	prodl,w,c
  4968  001280  0800               	sublw	0
  4969  001282  2458               	addwf	_hora,w,c
  4970  001284  0100               	movlb	0	; () banked
  4971  001286  6FAA               	movwf	_hora_u& (0+255),b
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  4975  001288  0100               	movlb	0	; () banked
  4976  00128A  51A9               	movf	_hora_d& (0+255),w,b
  4977  00128C  0D10               	mullw	16
  4978  00128E  50F3               	movf	prodl,w,c
  4979  001290  0100               	movlb	0	; () banked
  4980  001292  25AA               	addwf	_hora_u& (0+255),w,b
  4981  001294  6E51               	movwf	_RtccTime+3,c
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  4985  001296  C052  F001         	movff	_anio,___awdiv@dividend
  4986  00129A  C053  F002         	movff	_anio+1,___awdiv@dividend+1
  4987  00129E  0E00               	movlw	0
  4988  0012A0  6E04               	movwf	___awdiv@divisor+1,c
  4989  0012A2  0E0A               	movlw	10
  4990  0012A4  6E03               	movwf	___awdiv@divisor,c
  4991  0012A6  ECD7  F00D         	call	___awdiv	;wreg free
  4992  0012AA  5001               	movf	?___awdiv,w,c
  4993  0012AC  0100               	movlb	0	; () banked
  4994  0012AE  6FA4               	movwf	_anio_d& (0+255),b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  4998  0012B0  0100               	movlb	0	; () banked
  4999  0012B2  51A4               	movf	_anio_d& (0+255),w,b
  5000  0012B4  0D0A               	mullw	10
  5001  0012B6  50F3               	movf	prodl,w,c
  5002  0012B8  0800               	sublw	0
  5003  0012BA  2452               	addwf	_anio,w,c
  5004  0012BC  0100               	movlb	0	; () banked
  5005  0012BE  6FA5               	movwf	_anio_u& (0+255),b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  5009  0012C0  0100               	movlb	0	; () banked
  5010  0012C2  51A4               	movf	_anio_d& (0+255),w,b
  5011  0012C4  0D10               	mullw	16
  5012  0012C6  50F3               	movf	prodl,w,c
  5013  0012C8  0100               	movlb	0	; () banked
  5014  0012CA  25A5               	addwf	_anio_u& (0+255),w,b
  5015  0012CC  6E4D               	movwf	_RtccDate+3,c
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  5019  0012CE  C05A  F001         	movff	_mes,___awdiv@dividend
  5020  0012D2  C05B  F002         	movff	_mes+1,___awdiv@dividend+1
  5021  0012D6  0E00               	movlw	0
  5022  0012D8  6E04               	movwf	___awdiv@divisor+1,c
  5023  0012DA  0E0A               	movlw	10
  5024  0012DC  6E03               	movwf	___awdiv@divisor,c
  5025  0012DE  ECD7  F00D         	call	___awdiv	;wreg free
  5026  0012E2  5001               	movf	?___awdiv,w,c
  5027  0012E4  0100               	movlb	0	; () banked
  5028  0012E6  6FAB               	movwf	_mes_d& (0+255),b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  5032  0012E8  0100               	movlb	0	; () banked
  5033  0012EA  51AB               	movf	_mes_d& (0+255),w,b
  5034  0012EC  0D0A               	mullw	10
  5035  0012EE  50F3               	movf	prodl,w,c
  5036  0012F0  0800               	sublw	0
  5037  0012F2  245A               	addwf	_mes,w,c
  5038  0012F4  0100               	movlb	0	; () banked
  5039  0012F6  6FAC               	movwf	_mes_u& (0+255),b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  5043  0012F8  0100               	movlb	0	; () banked
  5044  0012FA  51AB               	movf	_mes_d& (0+255),w,b
  5045  0012FC  0D10               	mullw	16
  5046  0012FE  50F3               	movf	prodl,w,c
  5047  001300  0100               	movlb	0	; () banked
  5048  001302  25AC               	addwf	_mes_u& (0+255),w,b
  5049  001304  6E4C               	movwf	_RtccDate+2,c
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  5053  001306  C054  F001         	movff	_dia,___awdiv@dividend
  5054  00130A  C055  F002         	movff	_dia+1,___awdiv@dividend+1
  5055  00130E  0E00               	movlw	0
  5056  001310  6E04               	movwf	___awdiv@divisor+1,c
  5057  001312  0E0A               	movlw	10
  5058  001314  6E03               	movwf	___awdiv@divisor,c
  5059  001316  ECD7  F00D         	call	___awdiv	;wreg free
  5060  00131A  5001               	movf	?___awdiv,w,c
  5061  00131C  0100               	movlb	0	; () banked
  5062  00131E  6FA7               	movwf	_fecha_d& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  5066  001320  0100               	movlb	0	; () banked
  5067  001322  51A7               	movf	_fecha_d& (0+255),w,b
  5068  001324  0D0A               	mullw	10
  5069  001326  50F3               	movf	prodl,w,c
  5070  001328  0800               	sublw	0
  5071  00132A  2454               	addwf	_dia,w,c
  5072  00132C  0100               	movlb	0	; () banked
  5073  00132E  6FA8               	movwf	_fecha_u& (0+255),b
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  5077  001330  0100               	movlb	0	; () banked
  5078  001332  51A7               	movf	_fecha_d& (0+255),w,b
  5079  001334  0D10               	mullw	16
  5080  001336  50F3               	movf	prodl,w,c
  5081  001338  0100               	movlb	0	; () banked
  5082  00133A  25A8               	addwf	_fecha_u& (0+255),w,b
  5083  00133C  6E4B               	movwf	_RtccDate+1,c
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  5087  00133E  C056  F0A6         	movff	_diasem,_dia_semana
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  5091  001342  C056  F04A         	movff	_diasem,_RtccDate
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  5095  001346  0E4E               	movlw	low _RtccTime
  5096  001348  6E01               	movwf	RtccWriteTime@pTm,c
  5097  00134A  0E00               	movlw	high _RtccTime
  5098  00134C  6E02               	movwf	RtccWriteTime@pTm+1,c
  5099  00134E  0E01               	movlw	1
  5100  001350  6E03               	movwf	RtccWriteTime@di,c
  5101  001352  EC1E  F00C         	call	_RtccWriteTime	;wreg free
  5102                           
  5103                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  5104  001356  0E4A               	movlw	low _RtccDate
  5105  001358  6E01               	movwf	RtccWriteDate@pDt,c
  5106  00135A  0E00               	movlw	high _RtccDate
  5107  00135C  6E02               	movwf	RtccWriteDate@pDt+1,c
  5108  00135E  0E01               	movlw	1
  5109  001360  6E03               	movwf	RtccWriteDate@di,c
  5110  001362  EC64  F00A         	call	_RtccWriteDate	;wreg free
  5111                           
  5112                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  5113  001366  010F               	movlb	15	; () banked
  5114  001368  8F3F               	bsf	63,7,b	;volatile
  5115                           
  5116                           ; BSR set to: 15
  5117  00136A  0012               	return		;funcret
  5118  00136C                     __end_of_Write_RTC:
  5119                           	opt stack 0
  5120                           tosu	equ	0xFFF
  5121                           tosh	equ	0xFFE
  5122                           tosl	equ	0xFFD
  5123                           pclath	equ	0xFFA
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           indf0	equ	0xFEF
  5131                           postinc0	equ	0xFEE
  5132                           fsr0h	equ	0xFEA
  5133                           fsr0l	equ	0xFE9
  5134                           wreg	equ	0xFE8
  5135                           postinc1	equ	0xFE6
  5136                           postdec1	equ	0xFE5
  5137                           fsr1h	equ	0xFE2
  5138                           fsr1l	equ	0xFE1
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           postdec2	equ	0xFDD
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function ___awdiv *****************
  5147 ;; Defined at:
  5148 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  dividend        2    0[COMRAM] int 
  5151 ;;  divisor         2    2[COMRAM] int 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  quotient        2    6[COMRAM] int 
  5154 ;;  sign            1    5[COMRAM] unsigned char 
  5155 ;;  counter         1    4[COMRAM] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  2    0[COMRAM] int 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5166 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5168 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5169 ;;Total ram usage:        8 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_Write_RTC
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text29
  5179  001BAE                     __ptext29:
  5180                           	opt stack 0
  5181  001BAE                     ___awdiv:
  5182                           	opt stack 28
  5183                           
  5184                           ; BSR set to: 15
  5185                           ;incstack = 0
  5186  001BAE  0E00               	movlw	0
  5187  001BB0  6E06               	movwf	___awdiv@sign,c
  5188  001BB2  AE04               	btfss	___awdiv@divisor+1,7,c
  5189  001BB4  D007               	goto	l2362
  5190  001BB6  6C03               	negf	___awdiv@divisor,c
  5191  001BB8  1E04               	comf	___awdiv@divisor+1,f,c
  5192  001BBA  B0D8               	btfsc	status,0,c
  5193  001BBC  2A04               	incf	___awdiv@divisor+1,f,c
  5194  001BBE  0E01               	movlw	1
  5195  001BC0  6E06               	movwf	___awdiv@sign,c
  5196  001BC2  D000               	goto	l2362
  5197  001BC4                     l2362:
  5198  001BC4  AE02               	btfss	___awdiv@dividend+1,7,c
  5199  001BC6  D007               	goto	l2368
  5200  001BC8  6C01               	negf	___awdiv@dividend,c
  5201  001BCA  1E02               	comf	___awdiv@dividend+1,f,c
  5202  001BCC  B0D8               	btfsc	status,0,c
  5203  001BCE  2A02               	incf	___awdiv@dividend+1,f,c
  5204  001BD0  0E01               	movlw	1
  5205  001BD2  1A06               	xorwf	___awdiv@sign,f,c
  5206  001BD4  D000               	goto	l2368
  5207  001BD6                     l2368:
  5208  001BD6  0E00               	movlw	0
  5209  001BD8  6E08               	movwf	___awdiv@quotient+1,c
  5210  001BDA  0E00               	movlw	0
  5211  001BDC  6E07               	movwf	___awdiv@quotient,c
  5212  001BDE  5003               	movf	___awdiv@divisor,w,c
  5213  001BE0  1004               	iorwf	___awdiv@divisor+1,w,c
  5214  001BE2  B4D8               	btfsc	status,2,c
  5215  001BE4  D021               	goto	l2390
  5216  001BE6  0E01               	movlw	1
  5217  001BE8  6E05               	movwf	___awdiv@counter,c
  5218  001BEA  D005               	goto	l2376
  5219  001BEC                     l2374:
  5220  001BEC  90D8               	bcf	status,0,c
  5221  001BEE  3603               	rlcf	___awdiv@divisor,f,c
  5222  001BF0  3604               	rlcf	___awdiv@divisor+1,f,c
  5223  001BF2  2A05               	incf	___awdiv@counter,f,c
  5224  001BF4  D000               	goto	l2376
  5225  001BF6                     l2376:
  5226  001BF6  BE04               	btfsc	___awdiv@divisor+1,7,c
  5227  001BF8  D002               	goto	l2378
  5228  001BFA  D7F8               	goto	l2374
  5229  001BFC  D000               	goto	l2378
  5230  001BFE                     l2378:
  5231  001BFE  90D8               	bcf	status,0,c
  5232  001C00  3607               	rlcf	___awdiv@quotient,f,c
  5233  001C02  3608               	rlcf	___awdiv@quotient+1,f,c
  5234  001C04  5003               	movf	___awdiv@divisor,w,c
  5235  001C06  5C01               	subwf	___awdiv@dividend,w,c
  5236  001C08  5004               	movf	___awdiv@divisor+1,w,c
  5237  001C0A  5802               	subwfb	___awdiv@dividend+1,w,c
  5238  001C0C  A0D8               	btfss	status,0,c
  5239  001C0E  D006               	goto	l2386
  5240  001C10  5003               	movf	___awdiv@divisor,w,c
  5241  001C12  5E01               	subwf	___awdiv@dividend,f,c
  5242  001C14  5004               	movf	___awdiv@divisor+1,w,c
  5243  001C16  5A02               	subwfb	___awdiv@dividend+1,f,c
  5244  001C18  8007               	bsf	___awdiv@quotient,0,c
  5245  001C1A  D000               	goto	l2386
  5246  001C1C                     l2386:
  5247  001C1C  90D8               	bcf	status,0,c
  5248  001C1E  3204               	rrcf	___awdiv@divisor+1,f,c
  5249  001C20  3203               	rrcf	___awdiv@divisor,f,c
  5250  001C22  2E05               	decfsz	___awdiv@counter,f,c
  5251  001C24  D7EC               	goto	l2378
  5252  001C26  D000               	goto	l2390
  5253  001C28                     l2390:
  5254  001C28  5006               	movf	___awdiv@sign,w,c
  5255  001C2A  B4D8               	btfsc	status,2,c
  5256  001C2C  D005               	goto	l2394
  5257  001C2E  6C07               	negf	___awdiv@quotient,c
  5258  001C30  1E08               	comf	___awdiv@quotient+1,f,c
  5259  001C32  B0D8               	btfsc	status,0,c
  5260  001C34  2A08               	incf	___awdiv@quotient+1,f,c
  5261  001C36  D000               	goto	l2394
  5262  001C38                     l2394:
  5263  001C38  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5264  001C3C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5265  001C40  0012               	return	
  5266  001C42  0012               	return		;funcret
  5267  001C44                     __end_of___awdiv:
  5268                           	opt stack 0
  5269                           tosu	equ	0xFFF
  5270                           tosh	equ	0xFFE
  5271                           tosl	equ	0xFFD
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           indf0	equ	0xFEF
  5280                           postinc0	equ	0xFEE
  5281                           fsr0h	equ	0xFEA
  5282                           fsr0l	equ	0xFE9
  5283                           wreg	equ	0xFE8
  5284                           postinc1	equ	0xFE6
  5285                           postdec1	equ	0xFE5
  5286                           fsr1h	equ	0xFE2
  5287                           fsr1l	equ	0xFE1
  5288                           indf2	equ	0xFDF
  5289                           postinc2	equ	0xFDE
  5290                           postdec2	equ	0xFDD
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function _RtccWriteTime *****************
  5296 ;; Defined at:
  5297 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  pTm             2    0[COMRAM] PTR const struct .
  5300 ;;		 -> RtccTime(4), 
  5301 ;;  di              1    2[COMRAM] enum E7121
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  tempHourWDay    2    9[COMRAM] struct .
  5304 ;;  tempMinSec      2    7[COMRAM] struct .
  5305 ;;  wasWrEn         1    6[COMRAM] enum E7121
  5306 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5307 ;;  wasOn           1    4[COMRAM] enum E7121
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      enum E7337
  5310 ;; Registers used:
  5311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5317 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5318 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5320 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5321 ;;Total ram usage:       11 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    1
  5324 ;; This function calls:
  5325 ;;		_RtccWrOn
  5326 ;; This function is called by:
  5327 ;;		_Write_RTC
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text30
  5332  00183C                     __ptext30:
  5333                           	opt stack 0
  5334  00183C                     _RtccWriteTime:
  5335                           	opt stack 27
  5336                           
  5337                           ;incstack = 0
  5338  00183C  0E00               	movlw	0
  5339  00183E  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5340  001840  EE20 F002          	lfsr	2,2
  5341  001844  5001               	movf	RtccWriteTime@pTm,w,c
  5342  001846  26D9               	addwf	fsr2l,f,c
  5343  001848  5002               	movf	RtccWriteTime@pTm+1,w,c
  5344  00184A  22DA               	addwfc	fsr2h,f,c
  5345  00184C  0E5A               	movlw	90
  5346  00184E  60DF               	cpfslt	indf2,c
  5347  001850  0012               	return	
  5348  001852  EE20 F001          	lfsr	2,1
  5349  001856  5001               	movf	RtccWriteTime@pTm,w,c
  5350  001858  26D9               	addwf	fsr2l,f,c
  5351  00185A  5002               	movf	RtccWriteTime@pTm+1,w,c
  5352  00185C  22DA               	addwfc	fsr2h,f,c
  5353  00185E  0E5A               	movlw	90
  5354  001860  60DF               	cpfslt	indf2,c
  5355  001862  0012               	return	
  5356  001864  EE20 F003          	lfsr	2,3
  5357  001868  5001               	movf	RtccWriteTime@pTm,w,c
  5358  00186A  26D9               	addwf	fsr2l,f,c
  5359  00186C  5002               	movf	RtccWriteTime@pTm+1,w,c
  5360  00186E  22DA               	addwfc	fsr2h,f,c
  5361  001870  0E24               	movlw	36
  5362  001872  64DF               	cpfsgt	indf2,c
  5363  001874  D002               	goto	l2218
  5364  001876  0012               	return	
  5365                           
  5366                           ;	Return value of _RtccWriteTime is never used
  5367  001878  0012               	return	
  5368  00187A                     l2218:
  5369  00187A  EE20 F002          	lfsr	2,2
  5370  00187E  5001               	movf	RtccWriteTime@pTm,w,c
  5371  001880  26D9               	addwf	fsr2l,f,c
  5372  001882  5002               	movf	RtccWriteTime@pTm+1,w,c
  5373  001884  22DA               	addwfc	fsr2h,f,c
  5374  001886  50DF               	movf	indf2,w,c
  5375  001888  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  5376  00188A  EE20 F001          	lfsr	2,1
  5377  00188E  5001               	movf	RtccWriteTime@pTm,w,c
  5378  001890  26D9               	addwf	fsr2l,f,c
  5379  001892  5002               	movf	RtccWriteTime@pTm+1,w,c
  5380  001894  22DA               	addwfc	fsr2h,f,c
  5381  001896  50DF               	movf	indf2,w,c
  5382  001898  6E08               	movwf	RtccWriteTime@tempMinSec,c
  5383  00189A  5003               	movf	RtccWriteTime@di,w,c
  5384  00189C  B4D8               	btfsc	status,2,c
  5385  00189E  D002               	goto	l2224
  5386  0018A0  9CF2               	bcf	intcon,6,c	;volatile
  5387  0018A2  D000               	goto	l2224
  5388  0018A4                     l2224:
  5389  0018A4  0E00               	movlw	0
  5390  0018A6  BB3F               	btfsc	63,5,b	;volatile
  5391  0018A8  0E01               	movlw	1
  5392  0018AA  6E07               	movwf	RtccWriteTime@wasWrEn,c
  5393  0018AC  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5394  0018AE  A4D8               	btfss	status,2,c
  5395  0018B0  D003               	goto	l2228
  5396  0018B2  EC7F  F011         	call	_RtccWrOn	;wreg free
  5397  0018B6  D000               	goto	l2228
  5398  0018B8                     l2228:
  5399  0018B8  0E00               	movlw	0
  5400  0018BA  BF3F               	btfsc	63,7,b	;volatile
  5401  0018BC  0E01               	movlw	1
  5402  0018BE  6E05               	movwf	RtccWriteTime@wasOn,c
  5403  0018C0  5005               	movf	RtccWriteTime@wasOn,w,c
  5404  0018C2  B4D8               	btfsc	status,2,c
  5405  0018C4  D007               	goto	l2234
  5406  0018C6  0E00               	movlw	0
  5407  0018C8  BE91               	btfsc	3985,7,c	;volatile
  5408  0018CA  0E01               	movlw	1
  5409  0018CC  6E06               	movwf	RtccWriteTime@wasAlrm,c
  5410  0018CE  010F               	movlb	15	; () banked
  5411  0018D0  9F3F               	bcf	63,7,b	;volatile
  5412  0018D2  D000               	goto	l2234
  5413  0018D4                     l2234:
  5414  0018D4  0EFC               	movlw	252
  5415  0018D6  010F               	movlb	15	; () banked
  5416  0018D8  173F               	andwf	63,f,b	;volatile
  5417  0018DA  010F               	movlb	15	; () banked
  5418  0018DC  813F               	bsf	63,0,b	;volatile
  5419                           
  5420                           ; BSR set to: 15
  5421  0018DE  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  5422                           
  5423                           ; BSR set to: 15
  5424  0018E2  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  5425                           
  5426                           ; BSR set to: 15
  5427  0018E6  EE20 F003          	lfsr	2,3
  5428  0018EA  5001               	movf	RtccWriteTime@pTm,w,c
  5429  0018EC  26D9               	addwf	fsr2l,f,c
  5430  0018EE  5002               	movf	RtccWriteTime@pTm+1,w,c
  5431  0018F0  22DA               	addwfc	fsr2h,f,c
  5432  0018F2  50DF               	movf	indf2,w,c
  5433  0018F4  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  5434                           
  5435                           ; BSR set to: 15
  5436  0018F6  0EFC               	movlw	252
  5437  0018F8  010F               	movlb	15	; () banked
  5438  0018FA  173F               	andwf	63,f,b	;volatile
  5439                           
  5440                           ; BSR set to: 15
  5441  0018FC  010F               	movlb	15	; () banked
  5442  0018FE  813F               	bsf	63,0,b	;volatile
  5443                           
  5444                           ; BSR set to: 15
  5445  001900  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  5446                           
  5447                           ; BSR set to: 15
  5448  001904  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  5449                           
  5450                           ; BSR set to: 15
  5451  001908  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  5452                           
  5453                           ; BSR set to: 15
  5454  00190C  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  5455                           
  5456                           ; BSR set to: 15
  5457  001910  5005               	movf	RtccWriteTime@wasOn,w,c
  5458  001912  B4D8               	btfsc	status,2,c
  5459  001914  D00D               	goto	l2266
  5460                           
  5461                           ; BSR set to: 15
  5462  001916  010F               	movlb	15	; () banked
  5463  001918  8F3F               	bsf	63,7,b	;volatile
  5464                           
  5465                           ; BSR set to: 15
  5466  00191A  5006               	movf	RtccWriteTime@wasAlrm,w,c
  5467  00191C  B4D8               	btfsc	status,2,c
  5468  00191E  D002               	goto	l2262
  5469                           
  5470                           ; BSR set to: 15
  5471  001920  8E91               	bsf	3985,7,c	;volatile
  5472  001922  D000               	goto	l2262
  5473  001924                     l2262:
  5474                           
  5475                           ; BSR set to: 15
  5476  001924  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5477  001926  B4D8               	btfsc	status,2,c
  5478  001928  D009               	goto	l2270
  5479                           
  5480                           ; BSR set to: 15
  5481  00192A  EC7F  F011         	call	_RtccWrOn	;wreg free
  5482  00192E  D006               	goto	l2270
  5483  001930                     l2266:
  5484  001930  5007               	movf	RtccWriteTime@wasWrEn,w,c
  5485  001932  A4D8               	btfss	status,2,c
  5486  001934  D003               	goto	l2270
  5487  001936  010F               	movlb	15	; () banked
  5488  001938  9B3F               	bcf	63,5,b	;volatile
  5489                           
  5490                           ; BSR set to: 15
  5491  00193A  D000               	goto	l2270
  5492  00193C                     l2270:
  5493  00193C  5003               	movf	RtccWriteTime@di,w,c
  5494  00193E  B4D8               	btfsc	status,2,c
  5495  001940  0012               	return	
  5496  001942  8CF2               	bsf	intcon,6,c	;volatile
  5497  001944  0012               	return	
  5498                           
  5499                           ;	Return value of _RtccWriteTime is never used
  5500  001946  0012               	return		;funcret
  5501  001948                     __end_of_RtccWriteTime:
  5502                           	opt stack 0
  5503                           tosu	equ	0xFFF
  5504                           tosh	equ	0xFFE
  5505                           tosl	equ	0xFFD
  5506                           pclath	equ	0xFFA
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           intcon	equ	0xFF2
  5514                           indf0	equ	0xFEF
  5515                           postinc0	equ	0xFEE
  5516                           fsr0h	equ	0xFEA
  5517                           fsr0l	equ	0xFE9
  5518                           wreg	equ	0xFE8
  5519                           postinc1	equ	0xFE6
  5520                           postdec1	equ	0xFE5
  5521                           fsr1h	equ	0xFE2
  5522                           fsr1l	equ	0xFE1
  5523                           indf2	equ	0xFDF
  5524                           postinc2	equ	0xFDE
  5525                           postdec2	equ	0xFDD
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function _RtccWriteDate *****************
  5531 ;; Defined at:
  5532 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  pDt             2    0[COMRAM] PTR const struct .
  5535 ;;		 -> RtccDate(4), 
  5536 ;;  di              1    2[COMRAM] enum E7121
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  tempHourWDay    2   11[COMRAM] struct .
  5539 ;;  tempDayMonth    2    9[COMRAM] struct .
  5540 ;;  tempYear        2    6[COMRAM] struct .
  5541 ;;  wasWrEn         1    8[COMRAM] enum E7121
  5542 ;;  wasAlrm         1    5[COMRAM] enum E7121
  5543 ;;  wasOn           1    4[COMRAM] enum E7121
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      enum E7337
  5546 ;; Registers used:
  5547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5553 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5554 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5556 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5557 ;;Total ram usage:       13 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    1
  5560 ;; This function calls:
  5561 ;;		_RtccWrOn
  5562 ;; This function is called by:
  5563 ;;		_Write_RTC
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text31
  5568  0014C8                     __ptext31:
  5569                           	opt stack 0
  5570  0014C8                     _RtccWriteDate:
  5571                           	opt stack 27
  5572                           
  5573                           ;incstack = 0
  5574  0014C8  0E00               	movlw	0
  5575  0014CA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5576  0014CC  EE20 F002          	lfsr	2,2
  5577  0014D0  5001               	movf	RtccWriteDate@pDt,w,c
  5578  0014D2  26D9               	addwf	fsr2l,f,c
  5579  0014D4  5002               	movf	RtccWriteDate@pDt+1,w,c
  5580  0014D6  22DA               	addwfc	fsr2h,f,c
  5581  0014D8  0E13               	movlw	19
  5582  0014DA  60DF               	cpfslt	indf2,c
  5583  0014DC  0012               	return	
  5584  0014DE  EE20 F002          	lfsr	2,2
  5585  0014E2  5001               	movf	RtccWriteDate@pDt,w,c
  5586  0014E4  26D9               	addwf	fsr2l,f,c
  5587  0014E6  5002               	movf	RtccWriteDate@pDt+1,w,c
  5588  0014E8  22DA               	addwfc	fsr2h,f,c
  5589  0014EA  50DF               	movf	indf2,w,c
  5590  0014EC  B4D8               	btfsc	status,2,c
  5591  0014EE  0012               	return	
  5592  0014F0  EE20 F001          	lfsr	2,1
  5593  0014F4  5001               	movf	RtccWriteDate@pDt,w,c
  5594  0014F6  26D9               	addwf	fsr2l,f,c
  5595  0014F8  5002               	movf	RtccWriteDate@pDt+1,w,c
  5596  0014FA  22DA               	addwfc	fsr2h,f,c
  5597  0014FC  0E32               	movlw	50
  5598  0014FE  60DF               	cpfslt	indf2,c
  5599  001500  0012               	return	
  5600  001502  EE20 F001          	lfsr	2,1
  5601  001506  5001               	movf	RtccWriteDate@pDt,w,c
  5602  001508  26D9               	addwf	fsr2l,f,c
  5603  00150A  5002               	movf	RtccWriteDate@pDt+1,w,c
  5604  00150C  22DA               	addwfc	fsr2h,f,c
  5605  00150E  50DF               	movf	indf2,w,c
  5606  001510  B4D8               	btfsc	status,2,c
  5607  001512  0012               	return	
  5608  001514  EE20 F003          	lfsr	2,3
  5609  001518  5001               	movf	RtccWriteDate@pDt,w,c
  5610  00151A  26D9               	addwf	fsr2l,f,c
  5611  00151C  5002               	movf	RtccWriteDate@pDt+1,w,c
  5612  00151E  22DA               	addwfc	fsr2h,f,c
  5613  001520  0E99               	movlw	153
  5614  001522  64DF               	cpfsgt	indf2,c
  5615  001524  D002               	goto	l2286
  5616  001526  0012               	return	
  5617                           
  5618                           ;	Return value of _RtccWriteDate is never used
  5619  001528  0012               	return	
  5620  00152A                     l2286:
  5621  00152A  EE20 F003          	lfsr	2,3
  5622  00152E  5001               	movf	RtccWriteDate@pDt,w,c
  5623  001530  26D9               	addwf	fsr2l,f,c
  5624  001532  5002               	movf	RtccWriteDate@pDt+1,w,c
  5625  001534  22DA               	addwfc	fsr2h,f,c
  5626  001536  50DF               	movf	indf2,w,c
  5627  001538  6E07               	movwf	RtccWriteDate@tempYear,c
  5628  00153A  EE20 F001          	lfsr	2,1
  5629  00153E  5001               	movf	RtccWriteDate@pDt,w,c
  5630  001540  26D9               	addwf	fsr2l,f,c
  5631  001542  5002               	movf	RtccWriteDate@pDt+1,w,c
  5632  001544  22DA               	addwfc	fsr2h,f,c
  5633  001546  50DF               	movf	indf2,w,c
  5634  001548  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  5635  00154A  EE20 F002          	lfsr	2,2
  5636  00154E  5001               	movf	RtccWriteDate@pDt,w,c
  5637  001550  26D9               	addwf	fsr2l,f,c
  5638  001552  5002               	movf	RtccWriteDate@pDt+1,w,c
  5639  001554  22DA               	addwfc	fsr2h,f,c
  5640  001556  50DF               	movf	indf2,w,c
  5641  001558  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  5642  00155A  5003               	movf	RtccWriteDate@di,w,c
  5643  00155C  B4D8               	btfsc	status,2,c
  5644  00155E  D002               	goto	l2292
  5645  001560  9CF2               	bcf	intcon,6,c	;volatile
  5646  001562  D000               	goto	l2292
  5647  001564                     l2292:
  5648  001564  0E00               	movlw	0
  5649  001566  BB3F               	btfsc	63,5,b	;volatile
  5650  001568  0E01               	movlw	1
  5651  00156A  6E09               	movwf	RtccWriteDate@wasWrEn,c
  5652  00156C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5653  00156E  A4D8               	btfss	status,2,c
  5654  001570  D003               	goto	l2296
  5655  001572  EC7F  F011         	call	_RtccWrOn	;wreg free
  5656  001576  D000               	goto	l2296
  5657  001578                     l2296:
  5658  001578  0E00               	movlw	0
  5659  00157A  BF3F               	btfsc	63,7,b	;volatile
  5660  00157C  0E01               	movlw	1
  5661  00157E  6E05               	movwf	RtccWriteDate@wasOn,c
  5662  001580  5005               	movf	RtccWriteDate@wasOn,w,c
  5663  001582  B4D8               	btfsc	status,2,c
  5664  001584  D007               	goto	l2302
  5665  001586  0E00               	movlw	0
  5666  001588  BE91               	btfsc	3985,7,c	;volatile
  5667  00158A  0E01               	movlw	1
  5668  00158C  6E06               	movwf	RtccWriteDate@wasAlrm,c
  5669  00158E  010F               	movlb	15	; () banked
  5670  001590  9F3F               	bcf	63,7,b	;volatile
  5671  001592  D000               	goto	l2302
  5672  001594                     l2302:
  5673  001594  0EFC               	movlw	252
  5674  001596  010F               	movlb	15	; () banked
  5675  001598  173F               	andwf	63,f,b	;volatile
  5676  00159A  010F               	movlb	15	; () banked
  5677  00159C  813F               	bsf	63,0,b	;volatile
  5678                           
  5679                           ; BSR set to: 15
  5680  00159E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  5681                           
  5682                           ; BSR set to: 15
  5683  0015A2  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  5684                           
  5685                           ; BSR set to: 15
  5686  0015A6  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  5687  0015AA  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  5688  0015AE  50DF               	movf	indf2,w,c
  5689  0015B0  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  5690                           
  5691                           ; BSR set to: 15
  5692  0015B2  0EFC               	movlw	252
  5693  0015B4  010F               	movlb	15	; () banked
  5694  0015B6  173F               	andwf	63,f,b	;volatile
  5695                           
  5696                           ; BSR set to: 15
  5697  0015B8  0E03               	movlw	3
  5698  0015BA  010F               	movlb	15	; () banked
  5699  0015BC  133F               	iorwf	63,f,b	;volatile
  5700                           
  5701                           ; BSR set to: 15
  5702  0015BE  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  5703                           
  5704                           ; BSR set to: 15
  5705  0015C2  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  5706                           
  5707                           ; BSR set to: 15
  5708  0015C6  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  5709                           
  5710                           ; BSR set to: 15
  5711  0015CA  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  5712                           
  5713                           ; BSR set to: 15
  5714  0015CE  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  5715                           
  5716                           ; BSR set to: 15
  5717  0015D2  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  5718                           
  5719                           ; BSR set to: 15
  5720  0015D6  5005               	movf	RtccWriteDate@wasOn,w,c
  5721  0015D8  B4D8               	btfsc	status,2,c
  5722  0015DA  D00D               	goto	l2338
  5723                           
  5724                           ; BSR set to: 15
  5725  0015DC  010F               	movlb	15	; () banked
  5726  0015DE  8F3F               	bsf	63,7,b	;volatile
  5727                           
  5728                           ; BSR set to: 15
  5729  0015E0  5006               	movf	RtccWriteDate@wasAlrm,w,c
  5730  0015E2  B4D8               	btfsc	status,2,c
  5731  0015E4  D002               	goto	l2334
  5732                           
  5733                           ; BSR set to: 15
  5734  0015E6  8E91               	bsf	3985,7,c	;volatile
  5735  0015E8  D000               	goto	l2334
  5736  0015EA                     l2334:
  5737                           
  5738                           ; BSR set to: 15
  5739  0015EA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5740  0015EC  B4D8               	btfsc	status,2,c
  5741  0015EE  D009               	goto	l2342
  5742                           
  5743                           ; BSR set to: 15
  5744  0015F0  EC7F  F011         	call	_RtccWrOn	;wreg free
  5745  0015F4  D006               	goto	l2342
  5746  0015F6                     l2338:
  5747  0015F6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  5748  0015F8  A4D8               	btfss	status,2,c
  5749  0015FA  D003               	goto	l2342
  5750  0015FC  010F               	movlb	15	; () banked
  5751  0015FE  9B3F               	bcf	63,5,b	;volatile
  5752                           
  5753                           ; BSR set to: 15
  5754  001600  D000               	goto	l2342
  5755  001602                     l2342:
  5756  001602  5003               	movf	RtccWriteDate@di,w,c
  5757  001604  B4D8               	btfsc	status,2,c
  5758  001606  0012               	return	
  5759  001608  9CF2               	bcf	intcon,6,c	;volatile
  5760  00160A  0012               	return	
  5761                           
  5762                           ;	Return value of _RtccWriteDate is never used
  5763  00160C  0012               	return		;funcret
  5764  00160E                     __end_of_RtccWriteDate:
  5765                           	opt stack 0
  5766                           tosu	equ	0xFFF
  5767                           tosh	equ	0xFFE
  5768                           tosl	equ	0xFFD
  5769                           pclath	equ	0xFFA
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           indf0	equ	0xFEF
  5778                           postinc0	equ	0xFEE
  5779                           fsr0h	equ	0xFEA
  5780                           fsr0l	equ	0xFE9
  5781                           wreg	equ	0xFE8
  5782                           postinc1	equ	0xFE6
  5783                           postdec1	equ	0xFE5
  5784                           fsr1h	equ	0xFE2
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _RtccWrOn *****************
  5794 ;; Defined at:
  5795 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  data            2    0        unsigned int 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;		None               void
  5802 ;; Registers used:
  5803 ;;		wreg, status,2
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_Write_RTC
  5819 ;;		_RtccWriteDate
  5820 ;;		_RtccWriteTime
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text32
  5825  0022FE                     __ptext32:
  5826                           	opt stack 0
  5827  0022FE                     _RtccWrOn:
  5828                           	opt stack 27
  5829                           
  5830                           ;incstack = 0
  5831  0022FE  9CF2               	bcf	intcon,6,c	;volatile
  5832  002300  0E55               	movlw	85
  5833  002302  6EA7               	movwf	4007,c	;volatile
  5834  002304  0EAA               	movlw	170
  5835  002306  6EA7               	movwf	4007,c	;volatile
  5836  002308  010F               	movlb	15	; () banked
  5837  00230A  8B3F               	bsf	63,5,b	;volatile
  5838                           
  5839                           ; BSR set to: 15
  5840  00230C  8CF2               	bsf	intcon,6,c	;volatile
  5841                           
  5842                           ; BSR set to: 15
  5843  00230E  0012               	return		;funcret
  5844  002310                     __end_of_RtccWrOn:
  5845                           	opt stack 0
  5846                           tosu	equ	0xFFF
  5847                           tosh	equ	0xFFE
  5848                           tosl	equ	0xFFD
  5849                           pclath	equ	0xFFA
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           intcon	equ	0xFF2
  5857                           indf0	equ	0xFEF
  5858                           postinc0	equ	0xFEE
  5859                           fsr0h	equ	0xFEA
  5860                           fsr0l	equ	0xFE9
  5861                           wreg	equ	0xFE8
  5862                           postinc1	equ	0xFE6
  5863                           postdec1	equ	0xFE5
  5864                           fsr1h	equ	0xFE2
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function _Read_RTC *****************
  5874 ;; Defined at:
  5875 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5893 ;;Total ram usage:        0 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    1
  5896 ;; This function calls:
  5897 ;;		_RtccReadDate
  5898 ;;		_RtccReadTime
  5899 ;; This function is called by:
  5900 ;;		_main
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text33
  5905  00172C                     __ptext33:
  5906                           	opt stack 0
  5907  00172C                     _Read_RTC:
  5908                           	opt stack 29
  5909                           
  5910                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  5911                           
  5912                           ; BSR set to: 15
  5913                           ;incstack = 0
  5914  00172C  0E4E               	movlw	low _RtccTime
  5915  00172E  6E01               	movwf	RtccReadTime@pTm,c
  5916  001730  0E00               	movlw	high _RtccTime
  5917  001732  6E02               	movwf	RtccReadTime@pTm+1,c
  5918  001734  EC1F  F00F         	call	_RtccReadTime	;wreg free
  5919                           
  5920                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  5921  001738  504F               	movf	_RtccTime+1,w,c
  5922  00173A  0B0F               	andlw	15
  5923  00173C  0100               	movlb	0	; () banked
  5924  00173E  6FAF               	movwf	_segundo_u& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  5928  001740  384F               	swapf	_RtccTime+1,w,c
  5929  001742  0B0F               	andlw	15
  5930  001744  0B0F               	andlw	15
  5931  001746  6E5E               	movwf	_segundo_d,c
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  5935  001748  5050               	movf	_RtccTime+2,w,c
  5936  00174A  0B0F               	andlw	15
  5937  00174C  0100               	movlb	0	; () banked
  5938  00174E  6FAE               	movwf	_minuto_u& (0+255),b
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  5942  001750  3850               	swapf	_RtccTime+2,w,c
  5943  001752  0B0F               	andlw	15
  5944  001754  0B0F               	andlw	15
  5945  001756  0100               	movlb	0	; () banked
  5946  001758  6FAD               	movwf	_minuto_d& (0+255),b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  5950  00175A  5051               	movf	_RtccTime+3,w,c
  5951  00175C  0B0F               	andlw	15
  5952  00175E  0100               	movlb	0	; () banked
  5953  001760  6FAA               	movwf	_hora_u& (0+255),b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  5957  001762  3851               	swapf	_RtccTime+3,w,c
  5958  001764  0B0F               	andlw	15
  5959  001766  0B0F               	andlw	15
  5960  001768  0100               	movlb	0	; () banked
  5961  00176A  6FA9               	movwf	_hora_d& (0+255),b
  5962                           
  5963                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  5964  00176C  0E4A               	movlw	low _RtccDate
  5965  00176E  6E01               	movwf	RtccReadDate@pDt,c
  5966  001770  0E00               	movlw	high _RtccDate
  5967  001772  6E02               	movwf	RtccReadDate@pDt+1,c
  5968  001774  EC22  F00E         	call	_RtccReadDate	;wreg free
  5969                           
  5970                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  5971  001778  504B               	movf	_RtccDate+1,w,c
  5972  00177A  0B0F               	andlw	15
  5973  00177C  0100               	movlb	0	; () banked
  5974  00177E  6FA8               	movwf	_fecha_u& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  5978  001780  384B               	swapf	_RtccDate+1,w,c
  5979  001782  0B0F               	andlw	15
  5980  001784  0B0F               	andlw	15
  5981  001786  0100               	movlb	0	; () banked
  5982  001788  6FA7               	movwf	_fecha_d& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  5986  00178A  504C               	movf	_RtccDate+2,w,c
  5987  00178C  0B0F               	andlw	15
  5988  00178E  0100               	movlb	0	; () banked
  5989  001790  6FAC               	movwf	_mes_u& (0+255),b
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  5993  001792  384C               	swapf	_RtccDate+2,w,c
  5994  001794  0B0F               	andlw	15
  5995  001796  0B0F               	andlw	15
  5996  001798  0100               	movlb	0	; () banked
  5997  00179A  6FAB               	movwf	_mes_d& (0+255),b
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  6001  00179C  C04A  F0A6         	movff	_RtccDate,_dia_semana
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  6005  0017A0  504D               	movf	_RtccDate+3,w,c
  6006  0017A2  0B0F               	andlw	15
  6007  0017A4  0100               	movlb	0	; () banked
  6008  0017A6  6FA5               	movwf	_anio_u& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  6012  0017A8  384D               	swapf	_RtccDate+3,w,c
  6013  0017AA  0B0F               	andlw	15
  6014  0017AC  0B0F               	andlw	15
  6015  0017AE  0100               	movlb	0	; () banked
  6016  0017B0  6FA4               	movwf	_anio_d& (0+255),b
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  6020  0017B2  505E               	movf	_segundo_d,w,c
  6021  0017B4  0D0A               	mullw	10
  6022  0017B6  0100               	movlb	0	; () banked
  6023  0017B8  51AF               	movf	_segundo_u& (0+255),w,b
  6024  0017BA  24F3               	addwf	prodl,w,c
  6025  0017BC  6E43               	movwf	_segundo,c
  6026  0017BE  0100               	movlb	0	; () banked
  6027  0017C0  0E00               	movlw	0
  6028  0017C2  20F4               	addwfc	prodh,w,c
  6029  0017C4  6E44               	movwf	_segundo+1,c
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  6033  0017C6  0100               	movlb	0	; () banked
  6034  0017C8  51AD               	movf	_minuto_d& (0+255),w,b
  6035  0017CA  0D0A               	mullw	10
  6036  0017CC  0100               	movlb	0	; () banked
  6037  0017CE  51AE               	movf	_minuto_u& (0+255),w,b
  6038  0017D0  24F3               	addwf	prodl,w,c
  6039  0017D2  6E5C               	movwf	_minuto,c
  6040  0017D4  0100               	movlb	0	; () banked
  6041  0017D6  0E00               	movlw	0
  6042  0017D8  20F4               	addwfc	prodh,w,c
  6043  0017DA  6E5D               	movwf	_minuto+1,c
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  6047  0017DC  0100               	movlb	0	; () banked
  6048  0017DE  51A9               	movf	_hora_d& (0+255),w,b
  6049  0017E0  0D0A               	mullw	10
  6050  0017E2  0100               	movlb	0	; () banked
  6051  0017E4  51AA               	movf	_hora_u& (0+255),w,b
  6052  0017E6  24F3               	addwf	prodl,w,c
  6053  0017E8  6E58               	movwf	_hora,c
  6054  0017EA  0100               	movlb	0	; () banked
  6055  0017EC  0E00               	movlw	0
  6056  0017EE  20F4               	addwfc	prodh,w,c
  6057  0017F0  6E59               	movwf	_hora+1,c
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  6061  0017F2  0100               	movlb	0	; () banked
  6062  0017F4  51A7               	movf	_fecha_d& (0+255),w,b
  6063  0017F6  0D0A               	mullw	10
  6064  0017F8  0100               	movlb	0	; () banked
  6065  0017FA  51A8               	movf	_fecha_u& (0+255),w,b
  6066  0017FC  24F3               	addwf	prodl,w,c
  6067  0017FE  6E54               	movwf	_dia,c
  6068  001800  0100               	movlb	0	; () banked
  6069  001802  0E00               	movlw	0
  6070  001804  20F4               	addwfc	prodh,w,c
  6071  001806  6E55               	movwf	_dia+1,c
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  6075  001808  C0A6  F056         	movff	_dia_semana,_diasem
  6076  00180C  6A57               	clrf	_diasem+1,c
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  6080  00180E  0100               	movlb	0	; () banked
  6081  001810  51AB               	movf	_mes_d& (0+255),w,b
  6082  001812  0D0A               	mullw	10
  6083  001814  0100               	movlb	0	; () banked
  6084  001816  51AC               	movf	_mes_u& (0+255),w,b
  6085  001818  24F3               	addwf	prodl,w,c
  6086  00181A  6E5A               	movwf	_mes,c
  6087  00181C  0100               	movlb	0	; () banked
  6088  00181E  0E00               	movlw	0
  6089  001820  20F4               	addwfc	prodh,w,c
  6090  001822  6E5B               	movwf	_mes+1,c
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  6094  001824  0100               	movlb	0	; () banked
  6095  001826  51A4               	movf	_anio_d& (0+255),w,b
  6096  001828  0D0A               	mullw	10
  6097  00182A  0100               	movlb	0	; () banked
  6098  00182C  51A5               	movf	_anio_u& (0+255),w,b
  6099  00182E  24F3               	addwf	prodl,w,c
  6100  001830  6E52               	movwf	_anio,c
  6101  001832  0100               	movlb	0	; () banked
  6102  001834  0E00               	movlw	0
  6103  001836  20F4               	addwfc	prodh,w,c
  6104  001838  6E53               	movwf	_anio+1,c
  6105                           
  6106                           ; BSR set to: 0
  6107  00183A  0012               	return		;funcret
  6108  00183C                     __end_of_Read_RTC:
  6109                           	opt stack 0
  6110                           tosu	equ	0xFFF
  6111                           tosh	equ	0xFFE
  6112                           tosl	equ	0xFFD
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           indf0	equ	0xFEF
  6122                           postinc0	equ	0xFEE
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           postinc1	equ	0xFE6
  6127                           postdec1	equ	0xFE5
  6128                           fsr1h	equ	0xFE2
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _RtccReadTime *****************
  6138 ;; Defined at:
  6139 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  pTm             2    0[COMRAM] PTR struct .
  6142 ;;		 -> RtccTime(4), 
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;  rTD0            8   10[COMRAM] struct .
  6145 ;;  rTD1            8    2[COMRAM] struct .
  6146 ;; Return value:  Size  Location     Type
  6147 ;;		None               void
  6148 ;; Registers used:
  6149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6156 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6158 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6159 ;;Total ram usage:       18 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_Read_RTC
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text34
  6169  001E3E                     __ptext34:
  6170                           	opt stack 0
  6171  001E3E                     _RtccReadTime:
  6172                           	opt stack 29
  6173  001E3E  0EFC               	movlw	252
  6174  001E40  010F               	movlb	15	; () banked
  6175  001E42  173F               	andwf	63,f,b	;volatile
  6176                           
  6177                           ; BSR set to: 15
  6178  001E44  010F               	movlb	15	; () banked
  6179  001E46  813F               	bsf	63,0,b	;volatile
  6180                           
  6181                           ; BSR set to: 15
  6182  001E48  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  6183                           
  6184                           ; BSR set to: 15
  6185  001E4C  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  6186                           
  6187                           ; BSR set to: 15
  6188  001E50  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  6189                           
  6190                           ; BSR set to: 15
  6191  001E54  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  6192                           
  6193                           ; BSR set to: 15
  6194  001E58  0EFC               	movlw	252
  6195  001E5A  010F               	movlb	15	; () banked
  6196  001E5C  173F               	andwf	63,f,b	;volatile
  6197  001E5E  010F               	movlb	15	; () banked
  6198  001E60  813F               	bsf	63,0,b	;volatile
  6199                           
  6200                           ; BSR set to: 15
  6201  001E62  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  6202                           
  6203                           ; BSR set to: 15
  6204  001E66  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  6205                           
  6206                           ; BSR set to: 15
  6207  001E6A  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  6208                           
  6209                           ; BSR set to: 15
  6210  001E6E  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  6211                           
  6212                           ; BSR set to: 15
  6213  001E72  5009               	movf	RtccReadTime@rTD1+6,w,c
  6214  001E74  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  6215  001E76  A4D8               	btfss	status,2,c
  6216  001E78  D7E2               	goto	l2448
  6217                           
  6218                           ; BSR set to: 15
  6219                           
  6220                           ; BSR set to: 15
  6221  001E7A  EE20 F003          	lfsr	2,3
  6222  001E7E  5001               	movf	RtccReadTime@pTm,w,c
  6223  001E80  26D9               	addwf	fsr2l,f,c
  6224  001E82  5002               	movf	RtccReadTime@pTm+1,w,c
  6225  001E84  22DA               	addwfc	fsr2h,f,c
  6226  001E86  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  6227  001E8A  EE20 F002          	lfsr	2,2
  6228  001E8E  5001               	movf	RtccReadTime@pTm,w,c
  6229  001E90  26D9               	addwf	fsr2l,f,c
  6230  001E92  5002               	movf	RtccReadTime@pTm+1,w,c
  6231  001E94  22DA               	addwfc	fsr2h,f,c
  6232  001E96  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  6233  001E9A  EE20 F001          	lfsr	2,1
  6234  001E9E  5001               	movf	RtccReadTime@pTm,w,c
  6235  001EA0  26D9               	addwf	fsr2l,f,c
  6236  001EA2  5002               	movf	RtccReadTime@pTm+1,w,c
  6237  001EA4  22DA               	addwfc	fsr2h,f,c
  6238  001EA6  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  6239                           
  6240                           ; BSR set to: 15
  6241  001EAA  0012               	return		;funcret
  6242  001EAC                     __end_of_RtccReadTime:
  6243                           	opt stack 0
  6244                           tosu	equ	0xFFF
  6245                           tosh	equ	0xFFE
  6246                           tosl	equ	0xFFD
  6247                           pclath	equ	0xFFA
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           intcon	equ	0xFF2
  6255                           indf0	equ	0xFEF
  6256                           postinc0	equ	0xFEE
  6257                           fsr0h	equ	0xFEA
  6258                           fsr0l	equ	0xFE9
  6259                           wreg	equ	0xFE8
  6260                           postinc1	equ	0xFE6
  6261                           postdec1	equ	0xFE5
  6262                           fsr1h	equ	0xFE2
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _RtccReadDate *****************
  6272 ;; Defined at:
  6273 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  pDt             2    0[COMRAM] PTR struct .
  6276 ;;		 -> RtccDate(4), 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  rTD0            8   10[COMRAM] struct .
  6279 ;;  rTD1            8    2[COMRAM] struct .
  6280 ;; Return value:  Size  Location     Type
  6281 ;;		None               void
  6282 ;; Registers used:
  6283 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6290 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6292 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6293 ;;Total ram usage:       18 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; This function calls:
  6296 ;;		Nothing
  6297 ;; This function is called by:
  6298 ;;		_Read_RTC
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text35
  6303  001C44                     __ptext35:
  6304                           	opt stack 0
  6305  001C44                     _RtccReadDate:
  6306                           	opt stack 29
  6307  001C44  0EFC               	movlw	252
  6308  001C46  010F               	movlb	15	; () banked
  6309  001C48  173F               	andwf	63,f,b	;volatile
  6310  001C4A  0E03               	movlw	3
  6311  001C4C  010F               	movlb	15	; () banked
  6312  001C4E  133F               	iorwf	63,f,b	;volatile
  6313                           
  6314                           ; BSR set to: 15
  6315  001C50  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  6316                           
  6317                           ; BSR set to: 15
  6318  001C54  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  6319                           
  6320                           ; BSR set to: 15
  6321  001C58  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  6322                           
  6323                           ; BSR set to: 15
  6324  001C5C  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  6325                           
  6326                           ; BSR set to: 15
  6327  001C60  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  6328                           
  6329                           ; BSR set to: 15
  6330  001C64  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  6331  001C68  0EFC               	movlw	252
  6332  001C6A  010F               	movlb	15	; () banked
  6333  001C6C  173F               	andwf	63,f,b	;volatile
  6334  001C6E  0E03               	movlw	3
  6335  001C70  010F               	movlb	15	; () banked
  6336  001C72  133F               	iorwf	63,f,b	;volatile
  6337                           
  6338                           ; BSR set to: 15
  6339  001C74  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  6340                           
  6341                           ; BSR set to: 15
  6342  001C78  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  6343                           
  6344                           ; BSR set to: 15
  6345  001C7C  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  6346                           
  6347                           ; BSR set to: 15
  6348  001C80  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  6349                           
  6350                           ; BSR set to: 15
  6351  001C84  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  6352                           
  6353                           ; BSR set to: 15
  6354  001C88  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  6355  001C8C  5005               	movf	RtccReadDate@rTD1+2,w,c
  6356  001C8E  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  6357  001C90  A4D8               	btfss	status,2,c
  6358  001C92  D7D8               	goto	l2474
  6359                           
  6360                           ; BSR set to: 15
  6361                           
  6362                           ; BSR set to: 15
  6363  001C94  EE20 F001          	lfsr	2,1
  6364  001C98  5001               	movf	RtccReadDate@pDt,w,c
  6365  001C9A  26D9               	addwf	fsr2l,f,c
  6366  001C9C  5002               	movf	RtccReadDate@pDt+1,w,c
  6367  001C9E  22DA               	addwfc	fsr2h,f,c
  6368  001CA0  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  6369  001CA4  EE20 F002          	lfsr	2,2
  6370  001CA8  5001               	movf	RtccReadDate@pDt,w,c
  6371  001CAA  26D9               	addwf	fsr2l,f,c
  6372  001CAC  5002               	movf	RtccReadDate@pDt+1,w,c
  6373  001CAE  22DA               	addwfc	fsr2h,f,c
  6374  001CB0  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  6375                           
  6376                           ; BSR set to: 15
  6377  001CB4  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  6378  001CB8  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  6379  001CBC  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  6380                           
  6381                           ; BSR set to: 15
  6382  001CC0  EE20 F003          	lfsr	2,3
  6383  001CC4  5001               	movf	RtccReadDate@pDt,w,c
  6384  001CC6  26D9               	addwf	fsr2l,f,c
  6385  001CC8  5002               	movf	RtccReadDate@pDt+1,w,c
  6386  001CCA  22DA               	addwfc	fsr2h,f,c
  6387  001CCC  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  6388                           
  6389                           ; BSR set to: 15
  6390  001CD0  0012               	return		;funcret
  6391  001CD2                     __end_of_RtccReadDate:
  6392                           	opt stack 0
  6393                           tosu	equ	0xFFF
  6394                           tosh	equ	0xFFE
  6395                           tosl	equ	0xFFD
  6396                           pclath	equ	0xFFA
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           indf0	equ	0xFEF
  6405                           postinc0	equ	0xFEE
  6406                           fsr0h	equ	0xFEA
  6407                           fsr0l	equ	0xFE9
  6408                           wreg	equ	0xFE8
  6409                           postinc1	equ	0xFE6
  6410                           postdec1	equ	0xFE5
  6411                           fsr1h	equ	0xFE2
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           tosu	equ	0xFFF
  6420                           tosh	equ	0xFFE
  6421                           tosl	equ	0xFFD
  6422                           pclath	equ	0xFFA
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           indf0	equ	0xFEF
  6431                           postinc0	equ	0xFEE
  6432                           fsr0h	equ	0xFEA
  6433                           fsr0l	equ	0xFE9
  6434                           wreg	equ	0xFE8
  6435                           postinc1	equ	0xFE6
  6436                           postdec1	equ	0xFE5
  6437                           fsr1h	equ	0xFE2
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446                           	psect	text36
  6447  000000                     __ptext36:
  6448                           	opt stack 0
  6449                           tosu	equ	0xFFF
  6450                           tosh	equ	0xFFE
  6451                           tosl	equ	0xFFD
  6452                           pclath	equ	0xFFA
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon	equ	0xFF2
  6460                           indf0	equ	0xFEF
  6461                           postinc0	equ	0xFEE
  6462                           fsr0h	equ	0xFEA
  6463                           fsr0l	equ	0xFE9
  6464                           wreg	equ	0xFE8
  6465                           postinc1	equ	0xFE6
  6466                           postdec1	equ	0xFE5
  6467                           fsr1h	equ	0xFE2
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           fsr2h	equ	0xFDA
  6473                           fsr2l	equ	0xFD9
  6474                           status	equ	0xFD8
  6475                           
  6476                           	psect	rparam
  6477  0000                     tosu	equ	0xFFF
  6478                           tosh	equ	0xFFE
  6479                           tosl	equ	0xFFD
  6480                           pclath	equ	0xFFA
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           indf0	equ	0xFEF
  6489                           postinc0	equ	0xFEE
  6490                           fsr0h	equ	0xFEA
  6491                           fsr0l	equ	0xFE9
  6492                           wreg	equ	0xFE8
  6493                           postinc1	equ	0xFE6
  6494                           postdec1	equ	0xFE5
  6495                           fsr1h	equ	0xFE2
  6496                           fsr1l	equ	0xFE1
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           postdec2	equ	0xFDD
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    14
    Data        21
    BSS         85
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     64      95
    BANK0           160      0      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[5]), STR_11(CODE[17]), STR_10(CODE[15]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[13]), STR_18(CODE[11]), STR_16(CODE[9]), STR_13(CODE[11]), 
		 -> STR_12(CODE[17]), ingresar_password@clear(COMRAM[16]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), buffer2(BANK0[20]), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 9
		 -> STR_16(CODE[9]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_19(CODE[4]), STR_17(CODE[4]), STR_15(CODE[4]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_caratula
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   49367
                                             55 COMRAM     9     9      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     518
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4   27019
                                             45 COMRAM     7     3      4
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   13668
                                             39 COMRAM     6     0      6
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    7630
                                             36 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                       1     1      0    5264
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    2344
                                             38 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                      3     3      0    2322
                                             35 COMRAM     3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    5151
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                            20    18      2    7399
                                             35 COMRAM    20    18      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2300
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    2942
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    2001
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1333
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _guardar_tecla_presionada
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      59       5       55.6%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     40      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8       6        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 25 21:40:28 2016

                                _a 0082                                  _b 0084  
                                _c 0086                                  _i 0088  
                                _j 008A                                  _k 008C  
                   ?_lcd_send_byte 0003                       ___awdiv@sign 0006  
              ___wmul@multiplicand 0003                        lcd_comand@d 0005  
                     __CFG_CP0$OFF 000000         ??_mostrar_guardar_password 0025  
                              l200 1712                                l150 1F6E  
                              l215 21EA                                l224 1FCE  
                              l172 1B62                                l181 1BA4  
                              l173 1B5E                                l157 1DC6  
                              l191 16E2                                l280 2208  
                              l176 1B8C                                l168 1B3A  
                              l192 16DE                                l281 220A  
                              l177 1B88                                l169 1B36  
                              l195 16FC                                l187 16BC  
                              l196 16F8                                l188 16B8  
                              l359 115C                                _dia 0054  
                              _key 0049                                _mes 005A  
                              tosl 000FFD                                wreg 000FE8  
                  RtccReadDate@pDt 0001                        lcd_gotoxy@x 0006  
                      lcd_gotoxy@y 0005                               l1003 2022  
                             l1013 20C2                               l2020 20F4  
                             l2006 227E                               l2014 20D0  
                             l2110 105E                               l2102 0FFA  
                             l2008 2284                               l2016 20DC  
                             l2024 2100                               l1322 22DC  
                             l2018 20E8                               l2050 1FE6  
                             l2034 22D0                               l2130 10D2  
                             l2122 10A2                               l2114 1064  
                             l2202 2196                               l2052 1FF0  
                             l2140 1104                               l2116 1086  
                             l2302 1594                               l2062 2016  
                             l2054 1FF8                               l2070 208E  
                             l2150 1132                               l2134 10D6  
                             l2126 10AE                               l2206 21B8  
                             l2224 18A4                               l2072 2098  
                             l2152 113A                               l2144 1110  
                             l2234 18D4                               l2218 187A  
                             l2074 20A0                               l2138 10FA  
                             l2090 0FAE                               l2228 18B8  
                             l2164 11B6                               l2092 0FBC  
                             l2084 0F94                               l2342 1602  
                             l2334 15EA                               l2270 193C  
                             l2262 1924                               l2174 202E  
                             l2078 20B6                               l2158 1162  
                             l2166 11C2                               l2168 11DE  
                             l2096 0FC6                               l2192 1F3C  
                             l2338 15F6                               l2266 1930  
                             l2362 1BC4                               l2178 2058  
                             l2098 0FDC                               l2530 1FAC  
                             l2292 1564                               l2532 1FB2  
                             l2620 1DAC                               l2286 152A  
                             l2374 1BEC                               l2390 1C28  
                             l2534 1FC2                               l2526 1F82  
                             l2622 1DB2                               l2448 1E3E  
                             l2296 1578                               l2376 1BF6  
                             l2368 1BD6                               l2544 1CF8  
                             l2616 1D6C                               l2800 13EC  
                             l2474 1C44                               l2394 1C38  
                             l2386 1C1C                               l2378 1BFE  
                             l2562 1D24                               l2554 1D10  
                             l2810 1426                               l2548 1D00  
                             l2820 1458                               l2734 1950  
                             l2830 1492                               l2814 143A  
                             l2752 19B4                               l2744 197C  
                             l2680 171A                               l2770 1A0A  
                             l2746 198C                               l2738 1964  
                             l2834 14A6                               l2818 1452  
                             l1980 22EE                               l2684 1A44  
                             l2694 1A70                               l2774 1A22  
                             l2766 19F6                               l2838 14BE  
                             l2688 1A58                               l2792 13A4  
                             l2784 137E                               STR_1 0F6C  
                             STR_2 0F6C                               STR_3 0F7F  
                             STR_4 0F81                               STR_5 0F83  
                             STR_6 0F85                               STR_7 0F7F  
                             STR_8 0F7D                               STR_9 0F87  
                  _guardar_comando 1F10                               u1200 1DD4  
                             u1220 1DEC                               u1240 1E06  
                             u1218 1DD6                               u1260 1E22  
                             u2300 13B2                               u1238 1DEE  
                             u1520 204E                               u2240 19C8  
                             u1258 1E08                               u1530 2078  
                             u2138 16C8                               u1278 1E24  
                             u1527 2044                               u2407 14AC  
                             u1537 206E                               u2417 1720  
                             u2290 13B0                               u2427 1A10  
                             u2437 22DE                               u2447 22F0  
                             u2397 1440                               u1918 1B22  
                             u1948 1B4A                               u1978 1B74  
                 ?_lcd_send_nibble 0001                               _anio 0052  
                             _flag 02F8                               _main 136C  
                             _hora 0058                               fsr0h 000FEA  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                    __CFG_T1DIG$ON 000000                               prodh 000FF4  
                             prodl 000FF3                               start 0000  
                    __CFG_IESO$OFF 000000                   RtccReadDate@rTD0 000B  
                 RtccReadDate@rTD1 0003                       ___param_bank 000010  
                  RtccReadTime@pTm 0001                        _Delay1KTCYx 22DA  
                    __CFG_PLLDIV$1 000000                              ?_main 0001  
                  __end_of___awdiv 1C44                              STR_10 0F31  
                            STR_11 0F20                              STR_20 0F40  
                            STR_12 0F0F                              STR_13 0F58  
                            STR_14 0F6C                              STR_15 0F79  
                            STR_16 0F63                              STR_17 0F71  
                            STR_18 0F4D                              STR_19 0F75  
            __size_of_Delay100TCYx 0012                    ___awdiv@divisor 0003  
                  __end_of___lwdiv 202C                    __end_of___lwmod 20CC  
                _restaurar_comando 2296                   ?_validar_comando 0001  
                  ___awdiv@counter 0005                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                    ?_leer_teclado 002E                 ?_restaurar_comando 0001  
                   __CFG_FCMEN$OFF 000000                              _Setup 2118  
                   _ocultar_teclas 008E                    __end_of_dpowers 0F0B  
                            _mes_d 00AB                              _mes_u 00AC  
                  __end_of_isdigit 22DA                              main@i 003B  
                   __pbitbssCOMRAM 02F8                              pclath 000FFA  
                            tablat 000FF5                ??_restaurar_comando 0001  
                     lcd_putrs@ptr 0009                              status 000FD8  
                  __end_of_sprintf 11EE                  validar_password@i 0003  
          __CFG_DSWDTOSC$INTOSCREF 000000                    __initialization 1EAC  
                     _Delay100TCYx 22EC                       __end_of_main 14C8  
                  ??_lcd_send_byte 0004                   RtccReadTime@rTD0 000B  
                 RtccReadTime@rTD1 0003                   __end_of_Read_RTC 183C  
         _guardar_current_password 21A6          __size_of_ingresar_comando 000A  
        __end_of_restaurar_comando 22B8                             ??_main 0038  
                    __activetblptr 000002                     ??_leer_teclado 0032  
          __end_of_guardar_comando 1F70                   __end_of_RtccWrOn 2310  
                           ?_Setup 0001                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _EECON2 000FA7  
                           _ANCON0 000F48                             _ANCON1 000F49  
                 ___awdiv@dividend 0001                     __CFG_WDTEN$OFF 000000  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                   __CFG_WPCFG$OFF 000000                   __end_of_caratula 1B12  
                   __CFG_WPDIS$OFF 000000                     __CFG_XINST$OFF 000000  
                 __end_of_lcd_init 1D52                   __end_of_lcd_putc 2118  
                ?_validar_password 0001                             ___wmul 224A  
                        ??___awdiv 0005                     __CFG_STVREN$ON 000000  
                           _diasem 0056                             _anio_d 00A4  
                           _anio_u 00A5                          ??___lwdiv 0005  
                        ??___lwmod 000C                 ??_validar_password 0001  
                           _hora_d 00A9                             _hora_u 00AA  
                           clear_0 1EB2                             clear_1 1EC0  
                 ___awdiv@quotient 0007                             _minuto 005C  
 __end_of_mostrar_guardar_password 224A              __end_of_RtccWriteDate 160E  
            __end_of_RtccWriteTime 1948                   RtccWriteTime@pTm 0001  
         _guardar_tecla_presionada 1B12                       __pdataCOMRAM 0052  
                        ??_isdigit 0001                   ??_imprimir_tecla 0024  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_sprintf 0017                         __accesstop 0060  
          __end_of__initialization 1F06                 __size_of_Write_RTC 017E  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
                    __end_of_Setup 2160                       __pidataBANK0 2334  
                  __CFG_DSWDTPS$G2 000000         __size_of_restaurar_comando 0022  
                 leer_teclado@doit 0030                leer_teclado@ocultar 002E  
                  __CFG_OSC$INTOSC 000000                   ?_guardar_comando 0001  
                          ??_Setup 000E                  lcd_gotoxy@address 0007  
               __size_of_lcd_putrs 0054                       sprintf@width 0021  
                       __pbssBANK0 0060                          ?_Read_RTC 0001  
                  _tamanio_comando 0045                         _dia_semana 00A6  
        RtccWriteTime@tempHourWDay 000A                         __pnvCOMRAM 005E  
             __end_of_leer_teclado 172C                          ?_RtccWrOn 0001  
                   lcd_send_byte@n 0003                            ?___wmul 0001  
                    ?_RtccReadDate 0001                      ?_RtccReadTime 0001  
                 _ingresar_comando 232A                       ?_Delay1KTCYx 0001  
                __end_of_Write_RTC 136C                         _lcd_comand 2310  
                        ?_caratula 0024                         _lcd_gotoxy 2272  
                          _RTCVALH 000F99                            _RTCVALL 000F98  
                    caratula@clear 0026                          ?_lcd_init 0001  
                        ?_lcd_putc 0001                         ??_Read_RTC 0013  
__size_of_mostrar_guardar_password 002C          ?_mostrar_guardar_password 0001  
       ??_guardar_current_password 0001                            __Hparam 0000  
                          __Lparam 0000           __size_of_lcd_send_nibble 0076  
                       ??_RtccWrOn 0001               guardar_comando@tecla 0026  
                   ??_RtccReadDate 0003                         _autorizado 0041  
                   ??_RtccReadTime 0003                            ___awdiv 1BAE  
                __end_of_lcd_putrs 2080                    __size_of___wmul 0028  
                          ___lwdiv 1FD0                            ___lwmod 2080  
                     __psmallconst 0F00                        _RtccTimeVal 007E  
                          __pcinit 1EAC                            _fecha_d 00A7  
                          _fecha_u 00A8                            __ramtop 0F00  
    mostrar_guardar_password@tecla 0025                            __ptext0 136C  
                          __ptext1 1D52                            __ptext2 2296  
                          __ptext3 160E                            __ptext4 1B12  
                          __ptext5 232A                            __ptext6 221E  
                          __ptext7 2160                            __ptext8 21A6  
                          __ptext9 1F10                            _buffer2 0090  
                          _comando 00B6                          _T1CONbits 000FCD  
                          _dpowers 0F01                            _isdigit 22B8  
                   main@validacion 003F                         ??_caratula 0026  
                          _segundo 0043                            _sprintf 0F8A  
                       ??_lcd_init 0005                         ??_lcd_putc 0008  
             end_of_initialization 1F06           __size_of_validar_comando 0076  
             lcd_send_byte@address 0004                      __Lmediumconst 0000  
                          postdec1 000FE5                            postdec2 000FDD  
       ??_guardar_tecla_presionada 002E                            postinc0 000FEE  
                          postinc1 000FE6                            postinc2 000FDE  
            __end_of_lcd_send_byte 221E                          _PORTAbits 000F80  
                        _PORTCbits 000F82                   __CFG_DSBOREN$OFF 000000  
                      ?_lcd_comand 0001                   __CFG_CPUDIV$OSC1 000000  
               ingresar_password@i 001E                          _TRISBbits 000F93  
                      ?_lcd_gotoxy 0005          __size_of_validar_password 0060  
                  _LCD_INIT_STRING 0F0B                   validar_comando@i 0008  
            __size_of_leer_teclado 011E                   _current_password 0078  
                 __CFG_IOL1WAY$OFF 000000          RtccWriteDate@tempDayMonth 000A  
              __CFG_MSSP7B_EN$MSK7 000000                      leer_teclado@i 0033  
                 Delay100TCYx@unit 0001                     __end_of___wmul 2272  
                    __pidataCOMRAM 231E          RtccWriteDate@tempHourWDay 000C  
                ??_lcd_send_nibble 0001               __size_of_Delay1KTCYx 0012  
                 __CFG_DSWDTEN$OFF 000000                start_initialization 1EAC  
               main@ocultar_teclas 0039                       _leer_teclado 160E  
             __end_of_RtccReadDate 1CD2               __end_of_RtccReadTime 1EAC  
         __end_of_ingresar_comando 2334               RtccWriteTime@wasAlrm 0006  
             RtccWriteTime@wasWrEn 0007   __end_of_guardar_current_password 21EC  
    guardar_current_password@valor 0003             __size_of_RtccWriteDate 0146  
                  RtccWriteDate@di 0003             __size_of_RtccWriteTime 010C  
                __size_of_Read_RTC 0110                  ??_validar_comando 0005  
              __size_of_lcd_comand 000E                __size_of_lcd_gotoxy 0024  
                         ??___wmul 0005                        __pdataBANK0 00B0  
                __size_of_RtccWrOn 0012                    RtccWriteTime@di 0003  
                 __CFG_LPT1OSC$OFF 000000                        _ALRMCFGbits 000F91  
          __end_of_LCD_INIT_STRING 0F0F                        __pbssCOMRAM 0041  
                        _Write_RTC 11EE                       _isdigit$2103 0002  
                __size_of_caratula 00D6                    Delay1KTCYx@unit 0001  
         __size_of_guardar_comando 0060                  __size_of_lcd_init 0080  
                      sprintf@flag 001D                  __size_of_lcd_putc 004C  
                      sprintf@prec 0020            __size_of_imprimir_tecla 0046  
                        __pnvBANK0 00A4                   _tamanio_password 0047  
                 ___lwdiv@dividend 0001                      ?_Delay100TCYx 0001  
 __end_of_guardar_tecla_presionada 1BAE                           ?___awdiv 0001  
                         ?___lwdiv 0001                           ?___lwmod 0008  
          RtccWriteTime@tempMinSec 0008                          _lcd_putrs 202C  
                    _RtccWriteDate 14C8                        __smallconst 0F00  
                    _RtccWriteTime 183C                           ?_isdigit 0001  
             __CFG_RTCOSC$T1OSCREF 000000                   _validar_password 1F70  
                   __size_of_Setup 0048                         ?_Write_RTC 0001  
                 ___lwdiv@quotient 0005                           ?_sprintf 000D  
                        caratula@i 0036                  _ingresar_password 1948  
                 _RtccAlrmTimeDate 0060                     ___wmul@product 0005  
                         _LATAbits 000F89                           _LATBbits 000F8A  
               ?_ingresar_password 0001                           _PIE3bits 000FA3  
                        _segundo_d 005E                     ??_Delay100TCYx 0001  
                        _segundo_u 00AF                   __CFG_WDTPS$32768 000000  
              ??_ingresar_password 000B                 RtccWriteDate@wasOn 0005  
        guardar_tecla_presionada@i 002A           validar_comando@candidato 0001  
               _Rtcc_read_TimeDate 0070                     ?_RtccWriteDate 0001  
                       ?_lcd_putrs 0009                  ___wmul@multiplier 0001  
                        main@i_995 003D                     ?_RtccWriteTime 0001  
__size_of_guardar_current_password 0046                     caratula@titulo 0024  
        ?_guardar_current_password 0001                          lcd_init@i 0005  
            __size_of_RtccReadDate 008E                       ??_lcd_comand 0005  
                        lcd_putc@c 0008              __size_of_RtccReadTime 006E  
              imprimir_tecla@tecla 0024                       ??_lcd_gotoxy 0006  
        __end_of_ingresar_password 1A3C           _mostrar_guardar_password 221E  
                        copy_data0 1EDA                          copy_data1 1EFA  
                         _Read_RTC 172C                    _lcd_send_nibble 1DC8  
                         __Hrparam 0000                           _RtccDate 004A  
                         __Lrparam 0000                  ??_guardar_comando 0024  
                         _RtccTime 004E                           _RtccWrOn 22FE  
               __end_of_lcd_comand 231E                 __end_of_lcd_gotoxy 2296  
    guardar_tecla_presionada@letra 0028                       _RtccReadDate 1C44  
                 __size_of___awdiv 0096                       _RtccReadTime 1E3E  
                 __size_of___lwdiv 005C                ingresar_comando@key 0027  
                 __size_of___lwmod 004C                       _RtccTimeDate 0068  
                       sprintf@val 001E                           _caratula 1A3C  
                 __size_of_isdigit 0022                    ___lwdiv@divisor 0003  
                      ??_Write_RTC 000E                    ___lwdiv@counter 0007  
__size_of_guardar_tecla_presionada 009C                           __ptext10 1948  
                         __ptext11 1F70                           __ptext20 2272  
                         __ptext12 1A3C                           __ptext21 2118  
                         __ptext13 0F8A                           __ptext30 183C  
                         __ptext22 1CD2                           __ptext14 22B8  
                         __ptext31 14C8                           __ptext23 22DA  
                         __ptext15 224A                           __ptext32 22FE  
                         __ptext24 2310                           __ptext16 2080  
                         __ptext33 172C                           __ptext25 21EC  
                         __ptext17 1FD0                           __ptext34 1E3E  
                         __ptext26 1DC8                           __ptext18 202C  
                         __ptext35 1C44                           __ptext27 22EC  
                         __ptext19 20CC                           __ptext36 0000  
                         __ptext28 11EE                           __ptext29 1BAE  
        ?_guardar_tecla_presionada 0028                    _validar_comando 1D52  
                         _lcd_init 1CD2                           _lcd_putc 20CC  
                 __size_of_sprintf 0264                  ?_ingresar_comando 0001  
           __size_of_lcd_send_byte 0032                     _imprimir_tecla 2160  
                    __size_of_main 015C                 ??_ingresar_comando 0027  
                         _minuto_d 00AD                           _minuto_u 00AE  
                         _password 00B0                      ??_Delay1KTCYx 0001  
                  ??_RtccWriteDate 0004                    ??_RtccWriteTime 0004  
                      ??_lcd_putrs 000B                        _OSCTUNEbits 000F9B  
                       _INTCONbits 000FF2                 RtccWriteTime@wasOn 0005  
             __end_of_Delay100TCYx 22FE                           isdigit@c 0003  
     guardar_tecla_presionada@doit 002C         __size_of_ingresar_password 00F4  
           __end_of_imprimir_tecla 21A6                          sprintf@ap 001B  
          __end_of_lcd_send_nibble 1E3E                          sprintf@sp 000D  
                 ___lwmod@dividend 0008                         _OSCCONbits 000FD3  
         __end_of_validar_password 1FD0              RtccWriteDate@tempYear 0007  
                    _lcd_send_byte 21EC                         _RTCCFGbits 000F3F  
          __end_of_validar_comando 1DC8             validar_comando@validar 0003  
                         sprintf@c 0023                           sprintf@f 000F  
                  ___lwmod@divisor 000A                __end_of_Delay1KTCYx 22EC  
                  ___lwmod@counter 000C               RtccWriteDate@wasAlrm 0006  
             RtccWriteDate@wasWrEn 0009             ingresar_password@i_969 001C  
                  ?_imprimir_tecla 0001             ingresar_password@clear 000C  
            lcd_send_nibble@nibble 0002  
