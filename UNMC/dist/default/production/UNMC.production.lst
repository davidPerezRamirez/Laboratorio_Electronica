

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 01 23:51:37 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	idataBANK0
    62  002752                     __pidataBANK0:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _password
    66  002752  31                 	db	49
    67  002753  32                 	db	50
    68  002754  33                 	db	51
    69  002755  34                 	db	52
    70  002756  35                 	db	53
    71  002757  36                 	db	54
    72                           
    73                           ;initializer for _comando
    74  002758  78                 	db	120
    75  002759  78                 	db	120
    76  00275A  78                 	db	120
    77  00275B  00                 	db	0
    78                           
    79                           ;initializer for _anio
    80  00275C  000F               	dw	15
    81                           
    82                           ;initializer for _dia
    83  00275E  0008               	dw	8
    84                           
    85                           ;initializer for _diasem
    86  002760  0003               	dw	3
    87                           
    88                           ;initializer for _hora
    89  002762  0012               	dw	18
    90                           
    91                           ;initializer for _mes
    92  002764  0009               	dw	9
    93                           
    94                           ;initializer for _minuto
    95  002766  001E               	dw	30
    96                           
    97                           	psect	smallconst
    98  000F00                     __psmallconst:
    99                           	opt stack 0
   100  000F00  00                 	db	0
   101  000F01                     _dpowers:
   102                           	opt stack 0
   103  000F01  0001               	dw	1
   104  000F03  000A               	dw	10
   105  000F05  0064               	dw	100
   106  000F07  03E8               	dw	1000
   107  000F09  2710               	dw	10000
   108  000F0B                     __end_of_dpowers:
   109                           	opt stack 0
   110  000F0B                     _LCD_INIT_STRING:
   111                           	opt stack 0
   112  000F0B  28                 	db	40
   113  000F0C  0C                 	db	12
   114  000F0D  01                 	db	1
   115  000F0E  06                 	db	6
   116  000F0F                     __end_of_LCD_INIT_STRING:
   117                           	opt stack 0
   118  000F0F                     STR_13:
   119                           
   120                           ; BSR set to: 15
   121  000F0F  49                 	db	73	;'I'
   122  000F10  6E                 	db	110	;'n'
   123  000F11  73                 	db	115	;'s'
   124  000F12  65                 	db	101	;'e'
   125  000F13  72                 	db	114	;'r'
   126  000F14  74                 	db	116	;'t'
   127  000F15  65                 	db	101	;'e'
   128  000F16  20                 	db	32
   129  000F17  61                 	db	97	;'a'
   130  000F18  6E                 	db	110	;'n'
   131  000F19  69                 	db	105	;'i'
   132  000F1A  6F                 	db	111	;'o'
   133  000F1B  3A                 	db	58	;':'
   134  000F1C  20                 	db	32
   135  000F1D  20                 	db	32
   136  000F1E  20                 	db	32
   137  000F1F  20                 	db	32
   138  000F20  20                 	db	32
   139  000F21  00                 	db	0
   140  000F22                     STR_9:
   141                           
   142                           ; BSR set to: 15
   143  000F22  49                 	db	73	;'I'
   144  000F23  6E                 	db	110	;'n'
   145  000F24  73                 	db	115	;'s'
   146  000F25  65                 	db	101	;'e'
   147  000F26  72                 	db	114	;'r'
   148  000F27  74                 	db	116	;'t'
   149  000F28  65                 	db	101	;'e'
   150  000F29  20                 	db	32
   151  000F2A  64                 	db	100	;'d'
   152  000F2B  69                 	db	105	;'i'
   153  000F2C  61                 	db	97	;'a'
   154  000F2D  3A                 	db	58	;':'
   155  000F2E  20                 	db	32
   156  000F2F  20                 	db	32
   157  000F30  20                 	db	32
   158  000F31  20                 	db	32
   159  000F32  20                 	db	32
   160  000F33  00                 	db	0
   161  000F34                     STR_11:
   162                           
   163                           ; BSR set to: 15
   164  000F34  49                 	db	73	;'I'
   165  000F35  6E                 	db	110	;'n'
   166  000F36  73                 	db	115	;'s'
   167  000F37  65                 	db	101	;'e'
   168  000F38  72                 	db	114	;'r'
   169  000F39  74                 	db	116	;'t'
   170  000F3A  65                 	db	101	;'e'
   171  000F3B  20                 	db	32
   172  000F3C  6D                 	db	109	;'m'
   173  000F3D  65                 	db	101	;'e'
   174  000F3E  73                 	db	115	;'s'
   175  000F3F  3A                 	db	58	;':'
   176  000F40  20                 	db	32
   177  000F41  20                 	db	32
   178  000F42  20                 	db	32
   179  000F43  20                 	db	32
   180  000F44  20                 	db	32
   181  000F45  00                 	db	0
   182  000F46                     STR_3:
   183                           
   184                           ; BSR set to: 15
   185  000F46  49                 	db	73	;'I'
   186  000F47  6E                 	db	110	;'n'
   187  000F48  73                 	db	115	;'s'
   188  000F49  65                 	db	101	;'e'
   189  000F4A  72                 	db	114	;'r'
   190  000F4B  74                 	db	116	;'t'
   191  000F4C  65                 	db	101	;'e'
   192  000F4D  20                 	db	32
   193  000F4E  70                 	db	112	;'p'
   194  000F4F  61                 	db	97	;'a'
   195  000F50  73                 	db	115	;'s'
   196  000F51  73                 	db	115	;'s'
   197  000F52  77                 	db	119	;'w'
   198  000F53  6F                 	db	111	;'o'
   199  000F54  72                 	db	114	;'r'
   200  000F55  64                 	db	100	;'d'
   201  000F56  00                 	db	0
   202  000F57                     STR_1:
   203                           
   204                           ; BSR set to: 15
   205  000F57  25                 	db	37
   206  000F58  30                 	db	48	;'0'
   207  000F59  32                 	db	50	;'2'
   208  000F5A  75                 	db	117	;'u'
   209  000F5B  2F                 	db	47
   210  000F5C  25                 	db	37
   211  000F5D  30                 	db	48	;'0'
   212  000F5E  32                 	db	50	;'2'
   213  000F5F  75                 	db	117	;'u'
   214  000F60  2F                 	db	47
   215  000F61  25                 	db	37
   216  000F62  30                 	db	48	;'0'
   217  000F63  32                 	db	50	;'2'
   218  000F64  75                 	db	117	;'u'
   219  000F65  00                 	db	0
   220  000F66                     STR_2:
   221                           
   222                           ; BSR set to: 15
   223  000F66  25                 	db	37
   224  000F67  30                 	db	48	;'0'
   225  000F68  32                 	db	50	;'2'
   226  000F69  75                 	db	117	;'u'
   227  000F6A  3A                 	db	58	;':'
   228  000F6B  25                 	db	37
   229  000F6C  30                 	db	48	;'0'
   230  000F6D  32                 	db	50	;'2'
   231  000F6E  75                 	db	117	;'u'
   232  000F6F  3A                 	db	58	;':'
   233  000F70  25                 	db	37
   234  000F71  30                 	db	48	;'0'
   235  000F72  32                 	db	50	;'2'
   236  000F73  75                 	db	117	;'u'
   237  000F74  00                 	db	0
   238  000F75                     STR_10:
   239                           
   240                           ; BSR set to: 15
   241  000F75  20                 	db	32
   242  000F76  20                 	db	32
   243  000F77  20                 	db	32
   244  000F78  20                 	db	32
   245  000F79  20                 	db	32
   246  000F7A  20                 	db	32
   247  000F7B  20                 	db	32
   248  000F7C  20                 	db	32
   249  000F7D  20                 	db	32
   250  000F7E  20                 	db	32
   251  000F7F  20                 	db	32
   252  000F80  20                 	db	32
   253  000F81  00                 	db	0
   254  000F82                     STR_16:
   255                           
   256                           ; BSR set to: 15
   257  000F82  63                 	db	99	;'c'
   258  000F83  61                 	db	97	;'a'
   259  000F84  6D                 	db	109	;'m'
   260  000F85  62                 	db	98	;'b'
   261  000F86  69                 	db	105	;'i'
   262  000F87  61                 	db	97	;'a'
   263  000F88  72                 	db	114	;'r'
   264  000F89  20                 	db	32
   265  000F8A  70                 	db	112	;'p'
   266  000F8B  61                 	db	97	;'a'
   267  000F8C  73                 	db	115	;'s'
   268  000F8D  73                 	db	115	;'s'
   269  000F8E  00                 	db	0
   270  000F8F                     STR_4:
   271                           
   272                           ; BSR set to: 15
   273  000F8F  45                 	db	69	;'E'
   274  000F90  52                 	db	82	;'R'
   275  000F91  52                 	db	82	;'R'
   276  000F92  4F                 	db	79	;'O'
   277  000F93  52                 	db	82	;'R'
   278  000F94  20                 	db	32
   279  000F95  70                 	db	112	;'p'
   280  000F96  61                 	db	97	;'a'
   281  000F97  73                 	db	115	;'s'
   282  000F98  73                 	db	115	;'s'
   283  000F99  00                 	db	0
   284  000F9A                     STR_7:
   285                           
   286                           ; BSR set to: 15
   287  000F9A  57                 	db	87	;'W'
   288  000F9B  65                 	db	101	;'e'
   289  000F9C  6C                 	db	108	;'l'
   290  000F9D  63                 	db	99	;'c'
   291  000F9E  6F                 	db	111	;'o'
   292  000F9F  6D                 	db	109	;'m'
   293  000FA0  65                 	db	101	;'e'
   294  000FA1  00                 	db	0
   295  000FA2                     STR_5:
   296                           
   297                           ; BSR set to: 15
   298  000FA2  25                 	db	37
   299  000FA3  30                 	db	48	;'0'
   300  000FA4  31                 	db	49	;'1'
   301  000FA5  75                 	db	117	;'u'
   302  000FA6  00                 	db	0
   303  000FA7                     STR_8:
   304                           
   305                           ; BSR set to: 15
   306  000FA7  30                 	db	48	;'0'
   307  000FA8  30                 	db	48	;'0'
   308  000FA9  31                 	db	49	;'1'
   309  000FAA  00                 	db	0
   310  000FAB                     STR_15:
   311                           
   312                           ; BSR set to: 15
   313  000FAB  30                 	db	48	;'0'
   314  000FAC  30                 	db	48	;'0'
   315  000FAD  32                 	db	50	;'2'
   316  000FAE  00                 	db	0
   317  000FAF                     STR_6:
   318                           
   319                           ; BSR set to: 15
   320  000FAF  78                 	db	120	;'x'
   321  000FB0  78                 	db	120	;'x'
   322  000FB1  78                 	db	120	;'x'
   323  000FB2  00                 	db	0
   324  000FB3                     STR_24:
   325                           
   326                           ; BSR set to: 15
   327  000FB3  23                 	db	35
   328  000FB4  00                 	db	0
   329  000FB5                     STR_19:
   330                           
   331                           ; BSR set to: 15
   332  000FB5  2A                 	db	42
   333  000FB6  00                 	db	0
   334  000FB7                     STR_20:
   335                           
   336                           ; BSR set to: 15
   337  000FB7  41                 	db	65	;'A'
   338  000FB8  00                 	db	0
   339  000FB9                     STR_21:
   340                           
   341                           ; BSR set to: 15
   342  000FB9  42                 	db	66	;'B'
   343  000FBA  00                 	db	0
   344  000FBB                     STR_22:
   345                           
   346                           ; BSR set to: 15
   347  000FBB  43                 	db	67	;'C'
   348  000FBC  00                 	db	0
   349  000FBD                     STR_25:
   350                           
   351                           ; BSR set to: 15
   352  000FBD  44                 	db	68	;'D'
   353  000FBE  00                 	db	0
   354  0000                     
   355                           ; #config settings
   356  000FBF  00                 	db	0	; dummy byte at the end
   357  0000                     
   358                           	psect	nvBANK0
   359  0000CD                     __pnvBANK0:
   360                           	opt stack 0
   361  0000CD                     _anio_d:
   362                           	opt stack 0
   363  0000CD                     	ds	1
   364  0000CE                     _anio_u:
   365                           	opt stack 0
   366  0000CE                     	ds	1
   367  0000CF                     _dia_semana:
   368                           	opt stack 0
   369  0000CF                     	ds	1
   370  0000D0                     _fecha_d:
   371                           	opt stack 0
   372  0000D0                     	ds	1
   373  0000D1                     _fecha_u:
   374                           	opt stack 0
   375  0000D1                     	ds	1
   376  0000D2                     _hora_d:
   377                           	opt stack 0
   378  0000D2                     	ds	1
   379  0000D3                     _hora_u:
   380                           	opt stack 0
   381  0000D3                     	ds	1
   382  0000D4                     _mes_d:
   383                           	opt stack 0
   384  0000D4                     	ds	1
   385  0000D5                     _mes_u:
   386                           	opt stack 0
   387  0000D5                     	ds	1
   388  0000D6                     _minuto_d:
   389                           	opt stack 0
   390  0000D6                     	ds	1
   391  0000D7                     _minuto_u:
   392                           	opt stack 0
   393  0000D7                     	ds	1
   394  0000D8                     _segundo_d:
   395                           	opt stack 0
   396  0000D8                     	ds	1
   397  0000D9                     _segundo_u:
   398                           	opt stack 0
   399  0000D9                     	ds	1
   400  0000                     _ANCON0	set	3912
   401  0000                     _ANCON1	set	3913
   402  0000                     _RTCCFG	set	3903
   403  0000                     _RTCCFGbits	set	3903
   404  0000                     _ADCON0	set	4034
   405  0000                     _ADCON1	set	4033
   406  0000                     _ALRMCFGbits	set	3985
   407  0000                     _EECON2	set	4007
   408  0000                     _INTCONbits	set	4082
   409  0000                     _LATAbits	set	3977
   410  0000                     _LATBbits	set	3978
   411  0000                     _OSCCONbits	set	4051
   412  0000                     _OSCTUNEbits	set	3995
   413  0000                     _PIE3bits	set	4003
   414  0000                     _PORTAbits	set	3968
   415  0000                     _PORTCbits	set	3970
   416  0000                     _RTCVALH	set	3993
   417  0000                     _RTCVALL	set	3992
   418  0000                     _T1CONbits	set	4045
   419  0000                     _TRISA	set	3986
   420  0000                     _TRISB	set	3987
   421  0000                     _TRISBbits	set	3987
   422  0000                     _TRISC	set	3988
   423                           
   424                           	psect	cinit
   425  0025D4                     __pcinit:
   426                           	opt stack 0
   427  0025D4                     start_initialization:
   428                           	opt stack 0
   429  0025D4                     __initialization:
   430                           	opt stack 0
   431                           
   432                           ; Clear objects allocated to BANK0 (87 bytes)
   433  0025D4  EE00  F060         	lfsr	0,__pbssBANK0
   434  0025D8  0E57               	movlw	87
   435  0025DA                     clear_0:
   436  0025DA  6AEE               	clrf	postinc0,c
   437  0025DC  06E8               	decf	wreg,f,c
   438  0025DE  E1FD               	bnz	clear_0
   439                           
   440                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   441  0025E0  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   442                           
   443                           ; Clear objects allocated to COMRAM (13 bytes)
   444  0025E2  EE00  F052         	lfsr	0,__pbssCOMRAM
   445  0025E6  0E0D               	movlw	13
   446  0025E8                     clear_1:
   447  0025E8  6AEE               	clrf	postinc0,c
   448  0025EA  06E8               	decf	wreg,f,c
   449  0025EC  E1FD               	bnz	clear_1
   450                           
   451                           ; Initialize objects allocated to BANK0 (22 bytes)
   452                           ; load TBLPTR registers with __pidataBANK0
   453  0025EE  0E52               	movlw	low __pidataBANK0
   454  0025F0  6EF6               	movwf	tblptrl,c
   455  0025F2  0E27               	movlw	high __pidataBANK0
   456  0025F4  6EF7               	movwf	tblptrh,c
   457  0025F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   458  0025F8  6EF8               	movwf	tblptru,c
   459  0025FA  EE00  F0B7         	lfsr	0,__pdataBANK0
   460  0025FE  EE10 F016          	lfsr	1,22
   461  002602                     copy_data0:
   462  002602  0009               	tblrd		*+
   463  002604  CFF5 FFEE          	movff	tablat,postinc0
   464  002608  50E5               	movf	postdec1,w,c
   465  00260A  50E1               	movf	fsr1l,w,c
   466  00260C  E1FA               	bnz	copy_data0
   467  00260E                     end_of_initialization:
   468                           	opt stack 0
   469  00260E                     __end_of__initialization:
   470                           	opt stack 0
   471  00260E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   472  002610  6EF8               	movwf	tblptru,c
   473  002612  0100               	movlb	0
   474  002614  EF12  F009         	goto	_main	;jump to C main() function
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	bitbssCOMRAM
   485  0002F8                     __pbitbssCOMRAM:
   486                           	opt stack 0
   487  0002F8                     _flag:
   488                           	opt stack 0
   489  0002F8                     	ds	1
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1l	equ	0xFE1
   498                           
   499                           	psect	bssCOMRAM
   500  000052                     __pbssCOMRAM:
   501                           	opt stack 0
   502  000052                     _tamanio_password:
   503                           	opt stack 0
   504  000052                     	ds	2
   505  000054                     _key:
   506                           	opt stack 0
   507  000054                     	ds	1
   508  000055                     _RtccDate:
   509                           	opt stack 0
   510  000055                     	ds	4
   511  000059                     _tamanio_anio:
   512                           	opt stack 0
   513  000059                     	ds	2
   514  00005B                     _tamanio_dia:
   515                           	opt stack 0
   516  00005B                     	ds	2
   517  00005D                     _tamanio_mes:
   518                           	opt stack 0
   519  00005D                     	ds	2
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	bssBANK0
   530  000060                     __pbssBANK0:
   531                           	opt stack 0
   532  000060                     _RtccAlrmTimeDate:
   533                           	opt stack 0
   534  000060                     	ds	8
   535  000068                     _RtccTimeDate:
   536                           	opt stack 0
   537  000068                     	ds	8
   538  000070                     _Rtcc_read_TimeDate:
   539                           	opt stack 0
   540  000070                     	ds	8
   541  000078                     _current_password:
   542                           	opt stack 0
   543  000078                     	ds	6
   544  00007E                     _RtccTimeVal:
   545                           	opt stack 0
   546  00007E                     	ds	4
   547  000082                     _a:
   548                           	opt stack 0
   549  000082                     	ds	2
   550  000084                     _autorizado:
   551                           	opt stack 0
   552  000084                     	ds	2
   553  000086                     _b:
   554                           	opt stack 0
   555  000086                     	ds	2
   556  000088                     _c:
   557                           	opt stack 0
   558  000088                     	ds	2
   559  00008A                     _i:
   560                           	opt stack 0
   561  00008A                     	ds	2
   562  00008C                     _j:
   563                           	opt stack 0
   564  00008C                     	ds	2
   565  00008E                     _k:
   566                           	opt stack 0
   567  00008E                     	ds	2
   568  000090                     _ocultar_teclas:
   569                           	opt stack 0
   570  000090                     	ds	2
   571  000092                     _segundo:
   572                           	opt stack 0
   573  000092                     	ds	2
   574  000094                     _tamanio_comando:
   575                           	opt stack 0
   576  000094                     	ds	2
   577  000096                     _buffer2:
   578                           	opt stack 0
   579  000096                     	ds	20
   580  0000AA                     _RtccTime:
   581                           	opt stack 0
   582  0000AA                     	ds	4
   583  0000AE                     _day:
   584                           	opt stack 0
   585  0000AE                     	ds	3
   586  0000B1                     _month:
   587                           	opt stack 0
   588  0000B1                     	ds	3
   589  0000B4                     _year:
   590                           	opt stack 0
   591  0000B4                     	ds	3
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	dataBANK0
   602  0000B7                     __pdataBANK0:
   603                           	opt stack 0
   604  0000B7                     _password:
   605                           	opt stack 0
   606  0000B7                     	ds	6
   607  0000BD                     _comando:
   608                           	opt stack 0
   609  0000BD                     	ds	4
   610  0000C1                     _anio:
   611                           	opt stack 0
   612  0000C1                     	ds	2
   613  0000C3                     _dia:
   614                           	opt stack 0
   615  0000C3                     	ds	2
   616  0000C5                     _diasem:
   617                           	opt stack 0
   618  0000C5                     	ds	2
   619  0000C7                     _hora:
   620                           	opt stack 0
   621  0000C7                     	ds	2
   622  0000C9                     _mes:
   623                           	opt stack 0
   624  0000C9                     	ds	2
   625  0000CB                     _minuto:
   626                           	opt stack 0
   627  0000CB                     	ds	2
   628                           tblptru	equ	0xFF8
   629                           tblptrh	equ	0xFF7
   630                           tblptrl	equ	0xFF6
   631                           tablat	equ	0xFF5
   632                           postinc0	equ	0xFEE
   633                           wreg	equ	0xFE8
   634                           postdec1	equ	0xFE5
   635                           fsr1l	equ	0xFE1
   636                           
   637                           	psect	cstackCOMRAM
   638  000001                     __pcstackCOMRAM:
   639                           	opt stack 0
   640  000001                     ??_guardar_current_password:
   641  000001                     ??_isdigit:
   642  000001                     ??_lcd_send_nibble:
   643  000001                     ?___wmul:
   644                           	opt stack 0
   645  000001                     ?___awdiv:
   646                           	opt stack 0
   647  000001                     ?___lwdiv:
   648                           	opt stack 0
   649  000001                     Delay100TCYx@unit:
   650                           	opt stack 0
   651  000001                     Delay1KTCYx@unit:
   652                           	opt stack 0
   653  000001                     validar_comando@candidato:
   654                           	opt stack 0
   655  000001                     RtccReadDate@pDt:
   656                           	opt stack 0
   657  000001                     RtccReadTime@pTm:
   658                           	opt stack 0
   659  000001                     RtccWriteDate@pDt:
   660                           	opt stack 0
   661  000001                     RtccWriteTime@pTm:
   662                           	opt stack 0
   663  000001                     ___wmul@multiplier:
   664                           	opt stack 0
   665  000001                     ___awdiv@dividend:
   666                           	opt stack 0
   667  000001                     ___lwdiv@dividend:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x0
   671  000001                     	ds	1
   672  000002                     lcd_send_nibble@nibble:
   673                           	opt stack 0
   674  000002                     _isdigit$2379:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x1
   678  000002                     	ds	1
   679  000003                     lcd_send_byte@n:
   680                           	opt stack 0
   681  000003                     guardar_current_password@valor:
   682                           	opt stack 0
   683  000003                     RtccWriteDate@di:
   684                           	opt stack 0
   685  000003                     RtccWriteTime@di:
   686                           	opt stack 0
   687  000003                     isdigit@c:
   688                           	opt stack 0
   689  000003                     validar_comando@validar:
   690                           	opt stack 0
   691  000003                     validar_password@i:
   692                           	opt stack 0
   693  000003                     ___wmul@multiplicand:
   694                           	opt stack 0
   695  000003                     ___awdiv@divisor:
   696                           	opt stack 0
   697  000003                     ___lwdiv@divisor:
   698                           	opt stack 0
   699  000003                     RtccReadDate@rTD1:
   700                           	opt stack 0
   701  000003                     RtccReadTime@rTD1:
   702                           	opt stack 0
   703                           
   704                           ; 8 bytes @ 0x2
   705  000003                     	ds	1
   706  000004                     lcd_send_byte@address:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x3
   710  000004                     	ds	1
   711  000005                     ??_validar_comando:
   712  000005                     lcd_init@i:
   713                           	opt stack 0
   714  000005                     lcd_gotoxy@y:
   715                           	opt stack 0
   716  000005                     lcd_comand@d:
   717                           	opt stack 0
   718  000005                     RtccWriteDate@wasOn:
   719                           	opt stack 0
   720  000005                     RtccWriteTime@wasOn:
   721                           	opt stack 0
   722  000005                     ___awdiv@counter:
   723                           	opt stack 0
   724  000005                     ___wmul@product:
   725                           	opt stack 0
   726  000005                     ___lwdiv@quotient:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x4
   730  000005                     	ds	1
   731  000006                     lcd_gotoxy@x:
   732                           	opt stack 0
   733  000006                     RtccWriteDate@wasAlrm:
   734                           	opt stack 0
   735  000006                     RtccWriteTime@wasAlrm:
   736                           	opt stack 0
   737  000006                     ___awdiv@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x5
   741  000006                     	ds	1
   742  000007                     ?_atoi:
   743                           	opt stack 0
   744  000007                     lcd_gotoxy@address:
   745                           	opt stack 0
   746  000007                     RtccWriteTime@wasWrEn:
   747                           	opt stack 0
   748  000007                     ___lwdiv@counter:
   749                           	opt stack 0
   750  000007                     RtccWriteDate@tempYear:
   751                           	opt stack 0
   752  000007                     atoi@s:
   753                           	opt stack 0
   754  000007                     ___awdiv@quotient:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x6
   758  000007                     	ds	1
   759  000008                     ?___lwmod:
   760                           	opt stack 0
   761  000008                     lcd_putc@c:
   762                           	opt stack 0
   763  000008                     validar_comando@i:
   764                           	opt stack 0
   765  000008                     RtccWriteTime@tempMinSec:
   766                           	opt stack 0
   767  000008                     ___lwmod@dividend:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x7
   771  000008                     	ds	1
   772  000009                     ??_atoi:
   773  000009                     RtccWriteDate@wasWrEn:
   774                           	opt stack 0
   775  000009                     lcd_putrs@ptr:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x8
   779  000009                     	ds	1
   780  00000A                     RtccWriteDate@tempDayMonth:
   781                           	opt stack 0
   782  00000A                     RtccWriteTime@tempHourWDay:
   783                           	opt stack 0
   784  00000A                     ___lwmod@divisor:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x9
   788  00000A                     	ds	1
   789  00000B                     ??_ingresar_password:
   790  00000B                     atoi@sign:
   791                           	opt stack 0
   792  00000B                     RtccReadDate@rTD0:
   793                           	opt stack 0
   794  00000B                     RtccReadTime@rTD0:
   795                           	opt stack 0
   796                           
   797                           ; 8 bytes @ 0xA
   798  00000B                     	ds	1
   799  00000C                     ___lwmod@counter:
   800                           	opt stack 0
   801  00000C                     RtccWriteDate@tempHourWDay:
   802                           	opt stack 0
   803  00000C                     atoi@a:
   804                           	opt stack 0
   805  00000C                     ingresar_password@clear:
   806                           	opt stack 0
   807                           
   808                           ; 16 bytes @ 0xB
   809  00000C                     	ds	1
   810  00000D                     ?_sprintf:
   811                           	opt stack 0
   812  00000D                     sprintf@sp:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0xC
   816  00000D                     	ds	1
   817  00000E                     convertir_a_int@array:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0xD
   821  00000E                     	ds	1
   822  00000F                     sprintf@f:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xE
   826  00000F                     	ds	1
   827  000010                     convertir_a_int@valor:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0xF
   831  000010                     	ds	2
   832  000012                     
   833                           ; 0 bytes @ 0x11
   834  000012                     	ds	1
   835  000013                     
   836                           ; 0 bytes @ 0x12
   837  000013                     	ds	4
   838  000017                     ??_sprintf:
   839                           
   840                           ; 0 bytes @ 0x16
   841  000017                     	ds	4
   842  00001B                     sprintf@ap:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x1A
   846  00001B                     	ds	1
   847  00001C                     ingresar_password@i_517:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x1B
   851  00001C                     	ds	1
   852  00001D                     sprintf@flag:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x1C
   856  00001D                     	ds	1
   857  00001E                     ingresar_password@i:
   858                           	opt stack 0
   859  00001E                     sprintf@val:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x1D
   863  00001E                     	ds	2
   864  000020                     sprintf@prec:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x1F
   868  000020                     	ds	1
   869  000021                     sprintf@width:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x20
   873  000021                     	ds	2
   874  000023                     sprintf@c:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x22
   878  000023                     	ds	1
   879  000024                     ??_guardar_comando:
   880  000024                     caratula@titulo:
   881                           	opt stack 0
   882  000024                     guardar_elemento@array:
   883                           	opt stack 0
   884  000024                     imprimir_tecla@aux:
   885                           	opt stack 0
   886                           
   887                           ; 20 bytes @ 0x23
   888  000024                     	ds	2
   889  000026                     guardar_elemento@tamanio_array:
   890                           	opt stack 0
   891  000026                     guardar_comando@aux:
   892                           	opt stack 0
   893                           
   894                           ; 20 bytes @ 0x25
   895  000026                     	ds	2
   896  000028                     ??_guardar_elemento:
   897                           
   898                           ; 0 bytes @ 0x27
   899  000028                     	ds	2
   900  00002A                     guardar_elemento@tecla:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x29
   904  00002A                     	ds	1
   905  00002B                     ??_cambiar_dia:
   906  00002B                     ??_cambiar_mes:
   907  00002B                     ??_cambiar_anio:
   908                           
   909                           ; 0 bytes @ 0x2A
   910  00002B                     	ds	1
   911  00002C                     cambiar_dia@tecla:
   912                           	opt stack 0
   913  00002C                     cambiar_mes@tecla:
   914                           	opt stack 0
   915  00002C                     cambiar_anio@tecla:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x2B
   919  00002C                     	ds	1
   920  00002D                     cambiar_dia@i:
   921                           	opt stack 0
   922  00002D                     cambiar_mes@i:
   923                           	opt stack 0
   924  00002D                     cambiar_anio@i:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x2C
   928  00002D                     	ds	2
   929  00002F                     cambiar_dia@valor:
   930                           	opt stack 0
   931  00002F                     cambiar_mes@valor:
   932                           	opt stack 0
   933  00002F                     cambiar_anio@valor:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x2E
   937  00002F                     	ds	9
   938  000038                     imprimir_tecla@tecla:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x37
   942  000038                     	ds	1
   943  000039                     mostrar_guardar_password@tecla:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x38
   947  000039                     	ds	1
   948  00003A                     guardar_comando@tecla:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x39
   952  00003A                     	ds	1
   953  00003B                     ingresar_comando@key:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x3A
   957  00003B                     	ds	1
   958  00003C                     guardar_tecla_presionada@letra:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x3B
   962  00003C                     	ds	2
   963  00003E                     guardar_tecla_presionada@i:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x3D
   967  00003E                     	ds	2
   968  000040                     guardar_tecla_presionada@doit:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x3F
   972  000040                     	ds	2
   973  000042                     leer_teclado@ocultar:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x41
   977  000042                     	ds	2
   978  000044                     leer_teclado@doit:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x43
   982  000044                     	ds	2
   983  000046                     ??_leer_teclado:
   984                           
   985                           ; 0 bytes @ 0x45
   986  000046                     	ds	1
   987  000047                     leer_teclado@i:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x46
   991  000047                     	ds	2
   992  000049                     ??_main:
   993                           
   994                           ; 0 bytes @ 0x48
   995  000049                     	ds	1
   996  00004A                     main@puntero_funcion:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x49
  1000  00004A                     	ds	2
  1001  00004C                     main@ocultar_teclas:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x4B
  1005  00004C                     	ds	2
  1006  00004E                     main@i:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x4D
  1010  00004E                     	ds	2
  1011  000050                     main@validacion:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x4F
  1015  000050                     	ds	2
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025 ;;
  1026 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1027 ;;
  1028 ;; *************** function _main *****************
  1029 ;; Defined at:
  1030 ;;		line 125 in file "main.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  i               2   77[COMRAM] int 
  1035 ;;  validacion      2   79[COMRAM] int 
  1036 ;;  ocultar_tecl    2   75[COMRAM] int 
  1037 ;;  puntero_func    2   73[COMRAM] PTR void 
  1038 ;;		 -> cambiar_anio(0), cambiar_mes(0), cambiar_dia(0), ingresar_comando(2), 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  2  179[None  ] int 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1049 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1051 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1052 ;;Total ram usage:        9 bytes
  1053 ;; Hardware stack levels required when called:    9
  1054 ;; This function calls:
  1055 ;;		_Read_RTC
  1056 ;;		_Setup
  1057 ;;		_caratula
  1058 ;;		_ingresar_password
  1059 ;;		_lcd_gotoxy
  1060 ;;		_lcd_putrs
  1061 ;;		_leer_teclado
  1062 ;;		_restaurar_comando
  1063 ;;		_validar_comando
  1064 ;; This function is called by:
  1065 ;;		Startup code after reset
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text0
  1070  001224                     __ptext0:
  1071                           	opt stack 0
  1072  001224                     _main:
  1073                           	opt stack 22
  1074                           
  1075                           ;main.c: 127: Setup();
  1076                           
  1077                           ; BSR set to: 15
  1078                           ;incstack = 0
  1079  001224  EC80  F012         	call	_Setup	;wreg free
  1080                           
  1081                           ;main.c: 128: restaurar_comando();
  1082  001228  EC65  F013         	call	_restaurar_comando	;wreg free
  1083                           
  1084                           ;main.c: 130: int ocultar_teclas = 1;
  1085  00122C  0E00               	movlw	0
  1086  00122E  6E4D               	movwf	main@ocultar_teclas+1,c
  1087  001230  0E01               	movlw	1
  1088  001232  6E4C               	movwf	main@ocultar_teclas,c
  1089  001234  D000               	goto	l3319
  1090  001236                     l3319:
  1091                           
  1092                           ;main.c: 135: {
  1093                           ;main.c: 136: Read_RTC();
  1094  001236  EC6B  F00B         	call	_Read_RTC	;wreg free
  1095                           
  1096                           ;main.c: 138: if (!autorizado){
  1097  00123A  0100               	movlb	0	; () banked
  1098  00123C  5184               	movf	_autorizado& (0+255),w,b
  1099  00123E  0100               	movlb	0	; () banked
  1100  001240  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  1101  001242  A4D8               	btfss	status,2,c
  1102  001244  D00D               	goto	l3327
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 139: leer_teclado(ocultar_teclas,mostrar_guardar_password);
  1106  001246  C04C  F042         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1107  00124A  C04D  F043         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1108  00124E  0E4A               	movlw	low _mostrar_guardar_password
  1109  001250  6E44               	movwf	leer_teclado@doit,c
  1110  001252  0E26               	movlw	high _mostrar_guardar_password
  1111  001254  6E45               	movwf	leer_teclado@doit+1,c
  1112  001256  EC08  F00C         	call	_leer_teclado	;wreg free
  1113                           
  1114                           ;main.c: 140: ingresar_password();
  1115  00125A  EC1D  F00D         	call	_ingresar_password	;wreg free
  1116                           
  1117                           ;main.c: 141: }else{
  1118  00125E  D7EB               	goto	l3319
  1119  001260                     l3327:
  1120                           
  1121                           ;main.c: 142: puntero_funcion = ingresar_comando;
  1122  001260  0EAC               	movlw	low _ingresar_comando
  1123  001262  6E4A               	movwf	main@puntero_funcion,c
  1124  001264  0E27               	movlw	high _ingresar_comando
  1125  001266  6E4B               	movwf	main@puntero_funcion+1,c
  1126                           
  1127                           ;main.c: 144: validar_comando("xxx",&validacion);
  1128  001268  0EAF               	movlw	low STR_6
  1129  00126A  6E01               	movwf	validar_comando@candidato,c
  1130  00126C  0E0F               	movlw	high STR_6
  1131  00126E  6E02               	movwf	validar_comando@candidato+1,c
  1132  001270  0E50               	movlw	low main@validacion
  1133  001272  6E03               	movwf	validar_comando@validar,c
  1134  001274  0E00               	movlw	high main@validacion
  1135  001276  6E04               	movwf	validar_comando@validar+1,c
  1136  001278  EC89  F010         	call	_validar_comando	;wreg free
  1137                           
  1138                           ;main.c: 145: if(validacion){
  1139  00127C  5050               	movf	main@validacion,w,c
  1140  00127E  1051               	iorwf	main@validacion+1,w,c
  1141  001280  B4D8               	btfsc	status,2,c
  1142  001282  D007               	goto	l3335
  1143                           
  1144                           ;main.c: 146: caratula("Welcome");
  1145  001284  0E9A               	movlw	low STR_7
  1146  001286  6E24               	movwf	caratula@titulo,c
  1147  001288  0E0F               	movlw	high STR_7
  1148  00128A  6E25               	movwf	caratula@titulo+1,c
  1149  00128C  EC18  F00F         	call	_caratula	;wreg free
  1150  001290  D000               	goto	l3335
  1151  001292                     l3335:
  1152                           
  1153                           ;main.c: 147: }
  1154                           ;main.c: 149: validar_comando("001",&validacion);
  1155  001292  0EA7               	movlw	low STR_8
  1156  001294  6E01               	movwf	validar_comando@candidato,c
  1157  001296  0E0F               	movlw	high STR_8
  1158  001298  6E02               	movwf	validar_comando@candidato+1,c
  1159  00129A  0E50               	movlw	low main@validacion
  1160  00129C  6E03               	movwf	validar_comando@validar,c
  1161  00129E  0E00               	movlw	high main@validacion
  1162  0012A0  6E04               	movwf	validar_comando@validar+1,c
  1163  0012A2  EC89  F010         	call	_validar_comando	;wreg free
  1164                           
  1165                           ;main.c: 150: if(validacion){
  1166  0012A6  5050               	movf	main@validacion,w,c
  1167  0012A8  1051               	iorwf	main@validacion+1,w,c
  1168  0012AA  B4D8               	btfsc	status,2,c
  1169  0012AC  D05E               	goto	l3369
  1170                           
  1171                           ;main.c: 151: if (tamanio_dia != 2){
  1172  0012AE  0E02               	movlw	2
  1173  0012B0  185B               	xorwf	_tamanio_dia,w,c
  1174  0012B2  105C               	iorwf	_tamanio_dia+1,w,c
  1175  0012B4  B4D8               	btfsc	status,2,c
  1176  0012B6  D01A               	goto	l3349
  1177                           
  1178                           ;main.c: 152: lcd_gotoxy(1,1);
  1179  0012B8  0E01               	movlw	1
  1180  0012BA  6E05               	movwf	lcd_gotoxy@y,c
  1181  0012BC  0E01               	movlw	1
  1182  0012BE  EC77  F013         	call	_lcd_gotoxy
  1183                           
  1184                           ;main.c: 153: lcd_putrs("Inserte dia:     ");
  1185  0012C2  0E22               	movlw	low STR_9
  1186  0012C4  6E09               	movwf	lcd_putrs@ptr,c
  1187  0012C6  0E0F               	movlw	high STR_9
  1188  0012C8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1189  0012CA  EC0A  F012         	call	_lcd_putrs	;wreg free
  1190                           
  1191                           ;main.c: 154: lcd_gotoxy(1,2);
  1192  0012CE  0E02               	movlw	2
  1193  0012D0  6E05               	movwf	lcd_gotoxy@y,c
  1194  0012D2  0E01               	movlw	1
  1195  0012D4  EC77  F013         	call	_lcd_gotoxy
  1196                           
  1197                           ;main.c: 155: lcd_putrs("            ");
  1198  0012D8  0E75               	movlw	low STR_10
  1199  0012DA  6E09               	movwf	lcd_putrs@ptr,c
  1200  0012DC  0E0F               	movlw	high STR_10
  1201  0012DE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1202  0012E0  EC0A  F012         	call	_lcd_putrs	;wreg free
  1203                           
  1204                           ;main.c: 157: puntero_funcion = cambiar_dia;
  1205  0012E4  0E06               	movlw	low _cambiar_dia
  1206  0012E6  6E4A               	movwf	main@puntero_funcion,c
  1207  0012E8  0E1C               	movlw	high _cambiar_dia
  1208  0012EA  D03D               	goto	L2
  1209  0012EC                     l3349:
  1210  0012EC  0E02               	movlw	2
  1211  0012EE  185D               	xorwf	_tamanio_mes,w,c
  1212  0012F0  105E               	iorwf	_tamanio_mes+1,w,c
  1213  0012F2  B4D8               	btfsc	status,2,c
  1214  0012F4  D01A               	goto	l3359
  1215                           
  1216                           ;main.c: 160: lcd_gotoxy(1,1);
  1217  0012F6  0E01               	movlw	1
  1218  0012F8  6E05               	movwf	lcd_gotoxy@y,c
  1219  0012FA  0E01               	movlw	1
  1220  0012FC  EC77  F013         	call	_lcd_gotoxy
  1221                           
  1222                           ;main.c: 161: lcd_putrs("Inserte mes:     ");
  1223  001300  0E34               	movlw	low STR_11
  1224  001302  6E09               	movwf	lcd_putrs@ptr,c
  1225  001304  0E0F               	movlw	high STR_11
  1226  001306  6E0A               	movwf	lcd_putrs@ptr+1,c
  1227  001308  EC0A  F012         	call	_lcd_putrs	;wreg free
  1228                           
  1229                           ;main.c: 162: lcd_gotoxy(1,2);
  1230  00130C  0E02               	movlw	2
  1231  00130E  6E05               	movwf	lcd_gotoxy@y,c
  1232  001310  0E01               	movlw	1
  1233  001312  EC77  F013         	call	_lcd_gotoxy
  1234                           
  1235                           ;main.c: 163: lcd_putrs("  ");
  1236  001316  0E7F               	movlw	low (STR_10+10)
  1237  001318  6E09               	movwf	lcd_putrs@ptr,c
  1238  00131A  0E0F               	movlw	high (STR_10+10)
  1239  00131C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1240  00131E  EC0A  F012         	call	_lcd_putrs	;wreg free
  1241                           
  1242                           ;main.c: 165: puntero_funcion = cambiar_mes;
  1243  001322  0E7A               	movlw	low _cambiar_mes
  1244  001324  6E4A               	movwf	main@puntero_funcion,c
  1245  001326  0E1D               	movlw	high _cambiar_mes
  1246  001328  D01E               	goto	L2
  1247  00132A                     l3359:
  1248  00132A  0E02               	movlw	2
  1249  00132C  1859               	xorwf	_tamanio_anio,w,c
  1250  00132E  105A               	iorwf	_tamanio_anio+1,w,c
  1251  001330  B4D8               	btfsc	status,2,c
  1252  001332  D01B               	goto	l3369
  1253                           
  1254                           ;main.c: 168: lcd_gotoxy(1,1);
  1255  001334  0E01               	movlw	1
  1256  001336  6E05               	movwf	lcd_gotoxy@y,c
  1257  001338  0E01               	movlw	1
  1258  00133A  EC77  F013         	call	_lcd_gotoxy
  1259                           
  1260                           ;main.c: 169: lcd_putrs("Inserte anio:     ");
  1261  00133E  0E0F               	movlw	low STR_13
  1262  001340  6E09               	movwf	lcd_putrs@ptr,c
  1263  001342  0E0F               	movlw	high STR_13
  1264  001344  6E0A               	movwf	lcd_putrs@ptr+1,c
  1265  001346  EC0A  F012         	call	_lcd_putrs	;wreg free
  1266                           
  1267                           ;main.c: 170: lcd_gotoxy(1,2);
  1268  00134A  0E02               	movlw	2
  1269  00134C  6E05               	movwf	lcd_gotoxy@y,c
  1270  00134E  0E01               	movlw	1
  1271  001350  EC77  F013         	call	_lcd_gotoxy
  1272                           
  1273                           ;main.c: 171: lcd_putrs("  ");
  1274  001354  0E7F               	movlw	low (STR_10+10)
  1275  001356  6E09               	movwf	lcd_putrs@ptr,c
  1276  001358  0E0F               	movlw	high (STR_10+10)
  1277  00135A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1278  00135C  EC0A  F012         	call	_lcd_putrs	;wreg free
  1279                           
  1280                           ;main.c: 173: puntero_funcion = cambiar_anio;
  1281  001360  0EC4               	movlw	low _cambiar_anio
  1282  001362  6E4A               	movwf	main@puntero_funcion,c
  1283  001364  0E1C               	movlw	high _cambiar_anio
  1284  001366                     L2:
  1285  001366  6E4B               	movwf	main@puntero_funcion+1,c
  1286  001368  D000               	goto	l3369
  1287  00136A                     l3369:
  1288                           
  1289                           ;main.c: 174: }
  1290                           ;main.c: 175: }
  1291                           ;main.c: 177: validar_comando("002",&validacion);
  1292  00136A  0EAB               	movlw	low STR_15
  1293  00136C  6E01               	movwf	validar_comando@candidato,c
  1294  00136E  0E0F               	movlw	high STR_15
  1295  001370  6E02               	movwf	validar_comando@candidato+1,c
  1296  001372  0E50               	movlw	low main@validacion
  1297  001374  6E03               	movwf	validar_comando@validar,c
  1298  001376  0E00               	movlw	high main@validacion
  1299  001378  6E04               	movwf	validar_comando@validar+1,c
  1300  00137A  EC89  F010         	call	_validar_comando	;wreg free
  1301                           
  1302                           ;main.c: 178: if(validacion){
  1303  00137E  5050               	movf	main@validacion,w,c
  1304  001380  1051               	iorwf	main@validacion+1,w,c
  1305  001382  B4D8               	btfsc	status,2,c
  1306  001384  D028               	goto	l3389
  1307                           
  1308                           ;main.c: 179: lcd_gotoxy(1,2);
  1309  001386  0E02               	movlw	2
  1310  001388  6E05               	movwf	lcd_gotoxy@y,c
  1311  00138A  0E01               	movlw	1
  1312  00138C  EC77  F013         	call	_lcd_gotoxy
  1313                           
  1314                           ;main.c: 180: lcd_putrs("cambiar pass");
  1315  001390  0E82               	movlw	low STR_16
  1316  001392  6E09               	movwf	lcd_putrs@ptr,c
  1317  001394  0E0F               	movlw	high STR_16
  1318  001396  6E0A               	movwf	lcd_putrs@ptr+1,c
  1319  001398  EC0A  F012         	call	_lcd_putrs	;wreg free
  1320                           
  1321                           ;main.c: 181: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1322  00139C  0E00               	movlw	0
  1323  00139E  6E4F               	movwf	main@i+1,c
  1324  0013A0  0E00               	movlw	0
  1325  0013A2  6E4E               	movwf	main@i,c
  1326  0013A4                     l3379:
  1327  0013A4  BE4F               	btfsc	main@i+1,7,c
  1328  0013A6  D008               	goto	l3383
  1329  0013A8  504F               	movf	main@i+1,w,c
  1330  0013AA  E112               	bnz	l3387
  1331  0013AC  0E0A               	movlw	10
  1332  0013AE  5C4E               	subwf	main@i,w,c
  1333  0013B0  B0D8               	btfsc	status,0,c
  1334  0013B2  D00E               	goto	l3387
  1335  0013B4  D001               	goto	l3383
  1336  0013B6  D00C               	goto	l3387
  1337  0013B8                     l3383:
  1338  0013B8  0EFF               	movlw	255
  1339  0013BA  6E49               	movwf	??_main& (0+255),c
  1340  0013BC  0E8A               	movlw	138
  1341  0013BE                     u2797:
  1342  0013BE  2EE8               	decfsz	wreg,f,c
  1343  0013C0  D7FE               	goto	u2797
  1344  0013C2  2E49               	decfsz	??_main& (0+255),f,c
  1345  0013C4  D7FC               	goto	u2797
  1346  0013C6  D000               	nop2	
  1347  0013C8  4A4E               	infsnz	main@i,f,c
  1348  0013CA  2A4F               	incf	main@i+1,f,c
  1349  0013CC  D7EB               	goto	l3379
  1350  0013CE  D000               	goto	l3387
  1351  0013D0                     l3387:
  1352                           
  1353                           ;main.c: 182: restaurar_comando();
  1354  0013D0  EC65  F013         	call	_restaurar_comando	;wreg free
  1355  0013D4  D000               	goto	l3389
  1356  0013D6                     l3389:
  1357                           
  1358                           ;main.c: 183: }
  1359                           ;main.c: 184: leer_teclado(!ocultar_teclas,puntero_funcion);
  1360  0013D6  504C               	movf	main@ocultar_teclas,w,c
  1361  0013D8  104D               	iorwf	main@ocultar_teclas+1,w,c
  1362  0013DA  A4D8               	btfss	status,2,c
  1363  0013DC  D002               	goto	u2760
  1364  0013DE  0E01               	movlw	1
  1365  0013E0  D001               	goto	u2770
  1366  0013E2                     u2760:
  1367  0013E2  0E00               	movlw	0
  1368  0013E4                     u2770:
  1369  0013E4  6E42               	movwf	leer_teclado@ocultar,c
  1370  0013E6  6A43               	clrf	leer_teclado@ocultar+1,c
  1371  0013E8  C04A  F044         	movff	main@puntero_funcion,leer_teclado@doit
  1372  0013EC  C04B  F045         	movff	main@puntero_funcion+1,leer_teclado@doit+1
  1373  0013F0  EC08  F00C         	call	_leer_teclado	;wreg free
  1374  0013F4  D720               	goto	l3319
  1375                           
  1376                           ;main.c: 185: }
  1377                           ;main.c: 186: }
  1378                           ;main.c: 187: return 0;
  1379                           ;	Return value of _main is never used
  1380  0013F6  EF00  F000         	goto	start
  1381  0013FA                     __end_of_main:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           postinc0	equ	0xFEE
  1388                           wreg	equ	0xFE8
  1389                           postdec1	equ	0xFE5
  1390                           fsr1l	equ	0xFE1
  1391                           status	equ	0xFD8
  1392                           
  1393 ;; *************** function _validar_comando *****************
  1394 ;; Defined at:
  1395 ;;		line 21 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1398 ;;		 -> STR_15(4), STR_8(4), STR_6(4), 
  1399 ;;  validar         2    2[COMRAM] PTR int 
  1400 ;;		 -> main@validacion(2), 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  i               2    7[COMRAM] int 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;		None               void
  1405 ;; Registers used:
  1406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1414 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1415 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1416 ;;Total ram usage:        9 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text1
  1426  002112                     __ptext1:
  1427                           	opt stack 0
  1428  002112                     _validar_comando:
  1429                           	opt stack 30
  1430                           
  1431                           ;teclado.c: 23: *validar=1;
  1432                           
  1433                           ;incstack = 0
  1434  002112  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1435  002116  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1436  00211A  0E01               	movlw	1
  1437  00211C  6EDE               	movwf	postinc2,c
  1438  00211E  0E00               	movlw	0
  1439  002120  6EDD               	movwf	postdec2,c
  1440                           
  1441                           ;teclado.c: 24: int i = 0;
  1442  002122  0E00               	movlw	0
  1443  002124  6E09               	movwf	validar_comando@i+1,c
  1444  002126  0E00               	movlw	0
  1445  002128  6E08               	movwf	validar_comando@i,c
  1446                           
  1447                           ;teclado.c: 25: while (i < 3){
  1448  00212A  D023               	goto	l3311
  1449  00212C                     l3305:
  1450                           
  1451                           ;teclado.c: 26: if (comando[i] != *(candidato+i))
  1452  00212C  0EBD               	movlw	low _comando
  1453  00212E  2408               	addwf	validar_comando@i,w,c
  1454  002130  6ED9               	movwf	fsr2l,c
  1455  002132  0E00               	movlw	high _comando
  1456  002134  2009               	addwfc	validar_comando@i+1,w,c
  1457  002136  6EDA               	movwf	fsr2h,c
  1458  002138  50DF               	movf	indf2,w,c
  1459  00213A  6E05               	movwf	??_validar_comando& (0+255),c
  1460  00213C  5008               	movf	validar_comando@i,w,c
  1461  00213E  2401               	addwf	validar_comando@candidato,w,c
  1462  002140  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1463  002142  5009               	movf	validar_comando@i+1,w,c
  1464  002144  2002               	addwfc	validar_comando@candidato+1,w,c
  1465  002146  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1466  002148  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1467  00214C  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1468  002150                     	if	0	;tblptru may be non-zero
  1469  002150                     	endif
  1470  002150                     	if	0	;tblptru may be non-zero
  1471  002150                     	endif
  1472  002150  0008               	tblrd		*
  1473  002152  50F5               	movf	tablat,w,c
  1474  002154  1805               	xorwf	??_validar_comando,w,c
  1475  002156  B4D8               	btfsc	status,2,c
  1476  002158  D009               	goto	l3309
  1477                           
  1478                           ;teclado.c: 27: *validar = 0;
  1479  00215A  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1480  00215E  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1481  002162  0E00               	movlw	0
  1482  002164  6EDE               	movwf	postinc2,c
  1483  002166  0E00               	movlw	0
  1484  002168  6EDD               	movwf	postdec2,c
  1485  00216A  D000               	goto	l3309
  1486  00216C                     l3309:
  1487                           
  1488                           ;teclado.c: 29: i++;
  1489  00216C  4A08               	infsnz	validar_comando@i,f,c
  1490  00216E  2A09               	incf	validar_comando@i+1,f,c
  1491  002170  D000               	goto	l3311
  1492  002172                     l3311:
  1493  002172  BE09               	btfsc	validar_comando@i+1,7,c
  1494  002174  D7DB               	goto	l3305
  1495  002176  5009               	movf	validar_comando@i+1,w,c
  1496  002178  E106               	bnz	l285
  1497  00217A  0E03               	movlw	3
  1498  00217C  5C08               	subwf	validar_comando@i,w,c
  1499  00217E  B0D8               	btfsc	status,0,c
  1500  002180  0012               	return	
  1501  002182  D7D4               	goto	l3305
  1502  002184  0012               	return	
  1503  002186                     l285:
  1504  002186  0012               	return		;funcret
  1505  002188                     __end_of_validar_comando:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec1	equ	0xFE5
  1514                           fsr1l	equ	0xFE1
  1515                           indf2	equ	0xFDF
  1516                           postinc2	equ	0xFDE
  1517                           postdec2	equ	0xFDD
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _leer_teclado *****************
  1523 ;; Defined at:
  1524 ;;		line 60 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  ocultar         2   65[COMRAM] int 
  1527 ;;  doit            2   67[COMRAM] PTR FTN()PTR unsigned ch
  1528 ;;		 -> cambiar_anio(0), cambiar_mes(0), cambiar_dia(0), ingresar_comando(2), 
  1529 ;;		 -> mostrar_guardar_password(2), 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  i               2   70[COMRAM] int 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;		None               void
  1534 ;; Registers used:
  1535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1544 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1545 ;;Total ram usage:        7 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    8
  1548 ;; This function calls:
  1549 ;;		_cambiar_anio
  1550 ;;		_cambiar_dia
  1551 ;;		_cambiar_mes
  1552 ;;		_guardar_tecla_presionada
  1553 ;;		_ingresar_comando
  1554 ;;		_lcd_putrs
  1555 ;;		_mostrar_guardar_password
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text2
  1562  001810                     __ptext2:
  1563                           	opt stack 0
  1564  001810                     _leer_teclado:
  1565                           	opt stack 22
  1566                           
  1567                           ;teclado.c: 61: int i;
  1568                           ;teclado.c: 62: ocultar_teclas = ocultar;
  1569                           
  1570                           ;incstack = 0
  1571  001810  C042  F090         	movff	leer_teclado@ocultar,_ocultar_teclas
  1572  001814  C043  F091         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1573                           
  1574                           ;teclado.c: 64: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  1575  001818  8089               	bsf	3977,0,c	;volatile
  1576  00181A  9289               	bcf	3977,1,c	;volatile
  1577  00181C  9489               	bcf	3977,2,c	;volatile
  1578  00181E  9689               	bcf	3977,3,c	;volatile
  1579  001820  0E00               	movlw	0
  1580  001822  6E48               	movwf	leer_teclado@i+1,c
  1581  001824  0E01               	movlw	1
  1582  001826  6E47               	movwf	leer_teclado@i,c
  1583                           
  1584                           ;teclado.c: 65: guardar_tecla_presionada("A",i,doit);
  1585  001828  0EB7               	movlw	low STR_20
  1586  00182A  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1587  00182C  0E0F               	movlw	high STR_20
  1588  00182E  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1589  001830  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1590  001834  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1591  001838  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1592  00183C  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1593  001840  EC69  F00F         	call	_guardar_tecla_presionada	;wreg free
  1594                           
  1595                           ;teclado.c: 67: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  1596  001844  9089               	bcf	3977,0,c	;volatile
  1597  001846  8289               	bsf	3977,1,c	;volatile
  1598  001848  9489               	bcf	3977,2,c	;volatile
  1599  00184A  9689               	bcf	3977,3,c	;volatile
  1600  00184C  0E00               	movlw	0
  1601  00184E  6E48               	movwf	leer_teclado@i+1,c
  1602  001850  0E04               	movlw	4
  1603  001852  6E47               	movwf	leer_teclado@i,c
  1604                           
  1605                           ;teclado.c: 68: guardar_tecla_presionada("B",i,doit);
  1606  001854  0EB9               	movlw	low STR_21
  1607  001856  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1608  001858  0E0F               	movlw	high STR_21
  1609  00185A  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1610  00185C  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1611  001860  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1612  001864  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1613  001868  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1614  00186C  EC69  F00F         	call	_guardar_tecla_presionada	;wreg free
  1615                           
  1616                           ;teclado.c: 70: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  1617  001870  9089               	bcf	3977,0,c	;volatile
  1618  001872  9289               	bcf	3977,1,c	;volatile
  1619  001874  8489               	bsf	3977,2,c	;volatile
  1620  001876  9689               	bcf	3977,3,c	;volatile
  1621  001878  0E00               	movlw	0
  1622  00187A  6E48               	movwf	leer_teclado@i+1,c
  1623  00187C  0E07               	movlw	7
  1624  00187E  6E47               	movwf	leer_teclado@i,c
  1625                           
  1626                           ;teclado.c: 71: guardar_tecla_presionada("C",i,doit);
  1627  001880  0EBB               	movlw	low STR_22
  1628  001882  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1629  001884  0E0F               	movlw	high STR_22
  1630  001886  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1631  001888  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1632  00188C  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1633  001890  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1634  001894  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1635  001898  EC69  F00F         	call	_guardar_tecla_presionada	;wreg free
  1636                           
  1637                           ;teclado.c: 73: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1638  00189C  9089               	bcf	3977,0,c	;volatile
  1639  00189E  9289               	bcf	3977,1,c	;volatile
  1640  0018A0  9489               	bcf	3977,2,c	;volatile
  1641  0018A2  8689               	bsf	3977,3,c	;volatile
  1642                           
  1643                           ;teclado.c: 74: {
  1644                           ;teclado.c: 75: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1645  0018A4  AA80               	btfss	3968,5,c	;volatile
  1646  0018A6  D00B               	goto	l315
  1647  0018A8  0E12               	movlw	18
  1648  0018AA  6E54               	movwf	_key,c
  1649  0018AC  0EB5               	movlw	low STR_19
  1650  0018AE  6E09               	movwf	lcd_putrs@ptr,c
  1651  0018B0  0E0F               	movlw	high STR_19
  1652  0018B2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1653  0018B4  EC0A  F012         	call	_lcd_putrs	;wreg free
  1654  0018B8  D000               	goto	l316
  1655  0018BA                     l316:
  1656  0018BA  BA80               	btfsc	3968,5,c	;volatile
  1657  0018BC  D7FE               	goto	l316
  1658  0018BE                     l315:
  1659                           
  1660                           ;teclado.c: 76: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};}
  1661  0018BE  AE80               	btfss	3968,7,c	;volatile
  1662  0018C0  D011               	goto	l319
  1663  0018C2  0E00               	movlw	0
  1664  0018C4  6E54               	movwf	_key,c
  1665  0018C6  D801               	call	u2598
  1666  0018C8  D00B               	goto	l320
  1667  0018CA                     u2598:
  1668  0018CA  0005               	push	
  1669  0018CC  6EFA               	movwf	pclath,c
  1670  0018CE  5044               	movf	leer_teclado@doit,w,c
  1671  0018D0  6EFD               	movwf	tosl,c
  1672  0018D2  5045               	movf	leer_teclado@doit+1,w,c
  1673  0018D4  6EFE               	movwf	tosh,c
  1674  0018D6  50F8               	movf	tblptru,w,c
  1675  0018D8  6EFF               	movwf	tosu,c
  1676  0018DA  50FA               	movf	pclath,w,c
  1677  0018DC  5054               	movf	_key,w,c
  1678  0018DE  0012               	return		;indir
  1679  0018E0                     l320:
  1680  0018E0  BE80               	btfsc	3968,7,c	;volatile
  1681  0018E2  D7FE               	goto	l320
  1682  0018E4                     l319:
  1683                           
  1684                           ;teclado.c: 77: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1685  0018E4  AC80               	btfss	3968,6,c	;volatile
  1686  0018E6  D00B               	goto	l323
  1687  0018E8  0E13               	movlw	19
  1688  0018EA  6E54               	movwf	_key,c
  1689  0018EC  0EB3               	movlw	low STR_24
  1690  0018EE  6E09               	movwf	lcd_putrs@ptr,c
  1691  0018F0  0E0F               	movlw	high STR_24
  1692  0018F2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1693  0018F4  EC0A  F012         	call	_lcd_putrs
  1694  0018F8  D000               	goto	l324
  1695  0018FA                     l324:
  1696  0018FA  BC80               	btfsc	3968,6,c	;volatile
  1697  0018FC  D7FE               	goto	l324
  1698  0018FE                     l323:
  1699                           
  1700                           ;teclado.c: 78: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1701  0018FE  A482               	btfss	3970,2,c	;volatile
  1702  001900  D00D               	goto	l3299
  1703  001902  0E44               	movlw	68
  1704  001904  6E54               	movwf	_key,c
  1705  001906  0EBD               	movlw	low STR_25
  1706  001908  6E09               	movwf	lcd_putrs@ptr,c
  1707  00190A  0E0F               	movlw	high STR_25
  1708  00190C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1709  00190E  EC0A  F012         	call	_lcd_putrs	;wreg free
  1710  001912  D000               	goto	l328
  1711  001914                     l328:
  1712  001914  A482               	btfss	3970,2,c	;volatile
  1713  001916  D002               	goto	l3299
  1714  001918  D7FD               	goto	l328
  1715  00191A  D000               	goto	l3299
  1716  00191C                     l3299:
  1717                           
  1718                           ;teclado.c: 79: }
  1719                           ;teclado.c: 80: _delay((unsigned long)((98)*(8000000/4000.0)));
  1720  00191C  0EFF               	movlw	255
  1721  00191E  6E46               	movwf	??_leer_teclado& (0+255),c
  1722  001920  0E8A               	movlw	138
  1723  001922                     u2807:
  1724  001922  2EE8               	decfsz	wreg,f,c
  1725  001924  D7FE               	goto	u2807
  1726  001926  2E46               	decfsz	??_leer_teclado& (0+255),f,c
  1727  001928  D7FC               	goto	u2807
  1728  00192A  D000               	nop2	
  1729  00192C  0012               	return		;funcret
  1730  00192E                     __end_of_leer_teclado:
  1731                           	opt stack 0
  1732                           tosu	equ	0xFFF
  1733                           tosh	equ	0xFFE
  1734                           tosl	equ	0xFFD
  1735                           pclath	equ	0xFFA
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           postinc2	equ	0xFDE
  1746                           postdec2	equ	0xFDD
  1747                           fsr2h	equ	0xFDA
  1748                           fsr2l	equ	0xFD9
  1749                           status	equ	0xFD8
  1750                           
  1751 ;; *************** function _guardar_tecla_presionada *****************
  1752 ;; Defined at:
  1753 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  letra           2   59[COMRAM] PTR unsigned char 
  1756 ;;		 -> STR_22(2), STR_21(2), STR_20(2), 
  1757 ;;  i               2   61[COMRAM] int 
  1758 ;;  doit            2   63[COMRAM] PTR FTN(PTR unsigned cha
  1759 ;;		 -> cambiar_anio(0), cambiar_mes(0), cambiar_dia(0), ingresar_comando(2), 
  1760 ;;		 -> mostrar_guardar_password(2), 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;		None               void
  1765 ;; Registers used:
  1766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1772 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1776 ;;Total ram usage:        6 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    7
  1779 ;; This function calls:
  1780 ;;		_cambiar_anio
  1781 ;;		_cambiar_dia
  1782 ;;		_cambiar_mes
  1783 ;;		_ingresar_comando
  1784 ;;		_lcd_putrs
  1785 ;;		_mostrar_guardar_password
  1786 ;; This function is called by:
  1787 ;;		_leer_teclado
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text3
  1792  001ED2                     __ptext3:
  1793                           	opt stack 0
  1794  001ED2                     _guardar_tecla_presionada:
  1795                           	opt stack 22
  1796                           
  1797                           ;teclado.c: 54: if (PORTAbits.RA5==1){key=i;doit(key);while(PORTAbits.RA5==1){};}
  1798                           
  1799                           ;incstack = 0
  1800  001ED2  AA80               	btfss	3968,5,c	;volatile
  1801  001ED4  D012               	goto	l296
  1802  001ED6  C03E  F054         	movff	guardar_tecla_presionada@i,_key
  1803  001EDA  C054  FFE8         	movff	_key,wreg
  1804  001EDE  D801               	call	u2378
  1805  001EE0  D00A               	goto	l297
  1806  001EE2                     u2378:
  1807  001EE2  0005               	push	
  1808  001EE4  6EFA               	movwf	pclath,c
  1809  001EE6  5040               	movf	guardar_tecla_presionada@doit,w,c
  1810  001EE8  6EFD               	movwf	tosl,c
  1811  001EEA  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  1812  001EEC  6EFE               	movwf	tosh,c
  1813  001EEE  50F8               	movf	tblptru,w,c
  1814  001EF0  6EFF               	movwf	tosu,c
  1815  001EF2  50FA               	movf	pclath,w,c
  1816  001EF4  0012               	return		;indir
  1817  001EF6                     l297:
  1818  001EF6  BA80               	btfsc	3968,5,c	;volatile
  1819  001EF8  D7FE               	goto	l297
  1820  001EFA                     l296:
  1821                           
  1822                           ;teclado.c: 55: if (PORTAbits.RA7==1){key=(i)+1;doit(key);while(PORTAbits.RA7==1){};}
  1823  001EFA  AE80               	btfss	3968,7,c	;volatile
  1824  001EFC  D012               	goto	l300
  1825  001EFE  283E               	incf	guardar_tecla_presionada@i,w,c
  1826  001F00  6E54               	movwf	_key,c
  1827  001F02  C054  FFE8         	movff	_key,wreg
  1828  001F06  D801               	call	u2408
  1829  001F08  D00A               	goto	l301
  1830  001F0A                     u2408:
  1831  001F0A  0005               	push	
  1832  001F0C  6EFA               	movwf	pclath,c
  1833  001F0E  5040               	movf	guardar_tecla_presionada@doit,w,c
  1834  001F10  6EFD               	movwf	tosl,c
  1835  001F12  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  1836  001F14  6EFE               	movwf	tosh,c
  1837  001F16  50F8               	movf	tblptru,w,c
  1838  001F18  6EFF               	movwf	tosu,c
  1839  001F1A  50FA               	movf	pclath,w,c
  1840  001F1C  0012               	return		;indir
  1841  001F1E                     l301:
  1842  001F1E  BE80               	btfsc	3968,7,c	;volatile
  1843  001F20  D7FE               	goto	l301
  1844  001F22                     l300:
  1845                           
  1846                           ;teclado.c: 56: if (PORTAbits.RA6==1){key=(i)+2;doit(key);while(PORTAbits.RA6==1){};}
  1847  001F22  AC80               	btfss	3968,6,c	;volatile
  1848  001F24  D013               	goto	l304
  1849  001F26  503E               	movf	guardar_tecla_presionada@i,w,c
  1850  001F28  0F02               	addlw	2
  1851  001F2A  6E54               	movwf	_key,c
  1852  001F2C  C054  FFE8         	movff	_key,wreg
  1853  001F30  D801               	call	u2438
  1854  001F32  D00A               	goto	l305
  1855  001F34                     u2438:
  1856  001F34  0005               	push	
  1857  001F36  6EFA               	movwf	pclath,c
  1858  001F38  5040               	movf	guardar_tecla_presionada@doit,w,c
  1859  001F3A  6EFD               	movwf	tosl,c
  1860  001F3C  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  1861  001F3E  6EFE               	movwf	tosh,c
  1862  001F40  50F8               	movf	tblptru,w,c
  1863  001F42  6EFF               	movwf	tosu,c
  1864  001F44  50FA               	movf	pclath,w,c
  1865  001F46  0012               	return		;indir
  1866  001F48                     l305:
  1867  001F48  BC80               	btfsc	3968,6,c	;volatile
  1868  001F4A  D7FE               	goto	l305
  1869  001F4C                     l304:
  1870                           
  1871                           ;teclado.c: 57: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbits.RC2==1
      +                          ){};}
  1872  001F4C  A482               	btfss	3970,2,c	;volatile
  1873  001F4E  0012               	return	
  1874  001F50  503E               	movf	guardar_tecla_presionada@i,w,c
  1875  001F52  0F0A               	addlw	10
  1876  001F54  6E54               	movwf	_key,c
  1877  001F56  C03C  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1878  001F5A  C03D  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1879  001F5E  EC0A  F012         	call	_lcd_putrs	;wreg free
  1880  001F62  D000               	goto	l309
  1881  001F64                     l309:
  1882  001F64  A482               	btfss	3970,2,c	;volatile
  1883  001F66  0012               	return	
  1884  001F68  D7FD               	goto	l309
  1885  001F6A  0012               	return	
  1886  001F6C  0012               	return		;funcret
  1887  001F6E                     __end_of_guardar_tecla_presionada:
  1888                           	opt stack 0
  1889                           tosu	equ	0xFFF
  1890                           tosh	equ	0xFFE
  1891                           tosl	equ	0xFFD
  1892                           pclath	equ	0xFFA
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           indf2	equ	0xFDF
  1902                           postinc2	equ	0xFDE
  1903                           postdec2	equ	0xFDD
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _ingresar_comando *****************
  1909 ;; Defined at:
  1910 ;;		line 116 in file "main.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  key             1    wreg     unsigned char 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  key             1   58[COMRAM] unsigned char 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2  176[None  ] int 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1925 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1927 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;Total ram usage:        1 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    3
  1931 ;; This function calls:
  1932 ;;		_guardar_comando
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;;		_guardar_tecla_presionada
  1936 ;;		_leer_teclado
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text4
  1941  0027AC                     __ptext4:
  1942                           	opt stack 0
  1943  0027AC                     _ingresar_comando:
  1944                           	opt stack 26
  1945                           
  1946                           ;incstack = 0
  1947                           ;ingresar_comando@key stored from wreg
  1948  0027AC  6E3B               	movwf	ingresar_comando@key,c
  1949                           
  1950                           ;main.c: 117: guardar_comando(key);
  1951  0027AE  503B               	movf	ingresar_comando@key,w,c
  1952  0027B0  EC39  F011         	call	_guardar_comando
  1953  0027B4  0012               	return		;funcret
  1954  0027B6                     __end_of_ingresar_comando:
  1955                           	opt stack 0
  1956                           tosu	equ	0xFFF
  1957                           tosh	equ	0xFFE
  1958                           tosl	equ	0xFFD
  1959                           pclath	equ	0xFFA
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           indf2	equ	0xFDF
  1969                           postinc2	equ	0xFDE
  1970                           postdec2	equ	0xFDD
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _cambiar_anio *****************
  1976 ;; Defined at:
  1977 ;;		line 69 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  tecla           1    wreg     unsigned char 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  tecla           1   43[COMRAM] unsigned char 
  1982 ;;  i               2   44[COMRAM] int 
  1983 ;;  valor           2   46[COMRAM] int 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;		None               void
  1986 ;; Registers used:
  1987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1994 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1996 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1997 ;;Total ram usage:        6 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    5
  2000 ;; This function calls:
  2001 ;;		_Write_RTC
  2002 ;;		_convertir_a_int
  2003 ;;		_guardar_elemento
  2004 ;;		_inicializar
  2005 ;;		_lcd_gotoxy
  2006 ;;		_lcd_putrs
  2007 ;;		_restaurar_comando
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;;		_cambiar_fecha
  2011 ;;		_guardar_tecla_presionada
  2012 ;;		_leer_teclado
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text5
  2017  001CC4                     __ptext5:
  2018                           	opt stack 0
  2019  001CC4                     _cambiar_anio:
  2020                           	opt stack 23
  2021                           
  2022                           ;incstack = 0
  2023                           ;cambiar_anio@tecla stored from wreg
  2024  001CC4  6E2C               	movwf	cambiar_anio@tecla,c
  2025                           
  2026                           ;fecha.c: 70: int valor = 0;
  2027  001CC6  0E00               	movlw	0
  2028  001CC8  6E30               	movwf	cambiar_anio@valor+1,c
  2029  001CCA  0E00               	movlw	0
  2030  001CCC  6E2F               	movwf	cambiar_anio@valor,c
  2031                           
  2032                           ;fecha.c: 72: if (tamanio_anio < 3 - 1){
  2033  001CCE  BE5A               	btfsc	_tamanio_anio+1,7,c
  2034  001CD0  D006               	goto	l2971
  2035  001CD2  505A               	movf	_tamanio_anio+1,w,c
  2036  001CD4  E11B               	bnz	l2977
  2037  001CD6  0E02               	movlw	2
  2038  001CD8  5C59               	subwf	_tamanio_anio,w,c
  2039  001CDA  B0D8               	btfsc	status,0,c
  2040  001CDC  D017               	goto	l2977
  2041  001CDE                     l2971:
  2042                           
  2043                           ;fecha.c: 73: guardar_elemento(tecla,year,&tamanio_anio);
  2044  001CDE  0EB4               	movlw	low _year
  2045  001CE0  6E24               	movwf	guardar_elemento@array,c
  2046  001CE2  0E00               	movlw	high _year
  2047  001CE4  6E25               	movwf	guardar_elemento@array+1,c
  2048  001CE6  0E59               	movlw	low _tamanio_anio
  2049  001CE8  6E26               	movwf	guardar_elemento@tamanio_array,c
  2050  001CEA  0E00               	movlw	high _tamanio_anio
  2051  001CEC  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2052  001CEE  502C               	movf	cambiar_anio@tecla,w,c
  2053  001CF0  ECFF  F010         	call	_guardar_elemento
  2054                           
  2055                           ;fecha.c: 74: lcd_gotoxy(1,2);
  2056  001CF4  0E02               	movlw	2
  2057  001CF6  6E05               	movwf	lcd_gotoxy@y,c
  2058  001CF8  0E01               	movlw	1
  2059  001CFA  EC77  F013         	call	_lcd_gotoxy
  2060                           
  2061                           ;fecha.c: 75: lcd_putrs(year);
  2062  001CFE  0EB4               	movlw	low _year
  2063  001D00  6E09               	movwf	lcd_putrs@ptr,c
  2064  001D02  0E00               	movlw	high _year
  2065  001D04  6E0A               	movwf	lcd_putrs@ptr+1,c
  2066  001D06  EC0A  F012         	call	_lcd_putrs	;wreg free
  2067  001D0A  D000               	goto	l2977
  2068  001D0C                     l2977:
  2069                           
  2070                           ;fecha.c: 76: }
  2071                           ;fecha.c: 78: if (tamanio_anio >= 3 - 1){
  2072  001D0C  BE5A               	btfsc	_tamanio_anio+1,7,c
  2073  001D0E  0012               	return	
  2074  001D10  505A               	movf	_tamanio_anio+1,w,c
  2075  001D12  E104               	bnz	u2260
  2076  001D14  0E02               	movlw	2
  2077  001D16  5C59               	subwf	_tamanio_anio,w,c
  2078  001D18  A0D8               	btfss	status,0,c
  2079  001D1A  0012               	return	
  2080  001D1C                     u2260:
  2081                           
  2082                           ;fecha.c: 80: convertir_a_int(year,&valor);
  2083  001D1C  0EB4               	movlw	low _year
  2084  001D1E  6E0E               	movwf	convertir_a_int@array,c
  2085  001D20  0E00               	movlw	high _year
  2086  001D22  6E0F               	movwf	convertir_a_int@array+1,c
  2087  001D24  0E2F               	movlw	low cambiar_anio@valor
  2088  001D26  6E10               	movwf	convertir_a_int@valor,c
  2089  001D28  0E00               	movlw	high cambiar_anio@valor
  2090  001D2A  6E11               	movwf	convertir_a_int@valor+1,c
  2091  001D2C  EC9A  F013         	call	_convertir_a_int	;wreg free
  2092                           
  2093                           ;fecha.c: 81: anio = valor;
  2094  001D30  C02F  F0C1         	movff	cambiar_anio@valor,_anio
  2095  001D34  C030  F0C2         	movff	cambiar_anio@valor+1,_anio+1
  2096                           
  2097                           ;fecha.c: 82: Write_RTC();
  2098  001D38  ECFD  F009         	call	_Write_RTC	;wreg free
  2099                           
  2100                           ;fecha.c: 84: restaurar_comando();
  2101  001D3C  EC65  F013         	call	_restaurar_comando	;wreg free
  2102                           
  2103                           ;fecha.c: 85: inicializar();
  2104  001D40  EC3B  F013         	call	_inicializar	;wreg free
  2105                           
  2106                           ;fecha.c: 86: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2107  001D44  0E00               	movlw	0
  2108  001D46  6E2E               	movwf	cambiar_anio@i+1,c
  2109  001D48  0E00               	movlw	0
  2110  001D4A  6E2D               	movwf	cambiar_anio@i,c
  2111  001D4C                     l2989:
  2112  001D4C  BE2E               	btfsc	cambiar_anio@i+1,7,c
  2113  001D4E  D008               	goto	l2993
  2114  001D50  502E               	movf	cambiar_anio@i+1,w,c
  2115  001D52  E112               	bnz	l484
  2116  001D54  0E04               	movlw	4
  2117  001D56  5C2D               	subwf	cambiar_anio@i,w,c
  2118  001D58  B0D8               	btfsc	status,0,c
  2119  001D5A  0012               	return	
  2120  001D5C  D001               	goto	l2993
  2121  001D5E  0012               	return	
  2122  001D60                     l2993:
  2123  001D60  0EFF               	movlw	255
  2124  001D62  6E2B               	movwf	??_cambiar_anio& (0+255),c
  2125  001D64  0E8A               	movlw	138
  2126  001D66                     u2817:
  2127  001D66  2EE8               	decfsz	wreg,f,c
  2128  001D68  D7FE               	goto	u2817
  2129  001D6A  2E2B               	decfsz	??_cambiar_anio& (0+255),f,c
  2130  001D6C  D7FC               	goto	u2817
  2131  001D6E  D000               	nop2	
  2132  001D70  4A2D               	infsnz	cambiar_anio@i,f,c
  2133  001D72  2A2E               	incf	cambiar_anio@i+1,f,c
  2134  001D74  D7EB               	goto	l2989
  2135  001D76  0012               	return	
  2136  001D78                     l484:
  2137  001D78  0012               	return		;funcret
  2138  001D7A                     __end_of_cambiar_anio:
  2139                           	opt stack 0
  2140                           tosu	equ	0xFFF
  2141                           tosh	equ	0xFFE
  2142                           tosl	equ	0xFFD
  2143                           pclath	equ	0xFFA
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1l	equ	0xFE1
  2152                           indf2	equ	0xFDF
  2153                           postinc2	equ	0xFDE
  2154                           postdec2	equ	0xFDD
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _cambiar_mes *****************
  2160 ;; Defined at:
  2161 ;;		line 50 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  tecla           1    wreg     unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  tecla           1   43[COMRAM] unsigned char 
  2166 ;;  i               2   44[COMRAM] int 
  2167 ;;  valor           2   46[COMRAM] int 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2178 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2180 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2181 ;;Total ram usage:        6 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    5
  2184 ;; This function calls:
  2185 ;;		_Write_RTC
  2186 ;;		_convertir_a_int
  2187 ;;		_guardar_elemento
  2188 ;;		_lcd_gotoxy
  2189 ;;		_lcd_putrs
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;;		_cambiar_fecha
  2193 ;;		_guardar_tecla_presionada
  2194 ;;		_leer_teclado
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text6
  2199  001D7A                     __ptext6:
  2200                           	opt stack 0
  2201  001D7A                     _cambiar_mes:
  2202                           	opt stack 23
  2203                           
  2204                           ;incstack = 0
  2205                           ;cambiar_mes@tecla stored from wreg
  2206  001D7A  6E2C               	movwf	cambiar_mes@tecla,c
  2207                           
  2208                           ;fecha.c: 52: int valor = 0;
  2209  001D7C  0E00               	movlw	0
  2210  001D7E  6E30               	movwf	cambiar_mes@valor+1,c
  2211  001D80  0E00               	movlw	0
  2212  001D82  6E2F               	movwf	cambiar_mes@valor,c
  2213                           
  2214                           ;fecha.c: 54: if (tamanio_mes < 3 - 1 && tamanio_anio == 0){
  2215  001D84  BE5E               	btfsc	_tamanio_mes+1,7,c
  2216  001D86  D006               	goto	l2943
  2217  001D88  505E               	movf	_tamanio_mes+1,w,c
  2218  001D8A  E11F               	bnz	l2951
  2219  001D8C  0E02               	movlw	2
  2220  001D8E  5C5D               	subwf	_tamanio_mes,w,c
  2221  001D90  B0D8               	btfsc	status,0,c
  2222  001D92  D01B               	goto	l2951
  2223  001D94                     l2943:
  2224  001D94  5059               	movf	_tamanio_anio,w,c
  2225  001D96  105A               	iorwf	_tamanio_anio+1,w,c
  2226  001D98  A4D8               	btfss	status,2,c
  2227  001D9A  D017               	goto	l2951
  2228                           
  2229                           ;fecha.c: 55: guardar_elemento(tecla,month,&tamanio_mes);
  2230  001D9C  0EB1               	movlw	low _month
  2231  001D9E  6E24               	movwf	guardar_elemento@array,c
  2232  001DA0  0E00               	movlw	high _month
  2233  001DA2  6E25               	movwf	guardar_elemento@array+1,c
  2234  001DA4  0E5D               	movlw	low _tamanio_mes
  2235  001DA6  6E26               	movwf	guardar_elemento@tamanio_array,c
  2236  001DA8  0E00               	movlw	high _tamanio_mes
  2237  001DAA  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2238  001DAC  502C               	movf	cambiar_mes@tecla,w,c
  2239  001DAE  ECFF  F010         	call	_guardar_elemento
  2240                           
  2241                           ;fecha.c: 56: lcd_gotoxy(1,2);
  2242  001DB2  0E02               	movlw	2
  2243  001DB4  6E05               	movwf	lcd_gotoxy@y,c
  2244  001DB6  0E01               	movlw	1
  2245  001DB8  EC77  F013         	call	_lcd_gotoxy
  2246                           
  2247                           ;fecha.c: 57: lcd_putrs(month);
  2248  001DBC  0EB1               	movlw	low _month
  2249  001DBE  6E09               	movwf	lcd_putrs@ptr,c
  2250  001DC0  0E00               	movlw	high _month
  2251  001DC2  6E0A               	movwf	lcd_putrs@ptr+1,c
  2252  001DC4  EC0A  F012         	call	_lcd_putrs	;wreg free
  2253  001DC8  D000               	goto	l2951
  2254  001DCA                     l2951:
  2255                           
  2256                           ;fecha.c: 58: }
  2257                           ;fecha.c: 60: if (tamanio_mes >= 3 - 1){
  2258  001DCA  BE5E               	btfsc	_tamanio_mes+1,7,c
  2259  001DCC  0012               	return	
  2260  001DCE  505E               	movf	_tamanio_mes+1,w,c
  2261  001DD0  E104               	bnz	u2220
  2262  001DD2  0E02               	movlw	2
  2263  001DD4  5C5D               	subwf	_tamanio_mes,w,c
  2264  001DD6  A0D8               	btfss	status,0,c
  2265  001DD8  0012               	return	
  2266  001DDA                     u2220:
  2267                           
  2268                           ;fecha.c: 62: convertir_a_int(month,&valor);
  2269  001DDA  0EB1               	movlw	low _month
  2270  001DDC  6E0E               	movwf	convertir_a_int@array,c
  2271  001DDE  0E00               	movlw	high _month
  2272  001DE0  6E0F               	movwf	convertir_a_int@array+1,c
  2273  001DE2  0E2F               	movlw	low cambiar_mes@valor
  2274  001DE4  6E10               	movwf	convertir_a_int@valor,c
  2275  001DE6  0E00               	movlw	high cambiar_mes@valor
  2276  001DE8  6E11               	movwf	convertir_a_int@valor+1,c
  2277  001DEA  EC9A  F013         	call	_convertir_a_int	;wreg free
  2278                           
  2279                           ;fecha.c: 63: mes = valor;
  2280  001DEE  C02F  F0C9         	movff	cambiar_mes@valor,_mes
  2281  001DF2  C030  F0CA         	movff	cambiar_mes@valor+1,_mes+1
  2282                           
  2283                           ;fecha.c: 64: Write_RTC();
  2284  001DF6  ECFD  F009         	call	_Write_RTC	;wreg free
  2285                           
  2286                           ;fecha.c: 65: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2287  001DFA  0E00               	movlw	0
  2288  001DFC  6E2E               	movwf	cambiar_mes@i+1,c
  2289  001DFE  0E00               	movlw	0
  2290  001E00  6E2D               	movwf	cambiar_mes@i,c
  2291  001E02                     l2959:
  2292  001E02  BE2E               	btfsc	cambiar_mes@i+1,7,c
  2293  001E04  D008               	goto	l2963
  2294  001E06  502E               	movf	cambiar_mes@i+1,w,c
  2295  001E08  E112               	bnz	l477
  2296  001E0A  0E04               	movlw	4
  2297  001E0C  5C2D               	subwf	cambiar_mes@i,w,c
  2298  001E0E  B0D8               	btfsc	status,0,c
  2299  001E10  0012               	return	
  2300  001E12  D001               	goto	l2963
  2301  001E14  0012               	return	
  2302  001E16                     l2963:
  2303  001E16  0EFF               	movlw	255
  2304  001E18  6E2B               	movwf	??_cambiar_mes& (0+255),c
  2305  001E1A  0E8A               	movlw	138
  2306  001E1C                     u2827:
  2307  001E1C  2EE8               	decfsz	wreg,f,c
  2308  001E1E  D7FE               	goto	u2827
  2309  001E20  2E2B               	decfsz	??_cambiar_mes& (0+255),f,c
  2310  001E22  D7FC               	goto	u2827
  2311  001E24  D000               	nop2	
  2312  001E26  4A2D               	infsnz	cambiar_mes@i,f,c
  2313  001E28  2A2E               	incf	cambiar_mes@i+1,f,c
  2314  001E2A  D7EB               	goto	l2959
  2315  001E2C  0012               	return	
  2316  001E2E                     l477:
  2317  001E2E  0012               	return		;funcret
  2318  001E30                     __end_of_cambiar_mes:
  2319                           	opt stack 0
  2320                           tosu	equ	0xFFF
  2321                           tosh	equ	0xFFE
  2322                           tosl	equ	0xFFD
  2323                           pclath	equ	0xFFA
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           postinc0	equ	0xFEE
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _cambiar_dia *****************
  2340 ;; Defined at:
  2341 ;;		line 31 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  tecla           1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  tecla           1   43[COMRAM] unsigned char 
  2346 ;;  i               2   44[COMRAM] int 
  2347 ;;  valor           2   46[COMRAM] int 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2358 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2360 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2361 ;;Total ram usage:        6 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		_Write_RTC
  2366 ;;		_convertir_a_int
  2367 ;;		_guardar_elemento
  2368 ;;		_lcd_gotoxy
  2369 ;;		_lcd_putrs
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;;		_cambiar_fecha
  2373 ;;		_guardar_tecla_presionada
  2374 ;;		_leer_teclado
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text7
  2379  001C06                     __ptext7:
  2380                           	opt stack 0
  2381  001C06                     _cambiar_dia:
  2382                           	opt stack 23
  2383                           
  2384                           ;incstack = 0
  2385                           ;cambiar_dia@tecla stored from wreg
  2386  001C06  6E2C               	movwf	cambiar_dia@tecla,c
  2387                           
  2388                           ;fecha.c: 32: int valor = 0;
  2389  001C08  0E00               	movlw	0
  2390  001C0A  6E30               	movwf	cambiar_dia@valor+1,c
  2391  001C0C  0E00               	movlw	0
  2392  001C0E  6E2F               	movwf	cambiar_dia@valor,c
  2393                           
  2394                           ;fecha.c: 34: if (tamanio_dia < 3 - 1 && tamanio_mes == 0 && tamanio_anio == 0){
  2395  001C10  BE5C               	btfsc	_tamanio_dia+1,7,c
  2396  001C12  D006               	goto	l2913
  2397  001C14  505C               	movf	_tamanio_dia+1,w,c
  2398  001C16  E123               	bnz	l2923
  2399  001C18  0E02               	movlw	2
  2400  001C1A  5C5B               	subwf	_tamanio_dia,w,c
  2401  001C1C  B0D8               	btfsc	status,0,c
  2402  001C1E  D01F               	goto	l2923
  2403  001C20                     l2913:
  2404  001C20  505D               	movf	_tamanio_mes,w,c
  2405  001C22  105E               	iorwf	_tamanio_mes+1,w,c
  2406  001C24  A4D8               	btfss	status,2,c
  2407  001C26  D01B               	goto	l2923
  2408  001C28  5059               	movf	_tamanio_anio,w,c
  2409  001C2A  105A               	iorwf	_tamanio_anio+1,w,c
  2410  001C2C  A4D8               	btfss	status,2,c
  2411  001C2E  D017               	goto	l2923
  2412                           
  2413                           ;fecha.c: 35: guardar_elemento(tecla,day,&tamanio_dia);
  2414  001C30  0EAE               	movlw	low _day
  2415  001C32  6E24               	movwf	guardar_elemento@array,c
  2416  001C34  0E00               	movlw	high _day
  2417  001C36  6E25               	movwf	guardar_elemento@array+1,c
  2418  001C38  0E5B               	movlw	low _tamanio_dia
  2419  001C3A  6E26               	movwf	guardar_elemento@tamanio_array,c
  2420  001C3C  0E00               	movlw	high _tamanio_dia
  2421  001C3E  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2422  001C40  502C               	movf	cambiar_dia@tecla,w,c
  2423  001C42  ECFF  F010         	call	_guardar_elemento
  2424                           
  2425                           ;fecha.c: 36: lcd_gotoxy(1,2);
  2426  001C46  0E02               	movlw	2
  2427  001C48  6E05               	movwf	lcd_gotoxy@y,c
  2428  001C4A  0E01               	movlw	1
  2429  001C4C  EC77  F013         	call	_lcd_gotoxy
  2430                           
  2431                           ;fecha.c: 37: lcd_putrs(day);
  2432  001C50  0EAE               	movlw	low _day
  2433  001C52  6E09               	movwf	lcd_putrs@ptr,c
  2434  001C54  0E00               	movlw	high _day
  2435  001C56  6E0A               	movwf	lcd_putrs@ptr+1,c
  2436  001C58  EC0A  F012         	call	_lcd_putrs	;wreg free
  2437  001C5C  D000               	goto	l2923
  2438  001C5E                     l2923:
  2439                           
  2440                           ;fecha.c: 38: }
  2441                           ;fecha.c: 40: if (tamanio_dia >= 3 - 1){
  2442  001C5E  BE5C               	btfsc	_tamanio_dia+1,7,c
  2443  001C60  0012               	return	
  2444  001C62  505C               	movf	_tamanio_dia+1,w,c
  2445  001C64  E104               	bnz	u2170
  2446  001C66  0E02               	movlw	2
  2447  001C68  5C5B               	subwf	_tamanio_dia,w,c
  2448  001C6A  A0D8               	btfss	status,0,c
  2449  001C6C  0012               	return	
  2450  001C6E                     u2170:
  2451                           
  2452                           ;fecha.c: 41: convertir_a_int(day,&valor);
  2453  001C6E  0EAE               	movlw	low _day
  2454  001C70  6E0E               	movwf	convertir_a_int@array,c
  2455  001C72  0E00               	movlw	high _day
  2456  001C74  6E0F               	movwf	convertir_a_int@array+1,c
  2457  001C76  0E2F               	movlw	low cambiar_dia@valor
  2458  001C78  6E10               	movwf	convertir_a_int@valor,c
  2459  001C7A  0E00               	movlw	high cambiar_dia@valor
  2460  001C7C  6E11               	movwf	convertir_a_int@valor+1,c
  2461  001C7E  EC9A  F013         	call	_convertir_a_int	;wreg free
  2462                           
  2463                           ;fecha.c: 42: dia = valor;
  2464  001C82  C02F  F0C3         	movff	cambiar_dia@valor,_dia
  2465  001C86  C030  F0C4         	movff	cambiar_dia@valor+1,_dia+1
  2466                           
  2467                           ;fecha.c: 43: Write_RTC();
  2468  001C8A  ECFD  F009         	call	_Write_RTC	;wreg free
  2469                           
  2470                           ;fecha.c: 45: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2471  001C8E  0E00               	movlw	0
  2472  001C90  6E2E               	movwf	cambiar_dia@i+1,c
  2473  001C92  0E00               	movlw	0
  2474  001C94  6E2D               	movwf	cambiar_dia@i,c
  2475  001C96                     l2931:
  2476  001C96  BE2E               	btfsc	cambiar_dia@i+1,7,c
  2477  001C98  D008               	goto	l2935
  2478  001C9A  502E               	movf	cambiar_dia@i+1,w,c
  2479  001C9C  E112               	bnz	l470
  2480  001C9E  0E04               	movlw	4
  2481  001CA0  5C2D               	subwf	cambiar_dia@i,w,c
  2482  001CA2  B0D8               	btfsc	status,0,c
  2483  001CA4  0012               	return	
  2484  001CA6  D001               	goto	l2935
  2485  001CA8  0012               	return	
  2486  001CAA                     l2935:
  2487  001CAA  0EFF               	movlw	255
  2488  001CAC  6E2B               	movwf	??_cambiar_dia& (0+255),c
  2489  001CAE  0E8A               	movlw	138
  2490  001CB0                     u2837:
  2491  001CB0  2EE8               	decfsz	wreg,f,c
  2492  001CB2  D7FE               	goto	u2837
  2493  001CB4  2E2B               	decfsz	??_cambiar_dia& (0+255),f,c
  2494  001CB6  D7FC               	goto	u2837
  2495  001CB8  D000               	nop2	
  2496  001CBA  4A2D               	infsnz	cambiar_dia@i,f,c
  2497  001CBC  2A2E               	incf	cambiar_dia@i+1,f,c
  2498  001CBE  D7EB               	goto	l2931
  2499  001CC0  0012               	return	
  2500  001CC2                     l470:
  2501  001CC2  0012               	return		;funcret
  2502  001CC4                     __end_of_cambiar_dia:
  2503                           	opt stack 0
  2504                           tosu	equ	0xFFF
  2505                           tosh	equ	0xFFE
  2506                           tosl	equ	0xFFD
  2507                           pclath	equ	0xFFA
  2508                           tblptru	equ	0xFF8
  2509                           tblptrh	equ	0xFF7
  2510                           tblptrl	equ	0xFF6
  2511                           tablat	equ	0xFF5
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           postdec1	equ	0xFE5
  2515                           fsr1l	equ	0xFE1
  2516                           indf2	equ	0xFDF
  2517                           postinc2	equ	0xFDE
  2518                           postdec2	equ	0xFDD
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8
  2522                           
  2523 ;; *************** function _mostrar_guardar_password *****************
  2524 ;; Defined at:
  2525 ;;		line 108 in file "main.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  tecla           1    wreg     unsigned char 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  tecla           1   56[COMRAM] unsigned char 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  2  173[None  ] int 
  2532 ;; Registers used:
  2533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2543 ;;Total ram usage:        1 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    6
  2546 ;; This function calls:
  2547 ;;		_guardar_current_password
  2548 ;;		_imprimir_tecla
  2549 ;;		_sprintf
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;;		_guardar_tecla_presionada
  2553 ;;		_leer_teclado
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           	psect	text8
  2558  00264A                     __ptext8:
  2559                           	opt stack 0
  2560  00264A                     _mostrar_guardar_password:
  2561                           	opt stack 23
  2562                           
  2563                           ;incstack = 0
  2564                           ;mostrar_guardar_password@tecla stored from wreg
  2565  00264A  6E39               	movwf	mostrar_guardar_password@tecla,c
  2566                           
  2567                           ;main.c: 110: imprimir_tecla(tecla);
  2568  00264C  5039               	movf	mostrar_guardar_password@tecla,w,c
  2569  00264E  ECA4  F012         	call	_imprimir_tecla
  2570                           
  2571                           ;main.c: 111: sprintf(buffer2,"%01u",tecla);
  2572  002652  0E96               	movlw	low _buffer2
  2573  002654  6E0D               	movwf	sprintf@sp,c
  2574  002656  0E00               	movlw	high _buffer2
  2575  002658  6E0E               	movwf	sprintf@sp+1,c
  2576  00265A  0EA2               	movlw	low STR_5
  2577  00265C  6E0F               	movwf	sprintf@f,c
  2578  00265E  0E0F               	movlw	high STR_5
  2579  002660  6E10               	movwf	sprintf@f+1,c
  2580  002662  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2581  002666  6A12               	clrf	?_sprintf+5,c
  2582  002668  ECE0  F007         	call	_sprintf	;wreg free
  2583                           
  2584                           ;main.c: 112: guardar_current_password(*buffer2);
  2585  00266C  0100               	movlb	0	; () banked
  2586  00266E  5196               	movf	_buffer2& (0+255),w,b
  2587  002670  ECC7  F012         	call	_guardar_current_password
  2588  002674  0012               	return		;funcret
  2589  002676                     __end_of_mostrar_guardar_password:
  2590                           	opt stack 0
  2591                           tosu	equ	0xFFF
  2592                           tosh	equ	0xFFE
  2593                           tosl	equ	0xFFD
  2594                           pclath	equ	0xFFA
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           postinc0	equ	0xFEE
  2600                           wreg	equ	0xFE8
  2601                           postdec1	equ	0xFE5
  2602                           fsr1l	equ	0xFE1
  2603                           indf2	equ	0xFDF
  2604                           postinc2	equ	0xFDE
  2605                           postdec2	equ	0xFDD
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _imprimir_tecla *****************
  2611 ;; Defined at:
  2612 ;;		line 33 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  tecla           1    wreg     unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  tecla           1   55[COMRAM] unsigned char 
  2617 ;;  aux            20   35[COMRAM] unsigned char [20]
  2618 ;; Return value:  Size  Location     Type
  2619 ;;		None               void
  2620 ;; Registers used:
  2621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2628 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2630 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2631 ;;Total ram usage:       21 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    5
  2634 ;; This function calls:
  2635 ;;		_lcd_putrs
  2636 ;;		_sprintf
  2637 ;; This function is called by:
  2638 ;;		_mostrar_guardar_password
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text9
  2643  002548                     __ptext9:
  2644                           	opt stack 0
  2645  002548                     _imprimir_tecla:
  2646                           	opt stack 23
  2647                           
  2648                           ;incstack = 0
  2649                           ;imprimir_tecla@tecla stored from wreg
  2650  002548  6E38               	movwf	imprimir_tecla@tecla,c
  2651                           
  2652                           ;teclado.c: 35: unsigned char aux[20];
  2653                           ;teclado.c: 36: sprintf(aux,"%01u",tecla);
  2654  00254A  0E24               	movlw	low imprimir_tecla@aux
  2655  00254C  6E0D               	movwf	sprintf@sp,c
  2656  00254E  0E00               	movlw	high imprimir_tecla@aux
  2657  002550  6E0E               	movwf	sprintf@sp+1,c
  2658  002552  0EA2               	movlw	low STR_5
  2659  002554  6E0F               	movwf	sprintf@f,c
  2660  002556  0E0F               	movlw	high STR_5
  2661  002558  6E10               	movwf	sprintf@f+1,c
  2662  00255A  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  2663  00255E  6A12               	clrf	?_sprintf+5,c
  2664  002560  ECE0  F007         	call	_sprintf	;wreg free
  2665                           
  2666                           ;teclado.c: 37: if (ocultar_teclas == 1){
  2667  002564  0100               	movlb	0	; () banked
  2668  002566  0590               	decf	_ocultar_teclas& (0+255),w,b
  2669  002568  0100               	movlb	0	; () banked
  2670  00256A  1191               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  2671  00256C  A4D8               	btfss	status,2,c
  2672  00256E  D007               	goto	l2867
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;teclado.c: 38: lcd_putrs("*");
  2676  002570  0EB5               	movlw	low STR_19
  2677  002572  6E09               	movwf	lcd_putrs@ptr,c
  2678  002574  0E0F               	movlw	high STR_19
  2679  002576  6E0A               	movwf	lcd_putrs@ptr+1,c
  2680  002578  EC0A  F012         	call	_lcd_putrs	;wreg free
  2681                           
  2682                           ;teclado.c: 39: }else{
  2683  00257C  0012               	return	
  2684  00257E                     l2867:
  2685                           
  2686                           ;teclado.c: 40: lcd_putrs(aux);
  2687  00257E  0E24               	movlw	low imprimir_tecla@aux
  2688  002580  6E09               	movwf	lcd_putrs@ptr,c
  2689  002582  0E00               	movlw	high imprimir_tecla@aux
  2690  002584  6E0A               	movwf	lcd_putrs@ptr+1,c
  2691  002586  EC0A  F012         	call	_lcd_putrs	;wreg free
  2692  00258A  0012               	return	
  2693  00258C  0012               	return		;funcret
  2694  00258E                     __end_of_imprimir_tecla:
  2695                           	opt stack 0
  2696                           tosu	equ	0xFFF
  2697                           tosh	equ	0xFFE
  2698                           tosl	equ	0xFFD
  2699                           pclath	equ	0xFFA
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1l	equ	0xFE1
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _guardar_current_password *****************
  2716 ;; Defined at:
  2717 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/password.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  valor           1    wreg     unsigned char 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  valor           1    2[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;		None               void
  2724 ;; Registers used:
  2725 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2734 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2735 ;;Total ram usage:        3 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_mostrar_guardar_password
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text10
  2745  00258E                     __ptext10:
  2746                           	opt stack 0
  2747  00258E                     _guardar_current_password:
  2748                           	opt stack 28
  2749                           
  2750                           ;incstack = 0
  2751                           ;guardar_current_password@valor stored from wreg
  2752  00258E  6E03               	movwf	guardar_current_password@valor,c
  2753                           
  2754                           ;password.c: 6: if (tamanio_password < 6){
  2755  002590  BE53               	btfsc	_tamanio_password+1,7,c
  2756  002592  D006               	goto	l2871
  2757  002594  5053               	movf	_tamanio_password+1,w,c
  2758  002596  E11D               	bnz	l343
  2759  002598  0E06               	movlw	6
  2760  00259A  5C52               	subwf	_tamanio_password,w,c
  2761  00259C  B0D8               	btfsc	status,0,c
  2762  00259E  0012               	return	
  2763  0025A0                     l2871:
  2764                           
  2765                           ;password.c: 7: current_password[tamanio_password] = valor;
  2766  0025A0  0E78               	movlw	low _current_password
  2767  0025A2  2452               	addwf	_tamanio_password,w,c
  2768  0025A4  6ED9               	movwf	fsr2l,c
  2769  0025A6  0E00               	movlw	high _current_password
  2770  0025A8  2053               	addwfc	_tamanio_password+1,w,c
  2771  0025AA  6EDA               	movwf	fsr2h,c
  2772  0025AC  C003  FFDF         	movff	guardar_current_password@valor,indf2
  2773                           
  2774                           ;password.c: 8: current_password [tamanio_password+1] = '\0';
  2775  0025B0  0E01               	movlw	1
  2776  0025B2  2452               	addwf	_tamanio_password,w,c
  2777  0025B4  6E01               	movwf	??_guardar_current_password& (0+255),c
  2778  0025B6  0E00               	movlw	0
  2779  0025B8  2053               	addwfc	_tamanio_password+1,w,c
  2780  0025BA  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  2781  0025BC  0E78               	movlw	low _current_password
  2782  0025BE  2401               	addwf	??_guardar_current_password,w,c
  2783  0025C0  6ED9               	movwf	fsr2l,c
  2784  0025C2  0E00               	movlw	high _current_password
  2785  0025C4  2002               	addwfc	??_guardar_current_password+1,w,c
  2786  0025C6  6EDA               	movwf	fsr2h,c
  2787  0025C8  0E00               	movlw	0
  2788  0025CA  6EDF               	movwf	indf2,c
  2789                           
  2790                           ;password.c: 9: tamanio_password++;
  2791  0025CC  4A52               	infsnz	_tamanio_password,f,c
  2792  0025CE  2A53               	incf	_tamanio_password+1,f,c
  2793  0025D0  0012               	return	
  2794  0025D2                     l343:
  2795  0025D2  0012               	return		;funcret
  2796  0025D4                     __end_of_guardar_current_password:
  2797                           	opt stack 0
  2798                           tosu	equ	0xFFF
  2799                           tosh	equ	0xFFE
  2800                           tosl	equ	0xFFD
  2801                           pclath	equ	0xFFA
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1l	equ	0xFE1
  2810                           indf2	equ	0xFDF
  2811                           postinc2	equ	0xFDE
  2812                           postdec2	equ	0xFDD
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _guardar_comando *****************
  2818 ;; Defined at:
  2819 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  tecla           1    wreg     unsigned char 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;  tecla           1   57[COMRAM] unsigned char 
  2824 ;;  aux            20   37[COMRAM] unsigned char [20]
  2825 ;; Return value:  Size  Location     Type
  2826 ;;		None               void
  2827 ;; Registers used:
  2828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2835 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2837 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2838 ;;Total ram usage:       23 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    2
  2841 ;; This function calls:
  2842 ;;		_sprintf
  2843 ;; This function is called by:
  2844 ;;		_ingresar_comando
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text11
  2849  002272                     __ptext11:
  2850                           	opt stack 0
  2851  002272                     _guardar_comando:
  2852                           	opt stack 26
  2853                           
  2854                           ;incstack = 0
  2855                           ;guardar_comando@tecla stored from wreg
  2856  002272  6E3A               	movwf	guardar_comando@tecla,c
  2857                           
  2858                           ;teclado.c: 12: unsigned char aux[20];
  2859                           ;teclado.c: 13: sprintf(aux,"%01u",tecla);
  2860  002274  0E26               	movlw	low guardar_comando@aux
  2861  002276  6E0D               	movwf	sprintf@sp,c
  2862  002278  0E00               	movlw	high guardar_comando@aux
  2863  00227A  6E0E               	movwf	sprintf@sp+1,c
  2864  00227C  0EA2               	movlw	low STR_5
  2865  00227E  6E0F               	movwf	sprintf@f,c
  2866  002280  0E0F               	movlw	high STR_5
  2867  002282  6E10               	movwf	sprintf@f+1,c
  2868  002284  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  2869  002288  6A12               	clrf	?_sprintf+5,c
  2870  00228A  ECE0  F007         	call	_sprintf	;wreg free
  2871                           
  2872                           ;teclado.c: 14: if (tamanio_comando <3){
  2873  00228E  0100               	movlb	0	; () banked
  2874  002290  BF95               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  2875  002292  D008               	goto	l2879
  2876  002294  0100               	movlb	0	; () banked
  2877  002296  5195               	movf	(_tamanio_comando+1)& (0+255),w,b
  2878  002298  E123               	bnz	l278
  2879  00229A  0E03               	movlw	3
  2880  00229C  0100               	movlb	0	; () banked
  2881  00229E  5D94               	subwf	_tamanio_comando& (0+255),w,b
  2882  0022A0  B0D8               	btfsc	status,0,c
  2883  0022A2  0012               	return	
  2884  0022A4                     l2879:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;teclado.c: 15: comando[tamanio_comando] = *aux;
  2888  0022A4  0EBD               	movlw	low _comando
  2889  0022A6  0100               	movlb	0	; () banked
  2890  0022A8  2594               	addwf	_tamanio_comando& (0+255),w,b
  2891  0022AA  6ED9               	movwf	fsr2l,c
  2892  0022AC  0E00               	movlw	high _comando
  2893  0022AE  0100               	movlb	0	; () banked
  2894  0022B0  2195               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2895  0022B2  6EDA               	movwf	fsr2h,c
  2896  0022B4  C026  FFDF         	movff	guardar_comando@aux,indf2
  2897                           
  2898                           ;teclado.c: 16: comando [tamanio_comando+1] = '\0';
  2899  0022B8  0E01               	movlw	1
  2900  0022BA  0100               	movlb	0	; () banked
  2901  0022BC  2594               	addwf	_tamanio_comando& (0+255),w,b
  2902  0022BE  6E24               	movwf	??_guardar_comando& (0+255),c
  2903  0022C0  0E00               	movlw	0
  2904  0022C2  0100               	movlb	0	; () banked
  2905  0022C4  2195               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2906  0022C6  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  2907  0022C8  0EBD               	movlw	low _comando
  2908  0022CA  2424               	addwf	??_guardar_comando,w,c
  2909  0022CC  6ED9               	movwf	fsr2l,c
  2910  0022CE  0E00               	movlw	high _comando
  2911  0022D0  2025               	addwfc	??_guardar_comando+1,w,c
  2912  0022D2  6EDA               	movwf	fsr2h,c
  2913  0022D4  0E00               	movlw	0
  2914  0022D6  6EDF               	movwf	indf2,c
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;teclado.c: 17: tamanio_comando++;
  2918  0022D8  0100               	movlb	0	; () banked
  2919  0022DA  4B94               	infsnz	_tamanio_comando& (0+255),f,b
  2920  0022DC  2B95               	incf	(_tamanio_comando+1)& (0+255),f,b
  2921  0022DE  0012               	return	
  2922  0022E0                     l278:
  2923                           
  2924                           ; BSR set to: 0
  2925  0022E0  0012               	return		;funcret
  2926  0022E2                     __end_of_guardar_comando:
  2927                           	opt stack 0
  2928                           tosu	equ	0xFFF
  2929                           tosh	equ	0xFFE
  2930                           tosl	equ	0xFFD
  2931                           pclath	equ	0xFFA
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _restaurar_comando *****************
  2948 ;; Defined at:
  2949 ;;		line 44 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, status,2
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;;		_cambiar_anio
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text12
  2978  0026CA                     __ptext12:
  2979                           	opt stack 0
  2980  0026CA                     _restaurar_comando:
  2981                           	opt stack 30
  2982                           
  2983                           ;teclado.c: 45: tamanio_comando = 0;
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;incstack = 0
  2987  0026CA  0E00               	movlw	0
  2988  0026CC  0100               	movlb	0	; () banked
  2989  0026CE  6F95               	movwf	(_tamanio_comando+1)& (0+255),b
  2990  0026D0  0E00               	movlw	0
  2991  0026D2  6F94               	movwf	_tamanio_comando& (0+255),b
  2992                           
  2993                           ;teclado.c: 47: comando[0]='x';
  2994  0026D4  0E78               	movlw	120
  2995  0026D6  0100               	movlb	0	; () banked
  2996  0026D8  6FBD               	movwf	_comando& (0+255),b
  2997                           
  2998                           ;teclado.c: 48: comando[1]='x';
  2999  0026DA  0E78               	movlw	120
  3000  0026DC  0100               	movlb	0	; () banked
  3001  0026DE  6FBE               	movwf	(_comando+1)& (0+255),b
  3002                           
  3003                           ;teclado.c: 49: comando[2]='x';
  3004  0026E0  0E78               	movlw	120
  3005  0026E2  0100               	movlb	0	; () banked
  3006  0026E4  6FBF               	movwf	(_comando+2)& (0+255),b
  3007                           
  3008                           ;teclado.c: 50: comando[3]=0;
  3009  0026E6  0E00               	movlw	0
  3010  0026E8  0100               	movlb	0	; () banked
  3011  0026EA  6FC0               	movwf	(_comando+3)& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014  0026EC  0012               	return		;funcret
  3015  0026EE                     __end_of_restaurar_comando:
  3016                           	opt stack 0
  3017                           tosu	equ	0xFFF
  3018                           tosh	equ	0xFFE
  3019                           tosl	equ	0xFFD
  3020                           pclath	equ	0xFFA
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1l	equ	0xFE1
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _inicializar *****************
  3037 ;; Defined at:
  3038 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;		None               void
  3045 ;; Registers used:
  3046 ;;		wreg, status,2
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3056 ;;Total ram usage:        0 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_cambiar_anio
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text13
  3066  002676                     __ptext13:
  3067                           	opt stack 0
  3068  002676                     _inicializar:
  3069                           	opt stack 27
  3070                           
  3071                           ;fecha.c: 9: *day = 0;
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;incstack = 0
  3075  002676  0E00               	movlw	0
  3076  002678  0100               	movlb	0	; () banked
  3077  00267A  6FAE               	movwf	_day& (0+255),b
  3078                           
  3079                           ;fecha.c: 10: *month = 0;
  3080  00267C  0E00               	movlw	0
  3081  00267E  0100               	movlb	0	; () banked
  3082  002680  6FB1               	movwf	_month& (0+255),b
  3083                           
  3084                           ;fecha.c: 11: *year = 0;
  3085  002682  0E00               	movlw	0
  3086  002684  0100               	movlb	0	; () banked
  3087  002686  6FB4               	movwf	_year& (0+255),b
  3088                           
  3089                           ;fecha.c: 13: tamanio_dia = 0;
  3090  002688  0E00               	movlw	0
  3091  00268A  6E5C               	movwf	_tamanio_dia+1,c
  3092  00268C  0E00               	movlw	0
  3093  00268E  6E5B               	movwf	_tamanio_dia,c
  3094                           
  3095                           ;fecha.c: 14: tamanio_mes = 0;
  3096  002690  0E00               	movlw	0
  3097  002692  6E5E               	movwf	_tamanio_mes+1,c
  3098  002694  0E00               	movlw	0
  3099  002696  6E5D               	movwf	_tamanio_mes,c
  3100                           
  3101                           ;fecha.c: 15: tamanio_anio = 0;
  3102  002698  0E00               	movlw	0
  3103  00269A  6E5A               	movwf	_tamanio_anio+1,c
  3104  00269C  0E00               	movlw	0
  3105  00269E  6E59               	movwf	_tamanio_anio,c
  3106                           
  3107                           ; BSR set to: 0
  3108  0026A0  0012               	return		;funcret
  3109  0026A2                     __end_of_inicializar:
  3110                           	opt stack 0
  3111                           tosu	equ	0xFFF
  3112                           tosh	equ	0xFFE
  3113                           tosl	equ	0xFFD
  3114                           pclath	equ	0xFFA
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           postinc0	equ	0xFEE
  3120                           wreg	equ	0xFE8
  3121                           postdec1	equ	0xFE5
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function _guardar_elemento *****************
  3131 ;; Defined at:
  3132 ;;		line 18 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  tecla           1    wreg     unsigned char 
  3135 ;;  array           2   35[COMRAM] PTR unsigned char 
  3136 ;;		 -> year(3), month(3), day(3), 
  3137 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  3138 ;;		 -> tamanio_anio(2), tamanio_mes(2), tamanio_dia(2), 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  tecla           1   41[COMRAM] unsigned char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;		None               void
  3143 ;; Registers used:
  3144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3152 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3153 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3154 ;;Total ram usage:        7 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    2
  3157 ;; This function calls:
  3158 ;;		_sprintf
  3159 ;; This function is called by:
  3160 ;;		_cambiar_dia
  3161 ;;		_cambiar_mes
  3162 ;;		_cambiar_anio
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text14
  3167  0021FE                     __ptext14:
  3168                           	opt stack 0
  3169  0021FE                     _guardar_elemento:
  3170                           	opt stack 25
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;incstack = 0
  3174                           ;guardar_elemento@tecla stored from wreg
  3175  0021FE  6E2A               	movwf	guardar_elemento@tecla,c
  3176                           
  3177                           ;fecha.c: 20: sprintf(buffer2,"%01u",tecla);
  3178  002200  0E96               	movlw	low _buffer2
  3179  002202  6E0D               	movwf	sprintf@sp,c
  3180  002204  0E00               	movlw	high _buffer2
  3181  002206  6E0E               	movwf	sprintf@sp+1,c
  3182  002208  0EA2               	movlw	low STR_5
  3183  00220A  6E0F               	movwf	sprintf@f,c
  3184  00220C  0E0F               	movlw	high STR_5
  3185  00220E  6E10               	movwf	sprintf@f+1,c
  3186  002210  C02A  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  3187  002214  6A12               	clrf	?_sprintf+5,c
  3188  002216  ECE0  F007         	call	_sprintf	;wreg free
  3189                           
  3190                           ;fecha.c: 21: array[*tamanio_array] = *buffer2;
  3191  00221A  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3192  00221E  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3193  002222  CFDE F028          	movff	postinc2,??_guardar_elemento
  3194  002226  CFDD F029          	movff	postdec2,??_guardar_elemento+1
  3195  00222A  5028               	movf	??_guardar_elemento,w,c
  3196  00222C  2424               	addwf	guardar_elemento@array,w,c
  3197  00222E  6ED9               	movwf	fsr2l,c
  3198  002230  5029               	movf	??_guardar_elemento+1,w,c
  3199  002232  2025               	addwfc	guardar_elemento@array+1,w,c
  3200  002234  6EDA               	movwf	fsr2h,c
  3201  002236  C096  FFDF         	movff	_buffer2,indf2
  3202                           
  3203                           ;fecha.c: 22: array [(*tamanio_array)+1] = 0;
  3204  00223A  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3205  00223E  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3206  002242  CFDE F028          	movff	postinc2,??_guardar_elemento
  3207  002246  CFDD F029          	movff	postdec2,??_guardar_elemento+1
  3208  00224A  0E01               	movlw	1
  3209  00224C  2628               	addwf	??_guardar_elemento,f,c
  3210  00224E  0E00               	movlw	0
  3211  002250  2229               	addwfc	??_guardar_elemento+1,f,c
  3212  002252  5028               	movf	??_guardar_elemento,w,c
  3213  002254  2424               	addwf	guardar_elemento@array,w,c
  3214  002256  6ED9               	movwf	fsr2l,c
  3215  002258  5029               	movf	??_guardar_elemento+1,w,c
  3216  00225A  2025               	addwfc	guardar_elemento@array+1,w,c
  3217  00225C  6EDA               	movwf	fsr2h,c
  3218  00225E  0E00               	movlw	0
  3219  002260  6EDF               	movwf	indf2,c
  3220                           
  3221                           ;fecha.c: 23: (*tamanio_array)++;
  3222  002262  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3223  002266  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3224  00226A  2ADE               	incf	postinc2,f,c
  3225  00226C  0E00               	movlw	0
  3226  00226E  22DD               	addwfc	postdec2,f,c
  3227  002270  0012               	return		;funcret
  3228  002272                     __end_of_guardar_elemento:
  3229                           	opt stack 0
  3230                           tosu	equ	0xFFF
  3231                           tosh	equ	0xFFE
  3232                           tosl	equ	0xFFD
  3233                           pclath	equ	0xFFA
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postdec1	equ	0xFE5
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           postdec2	equ	0xFDD
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function _convertir_a_int *****************
  3250 ;; Defined at:
  3251 ;;		line 26 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  array           2   13[COMRAM] PTR unsigned char 
  3254 ;;		 -> year(3), month(3), day(3), 
  3255 ;;  valor           2   15[COMRAM] PTR int 
  3256 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;		None               void
  3261 ;; Registers used:
  3262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3272 ;;Total ram usage:        4 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    2
  3275 ;; This function calls:
  3276 ;;		_atoi
  3277 ;; This function is called by:
  3278 ;;		_cambiar_dia
  3279 ;;		_cambiar_mes
  3280 ;;		_cambiar_anio
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text15
  3285  002734                     __ptext15:
  3286                           	opt stack 0
  3287  002734                     _convertir_a_int:
  3288                           	opt stack 25
  3289                           
  3290                           ;fecha.c: 27: *valor = atoi(array);
  3291                           
  3292                           ;incstack = 0
  3293  002734  C00E  F007         	movff	convertir_a_int@array,atoi@s
  3294  002738  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  3295  00273C  EC99  F00D         	call	_atoi	;wreg free
  3296  002740  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  3297  002744  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  3298  002748  C007  FFDE         	movff	?_atoi,postinc2
  3299  00274C  C008  FFDD         	movff	?_atoi+1,postdec2
  3300  002750  0012               	return		;funcret
  3301  002752                     __end_of_convertir_a_int:
  3302                           	opt stack 0
  3303                           tosu	equ	0xFFF
  3304                           tosh	equ	0xFFE
  3305                           tosl	equ	0xFFD
  3306                           pclath	equ	0xFFA
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           postinc0	equ	0xFEE
  3312                           wreg	equ	0xFE8
  3313                           postdec1	equ	0xFE5
  3314                           fsr1l	equ	0xFE1
  3315                           indf2	equ	0xFDF
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function _atoi *****************
  3323 ;; Defined at:
  3324 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  s               2    6[COMRAM] PTR const unsigned char 
  3327 ;;		 -> year(3), month(3), day(3), 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;  a               2   11[COMRAM] int 
  3330 ;;  sign            1   10[COMRAM] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  2    6[COMRAM] int 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3341 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3342 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3343 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3344 ;;Total ram usage:        7 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    1
  3347 ;; This function calls:
  3348 ;;		___wmul
  3349 ;;		_isdigit
  3350 ;; This function is called by:
  3351 ;;		_convertir_a_int
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text16
  3356  001B32                     __ptext16:
  3357                           	opt stack 0
  3358  001B32                     _atoi:
  3359                           	opt stack 25
  3360                           
  3361                           ;incstack = 0
  3362  001B32  D003               	goto	l2607
  3363  001B34                     l2605:
  3364  001B34  4A07               	infsnz	atoi@s,f,c
  3365  001B36  2A08               	incf	atoi@s+1,f,c
  3366  001B38  D000               	goto	l2607
  3367  001B3A                     l2607:
  3368  001B3A  C007  FFD9         	movff	atoi@s,fsr2l
  3369  001B3E  C008  FFDA         	movff	atoi@s+1,fsr2h
  3370  001B42  0E20               	movlw	32
  3371  001B44  18DE               	xorwf	postinc2,w,c
  3372  001B46  B4D8               	btfsc	status,2,c
  3373  001B48  D7F5               	goto	l2605
  3374  001B4A  C007  FFD9         	movff	atoi@s,fsr2l
  3375  001B4E  C008  FFDA         	movff	atoi@s+1,fsr2h
  3376  001B52  0E09               	movlw	9
  3377  001B54  18DE               	xorwf	postinc2,w,c
  3378  001B56  B4D8               	btfsc	status,2,c
  3379  001B58  D7ED               	goto	l2605
  3380  001B5A  0E00               	movlw	0
  3381  001B5C  6E0D               	movwf	atoi@a+1,c
  3382  001B5E  0E00               	movlw	0
  3383  001B60  6E0C               	movwf	atoi@a,c
  3384  001B62  0E00               	movlw	0
  3385  001B64  6E0B               	movwf	atoi@sign,c
  3386  001B66  C007  FFD9         	movff	atoi@s,fsr2l
  3387  001B6A  C008  FFDA         	movff	atoi@s+1,fsr2h
  3388  001B6E  0E2D               	movlw	45
  3389  001B70  18DE               	xorwf	postinc2,w,c
  3390  001B72  A4D8               	btfss	status,2,c
  3391  001B74  D002               	goto	l2617
  3392  001B76  2A0B               	incf	atoi@sign,f,c
  3393  001B78  D025               	goto	l2623
  3394  001B7A                     l2617:
  3395  001B7A  C007  FFD9         	movff	atoi@s,fsr2l
  3396  001B7E  C008  FFDA         	movff	atoi@s+1,fsr2h
  3397  001B82  0E2B               	movlw	43
  3398  001B84  18DE               	xorwf	postinc2,w,c
  3399  001B86  A4D8               	btfss	status,2,c
  3400  001B88  D020               	goto	l2625
  3401  001B8A  D01C               	goto	l2623
  3402  001B8C  D01E               	goto	l2625
  3403  001B8E                     l2621:
  3404  001B8E  C00C  F001         	movff	atoi@a,___wmul@multiplier
  3405  001B92  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  3406  001B96  0E00               	movlw	0
  3407  001B98  6E04               	movwf	___wmul@multiplicand+1,c
  3408  001B9A  0E0A               	movlw	10
  3409  001B9C  6E03               	movwf	___wmul@multiplicand,c
  3410  001B9E  EC51  F013         	call	___wmul	;wreg free
  3411  001BA2  C007  FFD9         	movff	atoi@s,fsr2l
  3412  001BA6  C008  FFDA         	movff	atoi@s+1,fsr2h
  3413  001BAA  50DF               	movf	indf2,w,c
  3414  001BAC  6E09               	movwf	??_atoi& (0+255),c
  3415  001BAE  6A0A               	clrf	(??_atoi+1)& (0+255),c
  3416  001BB0  5001               	movf	?___wmul,w,c
  3417  001BB2  2609               	addwf	??_atoi,f,c
  3418  001BB4  5002               	movf	?___wmul+1,w,c
  3419  001BB6  220A               	addwfc	??_atoi+1,f,c
  3420  001BB8  0ED0               	movlw	208
  3421  001BBA  2409               	addwf	??_atoi,w,c
  3422  001BBC  6E0C               	movwf	atoi@a,c
  3423  001BBE  0EFF               	movlw	255
  3424  001BC0  200A               	addwfc	??_atoi+1,w,c
  3425  001BC2  6E0D               	movwf	atoi@a+1,c
  3426  001BC4                     l2623:
  3427  001BC4  4A07               	infsnz	atoi@s,f,c
  3428  001BC6  2A08               	incf	atoi@s+1,f,c
  3429  001BC8  D000               	goto	l2625
  3430  001BCA                     l2625:
  3431  001BCA  C007  FFD9         	movff	atoi@s,fsr2l
  3432  001BCE  C008  FFDA         	movff	atoi@s+1,fsr2h
  3433  001BD2  50DF               	movf	indf2,w,c
  3434  001BD4  EC89  F013         	call	_isdigit
  3435  001BD8  B0D8               	btfsc	status,0,c
  3436  001BDA  D7D9               	goto	l2621
  3437  001BDC  500B               	movf	atoi@sign,w,c
  3438  001BDE  B4D8               	btfsc	status,2,c
  3439  001BE0  D00D               	goto	l905
  3440  001BE2  C00C  F009         	movff	atoi@a,??_atoi
  3441  001BE6  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3442  001BEA  1E09               	comf	??_atoi,f,c
  3443  001BEC  1E0A               	comf	??_atoi+1,f,c
  3444  001BEE  4A09               	infsnz	??_atoi,f,c
  3445  001BF0  2A0A               	incf	??_atoi+1,f,c
  3446  001BF2  C009  F007         	movff	??_atoi,?_atoi
  3447  001BF6  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3448  001BFA  0012               	return	
  3449  001BFC                     l905:
  3450  001BFC  C00C  F007         	movff	atoi@a,?_atoi
  3451  001C00  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3452  001C04  0012               	return		;funcret
  3453  001C06                     __end_of_atoi:
  3454                           	opt stack 0
  3455                           tosu	equ	0xFFF
  3456                           tosh	equ	0xFFE
  3457                           tosl	equ	0xFFD
  3458                           pclath	equ	0xFFA
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           indf2	equ	0xFDF
  3468                           postinc2	equ	0xFDE
  3469                           postdec2	equ	0xFDD
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _ingresar_password *****************
  3475 ;; Defined at:
  3476 ;;		line 85 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  i               2   27[COMRAM] int 
  3481 ;;  i               2   29[COMRAM] int 
  3482 ;;  clear          16   11[COMRAM] unsigned char [16]
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  2  164[None  ] int 
  3485 ;; Registers used:
  3486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3495 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3496 ;;Total ram usage:       21 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    5
  3499 ;; This function calls:
  3500 ;;		_lcd_comand
  3501 ;;		_lcd_gotoxy
  3502 ;;		_lcd_putrs
  3503 ;;		_validar_password
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text17
  3510  001A3A                     __ptext17:
  3511                           	opt stack 0
  3512  001A3A                     _ingresar_password:
  3513                           	opt stack 25
  3514                           
  3515                           ;main.c: 86: char clear[16];
  3516                           ;main.c: 87: for (int i=0;i<16;i++) clear[i]=' ';
  3517                           
  3518                           ;incstack = 0
  3519  001A3A  0E00               	movlw	0
  3520  001A3C  6E1F               	movwf	ingresar_password@i+1,c
  3521  001A3E  0E00               	movlw	0
  3522  001A40  6E1E               	movwf	ingresar_password@i,c
  3523  001A42                     l3159:
  3524  001A42  BE1F               	btfsc	ingresar_password@i+1,7,c
  3525  001A44  D008               	goto	l3163
  3526  001A46  501F               	movf	ingresar_password@i+1,w,c
  3527  001A48  E112               	bnz	l3169
  3528  001A4A  0E10               	movlw	16
  3529  001A4C  5C1E               	subwf	ingresar_password@i,w,c
  3530  001A4E  B0D8               	btfsc	status,0,c
  3531  001A50  D00E               	goto	l3169
  3532  001A52  D001               	goto	l3163
  3533  001A54  D00C               	goto	l3169
  3534  001A56                     l3163:
  3535  001A56  0E0C               	movlw	low ingresar_password@clear
  3536  001A58  241E               	addwf	ingresar_password@i,w,c
  3537  001A5A  6ED9               	movwf	fsr2l,c
  3538  001A5C  0E00               	movlw	high ingresar_password@clear
  3539  001A5E  201F               	addwfc	ingresar_password@i+1,w,c
  3540  001A60  6EDA               	movwf	fsr2h,c
  3541  001A62  0E20               	movlw	32
  3542  001A64  6EDF               	movwf	indf2,c
  3543  001A66  4A1E               	infsnz	ingresar_password@i,f,c
  3544  001A68  2A1F               	incf	ingresar_password@i+1,f,c
  3545  001A6A  D7EB               	goto	l3159
  3546  001A6C  D000               	goto	l3169
  3547  001A6E                     l3169:
  3548                           
  3549                           ;main.c: 89: if(tamanio_password < 6){
  3550  001A6E  BE53               	btfsc	_tamanio_password+1,7,c
  3551  001A70  D006               	goto	l3171
  3552  001A72  5053               	movf	_tamanio_password+1,w,c
  3553  001A74  E118               	bnz	l3177
  3554  001A76  0E06               	movlw	6
  3555  001A78  5C52               	subwf	_tamanio_password,w,c
  3556  001A7A  B0D8               	btfsc	status,0,c
  3557  001A7C  D014               	goto	l3177
  3558  001A7E                     l3171:
  3559                           
  3560                           ;main.c: 91: lcd_comand(0b00001100);
  3561  001A7E  0E0C               	movlw	12
  3562  001A80  ECCF  F013         	call	_lcd_comand
  3563                           
  3564                           ;main.c: 92: lcd_gotoxy(1,1);
  3565  001A84  0E01               	movlw	1
  3566  001A86  6E05               	movwf	lcd_gotoxy@y,c
  3567  001A88  0E01               	movlw	1
  3568  001A8A  EC77  F013         	call	_lcd_gotoxy
  3569                           
  3570                           ;main.c: 93: lcd_putrs("Inserte password");
  3571  001A8E  0E46               	movlw	low STR_3
  3572  001A90  6E09               	movwf	lcd_putrs@ptr,c
  3573  001A92  0E0F               	movlw	high STR_3
  3574  001A94  6E0A               	movwf	lcd_putrs@ptr+1,c
  3575  001A96  EC0A  F012         	call	_lcd_putrs	;wreg free
  3576                           
  3577                           ;main.c: 94: lcd_gotoxy(tamanio_password+1,2);
  3578  001A9A  0E02               	movlw	2
  3579  001A9C  6E05               	movwf	lcd_gotoxy@y,c
  3580  001A9E  2852               	incf	_tamanio_password,w,c
  3581  001AA0  EC77  F013         	call	_lcd_gotoxy
  3582  001AA4  D000               	goto	l3177
  3583  001AA6                     l3177:
  3584                           
  3585                           ;main.c: 95: }
  3586                           ;main.c: 97: validar_password();
  3587  001AA6  ECA8  F011         	call	_validar_password	;wreg free
  3588                           
  3589                           ;main.c: 98: if (tamanio_password >= 6 && !autorizado){
  3590  001AAA  BE53               	btfsc	_tamanio_password+1,7,c
  3591  001AAC  0012               	return	
  3592  001AAE  5053               	movf	_tamanio_password+1,w,c
  3593  001AB0  E104               	bnz	u2520
  3594  001AB2  0E06               	movlw	6
  3595  001AB4  5C52               	subwf	_tamanio_password,w,c
  3596  001AB6  A0D8               	btfss	status,0,c
  3597  001AB8  0012               	return	
  3598  001ABA                     u2520:
  3599  001ABA  0100               	movlb	0	; () banked
  3600  001ABC  5184               	movf	_autorizado& (0+255),w,b
  3601  001ABE  0100               	movlb	0	; () banked
  3602  001AC0  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3603  001AC2  A4D8               	btfss	status,2,c
  3604  001AC4  0012               	return	
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 99: tamanio_password = 0;
  3608  001AC6  0E00               	movlw	0
  3609  001AC8  6E53               	movwf	_tamanio_password+1,c
  3610  001ACA  0E00               	movlw	0
  3611  001ACC  6E52               	movwf	_tamanio_password,c
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;main.c: 100: lcd_gotoxy(1,2);
  3615  001ACE  0E02               	movlw	2
  3616  001AD0  6E05               	movwf	lcd_gotoxy@y,c
  3617  001AD2  0E01               	movlw	1
  3618  001AD4  EC77  F013         	call	_lcd_gotoxy
  3619                           
  3620                           ;main.c: 101: lcd_putrs("ERROR pass");
  3621  001AD8  0E8F               	movlw	low STR_4
  3622  001ADA  6E09               	movwf	lcd_putrs@ptr,c
  3623  001ADC  0E0F               	movlw	high STR_4
  3624  001ADE  6E0A               	movwf	lcd_putrs@ptr+1,c
  3625  001AE0  EC0A  F012         	call	_lcd_putrs	;wreg free
  3626                           
  3627                           ;main.c: 102: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3628  001AE4  0E00               	movlw	0
  3629  001AE6  6E1D               	movwf	ingresar_password@i_517+1,c
  3630  001AE8  0E00               	movlw	0
  3631  001AEA  6E1C               	movwf	ingresar_password@i_517,c
  3632  001AEC                     l3191:
  3633  001AEC  BE1D               	btfsc	ingresar_password@i_517+1,7,c
  3634  001AEE  D008               	goto	l3195
  3635  001AF0  501D               	movf	ingresar_password@i_517+1,w,c
  3636  001AF2  E112               	bnz	l3199
  3637  001AF4  0E04               	movlw	4
  3638  001AF6  5C1C               	subwf	ingresar_password@i_517,w,c
  3639  001AF8  B0D8               	btfsc	status,0,c
  3640  001AFA  D00E               	goto	l3199
  3641  001AFC  D001               	goto	l3195
  3642  001AFE  D00C               	goto	l3199
  3643  001B00                     l3195:
  3644  001B00  0EFF               	movlw	255
  3645  001B02  6E0B               	movwf	??_ingresar_password& (0+255),c
  3646  001B04  0E8A               	movlw	138
  3647  001B06                     u2847:
  3648  001B06  2EE8               	decfsz	wreg,f,c
  3649  001B08  D7FE               	goto	u2847
  3650  001B0A  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  3651  001B0C  D7FC               	goto	u2847
  3652  001B0E  D000               	nop2	
  3653  001B10  4A1C               	infsnz	ingresar_password@i_517,f,c
  3654  001B12  2A1D               	incf	ingresar_password@i_517+1,f,c
  3655  001B14  D7EB               	goto	l3191
  3656  001B16  D000               	goto	l3199
  3657  001B18                     l3199:
  3658                           
  3659                           ;main.c: 103: lcd_gotoxy(1,2);
  3660  001B18  0E02               	movlw	2
  3661  001B1A  6E05               	movwf	lcd_gotoxy@y,c
  3662  001B1C  0E01               	movlw	1
  3663  001B1E  EC77  F013         	call	_lcd_gotoxy
  3664                           
  3665                           ;main.c: 104: lcd_putrs(clear);
  3666  001B22  0E0C               	movlw	low ingresar_password@clear
  3667  001B24  6E09               	movwf	lcd_putrs@ptr,c
  3668  001B26  0E00               	movlw	high ingresar_password@clear
  3669  001B28  6E0A               	movwf	lcd_putrs@ptr+1,c
  3670  001B2A  EC0A  F012         	call	_lcd_putrs	;wreg free
  3671  001B2E  0012               	return	
  3672  001B30  0012               	return		;funcret
  3673  001B32                     __end_of_ingresar_password:
  3674                           	opt stack 0
  3675                           tosu	equ	0xFFF
  3676                           tosh	equ	0xFFE
  3677                           tosl	equ	0xFFD
  3678                           pclath	equ	0xFFA
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           postdec1	equ	0xFE5
  3686                           fsr1l	equ	0xFE1
  3687                           indf2	equ	0xFDF
  3688                           postinc2	equ	0xFDE
  3689                           postdec2	equ	0xFDD
  3690                           fsr2h	equ	0xFDA
  3691                           fsr2l	equ	0xFD9
  3692                           status	equ	0xFD8
  3693                           
  3694 ;; *************** function _validar_password *****************
  3695 ;; Defined at:
  3696 ;;		line 13 in file "../../../../../../Program Files/Unimic/unmc_01/sources/password.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  i               2    2[COMRAM] int 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3714 ;;Total ram usage:        4 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_ingresar_password
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text18
  3724  002350                     __ptext18:
  3725                           	opt stack 0
  3726  002350                     _validar_password:
  3727                           	opt stack 29
  3728                           
  3729                           ;password.c: 15: autorizado = 1;
  3730                           
  3731                           ;incstack = 0
  3732  002350  0E00               	movlw	0
  3733  002352  0100               	movlb	0	; () banked
  3734  002354  6F85               	movwf	(_autorizado+1)& (0+255),b
  3735  002356  0E01               	movlw	1
  3736  002358  6F84               	movwf	_autorizado& (0+255),b
  3737                           
  3738                           ;password.c: 16: int i = 0;
  3739  00235A  0E00               	movlw	0
  3740  00235C  6E04               	movwf	validar_password@i+1,c
  3741  00235E  0E00               	movlw	0
  3742  002360  6E03               	movwf	validar_password@i,c
  3743                           
  3744                           ;password.c: 17: while (i < 6 && autorizado==1){
  3745  002362  D019               	goto	l3039
  3746  002364                     l3033:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;password.c: 19: if (current_password[i] != password[i])
  3750  002364  0EB7               	movlw	low _password
  3751  002366  2403               	addwf	validar_password@i,w,c
  3752  002368  6ED9               	movwf	fsr2l,c
  3753  00236A  0E00               	movlw	high _password
  3754  00236C  2004               	addwfc	validar_password@i+1,w,c
  3755  00236E  6EDA               	movwf	fsr2h,c
  3756  002370  0E78               	movlw	low _current_password
  3757  002372  2403               	addwf	validar_password@i,w,c
  3758  002374  6EE1               	movwf	fsr1l,c
  3759  002376  0E00               	movlw	high _current_password
  3760  002378  2004               	addwfc	validar_password@i+1,w,c
  3761  00237A  6EE2               	movwf	fsr1h,c
  3762  00237C  50DE               	movf	postinc2,w,c
  3763  00237E  18E6               	xorwf	postinc1,w,c
  3764  002380  B4D8               	btfsc	status,2,c
  3765  002382  D006               	goto	l3037
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;password.c: 20: autorizado = 0;
  3769  002384  0E00               	movlw	0
  3770  002386  0100               	movlb	0	; () banked
  3771  002388  6F85               	movwf	(_autorizado+1)& (0+255),b
  3772  00238A  0E00               	movlw	0
  3773  00238C  6F84               	movwf	_autorizado& (0+255),b
  3774  00238E  D000               	goto	l3037
  3775  002390                     l3037:
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;password.c: 22: i++;
  3779  002390  4A03               	infsnz	validar_password@i,f,c
  3780  002392  2A04               	incf	validar_password@i+1,f,c
  3781  002394  D000               	goto	l3039
  3782  002396                     l3039:
  3783                           
  3784                           ; BSR set to: 0
  3785  002396  BE04               	btfsc	validar_password@i+1,7,c
  3786  002398  D006               	goto	l3041
  3787  00239A  5004               	movf	validar_password@i+1,w,c
  3788  00239C  E10C               	bnz	l352
  3789  00239E  0E06               	movlw	6
  3790  0023A0  5C03               	subwf	validar_password@i,w,c
  3791  0023A2  B0D8               	btfsc	status,0,c
  3792  0023A4  0012               	return	
  3793  0023A6                     l3041:
  3794                           
  3795                           ; BSR set to: 0
  3796  0023A6  0100               	movlb	0	; () banked
  3797  0023A8  0584               	decf	_autorizado& (0+255),w,b
  3798  0023AA  0100               	movlb	0	; () banked
  3799  0023AC  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3800  0023AE  A4D8               	btfss	status,2,c
  3801  0023B0  0012               	return	
  3802  0023B2  D7D8               	goto	l3033
  3803                           
  3804                           ; BSR set to: 0
  3805  0023B4  0012               	return	
  3806  0023B6                     l352:
  3807                           
  3808                           ; BSR set to: 0
  3809  0023B6  0012               	return		;funcret
  3810  0023B8                     __end_of_validar_password:
  3811                           	opt stack 0
  3812                           tosu	equ	0xFFF
  3813                           tosh	equ	0xFFE
  3814                           tosl	equ	0xFFD
  3815                           pclath	equ	0xFFA
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postinc1	equ	0xFE6
  3823                           postdec1	equ	0xFE5
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function _caratula *****************
  3834 ;; Defined at:
  3835 ;;		line 34 in file "main.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  3838 ;;		 -> STR_7(8), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;		None               void
  3843 ;; Registers used:
  3844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3853 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3854 ;;Total ram usage:        2 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    5
  3857 ;; This function calls:
  3858 ;;		_lcd_comand
  3859 ;;		_lcd_gotoxy
  3860 ;;		_lcd_putrs
  3861 ;;		_sprintf
  3862 ;; This function is called by:
  3863 ;;		_main
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text19
  3868  001E30                     __ptext19:
  3869                           	opt stack 0
  3870  001E30                     _caratula:
  3871                           	opt stack 25
  3872                           
  3873                           ;main.c: 36: lcd_comand(0b00001100);
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;incstack = 0
  3877  001E30  0E0C               	movlw	12
  3878  001E32  ECCF  F013         	call	_lcd_comand
  3879                           
  3880                           ;main.c: 37: lcd_gotoxy(1,1);
  3881  001E36  0E01               	movlw	1
  3882  001E38  6E05               	movwf	lcd_gotoxy@y,c
  3883  001E3A  0E01               	movlw	1
  3884  001E3C  EC77  F013         	call	_lcd_gotoxy
  3885                           
  3886                           ;main.c: 38: lcd_putrs(titulo);
  3887  001E40  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  3888  001E44  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  3889  001E48  EC0A  F012         	call	_lcd_putrs	;wreg free
  3890                           
  3891                           ;main.c: 40: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  3892  001E4C  0E96               	movlw	low _buffer2
  3893  001E4E  6E0D               	movwf	sprintf@sp,c
  3894  001E50  0E00               	movlw	high _buffer2
  3895  001E52  6E0E               	movwf	sprintf@sp+1,c
  3896  001E54  0E57               	movlw	low STR_1
  3897  001E56  6E0F               	movwf	sprintf@f,c
  3898  001E58  0E0F               	movlw	high STR_1
  3899  001E5A  6E10               	movwf	sprintf@f+1,c
  3900  001E5C  C0C3  F011         	movff	_dia,?_sprintf+4
  3901  001E60  C0C4  F012         	movff	_dia+1,?_sprintf+5
  3902  001E64  C0C9  F013         	movff	_mes,?_sprintf+6
  3903  001E68  C0CA  F014         	movff	_mes+1,?_sprintf+7
  3904  001E6C  C0C1  F015         	movff	_anio,?_sprintf+8
  3905  001E70  C0C2  F016         	movff	_anio+1,?_sprintf+9
  3906  001E74  ECE0  F007         	call	_sprintf	;wreg free
  3907                           
  3908                           ;main.c: 41: lcd_gotoxy(9,1);
  3909  001E78  0E01               	movlw	1
  3910  001E7A  6E05               	movwf	lcd_gotoxy@y,c
  3911  001E7C  0E09               	movlw	9
  3912  001E7E  EC77  F013         	call	_lcd_gotoxy
  3913                           
  3914                           ;main.c: 42: lcd_putrs(buffer2);
  3915  001E82  0E96               	movlw	low _buffer2
  3916  001E84  6E09               	movwf	lcd_putrs@ptr,c
  3917  001E86  0E00               	movlw	high _buffer2
  3918  001E88  6E0A               	movwf	lcd_putrs@ptr+1,c
  3919  001E8A  EC0A  F012         	call	_lcd_putrs	;wreg free
  3920                           
  3921                           ;main.c: 44: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  3922  001E8E  0E96               	movlw	low _buffer2
  3923  001E90  6E0D               	movwf	sprintf@sp,c
  3924  001E92  0E00               	movlw	high _buffer2
  3925  001E94  6E0E               	movwf	sprintf@sp+1,c
  3926  001E96  0E66               	movlw	low STR_2
  3927  001E98  6E0F               	movwf	sprintf@f,c
  3928  001E9A  0E0F               	movlw	high STR_2
  3929  001E9C  6E10               	movwf	sprintf@f+1,c
  3930  001E9E  C0C7  F011         	movff	_hora,?_sprintf+4
  3931  001EA2  C0C8  F012         	movff	_hora+1,?_sprintf+5
  3932  001EA6  C0CB  F013         	movff	_minuto,?_sprintf+6
  3933  001EAA  C0CC  F014         	movff	_minuto+1,?_sprintf+7
  3934  001EAE  C092  F015         	movff	_segundo,?_sprintf+8
  3935  001EB2  C093  F016         	movff	_segundo+1,?_sprintf+9
  3936  001EB6  ECE0  F007         	call	_sprintf	;wreg free
  3937                           
  3938                           ;main.c: 45: lcd_gotoxy(1,2);
  3939  001EBA  0E02               	movlw	2
  3940  001EBC  6E05               	movwf	lcd_gotoxy@y,c
  3941  001EBE  0E01               	movlw	1
  3942  001EC0  EC77  F013         	call	_lcd_gotoxy
  3943                           
  3944                           ;main.c: 46: lcd_putrs(buffer2);
  3945  001EC4  0E96               	movlw	low _buffer2
  3946  001EC6  6E09               	movwf	lcd_putrs@ptr,c
  3947  001EC8  0E00               	movlw	high _buffer2
  3948  001ECA  6E0A               	movwf	lcd_putrs@ptr+1,c
  3949  001ECC  EC0A  F012         	call	_lcd_putrs	;wreg free
  3950  001ED0  0012               	return		;funcret
  3951  001ED2                     __end_of_caratula:
  3952                           	opt stack 0
  3953                           tosu	equ	0xFFF
  3954                           tosh	equ	0xFFE
  3955                           tosl	equ	0xFFD
  3956                           pclath	equ	0xFFA
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           postinc1	equ	0xFE6
  3964                           postdec1	equ	0xFE5
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           postdec2	equ	0xFDD
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _sprintf *****************
  3975 ;; Defined at:
  3976 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3979 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  3980 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3981 ;;		 -> STR_26(5), STR_18(5), STR_17(5), STR_5(5), 
  3982 ;;		 -> STR_2(15), STR_1(15), 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  tmpval          4    0        struct .
  3985 ;;  cp              3    0        PTR const unsigned char 
  3986 ;;  width           2   32[COMRAM] int 
  3987 ;;  val             2   29[COMRAM] unsigned int 
  3988 ;;  ap              2   26[COMRAM] PTR void [1]
  3989 ;;		 -> ?_sprintf(2), 
  3990 ;;  len             2    0        unsigned int 
  3991 ;;  c               1   34[COMRAM] char 
  3992 ;;  prec            1   31[COMRAM] char 
  3993 ;;  flag            1   28[COMRAM] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  2   12[COMRAM] int 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4003 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4004 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4005 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4006 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4007 ;;Total ram usage:       23 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    1
  4010 ;; This function calls:
  4011 ;;		___lwdiv
  4012 ;;		___lwmod
  4013 ;;		___wmul
  4014 ;;		_isdigit
  4015 ;; This function is called by:
  4016 ;;		_caratula
  4017 ;;		_mostrar_guardar_password
  4018 ;;		_guardar_comando
  4019 ;;		_imprimir_tecla
  4020 ;;		_guardar_elemento
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text20
  4025  000FC0                     __ptext20:
  4026                           	opt stack 0
  4027  000FC0                     _sprintf:
  4028                           	opt stack 27
  4029                           
  4030                           ;doprnt.c: 494: va_list ap;
  4031                           ;doprnt.c: 499: signed char c;
  4032                           ;doprnt.c: 501: int width;
  4033                           ;doprnt.c: 506: signed char prec;
  4034                           ;doprnt.c: 508: unsigned char flag;
  4035                           ;doprnt.c: 523: union {
  4036                           ;doprnt.c: 524: unsigned long vd;
  4037                           ;doprnt.c: 525: double integ;
  4038                           ;doprnt.c: 526: } tmpval;
  4039                           ;doprnt.c: 528: unsigned int val;
  4040                           ;doprnt.c: 529: unsigned len;
  4041                           ;doprnt.c: 530: const char * cp;
  4042                           ;doprnt.c: 533: *ap = __va_start();
  4043                           
  4044                           ;incstack = 0
  4045  000FC0  0E11               	movlw	low (?_sprintf+4)
  4046  000FC2  6E1B               	movwf	sprintf@ap,c
  4047  000FC4  0E00               	movlw	high (?_sprintf+4)
  4048  000FC6  6E1C               	movwf	sprintf@ap+1,c
  4049                           
  4050                           ;doprnt.c: 536: while(c = *f++) {
  4051  000FC8  D117               	goto	l2597
  4052  000FCA                     l2515:
  4053                           
  4054                           ;doprnt.c: 538: if(c != '%')
  4055  000FCA  0E25               	movlw	37
  4056  000FCC  1823               	xorwf	sprintf@c,w,c
  4057  000FCE  B4D8               	btfsc	status,2,c
  4058  000FD0  D009               	goto	l2521
  4059                           
  4060                           ;doprnt.c: 540: {
  4061                           ;doprnt.c: 541: ((*sp++ = (c)));
  4062  000FD2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4063  000FD6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4064  000FDA  C023  FFDF         	movff	sprintf@c,indf2
  4065  000FDE  4A0D               	infsnz	sprintf@sp,f,c
  4066  000FE0  2A0E               	incf	sprintf@sp+1,f,c
  4067                           
  4068                           ;doprnt.c: 542: continue;
  4069  000FE2  D10A               	goto	l2597
  4070  000FE4                     l2521:
  4071                           
  4072                           ;doprnt.c: 543: }
  4073                           ;doprnt.c: 546: width = 0;
  4074  000FE4  0E00               	movlw	0
  4075  000FE6  6E22               	movwf	sprintf@width+1,c
  4076  000FE8  0E00               	movlw	0
  4077  000FEA  6E21               	movwf	sprintf@width,c
  4078                           
  4079                           ;doprnt.c: 548: flag = 0;
  4080  000FEC  0E00               	movlw	0
  4081  000FEE  6E1D               	movwf	sprintf@flag,c
  4082                           
  4083                           ;doprnt.c: 551: switch(*f) {
  4084                           
  4085                           ;doprnt.c: 550: for(;;) {
  4086  000FF0  D005               	goto	l2527
  4087  000FF2                     l2523:
  4088                           
  4089                           ;doprnt.c: 580: flag |= 0x04;
  4090  000FF2  841D               	bsf	sprintf@flag,2,c
  4091                           
  4092                           ;doprnt.c: 581: f++;
  4093  000FF4  4A0F               	infsnz	sprintf@f,f,c
  4094  000FF6  2A10               	incf	sprintf@f+1,f,c
  4095                           
  4096                           ;doprnt.c: 582: continue;
  4097  000FF8  D001               	goto	l2527
  4098                           
  4099                           ;doprnt.c: 584: }
  4100  000FFA  D00B               	goto	l2529
  4101  000FFC                     l2527:
  4102  000FFC  C00F  FFF6         	movff	sprintf@f,tblptrl
  4103  001000  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4104  001004                     	if	0	;tblptru may be non-zero
  4105  001004                     	endif
  4106  001004                     	if	0	;tblptru may be non-zero
  4107  001004                     	endif
  4108  001004  0008               	tblrd		*
  4109  001006  50F5               	movf	tablat,w,c
  4110                           
  4111                           ; Switch size 1, requested type "space"
  4112                           ; Number of cases is 1, Range of values is 48 to 48
  4113                           ; switch strategies available:
  4114                           ; Name         Instructions Cycles
  4115                           ; simple_byte            4     3 (average)
  4116                           ;	Chosen strategy is simple_byte
  4117  001008  0A30               	xorlw	48	; case 48
  4118  00100A  B4D8               	btfsc	status,2,c
  4119  00100C  D7F2               	goto	l2523
  4120                           
  4121                           ;doprnt.c: 585: break;
  4122  00100E  D001               	goto	l2529
  4123                           
  4124                           ;doprnt.c: 586: }
  4125  001010  D7F5               	goto	l2527
  4126  001012                     l2529:
  4127                           
  4128                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4129  001012  C00F  FFF6         	movff	sprintf@f,tblptrl
  4130  001016  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4131  00101A                     	if	0	;tblptru may be non-zero
  4132  00101A                     	endif
  4133  00101A                     	if	0	;tblptru may be non-zero
  4134  00101A                     	endif
  4135  00101A  0008               	tblrd		*
  4136  00101C  50F5               	movf	tablat,w,c
  4137  00101E  EC89  F013         	call	_isdigit
  4138  001022  A0D8               	btfss	status,0,c
  4139  001024  D03A               	goto	l2545
  4140                           
  4141                           ;doprnt.c: 598: width = 0;
  4142  001026  0E00               	movlw	0
  4143  001028  6E22               	movwf	sprintf@width+1,c
  4144  00102A  0E00               	movlw	0
  4145  00102C  6E21               	movwf	sprintf@width,c
  4146  00102E  D000               	goto	l2533
  4147  001030                     l2533:
  4148                           
  4149                           ;doprnt.c: 600: width *= 10;
  4150  001030  C021  F001         	movff	sprintf@width,___wmul@multiplier
  4151  001034  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4152  001038  0E00               	movlw	0
  4153  00103A  6E04               	movwf	___wmul@multiplicand+1,c
  4154  00103C  0E0A               	movlw	10
  4155  00103E  6E03               	movwf	___wmul@multiplicand,c
  4156  001040  EC51  F013         	call	___wmul	;wreg free
  4157  001044  C001  F021         	movff	?___wmul,sprintf@width
  4158  001048  C002  F022         	movff	?___wmul+1,sprintf@width+1
  4159                           
  4160                           ;doprnt.c: 601: width += *f++ - '0';
  4161  00104C  0ED0               	movlw	208
  4162  00104E  6E17               	movwf	??_sprintf& (0+255),c
  4163  001050  0EFF               	movlw	255
  4164  001052  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4165  001054  C00F  FFF6         	movff	sprintf@f,tblptrl
  4166  001058  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4167  00105C                     	if	0	;tblptru may be non-zero
  4168  00105C                     	endif
  4169  00105C                     	if	0	;tblptru may be non-zero
  4170  00105C                     	endif
  4171  00105C  0008               	tblrd		*
  4172  00105E  50F5               	movf	tablat,w,c
  4173  001060  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4174  001062  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4175  001064  5017               	movf	??_sprintf,w,c
  4176  001066  2619               	addwf	??_sprintf+2,f,c
  4177  001068  5018               	movf	??_sprintf+1,w,c
  4178  00106A  221A               	addwfc	??_sprintf+3,f,c
  4179  00106C  5019               	movf	??_sprintf+2,w,c
  4180  00106E  2621               	addwf	sprintf@width,f,c
  4181  001070  501A               	movf	??_sprintf+3,w,c
  4182  001072  2222               	addwfc	sprintf@width+1,f,c
  4183  001074  4A0F               	infsnz	sprintf@f,f,c
  4184  001076  2A10               	incf	sprintf@f+1,f,c
  4185                           
  4186                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4187  001078  C00F  FFF6         	movff	sprintf@f,tblptrl
  4188  00107C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4189  001080                     	if	0	;tblptru may be non-zero
  4190  001080                     	endif
  4191  001080                     	if	0	;tblptru may be non-zero
  4192  001080                     	endif
  4193  001080  0008               	tblrd		*
  4194  001082  50F5               	movf	tablat,w,c
  4195  001084  EC89  F013         	call	_isdigit
  4196  001088  A0D8               	btfss	status,0,c
  4197  00108A  D007               	goto	l2545
  4198  00108C  D7D1               	goto	l2533
  4199                           
  4200                           ;doprnt.c: 608: }
  4201                           ;doprnt.c: 635: switch(c = *f++) {
  4202  00108E  D005               	goto	l2545
  4203                           
  4204                           ;doprnt.c: 638: goto alldone;
  4205                           
  4206                           ;doprnt.c: 637: case 0:
  4207  001090  D0C1               	goto	l2599
  4208                           
  4209                           ;doprnt.c: 813: continue;
  4210                           
  4211                           ;doprnt.c: 802: default:
  4212  001092  D0B2               	goto	l2597
  4213  001094                     l2541:
  4214                           
  4215                           ;doprnt.c: 818: flag |= 0xC0;
  4216  001094  0EC0               	movlw	192
  4217  001096  121D               	iorwf	sprintf@flag,f,c
  4218                           
  4219                           ;doprnt.c: 822: }
  4220                           
  4221                           ;doprnt.c: 819: break;
  4222  001098  D011               	goto	l2547
  4223  00109A                     l2545:
  4224  00109A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4225  00109E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4226  0010A2  4A0F               	infsnz	sprintf@f,f,c
  4227  0010A4  2A10               	incf	sprintf@f+1,f,c
  4228  0010A6                     	if	0	;tblptru may be non-zero
  4229  0010A6                     	endif
  4230  0010A6                     	if	0	;tblptru may be non-zero
  4231  0010A6                     	endif
  4232  0010A6  0008               	tblrd		*
  4233  0010A8  CFF5 F023          	movff	tablat,sprintf@c
  4234  0010AC  5023               	movf	sprintf@c,w,c
  4235                           
  4236                           ; Switch size 1, requested type "space"
  4237                           ; Number of cases is 2, Range of values is 0 to 117
  4238                           ; switch strategies available:
  4239                           ; Name         Instructions Cycles
  4240                           ; simple_byte            7     4 (average)
  4241                           ;	Chosen strategy is simple_byte
  4242  0010AE  0A00               	xorlw	0	; case 0
  4243  0010B0  B4D8               	btfsc	status,2,c
  4244  0010B2  D0B0               	goto	l2599
  4245  0010B4  0A75               	xorlw	117	; case 117
  4246  0010B6  B4D8               	btfsc	status,2,c
  4247  0010B8  D7ED               	goto	l2541
  4248  0010BA  D09E               	goto	l2597
  4249  0010BC                     l2547:
  4250                           
  4251                           ;doprnt.c: 1273: {
  4252                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4253  0010BC  C01B  FFD9         	movff	sprintf@ap,fsr2l
  4254  0010C0  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  4255  0010C4  CFDE F01E          	movff	postinc2,sprintf@val
  4256  0010C8  CFDD F01F          	movff	postdec2,sprintf@val+1
  4257  0010CC  0E02               	movlw	2
  4258  0010CE  261B               	addwf	sprintf@ap,f,c
  4259  0010D0  0E00               	movlw	0
  4260  0010D2  221C               	addwfc	sprintf@ap+1,f,c
  4261                           
  4262                           ;doprnt.c: 1287: }
  4263                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4264  0010D4  0E01               	movlw	1
  4265  0010D6  6E23               	movwf	sprintf@c,c
  4266  0010D8                     l2553:
  4267  0010D8  0E05               	movlw	5
  4268  0010DA  1823               	xorwf	sprintf@c,w,c
  4269  0010DC  B4D8               	btfsc	status,2,c
  4270  0010DE  D016               	goto	l2565
  4271  0010E0  D001               	goto	l2557
  4272  0010E2  D014               	goto	l2565
  4273  0010E4                     l2557:
  4274                           
  4275                           ;doprnt.c: 1306: if(val < dpowers[c])
  4276  0010E4  5023               	movf	sprintf@c,w,c
  4277  0010E6  0D02               	mullw	2
  4278  0010E8  0E01               	movlw	low _dpowers
  4279  0010EA  24F3               	addwf	prodl,w,c
  4280  0010EC  6EF6               	movwf	tblptrl,c
  4281  0010EE  0E0F               	movlw	high _dpowers
  4282  0010F0  20F4               	addwfc	prodh,w,c
  4283  0010F2  6EF7               	movwf	tblptrh,c
  4284  0010F4                     	if	0	;There are less than 3 active tblptr bytes
  4285  0010F4                     	endif
  4286  0010F4  0009               	tblrd		*+
  4287  0010F6  50F5               	movf	tablat,w,c
  4288  0010F8  5C1E               	subwf	sprintf@val,w,c
  4289  0010FA  0009               	tblrd		*+
  4290  0010FC  50F5               	movf	tablat,w,c
  4291  0010FE  581F               	subwfb	sprintf@val+1,w,c
  4292  001100  A0D8               	btfss	status,0,c
  4293  001102  D004               	goto	l2565
  4294  001104  D001               	goto	l2561
  4295                           
  4296                           ;doprnt.c: 1307: break;
  4297  001106  D002               	goto	l2565
  4298  001108                     l2561:
  4299  001108  2A23               	incf	sprintf@c,f,c
  4300  00110A  D7E6               	goto	l2553
  4301  00110C                     l2565:
  4302                           
  4303                           ;doprnt.c: 1381: if(width > c)
  4304  00110C  0E80               	movlw	128
  4305  00110E  BE23               	btfsc	sprintf@c,7,c
  4306  001110  0E7F               	movlw	127
  4307  001112  6E17               	movwf	??_sprintf& (0+255),c
  4308  001114  5021               	movf	sprintf@width,w,c
  4309  001116  5C23               	subwf	sprintf@c,w,c
  4310  001118  5022               	movf	sprintf@width+1,w,c
  4311  00111A  0A80               	xorlw	128
  4312  00111C  5817               	subwfb	??_sprintf& (0+255),w,c
  4313  00111E  B0D8               	btfsc	status,0,c
  4314  001120  D007               	goto	l2569
  4315                           
  4316                           ;doprnt.c: 1382: width -= c;
  4317  001122  5023               	movf	sprintf@c,w,c
  4318  001124  5E21               	subwf	sprintf@width,f,c
  4319  001126  0E00               	movlw	0
  4320  001128  BE23               	btfsc	sprintf@c,7,c
  4321  00112A  0EFF               	movlw	255
  4322  00112C  5A22               	subwfb	sprintf@width+1,f,c
  4323  00112E  D005               	goto	l2571
  4324  001130                     l2569:
  4325                           
  4326                           ;doprnt.c: 1383: else
  4327                           ;doprnt.c: 1384: width = 0;
  4328  001130  0E00               	movlw	0
  4329  001132  6E22               	movwf	sprintf@width+1,c
  4330  001134  0E00               	movlw	0
  4331  001136  6E21               	movwf	sprintf@width,c
  4332  001138  D000               	goto	l2571
  4333  00113A                     l2571:
  4334                           
  4335                           ;doprnt.c: 1387: if(flag & 0x04) {
  4336  00113A  A41D               	btfss	sprintf@flag,2,c
  4337  00113C  D015               	goto	l2581
  4338                           
  4339                           ;doprnt.c: 1415: if(width)
  4340  00113E  5021               	movf	sprintf@width,w,c
  4341  001140  1022               	iorwf	sprintf@width+1,w,c
  4342  001142  B4D8               	btfsc	status,2,c
  4343  001144  D026               	goto	l623
  4344  001146                     l2575:
  4345                           
  4346                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4347  001146  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4348  00114A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4349  00114E  0E30               	movlw	48
  4350  001150  6EDF               	movwf	indf2,c
  4351  001152  4A0D               	infsnz	sprintf@sp,f,c
  4352  001154  2A0E               	incf	sprintf@sp+1,f,c
  4353                           
  4354                           ;doprnt.c: 1418: while(--width);
  4355  001156  0621               	decf	sprintf@width,f,c
  4356  001158  A0D8               	btfss	status,0,c
  4357  00115A  0622               	decf	sprintf@width+1,f,c
  4358  00115C  5021               	movf	sprintf@width,w,c
  4359  00115E  1022               	iorwf	sprintf@width+1,w,c
  4360  001160  B4D8               	btfsc	status,2,c
  4361  001162  D017               	goto	l623
  4362  001164  D7F0               	goto	l2575
  4363                           
  4364                           ;doprnt.c: 1420: } else
  4365  001166  D015               	goto	l623
  4366  001168                     l2581:
  4367                           
  4368                           ;doprnt.c: 1422: {
  4369                           ;doprnt.c: 1424: if(width
  4370                           ;doprnt.c: 1428: )
  4371  001168  5021               	movf	sprintf@width,w,c
  4372  00116A  1022               	iorwf	sprintf@width+1,w,c
  4373  00116C  B4D8               	btfsc	status,2,c
  4374  00116E  D011               	goto	l623
  4375  001170                     l2583:
  4376                           
  4377                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4378  001170  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4379  001174  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4380  001178  0E20               	movlw	32
  4381  00117A  6EDF               	movwf	indf2,c
  4382  00117C  4A0D               	infsnz	sprintf@sp,f,c
  4383  00117E  2A0E               	incf	sprintf@sp+1,f,c
  4384                           
  4385                           ;doprnt.c: 1431: while(--width);
  4386  001180  0621               	decf	sprintf@width,f,c
  4387  001182  A0D8               	btfss	status,0,c
  4388  001184  0622               	decf	sprintf@width+1,f,c
  4389  001186  5021               	movf	sprintf@width,w,c
  4390  001188  1022               	iorwf	sprintf@width+1,w,c
  4391  00118A  B4D8               	btfsc	status,2,c
  4392  00118C  D002               	goto	l623
  4393  00118E  D7F0               	goto	l2583
  4394  001190  D000               	goto	l623
  4395  001192                     l623:
  4396                           
  4397                           ;doprnt.c: 1469: }
  4398                           ;doprnt.c: 1472: prec = c;
  4399  001192  C023  F020         	movff	sprintf@c,sprintf@prec
  4400                           
  4401                           ;doprnt.c: 1474: while(prec--) {
  4402  001196  D02A               	goto	l2595
  4403  001198                     l2589:
  4404                           
  4405                           ;doprnt.c: 1478: {
  4406                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4407  001198  5020               	movf	sprintf@prec,w,c
  4408  00119A  0D02               	mullw	2
  4409  00119C  0E01               	movlw	low _dpowers
  4410  00119E  24F3               	addwf	prodl,w,c
  4411  0011A0  6EF6               	movwf	tblptrl,c
  4412  0011A2  0E0F               	movlw	high _dpowers
  4413  0011A4  20F4               	addwfc	prodh,w,c
  4414  0011A6  6EF7               	movwf	tblptrh,c
  4415  0011A8                     	if	0	;There are less than 3 active tblptr bytes
  4416  0011A8                     	endif
  4417  0011A8  0009               	tblrd		*+
  4418  0011AA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4419  0011AE  000A               	tblrd		*-
  4420  0011B0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4421  0011B4  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  4422  0011B8  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  4423  0011BC  ECDC  F011         	call	___lwdiv	;wreg free
  4424  0011C0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4425  0011C4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4426  0011C8  0E00               	movlw	0
  4427  0011CA  6E0B               	movwf	___lwmod@divisor+1,c
  4428  0011CC  0E0A               	movlw	10
  4429  0011CE  6E0A               	movwf	___lwmod@divisor,c
  4430  0011D0  EC34  F012         	call	___lwmod	;wreg free
  4431  0011D4  5008               	movf	?___lwmod,w,c
  4432  0011D6  0F30               	addlw	48
  4433  0011D8  6E23               	movwf	sprintf@c,c
  4434                           
  4435                           ;doprnt.c: 1523: }
  4436                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4437  0011DA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4438  0011DE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4439  0011E2  C023  FFDF         	movff	sprintf@c,indf2
  4440  0011E6  4A0D               	infsnz	sprintf@sp,f,c
  4441  0011E8  2A0E               	incf	sprintf@sp+1,f,c
  4442  0011EA  D000               	goto	l2595
  4443  0011EC                     l2595:
  4444  0011EC  0620               	decf	sprintf@prec,f,c
  4445  0011EE  2820               	incf	sprintf@prec,w,c
  4446  0011F0  B4D8               	btfsc	status,2,c
  4447  0011F2  D002               	goto	l2597
  4448  0011F4  D7D1               	goto	l2589
  4449  0011F6  D000               	goto	l2597
  4450  0011F8                     l2597:
  4451  0011F8  C00F  FFF6         	movff	sprintf@f,tblptrl
  4452  0011FC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4453  001200  4A0F               	infsnz	sprintf@f,f,c
  4454  001202  2A10               	incf	sprintf@f+1,f,c
  4455  001204                     	if	0	;tblptru may be non-zero
  4456  001204                     	endif
  4457  001204                     	if	0	;tblptru may be non-zero
  4458  001204                     	endif
  4459  001204  0008               	tblrd		*
  4460  001206  CFF5 F023          	movff	tablat,sprintf@c
  4461  00120A  5023               	movf	sprintf@c,w,c
  4462  00120C  B4D8               	btfsc	status,2,c
  4463  00120E  D002               	goto	l2599
  4464  001210  D6DC               	goto	l2515
  4465  001212  D000               	goto	l2599
  4466  001214                     l2599:
  4467                           
  4468                           ;doprnt.c: 1538: *sp = 0;
  4469  001214  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4470  001218  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4471  00121C  0E00               	movlw	0
  4472  00121E  6EDF               	movwf	indf2,c
  4473  001220  0012               	return	
  4474                           
  4475                           ;doprnt.c: 1540: return 0;
  4476                           ;	Return value of _sprintf is never used
  4477  001222  0012               	return		;funcret
  4478  001224                     __end_of_sprintf:
  4479                           	opt stack 0
  4480                           tosu	equ	0xFFF
  4481                           tosh	equ	0xFFE
  4482                           tosl	equ	0xFFD
  4483                           pclath	equ	0xFFA
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           postinc0	equ	0xFEE
  4491                           wreg	equ	0xFE8
  4492                           postinc1	equ	0xFE6
  4493                           postdec1	equ	0xFE5
  4494                           fsr1h	equ	0xFE2
  4495                           fsr1l	equ	0xFE1
  4496                           indf2	equ	0xFDF
  4497                           postinc2	equ	0xFDE
  4498                           postdec2	equ	0xFDD
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _isdigit *****************
  4504 ;; Defined at:
  4505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  c               1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  c               1    2[COMRAM] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;		None               void
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4520 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4522 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4523 ;;Total ram usage:        3 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_sprintf
  4529 ;;		_atoi
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text21
  4534  002712                     __ptext21:
  4535                           	opt stack 0
  4536  002712                     _isdigit:
  4537                           	opt stack 27
  4538                           
  4539                           ;incstack = 0
  4540                           ;isdigit@c stored from wreg
  4541  002712  6E03               	movwf	isdigit@c,c
  4542  002714  0E00               	movlw	0
  4543  002716  6E02               	movwf	_isdigit$2379,c
  4544  002718  0E3A               	movlw	58
  4545  00271A  6003               	cpfslt	isdigit@c,c
  4546  00271C  D006               	goto	l2457
  4547  00271E  0E2F               	movlw	47
  4548  002720  6403               	cpfsgt	isdigit@c,c
  4549  002722  D003               	goto	l2457
  4550  002724  0E01               	movlw	1
  4551  002726  6E02               	movwf	_isdigit$2379,c
  4552  002728  D000               	goto	l2457
  4553  00272A                     l2457:
  4554  00272A  C002  F001         	movff	_isdigit$2379,??_isdigit
  4555  00272E  3001               	rrcf	??_isdigit,w,c
  4556  002730  0012               	return	
  4557  002732  0012               	return		;funcret
  4558  002734                     __end_of_isdigit:
  4559                           	opt stack 0
  4560                           tosu	equ	0xFFF
  4561                           tosh	equ	0xFFE
  4562                           tosl	equ	0xFFD
  4563                           pclath	equ	0xFFA
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postinc1	equ	0xFE6
  4573                           postdec1	equ	0xFE5
  4574                           fsr1h	equ	0xFE2
  4575                           fsr1l	equ	0xFE1
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function ___wmul *****************
  4584 ;; Defined at:
  4585 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  multiplier      2    0[COMRAM] unsigned int 
  4588 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  product         2    4[COMRAM] unsigned int 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2    0[COMRAM] unsigned int 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, prodl, prodh
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;Total ram usage:        6 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_sprintf
  4610 ;;		_atoi
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text22
  4615  0026A2                     __ptext22:
  4616                           	opt stack 0
  4617  0026A2                     ___wmul:
  4618                           	opt stack 27
  4619                           
  4620                           ;incstack = 0
  4621  0026A2  5001               	movf	___wmul@multiplier,w,c
  4622  0026A4  0203               	mulwf	___wmul@multiplicand,c
  4623  0026A6  CFF3 F005          	movff	prodl,___wmul@product
  4624  0026AA  CFF4 F006          	movff	prodh,___wmul@product+1
  4625  0026AE  5001               	movf	___wmul@multiplier,w,c
  4626  0026B0  0204               	mulwf	___wmul@multiplicand+1,c
  4627  0026B2  50F3               	movf	prodl,w,c
  4628  0026B4  2606               	addwf	___wmul@product+1,f,c
  4629  0026B6  5002               	movf	___wmul@multiplier+1,w,c
  4630  0026B8  0203               	mulwf	___wmul@multiplicand,c
  4631  0026BA  50F3               	movf	prodl,w,c
  4632  0026BC  2606               	addwf	___wmul@product+1,f,c
  4633  0026BE  C005  F001         	movff	___wmul@product,?___wmul
  4634  0026C2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4635  0026C6  0012               	return	
  4636  0026C8  0012               	return		;funcret
  4637  0026CA                     __end_of___wmul:
  4638                           	opt stack 0
  4639                           tosu	equ	0xFFF
  4640                           tosh	equ	0xFFE
  4641                           tosl	equ	0xFFD
  4642                           pclath	equ	0xFFA
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           postinc1	equ	0xFE6
  4652                           postdec1	equ	0xFE5
  4653                           fsr1h	equ	0xFE2
  4654                           fsr1l	equ	0xFE1
  4655                           indf2	equ	0xFDF
  4656                           postinc2	equ	0xFDE
  4657                           postdec2	equ	0xFDD
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function ___lwmod *****************
  4663 ;; Defined at:
  4664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  dividend        2    7[COMRAM] unsigned int 
  4667 ;;  divisor         2    9[COMRAM] unsigned int 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;  counter         1   11[COMRAM] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  2    7[COMRAM] unsigned int 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4682 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4683 ;;Total ram usage:        5 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; This function calls:
  4686 ;;		Nothing
  4687 ;; This function is called by:
  4688 ;;		_sprintf
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text23
  4693  002468                     __ptext23:
  4694                           	opt stack 0
  4695  002468                     ___lwmod:
  4696                           	opt stack 27
  4697                           
  4698                           ;incstack = 0
  4699  002468  500A               	movf	___lwmod@divisor,w,c
  4700  00246A  100B               	iorwf	___lwmod@divisor+1,w,c
  4701  00246C  B4D8               	btfsc	status,2,c
  4702  00246E  D01D               	goto	l1292
  4703  002470  0E01               	movlw	1
  4704  002472  6E0C               	movwf	___lwmod@counter,c
  4705  002474  D005               	goto	l2495
  4706  002476                     l2493:
  4707  002476  90D8               	bcf	status,0,c
  4708  002478  360A               	rlcf	___lwmod@divisor,f,c
  4709  00247A  360B               	rlcf	___lwmod@divisor+1,f,c
  4710  00247C  2A0C               	incf	___lwmod@counter,f,c
  4711  00247E  D000               	goto	l2495
  4712  002480                     l2495:
  4713  002480  BE0B               	btfsc	___lwmod@divisor+1,7,c
  4714  002482  D002               	goto	l2497
  4715  002484  D7F8               	goto	l2493
  4716  002486  D000               	goto	l2497
  4717  002488                     l2497:
  4718  002488  500A               	movf	___lwmod@divisor,w,c
  4719  00248A  5C08               	subwf	___lwmod@dividend,w,c
  4720  00248C  500B               	movf	___lwmod@divisor+1,w,c
  4721  00248E  5809               	subwfb	___lwmod@dividend+1,w,c
  4722  002490  A0D8               	btfss	status,0,c
  4723  002492  D005               	goto	l2501
  4724  002494  500A               	movf	___lwmod@divisor,w,c
  4725  002496  5E08               	subwf	___lwmod@dividend,f,c
  4726  002498  500B               	movf	___lwmod@divisor+1,w,c
  4727  00249A  5A09               	subwfb	___lwmod@dividend+1,f,c
  4728  00249C  D000               	goto	l2501
  4729  00249E                     l2501:
  4730  00249E  90D8               	bcf	status,0,c
  4731  0024A0  320B               	rrcf	___lwmod@divisor+1,f,c
  4732  0024A2  320A               	rrcf	___lwmod@divisor,f,c
  4733  0024A4  2E0C               	decfsz	___lwmod@counter,f,c
  4734  0024A6  D7F0               	goto	l2497
  4735  0024A8  D000               	goto	l1292
  4736  0024AA                     l1292:
  4737  0024AA  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4738  0024AE  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4739  0024B2  0012               	return		;funcret
  4740  0024B4                     __end_of___lwmod:
  4741                           	opt stack 0
  4742                           tosu	equ	0xFFF
  4743                           tosh	equ	0xFFE
  4744                           tosl	equ	0xFFD
  4745                           pclath	equ	0xFFA
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postinc1	equ	0xFE6
  4755                           postdec1	equ	0xFE5
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           postdec2	equ	0xFDD
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function ___lwdiv *****************
  4766 ;; Defined at:
  4767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  dividend        2    0[COMRAM] unsigned int 
  4770 ;;  divisor         2    2[COMRAM] unsigned int 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  quotient        2    4[COMRAM] unsigned int 
  4773 ;;  counter         1    6[COMRAM] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  2    0[COMRAM] unsigned int 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4786 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4787 ;;Total ram usage:        7 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_sprintf
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text24
  4797  0023B8                     __ptext24:
  4798                           	opt stack 0
  4799  0023B8                     ___lwdiv:
  4800                           	opt stack 27
  4801                           
  4802                           ;incstack = 0
  4803  0023B8  0E00               	movlw	0
  4804  0023BA  6E06               	movwf	___lwdiv@quotient+1,c
  4805  0023BC  0E00               	movlw	0
  4806  0023BE  6E05               	movwf	___lwdiv@quotient,c
  4807  0023C0  5003               	movf	___lwdiv@divisor,w,c
  4808  0023C2  1004               	iorwf	___lwdiv@divisor+1,w,c
  4809  0023C4  B4D8               	btfsc	status,2,c
  4810  0023C6  D021               	goto	l1282
  4811  0023C8  0E01               	movlw	1
  4812  0023CA  6E07               	movwf	___lwdiv@counter,c
  4813  0023CC  D005               	goto	l2475
  4814  0023CE                     l2473:
  4815  0023CE  90D8               	bcf	status,0,c
  4816  0023D0  3603               	rlcf	___lwdiv@divisor,f,c
  4817  0023D2  3604               	rlcf	___lwdiv@divisor+1,f,c
  4818  0023D4  2A07               	incf	___lwdiv@counter,f,c
  4819  0023D6  D000               	goto	l2475
  4820  0023D8                     l2475:
  4821  0023D8  BE04               	btfsc	___lwdiv@divisor+1,7,c
  4822  0023DA  D002               	goto	l2477
  4823  0023DC  D7F8               	goto	l2473
  4824  0023DE  D000               	goto	l2477
  4825  0023E0                     l2477:
  4826  0023E0  90D8               	bcf	status,0,c
  4827  0023E2  3605               	rlcf	___lwdiv@quotient,f,c
  4828  0023E4  3606               	rlcf	___lwdiv@quotient+1,f,c
  4829  0023E6  5003               	movf	___lwdiv@divisor,w,c
  4830  0023E8  5C01               	subwf	___lwdiv@dividend,w,c
  4831  0023EA  5004               	movf	___lwdiv@divisor+1,w,c
  4832  0023EC  5802               	subwfb	___lwdiv@dividend+1,w,c
  4833  0023EE  A0D8               	btfss	status,0,c
  4834  0023F0  D006               	goto	l2485
  4835  0023F2  5003               	movf	___lwdiv@divisor,w,c
  4836  0023F4  5E01               	subwf	___lwdiv@dividend,f,c
  4837  0023F6  5004               	movf	___lwdiv@divisor+1,w,c
  4838  0023F8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4839  0023FA  8005               	bsf	___lwdiv@quotient,0,c
  4840  0023FC  D000               	goto	l2485
  4841  0023FE                     l2485:
  4842  0023FE  90D8               	bcf	status,0,c
  4843  002400  3204               	rrcf	___lwdiv@divisor+1,f,c
  4844  002402  3203               	rrcf	___lwdiv@divisor,f,c
  4845  002404  2E07               	decfsz	___lwdiv@counter,f,c
  4846  002406  D7EC               	goto	l2477
  4847  002408  D000               	goto	l1282
  4848  00240A                     l1282:
  4849  00240A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4850  00240E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4851  002412  0012               	return		;funcret
  4852  002414                     __end_of___lwdiv:
  4853                           	opt stack 0
  4854                           tosu	equ	0xFFF
  4855                           tosh	equ	0xFFE
  4856                           tosl	equ	0xFFD
  4857                           pclath	equ	0xFFA
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postinc1	equ	0xFE6
  4867                           postdec1	equ	0xFE5
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function _lcd_putrs *****************
  4878 ;; Defined at:
  4879 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  4882 ;;		 -> year(3), month(3), day(3), STR_25(2), 
  4883 ;;		 -> STR_24(2), STR_23(2), STR_22(2), STR_21(2), 
  4884 ;;		 -> STR_20(2), STR_19(2), imprimir_tecla@aux(20), STR_16(13), 
  4885 ;;		 -> STR_14(3), STR_13(19), STR_12(3), STR_11(18), 
  4886 ;;		 -> STR_10(13), STR_9(18), STR_7(8), STR_4(11), 
  4887 ;;		 -> STR_3(17), ingresar_password@clear(16), buffer2(20), 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4903 ;;Total ram usage:        2 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    4
  4906 ;; This function calls:
  4907 ;;		_lcd_putc
  4908 ;; This function is called by:
  4909 ;;		_caratula
  4910 ;;		_ingresar_password
  4911 ;;		_main
  4912 ;;		_imprimir_tecla
  4913 ;;		_guardar_tecla_presionada
  4914 ;;		_leer_teclado
  4915 ;;		_cambiar_dia
  4916 ;;		_cambiar_mes
  4917 ;;		_cambiar_anio
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text25
  4922  002414                     __ptext25:
  4923                           	opt stack 0
  4924  002414                     _lcd_putrs:
  4925                           	opt stack 23
  4926                           
  4927                           ;unmc_lcd_216.c: 223: while(*ptr){
  4928                           
  4929                           ;incstack = 0
  4930  002414  D015               	goto	l2511
  4931  002416                     l2507:
  4932                           
  4933                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  4934  002416  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  4935  00241A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  4936  00241E  6AF8               	clrf	tblptru,c
  4937  002420  0E0E               	movlw	(high __ramtop+-1)
  4938  002422  64F7               	cpfsgt	tblptrh,c
  4939  002424  D003               	bra	u1587
  4940  002426  0008               	tblrd		*
  4941  002428  50F5               	movf	tablat,w,c
  4942  00242A  D005               	bra	u1580
  4943  00242C                     u1587:
  4944  00242C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4945  002430  CFF7 FFEA          	movff	tblptrh,fsr0h
  4946  002434  50EF               	movf	indf0,w,c
  4947  002436                     u1580:
  4948  002436  EC5A  F012         	call	_lcd_putc
  4949  00243A  4A09               	infsnz	lcd_putrs@ptr,f,c
  4950  00243C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  4951  00243E  D000               	goto	l2511
  4952  002440                     l2511:
  4953  002440  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  4954  002444  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  4955  002448  6AF8               	clrf	tblptru,c
  4956  00244A  0E0E               	movlw	(high __ramtop+-1)
  4957  00244C  64F7               	cpfsgt	tblptrh,c
  4958  00244E  D003               	bra	u1597
  4959  002450  0008               	tblrd		*
  4960  002452  50F5               	movf	tablat,w,c
  4961  002454  D005               	bra	u1590
  4962  002456                     u1597:
  4963  002456  CFF6 FFE9          	movff	tblptrl,fsr0l
  4964  00245A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4965  00245E  50EF               	movf	indf0,w,c
  4966  002460                     u1590:
  4967  002460  0900               	iorlw	0
  4968  002462  A4D8               	btfss	status,2,c
  4969  002464  D7D8               	goto	l2507
  4970  002466  0012               	return		;funcret
  4971  002468                     __end_of_lcd_putrs:
  4972                           	opt stack 0
  4973                           tosu	equ	0xFFF
  4974                           tosh	equ	0xFFE
  4975                           tosl	equ	0xFFD
  4976                           pclath	equ	0xFFA
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           indf0	equ	0xFEF
  4984                           postinc0	equ	0xFEE
  4985                           fsr0h	equ	0xFEA
  4986                           fsr0l	equ	0xFE9
  4987                           wreg	equ	0xFE8
  4988                           postinc1	equ	0xFE6
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _lcd_putc *****************
  5000 ;; Defined at:
  5001 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  c               1    wreg     unsigned char 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  c               1    7[COMRAM] unsigned char 
  5006 ;; Return value:  Size  Location     Type
  5007 ;;		None               void
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5019 ;;Total ram usage:        1 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    3
  5022 ;; This function calls:
  5023 ;;		_lcd_gotoxy
  5024 ;;		_lcd_send_byte
  5025 ;; This function is called by:
  5026 ;;		_lcd_putrs
  5027 ;;		_lcd_puts
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text26
  5032  0024B4                     __ptext26:
  5033                           	opt stack 0
  5034  0024B4                     _lcd_putc:
  5035                           	opt stack 23
  5036                           
  5037                           ;incstack = 0
  5038                           ;lcd_putc@c stored from wreg
  5039  0024B4  6E08               	movwf	lcd_putc@c,c
  5040                           
  5041                           ;unmc_lcd_216.c: 173: switch(c){
  5042  0024B6  D018               	goto	l2439
  5043  0024B8                     l2429:
  5044                           
  5045                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  5046  0024B8  0E01               	movlw	1
  5047  0024BA  6E03               	movwf	lcd_send_byte@n,c
  5048  0024BC  0E00               	movlw	0
  5049  0024BE  EC0C  F013         	call	_lcd_send_byte
  5050                           
  5051                           ;unmc_lcd_216.c: 176: break;
  5052  0024C2  0012               	return	
  5053  0024C4                     l2431:
  5054                           
  5055                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  5056  0024C4  0E02               	movlw	2
  5057  0024C6  6E05               	movwf	lcd_gotoxy@y,c
  5058  0024C8  0E01               	movlw	1
  5059  0024CA  EC77  F013         	call	_lcd_gotoxy
  5060                           
  5061                           ;unmc_lcd_216.c: 179: break;
  5062  0024CE  0012               	return	
  5063  0024D0                     l2433:
  5064                           
  5065                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  5066  0024D0  0E10               	movlw	16
  5067  0024D2  6E03               	movwf	lcd_send_byte@n,c
  5068  0024D4  0E00               	movlw	0
  5069  0024D6  EC0C  F013         	call	_lcd_send_byte
  5070                           
  5071                           ;unmc_lcd_216.c: 182: break;
  5072  0024DA  0012               	return	
  5073  0024DC                     l2435:
  5074                           
  5075                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  5076  0024DC  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  5077  0024E0  0E01               	movlw	1
  5078  0024E2  EC0C  F013         	call	_lcd_send_byte
  5079                           
  5080                           ;unmc_lcd_216.c: 186: }
  5081                           
  5082                           ;unmc_lcd_216.c: 185: break;
  5083  0024E6  0012               	return	
  5084  0024E8                     l2439:
  5085  0024E8  5008               	movf	lcd_putc@c,w,c
  5086                           
  5087                           ; Switch size 1, requested type "space"
  5088                           ; Number of cases is 3, Range of values is 8 to 12
  5089                           ; switch strategies available:
  5090                           ; Name         Instructions Cycles
  5091                           ; simple_byte           10     6 (average)
  5092                           ;	Chosen strategy is simple_byte
  5093  0024EA  0A08               	xorlw	8	; case 8
  5094  0024EC  B4D8               	btfsc	status,2,c
  5095  0024EE  D7F0               	goto	l2433
  5096  0024F0  0A02               	xorlw	2	; case 10
  5097  0024F2  B4D8               	btfsc	status,2,c
  5098  0024F4  D7E7               	goto	l2431
  5099  0024F6  0A06               	xorlw	6	; case 12
  5100  0024F8  B4D8               	btfsc	status,2,c
  5101  0024FA  D7DE               	goto	l2429
  5102  0024FC  D7EF               	goto	l2435
  5103  0024FE  0012               	return		;funcret
  5104  002500                     __end_of_lcd_putc:
  5105                           	opt stack 0
  5106                           tosu	equ	0xFFF
  5107                           tosh	equ	0xFFE
  5108                           tosl	equ	0xFFD
  5109                           pclath	equ	0xFFA
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           indf0	equ	0xFEF
  5117                           postinc0	equ	0xFEE
  5118                           fsr0h	equ	0xFEA
  5119                           fsr0l	equ	0xFE9
  5120                           wreg	equ	0xFE8
  5121                           postinc1	equ	0xFE6
  5122                           postdec1	equ	0xFE5
  5123                           fsr1h	equ	0xFE2
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _lcd_gotoxy *****************
  5133 ;; Defined at:
  5134 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  x               1    wreg     unsigned char 
  5137 ;;  y               1    4[COMRAM] unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  x               1    5[COMRAM] unsigned char 
  5140 ;;  address         1    6[COMRAM] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5150 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;Total ram usage:        3 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    2
  5157 ;; This function calls:
  5158 ;;		_lcd_send_byte
  5159 ;; This function is called by:
  5160 ;;		_caratula
  5161 ;;		_ingresar_password
  5162 ;;		_main
  5163 ;;		_lcd_putc
  5164 ;;		_cambiar_dia
  5165 ;;		_cambiar_mes
  5166 ;;		_cambiar_anio
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text27
  5171  0026EE                     __ptext27:
  5172                           	opt stack 0
  5173  0026EE                     _lcd_gotoxy:
  5174                           	opt stack 23
  5175                           
  5176                           ;incstack = 0
  5177                           ;lcd_gotoxy@x stored from wreg
  5178  0026EE  6E06               	movwf	lcd_gotoxy@x,c
  5179                           
  5180                           ;unmc_lcd_216.c: 159: int8 address;
  5181                           ;unmc_lcd_216.c: 161: if(y != 1)
  5182  0026F0  0405               	decf	lcd_gotoxy@y,w,c
  5183  0026F2  B4D8               	btfsc	status,2,c
  5184  0026F4  D002               	goto	l2421
  5185                           
  5186                           ;unmc_lcd_216.c: 162: address = 0x40;
  5187  0026F6  0E40               	movlw	64
  5188  0026F8  D001               	goto	L3
  5189  0026FA                     l2421:
  5190                           
  5191                           ;unmc_lcd_216.c: 163: else
  5192                           ;unmc_lcd_216.c: 164: address=0;
  5193  0026FA  0E00               	movlw	0
  5194  0026FC                     L3:
  5195  0026FC  6E07               	movwf	lcd_gotoxy@address,c
  5196  0026FE  D000               	goto	l2423
  5197  002700                     l2423:
  5198                           
  5199                           ;unmc_lcd_216.c: 166: address += x-1;
  5200  002700  0406               	decf	lcd_gotoxy@x,w,c
  5201  002702  2607               	addwf	lcd_gotoxy@address,f,c
  5202                           
  5203                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  5204  002704  5007               	movf	lcd_gotoxy@address,w,c
  5205  002706  0980               	iorlw	128
  5206  002708  6E03               	movwf	lcd_send_byte@n,c
  5207  00270A  0E00               	movlw	0
  5208  00270C  EC0C  F013         	call	_lcd_send_byte
  5209  002710  0012               	return		;funcret
  5210  002712                     __end_of_lcd_gotoxy:
  5211                           	opt stack 0
  5212                           tosu	equ	0xFFF
  5213                           tosh	equ	0xFFE
  5214                           tosl	equ	0xFFD
  5215                           pclath	equ	0xFFA
  5216                           tblptru	equ	0xFF8
  5217                           tblptrh	equ	0xFF7
  5218                           tblptrl	equ	0xFF6
  5219                           tablat	equ	0xFF5
  5220                           prodh	equ	0xFF4
  5221                           prodl	equ	0xFF3
  5222                           indf0	equ	0xFEF
  5223                           postinc0	equ	0xFEE
  5224                           fsr0h	equ	0xFEA
  5225                           fsr0l	equ	0xFE9
  5226                           wreg	equ	0xFE8
  5227                           postinc1	equ	0xFE6
  5228                           postdec1	equ	0xFE5
  5229                           fsr1h	equ	0xFE2
  5230                           fsr1l	equ	0xFE1
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function _Setup *****************
  5239 ;; Defined at:
  5240 ;;		line 55 in file "main.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    3
  5261 ;; This function calls:
  5262 ;;		_Write_RTC
  5263 ;;		_lcd_comand
  5264 ;;		_lcd_init
  5265 ;; This function is called by:
  5266 ;;		_main
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text28
  5271  002500                     __ptext28:
  5272                           	opt stack 0
  5273  002500                     _Setup:
  5274                           	opt stack 27
  5275                           
  5276                           ;main.c: 57: OSCTUNEbits.INTSRC=1;
  5277                           
  5278                           ;incstack = 0
  5279  002500  8E9B               	bsf	3995,7,c	;volatile
  5280                           
  5281                           ;main.c: 58: OSCTUNEbits.PLLEN=0;
  5282  002502  9C9B               	bcf	3995,6,c	;volatile
  5283                           
  5284                           ;main.c: 59: OSCCONbits.IRCF0=1;
  5285  002504  88D3               	bsf	4051,4,c	;volatile
  5286                           
  5287                           ;main.c: 60: OSCCONbits.IRCF1=1;
  5288  002506  8AD3               	bsf	4051,5,c	;volatile
  5289                           
  5290                           ;main.c: 61: OSCCONbits.IRCF2=1;
  5291  002508  8CD3               	bsf	4051,6,c	;volatile
  5292                           
  5293                           ;main.c: 62: OSCCONbits.SCS0=0;
  5294  00250A  90D3               	bcf	4051,0,c	;volatile
  5295                           
  5296                           ;main.c: 63: OSCCONbits.SCS1=0;
  5297  00250C  92D3               	bcf	4051,1,c	;volatile
  5298                           
  5299                           ;main.c: 64: TRISA = 0b11110000;
  5300  00250E  0EF0               	movlw	240
  5301  002510  6E92               	movwf	3986,c	;volatile
  5302                           
  5303                           ;main.c: 65: TRISB = 0;
  5304  002512  0E00               	movlw	0
  5305  002514  6E93               	movwf	3987,c	;volatile
  5306                           
  5307                           ;main.c: 66: TRISC = 0b00000111;
  5308  002516  0E07               	movlw	7
  5309  002518  6E94               	movwf	3988,c	;volatile
  5310                           
  5311                           ;main.c: 70: ANCON0=0b11111111;
  5312  00251A  010F               	movlb	15	; () banked
  5313  00251C  6948               	setf	72,b	;volatile
  5314                           
  5315                           ; BSR set to: 15
  5316                           ;main.c: 72: ANCON1=0b11111111;
  5317  00251E  010F               	movlb	15	; () banked
  5318  002520  6949               	setf	73,b	;volatile
  5319                           
  5320                           ;main.c: 73: ADCON0=0b00101101;
  5321  002522  0E2D               	movlw	45
  5322  002524  6EC2               	movwf	4034,c	;volatile
  5323                           
  5324                           ;main.c: 74: ADCON1=0b00010000;
  5325  002526  0E10               	movlw	16
  5326  002528  6EC1               	movwf	4033,c	;volatile
  5327                           
  5328                           ; BSR set to: 15
  5329                           ;main.c: 75: RTCCFGbits.RTCEN=1;
  5330  00252A  010F               	movlb	15	; () banked
  5331  00252C  8F3F               	bsf	63,7,b	;volatile
  5332                           
  5333                           ; BSR set to: 15
  5334                           ;main.c: 76: RTCCFGbits.RTCWREN=1;
  5335  00252E  010F               	movlb	15	; () banked
  5336  002530  8B3F               	bsf	63,5,b	;volatile
  5337                           
  5338                           ; BSR set to: 15
  5339                           ;main.c: 77: T1CONbits.T1OSCEN=1;
  5340  002532  86CD               	bsf	4045,3,c	;volatile
  5341                           
  5342                           ; BSR set to: 15
  5343                           ;main.c: 78: Write_RTC();
  5344  002534  ECFD  F009         	call	_Write_RTC	;wreg free
  5345                           
  5346                           ;main.c: 79: lcd_init();
  5347  002538  EC49  F010         	call	_lcd_init	;wreg free
  5348                           
  5349                           ;main.c: 80: lcd_comand(0b00001100);
  5350  00253C  0E0C               	movlw	12
  5351  00253E  ECCF  F013         	call	_lcd_comand
  5352                           
  5353                           ;main.c: 81: LATBbits.LATB1 = 1;;
  5354  002542  828A               	bsf	3978,1,c	;volatile
  5355                           
  5356                           ;main.c: 82: LATBbits.LATB0 = 1;;
  5357  002544  808A               	bsf	3978,0,c	;volatile
  5358  002546  0012               	return		;funcret
  5359  002548                     __end_of_Setup:
  5360                           	opt stack 0
  5361                           tosu	equ	0xFFF
  5362                           tosh	equ	0xFFE
  5363                           tosl	equ	0xFFD
  5364                           pclath	equ	0xFFA
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           indf0	equ	0xFEF
  5372                           postinc0	equ	0xFEE
  5373                           fsr0h	equ	0xFEA
  5374                           fsr0l	equ	0xFE9
  5375                           wreg	equ	0xFE8
  5376                           postinc1	equ	0xFE6
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _lcd_init *****************
  5388 ;; Defined at:
  5389 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  i               1    4[COMRAM] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;		None               void
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5407 ;;Total ram usage:        1 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    2
  5410 ;; This function calls:
  5411 ;;		_Delay1KTCYx
  5412 ;;		_lcd_send_byte
  5413 ;;		_lcd_send_nibble
  5414 ;; This function is called by:
  5415 ;;		_Setup
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text29
  5420  002092                     __ptext29:
  5421                           	opt stack 0
  5422  002092                     _lcd_init:
  5423                           	opt stack 27
  5424                           
  5425                           ;unmc_lcd_216.c: 120: int8 i;
  5426                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  5427                           
  5428                           ;incstack = 0
  5429  002092  9693               	bcf	3987,3,c	;volatile
  5430                           
  5431                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  5432  002094  9493               	bcf	3987,2,c	;volatile
  5433                           
  5434                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  5435  002096  968A               	bcf	3978,3,c	;volatile
  5436                           
  5437                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  5438  002098  948A               	bcf	3978,2,c	;volatile
  5439                           
  5440                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  5441  00209A  9893               	bcf	3987,4,c	;volatile
  5442                           
  5443                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  5444  00209C  9A93               	bcf	3987,5,c	;volatile
  5445                           
  5446                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  5447  00209E  9C93               	bcf	3987,6,c	;volatile
  5448                           
  5449                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  5450  0020A0  9E93               	bcf	3987,7,c	;volatile
  5451                           
  5452                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  5453  0020A2  0E0A               	movlw	10
  5454  0020A4  ECB4  F013         	call	_Delay1KTCYx
  5455                           
  5456                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  5457  0020A8  0E0A               	movlw	10
  5458  0020AA  ECB4  F013         	call	_Delay1KTCYx
  5459                           
  5460                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  5461  0020AE  0E0A               	movlw	10
  5462  0020B0  ECB4  F013         	call	_Delay1KTCYx
  5463                           
  5464                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  5465  0020B4  0E00               	movlw	0
  5466  0020B6  6E05               	movwf	lcd_init@i,c
  5467  0020B8                     l3005:
  5468  0020B8  0E02               	movlw	2
  5469  0020BA  6405               	cpfsgt	lcd_init@i,c
  5470  0020BC  D001               	goto	l3009
  5471  0020BE  D008               	goto	l3015
  5472  0020C0                     l3009:
  5473                           
  5474                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  5475  0020C0  0E03               	movlw	3
  5476  0020C2  ECC4  F010         	call	_lcd_send_nibble
  5477                           
  5478                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  5479  0020C6  0E0A               	movlw	10
  5480  0020C8  ECB4  F013         	call	_Delay1KTCYx
  5481  0020CC  2A05               	incf	lcd_init@i,f,c
  5482  0020CE  D7F4               	goto	l3005
  5483  0020D0                     l3015:
  5484                           
  5485                           ;unmc_lcd_216.c: 146: }
  5486                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  5487  0020D0  0E02               	movlw	2
  5488  0020D2  ECC4  F010         	call	_lcd_send_nibble
  5489                           
  5490                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  5491  0020D6  0E00               	movlw	0
  5492  0020D8  6E05               	movwf	lcd_init@i,c
  5493  0020DA  0E03               	movlw	3
  5494  0020DC  6405               	cpfsgt	lcd_init@i,c
  5495  0020DE  D002               	goto	l3023
  5496  0020E0  0012               	return	
  5497  0020E2  0012               	return	
  5498  0020E4                     l3023:
  5499                           
  5500                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  5501  0020E4  5005               	movf	lcd_init@i,w,c
  5502  0020E6  0D01               	mullw	1
  5503  0020E8  0E0B               	movlw	low _LCD_INIT_STRING
  5504  0020EA  24F3               	addwf	prodl,w,c
  5505  0020EC  6EF6               	movwf	tblptrl,c
  5506  0020EE  0E0F               	movlw	high _LCD_INIT_STRING
  5507  0020F0  20F4               	addwfc	prodh,w,c
  5508  0020F2  6EF7               	movwf	tblptrh,c
  5509  0020F4                     	if	0	;There are less than 3 active tblptr bytes
  5510  0020F4                     	endif
  5511  0020F4  0008               	tblrd		*
  5512  0020F6  CFF5 F003          	movff	tablat,lcd_send_byte@n
  5513  0020FA  0E00               	movlw	0
  5514  0020FC  EC0C  F013         	call	_lcd_send_byte
  5515                           
  5516                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  5517  002100  0E0A               	movlw	10
  5518  002102  ECB4  F013         	call	_Delay1KTCYx
  5519  002106  2A05               	incf	lcd_init@i,f,c
  5520  002108  0E03               	movlw	3
  5521  00210A  6405               	cpfsgt	lcd_init@i,c
  5522  00210C  D7EB               	goto	l3023
  5523  00210E  0012               	return	
  5524  002110  0012               	return		;funcret
  5525  002112                     __end_of_lcd_init:
  5526                           	opt stack 0
  5527                           tosu	equ	0xFFF
  5528                           tosh	equ	0xFFE
  5529                           tosl	equ	0xFFD
  5530                           pclath	equ	0xFFA
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           indf0	equ	0xFEF
  5538                           postinc0	equ	0xFEE
  5539                           fsr0h	equ	0xFEA
  5540                           fsr0l	equ	0xFE9
  5541                           wreg	equ	0xFE8
  5542                           postinc1	equ	0xFE6
  5543                           postdec1	equ	0xFE5
  5544                           fsr1h	equ	0xFE2
  5545                           fsr1l	equ	0xFE1
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           postdec2	equ	0xFDD
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _Delay1KTCYx *****************
  5554 ;; Defined at:
  5555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  unit            1    wreg     unsigned char 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  unit            1    0[COMRAM] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;		None               void
  5562 ;; Registers used:
  5563 ;;		wreg
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5573 ;;Total ram usage:        1 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_lcd_init
  5579 ;;		_DelayPORXLCD
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	text30
  5584  002768                     __ptext30:
  5585                           	opt stack 0
  5586  002768                     _Delay1KTCYx:
  5587                           	opt stack 28
  5588                           
  5589                           ;incstack = 0
  5590                           ;Delay1KTCYx@unit stored from wreg
  5591  002768  6E01               	movwf	Delay1KTCYx@unit,c
  5592  00276A  0EFA               	movlw	250
  5593  00276C                     u2857:
  5594  00276C  F000               	nop	
  5595  00276E  2EE8               	decfsz	wreg,f,c
  5596  002770  D7FD               	goto	u2857
  5597  002772  2E01               	decfsz	Delay1KTCYx@unit,f,c
  5598  002774  D7FA               	goto	l2905
  5599  002776  0012               	return	
  5600  002778  0012               	return		;funcret
  5601  00277A                     __end_of_Delay1KTCYx:
  5602                           	opt stack 0
  5603                           tosu	equ	0xFFF
  5604                           tosh	equ	0xFFE
  5605                           tosl	equ	0xFFD
  5606                           pclath	equ	0xFFA
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           indf0	equ	0xFEF
  5614                           postinc0	equ	0xFEE
  5615                           fsr0h	equ	0xFEA
  5616                           fsr0l	equ	0xFE9
  5617                           wreg	equ	0xFE8
  5618                           postinc1	equ	0xFE6
  5619                           postdec1	equ	0xFE5
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _lcd_comand *****************
  5630 ;; Defined at:
  5631 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  d               1    wreg     unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  d               1    4[COMRAM] unsigned char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;		None               void
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5649 ;;Total ram usage:        1 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    2
  5652 ;; This function calls:
  5653 ;;		_lcd_send_byte
  5654 ;; This function is called by:
  5655 ;;		_caratula
  5656 ;;		_Setup
  5657 ;;		_ingresar_password
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text31
  5662  00279E                     __ptext31:
  5663                           	opt stack 0
  5664  00279E                     _lcd_comand:
  5665                           	opt stack 27
  5666                           
  5667                           ;incstack = 0
  5668                           ;lcd_comand@d stored from wreg
  5669  00279E  6E05               	movwf	lcd_comand@d,c
  5670                           
  5671                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  5672  0027A0  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  5673  0027A4  0E00               	movlw	0
  5674  0027A6  EC0C  F013         	call	_lcd_send_byte
  5675  0027AA  0012               	return		;funcret
  5676  0027AC                     __end_of_lcd_comand:
  5677                           	opt stack 0
  5678                           tosu	equ	0xFFF
  5679                           tosh	equ	0xFFE
  5680                           tosl	equ	0xFFD
  5681                           pclath	equ	0xFFA
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           indf0	equ	0xFEF
  5689                           postinc0	equ	0xFEE
  5690                           fsr0h	equ	0xFEA
  5691                           fsr0l	equ	0xFE9
  5692                           wreg	equ	0xFE8
  5693                           postinc1	equ	0xFE6
  5694                           postdec1	equ	0xFE5
  5695                           fsr1h	equ	0xFE2
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           postinc2	equ	0xFDE
  5699                           postdec2	equ	0xFDD
  5700                           fsr2h	equ	0xFDA
  5701                           fsr2l	equ	0xFD9
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _lcd_send_byte *****************
  5705 ;; Defined at:
  5706 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  address         1    wreg     unsigned char 
  5709 ;;  n               1    2[COMRAM] unsigned char 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  address         1    3[COMRAM] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;		None               void
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5725 ;;Total ram usage:        2 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    1
  5728 ;; This function calls:
  5729 ;;		_Delay100TCYx
  5730 ;;		_lcd_send_nibble
  5731 ;; This function is called by:
  5732 ;;		_lcd_init
  5733 ;;		_lcd_gotoxy
  5734 ;;		_lcd_putc
  5735 ;;		_lcd_comand
  5736 ;;		_lcd_setcursor_vb
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text32
  5741  002618                     __ptext32:
  5742                           	opt stack 0
  5743  002618                     _lcd_send_byte:
  5744                           	opt stack 24
  5745                           
  5746                           ;incstack = 0
  5747                           ;lcd_send_byte@address stored from wreg
  5748  002618  6E04               	movwf	lcd_send_byte@address,c
  5749                           
  5750                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  5751  00261A  968A               	bcf	3978,3,c	;volatile
  5752                           
  5753                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  5754  00261C  0E02               	movlw	2
  5755  00261E  ECBD  F013         	call	_Delay100TCYx
  5756                           
  5757                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  5758  002622  9893               	bcf	3987,4,c	;volatile
  5759                           
  5760                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  5761  002624  9A93               	bcf	3987,5,c	;volatile
  5762                           
  5763                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  5764  002626  9C93               	bcf	3987,6,c	;volatile
  5765                           
  5766                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  5767  002628  9E93               	bcf	3987,7,c	;volatile
  5768                           
  5769                           ;unmc_lcd_216.c: 101: if(address)
  5770  00262A  5004               	movf	lcd_send_byte@address,w,c
  5771  00262C  B4D8               	btfsc	status,2,c
  5772  00262E  D002               	goto	l213
  5773                           
  5774                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  5775  002630  868A               	bsf	3978,3,c	;volatile
  5776  002632  D001               	goto	l214
  5777  002634                     l213:
  5778                           
  5779                           ;unmc_lcd_216.c: 103: else
  5780                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  5781  002634  968A               	bcf	3978,3,c	;volatile
  5782  002636                     l214:
  5783                           
  5784                           ;unmc_lcd_216.c: 106: __nop();
  5785  002636  F000               	nop	
  5786                           
  5787                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  5788  002638  3803               	swapf	lcd_send_byte@n,w,c
  5789  00263A  0B0F               	andlw	15
  5790  00263C  ECC4  F010         	call	_lcd_send_nibble
  5791                           
  5792                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  5793  002640  5003               	movf	lcd_send_byte@n,w,c
  5794  002642  0B0F               	andlw	15
  5795  002644  ECC4  F010         	call	_lcd_send_nibble
  5796  002648  0012               	return		;funcret
  5797  00264A                     __end_of_lcd_send_byte:
  5798                           	opt stack 0
  5799                           tosu	equ	0xFFF
  5800                           tosh	equ	0xFFE
  5801                           tosl	equ	0xFFD
  5802                           pclath	equ	0xFFA
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           indf0	equ	0xFEF
  5810                           postinc0	equ	0xFEE
  5811                           fsr0h	equ	0xFEA
  5812                           fsr0l	equ	0xFE9
  5813                           wreg	equ	0xFE8
  5814                           postinc1	equ	0xFE6
  5815                           postdec1	equ	0xFE5
  5816                           fsr1h	equ	0xFE2
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function _lcd_send_nibble *****************
  5826 ;; Defined at:
  5827 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  nibble          1    wreg     unsigned char 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  nibble          1    1[COMRAM] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;		None               void
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5845 ;;Total ram usage:        2 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; This function calls:
  5848 ;;		Nothing
  5849 ;; This function is called by:
  5850 ;;		_lcd_send_byte
  5851 ;;		_lcd_init
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text33
  5856  002188                     __ptext33:
  5857                           	opt stack 0
  5858  002188                     _lcd_send_nibble:
  5859                           	opt stack 24
  5860                           
  5861                           ;incstack = 0
  5862                           ;lcd_send_nibble@nibble stored from wreg
  5863  002188  6E02               	movwf	lcd_send_nibble@nibble,c
  5864                           
  5865                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  5866  00218A  A002               	btfss	lcd_send_nibble@nibble,0,c
  5867  00218C  D003               	goto	u1400
  5868  00218E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5869  002190  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5870  002192  D001               	goto	u1418
  5871  002194                     u1400:
  5872  002194  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5873  002196                     u1418:
  5874  002196  3A01               	swapf	??_lcd_send_nibble,f,c
  5875  002198  508A               	movf	3978,w,c	;volatile
  5876  00219A  1801               	xorwf	??_lcd_send_nibble,w,c
  5877  00219C  0BEF               	andlw	-17
  5878  00219E  1801               	xorwf	??_lcd_send_nibble,w,c
  5879  0021A0  6E8A               	movwf	3978,c	;volatile
  5880                           
  5881                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  5882  0021A2  A202               	btfss	lcd_send_nibble@nibble,1,c
  5883  0021A4  D003               	goto	u1420
  5884  0021A6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5885  0021A8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5886  0021AA  D001               	goto	u1438
  5887  0021AC                     u1420:
  5888  0021AC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5889  0021AE                     u1438:
  5890  0021AE  3A01               	swapf	??_lcd_send_nibble,f,c
  5891  0021B0  4601               	rlncf	??_lcd_send_nibble,f,c
  5892  0021B2  508A               	movf	3978,w,c	;volatile
  5893  0021B4  1801               	xorwf	??_lcd_send_nibble,w,c
  5894  0021B6  0BDF               	andlw	-33
  5895  0021B8  1801               	xorwf	??_lcd_send_nibble,w,c
  5896  0021BA  6E8A               	movwf	3978,c	;volatile
  5897                           
  5898                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  5899  0021BC  A402               	btfss	lcd_send_nibble@nibble,2,c
  5900  0021BE  D003               	goto	u1440
  5901  0021C0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5902  0021C2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5903  0021C4  D001               	goto	u1458
  5904  0021C6                     u1440:
  5905  0021C6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5906  0021C8                     u1458:
  5907  0021C8  3A01               	swapf	??_lcd_send_nibble,f,c
  5908  0021CA  4601               	rlncf	??_lcd_send_nibble,f,c
  5909  0021CC  4601               	rlncf	??_lcd_send_nibble,f,c
  5910  0021CE  508A               	movf	3978,w,c	;volatile
  5911  0021D0  1801               	xorwf	??_lcd_send_nibble,w,c
  5912  0021D2  0BBF               	andlw	-65
  5913  0021D4  1801               	xorwf	??_lcd_send_nibble,w,c
  5914  0021D6  6E8A               	movwf	3978,c	;volatile
  5915                           
  5916                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  5917  0021D8  A602               	btfss	lcd_send_nibble@nibble,3,c
  5918  0021DA  D003               	goto	u1460
  5919  0021DC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5920  0021DE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5921  0021E0  D001               	goto	u1478
  5922  0021E2                     u1460:
  5923  0021E2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5924  0021E4                     u1478:
  5925  0021E4  3201               	rrcf	??_lcd_send_nibble,f,c
  5926  0021E6  3201               	rrcf	??_lcd_send_nibble,f,c
  5927  0021E8  508A               	movf	3978,w,c	;volatile
  5928  0021EA  1801               	xorwf	??_lcd_send_nibble,w,c
  5929  0021EC  0B7F               	andlw	-129
  5930  0021EE  1801               	xorwf	??_lcd_send_nibble,w,c
  5931  0021F0  6E8A               	movwf	3978,c	;volatile
  5932                           
  5933                           ;unmc_lcd_216.c: 32: __nop();
  5934  0021F2  F000               	nop	
  5935                           
  5936                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  5937  0021F4  848A               	bsf	3978,2,c	;volatile
  5938                           
  5939                           ;unmc_lcd_216.c: 34: __nop();__nop();
  5940  0021F6  F000               	nop	
  5941  0021F8  F000               	nop	
  5942                           
  5943                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  5944  0021FA  948A               	bcf	3978,2,c	;volatile
  5945  0021FC  0012               	return		;funcret
  5946  0021FE                     __end_of_lcd_send_nibble:
  5947                           	opt stack 0
  5948                           tosu	equ	0xFFF
  5949                           tosh	equ	0xFFE
  5950                           tosl	equ	0xFFD
  5951                           pclath	equ	0xFFA
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           indf0	equ	0xFEF
  5959                           postinc0	equ	0xFEE
  5960                           fsr0h	equ	0xFEA
  5961                           fsr0l	equ	0xFE9
  5962                           wreg	equ	0xFE8
  5963                           postinc1	equ	0xFE6
  5964                           postdec1	equ	0xFE5
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _Delay100TCYx *****************
  5975 ;; Defined at:
  5976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  unit            1    wreg     unsigned char 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  unit            1    0[COMRAM] unsigned char 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;		None               void
  5983 ;; Registers used:
  5984 ;;		wreg
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5994 ;;Total ram usage:        1 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_lcd_send_byte
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text34
  6004  00277A                     __ptext34:
  6005                           	opt stack 0
  6006  00277A                     _Delay100TCYx:
  6007                           	opt stack 24
  6008                           
  6009                           ;incstack = 0
  6010                           ;Delay100TCYx@unit stored from wreg
  6011  00277A  6E01               	movwf	Delay100TCYx@unit,c
  6012  00277C  0E21               	movlw	33
  6013  00277E                     u2867:
  6014  00277E  2EE8               	decfsz	wreg,f,c
  6015  002780  D7FE               	goto	u2867
  6016  002782  F000               	nop	
  6017  002784  2E01               	decfsz	Delay100TCYx@unit,f,c
  6018  002786  D7FA               	goto	l2395
  6019  002788  0012               	return	
  6020  00278A  0012               	return		;funcret
  6021  00278C                     __end_of_Delay100TCYx:
  6022                           	opt stack 0
  6023                           tosu	equ	0xFFF
  6024                           tosh	equ	0xFFE
  6025                           tosl	equ	0xFFD
  6026                           pclath	equ	0xFFA
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           indf0	equ	0xFEF
  6034                           postinc0	equ	0xFEE
  6035                           fsr0h	equ	0xFEA
  6036                           fsr0l	equ	0xFE9
  6037                           wreg	equ	0xFE8
  6038                           postinc1	equ	0xFE6
  6039                           postdec1	equ	0xFE5
  6040                           fsr1h	equ	0xFE2
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           postinc2	equ	0xFDE
  6044                           postdec2	equ	0xFDD
  6045                           fsr2h	equ	0xFDA
  6046                           fsr2l	equ	0xFD9
  6047                           status	equ	0xFD8
  6048                           
  6049 ;; *************** function _Write_RTC *****************
  6050 ;; Defined at:
  6051 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;		None               void
  6058 ;; Registers used:
  6059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6069 ;;Total ram usage:        0 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    2
  6072 ;; This function calls:
  6073 ;;		_RtccWrOn
  6074 ;;		_RtccWriteDate
  6075 ;;		_RtccWriteTime
  6076 ;;		___awdiv
  6077 ;; This function is called by:
  6078 ;;		_Setup
  6079 ;;		_cambiar_dia
  6080 ;;		_cambiar_mes
  6081 ;;		_cambiar_anio
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text35
  6086  0013FA                     __ptext35:
  6087                           	opt stack 0
  6088  0013FA                     _Write_RTC:
  6089                           	opt stack 25
  6090                           
  6091                           ;unmc_rtcc_02.c: 37: RtccWrOn();
  6092                           
  6093                           ;incstack = 0
  6094  0013FA  ECC6  F013         	call	_RtccWrOn	;wreg free
  6095                           
  6096                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
  6097  0013FE  80A3               	bsf	4003,0,c	;volatile
  6098                           
  6099                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
  6100  001400  C092  F001         	movff	_segundo,___awdiv@dividend
  6101  001404  C093  F002         	movff	_segundo+1,___awdiv@dividend+1
  6102  001408  0E00               	movlw	0
  6103  00140A  6E04               	movwf	___awdiv@divisor+1,c
  6104  00140C  0E0A               	movlw	10
  6105  00140E  6E03               	movwf	___awdiv@divisor,c
  6106  001410  ECB7  F00F         	call	___awdiv	;wreg free
  6107  001414  5001               	movf	?___awdiv,w,c
  6108  001416  0100               	movlb	0	; () banked
  6109  001418  6FD8               	movwf	_segundo_d& (0+255),b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
  6113  00141A  0100               	movlb	0	; () banked
  6114  00141C  51D8               	movf	_segundo_d& (0+255),w,b
  6115  00141E  0D0A               	mullw	10
  6116  001420  50F3               	movf	prodl,w,c
  6117  001422  0800               	sublw	0
  6118  001424  0100               	movlb	0	; () banked
  6119  001426  2592               	addwf	_segundo& (0+255),w,b
  6120  001428  0100               	movlb	0	; () banked
  6121  00142A  6FD9               	movwf	_segundo_u& (0+255),b
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
  6125  00142C  0100               	movlb	0	; () banked
  6126  00142E  51D8               	movf	_segundo_d& (0+255),w,b
  6127  001430  0D10               	mullw	16
  6128  001432  50F3               	movf	prodl,w,c
  6129  001434  0100               	movlb	0	; () banked
  6130  001436  25D9               	addwf	_segundo_u& (0+255),w,b
  6131  001438  0100               	movlb	0	; () banked
  6132  00143A  6FAB               	movwf	(_RtccTime+1)& (0+255),b
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
  6136  00143C  C0CB  F001         	movff	_minuto,___awdiv@dividend
  6137  001440  C0CC  F002         	movff	_minuto+1,___awdiv@dividend+1
  6138  001444  0E00               	movlw	0
  6139  001446  6E04               	movwf	___awdiv@divisor+1,c
  6140  001448  0E0A               	movlw	10
  6141  00144A  6E03               	movwf	___awdiv@divisor,c
  6142  00144C  ECB7  F00F         	call	___awdiv	;wreg free
  6143  001450  5001               	movf	?___awdiv,w,c
  6144  001452  0100               	movlb	0	; () banked
  6145  001454  6FD6               	movwf	_minuto_d& (0+255),b
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
  6149  001456  0100               	movlb	0	; () banked
  6150  001458  51D6               	movf	_minuto_d& (0+255),w,b
  6151  00145A  0D0A               	mullw	10
  6152  00145C  50F3               	movf	prodl,w,c
  6153  00145E  0800               	sublw	0
  6154  001460  0100               	movlb	0	; () banked
  6155  001462  25CB               	addwf	_minuto& (0+255),w,b
  6156  001464  0100               	movlb	0	; () banked
  6157  001466  6FD7               	movwf	_minuto_u& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
  6161  001468  0100               	movlb	0	; () banked
  6162  00146A  51D6               	movf	_minuto_d& (0+255),w,b
  6163  00146C  0D10               	mullw	16
  6164  00146E  50F3               	movf	prodl,w,c
  6165  001470  0100               	movlb	0	; () banked
  6166  001472  25D7               	addwf	_minuto_u& (0+255),w,b
  6167  001474  0100               	movlb	0	; () banked
  6168  001476  6FAC               	movwf	(_RtccTime+2)& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
  6172  001478  C0C7  F001         	movff	_hora,___awdiv@dividend
  6173  00147C  C0C8  F002         	movff	_hora+1,___awdiv@dividend+1
  6174  001480  0E00               	movlw	0
  6175  001482  6E04               	movwf	___awdiv@divisor+1,c
  6176  001484  0E0A               	movlw	10
  6177  001486  6E03               	movwf	___awdiv@divisor,c
  6178  001488  ECB7  F00F         	call	___awdiv	;wreg free
  6179  00148C  5001               	movf	?___awdiv,w,c
  6180  00148E  0100               	movlb	0	; () banked
  6181  001490  6FD2               	movwf	_hora_d& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
  6185  001492  0100               	movlb	0	; () banked
  6186  001494  51D2               	movf	_hora_d& (0+255),w,b
  6187  001496  0D0A               	mullw	10
  6188  001498  50F3               	movf	prodl,w,c
  6189  00149A  0800               	sublw	0
  6190  00149C  0100               	movlb	0	; () banked
  6191  00149E  25C7               	addwf	_hora& (0+255),w,b
  6192  0014A0  0100               	movlb	0	; () banked
  6193  0014A2  6FD3               	movwf	_hora_u& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
  6197  0014A4  0100               	movlb	0	; () banked
  6198  0014A6  51D2               	movf	_hora_d& (0+255),w,b
  6199  0014A8  0D10               	mullw	16
  6200  0014AA  50F3               	movf	prodl,w,c
  6201  0014AC  0100               	movlb	0	; () banked
  6202  0014AE  25D3               	addwf	_hora_u& (0+255),w,b
  6203  0014B0  0100               	movlb	0	; () banked
  6204  0014B2  6FAD               	movwf	(_RtccTime+3)& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
  6208  0014B4  C0C1  F001         	movff	_anio,___awdiv@dividend
  6209  0014B8  C0C2  F002         	movff	_anio+1,___awdiv@dividend+1
  6210  0014BC  0E00               	movlw	0
  6211  0014BE  6E04               	movwf	___awdiv@divisor+1,c
  6212  0014C0  0E0A               	movlw	10
  6213  0014C2  6E03               	movwf	___awdiv@divisor,c
  6214  0014C4  ECB7  F00F         	call	___awdiv	;wreg free
  6215  0014C8  5001               	movf	?___awdiv,w,c
  6216  0014CA  0100               	movlb	0	; () banked
  6217  0014CC  6FCD               	movwf	_anio_d& (0+255),b
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
  6221  0014CE  0100               	movlb	0	; () banked
  6222  0014D0  51CD               	movf	_anio_d& (0+255),w,b
  6223  0014D2  0D0A               	mullw	10
  6224  0014D4  50F3               	movf	prodl,w,c
  6225  0014D6  0800               	sublw	0
  6226  0014D8  0100               	movlb	0	; () banked
  6227  0014DA  25C1               	addwf	_anio& (0+255),w,b
  6228  0014DC  0100               	movlb	0	; () banked
  6229  0014DE  6FCE               	movwf	_anio_u& (0+255),b
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
  6233  0014E0  0100               	movlb	0	; () banked
  6234  0014E2  51CD               	movf	_anio_d& (0+255),w,b
  6235  0014E4  0D10               	mullw	16
  6236  0014E6  50F3               	movf	prodl,w,c
  6237  0014E8  0100               	movlb	0	; () banked
  6238  0014EA  25CE               	addwf	_anio_u& (0+255),w,b
  6239  0014EC  6E58               	movwf	_RtccDate+3,c
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
  6243  0014EE  C0C9  F001         	movff	_mes,___awdiv@dividend
  6244  0014F2  C0CA  F002         	movff	_mes+1,___awdiv@dividend+1
  6245  0014F6  0E00               	movlw	0
  6246  0014F8  6E04               	movwf	___awdiv@divisor+1,c
  6247  0014FA  0E0A               	movlw	10
  6248  0014FC  6E03               	movwf	___awdiv@divisor,c
  6249  0014FE  ECB7  F00F         	call	___awdiv	;wreg free
  6250  001502  5001               	movf	?___awdiv,w,c
  6251  001504  0100               	movlb	0	; () banked
  6252  001506  6FD4               	movwf	_mes_d& (0+255),b
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
  6256  001508  0100               	movlb	0	; () banked
  6257  00150A  51D4               	movf	_mes_d& (0+255),w,b
  6258  00150C  0D0A               	mullw	10
  6259  00150E  50F3               	movf	prodl,w,c
  6260  001510  0800               	sublw	0
  6261  001512  0100               	movlb	0	; () banked
  6262  001514  25C9               	addwf	_mes& (0+255),w,b
  6263  001516  0100               	movlb	0	; () banked
  6264  001518  6FD5               	movwf	_mes_u& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
  6268  00151A  0100               	movlb	0	; () banked
  6269  00151C  51D4               	movf	_mes_d& (0+255),w,b
  6270  00151E  0D10               	mullw	16
  6271  001520  50F3               	movf	prodl,w,c
  6272  001522  0100               	movlb	0	; () banked
  6273  001524  25D5               	addwf	_mes_u& (0+255),w,b
  6274  001526  6E57               	movwf	_RtccDate+2,c
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
  6278  001528  C0C3  F001         	movff	_dia,___awdiv@dividend
  6279  00152C  C0C4  F002         	movff	_dia+1,___awdiv@dividend+1
  6280  001530  0E00               	movlw	0
  6281  001532  6E04               	movwf	___awdiv@divisor+1,c
  6282  001534  0E0A               	movlw	10
  6283  001536  6E03               	movwf	___awdiv@divisor,c
  6284  001538  ECB7  F00F         	call	___awdiv	;wreg free
  6285  00153C  5001               	movf	?___awdiv,w,c
  6286  00153E  0100               	movlb	0	; () banked
  6287  001540  6FD0               	movwf	_fecha_d& (0+255),b
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
  6291  001542  0100               	movlb	0	; () banked
  6292  001544  51D0               	movf	_fecha_d& (0+255),w,b
  6293  001546  0D0A               	mullw	10
  6294  001548  50F3               	movf	prodl,w,c
  6295  00154A  0800               	sublw	0
  6296  00154C  0100               	movlb	0	; () banked
  6297  00154E  25C3               	addwf	_dia& (0+255),w,b
  6298  001550  0100               	movlb	0	; () banked
  6299  001552  6FD1               	movwf	_fecha_u& (0+255),b
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
  6303  001554  0100               	movlb	0	; () banked
  6304  001556  51D0               	movf	_fecha_d& (0+255),w,b
  6305  001558  0D10               	mullw	16
  6306  00155A  50F3               	movf	prodl,w,c
  6307  00155C  0100               	movlb	0	; () banked
  6308  00155E  25D1               	addwf	_fecha_u& (0+255),w,b
  6309  001560  6E56               	movwf	_RtccDate+1,c
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
  6313  001562  C0C5  F0CF         	movff	_diasem,_dia_semana
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
  6317  001566  C0C5  F055         	movff	_diasem,_RtccDate
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
  6321  00156A  0EAA               	movlw	low _RtccTime
  6322  00156C  6E01               	movwf	RtccWriteTime@pTm,c
  6323  00156E  0E00               	movlw	high _RtccTime
  6324  001570  6E02               	movwf	RtccWriteTime@pTm+1,c
  6325  001572  0E01               	movlw	1
  6326  001574  6E03               	movwf	RtccWriteTime@di,c
  6327  001576  EC97  F00C         	call	_RtccWriteTime	;wreg free
  6328                           
  6329                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
  6330  00157A  0E55               	movlw	low _RtccDate
  6331  00157C  6E01               	movwf	RtccWriteDate@pDt,c
  6332  00157E  0E00               	movlw	high _RtccDate
  6333  001580  6E02               	movwf	RtccWriteDate@pDt+1,c
  6334  001582  0E01               	movlw	1
  6335  001584  6E03               	movwf	RtccWriteDate@di,c
  6336  001586  ECC8  F00A         	call	_RtccWriteDate	;wreg free
  6337                           
  6338                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
  6339  00158A  010F               	movlb	15	; () banked
  6340  00158C  8F3F               	bsf	63,7,b	;volatile
  6341                           
  6342                           ; BSR set to: 15
  6343  00158E  0012               	return		;funcret
  6344  001590                     __end_of_Write_RTC:
  6345                           	opt stack 0
  6346                           tosu	equ	0xFFF
  6347                           tosh	equ	0xFFE
  6348                           tosl	equ	0xFFD
  6349                           pclath	equ	0xFFA
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           indf0	equ	0xFEF
  6357                           postinc0	equ	0xFEE
  6358                           fsr0h	equ	0xFEA
  6359                           fsr0l	equ	0xFE9
  6360                           wreg	equ	0xFE8
  6361                           postinc1	equ	0xFE6
  6362                           postdec1	equ	0xFE5
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function ___awdiv *****************
  6373 ;; Defined at:
  6374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  dividend        2    0[COMRAM] int 
  6377 ;;  divisor         2    2[COMRAM] int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  quotient        2    6[COMRAM] int 
  6380 ;;  sign            1    5[COMRAM] unsigned char 
  6381 ;;  counter         1    4[COMRAM] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  2    0[COMRAM] int 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6394 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6395 ;;Total ram usage:        8 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; This function calls:
  6398 ;;		Nothing
  6399 ;; This function is called by:
  6400 ;;		_Write_RTC
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           	psect	text36
  6405  001F6E                     __ptext36:
  6406                           	opt stack 0
  6407  001F6E                     ___awdiv:
  6408                           	opt stack 26
  6409                           
  6410                           ; BSR set to: 15
  6411                           ;incstack = 0
  6412  001F6E  0E00               	movlw	0
  6413  001F70  6E06               	movwf	___awdiv@sign,c
  6414  001F72  AE04               	btfss	___awdiv@divisor+1,7,c
  6415  001F74  D007               	goto	l2775
  6416  001F76  6C03               	negf	___awdiv@divisor,c
  6417  001F78  1E04               	comf	___awdiv@divisor+1,f,c
  6418  001F7A  B0D8               	btfsc	status,0,c
  6419  001F7C  2A04               	incf	___awdiv@divisor+1,f,c
  6420  001F7E  0E01               	movlw	1
  6421  001F80  6E06               	movwf	___awdiv@sign,c
  6422  001F82  D000               	goto	l2775
  6423  001F84                     l2775:
  6424  001F84  AE02               	btfss	___awdiv@dividend+1,7,c
  6425  001F86  D007               	goto	l2781
  6426  001F88  6C01               	negf	___awdiv@dividend,c
  6427  001F8A  1E02               	comf	___awdiv@dividend+1,f,c
  6428  001F8C  B0D8               	btfsc	status,0,c
  6429  001F8E  2A02               	incf	___awdiv@dividend+1,f,c
  6430  001F90  0E01               	movlw	1
  6431  001F92  1A06               	xorwf	___awdiv@sign,f,c
  6432  001F94  D000               	goto	l2781
  6433  001F96                     l2781:
  6434  001F96  0E00               	movlw	0
  6435  001F98  6E08               	movwf	___awdiv@quotient+1,c
  6436  001F9A  0E00               	movlw	0
  6437  001F9C  6E07               	movwf	___awdiv@quotient,c
  6438  001F9E  5003               	movf	___awdiv@divisor,w,c
  6439  001FA0  1004               	iorwf	___awdiv@divisor+1,w,c
  6440  001FA2  B4D8               	btfsc	status,2,c
  6441  001FA4  D021               	goto	l2803
  6442  001FA6  0E01               	movlw	1
  6443  001FA8  6E05               	movwf	___awdiv@counter,c
  6444  001FAA  D005               	goto	l2789
  6445  001FAC                     l2787:
  6446  001FAC  90D8               	bcf	status,0,c
  6447  001FAE  3603               	rlcf	___awdiv@divisor,f,c
  6448  001FB0  3604               	rlcf	___awdiv@divisor+1,f,c
  6449  001FB2  2A05               	incf	___awdiv@counter,f,c
  6450  001FB4  D000               	goto	l2789
  6451  001FB6                     l2789:
  6452  001FB6  BE04               	btfsc	___awdiv@divisor+1,7,c
  6453  001FB8  D002               	goto	l2791
  6454  001FBA  D7F8               	goto	l2787
  6455  001FBC  D000               	goto	l2791
  6456  001FBE                     l2791:
  6457  001FBE  90D8               	bcf	status,0,c
  6458  001FC0  3607               	rlcf	___awdiv@quotient,f,c
  6459  001FC2  3608               	rlcf	___awdiv@quotient+1,f,c
  6460  001FC4  5003               	movf	___awdiv@divisor,w,c
  6461  001FC6  5C01               	subwf	___awdiv@dividend,w,c
  6462  001FC8  5004               	movf	___awdiv@divisor+1,w,c
  6463  001FCA  5802               	subwfb	___awdiv@dividend+1,w,c
  6464  001FCC  A0D8               	btfss	status,0,c
  6465  001FCE  D006               	goto	l2799
  6466  001FD0  5003               	movf	___awdiv@divisor,w,c
  6467  001FD2  5E01               	subwf	___awdiv@dividend,f,c
  6468  001FD4  5004               	movf	___awdiv@divisor+1,w,c
  6469  001FD6  5A02               	subwfb	___awdiv@dividend+1,f,c
  6470  001FD8  8007               	bsf	___awdiv@quotient,0,c
  6471  001FDA  D000               	goto	l2799
  6472  001FDC                     l2799:
  6473  001FDC  90D8               	bcf	status,0,c
  6474  001FDE  3204               	rrcf	___awdiv@divisor+1,f,c
  6475  001FE0  3203               	rrcf	___awdiv@divisor,f,c
  6476  001FE2  2E05               	decfsz	___awdiv@counter,f,c
  6477  001FE4  D7EC               	goto	l2791
  6478  001FE6  D000               	goto	l2803
  6479  001FE8                     l2803:
  6480  001FE8  5006               	movf	___awdiv@sign,w,c
  6481  001FEA  B4D8               	btfsc	status,2,c
  6482  001FEC  D005               	goto	l2807
  6483  001FEE  6C07               	negf	___awdiv@quotient,c
  6484  001FF0  1E08               	comf	___awdiv@quotient+1,f,c
  6485  001FF2  B0D8               	btfsc	status,0,c
  6486  001FF4  2A08               	incf	___awdiv@quotient+1,f,c
  6487  001FF6  D000               	goto	l2807
  6488  001FF8                     l2807:
  6489  001FF8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6490  001FFC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6491  002000  0012               	return	
  6492  002002  0012               	return		;funcret
  6493  002004                     __end_of___awdiv:
  6494                           	opt stack 0
  6495                           tosu	equ	0xFFF
  6496                           tosh	equ	0xFFE
  6497                           tosl	equ	0xFFD
  6498                           pclath	equ	0xFFA
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           indf0	equ	0xFEF
  6506                           postinc0	equ	0xFEE
  6507                           fsr0h	equ	0xFEA
  6508                           fsr0l	equ	0xFE9
  6509                           wreg	equ	0xFE8
  6510                           postinc1	equ	0xFE6
  6511                           postdec1	equ	0xFE5
  6512                           fsr1h	equ	0xFE2
  6513                           fsr1l	equ	0xFE1
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521 ;; *************** function _RtccWriteTime *****************
  6522 ;; Defined at:
  6523 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  pTm             2    0[COMRAM] PTR const struct .
  6526 ;;		 -> RtccTime(4), 
  6527 ;;  di              1    2[COMRAM] enum E7121
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  tempHourWDay    2    9[COMRAM] struct .
  6530 ;;  tempMinSec      2    7[COMRAM] struct .
  6531 ;;  wasWrEn         1    6[COMRAM] enum E7121
  6532 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6533 ;;  wasOn           1    4[COMRAM] enum E7121
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      enum E7121
  6536 ;; Registers used:
  6537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6543 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6546 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6547 ;;Total ram usage:       11 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    1
  6550 ;; This function calls:
  6551 ;;		_RtccWrOn
  6552 ;; This function is called by:
  6553 ;;		_Write_RTC
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text37
  6558  00192E                     __ptext37:
  6559                           	opt stack 0
  6560  00192E                     _RtccWriteTime:
  6561                           	opt stack 25
  6562                           
  6563                           ;incstack = 0
  6564  00192E  0E00               	movlw	0
  6565  001930  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6566  001932  EE20 F002          	lfsr	2,2
  6567  001936  5001               	movf	RtccWriteTime@pTm,w,c
  6568  001938  26D9               	addwf	fsr2l,f,c
  6569  00193A  5002               	movf	RtccWriteTime@pTm+1,w,c
  6570  00193C  22DA               	addwfc	fsr2h,f,c
  6571  00193E  0E5A               	movlw	90
  6572  001940  60DF               	cpfslt	indf2,c
  6573  001942  0012               	return	
  6574  001944  EE20 F001          	lfsr	2,1
  6575  001948  5001               	movf	RtccWriteTime@pTm,w,c
  6576  00194A  26D9               	addwf	fsr2l,f,c
  6577  00194C  5002               	movf	RtccWriteTime@pTm+1,w,c
  6578  00194E  22DA               	addwfc	fsr2h,f,c
  6579  001950  0E5A               	movlw	90
  6580  001952  60DF               	cpfslt	indf2,c
  6581  001954  0012               	return	
  6582  001956  EE20 F003          	lfsr	2,3
  6583  00195A  5001               	movf	RtccWriteTime@pTm,w,c
  6584  00195C  26D9               	addwf	fsr2l,f,c
  6585  00195E  5002               	movf	RtccWriteTime@pTm+1,w,c
  6586  001960  22DA               	addwfc	fsr2h,f,c
  6587  001962  0E24               	movlw	36
  6588  001964  64DF               	cpfsgt	indf2,c
  6589  001966  D002               	goto	l2639
  6590  001968  0012               	return	
  6591                           
  6592                           ;	Return value of _RtccWriteTime is never used
  6593  00196A  0012               	return	
  6594  00196C                     l2639:
  6595  00196C  EE20 F002          	lfsr	2,2
  6596  001970  5001               	movf	RtccWriteTime@pTm,w,c
  6597  001972  26D9               	addwf	fsr2l,f,c
  6598  001974  5002               	movf	RtccWriteTime@pTm+1,w,c
  6599  001976  22DA               	addwfc	fsr2h,f,c
  6600  001978  50DF               	movf	indf2,w,c
  6601  00197A  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  6602  00197C  EE20 F001          	lfsr	2,1
  6603  001980  5001               	movf	RtccWriteTime@pTm,w,c
  6604  001982  26D9               	addwf	fsr2l,f,c
  6605  001984  5002               	movf	RtccWriteTime@pTm+1,w,c
  6606  001986  22DA               	addwfc	fsr2h,f,c
  6607  001988  50DF               	movf	indf2,w,c
  6608  00198A  6E08               	movwf	RtccWriteTime@tempMinSec,c
  6609  00198C  5003               	movf	RtccWriteTime@di,w,c
  6610  00198E  B4D8               	btfsc	status,2,c
  6611  001990  D002               	goto	l2645
  6612  001992  9CF2               	bcf	intcon,6,c	;volatile
  6613  001994  D000               	goto	l2645
  6614  001996                     l2645:
  6615  001996  0E00               	movlw	0
  6616  001998  BB3F               	btfsc	63,5,b	;volatile
  6617  00199A  0E01               	movlw	1
  6618  00199C  6E07               	movwf	RtccWriteTime@wasWrEn,c
  6619  00199E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6620  0019A0  A4D8               	btfss	status,2,c
  6621  0019A2  D003               	goto	l2649
  6622  0019A4  ECC6  F013         	call	_RtccWrOn	;wreg free
  6623  0019A8  D000               	goto	l2649
  6624  0019AA                     l2649:
  6625  0019AA  0E00               	movlw	0
  6626  0019AC  BF3F               	btfsc	63,7,b	;volatile
  6627  0019AE  0E01               	movlw	1
  6628  0019B0  6E05               	movwf	RtccWriteTime@wasOn,c
  6629  0019B2  5005               	movf	RtccWriteTime@wasOn,w,c
  6630  0019B4  B4D8               	btfsc	status,2,c
  6631  0019B6  D007               	goto	l2655
  6632  0019B8  0E00               	movlw	0
  6633  0019BA  BE91               	btfsc	3985,7,c	;volatile
  6634  0019BC  0E01               	movlw	1
  6635  0019BE  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6636  0019C0  010F               	movlb	15	; () banked
  6637  0019C2  9F3F               	bcf	63,7,b	;volatile
  6638  0019C4  D000               	goto	l2655
  6639  0019C6                     l2655:
  6640  0019C6  0EFC               	movlw	252
  6641  0019C8  010F               	movlb	15	; () banked
  6642  0019CA  173F               	andwf	63,f,b	;volatile
  6643  0019CC  010F               	movlb	15	; () banked
  6644  0019CE  813F               	bsf	63,0,b	;volatile
  6645                           
  6646                           ; BSR set to: 15
  6647  0019D0  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  6648                           
  6649                           ; BSR set to: 15
  6650  0019D4  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  6651                           
  6652                           ; BSR set to: 15
  6653  0019D8  EE20 F003          	lfsr	2,3
  6654  0019DC  5001               	movf	RtccWriteTime@pTm,w,c
  6655  0019DE  26D9               	addwf	fsr2l,f,c
  6656  0019E0  5002               	movf	RtccWriteTime@pTm+1,w,c
  6657  0019E2  22DA               	addwfc	fsr2h,f,c
  6658  0019E4  50DF               	movf	indf2,w,c
  6659  0019E6  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  6660                           
  6661                           ; BSR set to: 15
  6662  0019E8  0EFC               	movlw	252
  6663  0019EA  010F               	movlb	15	; () banked
  6664  0019EC  173F               	andwf	63,f,b	;volatile
  6665                           
  6666                           ; BSR set to: 15
  6667  0019EE  010F               	movlb	15	; () banked
  6668  0019F0  813F               	bsf	63,0,b	;volatile
  6669                           
  6670                           ; BSR set to: 15
  6671  0019F2  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  6672                           
  6673                           ; BSR set to: 15
  6674  0019F6  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  6675                           
  6676                           ; BSR set to: 15
  6677  0019FA  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  6678                           
  6679                           ; BSR set to: 15
  6680  0019FE  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  6681                           
  6682                           ; BSR set to: 15
  6683  001A02  5005               	movf	RtccWriteTime@wasOn,w,c
  6684  001A04  B4D8               	btfsc	status,2,c
  6685  001A06  D00D               	goto	l2687
  6686                           
  6687                           ; BSR set to: 15
  6688  001A08  010F               	movlb	15	; () banked
  6689  001A0A  8F3F               	bsf	63,7,b	;volatile
  6690                           
  6691                           ; BSR set to: 15
  6692  001A0C  5006               	movf	RtccWriteTime@wasAlrm,w,c
  6693  001A0E  B4D8               	btfsc	status,2,c
  6694  001A10  D002               	goto	l2683
  6695                           
  6696                           ; BSR set to: 15
  6697  001A12  8E91               	bsf	3985,7,c	;volatile
  6698  001A14  D000               	goto	l2683
  6699  001A16                     l2683:
  6700                           
  6701                           ; BSR set to: 15
  6702  001A16  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6703  001A18  B4D8               	btfsc	status,2,c
  6704  001A1A  D009               	goto	l2691
  6705                           
  6706                           ; BSR set to: 15
  6707  001A1C  ECC6  F013         	call	_RtccWrOn	;wreg free
  6708  001A20  D006               	goto	l2691
  6709  001A22                     l2687:
  6710  001A22  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6711  001A24  A4D8               	btfss	status,2,c
  6712  001A26  D003               	goto	l2691
  6713  001A28  010F               	movlb	15	; () banked
  6714  001A2A  9B3F               	bcf	63,5,b	;volatile
  6715                           
  6716                           ; BSR set to: 15
  6717  001A2C  D000               	goto	l2691
  6718  001A2E                     l2691:
  6719  001A2E  5003               	movf	RtccWriteTime@di,w,c
  6720  001A30  B4D8               	btfsc	status,2,c
  6721  001A32  0012               	return	
  6722  001A34  8CF2               	bsf	intcon,6,c	;volatile
  6723  001A36  0012               	return	
  6724                           
  6725                           ;	Return value of _RtccWriteTime is never used
  6726  001A38  0012               	return		;funcret
  6727  001A3A                     __end_of_RtccWriteTime:
  6728                           	opt stack 0
  6729                           tosu	equ	0xFFF
  6730                           tosh	equ	0xFFE
  6731                           tosl	equ	0xFFD
  6732                           pclath	equ	0xFFA
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           indf0	equ	0xFEF
  6741                           postinc0	equ	0xFEE
  6742                           fsr0h	equ	0xFEA
  6743                           fsr0l	equ	0xFE9
  6744                           wreg	equ	0xFE8
  6745                           postinc1	equ	0xFE6
  6746                           postdec1	equ	0xFE5
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _RtccWriteDate *****************
  6757 ;; Defined at:
  6758 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  pDt             2    0[COMRAM] PTR const struct .
  6761 ;;		 -> RtccDate(4), 
  6762 ;;  di              1    2[COMRAM] enum E7121
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;  tempHourWDay    2   11[COMRAM] struct .
  6765 ;;  tempDayMonth    2    9[COMRAM] struct .
  6766 ;;  tempYear        2    6[COMRAM] struct .
  6767 ;;  wasWrEn         1    8[COMRAM] enum E7121
  6768 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6769 ;;  wasOn           1    4[COMRAM] enum E7121
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      enum E7121
  6772 ;; Registers used:
  6773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6779 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6782 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6783 ;;Total ram usage:       13 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    1
  6786 ;; This function calls:
  6787 ;;		_RtccWrOn
  6788 ;; This function is called by:
  6789 ;;		_Write_RTC
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text38
  6794  001590                     __ptext38:
  6795                           	opt stack 0
  6796  001590                     _RtccWriteDate:
  6797                           	opt stack 25
  6798                           
  6799                           ;incstack = 0
  6800  001590  0E00               	movlw	0
  6801  001592  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6802  001594  EE20 F002          	lfsr	2,2
  6803  001598  5001               	movf	RtccWriteDate@pDt,w,c
  6804  00159A  26D9               	addwf	fsr2l,f,c
  6805  00159C  5002               	movf	RtccWriteDate@pDt+1,w,c
  6806  00159E  22DA               	addwfc	fsr2h,f,c
  6807  0015A0  0E13               	movlw	19
  6808  0015A2  60DF               	cpfslt	indf2,c
  6809  0015A4  0012               	return	
  6810  0015A6  EE20 F002          	lfsr	2,2
  6811  0015AA  5001               	movf	RtccWriteDate@pDt,w,c
  6812  0015AC  26D9               	addwf	fsr2l,f,c
  6813  0015AE  5002               	movf	RtccWriteDate@pDt+1,w,c
  6814  0015B0  22DA               	addwfc	fsr2h,f,c
  6815  0015B2  50DF               	movf	indf2,w,c
  6816  0015B4  B4D8               	btfsc	status,2,c
  6817  0015B6  0012               	return	
  6818  0015B8  EE20 F001          	lfsr	2,1
  6819  0015BC  5001               	movf	RtccWriteDate@pDt,w,c
  6820  0015BE  26D9               	addwf	fsr2l,f,c
  6821  0015C0  5002               	movf	RtccWriteDate@pDt+1,w,c
  6822  0015C2  22DA               	addwfc	fsr2h,f,c
  6823  0015C4  0E32               	movlw	50
  6824  0015C6  60DF               	cpfslt	indf2,c
  6825  0015C8  0012               	return	
  6826  0015CA  EE20 F001          	lfsr	2,1
  6827  0015CE  5001               	movf	RtccWriteDate@pDt,w,c
  6828  0015D0  26D9               	addwf	fsr2l,f,c
  6829  0015D2  5002               	movf	RtccWriteDate@pDt+1,w,c
  6830  0015D4  22DA               	addwfc	fsr2h,f,c
  6831  0015D6  50DF               	movf	indf2,w,c
  6832  0015D8  B4D8               	btfsc	status,2,c
  6833  0015DA  0012               	return	
  6834  0015DC  EE20 F003          	lfsr	2,3
  6835  0015E0  5001               	movf	RtccWriteDate@pDt,w,c
  6836  0015E2  26D9               	addwf	fsr2l,f,c
  6837  0015E4  5002               	movf	RtccWriteDate@pDt+1,w,c
  6838  0015E6  22DA               	addwfc	fsr2h,f,c
  6839  0015E8  0E99               	movlw	153
  6840  0015EA  64DF               	cpfsgt	indf2,c
  6841  0015EC  D002               	goto	l2707
  6842  0015EE  0012               	return	
  6843                           
  6844                           ;	Return value of _RtccWriteDate is never used
  6845  0015F0  0012               	return	
  6846  0015F2                     l2707:
  6847  0015F2  EE20 F003          	lfsr	2,3
  6848  0015F6  5001               	movf	RtccWriteDate@pDt,w,c
  6849  0015F8  26D9               	addwf	fsr2l,f,c
  6850  0015FA  5002               	movf	RtccWriteDate@pDt+1,w,c
  6851  0015FC  22DA               	addwfc	fsr2h,f,c
  6852  0015FE  50DF               	movf	indf2,w,c
  6853  001600  6E07               	movwf	RtccWriteDate@tempYear,c
  6854  001602  EE20 F001          	lfsr	2,1
  6855  001606  5001               	movf	RtccWriteDate@pDt,w,c
  6856  001608  26D9               	addwf	fsr2l,f,c
  6857  00160A  5002               	movf	RtccWriteDate@pDt+1,w,c
  6858  00160C  22DA               	addwfc	fsr2h,f,c
  6859  00160E  50DF               	movf	indf2,w,c
  6860  001610  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  6861  001612  EE20 F002          	lfsr	2,2
  6862  001616  5001               	movf	RtccWriteDate@pDt,w,c
  6863  001618  26D9               	addwf	fsr2l,f,c
  6864  00161A  5002               	movf	RtccWriteDate@pDt+1,w,c
  6865  00161C  22DA               	addwfc	fsr2h,f,c
  6866  00161E  50DF               	movf	indf2,w,c
  6867  001620  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  6868  001622  5003               	movf	RtccWriteDate@di,w,c
  6869  001624  B4D8               	btfsc	status,2,c
  6870  001626  D002               	goto	l2713
  6871  001628  9CF2               	bcf	intcon,6,c	;volatile
  6872  00162A  D000               	goto	l2713
  6873  00162C                     l2713:
  6874  00162C  0E00               	movlw	0
  6875  00162E  BB3F               	btfsc	63,5,b	;volatile
  6876  001630  0E01               	movlw	1
  6877  001632  6E09               	movwf	RtccWriteDate@wasWrEn,c
  6878  001634  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6879  001636  A4D8               	btfss	status,2,c
  6880  001638  D003               	goto	l2717
  6881  00163A  ECC6  F013         	call	_RtccWrOn	;wreg free
  6882  00163E  D000               	goto	l2717
  6883  001640                     l2717:
  6884  001640  0E00               	movlw	0
  6885  001642  BF3F               	btfsc	63,7,b	;volatile
  6886  001644  0E01               	movlw	1
  6887  001646  6E05               	movwf	RtccWriteDate@wasOn,c
  6888  001648  5005               	movf	RtccWriteDate@wasOn,w,c
  6889  00164A  B4D8               	btfsc	status,2,c
  6890  00164C  D007               	goto	l2723
  6891  00164E  0E00               	movlw	0
  6892  001650  BE91               	btfsc	3985,7,c	;volatile
  6893  001652  0E01               	movlw	1
  6894  001654  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6895  001656  010F               	movlb	15	; () banked
  6896  001658  9F3F               	bcf	63,7,b	;volatile
  6897  00165A  D000               	goto	l2723
  6898  00165C                     l2723:
  6899  00165C  0EFC               	movlw	252
  6900  00165E  010F               	movlb	15	; () banked
  6901  001660  173F               	andwf	63,f,b	;volatile
  6902  001662  010F               	movlb	15	; () banked
  6903  001664  813F               	bsf	63,0,b	;volatile
  6904                           
  6905                           ; BSR set to: 15
  6906  001666  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  6907                           
  6908                           ; BSR set to: 15
  6909  00166A  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  6910                           
  6911                           ; BSR set to: 15
  6912  00166E  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  6913  001672  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  6914  001676  50DF               	movf	indf2,w,c
  6915  001678  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  6916                           
  6917                           ; BSR set to: 15
  6918  00167A  0EFC               	movlw	252
  6919  00167C  010F               	movlb	15	; () banked
  6920  00167E  173F               	andwf	63,f,b	;volatile
  6921                           
  6922                           ; BSR set to: 15
  6923  001680  0E03               	movlw	3
  6924  001682  010F               	movlb	15	; () banked
  6925  001684  133F               	iorwf	63,f,b	;volatile
  6926                           
  6927                           ; BSR set to: 15
  6928  001686  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  6929                           
  6930                           ; BSR set to: 15
  6931  00168A  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  6932                           
  6933                           ; BSR set to: 15
  6934  00168E  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  6935                           
  6936                           ; BSR set to: 15
  6937  001692  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  6938                           
  6939                           ; BSR set to: 15
  6940  001696  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  6941                           
  6942                           ; BSR set to: 15
  6943  00169A  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  6944                           
  6945                           ; BSR set to: 15
  6946  00169E  5005               	movf	RtccWriteDate@wasOn,w,c
  6947  0016A0  B4D8               	btfsc	status,2,c
  6948  0016A2  D00D               	goto	l2759
  6949                           
  6950                           ; BSR set to: 15
  6951  0016A4  010F               	movlb	15	; () banked
  6952  0016A6  8F3F               	bsf	63,7,b	;volatile
  6953                           
  6954                           ; BSR set to: 15
  6955  0016A8  5006               	movf	RtccWriteDate@wasAlrm,w,c
  6956  0016AA  B4D8               	btfsc	status,2,c
  6957  0016AC  D002               	goto	l2755
  6958                           
  6959                           ; BSR set to: 15
  6960  0016AE  8E91               	bsf	3985,7,c	;volatile
  6961  0016B0  D000               	goto	l2755
  6962  0016B2                     l2755:
  6963                           
  6964                           ; BSR set to: 15
  6965  0016B2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6966  0016B4  B4D8               	btfsc	status,2,c
  6967  0016B6  D009               	goto	l2763
  6968                           
  6969                           ; BSR set to: 15
  6970  0016B8  ECC6  F013         	call	_RtccWrOn	;wreg free
  6971  0016BC  D006               	goto	l2763
  6972  0016BE                     l2759:
  6973  0016BE  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6974  0016C0  A4D8               	btfss	status,2,c
  6975  0016C2  D003               	goto	l2763
  6976  0016C4  010F               	movlb	15	; () banked
  6977  0016C6  9B3F               	bcf	63,5,b	;volatile
  6978                           
  6979                           ; BSR set to: 15
  6980  0016C8  D000               	goto	l2763
  6981  0016CA                     l2763:
  6982  0016CA  5003               	movf	RtccWriteDate@di,w,c
  6983  0016CC  B4D8               	btfsc	status,2,c
  6984  0016CE  0012               	return	
  6985  0016D0  9CF2               	bcf	intcon,6,c	;volatile
  6986  0016D2  0012               	return	
  6987                           
  6988                           ;	Return value of _RtccWriteDate is never used
  6989  0016D4  0012               	return		;funcret
  6990  0016D6                     __end_of_RtccWriteDate:
  6991                           	opt stack 0
  6992                           tosu	equ	0xFFF
  6993                           tosh	equ	0xFFE
  6994                           tosl	equ	0xFFD
  6995                           pclath	equ	0xFFA
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           indf0	equ	0xFEF
  7004                           postinc0	equ	0xFEE
  7005                           fsr0h	equ	0xFEA
  7006                           fsr0l	equ	0xFE9
  7007                           wreg	equ	0xFE8
  7008                           postinc1	equ	0xFE6
  7009                           postdec1	equ	0xFE5
  7010                           fsr1h	equ	0xFE2
  7011                           fsr1l	equ	0xFE1
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _RtccWrOn *****************
  7020 ;; Defined at:
  7021 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  data            2    0        unsigned int 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, status,2
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_Write_RTC
  7045 ;;		_RtccWriteDate
  7046 ;;		_RtccWriteTime
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text39
  7051  00278C                     __ptext39:
  7052                           	opt stack 0
  7053  00278C                     _RtccWrOn:
  7054                           	opt stack 25
  7055                           
  7056                           ;incstack = 0
  7057  00278C  9CF2               	bcf	intcon,6,c	;volatile
  7058  00278E  0E55               	movlw	85
  7059  002790  6EA7               	movwf	4007,c	;volatile
  7060  002792  0EAA               	movlw	170
  7061  002794  6EA7               	movwf	4007,c	;volatile
  7062  002796  010F               	movlb	15	; () banked
  7063  002798  8B3F               	bsf	63,5,b	;volatile
  7064                           
  7065                           ; BSR set to: 15
  7066  00279A  8CF2               	bsf	intcon,6,c	;volatile
  7067                           
  7068                           ; BSR set to: 15
  7069  00279C  0012               	return		;funcret
  7070  00279E                     __end_of_RtccWrOn:
  7071                           	opt stack 0
  7072                           tosu	equ	0xFFF
  7073                           tosh	equ	0xFFE
  7074                           tosl	equ	0xFFD
  7075                           pclath	equ	0xFFA
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           indf0	equ	0xFEF
  7084                           postinc0	equ	0xFEE
  7085                           fsr0h	equ	0xFEA
  7086                           fsr0l	equ	0xFE9
  7087                           wreg	equ	0xFE8
  7088                           postinc1	equ	0xFE6
  7089                           postdec1	equ	0xFE5
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _Read_RTC *****************
  7100 ;; Defined at:
  7101 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;		None               void
  7108 ;; Registers used:
  7109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    1
  7122 ;; This function calls:
  7123 ;;		_RtccReadDate
  7124 ;;		_RtccReadTime
  7125 ;; This function is called by:
  7126 ;;		_main
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text40
  7131  0016D6                     __ptext40:
  7132                           	opt stack 0
  7133  0016D6                     _Read_RTC:
  7134                           	opt stack 29
  7135                           
  7136                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
  7137                           
  7138                           ; BSR set to: 15
  7139                           ;incstack = 0
  7140  0016D6  0EAA               	movlw	low _RtccTime
  7141  0016D8  6E01               	movwf	RtccReadTime@pTm,c
  7142  0016DA  0E00               	movlw	high _RtccTime
  7143  0016DC  6E02               	movwf	RtccReadTime@pTm+1,c
  7144  0016DE  EC71  F011         	call	_RtccReadTime	;wreg free
  7145                           
  7146                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
  7147  0016E2  0100               	movlb	0	; () banked
  7148  0016E4  51AB               	movf	(_RtccTime+1)& (0+255),w,b
  7149  0016E6  0B0F               	andlw	15
  7150  0016E8  0100               	movlb	0	; () banked
  7151  0016EA  6FD9               	movwf	_segundo_u& (0+255),b
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  7155  0016EC  0100               	movlb	0	; () banked
  7156  0016EE  39AB               	swapf	(_RtccTime+1)& (0+255),w,b
  7157  0016F0  0B0F               	andlw	15
  7158  0016F2  0B0F               	andlw	15
  7159  0016F4  0100               	movlb	0	; () banked
  7160  0016F6  6FD8               	movwf	_segundo_d& (0+255),b
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
  7164  0016F8  0100               	movlb	0	; () banked
  7165  0016FA  51AC               	movf	(_RtccTime+2)& (0+255),w,b
  7166  0016FC  0B0F               	andlw	15
  7167  0016FE  0100               	movlb	0	; () banked
  7168  001700  6FD7               	movwf	_minuto_u& (0+255),b
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  7172  001702  0100               	movlb	0	; () banked
  7173  001704  39AC               	swapf	(_RtccTime+2)& (0+255),w,b
  7174  001706  0B0F               	andlw	15
  7175  001708  0B0F               	andlw	15
  7176  00170A  0100               	movlb	0	; () banked
  7177  00170C  6FD6               	movwf	_minuto_d& (0+255),b
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
  7181  00170E  0100               	movlb	0	; () banked
  7182  001710  51AD               	movf	(_RtccTime+3)& (0+255),w,b
  7183  001712  0B0F               	andlw	15
  7184  001714  0100               	movlb	0	; () banked
  7185  001716  6FD3               	movwf	_hora_u& (0+255),b
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  7189  001718  0100               	movlb	0	; () banked
  7190  00171A  39AD               	swapf	(_RtccTime+3)& (0+255),w,b
  7191  00171C  0B0F               	andlw	15
  7192  00171E  0B0F               	andlw	15
  7193  001720  0100               	movlb	0	; () banked
  7194  001722  6FD2               	movwf	_hora_d& (0+255),b
  7195                           
  7196                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
  7197  001724  0E55               	movlw	low _RtccDate
  7198  001726  6E01               	movwf	RtccReadDate@pDt,c
  7199  001728  0E00               	movlw	high _RtccDate
  7200  00172A  6E02               	movwf	RtccReadDate@pDt+1,c
  7201  00172C  EC02  F010         	call	_RtccReadDate	;wreg free
  7202                           
  7203                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
  7204  001730  5056               	movf	_RtccDate+1,w,c
  7205  001732  0B0F               	andlw	15
  7206  001734  0100               	movlb	0	; () banked
  7207  001736  6FD1               	movwf	_fecha_u& (0+255),b
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  7211  001738  3856               	swapf	_RtccDate+1,w,c
  7212  00173A  0B0F               	andlw	15
  7213  00173C  0B0F               	andlw	15
  7214  00173E  0100               	movlb	0	; () banked
  7215  001740  6FD0               	movwf	_fecha_d& (0+255),b
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
  7219  001742  5057               	movf	_RtccDate+2,w,c
  7220  001744  0B0F               	andlw	15
  7221  001746  0100               	movlb	0	; () banked
  7222  001748  6FD5               	movwf	_mes_u& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  7226  00174A  3857               	swapf	_RtccDate+2,w,c
  7227  00174C  0B0F               	andlw	15
  7228  00174E  0B0F               	andlw	15
  7229  001750  0100               	movlb	0	; () banked
  7230  001752  6FD4               	movwf	_mes_d& (0+255),b
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
  7234  001754  C055  F0CF         	movff	_RtccDate,_dia_semana
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
  7238  001758  5058               	movf	_RtccDate+3,w,c
  7239  00175A  0B0F               	andlw	15
  7240  00175C  0100               	movlb	0	; () banked
  7241  00175E  6FCE               	movwf	_anio_u& (0+255),b
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
  7245  001760  3858               	swapf	_RtccDate+3,w,c
  7246  001762  0B0F               	andlw	15
  7247  001764  0B0F               	andlw	15
  7248  001766  0100               	movlb	0	; () banked
  7249  001768  6FCD               	movwf	_anio_d& (0+255),b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
  7253  00176A  0100               	movlb	0	; () banked
  7254  00176C  51D8               	movf	_segundo_d& (0+255),w,b
  7255  00176E  0D0A               	mullw	10
  7256  001770  0100               	movlb	0	; () banked
  7257  001772  51D9               	movf	_segundo_u& (0+255),w,b
  7258  001774  24F3               	addwf	prodl,w,c
  7259  001776  0100               	movlb	0	; () banked
  7260  001778  6F92               	movwf	_segundo& (0+255),b
  7261  00177A  0100               	movlb	0	; () banked
  7262  00177C  0E00               	movlw	0
  7263  00177E  20F4               	addwfc	prodh,w,c
  7264  001780  0100               	movlb	0	; () banked
  7265  001782  6F93               	movwf	(_segundo+1)& (0+255),b
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
  7269  001784  0100               	movlb	0	; () banked
  7270  001786  51D6               	movf	_minuto_d& (0+255),w,b
  7271  001788  0D0A               	mullw	10
  7272  00178A  0100               	movlb	0	; () banked
  7273  00178C  51D7               	movf	_minuto_u& (0+255),w,b
  7274  00178E  24F3               	addwf	prodl,w,c
  7275  001790  0100               	movlb	0	; () banked
  7276  001792  6FCB               	movwf	_minuto& (0+255),b
  7277  001794  0100               	movlb	0	; () banked
  7278  001796  0E00               	movlw	0
  7279  001798  20F4               	addwfc	prodh,w,c
  7280  00179A  0100               	movlb	0	; () banked
  7281  00179C  6FCC               	movwf	(_minuto+1)& (0+255),b
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
  7285  00179E  0100               	movlb	0	; () banked
  7286  0017A0  51D2               	movf	_hora_d& (0+255),w,b
  7287  0017A2  0D0A               	mullw	10
  7288  0017A4  0100               	movlb	0	; () banked
  7289  0017A6  51D3               	movf	_hora_u& (0+255),w,b
  7290  0017A8  24F3               	addwf	prodl,w,c
  7291  0017AA  0100               	movlb	0	; () banked
  7292  0017AC  6FC7               	movwf	_hora& (0+255),b
  7293  0017AE  0100               	movlb	0	; () banked
  7294  0017B0  0E00               	movlw	0
  7295  0017B2  20F4               	addwfc	prodh,w,c
  7296  0017B4  0100               	movlb	0	; () banked
  7297  0017B6  6FC8               	movwf	(_hora+1)& (0+255),b
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
  7301  0017B8  0100               	movlb	0	; () banked
  7302  0017BA  51D0               	movf	_fecha_d& (0+255),w,b
  7303  0017BC  0D0A               	mullw	10
  7304  0017BE  0100               	movlb	0	; () banked
  7305  0017C0  51D1               	movf	_fecha_u& (0+255),w,b
  7306  0017C2  24F3               	addwf	prodl,w,c
  7307  0017C4  0100               	movlb	0	; () banked
  7308  0017C6  6FC3               	movwf	_dia& (0+255),b
  7309  0017C8  0100               	movlb	0	; () banked
  7310  0017CA  0E00               	movlw	0
  7311  0017CC  20F4               	addwfc	prodh,w,c
  7312  0017CE  0100               	movlb	0	; () banked
  7313  0017D0  6FC4               	movwf	(_dia+1)& (0+255),b
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
  7317  0017D2  C0CF  F0C5         	movff	_dia_semana,_diasem
  7318  0017D6  0100               	movlb	0	; () banked
  7319  0017D8  6BC6               	clrf	(_diasem+1)& (0+255),b
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
  7323  0017DA  0100               	movlb	0	; () banked
  7324  0017DC  51D4               	movf	_mes_d& (0+255),w,b
  7325  0017DE  0D0A               	mullw	10
  7326  0017E0  0100               	movlb	0	; () banked
  7327  0017E2  51D5               	movf	_mes_u& (0+255),w,b
  7328  0017E4  24F3               	addwf	prodl,w,c
  7329  0017E6  0100               	movlb	0	; () banked
  7330  0017E8  6FC9               	movwf	_mes& (0+255),b
  7331  0017EA  0100               	movlb	0	; () banked
  7332  0017EC  0E00               	movlw	0
  7333  0017EE  20F4               	addwfc	prodh,w,c
  7334  0017F0  0100               	movlb	0	; () banked
  7335  0017F2  6FCA               	movwf	(_mes+1)& (0+255),b
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
  7339  0017F4  0100               	movlb	0	; () banked
  7340  0017F6  51CD               	movf	_anio_d& (0+255),w,b
  7341  0017F8  0D0A               	mullw	10
  7342  0017FA  0100               	movlb	0	; () banked
  7343  0017FC  51CE               	movf	_anio_u& (0+255),w,b
  7344  0017FE  24F3               	addwf	prodl,w,c
  7345  001800  0100               	movlb	0	; () banked
  7346  001802  6FC1               	movwf	_anio& (0+255),b
  7347  001804  0100               	movlb	0	; () banked
  7348  001806  0E00               	movlw	0
  7349  001808  20F4               	addwfc	prodh,w,c
  7350  00180A  0100               	movlb	0	; () banked
  7351  00180C  6FC2               	movwf	(_anio+1)& (0+255),b
  7352                           
  7353                           ; BSR set to: 0
  7354  00180E  0012               	return		;funcret
  7355  001810                     __end_of_Read_RTC:
  7356                           	opt stack 0
  7357                           tosu	equ	0xFFF
  7358                           tosh	equ	0xFFE
  7359                           tosl	equ	0xFFD
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           indf0	equ	0xFEF
  7369                           postinc0	equ	0xFEE
  7370                           fsr0h	equ	0xFEA
  7371                           fsr0l	equ	0xFE9
  7372                           wreg	equ	0xFE8
  7373                           postinc1	equ	0xFE6
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function _RtccReadTime *****************
  7385 ;; Defined at:
  7386 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  pTm             2    0[COMRAM] PTR struct .
  7389 ;;		 -> RtccTime(4), 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  rTD0            8   10[COMRAM] struct .
  7392 ;;  rTD1            8    2[COMRAM] struct .
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7402 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7403 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7406 ;;Total ram usage:       18 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; This function calls:
  7409 ;;		Nothing
  7410 ;; This function is called by:
  7411 ;;		_Read_RTC
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text41
  7416  0022E2                     __ptext41:
  7417                           	opt stack 0
  7418  0022E2                     _RtccReadTime:
  7419                           	opt stack 29
  7420  0022E2  0EFC               	movlw	252
  7421  0022E4  010F               	movlb	15	; () banked
  7422  0022E6  173F               	andwf	63,f,b	;volatile
  7423                           
  7424                           ; BSR set to: 15
  7425  0022E8  010F               	movlb	15	; () banked
  7426  0022EA  813F               	bsf	63,0,b	;volatile
  7427                           
  7428                           ; BSR set to: 15
  7429  0022EC  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  7430                           
  7431                           ; BSR set to: 15
  7432  0022F0  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  7433                           
  7434                           ; BSR set to: 15
  7435  0022F4  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  7436                           
  7437                           ; BSR set to: 15
  7438  0022F8  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  7439                           
  7440                           ; BSR set to: 15
  7441  0022FC  0EFC               	movlw	252
  7442  0022FE  010F               	movlb	15	; () banked
  7443  002300  173F               	andwf	63,f,b	;volatile
  7444  002302  010F               	movlb	15	; () banked
  7445  002304  813F               	bsf	63,0,b	;volatile
  7446                           
  7447                           ; BSR set to: 15
  7448  002306  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  7449                           
  7450                           ; BSR set to: 15
  7451  00230A  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  7452                           
  7453                           ; BSR set to: 15
  7454  00230E  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  7455                           
  7456                           ; BSR set to: 15
  7457  002312  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  7458                           
  7459                           ; BSR set to: 15
  7460  002316  5009               	movf	RtccReadTime@rTD1+6,w,c
  7461  002318  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  7462  00231A  A4D8               	btfss	status,2,c
  7463  00231C  D7E2               	goto	l3061
  7464                           
  7465                           ; BSR set to: 15
  7466                           
  7467                           ; BSR set to: 15
  7468  00231E  EE20 F003          	lfsr	2,3
  7469  002322  5001               	movf	RtccReadTime@pTm,w,c
  7470  002324  26D9               	addwf	fsr2l,f,c
  7471  002326  5002               	movf	RtccReadTime@pTm+1,w,c
  7472  002328  22DA               	addwfc	fsr2h,f,c
  7473  00232A  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  7474  00232E  EE20 F002          	lfsr	2,2
  7475  002332  5001               	movf	RtccReadTime@pTm,w,c
  7476  002334  26D9               	addwf	fsr2l,f,c
  7477  002336  5002               	movf	RtccReadTime@pTm+1,w,c
  7478  002338  22DA               	addwfc	fsr2h,f,c
  7479  00233A  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  7480  00233E  EE20 F001          	lfsr	2,1
  7481  002342  5001               	movf	RtccReadTime@pTm,w,c
  7482  002344  26D9               	addwf	fsr2l,f,c
  7483  002346  5002               	movf	RtccReadTime@pTm+1,w,c
  7484  002348  22DA               	addwfc	fsr2h,f,c
  7485  00234A  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  7486                           
  7487                           ; BSR set to: 15
  7488  00234E  0012               	return		;funcret
  7489  002350                     __end_of_RtccReadTime:
  7490                           	opt stack 0
  7491                           tosu	equ	0xFFF
  7492                           tosh	equ	0xFFE
  7493                           tosl	equ	0xFFD
  7494                           pclath	equ	0xFFA
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           indf0	equ	0xFEF
  7503                           postinc0	equ	0xFEE
  7504                           fsr0h	equ	0xFEA
  7505                           fsr0l	equ	0xFE9
  7506                           wreg	equ	0xFE8
  7507                           postinc1	equ	0xFE6
  7508                           postdec1	equ	0xFE5
  7509                           fsr1h	equ	0xFE2
  7510                           fsr1l	equ	0xFE1
  7511                           indf2	equ	0xFDF
  7512                           postinc2	equ	0xFDE
  7513                           postdec2	equ	0xFDD
  7514                           fsr2h	equ	0xFDA
  7515                           fsr2l	equ	0xFD9
  7516                           status	equ	0xFD8
  7517                           
  7518 ;; *************** function _RtccReadDate *****************
  7519 ;; Defined at:
  7520 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;  pDt             2    0[COMRAM] PTR struct .
  7523 ;;		 -> RtccDate(4), 
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;  rTD0            8   10[COMRAM] struct .
  7526 ;;  rTD1            8    2[COMRAM] struct .
  7527 ;; Return value:  Size  Location     Type
  7528 ;;		None               void
  7529 ;; Registers used:
  7530 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7537 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7539 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7540 ;;Total ram usage:       18 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; This function calls:
  7543 ;;		Nothing
  7544 ;; This function is called by:
  7545 ;;		_Read_RTC
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           	psect	text42
  7550  002004                     __ptext42:
  7551                           	opt stack 0
  7552  002004                     _RtccReadDate:
  7553                           	opt stack 29
  7554  002004  0EFC               	movlw	252
  7555  002006  010F               	movlb	15	; () banked
  7556  002008  173F               	andwf	63,f,b	;volatile
  7557  00200A  0E03               	movlw	3
  7558  00200C  010F               	movlb	15	; () banked
  7559  00200E  133F               	iorwf	63,f,b	;volatile
  7560                           
  7561                           ; BSR set to: 15
  7562  002010  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  7563                           
  7564                           ; BSR set to: 15
  7565  002014  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  7566                           
  7567                           ; BSR set to: 15
  7568  002018  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  7569                           
  7570                           ; BSR set to: 15
  7571  00201C  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  7572                           
  7573                           ; BSR set to: 15
  7574  002020  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  7575                           
  7576                           ; BSR set to: 15
  7577  002024  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  7578  002028  0EFC               	movlw	252
  7579  00202A  010F               	movlb	15	; () banked
  7580  00202C  173F               	andwf	63,f,b	;volatile
  7581  00202E  0E03               	movlw	3
  7582  002030  010F               	movlb	15	; () banked
  7583  002032  133F               	iorwf	63,f,b	;volatile
  7584                           
  7585                           ; BSR set to: 15
  7586  002034  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  7587                           
  7588                           ; BSR set to: 15
  7589  002038  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  7590                           
  7591                           ; BSR set to: 15
  7592  00203C  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  7593                           
  7594                           ; BSR set to: 15
  7595  002040  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  7596                           
  7597                           ; BSR set to: 15
  7598  002044  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  7599                           
  7600                           ; BSR set to: 15
  7601  002048  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  7602  00204C  5005               	movf	RtccReadDate@rTD1+2,w,c
  7603  00204E  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  7604  002050  A4D8               	btfss	status,2,c
  7605  002052  D7D8               	goto	l3087
  7606                           
  7607                           ; BSR set to: 15
  7608                           
  7609                           ; BSR set to: 15
  7610  002054  EE20 F001          	lfsr	2,1
  7611  002058  5001               	movf	RtccReadDate@pDt,w,c
  7612  00205A  26D9               	addwf	fsr2l,f,c
  7613  00205C  5002               	movf	RtccReadDate@pDt+1,w,c
  7614  00205E  22DA               	addwfc	fsr2h,f,c
  7615  002060  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  7616  002064  EE20 F002          	lfsr	2,2
  7617  002068  5001               	movf	RtccReadDate@pDt,w,c
  7618  00206A  26D9               	addwf	fsr2l,f,c
  7619  00206C  5002               	movf	RtccReadDate@pDt+1,w,c
  7620  00206E  22DA               	addwfc	fsr2h,f,c
  7621  002070  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  7622                           
  7623                           ; BSR set to: 15
  7624  002074  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  7625  002078  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  7626  00207C  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  7627                           
  7628                           ; BSR set to: 15
  7629  002080  EE20 F003          	lfsr	2,3
  7630  002084  5001               	movf	RtccReadDate@pDt,w,c
  7631  002086  26D9               	addwf	fsr2l,f,c
  7632  002088  5002               	movf	RtccReadDate@pDt+1,w,c
  7633  00208A  22DA               	addwfc	fsr2h,f,c
  7634  00208C  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  7635                           
  7636                           ; BSR set to: 15
  7637  002090  0012               	return		;funcret
  7638  002092                     __end_of_RtccReadDate:
  7639                           	opt stack 0
  7640                           tosu	equ	0xFFF
  7641                           tosh	equ	0xFFE
  7642                           tosl	equ	0xFFD
  7643                           pclath	equ	0xFFA
  7644                           tblptru	equ	0xFF8
  7645                           tblptrh	equ	0xFF7
  7646                           tblptrl	equ	0xFF6
  7647                           tablat	equ	0xFF5
  7648                           prodh	equ	0xFF4
  7649                           prodl	equ	0xFF3
  7650                           intcon	equ	0xFF2
  7651                           indf0	equ	0xFEF
  7652                           postinc0	equ	0xFEE
  7653                           fsr0h	equ	0xFEA
  7654                           fsr0l	equ	0xFE9
  7655                           wreg	equ	0xFE8
  7656                           postinc1	equ	0xFE6
  7657                           postdec1	equ	0xFE5
  7658                           fsr1h	equ	0xFE2
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           tosu	equ	0xFFF
  7667                           tosh	equ	0xFFE
  7668                           tosl	equ	0xFFD
  7669                           pclath	equ	0xFFA
  7670                           tblptru	equ	0xFF8
  7671                           tblptrh	equ	0xFF7
  7672                           tblptrl	equ	0xFF6
  7673                           tablat	equ	0xFF5
  7674                           prodh	equ	0xFF4
  7675                           prodl	equ	0xFF3
  7676                           intcon	equ	0xFF2
  7677                           indf0	equ	0xFEF
  7678                           postinc0	equ	0xFEE
  7679                           fsr0h	equ	0xFEA
  7680                           fsr0l	equ	0xFE9
  7681                           wreg	equ	0xFE8
  7682                           postinc1	equ	0xFE6
  7683                           postdec1	equ	0xFE5
  7684                           fsr1h	equ	0xFE2
  7685                           fsr1l	equ	0xFE1
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           fsr2h	equ	0xFDA
  7690                           fsr2l	equ	0xFD9
  7691                           status	equ	0xFD8
  7692                           
  7693                           	psect	text43
  7694  000000                     __ptext43:
  7695                           	opt stack 0
  7696                           tosu	equ	0xFFF
  7697                           tosh	equ	0xFFE
  7698                           tosl	equ	0xFFD
  7699                           pclath	equ	0xFFA
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           indf0	equ	0xFEF
  7708                           postinc0	equ	0xFEE
  7709                           fsr0h	equ	0xFEA
  7710                           fsr0l	equ	0xFE9
  7711                           wreg	equ	0xFE8
  7712                           postinc1	equ	0xFE6
  7713                           postdec1	equ	0xFE5
  7714                           fsr1h	equ	0xFE2
  7715                           fsr1l	equ	0xFE1
  7716                           indf2	equ	0xFDF
  7717                           postinc2	equ	0xFDE
  7718                           postdec2	equ	0xFDD
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723                           	psect	rparam
  7724  0000                     tosu	equ	0xFFF
  7725                           tosh	equ	0xFFE
  7726                           tosl	equ	0xFFD
  7727                           pclath	equ	0xFFA
  7728                           tblptru	equ	0xFF8
  7729                           tblptrh	equ	0xFF7
  7730                           tblptrl	equ	0xFF6
  7731                           tablat	equ	0xFF5
  7732                           prodh	equ	0xFF4
  7733                           prodl	equ	0xFF3
  7734                           intcon	equ	0xFF2
  7735                           indf0	equ	0xFEF
  7736                           postinc0	equ	0xFEE
  7737                           fsr0h	equ	0xFEA
  7738                           fsr0l	equ	0xFE9
  7739                           wreg	equ	0xFE8
  7740                           postinc1	equ	0xFE6
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8


Data Sizes:
    Strings     176
    Constant    14
    Data        22
    BSS         100
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      95
    BANK0           160      0     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_26(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_5(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_anio(COMRAM[2]), tamanio_mes(COMRAM[2]), tamanio_dia(COMRAM[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_anio(), cambiar_mes(), cambiar_dia(), ingresar_comando(), 
		 -> mostrar_guardar_password(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_anio(), cambiar_mes(), cambiar_dia(), ingresar_comando(), 
		 -> mostrar_guardar_password(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_8(CODE[4]), STR_6(CODE[4]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), STR_25(CODE[2]), 
		 -> STR_24(CODE[2]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[2]), STR_19(CODE[2]), imprimir_tecla@aux(COMRAM[20]), STR_16(CODE[13]), 
		 -> STR_14(CODE[3]), STR_13(CODE[19]), STR_12(CODE[3]), STR_11(CODE[18]), 
		 -> STR_10(CODE[13]), STR_9(CODE[18]), STR_7(CODE[8]), STR_4(CODE[11]), 
		 -> STR_3(CODE[17]), ingresar_password@clear(COMRAM[16]), buffer2(BANK0[20]), 

    main@puntero_funcion	PTR void  size(2) Largest target is 2
		 -> cambiar_anio(), cambiar_mes(), cambiar_dia(), ingresar_comando(), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 8
		 -> STR_7(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _cambiar_mes->_guardar_elemento
    _cambiar_dia->_guardar_elemento
    _cambiar_anio->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  134846
                                             72 COMRAM     9     9      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     518
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4  107739
                                             65 COMRAM     7     3      4
                       _cambiar_anio *
                        _cambiar_dia *
                        _cambiar_mes *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   54028
                                             59 COMRAM     6     0      6
                       _cambiar_anio *
                        _cambiar_dia *
                        _cambiar_mes *
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    9222
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    6600
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    2654
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    2632
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          6     6      0   12478
                                             42 COMRAM     6     6      0
                          _Write_RTC
                    _convertir_a_int
                   _guardar_elemento
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          6     6      0   12478
                                             42 COMRAM     6     6      0
                          _Write_RTC
                    _convertir_a_int
                   _guardar_elemento
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         6     6      0   12478
                                             42 COMRAM     6     6      0
                          _Write_RTC
                    _convertir_a_int
                   _guardar_elemento
                        _inicializar
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _inicializar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                     7     3      4    3072
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int                                      4     0      4    1203
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     775
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    6687
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             2     0      2    9099
                                             35 COMRAM     2     0      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2556
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    3966
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    2513
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1845
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _cambiar_anio *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_dia *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_mes *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _guardar_tecla_presionada *
       _cambiar_anio *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_dia *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_mes *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      7A       5       76.3%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     51      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D9       6        0.0%
DATA                 0      0      D9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 01 23:51:37 2016

                                _a 0082                                  _b 0086  
                                _c 0088                                  _i 008A  
                                _j 008C                                  _k 008E  
                   ?_lcd_send_byte 0003                       ___awdiv@sign 0006  
              ___wmul@multiplicand 0003                        lcd_comand@d 0005  
                     __CFG_CP0$OFF 000000         ??_mostrar_guardar_password 0039  
                              l300 1F22                                l213 2634  
                              l301 1F1E                                l214 2636  
                              l304 1F4C                                l320 18E0  
                              l305 1F48                                l323 18FE  
                              l315 18BE                                l324 18FA  
                              l316 18BA                                l309 1F64  
                              l343 25D2                                l319 18E4  
                              l352 23B6                                l328 1914  
                              l285 2186                                l278 22E0  
                              l470 1CC2                                l623 1192  
                              l296 1EFA                                l297 1EF6  
                              l484 1D78                                l477 1E2E  
                              l905 1BFC                                _dia 00C3  
                              _day 00AE                                _key 0054  
                              _mes 00C9                                tosl 000FFD  
                              wreg 000FE8                    RtccReadDate@pDt 0001  
                      lcd_gotoxy@x 0006                        lcd_gotoxy@y 0005  
                             l3005 20B8                               l3023 20E4  
                             l3015 20D0                               l3009 20C0  
                             l3041 23A6                               l3033 2364  
                             l1282 240A                               l1292 24AA  
                             l3061 22E2                               l2421 26FA  
                             l2501 249E                               l3037 2390  
                             l2423 2700                               l2431 24C4  
                             l2511 2440                               l3039 2396  
                             l3311 2172                               l2433 24D0  
                             l2521 0FE4                               l3305 212C  
                             l2435 24DC                               l2507 2416  
                             l2523 0FF2                               l2515 0FCA  
                             l3171 1A7E                               l3163 1A56  
                             l2429 24B8                               l2541 1094  
                             l2533 1030                               l2621 1B8E  
                             l2605 1B34                               l3309 216C  
                             l3087 2004                               l2439 24E8  
                             l2527 0FFC                               l3191 1AEC  
                             l3159 1A42                               l2623 1BC4  
                             l2607 1B3A                               l3335 1292  
                             l3327 1260                               l3319 1236  
                             l2713 162C                               l2473 23CE  
                             l2457 272A                               l2561 1108  
                             l2553 10D8                               l2545 109A  
                             l2529 1012                               l3177 1AA6  
                             l3169 1A6E                               l2625 1BCA  
                             l2617 1B7A                               l2723 165C  
                             l2707 15F2                               l2803 1FE8  
                             l2395 277C                               l2475 23D8  
                             l2571 113A                               l2547 10BC  
                             l3195 1B00                               l2717 1640  
                             l2645 1996                               l2485 23FE  
                             l2477 23E0                               l2493 2476  
                             l2581 1168                               l2565 110C  
                             l2557 10E4                               l3349 12EC  
                             l2655 19C6                               l2639 196C  
                             l2807 1FF8                               l2495 2480  
                             l2583 1170                               l2575 1146  
                             l3199 1B18                               l3383 13B8  
                             l3359 132A                               l2649 19AA  
                             l2905 276A                               l2497 2488  
                             l2569 1130                               l2913 1C20  
                             l3369 136A                               l2763 16CA  
                             l2755 16B2                               l2691 1A2E  
                             l2683 1A16                               l2595 11EC  
                             l2931 1C96                               l2923 1C5E  
                             l3299 191C                               l3387 13D0  
                             l3379 13A4                               l2781 1F96  
                             l2589 1198                               l2597 11F8  
                             l3389 13D6                               l2759 16BE  
                             l2687 1A22                               l2791 1FBE  
                             l2775 1F84                               l2599 1214  
                             l2871 25A0                               l2935 1CAA  
                             l2943 1D94                               l2951 1DCA  
                             l2787 1FAC                               l2867 257E  
                             l2963 1E16                               l2971 1CDE  
                             l2789 1FB6                               l2799 1FDC  
                             l2879 22A4                               l2959 1E02  
                             l2993 1D60                               l2977 1D0C  
                             l2989 1D4C                               STR_1 0F57  
                             STR_2 0F66                               STR_3 0F46  
                             STR_4 0F8F                               STR_5 0FA2  
                             STR_6 0FAF                               STR_7 0F9A  
                             STR_8 0FA7                               STR_9 0F22  
                  _guardar_comando 2272                               u1400 2194  
                             u1420 21AC                               u2220 1DDA  
                             u1440 21C6                               u1418 2196  
                             u2170 1C6E                               u1460 21E2  
                             u2260 1D1C                               u1438 21AE  
                             u2520 1ABA                               u2408 1F0A  
                             u1458 21C8                               u1580 2436  
                             u1478 21E4                               u1590 2460  
                             u2438 1F34                               u2378 1EE2  
                             u1587 242C                               u1597 2456  
                             u2807 1922                               u2760 13E2  
                             u2817 1D66                               u2770 13E4  
                             u2827 1E1C                               u2837 1CB0  
                             u2598 18CA                               u2847 1B06  
                             u2857 276C                               u2867 277E  
                             u2797 13BE                   ?_lcd_send_nibble 0001  
                             _anio 00C1                               _flag 02F8  
                             _atoi 1B32                               _main 1224  
                             _hora 00C7                               _year 00B4  
                             fsr0h 000FEA                               indf0 000FEF  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                      __CFG_T1DIG$ON 000000  
                             prodh 000FF4                               prodl 000FF3  
                             start 0000                      __CFG_IESO$OFF 000000  
                 RtccReadDate@rTD0 000B                   RtccReadDate@rTD1 0003  
                     ?_inicializar 0001                       ___param_bank 000010  
                  RtccReadTime@pTm 0001                      cambiar_anio@i 002D  
             __size_of_cambiar_dia 00BE               __size_of_cambiar_mes 00B6  
                      _Delay1KTCYx 2768                      __CFG_PLLDIV$1 000000  
                            ?_atoi 0007                              ?_main 0001  
                  __end_of___awdiv 2004                              STR_10 0F75  
                            STR_11 0F34                              STR_12 0F7F  
                            STR_20 0FB7                              STR_21 0FB9  
                            STR_13 0F0F                              STR_14 0F7F  
                            STR_22 0FBB                              STR_23 0FB5  
                            STR_15 0FAB                              STR_24 0FB3  
                            STR_16 0F82                              STR_17 0FA2  
                            STR_25 0FBD                              STR_26 0FA2  
                            STR_18 0FA2                              STR_19 0FB5  
            __size_of_Delay100TCYx 0012                   _guardar_elemento 21FE  
                  ___awdiv@divisor 0003                    __end_of___lwdiv 2414  
                  __end_of___lwmod 24B4                  _restaurar_comando 26CA  
                 ?_validar_comando 0001                    ___awdiv@counter 0005  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                      ?_leer_teclado 0042  
               ?_restaurar_comando 0001                     __CFG_FCMEN$OFF 000000  
                            _Setup 2500                     _ocultar_teclas 0090  
                  __end_of_dpowers 0F0B                              _mes_d 00D4  
                            _mes_u 00D5                    __end_of_isdigit 2734  
                            _month 00B1                              atoi@a 000C  
                            atoi@s 0007                              main@i 004E  
                   __pbitbssCOMRAM 02F8                              pclath 000FFA  
                            tablat 000FF5                  ??_convertir_a_int 0012  
              ??_restaurar_comando 0001                       lcd_putrs@ptr 0009  
                            status 000FD8                    __end_of_sprintf 1224  
                validar_password@i 0003            __CFG_DSWDTOSC$INTOSCREF 000000  
                  __initialization 25D4                       _Delay100TCYx 277A  
                     __end_of_atoi 1C06                       __end_of_main 13FA  
                  ??_lcd_send_byte 0004                   RtccReadTime@rTD0 000B  
                 RtccReadTime@rTD1 0003                   __end_of_Read_RTC 1810  
         _guardar_current_password 258E          __size_of_ingresar_comando 000A  
        __end_of_restaurar_comando 26EE                  cambiar_anio@tecla 002C  
            __size_of_cambiar_anio 00B6                  cambiar_anio@valor 002F  
                           ??_atoi 0009                             ??_main 0049  
                    __activetblptr 000002                     ??_leer_teclado 0046  
          __end_of_guardar_comando 22E2                   __end_of_RtccWrOn 279E  
                           ?_Setup 0001                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _EECON2 000FA7  
                           _ANCON0 000F48                             _ANCON1 000F49  
                 ___awdiv@dividend 0001                     __CFG_WDTEN$OFF 000000  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                   __CFG_WPCFG$OFF 000000                   __end_of_caratula 1ED2  
                   __CFG_WPDIS$OFF 000000                     __CFG_XINST$OFF 000000  
                     _cambiar_anio 1CC4                   __end_of_lcd_init 2112  
                 __end_of_lcd_putc 2500                  ?_validar_password 0001  
                           ___wmul 26A2                          ??___awdiv 0005  
                   __CFG_STVREN$ON 000000                             _diasem 00C5  
                           _anio_d 00CD                             _anio_u 00CE  
                        ??___lwdiv 0005                          ??___lwmod 000C  
               ??_validar_password 0001                             _hora_d 00D2  
                           _hora_u 00D3                             clear_0 25DA  
                           clear_1 25E8                   ___awdiv@quotient 0007  
                           _minuto 00CB   __end_of_mostrar_guardar_password 2676  
            __end_of_RtccWriteDate 16D6              __end_of_RtccWriteTime 1A3A  
                 RtccWriteTime@pTm 0001           _guardar_tecla_presionada 1ED2  
                        ??_isdigit 0001                   ??_imprimir_tecla 0024  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_sprintf 0017                         __accesstop 0060  
          __end_of__initialization 260E                 __size_of_Write_RTC 0196  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
                    __end_of_Setup 2548                       __pidataBANK0 2752  
             __size_of_inicializar 002C                    __CFG_DSWDTPS$G2 000000  
       __size_of_restaurar_comando 0024                   leer_teclado@doit 0044  
              leer_teclado@ocultar 0042                    __CFG_OSC$INTOSC 000000  
                 ?_guardar_comando 0001                            ??_Setup 000E  
                lcd_gotoxy@address 0007                 __size_of_lcd_putrs 0054  
                     sprintf@width 0021                         __pbssBANK0 0060  
                        ?_Read_RTC 0001                    _tamanio_comando 0094  
                       _dia_semana 00CF          RtccWriteTime@tempHourWDay 000A  
         __end_of_guardar_elemento 2272               __end_of_leer_teclado 192E  
                        ?_RtccWrOn 0001                     lcd_send_byte@n 0003  
                          ?___wmul 0001                      ?_RtccReadDate 0001  
                    ?_RtccReadTime 0001                   _ingresar_comando 27AC  
                     ?_Delay1KTCYx 0001                 guardar_comando@aux 0026  
                __end_of_Write_RTC 1590                    _convertir_a_int 2734  
                       _lcd_comand 279E                          ?_caratula 0024  
                       _lcd_gotoxy 26EE                            _RTCVALH 000F99  
                          _RTCVALL 000F98                          ?_lcd_init 0001  
                        ?_lcd_putc 0001                         ??_Read_RTC 0013  
__size_of_mostrar_guardar_password 002C          ?_mostrar_guardar_password 0001  
       ??_guardar_current_password 0001                            __Hparam 0000  
                    ??_cambiar_dia 002B                      ??_cambiar_mes 002B  
                          __Lparam 0000           __size_of_lcd_send_nibble 0076  
                       ??_RtccWrOn 0001               guardar_comando@tecla 003A  
                   ??_RtccReadDate 0003                         _autorizado 0084  
                   ??_RtccReadTime 0003                            ___awdiv 1F6E  
                __end_of_lcd_putrs 2468                    __size_of___wmul 0028  
                          ___lwdiv 23B8                            ___lwmod 2468  
                     __psmallconst 0F00                        _RtccTimeVal 007E  
                          __pcinit 25D4                            _fecha_d 00D0  
                          _fecha_u 00D1                            __ramtop 0F00  
    mostrar_guardar_password@tecla 0039                            __ptext0 1224  
                          __ptext1 2112                            __ptext2 1810  
                          __ptext3 1ED2                            __ptext4 27AC  
                          __ptext5 1CC4                            __ptext6 1D7A  
                          __ptext7 1C06                            __ptext8 264A  
                          __ptext9 2548                            _buffer2 0096  
                          _comando 00BD                          _T1CONbits 000FCD  
                          _dpowers 0F01                            _isdigit 2712  
                   main@validacion 0050                         ??_caratula 0026  
                          _segundo 0092                            _sprintf 0FC0  
                       ??_lcd_init 0005                         ??_lcd_putc 0008  
             end_of_initialization 260E           __size_of_validar_comando 0076  
             lcd_send_byte@address 0004                      __Lmediumconst 0000  
                          postdec1 000FE5                            postdec2 000FDD  
       ??_guardar_tecla_presionada 0042                            postinc0 000FEE  
                          postinc1 000FE6                            postinc2 000FDE  
          __end_of_convertir_a_int 2752              __end_of_lcd_send_byte 264A  
              __end_of_cambiar_dia 1CC4                __end_of_cambiar_mes 1E30  
                        _PORTAbits 000F80                          _PORTCbits 000F82  
                 __CFG_DSBOREN$OFF 000000                        ?_lcd_comand 0001  
                 __CFG_CPUDIV$OSC1 000000                 ingresar_password@i 001E  
                        _TRISBbits 000F93                        ?_lcd_gotoxy 0005  
        __size_of_validar_password 0068                    _LCD_INIT_STRING 0F0B  
              main@puntero_funcion 004A               convertir_a_int@array 000E  
                 validar_comando@i 0008               convertir_a_int@valor 0010  
            __size_of_leer_teclado 011E                   _current_password 0078  
                 __CFG_IOL1WAY$OFF 000000          RtccWriteDate@tempDayMonth 000A  
              __CFG_MSSP7B_EN$MSK7 000000                       cambiar_dia@i 002D  
                    leer_teclado@i 0047                       cambiar_mes@i 002D  
                 Delay100TCYx@unit 0001                     __end_of___wmul 26CA  
        RtccWriteDate@tempHourWDay 000C                  ??_lcd_send_nibble 0001  
             __size_of_Delay1KTCYx 0012                   __CFG_DSWDTEN$OFF 000000  
                 cambiar_dia@tecla 002C                   cambiar_dia@valor 002F  
              start_initialization 25D4                 main@ocultar_teclas 004C  
                     _leer_teclado 1810               __end_of_RtccReadDate 2092  
             __end_of_RtccReadTime 2350           __end_of_ingresar_comando 27B6  
             RtccWriteTime@wasAlrm 0006               RtccWriteTime@wasWrEn 0007  
 __end_of_guardar_current_password 25D4      guardar_current_password@valor 0003  
           __size_of_RtccWriteDate 0146                    RtccWriteDate@di 0003  
                ?_guardar_elemento 0024             __size_of_RtccWriteTime 010C  
                __size_of_Read_RTC 013A                  ??_validar_comando 0005  
                    ??_inicializar 0001                        _cambiar_dia 1C06  
              __size_of_lcd_comand 000E                 ??_guardar_elemento 0028  
                      _cambiar_mes 1D7A                   cambiar_mes@tecla 002C  
              __size_of_lcd_gotoxy 0024                   cambiar_mes@valor 002F  
                         ??___wmul 0005                   ?_convertir_a_int 000E  
                      __pdataBANK0 00B7                  __size_of_RtccWrOn 0012  
                  RtccWriteTime@di 0003                   __CFG_LPT1OSC$OFF 000000  
                      _ALRMCFGbits 000F91            __end_of_LCD_INIT_STRING 0F0F  
                      __pbssCOMRAM 0052                          _Write_RTC 13FA  
                     _isdigit$2379 0002                  __size_of_caratula 00A2  
                  Delay1KTCYx@unit 0001           __size_of_guardar_comando 0070  
                __size_of_lcd_init 0080                        sprintf@flag 001D  
                __size_of_lcd_putc 004C                        sprintf@prec 0020  
          __size_of_imprimir_tecla 0046                          __pnvBANK0 00CD  
                 _tamanio_password 0052                   ___lwdiv@dividend 0001  
                    ?_Delay100TCYx 0001   __end_of_guardar_tecla_presionada 1F6E  
                         ?___awdiv 0001                           ?___lwdiv 0001  
                         ?___lwmod 0008                __end_of_inicializar 26A2  
          RtccWriteTime@tempMinSec 0008                          _lcd_putrs 2414  
                    _RtccWriteDate 1590                        __smallconst 0F00  
                    _RtccWriteTime 192E                           ?_isdigit 0001  
             __CFG_RTCOSC$T1OSCREF 000000                   _validar_password 2350  
                   __size_of_Setup 0048                         ?_Write_RTC 0001  
                 ___lwdiv@quotient 0005                           ?_sprintf 000D  
                _ingresar_password 1A3A                   _RtccAlrmTimeDate 0060  
                   ___wmul@product 0005                           _LATAbits 000F89  
                         _LATBbits 000F8A                 ?_ingresar_password 0001  
                         _PIE3bits 000FA3                          _segundo_d 00D8  
                   ??_Delay100TCYx 0001                          _segundo_u 00D9  
                    ?_cambiar_anio 0001                   __CFG_WDTPS$32768 000000  
              ??_ingresar_password 000B                 RtccWriteDate@wasOn 0005  
        guardar_tecla_presionada@i 003E           validar_comando@candidato 0001  
               _Rtcc_read_TimeDate 0070                     ?_RtccWriteDate 0001  
                       ?_lcd_putrs 0009                  ___wmul@multiplier 0001  
                   ?_RtccWriteTime 0001  __size_of_guardar_current_password 0046  
                   caratula@titulo 0024          ?_guardar_current_password 0001  
                        lcd_init@i 0005              __size_of_RtccReadDate 008E  
                     ??_lcd_comand 0005                          lcd_putc@c 0008  
            __size_of_RtccReadTime 006E                imprimir_tecla@tecla 0038  
                     ??_lcd_gotoxy 0006          __end_of_ingresar_password 1B32  
         _mostrar_guardar_password 264A                          copy_data0 2602  
                         _Read_RTC 16D6                       _tamanio_anio 0059  
                   ??_cambiar_anio 002B                    _lcd_send_nibble 2188  
                         __Hrparam 0000                        _inicializar 2676  
                         _RtccDate 0055                           __Lrparam 0000  
                ??_guardar_comando 0024                           _RtccTime 00AA  
                         _RtccWrOn 278C                 __end_of_lcd_comand 27AC  
            guardar_elemento@array 0024              guardar_elemento@tecla 002A  
    guardar_elemento@tamanio_array 0026                 __end_of_lcd_gotoxy 2712  
    guardar_tecla_presionada@letra 003C                       _RtccReadDate 2004  
                 __size_of___awdiv 0096                       _RtccReadTime 22E2  
                 __size_of___lwdiv 005C                ingresar_comando@key 003B  
                 __size_of___lwmod 004C                       _RtccTimeDate 0068  
                       sprintf@val 001E                           _caratula 1E30  
                 __size_of_isdigit 0022                    ___lwdiv@divisor 0003  
                      ??_Write_RTC 000E                    ___lwdiv@counter 0007  
__size_of_guardar_tecla_presionada 009C                           __ptext10 258E  
                         __ptext11 2272                           __ptext20 0FC0  
                         __ptext12 26CA                           __ptext21 2712  
                         __ptext13 2676                           __ptext30 2768  
                         __ptext22 26A2                           __ptext14 21FE  
                         __ptext31 279E                           __ptext23 2468  
                         __ptext15 2734                           __ptext40 16D6  
                         __ptext32 2618                           __ptext24 23B8  
                         __ptext16 1B32                           __ptext41 22E2  
                         __ptext33 2188                           __ptext25 2414  
                         __ptext17 1A3A                           __ptext42 2004  
                         __ptext34 277A                           __ptext26 24B4  
                         __ptext18 2350                           __ptext43 0000  
                         __ptext35 13FA                           __ptext27 26EE  
                         __ptext19 1E30                           __ptext36 1F6E  
                         __ptext28 2500                           __ptext37 192E  
                         __ptext29 2092                           __ptext38 1590  
                         __ptext39 278C          ?_guardar_tecla_presionada 003C  
                  _validar_comando 2112                           _lcd_init 2092  
                         _lcd_putc 24B4                   __size_of_sprintf 0264  
                ?_ingresar_comando 0001             __size_of_lcd_send_byte 0032  
                   _imprimir_tecla 2548                      __size_of_atoi 00D4  
                    __size_of_main 01D6                 ??_ingresar_comando 003B  
                         _minuto_d 00D6                           _minuto_u 00D7  
                         _password 00B7                       ?_cambiar_dia 0001  
                     ?_cambiar_mes 0001                           atoi@sign 000B  
                    ??_Delay1KTCYx 0001                    ??_RtccWriteDate 0004  
                  ??_RtccWriteTime 0004                        ??_lcd_putrs 000B  
        __size_of_guardar_elemento 0074                        _OSCTUNEbits 000F9B  
                       _INTCONbits 000FF2                        _tamanio_dia 005B  
                      _tamanio_mes 005D                 RtccWriteTime@wasOn 0005  
             __end_of_Delay100TCYx 278C                           isdigit@c 0003  
     guardar_tecla_presionada@doit 0040         __size_of_ingresar_password 00F8  
           __end_of_imprimir_tecla 258E                          sprintf@ap 001B  
          __end_of_lcd_send_nibble 21FE                          sprintf@sp 000D  
                 ___lwmod@dividend 0008                         _OSCCONbits 000FD3  
         __end_of_validar_password 23B8              RtccWriteDate@tempYear 0007  
                imprimir_tecla@aux 0024                      _lcd_send_byte 2618  
                       _RTCCFGbits 000F3F            __end_of_validar_comando 2188  
           validar_comando@validar 0003                           sprintf@c 0023  
                         sprintf@f 000F                    ___lwmod@divisor 000A  
              __end_of_Delay1KTCYx 277A                    ___lwmod@counter 000C  
         __size_of_convertir_a_int 001E               __end_of_cambiar_anio 1D7A  
             RtccWriteDate@wasAlrm 0006               RtccWriteDate@wasWrEn 0009  
           ingresar_password@i_517 001C                    ?_imprimir_tecla 0001  
           ingresar_password@clear 000C              lcd_send_nibble@nibble 0002  
