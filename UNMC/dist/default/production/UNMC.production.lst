

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 01 21:34:58 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	idataCOMRAM
    62  002578                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _anio
    66  002578  000F               	dw	15
    67                           
    68                           ;initializer for _dia
    69  00257A  0008               	dw	8
    70                           
    71                           ;initializer for _hora
    72  00257C  0012               	dw	18
    73                           
    74                           ;initializer for _mes
    75  00257E  0009               	dw	9
    76                           
    77                           ;initializer for _minuto
    78  002580  001E               	dw	30
    79                           
    80                           	psect	idataBANK0
    81  00256C                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _password
    85  00256C  31                 	db	49
    86  00256D  32                 	db	50
    87  00256E  33                 	db	51
    88  00256F  34                 	db	52
    89  002570  35                 	db	53
    90  002571  36                 	db	54
    91                           
    92                           ;initializer for _comando
    93  002572  78                 	db	120
    94  002573  78                 	db	120
    95  002574  78                 	db	120
    96  002575  00                 	db	0
    97                           
    98                           ;initializer for _diasem
    99  002576  0003               	dw	3
   100                           
   101                           	psect	smallconst
   102  000F00                     __psmallconst:
   103                           	opt stack 0
   104  000F00  00                 	db	0
   105  000F01                     _dpowers:
   106                           	opt stack 0
   107  000F01  0001               	dw	1
   108  000F03  000A               	dw	10
   109  000F05  0064               	dw	100
   110  000F07  03E8               	dw	1000
   111  000F09  2710               	dw	10000
   112  000F0B                     __end_of_dpowers:
   113                           	opt stack 0
   114  000F0B                     _LCD_INIT_STRING:
   115                           	opt stack 0
   116  000F0B  28                 	db	40
   117  000F0C  0C                 	db	12
   118  000F0D  01                 	db	1
   119  000F0E  06                 	db	6
   120  000F0F                     __end_of_LCD_INIT_STRING:
   121                           	opt stack 0
   122  000F0F                     STR_16:
   123                           
   124                           ; BSR set to: 15
   125  000F0F  49                 	db	73	;'I'
   126  000F10  6E                 	db	110	;'n'
   127  000F11  73                 	db	115	;'s'
   128  000F12  65                 	db	101	;'e'
   129  000F13  72                 	db	114	;'r'
   130  000F14  74                 	db	116	;'t'
   131  000F15  65                 	db	101	;'e'
   132  000F16  20                 	db	32
   133  000F17  64                 	db	100	;'d'
   134  000F18  69                 	db	105	;'i'
   135  000F19  61                 	db	97	;'a'
   136  000F1A  3A                 	db	58	;':'
   137  000F1B  20                 	db	32
   138  000F1C  20                 	db	32
   139  000F1D  20                 	db	32
   140  000F1E  20                 	db	32
   141  000F1F  20                 	db	32
   142  000F20  00                 	db	0
   143  000F21                     STR_13:
   144                           
   145                           ; BSR set to: 15
   146  000F21  49                 	db	73	;'I'
   147  000F22  6E                 	db	110	;'n'
   148  000F23  73                 	db	115	;'s'
   149  000F24  65                 	db	101	;'e'
   150  000F25  72                 	db	114	;'r'
   151  000F26  74                 	db	116	;'t'
   152  000F27  65                 	db	101	;'e'
   153  000F28  20                 	db	32
   154  000F29  70                 	db	112	;'p'
   155  000F2A  61                 	db	97	;'a'
   156  000F2B  73                 	db	115	;'s'
   157  000F2C  73                 	db	115	;'s'
   158  000F2D  77                 	db	119	;'w'
   159  000F2E  6F                 	db	111	;'o'
   160  000F2F  72                 	db	114	;'r'
   161  000F30  64                 	db	100	;'d'
   162  000F31  00                 	db	0
   163  000F32                     STR_12:
   164                           
   165                           ; BSR set to: 15
   166  000F32  20                 	db	32
   167  000F33  20                 	db	32
   168  000F34  25                 	db	37
   169  000F35  30                 	db	48	;'0'
   170  000F36  32                 	db	50	;'2'
   171  000F37  75                 	db	117	;'u'
   172  000F38  3A                 	db	58	;':'
   173  000F39  25                 	db	37
   174  000F3A  30                 	db	48	;'0'
   175  000F3B  32                 	db	50	;'2'
   176  000F3C  75                 	db	117	;'u'
   177  000F3D  3A                 	db	58	;':'
   178  000F3E  25                 	db	37
   179  000F3F  30                 	db	48	;'0'
   180  000F40  32                 	db	50	;'2'
   181  000F41  75                 	db	117	;'u'
   182  000F42  00                 	db	0
   183  000F43                     STR_11:
   184                           
   185                           ; BSR set to: 15
   186  000F43  25                 	db	37
   187  000F44  30                 	db	48	;'0'
   188  000F45  32                 	db	50	;'2'
   189  000F46  75                 	db	117	;'u'
   190  000F47  2F                 	db	47
   191  000F48  25                 	db	37
   192  000F49  30                 	db	48	;'0'
   193  000F4A  32                 	db	50	;'2'
   194  000F4B  75                 	db	117	;'u'
   195  000F4C  2F                 	db	47
   196  000F4D  25                 	db	37
   197  000F4E  30                 	db	48	;'0'
   198  000F4F  32                 	db	50	;'2'
   199  000F50  75                 	db	117	;'u'
   200  000F51  00                 	db	0
   201  000F52                     STR_22:
   202                           
   203                           ; BSR set to: 15
   204  000F52  63                 	db	99	;'c'
   205  000F53  61                 	db	97	;'a'
   206  000F54  6D                 	db	109	;'m'
   207  000F55  62                 	db	98	;'b'
   208  000F56  69                 	db	105	;'i'
   209  000F57  61                 	db	97	;'a'
   210  000F58  72                 	db	114	;'r'
   211  000F59  20                 	db	32
   212  000F5A  70                 	db	112	;'p'
   213  000F5B  61                 	db	97	;'a'
   214  000F5C  73                 	db	115	;'s'
   215  000F5D  73                 	db	115	;'s'
   216  000F5E  00                 	db	0
   217  000F5F                     STR_14:
   218                           
   219                           ; BSR set to: 15
   220  000F5F  45                 	db	69	;'E'
   221  000F60  52                 	db	82	;'R'
   222  000F61  52                 	db	82	;'R'
   223  000F62  4F                 	db	79	;'O'
   224  000F63  52                 	db	82	;'R'
   225  000F64  20                 	db	32
   226  000F65  70                 	db	112	;'p'
   227  000F66  61                 	db	97	;'a'
   228  000F67  73                 	db	115	;'s'
   229  000F68  73                 	db	115	;'s'
   230  000F69  00                 	db	0
   231  000F6A                     STR_17:
   232                           
   233                           ; BSR set to: 15
   234  000F6A  20                 	db	32
   235  000F6B  20                 	db	32
   236  000F6C  20                 	db	32
   237  000F6D  20                 	db	32
   238  000F6E  20                 	db	32
   239  000F6F  20                 	db	32
   240  000F70  20                 	db	32
   241  000F71  20                 	db	32
   242  000F72  20                 	db	32
   243  000F73  00                 	db	0
   244  000F74                     STR_19:
   245                           
   246                           ; BSR set to: 15
   247  000F74  57                 	db	87	;'W'
   248  000F75  65                 	db	101	;'e'
   249  000F76  6C                 	db	108	;'l'
   250  000F77  63                 	db	99	;'c'
   251  000F78  6F                 	db	111	;'o'
   252  000F79  6D                 	db	109	;'m'
   253  000F7A  65                 	db	101	;'e'
   254  000F7B  00                 	db	0
   255  000F7C                     STR_1:
   256                           
   257                           ; BSR set to: 15
   258  000F7C  25                 	db	37
   259  000F7D  30                 	db	48	;'0'
   260  000F7E  31                 	db	49	;'1'
   261  000F7F  75                 	db	117	;'u'
   262  000F80  00                 	db	0
   263  000F81                     STR_20:
   264                           
   265                           ; BSR set to: 15
   266  000F81  30                 	db	48	;'0'
   267  000F82  30                 	db	48	;'0'
   268  000F83  31                 	db	49	;'1'
   269  000F84  00                 	db	0
   270  000F85                     STR_21:
   271                           
   272                           ; BSR set to: 15
   273  000F85  30                 	db	48	;'0'
   274  000F86  30                 	db	48	;'0'
   275  000F87  32                 	db	50	;'2'
   276  000F88  00                 	db	0
   277  000F89                     STR_18:
   278                           
   279                           ; BSR set to: 15
   280  000F89  78                 	db	120	;'x'
   281  000F8A  78                 	db	120	;'x'
   282  000F8B  78                 	db	120	;'x'
   283  000F8C  00                 	db	0
   284  000F8D                     STR_8:
   285                           
   286                           ; BSR set to: 15
   287  000F8D  23                 	db	35
   288  000F8E  00                 	db	0
   289  000F8F                     STR_3:
   290                           
   291                           ; BSR set to: 15
   292  000F8F  2A                 	db	42
   293  000F90  00                 	db	0
   294  000F91                     STR_4:
   295                           
   296                           ; BSR set to: 15
   297  000F91  41                 	db	65	;'A'
   298  000F92  00                 	db	0
   299  000F93                     STR_5:
   300                           
   301                           ; BSR set to: 15
   302  000F93  42                 	db	66	;'B'
   303  000F94  00                 	db	0
   304  000F95                     STR_6:
   305                           
   306                           ; BSR set to: 15
   307  000F95  43                 	db	67	;'C'
   308  000F96  00                 	db	0
   309  000F97                     STR_9:
   310                           
   311                           ; BSR set to: 15
   312  000F97  44                 	db	68	;'D'
   313  000F98  00                 	db	0
   314  0000                     
   315                           ; #config settings
   316  000F99  00                 	db	0	; dummy byte at the end
   317  0000                     
   318                           	psect	nvBANK0
   319  0000B3                     __pnvBANK0:
   320                           	opt stack 0
   321  0000B3                     _anio_d:
   322                           	opt stack 0
   323  0000B3                     	ds	1
   324  0000B4                     _anio_u:
   325                           	opt stack 0
   326  0000B4                     	ds	1
   327  0000B5                     _dia_semana:
   328                           	opt stack 0
   329  0000B5                     	ds	1
   330  0000B6                     _fecha_d:
   331                           	opt stack 0
   332  0000B6                     	ds	1
   333  0000B7                     _fecha_u:
   334                           	opt stack 0
   335  0000B7                     	ds	1
   336  0000B8                     _hora_d:
   337                           	opt stack 0
   338  0000B8                     	ds	1
   339  0000B9                     _hora_u:
   340                           	opt stack 0
   341  0000B9                     	ds	1
   342  0000BA                     _mes_d:
   343                           	opt stack 0
   344  0000BA                     	ds	1
   345  0000BB                     _mes_u:
   346                           	opt stack 0
   347  0000BB                     	ds	1
   348  0000BC                     _minuto_d:
   349                           	opt stack 0
   350  0000BC                     	ds	1
   351  0000BD                     _minuto_u:
   352                           	opt stack 0
   353  0000BD                     	ds	1
   354  0000BE                     _segundo_d:
   355                           	opt stack 0
   356  0000BE                     	ds	1
   357  0000BF                     _segundo_u:
   358                           	opt stack 0
   359  0000BF                     	ds	1
   360  0000                     _ANCON0	set	3912
   361  0000                     _ANCON1	set	3913
   362  0000                     _RTCCFG	set	3903
   363  0000                     _RTCCFGbits	set	3903
   364  0000                     _ADCON0	set	4034
   365  0000                     _ADCON1	set	4033
   366  0000                     _ALRMCFGbits	set	3985
   367  0000                     _EECON2	set	4007
   368  0000                     _INTCONbits	set	4082
   369  0000                     _LATAbits	set	3977
   370  0000                     _LATBbits	set	3978
   371  0000                     _OSCCONbits	set	4051
   372  0000                     _OSCTUNEbits	set	3995
   373  0000                     _PIE3bits	set	4003
   374  0000                     _PORTAbits	set	3968
   375  0000                     _PORTCbits	set	3970
   376  0000                     _RTCVALH	set	3993
   377  0000                     _RTCVALL	set	3992
   378  0000                     _T1CONbits	set	4045
   379  0000                     _TRISA	set	3986
   380  0000                     _TRISB	set	3987
   381  0000                     _TRISBbits	set	3987
   382  0000                     _TRISC	set	3988
   383                           
   384                           	psect	cinit
   385  00219A                     __pcinit:
   386                           	opt stack 0
   387  00219A                     start_initialization:
   388                           	opt stack 0
   389  00219A                     __initialization:
   390                           	opt stack 0
   391                           
   392                           ; Clear objects allocated to BANK0 (83 bytes)
   393  00219A  EE00  F060         	lfsr	0,__pbssBANK0
   394  00219E  0E53               	movlw	83
   395  0021A0                     clear_0:
   396  0021A0  6AEE               	clrf	postinc0,c
   397  0021A2  06E8               	decf	wreg,f,c
   398  0021A4  E1FD               	bnz	clear_0
   399                           
   400                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   401  0021A6  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   402                           
   403                           ; Clear objects allocated to COMRAM (17 bytes)
   404  0021A8  EE00  F044         	lfsr	0,__pbssCOMRAM
   405  0021AC  0E11               	movlw	17
   406  0021AE                     clear_1:
   407  0021AE  6AEE               	clrf	postinc0,c
   408  0021B0  06E8               	decf	wreg,f,c
   409  0021B2  E1FD               	bnz	clear_1
   410                           
   411                           ; Initialize objects allocated to BANK0 (12 bytes)
   412                           ; load TBLPTR registers with __pidataBANK0
   413  0021B4  0E6C               	movlw	low __pidataBANK0
   414  0021B6  6EF6               	movwf	tblptrl,c
   415  0021B8  0E25               	movlw	high __pidataBANK0
   416  0021BA  6EF7               	movwf	tblptrh,c
   417  0021BC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   418  0021BE  6EF8               	movwf	tblptru,c
   419  0021C0  EE00  F0C0         	lfsr	0,__pdataBANK0
   420  0021C4  EE10 F00C          	lfsr	1,12
   421  0021C8                     copy_data0:
   422  0021C8  0009               	tblrd		*+
   423  0021CA  CFF5 FFEE          	movff	tablat,postinc0
   424  0021CE  50E5               	movf	postdec1,w,c
   425  0021D0  50E1               	movf	fsr1l,w,c
   426  0021D2  E1FA               	bnz	copy_data0
   427                           
   428                           ; Initialize objects allocated to COMRAM (10 bytes)
   429                           ; load TBLPTR registers with __pidataCOMRAM
   430  0021D4  0E78               	movlw	low __pidataCOMRAM
   431  0021D6  6EF6               	movwf	tblptrl,c
   432  0021D8  0E25               	movlw	high __pidataCOMRAM
   433  0021DA  6EF7               	movwf	tblptrh,c
   434  0021DC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   435  0021DE  6EF8               	movwf	tblptru,c
   436  0021E0  EE00  F055         	lfsr	0,__pdataCOMRAM
   437  0021E4  EE10 F00A          	lfsr	1,10
   438  0021E8                     copy_data1:
   439  0021E8  0009               	tblrd		*+
   440  0021EA  CFF5 FFEE          	movff	tablat,postinc0
   441  0021EE  50E5               	movf	postdec1,w,c
   442  0021F0  50E1               	movf	fsr1l,w,c
   443  0021F2  E1FA               	bnz	copy_data1
   444  0021F4                     end_of_initialization:
   445                           	opt stack 0
   446  0021F4                     __end_of__initialization:
   447                           	opt stack 0
   448  0021F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   449  0021F6  6EF8               	movwf	tblptru,c
   450  0021F8  0100               	movlb	0
   451  0021FA  EF65  F00A         	goto	_main	;jump to C main() function
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461                           	psect	bitbssCOMRAM
   462  0002F8                     __pbitbssCOMRAM:
   463                           	opt stack 0
   464  0002F8                     _flag:
   465                           	opt stack 0
   466  0002F8                     	ds	1
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	bssCOMRAM
   477  000044                     __pbssCOMRAM:
   478                           	opt stack 0
   479  000044                     _tamanio_password:
   480                           	opt stack 0
   481  000044                     	ds	2
   482  000046                     _key:
   483                           	opt stack 0
   484  000046                     	ds	1
   485  000047                     _RtccDate:
   486                           	opt stack 0
   487  000047                     	ds	4
   488  00004B                     _RtccTime:
   489                           	opt stack 0
   490  00004B                     	ds	4
   491  00004F                     _tamanio_anio:
   492                           	opt stack 0
   493  00004F                     	ds	2
   494  000051                     _tamanio_dia:
   495                           	opt stack 0
   496  000051                     	ds	2
   497  000053                     _tamanio_mes:
   498                           	opt stack 0
   499  000053                     	ds	2
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           
   509                           	psect	dataCOMRAM
   510  000055                     __pdataCOMRAM:
   511                           	opt stack 0
   512  000055                     _anio:
   513                           	opt stack 0
   514  000055                     	ds	2
   515  000057                     _dia:
   516                           	opt stack 0
   517  000057                     	ds	2
   518  000059                     _hora:
   519                           	opt stack 0
   520  000059                     	ds	2
   521  00005B                     _mes:
   522                           	opt stack 0
   523  00005B                     	ds	2
   524  00005D                     _minuto:
   525                           	opt stack 0
   526  00005D                     	ds	2
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssBANK0
   537  000060                     __pbssBANK0:
   538                           	opt stack 0
   539  000060                     _RtccAlrmTimeDate:
   540                           	opt stack 0
   541  000060                     	ds	8
   542  000068                     _RtccTimeDate:
   543                           	opt stack 0
   544  000068                     	ds	8
   545  000070                     _Rtcc_read_TimeDate:
   546                           	opt stack 0
   547  000070                     	ds	8
   548  000078                     _current_password:
   549                           	opt stack 0
   550  000078                     	ds	6
   551  00007E                     _RtccTimeVal:
   552                           	opt stack 0
   553  00007E                     	ds	4
   554  000082                     _a:
   555                           	opt stack 0
   556  000082                     	ds	2
   557  000084                     _autorizado:
   558                           	opt stack 0
   559  000084                     	ds	2
   560  000086                     _b:
   561                           	opt stack 0
   562  000086                     	ds	2
   563  000088                     _c:
   564                           	opt stack 0
   565  000088                     	ds	2
   566  00008A                     _i:
   567                           	opt stack 0
   568  00008A                     	ds	2
   569  00008C                     _j:
   570                           	opt stack 0
   571  00008C                     	ds	2
   572  00008E                     _k:
   573                           	opt stack 0
   574  00008E                     	ds	2
   575  000090                     _ocultar_teclas:
   576                           	opt stack 0
   577  000090                     	ds	2
   578  000092                     _segundo:
   579                           	opt stack 0
   580  000092                     	ds	2
   581  000094                     _tamanio_comando:
   582                           	opt stack 0
   583  000094                     	ds	2
   584  000096                     _buffer2:
   585                           	opt stack 0
   586  000096                     	ds	20
   587  0000AA                     _day:
   588                           	opt stack 0
   589  0000AA                     	ds	3
   590  0000AD                     _month:
   591                           	opt stack 0
   592  0000AD                     	ds	3
   593  0000B0                     _year:
   594                           	opt stack 0
   595  0000B0                     	ds	3
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           wreg	equ	0xFE8
   602                           postdec1	equ	0xFE5
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	dataBANK0
   606  0000C0                     __pdataBANK0:
   607                           	opt stack 0
   608  0000C0                     _password:
   609                           	opt stack 0
   610  0000C0                     	ds	6
   611  0000C6                     _comando:
   612                           	opt stack 0
   613  0000C6                     	ds	4
   614  0000CA                     _diasem:
   615                           	opt stack 0
   616  0000CA                     	ds	2
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	cstackCOMRAM
   627  000001                     __pcstackCOMRAM:
   628                           	opt stack 0
   629  000001                     ??_isdigit:
   630  000001                     ??_guardar_current_password:
   631  000001                     ??_lcd_send_nibble:
   632  000001                     ?___wmul:
   633                           	opt stack 0
   634  000001                     ?___awdiv:
   635                           	opt stack 0
   636  000001                     ?___lwdiv:
   637                           	opt stack 0
   638  000001                     Delay100TCYx@unit:
   639                           	opt stack 0
   640  000001                     Delay1KTCYx@unit:
   641                           	opt stack 0
   642  000001                     validar_comando@candidato:
   643                           	opt stack 0
   644  000001                     RtccReadDate@pDt:
   645                           	opt stack 0
   646  000001                     RtccReadTime@pTm:
   647                           	opt stack 0
   648  000001                     RtccWriteDate@pDt:
   649                           	opt stack 0
   650  000001                     RtccWriteTime@pTm:
   651                           	opt stack 0
   652  000001                     ___wmul@multiplier:
   653                           	opt stack 0
   654  000001                     ___awdiv@dividend:
   655                           	opt stack 0
   656  000001                     ___lwdiv@dividend:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x0
   660  000001                     	ds	1
   661  000002                     lcd_send_nibble@nibble:
   662                           	opt stack 0
   663  000002                     _isdigit$2145:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x1
   667  000002                     	ds	1
   668  000003                     guardar_current_password@valor:
   669                           	opt stack 0
   670  000003                     lcd_send_byte@n:
   671                           	opt stack 0
   672  000003                     RtccWriteDate@di:
   673                           	opt stack 0
   674  000003                     RtccWriteTime@di:
   675                           	opt stack 0
   676  000003                     isdigit@c:
   677                           	opt stack 0
   678  000003                     validar_comando@validar:
   679                           	opt stack 0
   680  000003                     validar_password@i:
   681                           	opt stack 0
   682  000003                     ___wmul@multiplicand:
   683                           	opt stack 0
   684  000003                     ___awdiv@divisor:
   685                           	opt stack 0
   686  000003                     ___lwdiv@divisor:
   687                           	opt stack 0
   688  000003                     RtccReadDate@rTD1:
   689                           	opt stack 0
   690  000003                     RtccReadTime@rTD1:
   691                           	opt stack 0
   692                           
   693                           ; 8 bytes @ 0x2
   694  000003                     	ds	1
   695  000004                     lcd_send_byte@address:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x3
   699  000004                     	ds	1
   700  000005                     ??_validar_comando:
   701  000005                     lcd_init@i:
   702                           	opt stack 0
   703  000005                     lcd_gotoxy@y:
   704                           	opt stack 0
   705  000005                     lcd_comand@d:
   706                           	opt stack 0
   707  000005                     RtccWriteDate@wasOn:
   708                           	opt stack 0
   709  000005                     RtccWriteTime@wasOn:
   710                           	opt stack 0
   711  000005                     ___awdiv@counter:
   712                           	opt stack 0
   713  000005                     ___wmul@product:
   714                           	opt stack 0
   715  000005                     ___lwdiv@quotient:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x4
   719  000005                     	ds	1
   720  000006                     lcd_gotoxy@x:
   721                           	opt stack 0
   722  000006                     RtccWriteDate@wasAlrm:
   723                           	opt stack 0
   724  000006                     RtccWriteTime@wasAlrm:
   725                           	opt stack 0
   726  000006                     ___awdiv@sign:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x5
   730  000006                     	ds	1
   731  000007                     ?_atoi:
   732                           	opt stack 0
   733  000007                     lcd_gotoxy@address:
   734                           	opt stack 0
   735  000007                     RtccWriteTime@wasWrEn:
   736                           	opt stack 0
   737  000007                     ___lwdiv@counter:
   738                           	opt stack 0
   739  000007                     RtccWriteDate@tempYear:
   740                           	opt stack 0
   741  000007                     atoi@s:
   742                           	opt stack 0
   743  000007                     ___awdiv@quotient:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x6
   747  000007                     	ds	1
   748  000008                     ?___lwmod:
   749                           	opt stack 0
   750  000008                     lcd_putc@c:
   751                           	opt stack 0
   752  000008                     validar_comando@i:
   753                           	opt stack 0
   754  000008                     RtccWriteTime@tempMinSec:
   755                           	opt stack 0
   756  000008                     ___lwmod@dividend:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x7
   760  000008                     	ds	1
   761  000009                     ??_atoi:
   762  000009                     RtccWriteDate@wasWrEn:
   763                           	opt stack 0
   764  000009                     lcd_putrs@ptr:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x8
   768  000009                     	ds	1
   769  00000A                     RtccWriteDate@tempDayMonth:
   770                           	opt stack 0
   771  00000A                     RtccWriteTime@tempHourWDay:
   772                           	opt stack 0
   773  00000A                     ___lwmod@divisor:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x9
   777  00000A                     	ds	1
   778  00000B                     ??_ingresar_password:
   779  00000B                     ??_mostrar_actualizacion_dia:
   780  00000B                     atoi@sign:
   781                           	opt stack 0
   782  00000B                     RtccReadDate@rTD0:
   783                           	opt stack 0
   784  00000B                     RtccReadTime@rTD0:
   785                           	opt stack 0
   786                           
   787                           ; 8 bytes @ 0xA
   788  00000B                     	ds	1
   789  00000C                     ___lwmod@counter:
   790                           	opt stack 0
   791  00000C                     mostrar_actualizacion_dia@i:
   792                           	opt stack 0
   793  00000C                     RtccWriteDate@tempHourWDay:
   794                           	opt stack 0
   795  00000C                     atoi@a:
   796                           	opt stack 0
   797  00000C                     ingresar_password@clear:
   798                           	opt stack 0
   799                           
   800                           ; 16 bytes @ 0xB
   801  00000C                     	ds	1
   802  00000D                     ?_sprintf:
   803                           	opt stack 0
   804  00000D                     sprintf@sp:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0xC
   808  00000D                     	ds	1
   809  00000E                     convertir_a_int@array:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0xD
   813  00000E                     	ds	1
   814  00000F                     sprintf@f:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0xE
   818  00000F                     	ds	1
   819  000010                     convertir_a_int@valor:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0xF
   823  000010                     	ds	2
   824  000012                     
   825                           ; 0 bytes @ 0x11
   826  000012                     	ds	1
   827  000013                     
   828                           ; 0 bytes @ 0x12
   829  000013                     	ds	4
   830  000017                     ??_sprintf:
   831                           
   832                           ; 0 bytes @ 0x16
   833  000017                     	ds	4
   834  00001B                     sprintf@ap:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x1A
   838  00001B                     	ds	1
   839  00001C                     ingresar_password@i_1002:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x1B
   843  00001C                     	ds	1
   844  00001D                     sprintf@flag:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x1C
   848  00001D                     	ds	1
   849  00001E                     ingresar_password@i:
   850                           	opt stack 0
   851  00001E                     sprintf@val:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x1D
   855  00001E                     	ds	2
   856  000020                     sprintf@prec:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x1F
   860  000020                     	ds	1
   861  000021                     sprintf@width:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x20
   865  000021                     	ds	2
   866  000023                     sprintf@c:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x22
   870  000023                     	ds	1
   871  000024                     ??_guardar_comando:
   872  000024                     imprimir_tecla@tecla:
   873                           	opt stack 0
   874  000024                     guardar_elemento@array:
   875                           	opt stack 0
   876  000024                     caratula@titulo:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x23
   880  000024                     	ds	1
   881  000025                     mostrar_guardar_password@tecla:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x24
   885  000025                     	ds	1
   886  000026                     guardar_comando@tecla:
   887                           	opt stack 0
   888  000026                     guardar_elemento@tamanio_array:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x25
   892  000026                     	ds	1
   893  000027                     ingresar_comando@key:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x26
   897  000027                     	ds	1
   898  000028                     ??_guardar_elemento:
   899                           
   900                           ; 0 bytes @ 0x27
   901  000028                     	ds	2
   902  00002A                     guardar_elemento@tecla:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x29
   906  00002A                     	ds	1
   907  00002B                     cambiar_dia@tecla:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x2A
   911  00002B                     	ds	1
   912  00002C                     cambiar_dia@valor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x2B
   916  00002C                     	ds	2
   917  00002E                     guardar_tecla_presionada@letra:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x2D
   921  00002E                     	ds	2
   922  000030                     guardar_tecla_presionada@i:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x2F
   926  000030                     	ds	2
   927  000032                     guardar_tecla_presionada@doit:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x31
   931  000032                     	ds	2
   932  000034                     leer_teclado@ocultar:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x33
   936  000034                     	ds	2
   937  000036                     leer_teclado@doit:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x35
   941  000036                     	ds	2
   942  000038                     ??_leer_teclado:
   943                           
   944                           ; 0 bytes @ 0x37
   945  000038                     	ds	1
   946  000039                     leer_teclado@i:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x38
   950  000039                     	ds	2
   951  00003B                     ??_main:
   952                           
   953                           ; 0 bytes @ 0x3A
   954  00003B                     	ds	1
   955  00003C                     main@puntero_funcion:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x3B
   959  00003C                     	ds	2
   960  00003E                     main@ocultar_teclas:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x3D
   964  00003E                     	ds	2
   965  000040                     main@i:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x3F
   969  000040                     	ds	2
   970  000042                     main@validacion:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x41
   974  000042                     	ds	2
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1l	equ	0xFE1
   983                           
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 141 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  i               2   63[COMRAM] int 
   994 ;;  validacion      2   65[COMRAM] int 
   995 ;;  ocultar_tecl    2   61[COMRAM] int 
   996 ;;  puntero_func    2   59[COMRAM] PTR void 
   997 ;;		 -> ingresar_comando(2), cambiar_dia(2), 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  2  291[None  ] int 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1008 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1010 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1011 ;;Total ram usage:        9 bytes
  1012 ;; Hardware stack levels required when called:    9
  1013 ;; This function calls:
  1014 ;;		_Read_RTC
  1015 ;;		_Setup
  1016 ;;		_caratula
  1017 ;;		_ingresar_password
  1018 ;;		_lcd_gotoxy
  1019 ;;		_lcd_putrs
  1020 ;;		_leer_teclado
  1021 ;;		_mostrar_actualizacion_dia
  1022 ;;		_restaurar_comando
  1023 ;;		_validar_comando
  1024 ;; This function is called by:
  1025 ;;		Startup code after reset
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text0
  1030  0014CA                     __ptext0:
  1031                           	opt stack 0
  1032  0014CA                     _main:
  1033                           	opt stack 22
  1034                           
  1035                           ;main.c: 143: Setup();
  1036                           
  1037                           ; BSR set to: 15
  1038                           ;incstack = 0
  1039  0014CA  ECA3  F011         	call	_Setup	;wreg free
  1040                           
  1041                           ;main.c: 144: restaurar_comando();
  1042  0014CE  EC50  F012         	call	_restaurar_comando	;wreg free
  1043                           
  1044                           ;main.c: 146: int ocultar_teclas = 1;
  1045  0014D2  0E00               	movlw	0
  1046  0014D4  6E3F               	movwf	main@ocultar_teclas+1,c
  1047  0014D6  0E01               	movlw	1
  1048  0014D8  6E3E               	movwf	main@ocultar_teclas,c
  1049  0014DA  D000               	goto	l3061
  1050  0014DC                     l3061:
  1051                           
  1052                           ;main.c: 151: {
  1053                           ;main.c: 152: Read_RTC();
  1054  0014DC  EC88  F00B         	call	_Read_RTC	;wreg free
  1055                           
  1056                           ;main.c: 153: if (!autorizado){
  1057  0014E0  0100               	movlb	0	; () banked
  1058  0014E2  5184               	movf	_autorizado& (0+255),w,b
  1059  0014E4  0100               	movlb	0	; () banked
  1060  0014E6  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  1061  0014E8  A4D8               	btfss	status,2,c
  1062  0014EA  D00D               	goto	l3069
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;main.c: 154: leer_teclado(ocultar_teclas,mostrar_guardar_password);
  1066  0014EC  C03E  F034         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1067  0014F0  C03F  F035         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1068  0014F4  0E4C               	movlw	low _mostrar_guardar_password
  1069  0014F6  6E36               	movwf	leer_teclado@doit,c
  1070  0014F8  0E24               	movlw	high _mostrar_guardar_password
  1071  0014FA  6E37               	movwf	leer_teclado@doit+1,c
  1072  0014FC  ECF9  F00A         	call	_leer_teclado	;wreg free
  1073                           
  1074                           ;main.c: 155: ingresar_password();
  1075  001500  EC9B  F00C         	call	_ingresar_password	;wreg free
  1076                           
  1077                           ;main.c: 156: }else{
  1078  001504  D7EB               	goto	l3061
  1079  001506                     l3069:
  1080                           
  1081                           ;main.c: 157: puntero_funcion = ingresar_comando;
  1082  001506  0E82               	movlw	low _ingresar_comando
  1083  001508  6E3C               	movwf	main@puntero_funcion,c
  1084  00150A  0E25               	movlw	high _ingresar_comando
  1085  00150C  6E3D               	movwf	main@puntero_funcion+1,c
  1086                           
  1087                           ;main.c: 159: validar_comando("xxx",&validacion);
  1088  00150E  0E89               	movlw	low STR_18
  1089  001510  6E01               	movwf	validar_comando@candidato,c
  1090  001512  0E0F               	movlw	high STR_18
  1091  001514  6E02               	movwf	validar_comando@candidato+1,c
  1092  001516  0E42               	movlw	low main@validacion
  1093  001518  6E03               	movwf	validar_comando@validar,c
  1094  00151A  0E00               	movlw	high main@validacion
  1095  00151C  6E04               	movwf	validar_comando@validar+1,c
  1096  00151E  EC7A  F00F         	call	_validar_comando	;wreg free
  1097                           
  1098                           ;main.c: 160: if(validacion){
  1099  001522  5042               	movf	main@validacion,w,c
  1100  001524  1043               	iorwf	main@validacion+1,w,c
  1101  001526  B4D8               	btfsc	status,2,c
  1102  001528  D007               	goto	l3077
  1103                           
  1104                           ;main.c: 161: caratula("Welcome");
  1105  00152A  0E74               	movlw	low STR_19
  1106  00152C  6E24               	movwf	caratula@titulo,c
  1107  00152E  0E0F               	movlw	high STR_19
  1108  001530  6E25               	movwf	caratula@titulo+1,c
  1109  001532  EC81  F00D         	call	_caratula	;wreg free
  1110  001536  D000               	goto	l3077
  1111  001538                     l3077:
  1112                           
  1113                           ;main.c: 162: }
  1114                           ;main.c: 164: validar_comando("001",&validacion);
  1115  001538  0E81               	movlw	low STR_20
  1116  00153A  6E01               	movwf	validar_comando@candidato,c
  1117  00153C  0E0F               	movlw	high STR_20
  1118  00153E  6E02               	movwf	validar_comando@candidato+1,c
  1119  001540  0E42               	movlw	low main@validacion
  1120  001542  6E03               	movwf	validar_comando@validar,c
  1121  001544  0E00               	movlw	high main@validacion
  1122  001546  6E04               	movwf	validar_comando@validar+1,c
  1123  001548  EC7A  F00F         	call	_validar_comando	;wreg free
  1124                           
  1125                           ;main.c: 165: if(validacion){
  1126  00154C  5042               	movf	main@validacion,w,c
  1127  00154E  1043               	iorwf	main@validacion+1,w,c
  1128  001550  B4D8               	btfsc	status,2,c
  1129  001552  D007               	goto	l3085
  1130                           
  1131                           ;main.c: 166: puntero_funcion = cambiar_dia;
  1132  001554  0E7A               	movlw	low _cambiar_dia
  1133  001556  6E3C               	movwf	main@puntero_funcion,c
  1134  001558  0E1E               	movlw	high _cambiar_dia
  1135  00155A  6E3D               	movwf	main@puntero_funcion+1,c
  1136                           
  1137                           ;main.c: 167: mostrar_actualizacion_dia();
  1138  00155C  EC20  F00E         	call	_mostrar_actualizacion_dia	;wreg free
  1139  001560  D000               	goto	l3085
  1140  001562                     l3085:
  1141                           
  1142                           ;main.c: 168: }
  1143                           ;main.c: 170: validar_comando("002",&validacion);
  1144  001562  0E85               	movlw	low STR_21
  1145  001564  6E01               	movwf	validar_comando@candidato,c
  1146  001566  0E0F               	movlw	high STR_21
  1147  001568  6E02               	movwf	validar_comando@candidato+1,c
  1148  00156A  0E42               	movlw	low main@validacion
  1149  00156C  6E03               	movwf	validar_comando@validar,c
  1150  00156E  0E00               	movlw	high main@validacion
  1151  001570  6E04               	movwf	validar_comando@validar+1,c
  1152  001572  EC7A  F00F         	call	_validar_comando	;wreg free
  1153                           
  1154                           ;main.c: 171: if(validacion){
  1155  001576  5042               	movf	main@validacion,w,c
  1156  001578  1043               	iorwf	main@validacion+1,w,c
  1157  00157A  B4D8               	btfsc	status,2,c
  1158  00157C  D028               	goto	l3105
  1159                           
  1160                           ;main.c: 172: lcd_gotoxy(1,2);
  1161  00157E  0E02               	movlw	2
  1162  001580  6E05               	movwf	lcd_gotoxy@y,c
  1163  001582  0E01               	movlw	1
  1164  001584  EC62  F012         	call	_lcd_gotoxy
  1165                           
  1166                           ;main.c: 173: lcd_putrs("cambiar pass");
  1167  001588  0E52               	movlw	low STR_22
  1168  00158A  6E09               	movwf	lcd_putrs@ptr,c
  1169  00158C  0E0F               	movlw	high STR_22
  1170  00158E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1171  001590  EC2D  F011         	call	_lcd_putrs	;wreg free
  1172                           
  1173                           ;main.c: 174: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1174  001594  0E00               	movlw	0
  1175  001596  6E41               	movwf	main@i+1,c
  1176  001598  0E00               	movlw	0
  1177  00159A  6E40               	movwf	main@i,c
  1178  00159C                     l3095:
  1179  00159C  BE41               	btfsc	main@i+1,7,c
  1180  00159E  D008               	goto	l3099
  1181  0015A0  5041               	movf	main@i+1,w,c
  1182  0015A2  E112               	bnz	l3103
  1183  0015A4  0E0A               	movlw	10
  1184  0015A6  5C40               	subwf	main@i,w,c
  1185  0015A8  B0D8               	btfsc	status,0,c
  1186  0015AA  D00E               	goto	l3103
  1187  0015AC  D001               	goto	l3099
  1188  0015AE  D00C               	goto	l3103
  1189  0015B0                     l3099:
  1190  0015B0  0EFF               	movlw	255
  1191  0015B2  6E3B               	movwf	??_main& (0+255),c
  1192  0015B4  0E8A               	movlw	138
  1193  0015B6                     u2737:
  1194  0015B6  2EE8               	decfsz	wreg,f,c
  1195  0015B8  D7FE               	goto	u2737
  1196  0015BA  2E3B               	decfsz	??_main& (0+255),f,c
  1197  0015BC  D7FC               	goto	u2737
  1198  0015BE  D000               	nop2	
  1199  0015C0  4A40               	infsnz	main@i,f,c
  1200  0015C2  2A41               	incf	main@i+1,f,c
  1201  0015C4  D7EB               	goto	l3095
  1202  0015C6  D000               	goto	l3103
  1203  0015C8                     l3103:
  1204                           
  1205                           ;main.c: 175: restaurar_comando();
  1206  0015C8  EC50  F012         	call	_restaurar_comando	;wreg free
  1207  0015CC  D000               	goto	l3105
  1208  0015CE                     l3105:
  1209                           
  1210                           ;main.c: 176: }
  1211                           ;main.c: 177: leer_teclado(!ocultar_teclas,puntero_funcion);
  1212  0015CE  503E               	movf	main@ocultar_teclas,w,c
  1213  0015D0  103F               	iorwf	main@ocultar_teclas+1,w,c
  1214  0015D2  A4D8               	btfss	status,2,c
  1215  0015D4  D002               	goto	u2700
  1216  0015D6  0E01               	movlw	1
  1217  0015D8  D001               	goto	u2710
  1218  0015DA                     u2700:
  1219  0015DA  0E00               	movlw	0
  1220  0015DC                     u2710:
  1221  0015DC  6E34               	movwf	leer_teclado@ocultar,c
  1222  0015DE  6A35               	clrf	leer_teclado@ocultar+1,c
  1223  0015E0  C03C  F036         	movff	main@puntero_funcion,leer_teclado@doit
  1224  0015E4  C03D  F037         	movff	main@puntero_funcion+1,leer_teclado@doit+1
  1225  0015E8  ECF9  F00A         	call	_leer_teclado	;wreg free
  1226  0015EC  D777               	goto	l3061
  1227                           
  1228                           ;main.c: 179: }
  1229                           ;main.c: 180: }
  1230                           ;main.c: 181: return 0;
  1231                           ;	Return value of _main is never used
  1232  0015EE  EF00  F000         	goto	start
  1233  0015F2                     __end_of_main:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _validar_comando *****************
  1246 ;; Defined at:
  1247 ;;		line 28 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1250 ;;		 -> STR_21(4), STR_20(4), STR_18(4), 
  1251 ;;  validar         2    2[COMRAM] PTR int 
  1252 ;;		 -> main@validacion(2), 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  i               2    7[COMRAM] int 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  2    0[COMRAM] int 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1265 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1267 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1268 ;;Total ram usage:        9 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text1
  1278  001EF4                     __ptext1:
  1279                           	opt stack 0
  1280  001EF4                     _validar_comando:
  1281                           	opt stack 30
  1282                           
  1283                           ;headers\teclado.h: 30: *validar=1;
  1284                           
  1285                           ;incstack = 0
  1286  001EF4  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1287  001EF8  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1288  001EFC  0E01               	movlw	1
  1289  001EFE  6EDE               	movwf	postinc2,c
  1290  001F00  0E00               	movlw	0
  1291  001F02  6EDD               	movwf	postdec2,c
  1292                           
  1293                           ;headers\teclado.h: 31: int i = 0;
  1294  001F04  0E00               	movlw	0
  1295  001F06  6E09               	movwf	validar_comando@i+1,c
  1296  001F08  0E00               	movlw	0
  1297  001F0A  6E08               	movwf	validar_comando@i,c
  1298                           
  1299                           ;headers\teclado.h: 32: while (i < 3){
  1300  001F0C  D023               	goto	l2843
  1301  001F0E                     l2837:
  1302                           
  1303                           ;headers\teclado.h: 33: if (comando[i] != *(candidato+i))
  1304  001F0E  0EC6               	movlw	low _comando
  1305  001F10  2408               	addwf	validar_comando@i,w,c
  1306  001F12  6ED9               	movwf	fsr2l,c
  1307  001F14  0E00               	movlw	high _comando
  1308  001F16  2009               	addwfc	validar_comando@i+1,w,c
  1309  001F18  6EDA               	movwf	fsr2h,c
  1310  001F1A  50DF               	movf	indf2,w,c
  1311  001F1C  6E05               	movwf	??_validar_comando& (0+255),c
  1312  001F1E  5008               	movf	validar_comando@i,w,c
  1313  001F20  2401               	addwf	validar_comando@candidato,w,c
  1314  001F22  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1315  001F24  5009               	movf	validar_comando@i+1,w,c
  1316  001F26  2002               	addwfc	validar_comando@candidato+1,w,c
  1317  001F28  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1318  001F2A  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1319  001F2E  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1320  001F32                     	if	0	;tblptru may be non-zero
  1321  001F32                     	endif
  1322  001F32                     	if	0	;tblptru may be non-zero
  1323  001F32                     	endif
  1324  001F32  0008               	tblrd		*
  1325  001F34  50F5               	movf	tablat,w,c
  1326  001F36  1805               	xorwf	??_validar_comando,w,c
  1327  001F38  B4D8               	btfsc	status,2,c
  1328  001F3A  D009               	goto	l2841
  1329                           
  1330                           ;headers\teclado.h: 34: *validar = 0;
  1331  001F3C  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1332  001F40  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1333  001F44  0E00               	movlw	0
  1334  001F46  6EDE               	movwf	postinc2,c
  1335  001F48  0E00               	movlw	0
  1336  001F4A  6EDD               	movwf	postdec2,c
  1337  001F4C  D000               	goto	l2841
  1338  001F4E                     l2841:
  1339                           
  1340                           ;headers\teclado.h: 36: i++;
  1341  001F4E  4A08               	infsnz	validar_comando@i,f,c
  1342  001F50  2A09               	incf	validar_comando@i+1,f,c
  1343  001F52  D000               	goto	l2843
  1344  001F54                     l2843:
  1345  001F54  BE09               	btfsc	validar_comando@i+1,7,c
  1346  001F56  D7DB               	goto	l2837
  1347  001F58  5009               	movf	validar_comando@i+1,w,c
  1348  001F5A  E106               	bnz	l159
  1349  001F5C  0E03               	movlw	3
  1350  001F5E  5C08               	subwf	validar_comando@i,w,c
  1351  001F60  B0D8               	btfsc	status,0,c
  1352  001F62  0012               	return	
  1353  001F64  D7D4               	goto	l2837
  1354  001F66  0012               	return	
  1355  001F68                     l159:
  1356  001F68  0012               	return		;funcret
  1357  001F6A                     __end_of_validar_comando:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           postdec1	equ	0xFE5
  1366                           fsr1l	equ	0xFE1
  1367                           indf2	equ	0xFDF
  1368                           postinc2	equ	0xFDE
  1369                           postdec2	equ	0xFDD
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _mostrar_actualizacion_dia *****************
  1375 ;; Defined at:
  1376 ;;		line 120 in file "main.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  i               2   11[COMRAM] int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2  285[None  ] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;Total ram usage:        3 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    5
  1397 ;; This function calls:
  1398 ;;		_lcd_gotoxy
  1399 ;;		_lcd_putrs
  1400 ;;		_restaurar_comando
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text2
  1407  001C40                     __ptext2:
  1408                           	opt stack 0
  1409  001C40                     _mostrar_actualizacion_dia:
  1410                           	opt stack 25
  1411                           
  1412                           ;main.c: 122: lcd_gotoxy(1,1);
  1413                           
  1414                           ;incstack = 0
  1415  001C40  0E01               	movlw	1
  1416  001C42  6E05               	movwf	lcd_gotoxy@y,c
  1417  001C44  0E01               	movlw	1
  1418  001C46  EC62  F012         	call	_lcd_gotoxy
  1419                           
  1420                           ;main.c: 123: lcd_putrs("Inserte dia:     ");
  1421  001C4A  0E0F               	movlw	low STR_16
  1422  001C4C  6E09               	movwf	lcd_putrs@ptr,c
  1423  001C4E  0E0F               	movlw	high STR_16
  1424  001C50  6E0A               	movwf	lcd_putrs@ptr+1,c
  1425  001C52  EC2D  F011         	call	_lcd_putrs	;wreg free
  1426                           
  1427                           ;main.c: 124: lcd_gotoxy(1,2);
  1428  001C56  0E02               	movlw	2
  1429  001C58  6E05               	movwf	lcd_gotoxy@y,c
  1430  001C5A  0E01               	movlw	1
  1431  001C5C  EC62  F012         	call	_lcd_gotoxy
  1432                           
  1433                           ;main.c: 125: lcd_putrs(day);
  1434  001C60  0EAA               	movlw	low _day
  1435  001C62  6E09               	movwf	lcd_putrs@ptr,c
  1436  001C64  0E00               	movlw	high _day
  1437  001C66  6E0A               	movwf	lcd_putrs@ptr+1,c
  1438  001C68  EC2D  F011         	call	_lcd_putrs	;wreg free
  1439                           
  1440                           ;main.c: 126: lcd_gotoxy(3,2);
  1441  001C6C  0E02               	movlw	2
  1442  001C6E  6E05               	movwf	lcd_gotoxy@y,c
  1443  001C70  0E03               	movlw	3
  1444  001C72  EC62  F012         	call	_lcd_gotoxy
  1445                           
  1446                           ;main.c: 127: lcd_putrs("         ");
  1447  001C76  0E6A               	movlw	low STR_17
  1448  001C78  6E09               	movwf	lcd_putrs@ptr,c
  1449  001C7A  0E0F               	movlw	high STR_17
  1450  001C7C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1451  001C7E  EC2D  F011         	call	_lcd_putrs	;wreg free
  1452                           
  1453                           ;main.c: 129: if (tamanio_dia >=3){
  1454  001C82  BE52               	btfsc	_tamanio_dia+1,7,c
  1455  001C84  0012               	return	
  1456  001C86  5052               	movf	_tamanio_dia+1,w,c
  1457  001C88  E104               	bnz	u2610
  1458  001C8A  0E03               	movlw	3
  1459  001C8C  5C51               	subwf	_tamanio_dia,w,c
  1460  001C8E  A0D8               	btfss	status,0,c
  1461  001C90  0012               	return	
  1462  001C92                     u2610:
  1463                           
  1464                           ;main.c: 130: for (int i=0;i<6;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1465  001C92  0E00               	movlw	0
  1466  001C94  6E0D               	movwf	mostrar_actualizacion_dia@i+1,c
  1467  001C96  0E00               	movlw	0
  1468  001C98  6E0C               	movwf	mostrar_actualizacion_dia@i,c
  1469  001C9A                     l3039:
  1470  001C9A  BE0D               	btfsc	mostrar_actualizacion_dia@i+1,7,c
  1471  001C9C  D008               	goto	l3043
  1472  001C9E  500D               	movf	mostrar_actualizacion_dia@i+1,w,c
  1473  001CA0  E112               	bnz	l3047
  1474  001CA2  0E06               	movlw	6
  1475  001CA4  5C0C               	subwf	mostrar_actualizacion_dia@i,w,c
  1476  001CA6  B0D8               	btfsc	status,0,c
  1477  001CA8  D00E               	goto	l3047
  1478  001CAA  D001               	goto	l3043
  1479  001CAC  D00C               	goto	l3047
  1480  001CAE                     l3043:
  1481  001CAE  0EFF               	movlw	255
  1482  001CB0  6E0B               	movwf	??_mostrar_actualizacion_dia& (0+255),c
  1483  001CB2  0E8A               	movlw	138
  1484  001CB4                     u2747:
  1485  001CB4  2EE8               	decfsz	wreg,f,c
  1486  001CB6  D7FE               	goto	u2747
  1487  001CB8  2E0B               	decfsz	??_mostrar_actualizacion_dia& (0+255),f,c
  1488  001CBA  D7FC               	goto	u2747
  1489  001CBC  D000               	nop2	
  1490  001CBE  4A0C               	infsnz	mostrar_actualizacion_dia@i,f,c
  1491  001CC0  2A0D               	incf	mostrar_actualizacion_dia@i+1,f,c
  1492  001CC2  D7EB               	goto	l3039
  1493  001CC4  D000               	goto	l3047
  1494  001CC6                     l3047:
  1495                           
  1496                           ;main.c: 131: restaurar_comando();
  1497  001CC6  EC50  F012         	call	_restaurar_comando	;wreg free
  1498                           
  1499                           ;main.c: 132: tamanio_dia = 0;
  1500  001CCA  0E00               	movlw	0
  1501  001CCC  6E52               	movwf	_tamanio_dia+1,c
  1502  001CCE  0E00               	movlw	0
  1503  001CD0  6E51               	movwf	_tamanio_dia,c
  1504  001CD2  0012               	return	
  1505  001CD4  0012               	return		;funcret
  1506  001CD6                     __end_of_mostrar_actualizacion_dia:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           indf2	equ	0xFDF
  1517                           postinc2	equ	0xFDE
  1518                           postdec2	equ	0xFDD
  1519                           fsr2h	equ	0xFDA
  1520                           fsr2l	equ	0xFD9
  1521                           status	equ	0xFD8
  1522                           
  1523 ;; *************** function _restaurar_comando *****************
  1524 ;; Defined at:
  1525 ;;		line 50 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  2  166[None  ] int 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1543 ;;Total ram usage:        0 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_mostrar_actualizacion_dia
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text3
  1554  0024A0                     __ptext3:
  1555                           	opt stack 0
  1556  0024A0                     _restaurar_comando:
  1557                           	opt stack 30
  1558                           
  1559                           ;headers\teclado.h: 51: tamanio_comando = 0;
  1560                           
  1561                           ;incstack = 0
  1562  0024A0  0E00               	movlw	0
  1563  0024A2  0100               	movlb	0	; () banked
  1564  0024A4  6F95               	movwf	(_tamanio_comando+1)& (0+255),b
  1565  0024A6  0E00               	movlw	0
  1566  0024A8  6F94               	movwf	_tamanio_comando& (0+255),b
  1567                           
  1568                           ;headers\teclado.h: 53: comando[0]='x';
  1569  0024AA  0E78               	movlw	120
  1570  0024AC  0100               	movlb	0	; () banked
  1571  0024AE  6FC6               	movwf	_comando& (0+255),b
  1572                           
  1573                           ;headers\teclado.h: 54: comando[1]='x';
  1574  0024B0  0E78               	movlw	120
  1575  0024B2  0100               	movlb	0	; () banked
  1576  0024B4  6FC7               	movwf	(_comando+1)& (0+255),b
  1577                           
  1578                           ;headers\teclado.h: 55: comando[2]='x';
  1579  0024B6  0E78               	movlw	120
  1580  0024B8  0100               	movlb	0	; () banked
  1581  0024BA  6FC8               	movwf	(_comando+2)& (0+255),b
  1582                           
  1583                           ;headers\teclado.h: 56: comando[3]=0;
  1584  0024BC  0E00               	movlw	0
  1585  0024BE  0100               	movlb	0	; () banked
  1586  0024C0  6FC9               	movwf	(_comando+3)& (0+255),b
  1587                           
  1588                           ; BSR set to: 0
  1589  0024C2  0012               	return		;funcret
  1590  0024C4                     __end_of_restaurar_comando:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           fsr1l	equ	0xFE1
  1600                           indf2	equ	0xFDF
  1601                           postinc2	equ	0xFDE
  1602                           postdec2	equ	0xFDD
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _leer_teclado *****************
  1608 ;; Defined at:
  1609 ;;		line 66 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  ocultar         2   51[COMRAM] int 
  1612 ;;  doit            2   53[COMRAM] PTR FTN()PTR unsigned ch
  1613 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), cambiar_dia(2), 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  i               2   56[COMRAM] int 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2   51[COMRAM] int 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1625 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1629 ;;Total ram usage:        7 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    8
  1632 ;; This function calls:
  1633 ;;		_cambiar_dia
  1634 ;;		_guardar_tecla_presionada
  1635 ;;		_ingresar_comando
  1636 ;;		_lcd_putrs
  1637 ;;		_mostrar_guardar_password
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text4
  1644  0015F2                     __ptext4:
  1645                           	opt stack 0
  1646  0015F2                     _leer_teclado:
  1647                           	opt stack 22
  1648                           
  1649                           ;headers\teclado.h: 67: int i;
  1650                           ;headers\teclado.h: 68: ocultar_teclas = ocultar;
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;incstack = 0
  1654  0015F2  C034  F090         	movff	leer_teclado@ocultar,_ocultar_teclas
  1655  0015F6  C035  F091         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1656                           
  1657                           ;headers\teclado.h: 70: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=1;
  1658  0015FA  8089               	bsf	3977,0,c	;volatile
  1659  0015FC  9289               	bcf	3977,1,c	;volatile
  1660  0015FE  9489               	bcf	3977,2,c	;volatile
  1661  001600  9689               	bcf	3977,3,c	;volatile
  1662  001602  0E00               	movlw	0
  1663  001604  6E3A               	movwf	leer_teclado@i+1,c
  1664  001606  0E01               	movlw	1
  1665  001608  6E39               	movwf	leer_teclado@i,c
  1666                           
  1667                           ;headers\teclado.h: 71: guardar_tecla_presionada("A",i,doit);
  1668  00160A  0E91               	movlw	low STR_4
  1669  00160C  6E2E               	movwf	guardar_tecla_presionada@letra,c
  1670  00160E  0E0F               	movlw	high STR_4
  1671  001610  6E2F               	movwf	guardar_tecla_presionada@letra+1,c
  1672  001612  C039  F030         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1673  001616  C03A  F031         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1674  00161A  C036  F032         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1675  00161E  C037  F033         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1676  001622  ECD2  F00D         	call	_guardar_tecla_presionada	;wreg free
  1677                           
  1678                           ;headers\teclado.h: 73: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=4;
  1679  001626  9089               	bcf	3977,0,c	;volatile
  1680  001628  8289               	bsf	3977,1,c	;volatile
  1681  00162A  9489               	bcf	3977,2,c	;volatile
  1682  00162C  9689               	bcf	3977,3,c	;volatile
  1683  00162E  0E00               	movlw	0
  1684  001630  6E3A               	movwf	leer_teclado@i+1,c
  1685  001632  0E04               	movlw	4
  1686  001634  6E39               	movwf	leer_teclado@i,c
  1687                           
  1688                           ;headers\teclado.h: 74: guardar_tecla_presionada("B",i,doit);
  1689  001636  0E93               	movlw	low STR_5
  1690  001638  6E2E               	movwf	guardar_tecla_presionada@letra,c
  1691  00163A  0E0F               	movlw	high STR_5
  1692  00163C  6E2F               	movwf	guardar_tecla_presionada@letra+1,c
  1693  00163E  C039  F030         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1694  001642  C03A  F031         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1695  001646  C036  F032         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1696  00164A  C037  F033         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1697  00164E  ECD2  F00D         	call	_guardar_tecla_presionada	;wreg free
  1698                           
  1699                           ;headers\teclado.h: 76: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA
      +                          3=0;i=7;
  1700  001652  9089               	bcf	3977,0,c	;volatile
  1701  001654  9289               	bcf	3977,1,c	;volatile
  1702  001656  8489               	bsf	3977,2,c	;volatile
  1703  001658  9689               	bcf	3977,3,c	;volatile
  1704  00165A  0E00               	movlw	0
  1705  00165C  6E3A               	movwf	leer_teclado@i+1,c
  1706  00165E  0E07               	movlw	7
  1707  001660  6E39               	movwf	leer_teclado@i,c
  1708                           
  1709                           ;headers\teclado.h: 77: guardar_tecla_presionada("C",i,doit);
  1710  001662  0E95               	movlw	low STR_6
  1711  001664  6E2E               	movwf	guardar_tecla_presionada@letra,c
  1712  001666  0E0F               	movlw	high STR_6
  1713  001668  6E2F               	movwf	guardar_tecla_presionada@letra+1,c
  1714  00166A  C039  F030         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1715  00166E  C03A  F031         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1716  001672  C036  F032         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1717  001676  C037  F033         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1718  00167A  ECD2  F00D         	call	_guardar_tecla_presionada	;wreg free
  1719                           
  1720                           ;headers\teclado.h: 79: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=1;
  1721  00167E  9089               	bcf	3977,0,c	;volatile
  1722  001680  9289               	bcf	3977,1,c	;volatile
  1723  001682  9489               	bcf	3977,2,c	;volatile
  1724  001684  8689               	bsf	3977,3,c	;volatile
  1725                           
  1726                           ;headers\teclado.h: 80: {
  1727                           ;headers\teclado.h: 81: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5=
      +                          =1){};}
  1728  001686  AA80               	btfss	3968,5,c	;volatile
  1729  001688  D00B               	goto	l189
  1730  00168A  0E12               	movlw	18
  1731  00168C  6E46               	movwf	_key,c
  1732  00168E  0E8F               	movlw	low STR_3
  1733  001690  6E09               	movwf	lcd_putrs@ptr,c
  1734  001692  0E0F               	movlw	high STR_3
  1735  001694  6E0A               	movwf	lcd_putrs@ptr+1,c
  1736  001696  EC2D  F011         	call	_lcd_putrs	;wreg free
  1737  00169A  D000               	goto	l190
  1738  00169C                     l190:
  1739  00169C  BA80               	btfsc	3968,5,c	;volatile
  1740  00169E  D7FE               	goto	l190
  1741  0016A0                     l189:
  1742                           
  1743                           ;headers\teclado.h: 82: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};
      +                          }
  1744  0016A0  AE80               	btfss	3968,7,c	;volatile
  1745  0016A2  D011               	goto	l193
  1746  0016A4  0E00               	movlw	0
  1747  0016A6  6E46               	movwf	_key,c
  1748  0016A8  D801               	call	u2408
  1749  0016AA  D00B               	goto	l194
  1750  0016AC                     u2408:
  1751  0016AC  0005               	push	
  1752  0016AE  6EFA               	movwf	pclath,c
  1753  0016B0  5036               	movf	leer_teclado@doit,w,c
  1754  0016B2  6EFD               	movwf	tosl,c
  1755  0016B4  5037               	movf	leer_teclado@doit+1,w,c
  1756  0016B6  6EFE               	movwf	tosh,c
  1757  0016B8  50F8               	movf	tblptru,w,c
  1758  0016BA  6EFF               	movwf	tosu,c
  1759  0016BC  50FA               	movf	pclath,w,c
  1760  0016BE  5046               	movf	_key,w,c
  1761  0016C0  0012               	return		;indir
  1762  0016C2                     l194:
  1763  0016C2  BE80               	btfsc	3968,7,c	;volatile
  1764  0016C4  D7FE               	goto	l194
  1765  0016C6                     l193:
  1766                           
  1767                           ;headers\teclado.h: 83: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6=
      +                          =1){};}
  1768  0016C6  AC80               	btfss	3968,6,c	;volatile
  1769  0016C8  D00B               	goto	l197
  1770  0016CA  0E13               	movlw	19
  1771  0016CC  6E46               	movwf	_key,c
  1772  0016CE  0E8D               	movlw	low STR_8
  1773  0016D0  6E09               	movwf	lcd_putrs@ptr,c
  1774  0016D2  0E0F               	movlw	high STR_8
  1775  0016D4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1776  0016D6  EC2D  F011         	call	_lcd_putrs
  1777  0016DA  D000               	goto	l198
  1778  0016DC                     l198:
  1779  0016DC  BC80               	btfsc	3968,6,c	;volatile
  1780  0016DE  D7FE               	goto	l198
  1781  0016E0                     l197:
  1782                           
  1783                           ;headers\teclado.h: 84: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2
      +                          ==1){};}
  1784  0016E0  A482               	btfss	3970,2,c	;volatile
  1785  0016E2  D00D               	goto	l2899
  1786  0016E4  0E44               	movlw	68
  1787  0016E6  6E46               	movwf	_key,c
  1788  0016E8  0E97               	movlw	low STR_9
  1789  0016EA  6E09               	movwf	lcd_putrs@ptr,c
  1790  0016EC  0E0F               	movlw	high STR_9
  1791  0016EE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1792  0016F0  EC2D  F011         	call	_lcd_putrs	;wreg free
  1793  0016F4  D000               	goto	l202
  1794  0016F6                     l202:
  1795  0016F6  A482               	btfss	3970,2,c	;volatile
  1796  0016F8  D002               	goto	l2899
  1797  0016FA  D7FD               	goto	l202
  1798  0016FC  D000               	goto	l2899
  1799  0016FE                     l2899:
  1800                           
  1801                           ;headers\teclado.h: 85: }
  1802                           ;headers\teclado.h: 86: _delay((unsigned long)((98)*(8000000/4000.0)));
  1803  0016FE  0EFF               	movlw	255
  1804  001700  6E38               	movwf	??_leer_teclado& (0+255),c
  1805  001702  0E8A               	movlw	138
  1806  001704                     u2757:
  1807  001704  2EE8               	decfsz	wreg,f,c
  1808  001706  D7FE               	goto	u2757
  1809  001708  2E38               	decfsz	??_leer_teclado& (0+255),f,c
  1810  00170A  D7FC               	goto	u2757
  1811  00170C  D000               	nop2	
  1812  00170E  0012               	return		;funcret
  1813  001710                     __end_of_leer_teclado:
  1814                           	opt stack 0
  1815                           tosu	equ	0xFFF
  1816                           tosh	equ	0xFFE
  1817                           tosl	equ	0xFFD
  1818                           pclath	equ	0xFFA
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           indf2	equ	0xFDF
  1828                           postinc2	equ	0xFDE
  1829                           postdec2	equ	0xFDD
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function _guardar_tecla_presionada *****************
  1835 ;; Defined at:
  1836 ;;		line 59 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  letra           2   45[COMRAM] PTR unsigned char 
  1839 ;;		 -> STR_6(2), STR_5(2), STR_4(2), 
  1840 ;;  i               2   47[COMRAM] int 
  1841 ;;  doit            2   49[COMRAM] PTR FTN(PTR unsigned cha
  1842 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), cambiar_dia(2), 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2   45[COMRAM] int 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1854 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1857 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1858 ;;Total ram usage:        6 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    7
  1861 ;; This function calls:
  1862 ;;		_cambiar_dia
  1863 ;;		_ingresar_comando
  1864 ;;		_lcd_putrs
  1865 ;;		_mostrar_guardar_password
  1866 ;; This function is called by:
  1867 ;;		_leer_teclado
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text5
  1872  001BA4                     __ptext5:
  1873                           	opt stack 0
  1874  001BA4                     _guardar_tecla_presionada:
  1875                           	opt stack 22
  1876                           
  1877                           ;headers\teclado.h: 60: if (PORTAbits.RA5==1){key=i;doit(key);while(PORTAbits.RA5==1){};
      +                          }
  1878                           
  1879                           ;incstack = 0
  1880  001BA4  AA80               	btfss	3968,5,c	;volatile
  1881  001BA6  D012               	goto	l170
  1882  001BA8  C030  F046         	movff	guardar_tecla_presionada@i,_key
  1883  001BAC  C046  FFE8         	movff	_key,wreg
  1884  001BB0  D801               	call	u2188
  1885  001BB2  D00A               	goto	l171
  1886  001BB4                     u2188:
  1887  001BB4  0005               	push	
  1888  001BB6  6EFA               	movwf	pclath,c
  1889  001BB8  5032               	movf	guardar_tecla_presionada@doit,w,c
  1890  001BBA  6EFD               	movwf	tosl,c
  1891  001BBC  5033               	movf	guardar_tecla_presionada@doit+1,w,c
  1892  001BBE  6EFE               	movwf	tosh,c
  1893  001BC0  50F8               	movf	tblptru,w,c
  1894  001BC2  6EFF               	movwf	tosu,c
  1895  001BC4  50FA               	movf	pclath,w,c
  1896  001BC6  0012               	return		;indir
  1897  001BC8                     l171:
  1898  001BC8  BA80               	btfsc	3968,5,c	;volatile
  1899  001BCA  D7FE               	goto	l171
  1900  001BCC                     l170:
  1901                           
  1902                           ;headers\teclado.h: 61: if (PORTAbits.RA7==1){key=(i)+1;doit(key);while(PORTAbits.RA7==1
      +                          ){};}
  1903  001BCC  AE80               	btfss	3968,7,c	;volatile
  1904  001BCE  D012               	goto	l174
  1905  001BD0  2830               	incf	guardar_tecla_presionada@i,w,c
  1906  001BD2  6E46               	movwf	_key,c
  1907  001BD4  C046  FFE8         	movff	_key,wreg
  1908  001BD8  D801               	call	u2218
  1909  001BDA  D00A               	goto	l175
  1910  001BDC                     u2218:
  1911  001BDC  0005               	push	
  1912  001BDE  6EFA               	movwf	pclath,c
  1913  001BE0  5032               	movf	guardar_tecla_presionada@doit,w,c
  1914  001BE2  6EFD               	movwf	tosl,c
  1915  001BE4  5033               	movf	guardar_tecla_presionada@doit+1,w,c
  1916  001BE6  6EFE               	movwf	tosh,c
  1917  001BE8  50F8               	movf	tblptru,w,c
  1918  001BEA  6EFF               	movwf	tosu,c
  1919  001BEC  50FA               	movf	pclath,w,c
  1920  001BEE  0012               	return		;indir
  1921  001BF0                     l175:
  1922  001BF0  BE80               	btfsc	3968,7,c	;volatile
  1923  001BF2  D7FE               	goto	l175
  1924  001BF4                     l174:
  1925                           
  1926                           ;headers\teclado.h: 62: if (PORTAbits.RA6==1){key=(i)+2;doit(key);while(PORTAbits.RA6==1
      +                          ){};}
  1927  001BF4  AC80               	btfss	3968,6,c	;volatile
  1928  001BF6  D013               	goto	l178
  1929  001BF8  5030               	movf	guardar_tecla_presionada@i,w,c
  1930  001BFA  0F02               	addlw	2
  1931  001BFC  6E46               	movwf	_key,c
  1932  001BFE  C046  FFE8         	movff	_key,wreg
  1933  001C02  D801               	call	u2248
  1934  001C04  D00A               	goto	l179
  1935  001C06                     u2248:
  1936  001C06  0005               	push	
  1937  001C08  6EFA               	movwf	pclath,c
  1938  001C0A  5032               	movf	guardar_tecla_presionada@doit,w,c
  1939  001C0C  6EFD               	movwf	tosl,c
  1940  001C0E  5033               	movf	guardar_tecla_presionada@doit+1,w,c
  1941  001C10  6EFE               	movwf	tosh,c
  1942  001C12  50F8               	movf	tblptru,w,c
  1943  001C14  6EFF               	movwf	tosu,c
  1944  001C16  50FA               	movf	pclath,w,c
  1945  001C18  0012               	return		;indir
  1946  001C1A                     l179:
  1947  001C1A  BC80               	btfsc	3968,6,c	;volatile
  1948  001C1C  D7FE               	goto	l179
  1949  001C1E                     l178:
  1950                           
  1951                           ;headers\teclado.h: 63: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbit
      +                          s.RC2==1){};}
  1952  001C1E  A482               	btfss	3970,2,c	;volatile
  1953  001C20  0012               	return	
  1954  001C22  5030               	movf	guardar_tecla_presionada@i,w,c
  1955  001C24  0F0A               	addlw	10
  1956  001C26  6E46               	movwf	_key,c
  1957  001C28  C02E  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1958  001C2C  C02F  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1959  001C30  EC2D  F011         	call	_lcd_putrs	;wreg free
  1960  001C34  D000               	goto	l183
  1961  001C36                     l183:
  1962  001C36  A482               	btfss	3970,2,c	;volatile
  1963  001C38  0012               	return	
  1964  001C3A  D7FD               	goto	l183
  1965  001C3C  0012               	return	
  1966  001C3E  0012               	return		;funcret
  1967  001C40                     __end_of_guardar_tecla_presionada:
  1968                           	opt stack 0
  1969                           tosu	equ	0xFFF
  1970                           tosh	equ	0xFFE
  1971                           tosl	equ	0xFFD
  1972                           pclath	equ	0xFFA
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           indf2	equ	0xFDF
  1982                           postinc2	equ	0xFDE
  1983                           postdec2	equ	0xFDD
  1984                           fsr2h	equ	0xFDA
  1985                           fsr2l	equ	0xFD9
  1986                           status	equ	0xFD8
  1987                           
  1988 ;; *************** function _ingresar_comando *****************
  1989 ;; Defined at:
  1990 ;;		line 116 in file "main.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  key             1    wreg     unsigned char 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  key             1   38[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  2  282[None  ] int 
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2007 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2008 ;;Total ram usage:        1 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    3
  2011 ;; This function calls:
  2012 ;;		_guardar_comando
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;;		_guardar_tecla_presionada
  2016 ;;		_leer_teclado
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text6
  2021  002582                     __ptext6:
  2022                           	opt stack 0
  2023  002582                     _ingresar_comando:
  2024                           	opt stack 26
  2025                           
  2026                           ;incstack = 0
  2027                           ;ingresar_comando@key stored from wreg
  2028  002582  6E27               	movwf	ingresar_comando@key,c
  2029                           
  2030                           ;main.c: 117: guardar_comando(key);
  2031  002584  5027               	movf	ingresar_comando@key,w,c
  2032  002586  EC2A  F010         	call	_guardar_comando
  2033  00258A  0012               	return		;funcret
  2034  00258C                     __end_of_ingresar_comando:
  2035                           	opt stack 0
  2036                           tosu	equ	0xFFF
  2037                           tosh	equ	0xFFE
  2038                           tosl	equ	0xFFD
  2039                           pclath	equ	0xFFA
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           indf2	equ	0xFDF
  2049                           postinc2	equ	0xFDE
  2050                           postdec2	equ	0xFDD
  2051                           fsr2h	equ	0xFDA
  2052                           fsr2l	equ	0xFD9
  2053                           status	equ	0xFD8
  2054                           
  2055 ;; *************** function _cambiar_dia *****************
  2056 ;; Defined at:
  2057 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  tecla           1    wreg     unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  tecla           1   42[COMRAM] unsigned char 
  2062 ;;  valor           2   43[COMRAM] int 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  2  246[None  ] int 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2073 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2075 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2076 ;;Total ram usage:        3 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    3
  2079 ;; This function calls:
  2080 ;;		_Write_RTC
  2081 ;;		_convertir_a_int
  2082 ;;		_guardar_elemento
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;;		_cambiar_fecha
  2086 ;;		_guardar_tecla_presionada
  2087 ;;		_leer_teclado
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text7
  2092  001E7A                     __ptext7:
  2093                           	opt stack 0
  2094  001E7A                     _cambiar_dia:
  2095                           	opt stack 25
  2096                           
  2097                           ;incstack = 0
  2098                           ;cambiar_dia@tecla stored from wreg
  2099  001E7A  6E2B               	movwf	cambiar_dia@tecla,c
  2100                           
  2101                           ;headers\fecha.h: 26: int valor = 0;
  2102  001E7C  0E00               	movlw	0
  2103  001E7E  6E2D               	movwf	cambiar_dia@valor+1,c
  2104  001E80  0E00               	movlw	0
  2105  001E82  6E2C               	movwf	cambiar_dia@valor,c
  2106                           
  2107                           ;headers\fecha.h: 28: if (tamanio_dia < 3 - 1 && tamanio_mes == 0 && tamanio_anio == 0){
  2108  001E84  BE52               	btfsc	_tamanio_dia+1,7,c
  2109  001E86  D006               	goto	l2643
  2110  001E88  5052               	movf	_tamanio_dia+1,w,c
  2111  001E8A  E118               	bnz	l2649
  2112  001E8C  0E02               	movlw	2
  2113  001E8E  5C51               	subwf	_tamanio_dia,w,c
  2114  001E90  B0D8               	btfsc	status,0,c
  2115  001E92  D014               	goto	l2649
  2116  001E94                     l2643:
  2117  001E94  5053               	movf	_tamanio_mes,w,c
  2118  001E96  1054               	iorwf	_tamanio_mes+1,w,c
  2119  001E98  A4D8               	btfss	status,2,c
  2120  001E9A  D010               	goto	l2649
  2121  001E9C  504F               	movf	_tamanio_anio,w,c
  2122  001E9E  1050               	iorwf	_tamanio_anio+1,w,c
  2123  001EA0  A4D8               	btfss	status,2,c
  2124  001EA2  D00C               	goto	l2649
  2125                           
  2126                           ;headers\fecha.h: 29: guardar_elemento(tecla,day,&tamanio_dia);
  2127  001EA4  0EAA               	movlw	low _day
  2128  001EA6  6E24               	movwf	guardar_elemento@array,c
  2129  001EA8  0E00               	movlw	high _day
  2130  001EAA  6E25               	movwf	guardar_elemento@array+1,c
  2131  001EAC  0E51               	movlw	low _tamanio_dia
  2132  001EAE  6E26               	movwf	guardar_elemento@tamanio_array,c
  2133  001EB0  0E00               	movlw	high _tamanio_dia
  2134  001EB2  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2135  001EB4  502B               	movf	cambiar_dia@tecla,w,c
  2136  001EB6  ECF0  F00F         	call	_guardar_elemento
  2137  001EBA  D000               	goto	l2649
  2138  001EBC                     l2649:
  2139                           
  2140                           ;headers\fecha.h: 30: }
  2141                           ;headers\fecha.h: 32: if (tamanio_dia >= 3 - 1){
  2142  001EBC  BE52               	btfsc	_tamanio_dia+1,7,c
  2143  001EBE  0012               	return	
  2144  001EC0  5052               	movf	_tamanio_dia+1,w,c
  2145  001EC2  E104               	bnz	u2140
  2146  001EC4  0E02               	movlw	2
  2147  001EC6  5C51               	subwf	_tamanio_dia,w,c
  2148  001EC8  A0D8               	btfss	status,0,c
  2149  001ECA  0012               	return	
  2150  001ECC                     u2140:
  2151                           
  2152                           ;headers\fecha.h: 33: convertir_a_int(day,&valor);
  2153  001ECC  0EAA               	movlw	low _day
  2154  001ECE  6E0E               	movwf	convertir_a_int@array,c
  2155  001ED0  0E00               	movlw	high _day
  2156  001ED2  6E0F               	movwf	convertir_a_int@array+1,c
  2157  001ED4  0E2C               	movlw	low cambiar_dia@valor
  2158  001ED6  6E10               	movwf	convertir_a_int@valor,c
  2159  001ED8  0E00               	movlw	high cambiar_dia@valor
  2160  001EDA  6E11               	movwf	convertir_a_int@valor+1,c
  2161  001EDC  EC85  F012         	call	_convertir_a_int	;wreg free
  2162                           
  2163                           ;headers\fecha.h: 34: tamanio_dia++;
  2164  001EE0  4A51               	infsnz	_tamanio_dia,f,c
  2165  001EE2  2A52               	incf	_tamanio_dia+1,f,c
  2166                           
  2167                           ;headers\fecha.h: 35: dia = valor;
  2168  001EE4  C02C  F057         	movff	cambiar_dia@valor,_dia
  2169  001EE8  C02D  F058         	movff	cambiar_dia@valor+1,_dia+1
  2170                           
  2171                           ;headers\fecha.h: 36: Write_RTC();
  2172  001EEC  ECFF  F008         	call	_Write_RTC	;wreg free
  2173  001EF0  0012               	return	
  2174  001EF2  0012               	return		;funcret
  2175  001EF4                     __end_of_cambiar_dia:
  2176                           	opt stack 0
  2177                           tosu	equ	0xFFF
  2178                           tosh	equ	0xFFE
  2179                           tosl	equ	0xFFD
  2180                           pclath	equ	0xFFA
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           indf2	equ	0xFDF
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _mostrar_guardar_password *****************
  2197 ;; Defined at:
  2198 ;;		line 108 in file "main.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  tecla           1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  tecla           1   36[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  2  279[None  ] int 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2216 ;;Total ram usage:        1 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    6
  2219 ;; This function calls:
  2220 ;;		_guardar_current_password
  2221 ;;		_imprimir_tecla
  2222 ;;		_sprintf
  2223 ;; This function is called by:
  2224 ;;		_main
  2225 ;;		_guardar_tecla_presionada
  2226 ;;		_leer_teclado
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text8
  2231  00244C                     __ptext8:
  2232                           	opt stack 0
  2233  00244C                     _mostrar_guardar_password:
  2234                           	opt stack 23
  2235                           
  2236                           ;incstack = 0
  2237                           ;mostrar_guardar_password@tecla stored from wreg
  2238  00244C  6E25               	movwf	mostrar_guardar_password@tecla,c
  2239                           
  2240                           ;main.c: 110: imprimir_tecla(tecla);
  2241  00244E  5025               	movf	mostrar_guardar_password@tecla,w,c
  2242  002450  ECC7  F011         	call	_imprimir_tecla
  2243                           
  2244                           ;main.c: 111: sprintf(buffer2,"%01u",tecla);
  2245  002454  0E96               	movlw	low _buffer2
  2246  002456  6E0D               	movwf	sprintf@sp,c
  2247  002458  0E00               	movlw	high _buffer2
  2248  00245A  6E0E               	movwf	sprintf@sp+1,c
  2249  00245C  0E7C               	movlw	low STR_1
  2250  00245E  6E0F               	movwf	sprintf@f,c
  2251  002460  0E0F               	movlw	high STR_1
  2252  002462  6E10               	movwf	sprintf@f+1,c
  2253  002464  C025  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2254  002468  6A12               	clrf	?_sprintf+5,c
  2255  00246A  ECCD  F007         	call	_sprintf	;wreg free
  2256                           
  2257                           ;main.c: 112: guardar_current_password(*buffer2);
  2258  00246E  0100               	movlb	0	; () banked
  2259  002470  5196               	movf	_buffer2& (0+255),w,b
  2260  002472  ECEA  F011         	call	_guardar_current_password
  2261  002476  0012               	return		;funcret
  2262  002478                     __end_of_mostrar_guardar_password:
  2263                           	opt stack 0
  2264                           tosu	equ	0xFFF
  2265                           tosh	equ	0xFFE
  2266                           tosl	equ	0xFFD
  2267                           pclath	equ	0xFFA
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           postinc0	equ	0xFEE
  2273                           wreg	equ	0xFE8
  2274                           postdec1	equ	0xFE5
  2275                           fsr1l	equ	0xFE1
  2276                           indf2	equ	0xFDF
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _imprimir_tecla *****************
  2284 ;; Defined at:
  2285 ;;		line 40 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  tecla           1    wreg     unsigned char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  tecla           1   35[COMRAM] unsigned char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  2  161[None  ] int 
  2292 ;; Registers used:
  2293 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2303 ;;Total ram usage:        1 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    5
  2306 ;; This function calls:
  2307 ;;		_lcd_putrs
  2308 ;;		_sprintf
  2309 ;; This function is called by:
  2310 ;;		_mostrar_guardar_password
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text9
  2315  00238E                     __ptext9:
  2316                           	opt stack 0
  2317  00238E                     _imprimir_tecla:
  2318                           	opt stack 23
  2319                           
  2320                           ;incstack = 0
  2321                           ;imprimir_tecla@tecla stored from wreg
  2322  00238E  6E24               	movwf	imprimir_tecla@tecla,c
  2323                           
  2324                           ;headers\teclado.h: 42: sprintf(buffer2,"%01u",tecla);
  2325  002390  0E96               	movlw	low _buffer2
  2326  002392  6E0D               	movwf	sprintf@sp,c
  2327  002394  0E00               	movlw	high _buffer2
  2328  002396  6E0E               	movwf	sprintf@sp+1,c
  2329  002398  0E7C               	movlw	low STR_1
  2330  00239A  6E0F               	movwf	sprintf@f,c
  2331  00239C  0E0F               	movlw	high STR_1
  2332  00239E  6E10               	movwf	sprintf@f+1,c
  2333  0023A0  C024  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  2334  0023A4  6A12               	clrf	?_sprintf+5,c
  2335  0023A6  ECCD  F007         	call	_sprintf	;wreg free
  2336                           
  2337                           ;headers\teclado.h: 43: if (ocultar_teclas == 1){
  2338  0023AA  0100               	movlb	0	; () banked
  2339  0023AC  0590               	decf	_ocultar_teclas& (0+255),w,b
  2340  0023AE  0100               	movlb	0	; () banked
  2341  0023B0  1191               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  2342  0023B2  A4D8               	btfss	status,2,c
  2343  0023B4  D007               	goto	l2617
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;headers\teclado.h: 44: lcd_putrs("*");
  2347  0023B6  0E8F               	movlw	low STR_3
  2348  0023B8  6E09               	movwf	lcd_putrs@ptr,c
  2349  0023BA  0E0F               	movlw	high STR_3
  2350  0023BC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2351  0023BE  EC2D  F011         	call	_lcd_putrs	;wreg free
  2352                           
  2353                           ;headers\teclado.h: 45: }else{
  2354  0023C2  0012               	return	
  2355  0023C4                     l2617:
  2356                           
  2357                           ;headers\teclado.h: 46: lcd_putrs(buffer2);
  2358  0023C4  0E96               	movlw	low _buffer2
  2359  0023C6  6E09               	movwf	lcd_putrs@ptr,c
  2360  0023C8  0E00               	movlw	high _buffer2
  2361  0023CA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2362  0023CC  EC2D  F011         	call	_lcd_putrs	;wreg free
  2363  0023D0  0012               	return	
  2364  0023D2  0012               	return		;funcret
  2365  0023D4                     __end_of_imprimir_tecla:
  2366                           	opt stack 0
  2367                           tosu	equ	0xFFF
  2368                           tosh	equ	0xFFE
  2369                           tosl	equ	0xFFD
  2370                           pclath	equ	0xFFA
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1l	equ	0xFE1
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _guardar_current_password *****************
  2387 ;; Defined at:
  2388 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  valor           1    wreg     unsigned char 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  valor           1    2[COMRAM] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2  215[None  ] int 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;Total ram usage:        3 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_mostrar_guardar_password
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text10
  2416  0023D4                     __ptext10:
  2417                           	opt stack 0
  2418  0023D4                     _guardar_current_password:
  2419                           	opt stack 28
  2420                           
  2421                           ;incstack = 0
  2422                           ;guardar_current_password@valor stored from wreg
  2423  0023D4  6E03               	movwf	guardar_current_password@valor,c
  2424                           
  2425                           ;headers\password.h: 15: if (tamanio_password < 6){
  2426  0023D6  BE45               	btfsc	_tamanio_password+1,7,c
  2427  0023D8  D006               	goto	l2621
  2428  0023DA  5045               	movf	_tamanio_password+1,w,c
  2429  0023DC  E11D               	bnz	l217
  2430  0023DE  0E06               	movlw	6
  2431  0023E0  5C44               	subwf	_tamanio_password,w,c
  2432  0023E2  B0D8               	btfsc	status,0,c
  2433  0023E4  0012               	return	
  2434  0023E6                     l2621:
  2435                           
  2436                           ;headers\password.h: 16: current_password[tamanio_password] = valor;
  2437  0023E6  0E78               	movlw	low _current_password
  2438  0023E8  2444               	addwf	_tamanio_password,w,c
  2439  0023EA  6ED9               	movwf	fsr2l,c
  2440  0023EC  0E00               	movlw	high _current_password
  2441  0023EE  2045               	addwfc	_tamanio_password+1,w,c
  2442  0023F0  6EDA               	movwf	fsr2h,c
  2443  0023F2  C003  FFDF         	movff	guardar_current_password@valor,indf2
  2444                           
  2445                           ;headers\password.h: 17: current_password [tamanio_password+1] = '\0';
  2446  0023F6  0E01               	movlw	1
  2447  0023F8  2444               	addwf	_tamanio_password,w,c
  2448  0023FA  6E01               	movwf	??_guardar_current_password& (0+255),c
  2449  0023FC  0E00               	movlw	0
  2450  0023FE  2045               	addwfc	_tamanio_password+1,w,c
  2451  002400  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  2452  002402  0E78               	movlw	low _current_password
  2453  002404  2401               	addwf	??_guardar_current_password,w,c
  2454  002406  6ED9               	movwf	fsr2l,c
  2455  002408  0E00               	movlw	high _current_password
  2456  00240A  2002               	addwfc	??_guardar_current_password+1,w,c
  2457  00240C  6EDA               	movwf	fsr2h,c
  2458  00240E  0E00               	movlw	0
  2459  002410  6EDF               	movwf	indf2,c
  2460                           
  2461                           ;headers\password.h: 18: tamanio_password++;
  2462  002412  4A44               	infsnz	_tamanio_password,f,c
  2463  002414  2A45               	incf	_tamanio_password+1,f,c
  2464  002416  0012               	return	
  2465  002418                     l217:
  2466  002418  0012               	return		;funcret
  2467  00241A                     __end_of_guardar_current_password:
  2468                           	opt stack 0
  2469                           tosu	equ	0xFFF
  2470                           tosh	equ	0xFFE
  2471                           tosl	equ	0xFFD
  2472                           pclath	equ	0xFFA
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           postdec1	equ	0xFE5
  2480                           fsr1l	equ	0xFE1
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _guardar_comando *****************
  2489 ;; Defined at:
  2490 ;;		line 18 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  tecla           1    wreg     unsigned char 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  tecla           1   37[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2  150[None  ] int 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2507 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2508 ;;Total ram usage:        3 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    2
  2511 ;; This function calls:
  2512 ;;		_sprintf
  2513 ;; This function is called by:
  2514 ;;		_ingresar_comando
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text11
  2519  002054                     __ptext11:
  2520                           	opt stack 0
  2521  002054                     _guardar_comando:
  2522                           	opt stack 26
  2523                           
  2524                           ;incstack = 0
  2525                           ;guardar_comando@tecla stored from wreg
  2526  002054  6E26               	movwf	guardar_comando@tecla,c
  2527                           
  2528                           ;headers\teclado.h: 20: sprintf(buffer2,"%01u",tecla);
  2529  002056  0E96               	movlw	low _buffer2
  2530  002058  6E0D               	movwf	sprintf@sp,c
  2531  00205A  0E00               	movlw	high _buffer2
  2532  00205C  6E0E               	movwf	sprintf@sp+1,c
  2533  00205E  0E7C               	movlw	low STR_1
  2534  002060  6E0F               	movwf	sprintf@f,c
  2535  002062  0E0F               	movlw	high STR_1
  2536  002064  6E10               	movwf	sprintf@f+1,c
  2537  002066  C026  F011         	movff	guardar_comando@tecla,?_sprintf+4
  2538  00206A  6A12               	clrf	?_sprintf+5,c
  2539  00206C  ECCD  F007         	call	_sprintf	;wreg free
  2540                           
  2541                           ;headers\teclado.h: 21: if (tamanio_comando <3){
  2542  002070  0100               	movlb	0	; () banked
  2543  002072  BF95               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  2544  002074  D008               	goto	l2607
  2545  002076  0100               	movlb	0	; () banked
  2546  002078  5195               	movf	(_tamanio_comando+1)& (0+255),w,b
  2547  00207A  E123               	bnz	l152
  2548  00207C  0E03               	movlw	3
  2549  00207E  0100               	movlb	0	; () banked
  2550  002080  5D94               	subwf	_tamanio_comando& (0+255),w,b
  2551  002082  B0D8               	btfsc	status,0,c
  2552  002084  0012               	return	
  2553  002086                     l2607:
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;headers\teclado.h: 22: comando[tamanio_comando] = *buffer2;
  2557  002086  0EC6               	movlw	low _comando
  2558  002088  0100               	movlb	0	; () banked
  2559  00208A  2594               	addwf	_tamanio_comando& (0+255),w,b
  2560  00208C  6ED9               	movwf	fsr2l,c
  2561  00208E  0E00               	movlw	high _comando
  2562  002090  0100               	movlb	0	; () banked
  2563  002092  2195               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2564  002094  6EDA               	movwf	fsr2h,c
  2565  002096  C096  FFDF         	movff	_buffer2,indf2
  2566                           
  2567                           ;headers\teclado.h: 23: comando [tamanio_comando+1] = '\0';
  2568  00209A  0E01               	movlw	1
  2569  00209C  0100               	movlb	0	; () banked
  2570  00209E  2594               	addwf	_tamanio_comando& (0+255),w,b
  2571  0020A0  6E24               	movwf	??_guardar_comando& (0+255),c
  2572  0020A2  0E00               	movlw	0
  2573  0020A4  0100               	movlb	0	; () banked
  2574  0020A6  2195               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2575  0020A8  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  2576  0020AA  0EC6               	movlw	low _comando
  2577  0020AC  2424               	addwf	??_guardar_comando,w,c
  2578  0020AE  6ED9               	movwf	fsr2l,c
  2579  0020B0  0E00               	movlw	high _comando
  2580  0020B2  2025               	addwfc	??_guardar_comando+1,w,c
  2581  0020B4  6EDA               	movwf	fsr2h,c
  2582  0020B6  0E00               	movlw	0
  2583  0020B8  6EDF               	movwf	indf2,c
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;headers\teclado.h: 24: tamanio_comando++;
  2587  0020BA  0100               	movlb	0	; () banked
  2588  0020BC  4B94               	infsnz	_tamanio_comando& (0+255),f,b
  2589  0020BE  2B95               	incf	(_tamanio_comando+1)& (0+255),f,b
  2590  0020C0  0012               	return	
  2591  0020C2                     l152:
  2592                           
  2593                           ; BSR set to: 0
  2594  0020C2  0012               	return		;funcret
  2595  0020C4                     __end_of_guardar_comando:
  2596                           	opt stack 0
  2597                           tosu	equ	0xFFF
  2598                           tosh	equ	0xFFE
  2599                           tosl	equ	0xFFD
  2600                           pclath	equ	0xFFA
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           postinc0	equ	0xFEE
  2606                           wreg	equ	0xFE8
  2607                           postdec1	equ	0xFE5
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _guardar_elemento *****************
  2617 ;; Defined at:
  2618 ;;		line 13 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  tecla           1    wreg     unsigned char 
  2621 ;;  array           2   35[COMRAM] PTR unsigned char 
  2622 ;;		 -> year(3), month(3), day(3), 
  2623 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  2624 ;;		 -> tamanio_anio(2), tamanio_mes(2), tamanio_dia(2), 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  tecla           1   41[COMRAM] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2   35[COMRAM] int 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2636 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2639 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2640 ;;Total ram usage:        7 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    2
  2643 ;; This function calls:
  2644 ;;		_sprintf
  2645 ;; This function is called by:
  2646 ;;		_cambiar_dia
  2647 ;;		_cambiar_mes
  2648 ;;		_cambiar_anio
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           	psect	text12
  2653  001FE0                     __ptext12:
  2654                           	opt stack 0
  2655  001FE0                     _guardar_elemento:
  2656                           	opt stack 25
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;incstack = 0
  2660                           ;guardar_elemento@tecla stored from wreg
  2661  001FE0  6E2A               	movwf	guardar_elemento@tecla,c
  2662                           
  2663                           ;headers\fecha.h: 15: sprintf(buffer2,"%01u",tecla);
  2664  001FE2  0E96               	movlw	low _buffer2
  2665  001FE4  6E0D               	movwf	sprintf@sp,c
  2666  001FE6  0E00               	movlw	high _buffer2
  2667  001FE8  6E0E               	movwf	sprintf@sp+1,c
  2668  001FEA  0E7C               	movlw	low STR_1
  2669  001FEC  6E0F               	movwf	sprintf@f,c
  2670  001FEE  0E0F               	movlw	high STR_1
  2671  001FF0  6E10               	movwf	sprintf@f+1,c
  2672  001FF2  C02A  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  2673  001FF6  6A12               	clrf	?_sprintf+5,c
  2674  001FF8  ECCD  F007         	call	_sprintf	;wreg free
  2675                           
  2676                           ;headers\fecha.h: 16: array[*tamanio_array] = *buffer2;
  2677  001FFC  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2678  002000  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2679  002004  CFDE F028          	movff	postinc2,??_guardar_elemento
  2680  002008  CFDD F029          	movff	postdec2,??_guardar_elemento+1
  2681  00200C  5028               	movf	??_guardar_elemento,w,c
  2682  00200E  2424               	addwf	guardar_elemento@array,w,c
  2683  002010  6ED9               	movwf	fsr2l,c
  2684  002012  5029               	movf	??_guardar_elemento+1,w,c
  2685  002014  2025               	addwfc	guardar_elemento@array+1,w,c
  2686  002016  6EDA               	movwf	fsr2h,c
  2687  002018  C096  FFDF         	movff	_buffer2,indf2
  2688                           
  2689                           ;headers\fecha.h: 17: array [(*tamanio_array)+1] = 0;
  2690  00201C  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2691  002020  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2692  002024  CFDE F028          	movff	postinc2,??_guardar_elemento
  2693  002028  CFDD F029          	movff	postdec2,??_guardar_elemento+1
  2694  00202C  0E01               	movlw	1
  2695  00202E  2628               	addwf	??_guardar_elemento,f,c
  2696  002030  0E00               	movlw	0
  2697  002032  2229               	addwfc	??_guardar_elemento+1,f,c
  2698  002034  5028               	movf	??_guardar_elemento,w,c
  2699  002036  2424               	addwf	guardar_elemento@array,w,c
  2700  002038  6ED9               	movwf	fsr2l,c
  2701  00203A  5029               	movf	??_guardar_elemento+1,w,c
  2702  00203C  2025               	addwfc	guardar_elemento@array+1,w,c
  2703  00203E  6EDA               	movwf	fsr2h,c
  2704  002040  0E00               	movlw	0
  2705  002042  6EDF               	movwf	indf2,c
  2706                           
  2707                           ;headers\fecha.h: 18: (*tamanio_array)++;
  2708  002044  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2709  002048  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2710  00204C  2ADE               	incf	postinc2,f,c
  2711  00204E  0E00               	movlw	0
  2712  002050  22DD               	addwfc	postdec2,f,c
  2713  002052  0012               	return		;funcret
  2714  002054                     __end_of_guardar_elemento:
  2715                           	opt stack 0
  2716                           tosu	equ	0xFFF
  2717                           tosh	equ	0xFFE
  2718                           tosl	equ	0xFFD
  2719                           pclath	equ	0xFFA
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           postinc0	equ	0xFEE
  2725                           wreg	equ	0xFE8
  2726                           postdec1	equ	0xFE5
  2727                           fsr1l	equ	0xFE1
  2728                           indf2	equ	0xFDF
  2729                           postinc2	equ	0xFDE
  2730                           postdec2	equ	0xFDD
  2731                           fsr2h	equ	0xFDA
  2732                           fsr2l	equ	0xFD9
  2733                           status	equ	0xFD8
  2734                           
  2735 ;; *************** function _convertir_a_int *****************
  2736 ;; Defined at:
  2737 ;;		line 21 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  array           2   13[COMRAM] PTR unsigned char 
  2740 ;;		 -> year(3), month(3), day(3), 
  2741 ;;  valor           2   15[COMRAM] PTR int 
  2742 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  2   13[COMRAM] int 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2757 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2758 ;;Total ram usage:        4 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    2
  2761 ;; This function calls:
  2762 ;;		_atoi
  2763 ;; This function is called by:
  2764 ;;		_cambiar_dia
  2765 ;;		_cambiar_mes
  2766 ;;		_cambiar_anio
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text13
  2771  00250A                     __ptext13:
  2772                           	opt stack 0
  2773  00250A                     _convertir_a_int:
  2774                           	opt stack 25
  2775                           
  2776                           ;headers\fecha.h: 22: *valor = atoi(array);
  2777                           
  2778                           ;incstack = 0
  2779  00250A  C00E  F007         	movff	convertir_a_int@array,atoi@s
  2780  00250E  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  2781  002512  EC17  F00D         	call	_atoi	;wreg free
  2782  002516  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  2783  00251A  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  2784  00251E  C007  FFDE         	movff	?_atoi,postinc2
  2785  002522  C008  FFDD         	movff	?_atoi+1,postdec2
  2786  002526  0012               	return		;funcret
  2787  002528                     __end_of_convertir_a_int:
  2788                           	opt stack 0
  2789                           tosu	equ	0xFFF
  2790                           tosh	equ	0xFFE
  2791                           tosl	equ	0xFFD
  2792                           pclath	equ	0xFFA
  2793                           tblptru	equ	0xFF8
  2794                           tblptrh	equ	0xFF7
  2795                           tblptrl	equ	0xFF6
  2796                           tablat	equ	0xFF5
  2797                           postinc0	equ	0xFEE
  2798                           wreg	equ	0xFE8
  2799                           postdec1	equ	0xFE5
  2800                           fsr1l	equ	0xFE1
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _atoi *****************
  2809 ;; Defined at:
  2810 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2813 ;;		 -> year(3), month(3), day(3), 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  a               2   11[COMRAM] int 
  2816 ;;  sign            1   10[COMRAM] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2    6[COMRAM] int 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2826 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2827 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;Total ram usage:        7 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    1
  2833 ;; This function calls:
  2834 ;;		___wmul
  2835 ;;		_isdigit
  2836 ;; This function is called by:
  2837 ;;		_convertir_a_int
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text14
  2842  001A2E                     __ptext14:
  2843                           	opt stack 0
  2844  001A2E                     _atoi:
  2845                           	opt stack 25
  2846                           
  2847                           ;incstack = 0
  2848  001A2E  D003               	goto	l2485
  2849  001A30                     l2483:
  2850  001A30  4A07               	infsnz	atoi@s,f,c
  2851  001A32  2A08               	incf	atoi@s+1,f,c
  2852  001A34  D000               	goto	l2485
  2853  001A36                     l2485:
  2854  001A36  C007  FFD9         	movff	atoi@s,fsr2l
  2855  001A3A  C008  FFDA         	movff	atoi@s+1,fsr2h
  2856  001A3E  0E20               	movlw	32
  2857  001A40  18DE               	xorwf	postinc2,w,c
  2858  001A42  B4D8               	btfsc	status,2,c
  2859  001A44  D7F5               	goto	l2483
  2860  001A46  C007  FFD9         	movff	atoi@s,fsr2l
  2861  001A4A  C008  FFDA         	movff	atoi@s+1,fsr2h
  2862  001A4E  0E09               	movlw	9
  2863  001A50  18DE               	xorwf	postinc2,w,c
  2864  001A52  B4D8               	btfsc	status,2,c
  2865  001A54  D7ED               	goto	l2483
  2866  001A56  0E00               	movlw	0
  2867  001A58  6E0D               	movwf	atoi@a+1,c
  2868  001A5A  0E00               	movlw	0
  2869  001A5C  6E0C               	movwf	atoi@a,c
  2870  001A5E  0E00               	movlw	0
  2871  001A60  6E0B               	movwf	atoi@sign,c
  2872  001A62  C007  FFD9         	movff	atoi@s,fsr2l
  2873  001A66  C008  FFDA         	movff	atoi@s+1,fsr2h
  2874  001A6A  0E2D               	movlw	45
  2875  001A6C  18DE               	xorwf	postinc2,w,c
  2876  001A6E  A4D8               	btfss	status,2,c
  2877  001A70  D002               	goto	l2495
  2878  001A72  2A0B               	incf	atoi@sign,f,c
  2879  001A74  D025               	goto	l2501
  2880  001A76                     l2495:
  2881  001A76  C007  FFD9         	movff	atoi@s,fsr2l
  2882  001A7A  C008  FFDA         	movff	atoi@s+1,fsr2h
  2883  001A7E  0E2B               	movlw	43
  2884  001A80  18DE               	xorwf	postinc2,w,c
  2885  001A82  A4D8               	btfss	status,2,c
  2886  001A84  D020               	goto	l2503
  2887  001A86  D01C               	goto	l2501
  2888  001A88  D01E               	goto	l2503
  2889  001A8A                     l2499:
  2890  001A8A  C00C  F001         	movff	atoi@a,___wmul@multiplier
  2891  001A8E  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  2892  001A92  0E00               	movlw	0
  2893  001A94  6E04               	movwf	___wmul@multiplicand+1,c
  2894  001A96  0E0A               	movlw	10
  2895  001A98  6E03               	movwf	___wmul@multiplicand,c
  2896  001A9A  EC3C  F012         	call	___wmul	;wreg free
  2897  001A9E  C007  FFD9         	movff	atoi@s,fsr2l
  2898  001AA2  C008  FFDA         	movff	atoi@s+1,fsr2h
  2899  001AA6  50DF               	movf	indf2,w,c
  2900  001AA8  6E09               	movwf	??_atoi& (0+255),c
  2901  001AAA  6A0A               	clrf	(??_atoi+1)& (0+255),c
  2902  001AAC  5001               	movf	?___wmul,w,c
  2903  001AAE  2609               	addwf	??_atoi,f,c
  2904  001AB0  5002               	movf	?___wmul+1,w,c
  2905  001AB2  220A               	addwfc	??_atoi+1,f,c
  2906  001AB4  0ED0               	movlw	208
  2907  001AB6  2409               	addwf	??_atoi,w,c
  2908  001AB8  6E0C               	movwf	atoi@a,c
  2909  001ABA  0EFF               	movlw	255
  2910  001ABC  200A               	addwfc	??_atoi+1,w,c
  2911  001ABE  6E0D               	movwf	atoi@a+1,c
  2912  001AC0                     l2501:
  2913  001AC0  4A07               	infsnz	atoi@s,f,c
  2914  001AC2  2A08               	incf	atoi@s+1,f,c
  2915  001AC4  D000               	goto	l2503
  2916  001AC6                     l2503:
  2917  001AC6  C007  FFD9         	movff	atoi@s,fsr2l
  2918  001ACA  C008  FFDA         	movff	atoi@s+1,fsr2h
  2919  001ACE  50DF               	movf	indf2,w,c
  2920  001AD0  EC74  F012         	call	_isdigit
  2921  001AD4  B0D8               	btfsc	status,0,c
  2922  001AD6  D7D9               	goto	l2499
  2923  001AD8  500B               	movf	atoi@sign,w,c
  2924  001ADA  B4D8               	btfsc	status,2,c
  2925  001ADC  D00D               	goto	l681
  2926  001ADE  C00C  F009         	movff	atoi@a,??_atoi
  2927  001AE2  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  2928  001AE6  1E09               	comf	??_atoi,f,c
  2929  001AE8  1E0A               	comf	??_atoi+1,f,c
  2930  001AEA  4A09               	infsnz	??_atoi,f,c
  2931  001AEC  2A0A               	incf	??_atoi+1,f,c
  2932  001AEE  C009  F007         	movff	??_atoi,?_atoi
  2933  001AF2  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2934  001AF6  0012               	return	
  2935  001AF8                     l681:
  2936  001AF8  C00C  F007         	movff	atoi@a,?_atoi
  2937  001AFC  C00D  F008         	movff	atoi@a+1,?_atoi+1
  2938  001B00  0012               	return		;funcret
  2939  001B02                     __end_of_atoi:
  2940                           	opt stack 0
  2941                           tosu	equ	0xFFF
  2942                           tosh	equ	0xFFE
  2943                           tosl	equ	0xFFD
  2944                           pclath	equ	0xFFA
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           postdec1	equ	0xFE5
  2952                           fsr1l	equ	0xFE1
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _ingresar_password *****************
  2961 ;; Defined at:
  2962 ;;		line 85 in file "main.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  i               2   27[COMRAM] int 
  2967 ;;  i               2   29[COMRAM] int 
  2968 ;;  clear          16   11[COMRAM] unsigned char [16]
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  2  270[None  ] int 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2979 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2980 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2981 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2982 ;;Total ram usage:       21 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    5
  2985 ;; This function calls:
  2986 ;;		_lcd_comand
  2987 ;;		_lcd_gotoxy
  2988 ;;		_lcd_putrs
  2989 ;;		_validar_password
  2990 ;; This function is called by:
  2991 ;;		_main
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text15
  2996  001936                     __ptext15:
  2997                           	opt stack 0
  2998  001936                     _ingresar_password:
  2999                           	opt stack 25
  3000                           
  3001                           ;main.c: 86: char clear[16];
  3002                           ;main.c: 87: for (int i=0;i<16;i++) clear[i]=' ';
  3003                           
  3004                           ;incstack = 0
  3005  001936  0E00               	movlw	0
  3006  001938  6E1F               	movwf	ingresar_password@i+1,c
  3007  00193A  0E00               	movlw	0
  3008  00193C  6E1E               	movwf	ingresar_password@i,c
  3009  00193E                     l2981:
  3010  00193E  BE1F               	btfsc	ingresar_password@i+1,7,c
  3011  001940  D008               	goto	l2985
  3012  001942  501F               	movf	ingresar_password@i+1,w,c
  3013  001944  E112               	bnz	l2991
  3014  001946  0E10               	movlw	16
  3015  001948  5C1E               	subwf	ingresar_password@i,w,c
  3016  00194A  B0D8               	btfsc	status,0,c
  3017  00194C  D00E               	goto	l2991
  3018  00194E  D001               	goto	l2985
  3019  001950  D00C               	goto	l2991
  3020  001952                     l2985:
  3021  001952  0E0C               	movlw	low ingresar_password@clear
  3022  001954  241E               	addwf	ingresar_password@i,w,c
  3023  001956  6ED9               	movwf	fsr2l,c
  3024  001958  0E00               	movlw	high ingresar_password@clear
  3025  00195A  201F               	addwfc	ingresar_password@i+1,w,c
  3026  00195C  6EDA               	movwf	fsr2h,c
  3027  00195E  0E20               	movlw	32
  3028  001960  6EDF               	movwf	indf2,c
  3029  001962  4A1E               	infsnz	ingresar_password@i,f,c
  3030  001964  2A1F               	incf	ingresar_password@i+1,f,c
  3031  001966  D7EB               	goto	l2981
  3032  001968  D000               	goto	l2991
  3033  00196A                     l2991:
  3034                           
  3035                           ;main.c: 89: if(tamanio_password < 6){
  3036  00196A  BE45               	btfsc	_tamanio_password+1,7,c
  3037  00196C  D006               	goto	l2993
  3038  00196E  5045               	movf	_tamanio_password+1,w,c
  3039  001970  E118               	bnz	l2999
  3040  001972  0E06               	movlw	6
  3041  001974  5C44               	subwf	_tamanio_password,w,c
  3042  001976  B0D8               	btfsc	status,0,c
  3043  001978  D014               	goto	l2999
  3044  00197A                     l2993:
  3045                           
  3046                           ;main.c: 91: lcd_comand(0b00001100);
  3047  00197A  0E0C               	movlw	12
  3048  00197C  ECAF  F012         	call	_lcd_comand
  3049                           
  3050                           ;main.c: 92: lcd_gotoxy(1,1);
  3051  001980  0E01               	movlw	1
  3052  001982  6E05               	movwf	lcd_gotoxy@y,c
  3053  001984  0E01               	movlw	1
  3054  001986  EC62  F012         	call	_lcd_gotoxy
  3055                           
  3056                           ;main.c: 93: lcd_putrs("Inserte password");
  3057  00198A  0E21               	movlw	low STR_13
  3058  00198C  6E09               	movwf	lcd_putrs@ptr,c
  3059  00198E  0E0F               	movlw	high STR_13
  3060  001990  6E0A               	movwf	lcd_putrs@ptr+1,c
  3061  001992  EC2D  F011         	call	_lcd_putrs	;wreg free
  3062                           
  3063                           ;main.c: 94: lcd_gotoxy(tamanio_password+1,2);
  3064  001996  0E02               	movlw	2
  3065  001998  6E05               	movwf	lcd_gotoxy@y,c
  3066  00199A  2844               	incf	_tamanio_password,w,c
  3067  00199C  EC62  F012         	call	_lcd_gotoxy
  3068  0019A0  D000               	goto	l2999
  3069  0019A2                     l2999:
  3070                           
  3071                           ;main.c: 95: }
  3072                           ;main.c: 97: validar_password();
  3073  0019A2  EC99  F010         	call	_validar_password	;wreg free
  3074                           
  3075                           ;main.c: 98: if (tamanio_password >= 6 && !autorizado){
  3076  0019A6  BE45               	btfsc	_tamanio_password+1,7,c
  3077  0019A8  0012               	return	
  3078  0019AA  5045               	movf	_tamanio_password+1,w,c
  3079  0019AC  E104               	bnz	u2570
  3080  0019AE  0E06               	movlw	6
  3081  0019B0  5C44               	subwf	_tamanio_password,w,c
  3082  0019B2  A0D8               	btfss	status,0,c
  3083  0019B4  0012               	return	
  3084  0019B6                     u2570:
  3085  0019B6  0100               	movlb	0	; () banked
  3086  0019B8  5184               	movf	_autorizado& (0+255),w,b
  3087  0019BA  0100               	movlb	0	; () banked
  3088  0019BC  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3089  0019BE  A4D8               	btfss	status,2,c
  3090  0019C0  0012               	return	
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 99: tamanio_password = 0;
  3094  0019C2  0E00               	movlw	0
  3095  0019C4  6E45               	movwf	_tamanio_password+1,c
  3096  0019C6  0E00               	movlw	0
  3097  0019C8  6E44               	movwf	_tamanio_password,c
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 100: lcd_gotoxy(1,2);
  3101  0019CA  0E02               	movlw	2
  3102  0019CC  6E05               	movwf	lcd_gotoxy@y,c
  3103  0019CE  0E01               	movlw	1
  3104  0019D0  EC62  F012         	call	_lcd_gotoxy
  3105                           
  3106                           ;main.c: 101: lcd_putrs("ERROR pass");
  3107  0019D4  0E5F               	movlw	low STR_14
  3108  0019D6  6E09               	movwf	lcd_putrs@ptr,c
  3109  0019D8  0E0F               	movlw	high STR_14
  3110  0019DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  3111  0019DC  EC2D  F011         	call	_lcd_putrs	;wreg free
  3112                           
  3113                           ;main.c: 102: for (int i=0;i<6;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3114  0019E0  0E00               	movlw	0
  3115  0019E2  6E1D               	movwf	ingresar_password@i_1002+1,c
  3116  0019E4  0E00               	movlw	0
  3117  0019E6  6E1C               	movwf	ingresar_password@i_1002,c
  3118  0019E8                     l3013:
  3119  0019E8  BE1D               	btfsc	ingresar_password@i_1002+1,7,c
  3120  0019EA  D008               	goto	l3017
  3121  0019EC  501D               	movf	ingresar_password@i_1002+1,w,c
  3122  0019EE  E112               	bnz	l3021
  3123  0019F0  0E06               	movlw	6
  3124  0019F2  5C1C               	subwf	ingresar_password@i_1002,w,c
  3125  0019F4  B0D8               	btfsc	status,0,c
  3126  0019F6  D00E               	goto	l3021
  3127  0019F8  D001               	goto	l3017
  3128  0019FA  D00C               	goto	l3021
  3129  0019FC                     l3017:
  3130  0019FC  0EFF               	movlw	255
  3131  0019FE  6E0B               	movwf	??_ingresar_password& (0+255),c
  3132  001A00  0E8A               	movlw	138
  3133  001A02                     u2767:
  3134  001A02  2EE8               	decfsz	wreg,f,c
  3135  001A04  D7FE               	goto	u2767
  3136  001A06  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  3137  001A08  D7FC               	goto	u2767
  3138  001A0A  D000               	nop2	
  3139  001A0C  4A1C               	infsnz	ingresar_password@i_1002,f,c
  3140  001A0E  2A1D               	incf	ingresar_password@i_1002+1,f,c
  3141  001A10  D7EB               	goto	l3013
  3142  001A12  D000               	goto	l3021
  3143  001A14                     l3021:
  3144                           
  3145                           ;main.c: 103: lcd_gotoxy(1,2);
  3146  001A14  0E02               	movlw	2
  3147  001A16  6E05               	movwf	lcd_gotoxy@y,c
  3148  001A18  0E01               	movlw	1
  3149  001A1A  EC62  F012         	call	_lcd_gotoxy
  3150                           
  3151                           ;main.c: 104: lcd_putrs(clear);
  3152  001A1E  0E0C               	movlw	low ingresar_password@clear
  3153  001A20  6E09               	movwf	lcd_putrs@ptr,c
  3154  001A22  0E00               	movlw	high ingresar_password@clear
  3155  001A24  6E0A               	movwf	lcd_putrs@ptr+1,c
  3156  001A26  EC2D  F011         	call	_lcd_putrs	;wreg free
  3157  001A2A  0012               	return	
  3158  001A2C  0012               	return		;funcret
  3159  001A2E                     __end_of_ingresar_password:
  3160                           	opt stack 0
  3161                           tosu	equ	0xFFF
  3162                           tosh	equ	0xFFE
  3163                           tosl	equ	0xFFD
  3164                           pclath	equ	0xFFA
  3165                           tblptru	equ	0xFF8
  3166                           tblptrh	equ	0xFF7
  3167                           tblptrl	equ	0xFF6
  3168                           tablat	equ	0xFF5
  3169                           postinc0	equ	0xFEE
  3170                           wreg	equ	0xFE8
  3171                           postdec1	equ	0xFE5
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           postdec2	equ	0xFDD
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _validar_password *****************
  3181 ;; Defined at:
  3182 ;;		line 22 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  i               2    2[COMRAM] int 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  2  219[None  ] int 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3199 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3200 ;;Total ram usage:        4 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_ingresar_password
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text16
  3210  002132                     __ptext16:
  3211                           	opt stack 0
  3212  002132                     _validar_password:
  3213                           	opt stack 29
  3214                           
  3215                           ;headers\password.h: 24: autorizado = 1;
  3216                           
  3217                           ;incstack = 0
  3218  002132  0E00               	movlw	0
  3219  002134  0100               	movlb	0	; () banked
  3220  002136  6F85               	movwf	(_autorizado+1)& (0+255),b
  3221  002138  0E01               	movlw	1
  3222  00213A  6F84               	movwf	_autorizado& (0+255),b
  3223                           
  3224                           ;headers\password.h: 25: int i = 0;
  3225  00213C  0E00               	movlw	0
  3226  00213E  6E04               	movwf	validar_password@i+1,c
  3227  002140  0E00               	movlw	0
  3228  002142  6E03               	movwf	validar_password@i,c
  3229                           
  3230                           ;headers\password.h: 26: while (i < 6 && autorizado==1){
  3231  002144  D019               	goto	l2753
  3232  002146                     l2747:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;headers\password.h: 28: if (current_password[i] != password[i])
  3236  002146  0EC0               	movlw	low _password
  3237  002148  2403               	addwf	validar_password@i,w,c
  3238  00214A  6ED9               	movwf	fsr2l,c
  3239  00214C  0E00               	movlw	high _password
  3240  00214E  2004               	addwfc	validar_password@i+1,w,c
  3241  002150  6EDA               	movwf	fsr2h,c
  3242  002152  0E78               	movlw	low _current_password
  3243  002154  2403               	addwf	validar_password@i,w,c
  3244  002156  6EE1               	movwf	fsr1l,c
  3245  002158  0E00               	movlw	high _current_password
  3246  00215A  2004               	addwfc	validar_password@i+1,w,c
  3247  00215C  6EE2               	movwf	fsr1h,c
  3248  00215E  50DE               	movf	postinc2,w,c
  3249  002160  18E6               	xorwf	postinc1,w,c
  3250  002162  B4D8               	btfsc	status,2,c
  3251  002164  D006               	goto	l2751
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;headers\password.h: 29: autorizado = 0;
  3255  002166  0E00               	movlw	0
  3256  002168  0100               	movlb	0	; () banked
  3257  00216A  6F85               	movwf	(_autorizado+1)& (0+255),b
  3258  00216C  0E00               	movlw	0
  3259  00216E  6F84               	movwf	_autorizado& (0+255),b
  3260  002170  D000               	goto	l2751
  3261  002172                     l2751:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;headers\password.h: 31: i++;
  3265  002172  4A03               	infsnz	validar_password@i,f,c
  3266  002174  2A04               	incf	validar_password@i+1,f,c
  3267  002176  D000               	goto	l2753
  3268  002178                     l2753:
  3269                           
  3270                           ; BSR set to: 0
  3271  002178  BE04               	btfsc	validar_password@i+1,7,c
  3272  00217A  D006               	goto	l2755
  3273  00217C  5004               	movf	validar_password@i+1,w,c
  3274  00217E  E10C               	bnz	l226
  3275  002180  0E06               	movlw	6
  3276  002182  5C03               	subwf	validar_password@i,w,c
  3277  002184  B0D8               	btfsc	status,0,c
  3278  002186  0012               	return	
  3279  002188                     l2755:
  3280                           
  3281                           ; BSR set to: 0
  3282  002188  0100               	movlb	0	; () banked
  3283  00218A  0584               	decf	_autorizado& (0+255),w,b
  3284  00218C  0100               	movlb	0	; () banked
  3285  00218E  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3286  002190  A4D8               	btfss	status,2,c
  3287  002192  0012               	return	
  3288  002194  D7D8               	goto	l2747
  3289                           
  3290                           ; BSR set to: 0
  3291  002196  0012               	return	
  3292  002198                     l226:
  3293                           
  3294                           ; BSR set to: 0
  3295  002198  0012               	return		;funcret
  3296  00219A                     __end_of_validar_password:
  3297                           	opt stack 0
  3298                           tosu	equ	0xFFF
  3299                           tosh	equ	0xFFE
  3300                           tosl	equ	0xFFD
  3301                           pclath	equ	0xFFA
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           postinc1	equ	0xFE6
  3309                           postdec1	equ	0xFE5
  3310                           fsr1h	equ	0xFE2
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _caratula *****************
  3320 ;; Defined at:
  3321 ;;		line 34 in file "main.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  3324 ;;		 -> STR_19(8), 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;		None               void
  3329 ;; Registers used:
  3330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3340 ;;Total ram usage:        2 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    5
  3343 ;; This function calls:
  3344 ;;		_lcd_comand
  3345 ;;		_lcd_gotoxy
  3346 ;;		_lcd_putrs
  3347 ;;		_sprintf
  3348 ;; This function is called by:
  3349 ;;		_main
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text17
  3354  001B02                     __ptext17:
  3355                           	opt stack 0
  3356  001B02                     _caratula:
  3357                           	opt stack 25
  3358                           
  3359                           ;main.c: 36: lcd_comand(0b00001100);
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;incstack = 0
  3363  001B02  0E0C               	movlw	12
  3364  001B04  ECAF  F012         	call	_lcd_comand
  3365                           
  3366                           ;main.c: 37: lcd_gotoxy(1,1);
  3367  001B08  0E01               	movlw	1
  3368  001B0A  6E05               	movwf	lcd_gotoxy@y,c
  3369  001B0C  0E01               	movlw	1
  3370  001B0E  EC62  F012         	call	_lcd_gotoxy
  3371                           
  3372                           ;main.c: 38: lcd_putrs(titulo);
  3373  001B12  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  3374  001B16  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  3375  001B1A  EC2D  F011         	call	_lcd_putrs	;wreg free
  3376                           
  3377                           ;main.c: 40: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  3378  001B1E  0E96               	movlw	low _buffer2
  3379  001B20  6E0D               	movwf	sprintf@sp,c
  3380  001B22  0E00               	movlw	high _buffer2
  3381  001B24  6E0E               	movwf	sprintf@sp+1,c
  3382  001B26  0E43               	movlw	low STR_11
  3383  001B28  6E0F               	movwf	sprintf@f,c
  3384  001B2A  0E0F               	movlw	high STR_11
  3385  001B2C  6E10               	movwf	sprintf@f+1,c
  3386  001B2E  C057  F011         	movff	_dia,?_sprintf+4
  3387  001B32  C058  F012         	movff	_dia+1,?_sprintf+5
  3388  001B36  C05B  F013         	movff	_mes,?_sprintf+6
  3389  001B3A  C05C  F014         	movff	_mes+1,?_sprintf+7
  3390  001B3E  C055  F015         	movff	_anio,?_sprintf+8
  3391  001B42  C056  F016         	movff	_anio+1,?_sprintf+9
  3392  001B46  ECCD  F007         	call	_sprintf	;wreg free
  3393                           
  3394                           ;main.c: 41: lcd_gotoxy(9,1);
  3395  001B4A  0E01               	movlw	1
  3396  001B4C  6E05               	movwf	lcd_gotoxy@y,c
  3397  001B4E  0E09               	movlw	9
  3398  001B50  EC62  F012         	call	_lcd_gotoxy
  3399                           
  3400                           ;main.c: 42: lcd_putrs(buffer2);
  3401  001B54  0E96               	movlw	low _buffer2
  3402  001B56  6E09               	movwf	lcd_putrs@ptr,c
  3403  001B58  0E00               	movlw	high _buffer2
  3404  001B5A  6E0A               	movwf	lcd_putrs@ptr+1,c
  3405  001B5C  EC2D  F011         	call	_lcd_putrs	;wreg free
  3406                           
  3407                           ;main.c: 44: sprintf(buffer2,"  %02u:%02u:%02u",hora,minuto,segundo);
  3408  001B60  0E96               	movlw	low _buffer2
  3409  001B62  6E0D               	movwf	sprintf@sp,c
  3410  001B64  0E00               	movlw	high _buffer2
  3411  001B66  6E0E               	movwf	sprintf@sp+1,c
  3412  001B68  0E32               	movlw	low STR_12
  3413  001B6A  6E0F               	movwf	sprintf@f,c
  3414  001B6C  0E0F               	movlw	high STR_12
  3415  001B6E  6E10               	movwf	sprintf@f+1,c
  3416  001B70  C059  F011         	movff	_hora,?_sprintf+4
  3417  001B74  C05A  F012         	movff	_hora+1,?_sprintf+5
  3418  001B78  C05D  F013         	movff	_minuto,?_sprintf+6
  3419  001B7C  C05E  F014         	movff	_minuto+1,?_sprintf+7
  3420  001B80  C092  F015         	movff	_segundo,?_sprintf+8
  3421  001B84  C093  F016         	movff	_segundo+1,?_sprintf+9
  3422  001B88  ECCD  F007         	call	_sprintf	;wreg free
  3423                           
  3424                           ;main.c: 45: lcd_gotoxy(1,2);
  3425  001B8C  0E02               	movlw	2
  3426  001B8E  6E05               	movwf	lcd_gotoxy@y,c
  3427  001B90  0E01               	movlw	1
  3428  001B92  EC62  F012         	call	_lcd_gotoxy
  3429                           
  3430                           ;main.c: 46: lcd_putrs(buffer2);
  3431  001B96  0E96               	movlw	low _buffer2
  3432  001B98  6E09               	movwf	lcd_putrs@ptr,c
  3433  001B9A  0E00               	movlw	high _buffer2
  3434  001B9C  6E0A               	movwf	lcd_putrs@ptr+1,c
  3435  001B9E  EC2D  F011         	call	_lcd_putrs	;wreg free
  3436  001BA2  0012               	return		;funcret
  3437  001BA4                     __end_of_caratula:
  3438                           	opt stack 0
  3439                           tosu	equ	0xFFF
  3440                           tosh	equ	0xFFE
  3441                           tosl	equ	0xFFD
  3442                           pclath	equ	0xFFA
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postinc1	equ	0xFE6
  3450                           postdec1	equ	0xFE5
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _sprintf *****************
  3461 ;; Defined at:
  3462 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3465 ;;		 -> buffer2(20), 
  3466 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3467 ;;		 -> STR_15(5), STR_12(17), STR_11(15), STR_10(5), 
  3468 ;;		 -> STR_2(5), STR_1(5), 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  tmpval          4    0        struct .
  3471 ;;  cp              3    0        PTR const unsigned char 
  3472 ;;  width           2   32[COMRAM] int 
  3473 ;;  val             2   29[COMRAM] unsigned int 
  3474 ;;  ap              2   26[COMRAM] PTR void [1]
  3475 ;;		 -> ?_sprintf(2), 
  3476 ;;  len             2    0        unsigned int 
  3477 ;;  c               1   34[COMRAM] char 
  3478 ;;  prec            1   31[COMRAM] char 
  3479 ;;  flag            1   28[COMRAM] unsigned char 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  2   12[COMRAM] int 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3489 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;Total ram usage:       23 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    1
  3496 ;; This function calls:
  3497 ;;		___lwdiv
  3498 ;;		___lwmod
  3499 ;;		___wmul
  3500 ;;		_isdigit
  3501 ;; This function is called by:
  3502 ;;		_guardar_comando
  3503 ;;		_imprimir_tecla
  3504 ;;		_guardar_elemento
  3505 ;;		_caratula
  3506 ;;		_mostrar_guardar_password
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text18
  3511  000F9A                     __ptext18:
  3512                           	opt stack 0
  3513  000F9A                     _sprintf:
  3514                           	opt stack 27
  3515                           
  3516                           ;doprnt.c: 494: va_list ap;
  3517                           ;doprnt.c: 499: signed char c;
  3518                           ;doprnt.c: 501: int width;
  3519                           ;doprnt.c: 506: signed char prec;
  3520                           ;doprnt.c: 508: unsigned char flag;
  3521                           ;doprnt.c: 523: union {
  3522                           ;doprnt.c: 524: unsigned long vd;
  3523                           ;doprnt.c: 525: double integ;
  3524                           ;doprnt.c: 526: } tmpval;
  3525                           ;doprnt.c: 528: unsigned int val;
  3526                           ;doprnt.c: 529: unsigned len;
  3527                           ;doprnt.c: 530: const char * cp;
  3528                           ;doprnt.c: 533: *ap = __va_start();
  3529                           
  3530                           ;incstack = 0
  3531  000F9A  0E11               	movlw	low (?_sprintf+4)
  3532  000F9C  6E1B               	movwf	sprintf@ap,c
  3533  000F9E  0E00               	movlw	high (?_sprintf+4)
  3534  000FA0  6E1C               	movwf	sprintf@ap+1,c
  3535                           
  3536                           ;doprnt.c: 536: while(c = *f++) {
  3537  000FA2  D117               	goto	l2467
  3538  000FA4                     l2385:
  3539                           
  3540                           ;doprnt.c: 538: if(c != '%')
  3541  000FA4  0E25               	movlw	37
  3542  000FA6  1823               	xorwf	sprintf@c,w,c
  3543  000FA8  B4D8               	btfsc	status,2,c
  3544  000FAA  D009               	goto	l2391
  3545                           
  3546                           ;doprnt.c: 540: {
  3547                           ;doprnt.c: 541: ((*sp++ = (c)));
  3548  000FAC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3549  000FB0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3550  000FB4  C023  FFDF         	movff	sprintf@c,indf2
  3551  000FB8  4A0D               	infsnz	sprintf@sp,f,c
  3552  000FBA  2A0E               	incf	sprintf@sp+1,f,c
  3553                           
  3554                           ;doprnt.c: 542: continue;
  3555  000FBC  D10A               	goto	l2467
  3556  000FBE                     l2391:
  3557                           
  3558                           ;doprnt.c: 543: }
  3559                           ;doprnt.c: 546: width = 0;
  3560  000FBE  0E00               	movlw	0
  3561  000FC0  6E22               	movwf	sprintf@width+1,c
  3562  000FC2  0E00               	movlw	0
  3563  000FC4  6E21               	movwf	sprintf@width,c
  3564                           
  3565                           ;doprnt.c: 548: flag = 0;
  3566  000FC6  0E00               	movlw	0
  3567  000FC8  6E1D               	movwf	sprintf@flag,c
  3568                           
  3569                           ;doprnt.c: 551: switch(*f) {
  3570                           
  3571                           ;doprnt.c: 550: for(;;) {
  3572  000FCA  D005               	goto	l2397
  3573  000FCC                     l2393:
  3574                           
  3575                           ;doprnt.c: 580: flag |= 0x04;
  3576  000FCC  841D               	bsf	sprintf@flag,2,c
  3577                           
  3578                           ;doprnt.c: 581: f++;
  3579  000FCE  4A0F               	infsnz	sprintf@f,f,c
  3580  000FD0  2A10               	incf	sprintf@f+1,f,c
  3581                           
  3582                           ;doprnt.c: 582: continue;
  3583  000FD2  D001               	goto	l2397
  3584                           
  3585                           ;doprnt.c: 584: }
  3586  000FD4  D00B               	goto	l2399
  3587  000FD6                     l2397:
  3588  000FD6  C00F  FFF6         	movff	sprintf@f,tblptrl
  3589  000FDA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3590  000FDE                     	if	0	;tblptru may be non-zero
  3591  000FDE                     	endif
  3592  000FDE                     	if	0	;tblptru may be non-zero
  3593  000FDE                     	endif
  3594  000FDE  0008               	tblrd		*
  3595  000FE0  50F5               	movf	tablat,w,c
  3596                           
  3597                           ; Switch size 1, requested type "space"
  3598                           ; Number of cases is 1, Range of values is 48 to 48
  3599                           ; switch strategies available:
  3600                           ; Name         Instructions Cycles
  3601                           ; simple_byte            4     3 (average)
  3602                           ;	Chosen strategy is simple_byte
  3603  000FE2  0A30               	xorlw	48	; case 48
  3604  000FE4  B4D8               	btfsc	status,2,c
  3605  000FE6  D7F2               	goto	l2393
  3606                           
  3607                           ;doprnt.c: 585: break;
  3608  000FE8  D001               	goto	l2399
  3609                           
  3610                           ;doprnt.c: 586: }
  3611  000FEA  D7F5               	goto	l2397
  3612  000FEC                     l2399:
  3613                           
  3614                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3615  000FEC  C00F  FFF6         	movff	sprintf@f,tblptrl
  3616  000FF0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3617  000FF4                     	if	0	;tblptru may be non-zero
  3618  000FF4                     	endif
  3619  000FF4                     	if	0	;tblptru may be non-zero
  3620  000FF4                     	endif
  3621  000FF4  0008               	tblrd		*
  3622  000FF6  50F5               	movf	tablat,w,c
  3623  000FF8  EC74  F012         	call	_isdigit
  3624  000FFC  A0D8               	btfss	status,0,c
  3625  000FFE  D03A               	goto	l2415
  3626                           
  3627                           ;doprnt.c: 598: width = 0;
  3628  001000  0E00               	movlw	0
  3629  001002  6E22               	movwf	sprintf@width+1,c
  3630  001004  0E00               	movlw	0
  3631  001006  6E21               	movwf	sprintf@width,c
  3632  001008  D000               	goto	l2403
  3633  00100A                     l2403:
  3634                           
  3635                           ;doprnt.c: 600: width *= 10;
  3636  00100A  C021  F001         	movff	sprintf@width,___wmul@multiplier
  3637  00100E  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  3638  001012  0E00               	movlw	0
  3639  001014  6E04               	movwf	___wmul@multiplicand+1,c
  3640  001016  0E0A               	movlw	10
  3641  001018  6E03               	movwf	___wmul@multiplicand,c
  3642  00101A  EC3C  F012         	call	___wmul	;wreg free
  3643  00101E  C001  F021         	movff	?___wmul,sprintf@width
  3644  001022  C002  F022         	movff	?___wmul+1,sprintf@width+1
  3645                           
  3646                           ;doprnt.c: 601: width += *f++ - '0';
  3647  001026  0ED0               	movlw	208
  3648  001028  6E17               	movwf	??_sprintf& (0+255),c
  3649  00102A  0EFF               	movlw	255
  3650  00102C  6E18               	movwf	(??_sprintf+1)& (0+255),c
  3651  00102E  C00F  FFF6         	movff	sprintf@f,tblptrl
  3652  001032  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3653  001036                     	if	0	;tblptru may be non-zero
  3654  001036                     	endif
  3655  001036                     	if	0	;tblptru may be non-zero
  3656  001036                     	endif
  3657  001036  0008               	tblrd		*
  3658  001038  50F5               	movf	tablat,w,c
  3659  00103A  6E19               	movwf	(??_sprintf+2)& (0+255),c
  3660  00103C  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  3661  00103E  5017               	movf	??_sprintf,w,c
  3662  001040  2619               	addwf	??_sprintf+2,f,c
  3663  001042  5018               	movf	??_sprintf+1,w,c
  3664  001044  221A               	addwfc	??_sprintf+3,f,c
  3665  001046  5019               	movf	??_sprintf+2,w,c
  3666  001048  2621               	addwf	sprintf@width,f,c
  3667  00104A  501A               	movf	??_sprintf+3,w,c
  3668  00104C  2222               	addwfc	sprintf@width+1,f,c
  3669  00104E  4A0F               	infsnz	sprintf@f,f,c
  3670  001050  2A10               	incf	sprintf@f+1,f,c
  3671                           
  3672                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3673  001052  C00F  FFF6         	movff	sprintf@f,tblptrl
  3674  001056  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3675  00105A                     	if	0	;tblptru may be non-zero
  3676  00105A                     	endif
  3677  00105A                     	if	0	;tblptru may be non-zero
  3678  00105A                     	endif
  3679  00105A  0008               	tblrd		*
  3680  00105C  50F5               	movf	tablat,w,c
  3681  00105E  EC74  F012         	call	_isdigit
  3682  001062  A0D8               	btfss	status,0,c
  3683  001064  D007               	goto	l2415
  3684  001066  D7D1               	goto	l2403
  3685                           
  3686                           ;doprnt.c: 608: }
  3687                           ;doprnt.c: 635: switch(c = *f++) {
  3688  001068  D005               	goto	l2415
  3689                           
  3690                           ;doprnt.c: 638: goto alldone;
  3691                           
  3692                           ;doprnt.c: 637: case 0:
  3693  00106A  D0C1               	goto	l2469
  3694                           
  3695                           ;doprnt.c: 813: continue;
  3696                           
  3697                           ;doprnt.c: 802: default:
  3698  00106C  D0B2               	goto	l2467
  3699  00106E                     l2411:
  3700                           
  3701                           ;doprnt.c: 818: flag |= 0xC0;
  3702  00106E  0EC0               	movlw	192
  3703  001070  121D               	iorwf	sprintf@flag,f,c
  3704                           
  3705                           ;doprnt.c: 822: }
  3706                           
  3707                           ;doprnt.c: 819: break;
  3708  001072  D011               	goto	l2417
  3709  001074                     l2415:
  3710  001074  C00F  FFF6         	movff	sprintf@f,tblptrl
  3711  001078  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3712  00107C  4A0F               	infsnz	sprintf@f,f,c
  3713  00107E  2A10               	incf	sprintf@f+1,f,c
  3714  001080                     	if	0	;tblptru may be non-zero
  3715  001080                     	endif
  3716  001080                     	if	0	;tblptru may be non-zero
  3717  001080                     	endif
  3718  001080  0008               	tblrd		*
  3719  001082  CFF5 F023          	movff	tablat,sprintf@c
  3720  001086  5023               	movf	sprintf@c,w,c
  3721                           
  3722                           ; Switch size 1, requested type "space"
  3723                           ; Number of cases is 2, Range of values is 0 to 117
  3724                           ; switch strategies available:
  3725                           ; Name         Instructions Cycles
  3726                           ; simple_byte            7     4 (average)
  3727                           ;	Chosen strategy is simple_byte
  3728  001088  0A00               	xorlw	0	; case 0
  3729  00108A  B4D8               	btfsc	status,2,c
  3730  00108C  D0B0               	goto	l2469
  3731  00108E  0A75               	xorlw	117	; case 117
  3732  001090  B4D8               	btfsc	status,2,c
  3733  001092  D7ED               	goto	l2411
  3734  001094  D09E               	goto	l2467
  3735  001096                     l2417:
  3736                           
  3737                           ;doprnt.c: 1273: {
  3738                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3739  001096  C01B  FFD9         	movff	sprintf@ap,fsr2l
  3740  00109A  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  3741  00109E  CFDE F01E          	movff	postinc2,sprintf@val
  3742  0010A2  CFDD F01F          	movff	postdec2,sprintf@val+1
  3743  0010A6  0E02               	movlw	2
  3744  0010A8  261B               	addwf	sprintf@ap,f,c
  3745  0010AA  0E00               	movlw	0
  3746  0010AC  221C               	addwfc	sprintf@ap+1,f,c
  3747                           
  3748                           ;doprnt.c: 1287: }
  3749                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3750  0010AE  0E01               	movlw	1
  3751  0010B0  6E23               	movwf	sprintf@c,c
  3752  0010B2                     l2423:
  3753  0010B2  0E05               	movlw	5
  3754  0010B4  1823               	xorwf	sprintf@c,w,c
  3755  0010B6  B4D8               	btfsc	status,2,c
  3756  0010B8  D016               	goto	l2435
  3757  0010BA  D001               	goto	l2427
  3758  0010BC  D014               	goto	l2435
  3759  0010BE                     l2427:
  3760                           
  3761                           ;doprnt.c: 1306: if(val < dpowers[c])
  3762  0010BE  5023               	movf	sprintf@c,w,c
  3763  0010C0  0D02               	mullw	2
  3764  0010C2  0E01               	movlw	low _dpowers
  3765  0010C4  24F3               	addwf	prodl,w,c
  3766  0010C6  6EF6               	movwf	tblptrl,c
  3767  0010C8  0E0F               	movlw	high _dpowers
  3768  0010CA  20F4               	addwfc	prodh,w,c
  3769  0010CC  6EF7               	movwf	tblptrh,c
  3770  0010CE                     	if	0	;There are less than 3 active tblptr bytes
  3771  0010CE                     	endif
  3772  0010CE  0009               	tblrd		*+
  3773  0010D0  50F5               	movf	tablat,w,c
  3774  0010D2  5C1E               	subwf	sprintf@val,w,c
  3775  0010D4  0009               	tblrd		*+
  3776  0010D6  50F5               	movf	tablat,w,c
  3777  0010D8  581F               	subwfb	sprintf@val+1,w,c
  3778  0010DA  A0D8               	btfss	status,0,c
  3779  0010DC  D004               	goto	l2435
  3780  0010DE  D001               	goto	l2431
  3781                           
  3782                           ;doprnt.c: 1307: break;
  3783  0010E0  D002               	goto	l2435
  3784  0010E2                     l2431:
  3785  0010E2  2A23               	incf	sprintf@c,f,c
  3786  0010E4  D7E6               	goto	l2423
  3787  0010E6                     l2435:
  3788                           
  3789                           ;doprnt.c: 1381: if(width > c)
  3790  0010E6  0E80               	movlw	128
  3791  0010E8  BE23               	btfsc	sprintf@c,7,c
  3792  0010EA  0E7F               	movlw	127
  3793  0010EC  6E17               	movwf	??_sprintf& (0+255),c
  3794  0010EE  5021               	movf	sprintf@width,w,c
  3795  0010F0  5C23               	subwf	sprintf@c,w,c
  3796  0010F2  5022               	movf	sprintf@width+1,w,c
  3797  0010F4  0A80               	xorlw	128
  3798  0010F6  5817               	subwfb	??_sprintf& (0+255),w,c
  3799  0010F8  B0D8               	btfsc	status,0,c
  3800  0010FA  D007               	goto	l2439
  3801                           
  3802                           ;doprnt.c: 1382: width -= c;
  3803  0010FC  5023               	movf	sprintf@c,w,c
  3804  0010FE  5E21               	subwf	sprintf@width,f,c
  3805  001100  0E00               	movlw	0
  3806  001102  BE23               	btfsc	sprintf@c,7,c
  3807  001104  0EFF               	movlw	255
  3808  001106  5A22               	subwfb	sprintf@width+1,f,c
  3809  001108  D005               	goto	l2441
  3810  00110A                     l2439:
  3811                           
  3812                           ;doprnt.c: 1383: else
  3813                           ;doprnt.c: 1384: width = 0;
  3814  00110A  0E00               	movlw	0
  3815  00110C  6E22               	movwf	sprintf@width+1,c
  3816  00110E  0E00               	movlw	0
  3817  001110  6E21               	movwf	sprintf@width,c
  3818  001112  D000               	goto	l2441
  3819  001114                     l2441:
  3820                           
  3821                           ;doprnt.c: 1387: if(flag & 0x04) {
  3822  001114  A41D               	btfss	sprintf@flag,2,c
  3823  001116  D015               	goto	l2451
  3824                           
  3825                           ;doprnt.c: 1415: if(width)
  3826  001118  5021               	movf	sprintf@width,w,c
  3827  00111A  1022               	iorwf	sprintf@width+1,w,c
  3828  00111C  B4D8               	btfsc	status,2,c
  3829  00111E  D026               	goto	l399
  3830  001120                     l2445:
  3831                           
  3832                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3833  001120  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3834  001124  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3835  001128  0E30               	movlw	48
  3836  00112A  6EDF               	movwf	indf2,c
  3837  00112C  4A0D               	infsnz	sprintf@sp,f,c
  3838  00112E  2A0E               	incf	sprintf@sp+1,f,c
  3839                           
  3840                           ;doprnt.c: 1418: while(--width);
  3841  001130  0621               	decf	sprintf@width,f,c
  3842  001132  A0D8               	btfss	status,0,c
  3843  001134  0622               	decf	sprintf@width+1,f,c
  3844  001136  5021               	movf	sprintf@width,w,c
  3845  001138  1022               	iorwf	sprintf@width+1,w,c
  3846  00113A  B4D8               	btfsc	status,2,c
  3847  00113C  D017               	goto	l399
  3848  00113E  D7F0               	goto	l2445
  3849                           
  3850                           ;doprnt.c: 1420: } else
  3851  001140  D015               	goto	l399
  3852  001142                     l2451:
  3853                           
  3854                           ;doprnt.c: 1422: {
  3855                           ;doprnt.c: 1424: if(width
  3856                           ;doprnt.c: 1428: )
  3857  001142  5021               	movf	sprintf@width,w,c
  3858  001144  1022               	iorwf	sprintf@width+1,w,c
  3859  001146  B4D8               	btfsc	status,2,c
  3860  001148  D011               	goto	l399
  3861  00114A                     l2453:
  3862                           
  3863                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3864  00114A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3865  00114E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3866  001152  0E20               	movlw	32
  3867  001154  6EDF               	movwf	indf2,c
  3868  001156  4A0D               	infsnz	sprintf@sp,f,c
  3869  001158  2A0E               	incf	sprintf@sp+1,f,c
  3870                           
  3871                           ;doprnt.c: 1431: while(--width);
  3872  00115A  0621               	decf	sprintf@width,f,c
  3873  00115C  A0D8               	btfss	status,0,c
  3874  00115E  0622               	decf	sprintf@width+1,f,c
  3875  001160  5021               	movf	sprintf@width,w,c
  3876  001162  1022               	iorwf	sprintf@width+1,w,c
  3877  001164  B4D8               	btfsc	status,2,c
  3878  001166  D002               	goto	l399
  3879  001168  D7F0               	goto	l2453
  3880  00116A  D000               	goto	l399
  3881  00116C                     l399:
  3882                           
  3883                           ;doprnt.c: 1469: }
  3884                           ;doprnt.c: 1472: prec = c;
  3885  00116C  C023  F020         	movff	sprintf@c,sprintf@prec
  3886                           
  3887                           ;doprnt.c: 1474: while(prec--) {
  3888  001170  D02A               	goto	l2465
  3889  001172                     l2459:
  3890                           
  3891                           ;doprnt.c: 1478: {
  3892                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3893  001172  5020               	movf	sprintf@prec,w,c
  3894  001174  0D02               	mullw	2
  3895  001176  0E01               	movlw	low _dpowers
  3896  001178  24F3               	addwf	prodl,w,c
  3897  00117A  6EF6               	movwf	tblptrl,c
  3898  00117C  0E0F               	movlw	high _dpowers
  3899  00117E  20F4               	addwfc	prodh,w,c
  3900  001180  6EF7               	movwf	tblptrh,c
  3901  001182                     	if	0	;There are less than 3 active tblptr bytes
  3902  001182                     	endif
  3903  001182  0009               	tblrd		*+
  3904  001184  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3905  001188  000A               	tblrd		*-
  3906  00118A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3907  00118E  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  3908  001192  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3909  001196  ECFF  F010         	call	___lwdiv	;wreg free
  3910  00119A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3911  00119E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3912  0011A2  0E00               	movlw	0
  3913  0011A4  6E0B               	movwf	___lwmod@divisor+1,c
  3914  0011A6  0E0A               	movlw	10
  3915  0011A8  6E0A               	movwf	___lwmod@divisor,c
  3916  0011AA  EC57  F011         	call	___lwmod	;wreg free
  3917  0011AE  5008               	movf	?___lwmod,w,c
  3918  0011B0  0F30               	addlw	48
  3919  0011B2  6E23               	movwf	sprintf@c,c
  3920                           
  3921                           ;doprnt.c: 1523: }
  3922                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3923  0011B4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3924  0011B8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3925  0011BC  C023  FFDF         	movff	sprintf@c,indf2
  3926  0011C0  4A0D               	infsnz	sprintf@sp,f,c
  3927  0011C2  2A0E               	incf	sprintf@sp+1,f,c
  3928  0011C4  D000               	goto	l2465
  3929  0011C6                     l2465:
  3930  0011C6  0620               	decf	sprintf@prec,f,c
  3931  0011C8  2820               	incf	sprintf@prec,w,c
  3932  0011CA  B4D8               	btfsc	status,2,c
  3933  0011CC  D002               	goto	l2467
  3934  0011CE  D7D1               	goto	l2459
  3935  0011D0  D000               	goto	l2467
  3936  0011D2                     l2467:
  3937  0011D2  C00F  FFF6         	movff	sprintf@f,tblptrl
  3938  0011D6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3939  0011DA  4A0F               	infsnz	sprintf@f,f,c
  3940  0011DC  2A10               	incf	sprintf@f+1,f,c
  3941  0011DE                     	if	0	;tblptru may be non-zero
  3942  0011DE                     	endif
  3943  0011DE                     	if	0	;tblptru may be non-zero
  3944  0011DE                     	endif
  3945  0011DE  0008               	tblrd		*
  3946  0011E0  CFF5 F023          	movff	tablat,sprintf@c
  3947  0011E4  5023               	movf	sprintf@c,w,c
  3948  0011E6  B4D8               	btfsc	status,2,c
  3949  0011E8  D002               	goto	l2469
  3950  0011EA  D6DC               	goto	l2385
  3951  0011EC  D000               	goto	l2469
  3952  0011EE                     l2469:
  3953                           
  3954                           ;doprnt.c: 1538: *sp = 0;
  3955  0011EE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3956  0011F2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3957  0011F6  0E00               	movlw	0
  3958  0011F8  6EDF               	movwf	indf2,c
  3959  0011FA  0012               	return	
  3960                           
  3961                           ;doprnt.c: 1540: return 0;
  3962                           ;	Return value of _sprintf is never used
  3963  0011FC  0012               	return		;funcret
  3964  0011FE                     __end_of_sprintf:
  3965                           	opt stack 0
  3966                           tosu	equ	0xFFF
  3967                           tosh	equ	0xFFE
  3968                           tosl	equ	0xFFD
  3969                           pclath	equ	0xFFA
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           prodh	equ	0xFF4
  3975                           prodl	equ	0xFF3
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           postinc1	equ	0xFE6
  3979                           postdec1	equ	0xFE5
  3980                           fsr1h	equ	0xFE2
  3981                           fsr1l	equ	0xFE1
  3982                           indf2	equ	0xFDF
  3983                           postinc2	equ	0xFDE
  3984                           postdec2	equ	0xFDD
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _isdigit *****************
  3990 ;; Defined at:
  3991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  c               1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  c               1    2[COMRAM] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;		None               void
  3998 ;; Registers used:
  3999 ;;		wreg, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4008 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4009 ;;Total ram usage:        3 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_sprintf
  4015 ;;		_atoi
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text19
  4020  0024E8                     __ptext19:
  4021                           	opt stack 0
  4022  0024E8                     _isdigit:
  4023                           	opt stack 27
  4024                           
  4025                           ;incstack = 0
  4026                           ;isdigit@c stored from wreg
  4027  0024E8  6E03               	movwf	isdigit@c,c
  4028  0024EA  0E00               	movlw	0
  4029  0024EC  6E02               	movwf	_isdigit$2145,c
  4030  0024EE  0E3A               	movlw	58
  4031  0024F0  6003               	cpfslt	isdigit@c,c
  4032  0024F2  D006               	goto	l2199
  4033  0024F4  0E2F               	movlw	47
  4034  0024F6  6403               	cpfsgt	isdigit@c,c
  4035  0024F8  D003               	goto	l2199
  4036  0024FA  0E01               	movlw	1
  4037  0024FC  6E02               	movwf	_isdigit$2145,c
  4038  0024FE  D000               	goto	l2199
  4039  002500                     l2199:
  4040  002500  C002  F001         	movff	_isdigit$2145,??_isdigit
  4041  002504  3001               	rrcf	??_isdigit,w,c
  4042  002506  0012               	return	
  4043  002508  0012               	return		;funcret
  4044  00250A                     __end_of_isdigit:
  4045                           	opt stack 0
  4046                           tosu	equ	0xFFF
  4047                           tosh	equ	0xFFE
  4048                           tosl	equ	0xFFD
  4049                           pclath	equ	0xFFA
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postinc1	equ	0xFE6
  4059                           postdec1	equ	0xFE5
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function ___wmul *****************
  4070 ;; Defined at:
  4071 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  multiplier      2    0[COMRAM] unsigned int 
  4074 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;  product         2    4[COMRAM] unsigned int 
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  2    0[COMRAM] unsigned int 
  4079 ;; Registers used:
  4080 ;;		wreg, status,2, status,0, prodl, prodh
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4089 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4090 ;;Total ram usage:        6 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_sprintf
  4096 ;;		_atoi
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text20
  4101  002478                     __ptext20:
  4102                           	opt stack 0
  4103  002478                     ___wmul:
  4104                           	opt stack 27
  4105                           
  4106                           ;incstack = 0
  4107  002478  5001               	movf	___wmul@multiplier,w,c
  4108  00247A  0203               	mulwf	___wmul@multiplicand,c
  4109  00247C  CFF3 F005          	movff	prodl,___wmul@product
  4110  002480  CFF4 F006          	movff	prodh,___wmul@product+1
  4111  002484  5001               	movf	___wmul@multiplier,w,c
  4112  002486  0204               	mulwf	___wmul@multiplicand+1,c
  4113  002488  50F3               	movf	prodl,w,c
  4114  00248A  2606               	addwf	___wmul@product+1,f,c
  4115  00248C  5002               	movf	___wmul@multiplier+1,w,c
  4116  00248E  0203               	mulwf	___wmul@multiplicand,c
  4117  002490  50F3               	movf	prodl,w,c
  4118  002492  2606               	addwf	___wmul@product+1,f,c
  4119  002494  C005  F001         	movff	___wmul@product,?___wmul
  4120  002498  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4121  00249C  0012               	return	
  4122  00249E  0012               	return		;funcret
  4123  0024A0                     __end_of___wmul:
  4124                           	opt stack 0
  4125                           tosu	equ	0xFFF
  4126                           tosh	equ	0xFFE
  4127                           tosl	equ	0xFFD
  4128                           pclath	equ	0xFFA
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postinc1	equ	0xFE6
  4138                           postdec1	equ	0xFE5
  4139                           fsr1h	equ	0xFE2
  4140                           fsr1l	equ	0xFE1
  4141                           indf2	equ	0xFDF
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function ___lwmod *****************
  4149 ;; Defined at:
  4150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  dividend        2    7[COMRAM] unsigned int 
  4153 ;;  divisor         2    9[COMRAM] unsigned int 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  counter         1   11[COMRAM] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  2    7[COMRAM] unsigned int 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4168 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4169 ;;Total ram usage:        5 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_sprintf
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text21
  4179  0022AE                     __ptext21:
  4180                           	opt stack 0
  4181  0022AE                     ___lwmod:
  4182                           	opt stack 27
  4183                           
  4184                           ;incstack = 0
  4185  0022AE  500A               	movf	___lwmod@divisor,w,c
  4186  0022B0  100B               	iorwf	___lwmod@divisor+1,w,c
  4187  0022B2  B4D8               	btfsc	status,2,c
  4188  0022B4  D01D               	goto	l1068
  4189  0022B6  0E01               	movlw	1
  4190  0022B8  6E0C               	movwf	___lwmod@counter,c
  4191  0022BA  D005               	goto	l2237
  4192  0022BC                     l2235:
  4193  0022BC  90D8               	bcf	status,0,c
  4194  0022BE  360A               	rlcf	___lwmod@divisor,f,c
  4195  0022C0  360B               	rlcf	___lwmod@divisor+1,f,c
  4196  0022C2  2A0C               	incf	___lwmod@counter,f,c
  4197  0022C4  D000               	goto	l2237
  4198  0022C6                     l2237:
  4199  0022C6  BE0B               	btfsc	___lwmod@divisor+1,7,c
  4200  0022C8  D002               	goto	l2239
  4201  0022CA  D7F8               	goto	l2235
  4202  0022CC  D000               	goto	l2239
  4203  0022CE                     l2239:
  4204  0022CE  500A               	movf	___lwmod@divisor,w,c
  4205  0022D0  5C08               	subwf	___lwmod@dividend,w,c
  4206  0022D2  500B               	movf	___lwmod@divisor+1,w,c
  4207  0022D4  5809               	subwfb	___lwmod@dividend+1,w,c
  4208  0022D6  A0D8               	btfss	status,0,c
  4209  0022D8  D005               	goto	l2243
  4210  0022DA  500A               	movf	___lwmod@divisor,w,c
  4211  0022DC  5E08               	subwf	___lwmod@dividend,f,c
  4212  0022DE  500B               	movf	___lwmod@divisor+1,w,c
  4213  0022E0  5A09               	subwfb	___lwmod@dividend+1,f,c
  4214  0022E2  D000               	goto	l2243
  4215  0022E4                     l2243:
  4216  0022E4  90D8               	bcf	status,0,c
  4217  0022E6  320B               	rrcf	___lwmod@divisor+1,f,c
  4218  0022E8  320A               	rrcf	___lwmod@divisor,f,c
  4219  0022EA  2E0C               	decfsz	___lwmod@counter,f,c
  4220  0022EC  D7F0               	goto	l2239
  4221  0022EE  D000               	goto	l1068
  4222  0022F0                     l1068:
  4223  0022F0  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4224  0022F4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4225  0022F8  0012               	return		;funcret
  4226  0022FA                     __end_of___lwmod:
  4227                           	opt stack 0
  4228                           tosu	equ	0xFFF
  4229                           tosh	equ	0xFFE
  4230                           tosl	equ	0xFFD
  4231                           pclath	equ	0xFFA
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           prodh	equ	0xFF4
  4237                           prodl	equ	0xFF3
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function ___lwdiv *****************
  4252 ;; Defined at:
  4253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  dividend        2    0[COMRAM] unsigned int 
  4256 ;;  divisor         2    2[COMRAM] unsigned int 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  quotient        2    4[COMRAM] unsigned int 
  4259 ;;  counter         1    6[COMRAM] unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  2    0[COMRAM] unsigned int 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4270 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4272 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4273 ;;Total ram usage:        7 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_sprintf
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text22
  4283  0021FE                     __ptext22:
  4284                           	opt stack 0
  4285  0021FE                     ___lwdiv:
  4286                           	opt stack 27
  4287                           
  4288                           ;incstack = 0
  4289  0021FE  0E00               	movlw	0
  4290  002200  6E06               	movwf	___lwdiv@quotient+1,c
  4291  002202  0E00               	movlw	0
  4292  002204  6E05               	movwf	___lwdiv@quotient,c
  4293  002206  5003               	movf	___lwdiv@divisor,w,c
  4294  002208  1004               	iorwf	___lwdiv@divisor+1,w,c
  4295  00220A  B4D8               	btfsc	status,2,c
  4296  00220C  D021               	goto	l1058
  4297  00220E  0E01               	movlw	1
  4298  002210  6E07               	movwf	___lwdiv@counter,c
  4299  002212  D005               	goto	l2217
  4300  002214                     l2215:
  4301  002214  90D8               	bcf	status,0,c
  4302  002216  3603               	rlcf	___lwdiv@divisor,f,c
  4303  002218  3604               	rlcf	___lwdiv@divisor+1,f,c
  4304  00221A  2A07               	incf	___lwdiv@counter,f,c
  4305  00221C  D000               	goto	l2217
  4306  00221E                     l2217:
  4307  00221E  BE04               	btfsc	___lwdiv@divisor+1,7,c
  4308  002220  D002               	goto	l2219
  4309  002222  D7F8               	goto	l2215
  4310  002224  D000               	goto	l2219
  4311  002226                     l2219:
  4312  002226  90D8               	bcf	status,0,c
  4313  002228  3605               	rlcf	___lwdiv@quotient,f,c
  4314  00222A  3606               	rlcf	___lwdiv@quotient+1,f,c
  4315  00222C  5003               	movf	___lwdiv@divisor,w,c
  4316  00222E  5C01               	subwf	___lwdiv@dividend,w,c
  4317  002230  5004               	movf	___lwdiv@divisor+1,w,c
  4318  002232  5802               	subwfb	___lwdiv@dividend+1,w,c
  4319  002234  A0D8               	btfss	status,0,c
  4320  002236  D006               	goto	l2227
  4321  002238  5003               	movf	___lwdiv@divisor,w,c
  4322  00223A  5E01               	subwf	___lwdiv@dividend,f,c
  4323  00223C  5004               	movf	___lwdiv@divisor+1,w,c
  4324  00223E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4325  002240  8005               	bsf	___lwdiv@quotient,0,c
  4326  002242  D000               	goto	l2227
  4327  002244                     l2227:
  4328  002244  90D8               	bcf	status,0,c
  4329  002246  3204               	rrcf	___lwdiv@divisor+1,f,c
  4330  002248  3203               	rrcf	___lwdiv@divisor,f,c
  4331  00224A  2E07               	decfsz	___lwdiv@counter,f,c
  4332  00224C  D7EC               	goto	l2219
  4333  00224E  D000               	goto	l1058
  4334  002250                     l1058:
  4335  002250  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4336  002254  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4337  002258  0012               	return		;funcret
  4338  00225A                     __end_of___lwdiv:
  4339                           	opt stack 0
  4340                           tosu	equ	0xFFF
  4341                           tosh	equ	0xFFE
  4342                           tosl	equ	0xFFD
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           postinc1	equ	0xFE6
  4353                           postdec1	equ	0xFE5
  4354                           fsr1h	equ	0xFE2
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           postdec2	equ	0xFDD
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function _lcd_putrs *****************
  4364 ;; Defined at:
  4365 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  4368 ;;		 -> STR_22(13), STR_19(8), STR_17(10), STR_16(18), 
  4369 ;;		 -> STR_14(11), STR_13(17), ingresar_password@clear(16), day(3), 
  4370 ;;		 -> STR_9(2), STR_8(2), STR_7(2), STR_6(2), 
  4371 ;;		 -> STR_5(2), STR_4(2), STR_3(2), buffer2(20), 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;		None               void
  4376 ;; Registers used:
  4377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4383 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4386 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;Total ram usage:        2 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    4
  4390 ;; This function calls:
  4391 ;;		_lcd_putc
  4392 ;; This function is called by:
  4393 ;;		_imprimir_tecla
  4394 ;;		_guardar_tecla_presionada
  4395 ;;		_leer_teclado
  4396 ;;		_caratula
  4397 ;;		_ingresar_password
  4398 ;;		_mostrar_actualizacion_dia
  4399 ;;		_main
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           	psect	text23
  4404  00225A                     __ptext23:
  4405                           	opt stack 0
  4406  00225A                     _lcd_putrs:
  4407                           	opt stack 25
  4408                           
  4409                           ;unmc_lcd_216.c: 223: while(*ptr){
  4410                           
  4411                           ;incstack = 0
  4412  00225A  D015               	goto	l2479
  4413  00225C                     l2475:
  4414                           
  4415                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  4416  00225C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  4417  002260  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  4418  002264  6AF8               	clrf	tblptru,c
  4419  002266  0E0E               	movlw	(high __ramtop+-1)
  4420  002268  64F7               	cpfsgt	tblptrh,c
  4421  00226A  D003               	bra	u1937
  4422  00226C  0008               	tblrd		*
  4423  00226E  50F5               	movf	tablat,w,c
  4424  002270  D005               	bra	u1930
  4425  002272                     u1937:
  4426  002272  CFF6 FFE9          	movff	tblptrl,fsr0l
  4427  002276  CFF7 FFEA          	movff	tblptrh,fsr0h
  4428  00227A  50EF               	movf	indf0,w,c
  4429  00227C                     u1930:
  4430  00227C  EC7D  F011         	call	_lcd_putc
  4431  002280  4A09               	infsnz	lcd_putrs@ptr,f,c
  4432  002282  2A0A               	incf	lcd_putrs@ptr+1,f,c
  4433  002284  D000               	goto	l2479
  4434  002286                     l2479:
  4435  002286  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  4436  00228A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  4437  00228E  6AF8               	clrf	tblptru,c
  4438  002290  0E0E               	movlw	(high __ramtop+-1)
  4439  002292  64F7               	cpfsgt	tblptrh,c
  4440  002294  D003               	bra	u1947
  4441  002296  0008               	tblrd		*
  4442  002298  50F5               	movf	tablat,w,c
  4443  00229A  D005               	bra	u1940
  4444  00229C                     u1947:
  4445  00229C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4446  0022A0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4447  0022A4  50EF               	movf	indf0,w,c
  4448  0022A6                     u1940:
  4449  0022A6  0900               	iorlw	0
  4450  0022A8  A4D8               	btfss	status,2,c
  4451  0022AA  D7D8               	goto	l2475
  4452  0022AC  0012               	return		;funcret
  4453  0022AE                     __end_of_lcd_putrs:
  4454                           	opt stack 0
  4455                           tosu	equ	0xFFF
  4456                           tosh	equ	0xFFE
  4457                           tosl	equ	0xFFD
  4458                           pclath	equ	0xFFA
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           indf0	equ	0xFEF
  4466                           postinc0	equ	0xFEE
  4467                           fsr0h	equ	0xFEA
  4468                           fsr0l	equ	0xFE9
  4469                           wreg	equ	0xFE8
  4470                           postinc1	equ	0xFE6
  4471                           postdec1	equ	0xFE5
  4472                           fsr1h	equ	0xFE2
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _lcd_putc *****************
  4482 ;; Defined at:
  4483 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  c               1    wreg     unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  c               1    7[COMRAM] unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;		None               void
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;Total ram usage:        1 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    3
  4504 ;; This function calls:
  4505 ;;		_lcd_gotoxy
  4506 ;;		_lcd_send_byte
  4507 ;; This function is called by:
  4508 ;;		_lcd_putrs
  4509 ;;		_lcd_puts
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text24
  4514  0022FA                     __ptext24:
  4515                           	opt stack 0
  4516  0022FA                     _lcd_putc:
  4517                           	opt stack 25
  4518                           
  4519                           ;incstack = 0
  4520                           ;lcd_putc@c stored from wreg
  4521  0022FA  6E08               	movwf	lcd_putc@c,c
  4522                           
  4523                           ;unmc_lcd_216.c: 173: switch(c){
  4524  0022FC  D018               	goto	l2189
  4525  0022FE                     l2179:
  4526                           
  4527                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  4528  0022FE  0E01               	movlw	1
  4529  002300  6E03               	movwf	lcd_send_byte@n,c
  4530  002302  0E00               	movlw	0
  4531  002304  EC0D  F012         	call	_lcd_send_byte
  4532                           
  4533                           ;unmc_lcd_216.c: 176: break;
  4534  002308  0012               	return	
  4535  00230A                     l2181:
  4536                           
  4537                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  4538  00230A  0E02               	movlw	2
  4539  00230C  6E05               	movwf	lcd_gotoxy@y,c
  4540  00230E  0E01               	movlw	1
  4541  002310  EC62  F012         	call	_lcd_gotoxy
  4542                           
  4543                           ;unmc_lcd_216.c: 179: break;
  4544  002314  0012               	return	
  4545  002316                     l2183:
  4546                           
  4547                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  4548  002316  0E10               	movlw	16
  4549  002318  6E03               	movwf	lcd_send_byte@n,c
  4550  00231A  0E00               	movlw	0
  4551  00231C  EC0D  F012         	call	_lcd_send_byte
  4552                           
  4553                           ;unmc_lcd_216.c: 182: break;
  4554  002320  0012               	return	
  4555  002322                     l2185:
  4556                           
  4557                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  4558  002322  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  4559  002326  0E01               	movlw	1
  4560  002328  EC0D  F012         	call	_lcd_send_byte
  4561                           
  4562                           ;unmc_lcd_216.c: 186: }
  4563                           
  4564                           ;unmc_lcd_216.c: 185: break;
  4565  00232C  0012               	return	
  4566  00232E                     l2189:
  4567  00232E  5008               	movf	lcd_putc@c,w,c
  4568                           
  4569                           ; Switch size 1, requested type "space"
  4570                           ; Number of cases is 3, Range of values is 8 to 12
  4571                           ; switch strategies available:
  4572                           ; Name         Instructions Cycles
  4573                           ; simple_byte           10     6 (average)
  4574                           ;	Chosen strategy is simple_byte
  4575  002330  0A08               	xorlw	8	; case 8
  4576  002332  B4D8               	btfsc	status,2,c
  4577  002334  D7F0               	goto	l2183
  4578  002336  0A02               	xorlw	2	; case 10
  4579  002338  B4D8               	btfsc	status,2,c
  4580  00233A  D7E7               	goto	l2181
  4581  00233C  0A06               	xorlw	6	; case 12
  4582  00233E  B4D8               	btfsc	status,2,c
  4583  002340  D7DE               	goto	l2179
  4584  002342  D7EF               	goto	l2185
  4585  002344  0012               	return		;funcret
  4586  002346                     __end_of_lcd_putc:
  4587                           	opt stack 0
  4588                           tosu	equ	0xFFF
  4589                           tosh	equ	0xFFE
  4590                           tosl	equ	0xFFD
  4591                           pclath	equ	0xFFA
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           indf0	equ	0xFEF
  4599                           postinc0	equ	0xFEE
  4600                           fsr0h	equ	0xFEA
  4601                           fsr0l	equ	0xFE9
  4602                           wreg	equ	0xFE8
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _lcd_gotoxy *****************
  4615 ;; Defined at:
  4616 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  x               1    wreg     unsigned char 
  4619 ;;  y               1    4[COMRAM] unsigned char 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  x               1    5[COMRAM] unsigned char 
  4622 ;;  address         1    6[COMRAM] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;		None               void
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4632 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4635 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4636 ;;Total ram usage:        3 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    2
  4639 ;; This function calls:
  4640 ;;		_lcd_send_byte
  4641 ;; This function is called by:
  4642 ;;		_caratula
  4643 ;;		_ingresar_password
  4644 ;;		_mostrar_actualizacion_dia
  4645 ;;		_main
  4646 ;;		_lcd_putc
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text25
  4651  0024C4                     __ptext25:
  4652                           	opt stack 0
  4653  0024C4                     _lcd_gotoxy:
  4654                           	opt stack 25
  4655                           
  4656                           ;incstack = 0
  4657                           ;lcd_gotoxy@x stored from wreg
  4658  0024C4  6E06               	movwf	lcd_gotoxy@x,c
  4659                           
  4660                           ;unmc_lcd_216.c: 159: int8 address;
  4661                           ;unmc_lcd_216.c: 161: if(y != 1)
  4662  0024C6  0405               	decf	lcd_gotoxy@y,w,c
  4663  0024C8  B4D8               	btfsc	status,2,c
  4664  0024CA  D002               	goto	l2163
  4665                           
  4666                           ;unmc_lcd_216.c: 162: address = 0x40;
  4667  0024CC  0E40               	movlw	64
  4668  0024CE  D001               	goto	L1
  4669  0024D0                     l2163:
  4670                           
  4671                           ;unmc_lcd_216.c: 163: else
  4672                           ;unmc_lcd_216.c: 164: address=0;
  4673  0024D0  0E00               	movlw	0
  4674  0024D2                     L1:
  4675  0024D2  6E07               	movwf	lcd_gotoxy@address,c
  4676  0024D4  D000               	goto	l2165
  4677  0024D6                     l2165:
  4678                           
  4679                           ;unmc_lcd_216.c: 166: address += x-1;
  4680  0024D6  0406               	decf	lcd_gotoxy@x,w,c
  4681  0024D8  2607               	addwf	lcd_gotoxy@address,f,c
  4682                           
  4683                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  4684  0024DA  5007               	movf	lcd_gotoxy@address,w,c
  4685  0024DC  0980               	iorlw	128
  4686  0024DE  6E03               	movwf	lcd_send_byte@n,c
  4687  0024E0  0E00               	movlw	0
  4688  0024E2  EC0D  F012         	call	_lcd_send_byte
  4689  0024E6  0012               	return		;funcret
  4690  0024E8                     __end_of_lcd_gotoxy:
  4691                           	opt stack 0
  4692                           tosu	equ	0xFFF
  4693                           tosh	equ	0xFFE
  4694                           tosl	equ	0xFFD
  4695                           pclath	equ	0xFFA
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           indf0	equ	0xFEF
  4703                           postinc0	equ	0xFEE
  4704                           fsr0h	equ	0xFEA
  4705                           fsr0l	equ	0xFE9
  4706                           wreg	equ	0xFE8
  4707                           postinc1	equ	0xFE6
  4708                           postdec1	equ	0xFE5
  4709                           fsr1h	equ	0xFE2
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _Setup *****************
  4719 ;; Defined at:
  4720 ;;		line 55 in file "main.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;		None               void
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    3
  4741 ;; This function calls:
  4742 ;;		_Write_RTC
  4743 ;;		_lcd_comand
  4744 ;;		_lcd_init
  4745 ;; This function is called by:
  4746 ;;		_main
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text26
  4751  002346                     __ptext26:
  4752                           	opt stack 0
  4753  002346                     _Setup:
  4754                           	opt stack 27
  4755                           
  4756                           ;main.c: 57: OSCTUNEbits.INTSRC=1;
  4757                           
  4758                           ;incstack = 0
  4759  002346  8E9B               	bsf	3995,7,c	;volatile
  4760                           
  4761                           ;main.c: 58: OSCTUNEbits.PLLEN=0;
  4762  002348  9C9B               	bcf	3995,6,c	;volatile
  4763                           
  4764                           ;main.c: 59: OSCCONbits.IRCF0=1;
  4765  00234A  88D3               	bsf	4051,4,c	;volatile
  4766                           
  4767                           ;main.c: 60: OSCCONbits.IRCF1=1;
  4768  00234C  8AD3               	bsf	4051,5,c	;volatile
  4769                           
  4770                           ;main.c: 61: OSCCONbits.IRCF2=1;
  4771  00234E  8CD3               	bsf	4051,6,c	;volatile
  4772                           
  4773                           ;main.c: 62: OSCCONbits.SCS0=0;
  4774  002350  90D3               	bcf	4051,0,c	;volatile
  4775                           
  4776                           ;main.c: 63: OSCCONbits.SCS1=0;
  4777  002352  92D3               	bcf	4051,1,c	;volatile
  4778                           
  4779                           ;main.c: 64: TRISA = 0b11110000;
  4780  002354  0EF0               	movlw	240
  4781  002356  6E92               	movwf	3986,c	;volatile
  4782                           
  4783                           ;main.c: 65: TRISB = 0;
  4784  002358  0E00               	movlw	0
  4785  00235A  6E93               	movwf	3987,c	;volatile
  4786                           
  4787                           ;main.c: 66: TRISC = 0b00000111;
  4788  00235C  0E07               	movlw	7
  4789  00235E  6E94               	movwf	3988,c	;volatile
  4790                           
  4791                           ;main.c: 70: ANCON0=0b11111111;
  4792  002360  010F               	movlb	15	; () banked
  4793  002362  6948               	setf	72,b	;volatile
  4794                           
  4795                           ; BSR set to: 15
  4796                           ;main.c: 72: ANCON1=0b11111111;
  4797  002364  010F               	movlb	15	; () banked
  4798  002366  6949               	setf	73,b	;volatile
  4799                           
  4800                           ;main.c: 73: ADCON0=0b00101101;
  4801  002368  0E2D               	movlw	45
  4802  00236A  6EC2               	movwf	4034,c	;volatile
  4803                           
  4804                           ;main.c: 74: ADCON1=0b00010000;
  4805  00236C  0E10               	movlw	16
  4806  00236E  6EC1               	movwf	4033,c	;volatile
  4807                           
  4808                           ; BSR set to: 15
  4809                           ;main.c: 75: RTCCFGbits.RTCEN=1;
  4810  002370  010F               	movlb	15	; () banked
  4811  002372  8F3F               	bsf	63,7,b	;volatile
  4812                           
  4813                           ; BSR set to: 15
  4814                           ;main.c: 76: RTCCFGbits.RTCWREN=1;
  4815  002374  010F               	movlb	15	; () banked
  4816  002376  8B3F               	bsf	63,5,b	;volatile
  4817                           
  4818                           ; BSR set to: 15
  4819                           ;main.c: 77: T1CONbits.T1OSCEN=1;
  4820  002378  86CD               	bsf	4045,3,c	;volatile
  4821                           
  4822                           ; BSR set to: 15
  4823                           ;main.c: 78: Write_RTC();
  4824  00237A  ECFF  F008         	call	_Write_RTC	;wreg free
  4825                           
  4826                           ;main.c: 79: lcd_init();
  4827  00237E  ECFD  F00E         	call	_lcd_init	;wreg free
  4828                           
  4829                           ;main.c: 80: lcd_comand(0b00001100);
  4830  002382  0E0C               	movlw	12
  4831  002384  ECAF  F012         	call	_lcd_comand
  4832                           
  4833                           ;main.c: 81: LATBbits.LATB1 = 1;;
  4834  002388  828A               	bsf	3978,1,c	;volatile
  4835                           
  4836                           ;main.c: 82: LATBbits.LATB0 = 1;;
  4837  00238A  808A               	bsf	3978,0,c	;volatile
  4838  00238C  0012               	return		;funcret
  4839  00238E                     __end_of_Setup:
  4840                           	opt stack 0
  4841                           tosu	equ	0xFFF
  4842                           tosh	equ	0xFFE
  4843                           tosl	equ	0xFFD
  4844                           pclath	equ	0xFFA
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           prodh	equ	0xFF4
  4850                           prodl	equ	0xFF3
  4851                           indf0	equ	0xFEF
  4852                           postinc0	equ	0xFEE
  4853                           fsr0h	equ	0xFEA
  4854                           fsr0l	equ	0xFE9
  4855                           wreg	equ	0xFE8
  4856                           postinc1	equ	0xFE6
  4857                           postdec1	equ	0xFE5
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function _lcd_init *****************
  4868 ;; Defined at:
  4869 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  i               1    4[COMRAM] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;		None               void
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;Total ram usage:        1 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    2
  4890 ;; This function calls:
  4891 ;;		_Delay1KTCYx
  4892 ;;		_lcd_send_byte
  4893 ;;		_lcd_send_nibble
  4894 ;; This function is called by:
  4895 ;;		_Setup
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text27
  4900  001DFA                     __ptext27:
  4901                           	opt stack 0
  4902  001DFA                     _lcd_init:
  4903                           	opt stack 27
  4904                           
  4905                           ;unmc_lcd_216.c: 120: int8 i;
  4906                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  4907                           
  4908                           ;incstack = 0
  4909  001DFA  9693               	bcf	3987,3,c	;volatile
  4910                           
  4911                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  4912  001DFC  9493               	bcf	3987,2,c	;volatile
  4913                           
  4914                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  4915  001DFE  968A               	bcf	3978,3,c	;volatile
  4916                           
  4917                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  4918  001E00  948A               	bcf	3978,2,c	;volatile
  4919                           
  4920                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  4921  001E02  9893               	bcf	3987,4,c	;volatile
  4922                           
  4923                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  4924  001E04  9A93               	bcf	3987,5,c	;volatile
  4925                           
  4926                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  4927  001E06  9C93               	bcf	3987,6,c	;volatile
  4928                           
  4929                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  4930  001E08  9E93               	bcf	3987,7,c	;volatile
  4931                           
  4932                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  4933  001E0A  0E0A               	movlw	10
  4934  001E0C  EC94  F012         	call	_Delay1KTCYx
  4935                           
  4936                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  4937  001E10  0E0A               	movlw	10
  4938  001E12  EC94  F012         	call	_Delay1KTCYx
  4939                           
  4940                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  4941  001E16  0E0A               	movlw	10
  4942  001E18  EC94  F012         	call	_Delay1KTCYx
  4943                           
  4944                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  4945  001E1C  0E00               	movlw	0
  4946  001E1E  6E05               	movwf	lcd_init@i,c
  4947  001E20                     l2765:
  4948  001E20  0E02               	movlw	2
  4949  001E22  6405               	cpfsgt	lcd_init@i,c
  4950  001E24  D001               	goto	l2769
  4951  001E26  D008               	goto	l2775
  4952  001E28                     l2769:
  4953                           
  4954                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  4955  001E28  0E03               	movlw	3
  4956  001E2A  ECB5  F00F         	call	_lcd_send_nibble
  4957                           
  4958                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  4959  001E2E  0E0A               	movlw	10
  4960  001E30  EC94  F012         	call	_Delay1KTCYx
  4961  001E34  2A05               	incf	lcd_init@i,f,c
  4962  001E36  D7F4               	goto	l2765
  4963  001E38                     l2775:
  4964                           
  4965                           ;unmc_lcd_216.c: 146: }
  4966                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  4967  001E38  0E02               	movlw	2
  4968  001E3A  ECB5  F00F         	call	_lcd_send_nibble
  4969                           
  4970                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  4971  001E3E  0E00               	movlw	0
  4972  001E40  6E05               	movwf	lcd_init@i,c
  4973  001E42  0E03               	movlw	3
  4974  001E44  6405               	cpfsgt	lcd_init@i,c
  4975  001E46  D002               	goto	l2783
  4976  001E48  0012               	return	
  4977  001E4A  0012               	return	
  4978  001E4C                     l2783:
  4979                           
  4980                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  4981  001E4C  5005               	movf	lcd_init@i,w,c
  4982  001E4E  0D01               	mullw	1
  4983  001E50  0E0B               	movlw	low _LCD_INIT_STRING
  4984  001E52  24F3               	addwf	prodl,w,c
  4985  001E54  6EF6               	movwf	tblptrl,c
  4986  001E56  0E0F               	movlw	high _LCD_INIT_STRING
  4987  001E58  20F4               	addwfc	prodh,w,c
  4988  001E5A  6EF7               	movwf	tblptrh,c
  4989  001E5C                     	if	0	;There are less than 3 active tblptr bytes
  4990  001E5C                     	endif
  4991  001E5C  0008               	tblrd		*
  4992  001E5E  CFF5 F003          	movff	tablat,lcd_send_byte@n
  4993  001E62  0E00               	movlw	0
  4994  001E64  EC0D  F012         	call	_lcd_send_byte
  4995                           
  4996                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  4997  001E68  0E0A               	movlw	10
  4998  001E6A  EC94  F012         	call	_Delay1KTCYx
  4999  001E6E  2A05               	incf	lcd_init@i,f,c
  5000  001E70  0E03               	movlw	3
  5001  001E72  6405               	cpfsgt	lcd_init@i,c
  5002  001E74  D7EB               	goto	l2783
  5003  001E76  0012               	return	
  5004  001E78  0012               	return		;funcret
  5005  001E7A                     __end_of_lcd_init:
  5006                           	opt stack 0
  5007                           tosu	equ	0xFFF
  5008                           tosh	equ	0xFFE
  5009                           tosl	equ	0xFFD
  5010                           pclath	equ	0xFFA
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           indf0	equ	0xFEF
  5018                           postinc0	equ	0xFEE
  5019                           fsr0h	equ	0xFEA
  5020                           fsr0l	equ	0xFE9
  5021                           wreg	equ	0xFE8
  5022                           postinc1	equ	0xFE6
  5023                           postdec1	equ	0xFE5
  5024                           fsr1h	equ	0xFE2
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _Delay1KTCYx *****************
  5034 ;; Defined at:
  5035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  unit            1    wreg     unsigned char 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  unit            1    0[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;		None               void
  5042 ;; Registers used:
  5043 ;;		wreg
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5053 ;;Total ram usage:        1 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_lcd_init
  5059 ;;		_DelayPORXLCD
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text28
  5064  002528                     __ptext28:
  5065                           	opt stack 0
  5066  002528                     _Delay1KTCYx:
  5067                           	opt stack 28
  5068                           
  5069                           ;incstack = 0
  5070                           ;Delay1KTCYx@unit stored from wreg
  5071  002528  6E01               	movwf	Delay1KTCYx@unit,c
  5072  00252A  0EFA               	movlw	250
  5073  00252C                     u2777:
  5074  00252C  F000               	nop	
  5075  00252E  2EE8               	decfsz	wreg,f,c
  5076  002530  D7FD               	goto	u2777
  5077  002532  2E01               	decfsz	Delay1KTCYx@unit,f,c
  5078  002534  D7FA               	goto	l2635
  5079  002536  0012               	return	
  5080  002538  0012               	return		;funcret
  5081  00253A                     __end_of_Delay1KTCYx:
  5082                           	opt stack 0
  5083                           tosu	equ	0xFFF
  5084                           tosh	equ	0xFFE
  5085                           tosl	equ	0xFFD
  5086                           pclath	equ	0xFFA
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           prodh	equ	0xFF4
  5092                           prodl	equ	0xFF3
  5093                           indf0	equ	0xFEF
  5094                           postinc0	equ	0xFEE
  5095                           fsr0h	equ	0xFEA
  5096                           fsr0l	equ	0xFE9
  5097                           wreg	equ	0xFE8
  5098                           postinc1	equ	0xFE6
  5099                           postdec1	equ	0xFE5
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           indf2	equ	0xFDF
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109 ;; *************** function _lcd_comand *****************
  5110 ;; Defined at:
  5111 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  d               1    wreg     unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  d               1    4[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;		None               void
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5128 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5129 ;;Total ram usage:        1 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    2
  5132 ;; This function calls:
  5133 ;;		_lcd_send_byte
  5134 ;; This function is called by:
  5135 ;;		_caratula
  5136 ;;		_Setup
  5137 ;;		_ingresar_password
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           	psect	text29
  5142  00255E                     __ptext29:
  5143                           	opt stack 0
  5144  00255E                     _lcd_comand:
  5145                           	opt stack 27
  5146                           
  5147                           ;incstack = 0
  5148                           ;lcd_comand@d stored from wreg
  5149  00255E  6E05               	movwf	lcd_comand@d,c
  5150                           
  5151                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  5152  002560  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  5153  002564  0E00               	movlw	0
  5154  002566  EC0D  F012         	call	_lcd_send_byte
  5155  00256A  0012               	return		;funcret
  5156  00256C                     __end_of_lcd_comand:
  5157                           	opt stack 0
  5158                           tosu	equ	0xFFF
  5159                           tosh	equ	0xFFE
  5160                           tosl	equ	0xFFD
  5161                           pclath	equ	0xFFA
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           indf0	equ	0xFEF
  5169                           postinc0	equ	0xFEE
  5170                           fsr0h	equ	0xFEA
  5171                           fsr0l	equ	0xFE9
  5172                           wreg	equ	0xFE8
  5173                           postinc1	equ	0xFE6
  5174                           postdec1	equ	0xFE5
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _lcd_send_byte *****************
  5185 ;; Defined at:
  5186 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  address         1    wreg     unsigned char 
  5189 ;;  n               1    2[COMRAM] unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  address         1    3[COMRAM] unsigned char 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;		None               void
  5194 ;; Registers used:
  5195 ;;		wreg, status,2, status,0, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5205 ;;Total ram usage:        2 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    1
  5208 ;; This function calls:
  5209 ;;		_Delay100TCYx
  5210 ;;		_lcd_send_nibble
  5211 ;; This function is called by:
  5212 ;;		_lcd_init
  5213 ;;		_lcd_gotoxy
  5214 ;;		_lcd_putc
  5215 ;;		_lcd_comand
  5216 ;;		_lcd_setcursor_vb
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text30
  5221  00241A                     __ptext30:
  5222                           	opt stack 0
  5223  00241A                     _lcd_send_byte:
  5224                           	opt stack 26
  5225                           
  5226                           ;incstack = 0
  5227                           ;lcd_send_byte@address stored from wreg
  5228  00241A  6E04               	movwf	lcd_send_byte@address,c
  5229                           
  5230                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  5231  00241C  968A               	bcf	3978,3,c	;volatile
  5232                           
  5233                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  5234  00241E  0E02               	movlw	2
  5235  002420  EC9D  F012         	call	_Delay100TCYx
  5236                           
  5237                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  5238  002424  9893               	bcf	3987,4,c	;volatile
  5239                           
  5240                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  5241  002426  9A93               	bcf	3987,5,c	;volatile
  5242                           
  5243                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  5244  002428  9C93               	bcf	3987,6,c	;volatile
  5245                           
  5246                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  5247  00242A  9E93               	bcf	3987,7,c	;volatile
  5248                           
  5249                           ;unmc_lcd_216.c: 101: if(address)
  5250  00242C  5004               	movf	lcd_send_byte@address,w,c
  5251  00242E  B4D8               	btfsc	status,2,c
  5252  002430  D002               	goto	l320
  5253                           
  5254                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  5255  002432  868A               	bsf	3978,3,c	;volatile
  5256  002434  D001               	goto	l321
  5257  002436                     l320:
  5258                           
  5259                           ;unmc_lcd_216.c: 103: else
  5260                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  5261  002436  968A               	bcf	3978,3,c	;volatile
  5262  002438                     l321:
  5263                           
  5264                           ;unmc_lcd_216.c: 106: __nop();
  5265  002438  F000               	nop	
  5266                           
  5267                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  5268  00243A  3803               	swapf	lcd_send_byte@n,w,c
  5269  00243C  0B0F               	andlw	15
  5270  00243E  ECB5  F00F         	call	_lcd_send_nibble
  5271                           
  5272                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  5273  002442  5003               	movf	lcd_send_byte@n,w,c
  5274  002444  0B0F               	andlw	15
  5275  002446  ECB5  F00F         	call	_lcd_send_nibble
  5276  00244A  0012               	return		;funcret
  5277  00244C                     __end_of_lcd_send_byte:
  5278                           	opt stack 0
  5279                           tosu	equ	0xFFF
  5280                           tosh	equ	0xFFE
  5281                           tosl	equ	0xFFD
  5282                           pclath	equ	0xFFA
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodh	equ	0xFF4
  5288                           prodl	equ	0xFF3
  5289                           indf0	equ	0xFEF
  5290                           postinc0	equ	0xFEE
  5291                           fsr0h	equ	0xFEA
  5292                           fsr0l	equ	0xFE9
  5293                           wreg	equ	0xFE8
  5294                           postinc1	equ	0xFE6
  5295                           postdec1	equ	0xFE5
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           postdec2	equ	0xFDD
  5301                           fsr2h	equ	0xFDA
  5302                           fsr2l	equ	0xFD9
  5303                           status	equ	0xFD8
  5304                           
  5305 ;; *************** function _lcd_send_nibble *****************
  5306 ;; Defined at:
  5307 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  nibble          1    wreg     unsigned char 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;  nibble          1    1[COMRAM] unsigned char 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;		None               void
  5314 ;; Registers used:
  5315 ;;		wreg, status,2, status,0
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5324 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5325 ;;Total ram usage:        2 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; This function calls:
  5328 ;;		Nothing
  5329 ;; This function is called by:
  5330 ;;		_lcd_send_byte
  5331 ;;		_lcd_init
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text31
  5336  001F6A                     __ptext31:
  5337                           	opt stack 0
  5338  001F6A                     _lcd_send_nibble:
  5339                           	opt stack 26
  5340                           
  5341                           ;incstack = 0
  5342                           ;lcd_send_nibble@nibble stored from wreg
  5343  001F6A  6E02               	movwf	lcd_send_nibble@nibble,c
  5344                           
  5345                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  5346  001F6C  A002               	btfss	lcd_send_nibble@nibble,0,c
  5347  001F6E  D003               	goto	u1370
  5348  001F70  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5349  001F72  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5350  001F74  D001               	goto	u1388
  5351  001F76                     u1370:
  5352  001F76  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5353  001F78                     u1388:
  5354  001F78  3A01               	swapf	??_lcd_send_nibble,f,c
  5355  001F7A  508A               	movf	3978,w,c	;volatile
  5356  001F7C  1801               	xorwf	??_lcd_send_nibble,w,c
  5357  001F7E  0BEF               	andlw	-17
  5358  001F80  1801               	xorwf	??_lcd_send_nibble,w,c
  5359  001F82  6E8A               	movwf	3978,c	;volatile
  5360                           
  5361                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  5362  001F84  A202               	btfss	lcd_send_nibble@nibble,1,c
  5363  001F86  D003               	goto	u1390
  5364  001F88  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5365  001F8A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5366  001F8C  D001               	goto	u1408
  5367  001F8E                     u1390:
  5368  001F8E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5369  001F90                     u1408:
  5370  001F90  3A01               	swapf	??_lcd_send_nibble,f,c
  5371  001F92  4601               	rlncf	??_lcd_send_nibble,f,c
  5372  001F94  508A               	movf	3978,w,c	;volatile
  5373  001F96  1801               	xorwf	??_lcd_send_nibble,w,c
  5374  001F98  0BDF               	andlw	-33
  5375  001F9A  1801               	xorwf	??_lcd_send_nibble,w,c
  5376  001F9C  6E8A               	movwf	3978,c	;volatile
  5377                           
  5378                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  5379  001F9E  A402               	btfss	lcd_send_nibble@nibble,2,c
  5380  001FA0  D003               	goto	u1410
  5381  001FA2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5382  001FA4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5383  001FA6  D001               	goto	u1428
  5384  001FA8                     u1410:
  5385  001FA8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5386  001FAA                     u1428:
  5387  001FAA  3A01               	swapf	??_lcd_send_nibble,f,c
  5388  001FAC  4601               	rlncf	??_lcd_send_nibble,f,c
  5389  001FAE  4601               	rlncf	??_lcd_send_nibble,f,c
  5390  001FB0  508A               	movf	3978,w,c	;volatile
  5391  001FB2  1801               	xorwf	??_lcd_send_nibble,w,c
  5392  001FB4  0BBF               	andlw	-65
  5393  001FB6  1801               	xorwf	??_lcd_send_nibble,w,c
  5394  001FB8  6E8A               	movwf	3978,c	;volatile
  5395                           
  5396                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  5397  001FBA  A602               	btfss	lcd_send_nibble@nibble,3,c
  5398  001FBC  D003               	goto	u1430
  5399  001FBE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5400  001FC0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5401  001FC2  D001               	goto	u1448
  5402  001FC4                     u1430:
  5403  001FC4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5404  001FC6                     u1448:
  5405  001FC6  3201               	rrcf	??_lcd_send_nibble,f,c
  5406  001FC8  3201               	rrcf	??_lcd_send_nibble,f,c
  5407  001FCA  508A               	movf	3978,w,c	;volatile
  5408  001FCC  1801               	xorwf	??_lcd_send_nibble,w,c
  5409  001FCE  0B7F               	andlw	-129
  5410  001FD0  1801               	xorwf	??_lcd_send_nibble,w,c
  5411  001FD2  6E8A               	movwf	3978,c	;volatile
  5412                           
  5413                           ;unmc_lcd_216.c: 32: __nop();
  5414  001FD4  F000               	nop	
  5415                           
  5416                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  5417  001FD6  848A               	bsf	3978,2,c	;volatile
  5418                           
  5419                           ;unmc_lcd_216.c: 34: __nop();__nop();
  5420  001FD8  F000               	nop	
  5421  001FDA  F000               	nop	
  5422                           
  5423                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  5424  001FDC  948A               	bcf	3978,2,c	;volatile
  5425  001FDE  0012               	return		;funcret
  5426  001FE0                     __end_of_lcd_send_nibble:
  5427                           	opt stack 0
  5428                           tosu	equ	0xFFF
  5429                           tosh	equ	0xFFE
  5430                           tosl	equ	0xFFD
  5431                           pclath	equ	0xFFA
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           indf0	equ	0xFEF
  5439                           postinc0	equ	0xFEE
  5440                           fsr0h	equ	0xFEA
  5441                           fsr0l	equ	0xFE9
  5442                           wreg	equ	0xFE8
  5443                           postinc1	equ	0xFE6
  5444                           postdec1	equ	0xFE5
  5445                           fsr1h	equ	0xFE2
  5446                           fsr1l	equ	0xFE1
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _Delay100TCYx *****************
  5455 ;; Defined at:
  5456 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  unit            1    wreg     unsigned char 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;  unit            1    0[COMRAM] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		wreg
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5473 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5474 ;;Total ram usage:        1 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; This function calls:
  5477 ;;		Nothing
  5478 ;; This function is called by:
  5479 ;;		_lcd_send_byte
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text32
  5484  00253A                     __ptext32:
  5485                           	opt stack 0
  5486  00253A                     _Delay100TCYx:
  5487                           	opt stack 26
  5488                           
  5489                           ;incstack = 0
  5490                           ;Delay100TCYx@unit stored from wreg
  5491  00253A  6E01               	movwf	Delay100TCYx@unit,c
  5492  00253C  0E21               	movlw	33
  5493  00253E                     u2787:
  5494  00253E  2EE8               	decfsz	wreg,f,c
  5495  002540  D7FE               	goto	u2787
  5496  002542  F000               	nop	
  5497  002544  2E01               	decfsz	Delay100TCYx@unit,f,c
  5498  002546  D7FA               	goto	l2137
  5499  002548  0012               	return	
  5500  00254A  0012               	return		;funcret
  5501  00254C                     __end_of_Delay100TCYx:
  5502                           	opt stack 0
  5503                           tosu	equ	0xFFF
  5504                           tosh	equ	0xFFE
  5505                           tosl	equ	0xFFD
  5506                           pclath	equ	0xFFA
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           indf0	equ	0xFEF
  5514                           postinc0	equ	0xFEE
  5515                           fsr0h	equ	0xFEA
  5516                           fsr0l	equ	0xFE9
  5517                           wreg	equ	0xFE8
  5518                           postinc1	equ	0xFE6
  5519                           postdec1	equ	0xFE5
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _Write_RTC *****************
  5530 ;; Defined at:
  5531 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    2
  5552 ;; This function calls:
  5553 ;;		_RtccWrOn
  5554 ;;		_RtccWriteDate
  5555 ;;		_RtccWriteTime
  5556 ;;		___awdiv
  5557 ;; This function is called by:
  5558 ;;		_cambiar_dia
  5559 ;;		_Setup
  5560 ;;		_cambiar_mes
  5561 ;;		_cambiar_anio
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text33
  5566  0011FE                     __ptext33:
  5567                           	opt stack 0
  5568  0011FE                     _Write_RTC:
  5569                           	opt stack 25
  5570                           
  5571                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  5572                           
  5573                           ;incstack = 0
  5574  0011FE  ECA6  F012         	call	_RtccWrOn	;wreg free
  5575                           
  5576                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  5577  001202  80A3               	bsf	4003,0,c	;volatile
  5578                           
  5579                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  5580  001204  C092  F001         	movff	_segundo,___awdiv@dividend
  5581  001208  C093  F002         	movff	_segundo+1,___awdiv@dividend+1
  5582  00120C  0E00               	movlw	0
  5583  00120E  6E04               	movwf	___awdiv@divisor+1,c
  5584  001210  0E0A               	movlw	10
  5585  001212  6E03               	movwf	___awdiv@divisor,c
  5586  001214  EC6B  F00E         	call	___awdiv	;wreg free
  5587  001218  5001               	movf	?___awdiv,w,c
  5588  00121A  0100               	movlb	0	; () banked
  5589  00121C  6FBE               	movwf	_segundo_d& (0+255),b
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  5593  00121E  0100               	movlb	0	; () banked
  5594  001220  51BE               	movf	_segundo_d& (0+255),w,b
  5595  001222  0D0A               	mullw	10
  5596  001224  50F3               	movf	prodl,w,c
  5597  001226  0800               	sublw	0
  5598  001228  0100               	movlb	0	; () banked
  5599  00122A  2592               	addwf	_segundo& (0+255),w,b
  5600  00122C  0100               	movlb	0	; () banked
  5601  00122E  6FBF               	movwf	_segundo_u& (0+255),b
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  5605  001230  0100               	movlb	0	; () banked
  5606  001232  51BE               	movf	_segundo_d& (0+255),w,b
  5607  001234  0D10               	mullw	16
  5608  001236  50F3               	movf	prodl,w,c
  5609  001238  0100               	movlb	0	; () banked
  5610  00123A  25BF               	addwf	_segundo_u& (0+255),w,b
  5611  00123C  6E4C               	movwf	_RtccTime+1,c
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  5615  00123E  C05D  F001         	movff	_minuto,___awdiv@dividend
  5616  001242  C05E  F002         	movff	_minuto+1,___awdiv@dividend+1
  5617  001246  0E00               	movlw	0
  5618  001248  6E04               	movwf	___awdiv@divisor+1,c
  5619  00124A  0E0A               	movlw	10
  5620  00124C  6E03               	movwf	___awdiv@divisor,c
  5621  00124E  EC6B  F00E         	call	___awdiv	;wreg free
  5622  001252  5001               	movf	?___awdiv,w,c
  5623  001254  0100               	movlb	0	; () banked
  5624  001256  6FBC               	movwf	_minuto_d& (0+255),b
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  5628  001258  0100               	movlb	0	; () banked
  5629  00125A  51BC               	movf	_minuto_d& (0+255),w,b
  5630  00125C  0D0A               	mullw	10
  5631  00125E  50F3               	movf	prodl,w,c
  5632  001260  0800               	sublw	0
  5633  001262  245D               	addwf	_minuto,w,c
  5634  001264  0100               	movlb	0	; () banked
  5635  001266  6FBD               	movwf	_minuto_u& (0+255),b
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  5639  001268  0100               	movlb	0	; () banked
  5640  00126A  51BC               	movf	_minuto_d& (0+255),w,b
  5641  00126C  0D10               	mullw	16
  5642  00126E  50F3               	movf	prodl,w,c
  5643  001270  0100               	movlb	0	; () banked
  5644  001272  25BD               	addwf	_minuto_u& (0+255),w,b
  5645  001274  6E4D               	movwf	_RtccTime+2,c
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  5649  001276  C059  F001         	movff	_hora,___awdiv@dividend
  5650  00127A  C05A  F002         	movff	_hora+1,___awdiv@dividend+1
  5651  00127E  0E00               	movlw	0
  5652  001280  6E04               	movwf	___awdiv@divisor+1,c
  5653  001282  0E0A               	movlw	10
  5654  001284  6E03               	movwf	___awdiv@divisor,c
  5655  001286  EC6B  F00E         	call	___awdiv	;wreg free
  5656  00128A  5001               	movf	?___awdiv,w,c
  5657  00128C  0100               	movlb	0	; () banked
  5658  00128E  6FB8               	movwf	_hora_d& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  5662  001290  0100               	movlb	0	; () banked
  5663  001292  51B8               	movf	_hora_d& (0+255),w,b
  5664  001294  0D0A               	mullw	10
  5665  001296  50F3               	movf	prodl,w,c
  5666  001298  0800               	sublw	0
  5667  00129A  2459               	addwf	_hora,w,c
  5668  00129C  0100               	movlb	0	; () banked
  5669  00129E  6FB9               	movwf	_hora_u& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  5673  0012A0  0100               	movlb	0	; () banked
  5674  0012A2  51B8               	movf	_hora_d& (0+255),w,b
  5675  0012A4  0D10               	mullw	16
  5676  0012A6  50F3               	movf	prodl,w,c
  5677  0012A8  0100               	movlb	0	; () banked
  5678  0012AA  25B9               	addwf	_hora_u& (0+255),w,b
  5679  0012AC  6E4E               	movwf	_RtccTime+3,c
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  5683  0012AE  C055  F001         	movff	_anio,___awdiv@dividend
  5684  0012B2  C056  F002         	movff	_anio+1,___awdiv@dividend+1
  5685  0012B6  0E00               	movlw	0
  5686  0012B8  6E04               	movwf	___awdiv@divisor+1,c
  5687  0012BA  0E0A               	movlw	10
  5688  0012BC  6E03               	movwf	___awdiv@divisor,c
  5689  0012BE  EC6B  F00E         	call	___awdiv	;wreg free
  5690  0012C2  5001               	movf	?___awdiv,w,c
  5691  0012C4  0100               	movlb	0	; () banked
  5692  0012C6  6FB3               	movwf	_anio_d& (0+255),b
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  5696  0012C8  0100               	movlb	0	; () banked
  5697  0012CA  51B3               	movf	_anio_d& (0+255),w,b
  5698  0012CC  0D0A               	mullw	10
  5699  0012CE  50F3               	movf	prodl,w,c
  5700  0012D0  0800               	sublw	0
  5701  0012D2  2455               	addwf	_anio,w,c
  5702  0012D4  0100               	movlb	0	; () banked
  5703  0012D6  6FB4               	movwf	_anio_u& (0+255),b
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  5707  0012D8  0100               	movlb	0	; () banked
  5708  0012DA  51B3               	movf	_anio_d& (0+255),w,b
  5709  0012DC  0D10               	mullw	16
  5710  0012DE  50F3               	movf	prodl,w,c
  5711  0012E0  0100               	movlb	0	; () banked
  5712  0012E2  25B4               	addwf	_anio_u& (0+255),w,b
  5713  0012E4  6E4A               	movwf	_RtccDate+3,c
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  5717  0012E6  C05B  F001         	movff	_mes,___awdiv@dividend
  5718  0012EA  C05C  F002         	movff	_mes+1,___awdiv@dividend+1
  5719  0012EE  0E00               	movlw	0
  5720  0012F0  6E04               	movwf	___awdiv@divisor+1,c
  5721  0012F2  0E0A               	movlw	10
  5722  0012F4  6E03               	movwf	___awdiv@divisor,c
  5723  0012F6  EC6B  F00E         	call	___awdiv	;wreg free
  5724  0012FA  5001               	movf	?___awdiv,w,c
  5725  0012FC  0100               	movlb	0	; () banked
  5726  0012FE  6FBA               	movwf	_mes_d& (0+255),b
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  5730  001300  0100               	movlb	0	; () banked
  5731  001302  51BA               	movf	_mes_d& (0+255),w,b
  5732  001304  0D0A               	mullw	10
  5733  001306  50F3               	movf	prodl,w,c
  5734  001308  0800               	sublw	0
  5735  00130A  245B               	addwf	_mes,w,c
  5736  00130C  0100               	movlb	0	; () banked
  5737  00130E  6FBB               	movwf	_mes_u& (0+255),b
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  5741  001310  0100               	movlb	0	; () banked
  5742  001312  51BA               	movf	_mes_d& (0+255),w,b
  5743  001314  0D10               	mullw	16
  5744  001316  50F3               	movf	prodl,w,c
  5745  001318  0100               	movlb	0	; () banked
  5746  00131A  25BB               	addwf	_mes_u& (0+255),w,b
  5747  00131C  6E49               	movwf	_RtccDate+2,c
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  5751  00131E  C057  F001         	movff	_dia,___awdiv@dividend
  5752  001322  C058  F002         	movff	_dia+1,___awdiv@dividend+1
  5753  001326  0E00               	movlw	0
  5754  001328  6E04               	movwf	___awdiv@divisor+1,c
  5755  00132A  0E0A               	movlw	10
  5756  00132C  6E03               	movwf	___awdiv@divisor,c
  5757  00132E  EC6B  F00E         	call	___awdiv	;wreg free
  5758  001332  5001               	movf	?___awdiv,w,c
  5759  001334  0100               	movlb	0	; () banked
  5760  001336  6FB6               	movwf	_fecha_d& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  5764  001338  0100               	movlb	0	; () banked
  5765  00133A  51B6               	movf	_fecha_d& (0+255),w,b
  5766  00133C  0D0A               	mullw	10
  5767  00133E  50F3               	movf	prodl,w,c
  5768  001340  0800               	sublw	0
  5769  001342  2457               	addwf	_dia,w,c
  5770  001344  0100               	movlb	0	; () banked
  5771  001346  6FB7               	movwf	_fecha_u& (0+255),b
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  5775  001348  0100               	movlb	0	; () banked
  5776  00134A  51B6               	movf	_fecha_d& (0+255),w,b
  5777  00134C  0D10               	mullw	16
  5778  00134E  50F3               	movf	prodl,w,c
  5779  001350  0100               	movlb	0	; () banked
  5780  001352  25B7               	addwf	_fecha_u& (0+255),w,b
  5781  001354  6E48               	movwf	_RtccDate+1,c
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  5785  001356  C0CA  F0B5         	movff	_diasem,_dia_semana
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  5789  00135A  C0CA  F047         	movff	_diasem,_RtccDate
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  5793  00135E  0E4B               	movlw	low _RtccTime
  5794  001360  6E01               	movwf	RtccWriteTime@pTm,c
  5795  001362  0E00               	movlw	high _RtccTime
  5796  001364  6E02               	movwf	RtccWriteTime@pTm+1,c
  5797  001366  0E01               	movlw	1
  5798  001368  6E03               	movwf	RtccWriteTime@di,c
  5799  00136A  EC15  F00C         	call	_RtccWriteTime	;wreg free
  5800                           
  5801                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  5802  00136E  0E47               	movlw	low _RtccDate
  5803  001370  6E01               	movwf	RtccWriteDate@pDt,c
  5804  001372  0E00               	movlw	high _RtccDate
  5805  001374  6E02               	movwf	RtccWriteDate@pDt+1,c
  5806  001376  0E01               	movlw	1
  5807  001378  6E03               	movwf	RtccWriteDate@di,c
  5808  00137A  ECC2  F009         	call	_RtccWriteDate	;wreg free
  5809                           
  5810                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  5811  00137E  010F               	movlb	15	; () banked
  5812  001380  8F3F               	bsf	63,7,b	;volatile
  5813                           
  5814                           ; BSR set to: 15
  5815  001382  0012               	return		;funcret
  5816  001384                     __end_of_Write_RTC:
  5817                           	opt stack 0
  5818                           tosu	equ	0xFFF
  5819                           tosh	equ	0xFFE
  5820                           tosl	equ	0xFFD
  5821                           pclath	equ	0xFFA
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           indf0	equ	0xFEF
  5829                           postinc0	equ	0xFEE
  5830                           fsr0h	equ	0xFEA
  5831                           fsr0l	equ	0xFE9
  5832                           wreg	equ	0xFE8
  5833                           postinc1	equ	0xFE6
  5834                           postdec1	equ	0xFE5
  5835                           fsr1h	equ	0xFE2
  5836                           fsr1l	equ	0xFE1
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function ___awdiv *****************
  5845 ;; Defined at:
  5846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  dividend        2    0[COMRAM] int 
  5849 ;;  divisor         2    2[COMRAM] int 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  quotient        2    6[COMRAM] int 
  5852 ;;  sign            1    5[COMRAM] unsigned char 
  5853 ;;  counter         1    4[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2    0[COMRAM] int 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5864 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;Total ram usage:        8 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_Write_RTC
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text34
  5877  001CD6                     __ptext34:
  5878                           	opt stack 0
  5879  001CD6                     ___awdiv:
  5880                           	opt stack 26
  5881                           
  5882                           ; BSR set to: 15
  5883                           ;incstack = 0
  5884  001CD6  0E00               	movlw	0
  5885  001CD8  6E06               	movwf	___awdiv@sign,c
  5886  001CDA  AE04               	btfss	___awdiv@divisor+1,7,c
  5887  001CDC  D007               	goto	l2517
  5888  001CDE  6C03               	negf	___awdiv@divisor,c
  5889  001CE0  1E04               	comf	___awdiv@divisor+1,f,c
  5890  001CE2  B0D8               	btfsc	status,0,c
  5891  001CE4  2A04               	incf	___awdiv@divisor+1,f,c
  5892  001CE6  0E01               	movlw	1
  5893  001CE8  6E06               	movwf	___awdiv@sign,c
  5894  001CEA  D000               	goto	l2517
  5895  001CEC                     l2517:
  5896  001CEC  AE02               	btfss	___awdiv@dividend+1,7,c
  5897  001CEE  D007               	goto	l2523
  5898  001CF0  6C01               	negf	___awdiv@dividend,c
  5899  001CF2  1E02               	comf	___awdiv@dividend+1,f,c
  5900  001CF4  B0D8               	btfsc	status,0,c
  5901  001CF6  2A02               	incf	___awdiv@dividend+1,f,c
  5902  001CF8  0E01               	movlw	1
  5903  001CFA  1A06               	xorwf	___awdiv@sign,f,c
  5904  001CFC  D000               	goto	l2523
  5905  001CFE                     l2523:
  5906  001CFE  0E00               	movlw	0
  5907  001D00  6E08               	movwf	___awdiv@quotient+1,c
  5908  001D02  0E00               	movlw	0
  5909  001D04  6E07               	movwf	___awdiv@quotient,c
  5910  001D06  5003               	movf	___awdiv@divisor,w,c
  5911  001D08  1004               	iorwf	___awdiv@divisor+1,w,c
  5912  001D0A  B4D8               	btfsc	status,2,c
  5913  001D0C  D021               	goto	l2545
  5914  001D0E  0E01               	movlw	1
  5915  001D10  6E05               	movwf	___awdiv@counter,c
  5916  001D12  D005               	goto	l2531
  5917  001D14                     l2529:
  5918  001D14  90D8               	bcf	status,0,c
  5919  001D16  3603               	rlcf	___awdiv@divisor,f,c
  5920  001D18  3604               	rlcf	___awdiv@divisor+1,f,c
  5921  001D1A  2A05               	incf	___awdiv@counter,f,c
  5922  001D1C  D000               	goto	l2531
  5923  001D1E                     l2531:
  5924  001D1E  BE04               	btfsc	___awdiv@divisor+1,7,c
  5925  001D20  D002               	goto	l2533
  5926  001D22  D7F8               	goto	l2529
  5927  001D24  D000               	goto	l2533
  5928  001D26                     l2533:
  5929  001D26  90D8               	bcf	status,0,c
  5930  001D28  3607               	rlcf	___awdiv@quotient,f,c
  5931  001D2A  3608               	rlcf	___awdiv@quotient+1,f,c
  5932  001D2C  5003               	movf	___awdiv@divisor,w,c
  5933  001D2E  5C01               	subwf	___awdiv@dividend,w,c
  5934  001D30  5004               	movf	___awdiv@divisor+1,w,c
  5935  001D32  5802               	subwfb	___awdiv@dividend+1,w,c
  5936  001D34  A0D8               	btfss	status,0,c
  5937  001D36  D006               	goto	l2541
  5938  001D38  5003               	movf	___awdiv@divisor,w,c
  5939  001D3A  5E01               	subwf	___awdiv@dividend,f,c
  5940  001D3C  5004               	movf	___awdiv@divisor+1,w,c
  5941  001D3E  5A02               	subwfb	___awdiv@dividend+1,f,c
  5942  001D40  8007               	bsf	___awdiv@quotient,0,c
  5943  001D42  D000               	goto	l2541
  5944  001D44                     l2541:
  5945  001D44  90D8               	bcf	status,0,c
  5946  001D46  3204               	rrcf	___awdiv@divisor+1,f,c
  5947  001D48  3203               	rrcf	___awdiv@divisor,f,c
  5948  001D4A  2E05               	decfsz	___awdiv@counter,f,c
  5949  001D4C  D7EC               	goto	l2533
  5950  001D4E  D000               	goto	l2545
  5951  001D50                     l2545:
  5952  001D50  5006               	movf	___awdiv@sign,w,c
  5953  001D52  B4D8               	btfsc	status,2,c
  5954  001D54  D005               	goto	l2549
  5955  001D56  6C07               	negf	___awdiv@quotient,c
  5956  001D58  1E08               	comf	___awdiv@quotient+1,f,c
  5957  001D5A  B0D8               	btfsc	status,0,c
  5958  001D5C  2A08               	incf	___awdiv@quotient+1,f,c
  5959  001D5E  D000               	goto	l2549
  5960  001D60                     l2549:
  5961  001D60  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5962  001D64  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5963  001D68  0012               	return	
  5964  001D6A  0012               	return		;funcret
  5965  001D6C                     __end_of___awdiv:
  5966                           	opt stack 0
  5967                           tosu	equ	0xFFF
  5968                           tosh	equ	0xFFE
  5969                           tosl	equ	0xFFD
  5970                           pclath	equ	0xFFA
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           indf0	equ	0xFEF
  5978                           postinc0	equ	0xFEE
  5979                           fsr0h	equ	0xFEA
  5980                           fsr0l	equ	0xFE9
  5981                           wreg	equ	0xFE8
  5982                           postinc1	equ	0xFE6
  5983                           postdec1	equ	0xFE5
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _RtccWriteTime *****************
  5994 ;; Defined at:
  5995 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  pTm             2    0[COMRAM] PTR const struct .
  5998 ;;		 -> RtccTime(4), 
  5999 ;;  di              1    2[COMRAM] enum E7121
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  tempHourWDay    2    9[COMRAM] struct .
  6002 ;;  tempMinSec      2    7[COMRAM] struct .
  6003 ;;  wasWrEn         1    6[COMRAM] enum E7121
  6004 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6005 ;;  wasOn           1    4[COMRAM] enum E7121
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      enum E7337
  6008 ;; Registers used:
  6009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6016 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6017 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6018 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6019 ;;Total ram usage:       11 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    1
  6022 ;; This function calls:
  6023 ;;		_RtccWrOn
  6024 ;; This function is called by:
  6025 ;;		_Write_RTC
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text35
  6030  00182A                     __ptext35:
  6031                           	opt stack 0
  6032  00182A                     _RtccWriteTime:
  6033                           	opt stack 25
  6034                           
  6035                           ;incstack = 0
  6036  00182A  0E00               	movlw	0
  6037  00182C  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6038  00182E  EE20 F002          	lfsr	2,2
  6039  001832  5001               	movf	RtccWriteTime@pTm,w,c
  6040  001834  26D9               	addwf	fsr2l,f,c
  6041  001836  5002               	movf	RtccWriteTime@pTm+1,w,c
  6042  001838  22DA               	addwfc	fsr2h,f,c
  6043  00183A  0E5A               	movlw	90
  6044  00183C  60DF               	cpfslt	indf2,c
  6045  00183E  0012               	return	
  6046  001840  EE20 F001          	lfsr	2,1
  6047  001844  5001               	movf	RtccWriteTime@pTm,w,c
  6048  001846  26D9               	addwf	fsr2l,f,c
  6049  001848  5002               	movf	RtccWriteTime@pTm+1,w,c
  6050  00184A  22DA               	addwfc	fsr2h,f,c
  6051  00184C  0E5A               	movlw	90
  6052  00184E  60DF               	cpfslt	indf2,c
  6053  001850  0012               	return	
  6054  001852  EE20 F003          	lfsr	2,3
  6055  001856  5001               	movf	RtccWriteTime@pTm,w,c
  6056  001858  26D9               	addwf	fsr2l,f,c
  6057  00185A  5002               	movf	RtccWriteTime@pTm+1,w,c
  6058  00185C  22DA               	addwfc	fsr2h,f,c
  6059  00185E  0E24               	movlw	36
  6060  001860  64DF               	cpfsgt	indf2,c
  6061  001862  D002               	goto	l2255
  6062  001864  0012               	return	
  6063                           
  6064                           ;	Return value of _RtccWriteTime is never used
  6065  001866  0012               	return	
  6066  001868                     l2255:
  6067  001868  EE20 F002          	lfsr	2,2
  6068  00186C  5001               	movf	RtccWriteTime@pTm,w,c
  6069  00186E  26D9               	addwf	fsr2l,f,c
  6070  001870  5002               	movf	RtccWriteTime@pTm+1,w,c
  6071  001872  22DA               	addwfc	fsr2h,f,c
  6072  001874  50DF               	movf	indf2,w,c
  6073  001876  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  6074  001878  EE20 F001          	lfsr	2,1
  6075  00187C  5001               	movf	RtccWriteTime@pTm,w,c
  6076  00187E  26D9               	addwf	fsr2l,f,c
  6077  001880  5002               	movf	RtccWriteTime@pTm+1,w,c
  6078  001882  22DA               	addwfc	fsr2h,f,c
  6079  001884  50DF               	movf	indf2,w,c
  6080  001886  6E08               	movwf	RtccWriteTime@tempMinSec,c
  6081  001888  5003               	movf	RtccWriteTime@di,w,c
  6082  00188A  B4D8               	btfsc	status,2,c
  6083  00188C  D002               	goto	l2261
  6084  00188E  9CF2               	bcf	intcon,6,c	;volatile
  6085  001890  D000               	goto	l2261
  6086  001892                     l2261:
  6087  001892  0E00               	movlw	0
  6088  001894  BB3F               	btfsc	63,5,b	;volatile
  6089  001896  0E01               	movlw	1
  6090  001898  6E07               	movwf	RtccWriteTime@wasWrEn,c
  6091  00189A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6092  00189C  A4D8               	btfss	status,2,c
  6093  00189E  D003               	goto	l2265
  6094  0018A0  ECA6  F012         	call	_RtccWrOn	;wreg free
  6095  0018A4  D000               	goto	l2265
  6096  0018A6                     l2265:
  6097  0018A6  0E00               	movlw	0
  6098  0018A8  BF3F               	btfsc	63,7,b	;volatile
  6099  0018AA  0E01               	movlw	1
  6100  0018AC  6E05               	movwf	RtccWriteTime@wasOn,c
  6101  0018AE  5005               	movf	RtccWriteTime@wasOn,w,c
  6102  0018B0  B4D8               	btfsc	status,2,c
  6103  0018B2  D007               	goto	l2271
  6104  0018B4  0E00               	movlw	0
  6105  0018B6  BE91               	btfsc	3985,7,c	;volatile
  6106  0018B8  0E01               	movlw	1
  6107  0018BA  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6108  0018BC  010F               	movlb	15	; () banked
  6109  0018BE  9F3F               	bcf	63,7,b	;volatile
  6110  0018C0  D000               	goto	l2271
  6111  0018C2                     l2271:
  6112  0018C2  0EFC               	movlw	252
  6113  0018C4  010F               	movlb	15	; () banked
  6114  0018C6  173F               	andwf	63,f,b	;volatile
  6115  0018C8  010F               	movlb	15	; () banked
  6116  0018CA  813F               	bsf	63,0,b	;volatile
  6117                           
  6118                           ; BSR set to: 15
  6119  0018CC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  6120                           
  6121                           ; BSR set to: 15
  6122  0018D0  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  6123                           
  6124                           ; BSR set to: 15
  6125  0018D4  EE20 F003          	lfsr	2,3
  6126  0018D8  5001               	movf	RtccWriteTime@pTm,w,c
  6127  0018DA  26D9               	addwf	fsr2l,f,c
  6128  0018DC  5002               	movf	RtccWriteTime@pTm+1,w,c
  6129  0018DE  22DA               	addwfc	fsr2h,f,c
  6130  0018E0  50DF               	movf	indf2,w,c
  6131  0018E2  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  6132                           
  6133                           ; BSR set to: 15
  6134  0018E4  0EFC               	movlw	252
  6135  0018E6  010F               	movlb	15	; () banked
  6136  0018E8  173F               	andwf	63,f,b	;volatile
  6137                           
  6138                           ; BSR set to: 15
  6139  0018EA  010F               	movlb	15	; () banked
  6140  0018EC  813F               	bsf	63,0,b	;volatile
  6141                           
  6142                           ; BSR set to: 15
  6143  0018EE  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  6144                           
  6145                           ; BSR set to: 15
  6146  0018F2  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  6147                           
  6148                           ; BSR set to: 15
  6149  0018F6  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  6150                           
  6151                           ; BSR set to: 15
  6152  0018FA  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  6153                           
  6154                           ; BSR set to: 15
  6155  0018FE  5005               	movf	RtccWriteTime@wasOn,w,c
  6156  001900  B4D8               	btfsc	status,2,c
  6157  001902  D00D               	goto	l2303
  6158                           
  6159                           ; BSR set to: 15
  6160  001904  010F               	movlb	15	; () banked
  6161  001906  8F3F               	bsf	63,7,b	;volatile
  6162                           
  6163                           ; BSR set to: 15
  6164  001908  5006               	movf	RtccWriteTime@wasAlrm,w,c
  6165  00190A  B4D8               	btfsc	status,2,c
  6166  00190C  D002               	goto	l2299
  6167                           
  6168                           ; BSR set to: 15
  6169  00190E  8E91               	bsf	3985,7,c	;volatile
  6170  001910  D000               	goto	l2299
  6171  001912                     l2299:
  6172                           
  6173                           ; BSR set to: 15
  6174  001912  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6175  001914  B4D8               	btfsc	status,2,c
  6176  001916  D009               	goto	l2307
  6177                           
  6178                           ; BSR set to: 15
  6179  001918  ECA6  F012         	call	_RtccWrOn	;wreg free
  6180  00191C  D006               	goto	l2307
  6181  00191E                     l2303:
  6182  00191E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6183  001920  A4D8               	btfss	status,2,c
  6184  001922  D003               	goto	l2307
  6185  001924  010F               	movlb	15	; () banked
  6186  001926  9B3F               	bcf	63,5,b	;volatile
  6187                           
  6188                           ; BSR set to: 15
  6189  001928  D000               	goto	l2307
  6190  00192A                     l2307:
  6191  00192A  5003               	movf	RtccWriteTime@di,w,c
  6192  00192C  B4D8               	btfsc	status,2,c
  6193  00192E  0012               	return	
  6194  001930  8CF2               	bsf	intcon,6,c	;volatile
  6195  001932  0012               	return	
  6196                           
  6197                           ;	Return value of _RtccWriteTime is never used
  6198  001934  0012               	return		;funcret
  6199  001936                     __end_of_RtccWriteTime:
  6200                           	opt stack 0
  6201                           tosu	equ	0xFFF
  6202                           tosh	equ	0xFFE
  6203                           tosl	equ	0xFFD
  6204                           pclath	equ	0xFFA
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           intcon	equ	0xFF2
  6212                           indf0	equ	0xFEF
  6213                           postinc0	equ	0xFEE
  6214                           fsr0h	equ	0xFEA
  6215                           fsr0l	equ	0xFE9
  6216                           wreg	equ	0xFE8
  6217                           postinc1	equ	0xFE6
  6218                           postdec1	equ	0xFE5
  6219                           fsr1h	equ	0xFE2
  6220                           fsr1l	equ	0xFE1
  6221                           indf2	equ	0xFDF
  6222                           postinc2	equ	0xFDE
  6223                           postdec2	equ	0xFDD
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _RtccWriteDate *****************
  6229 ;; Defined at:
  6230 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  pDt             2    0[COMRAM] PTR const struct .
  6233 ;;		 -> RtccDate(4), 
  6234 ;;  di              1    2[COMRAM] enum E7121
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  tempHourWDay    2   11[COMRAM] struct .
  6237 ;;  tempDayMonth    2    9[COMRAM] struct .
  6238 ;;  tempYear        2    6[COMRAM] struct .
  6239 ;;  wasWrEn         1    8[COMRAM] enum E7121
  6240 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6241 ;;  wasOn           1    4[COMRAM] enum E7121
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      enum E7337
  6244 ;; Registers used:
  6245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6251 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6252 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6254 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6255 ;;Total ram usage:       13 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    1
  6258 ;; This function calls:
  6259 ;;		_RtccWrOn
  6260 ;; This function is called by:
  6261 ;;		_Write_RTC
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text36
  6266  001384                     __ptext36:
  6267                           	opt stack 0
  6268  001384                     _RtccWriteDate:
  6269                           	opt stack 25
  6270                           
  6271                           ;incstack = 0
  6272  001384  0E00               	movlw	0
  6273  001386  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6274  001388  EE20 F002          	lfsr	2,2
  6275  00138C  5001               	movf	RtccWriteDate@pDt,w,c
  6276  00138E  26D9               	addwf	fsr2l,f,c
  6277  001390  5002               	movf	RtccWriteDate@pDt+1,w,c
  6278  001392  22DA               	addwfc	fsr2h,f,c
  6279  001394  0E13               	movlw	19
  6280  001396  60DF               	cpfslt	indf2,c
  6281  001398  0012               	return	
  6282  00139A  EE20 F002          	lfsr	2,2
  6283  00139E  5001               	movf	RtccWriteDate@pDt,w,c
  6284  0013A0  26D9               	addwf	fsr2l,f,c
  6285  0013A2  5002               	movf	RtccWriteDate@pDt+1,w,c
  6286  0013A4  22DA               	addwfc	fsr2h,f,c
  6287  0013A6  50DF               	movf	indf2,w,c
  6288  0013A8  B4D8               	btfsc	status,2,c
  6289  0013AA  0012               	return	
  6290  0013AC  EE20 F001          	lfsr	2,1
  6291  0013B0  5001               	movf	RtccWriteDate@pDt,w,c
  6292  0013B2  26D9               	addwf	fsr2l,f,c
  6293  0013B4  5002               	movf	RtccWriteDate@pDt+1,w,c
  6294  0013B6  22DA               	addwfc	fsr2h,f,c
  6295  0013B8  0E32               	movlw	50
  6296  0013BA  60DF               	cpfslt	indf2,c
  6297  0013BC  0012               	return	
  6298  0013BE  EE20 F001          	lfsr	2,1
  6299  0013C2  5001               	movf	RtccWriteDate@pDt,w,c
  6300  0013C4  26D9               	addwf	fsr2l,f,c
  6301  0013C6  5002               	movf	RtccWriteDate@pDt+1,w,c
  6302  0013C8  22DA               	addwfc	fsr2h,f,c
  6303  0013CA  50DF               	movf	indf2,w,c
  6304  0013CC  B4D8               	btfsc	status,2,c
  6305  0013CE  0012               	return	
  6306  0013D0  EE20 F003          	lfsr	2,3
  6307  0013D4  5001               	movf	RtccWriteDate@pDt,w,c
  6308  0013D6  26D9               	addwf	fsr2l,f,c
  6309  0013D8  5002               	movf	RtccWriteDate@pDt+1,w,c
  6310  0013DA  22DA               	addwfc	fsr2h,f,c
  6311  0013DC  0E99               	movlw	153
  6312  0013DE  64DF               	cpfsgt	indf2,c
  6313  0013E0  D002               	goto	l2323
  6314  0013E2  0012               	return	
  6315                           
  6316                           ;	Return value of _RtccWriteDate is never used
  6317  0013E4  0012               	return	
  6318  0013E6                     l2323:
  6319  0013E6  EE20 F003          	lfsr	2,3
  6320  0013EA  5001               	movf	RtccWriteDate@pDt,w,c
  6321  0013EC  26D9               	addwf	fsr2l,f,c
  6322  0013EE  5002               	movf	RtccWriteDate@pDt+1,w,c
  6323  0013F0  22DA               	addwfc	fsr2h,f,c
  6324  0013F2  50DF               	movf	indf2,w,c
  6325  0013F4  6E07               	movwf	RtccWriteDate@tempYear,c
  6326  0013F6  EE20 F001          	lfsr	2,1
  6327  0013FA  5001               	movf	RtccWriteDate@pDt,w,c
  6328  0013FC  26D9               	addwf	fsr2l,f,c
  6329  0013FE  5002               	movf	RtccWriteDate@pDt+1,w,c
  6330  001400  22DA               	addwfc	fsr2h,f,c
  6331  001402  50DF               	movf	indf2,w,c
  6332  001404  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  6333  001406  EE20 F002          	lfsr	2,2
  6334  00140A  5001               	movf	RtccWriteDate@pDt,w,c
  6335  00140C  26D9               	addwf	fsr2l,f,c
  6336  00140E  5002               	movf	RtccWriteDate@pDt+1,w,c
  6337  001410  22DA               	addwfc	fsr2h,f,c
  6338  001412  50DF               	movf	indf2,w,c
  6339  001414  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  6340  001416  5003               	movf	RtccWriteDate@di,w,c
  6341  001418  B4D8               	btfsc	status,2,c
  6342  00141A  D002               	goto	l2329
  6343  00141C  9CF2               	bcf	intcon,6,c	;volatile
  6344  00141E  D000               	goto	l2329
  6345  001420                     l2329:
  6346  001420  0E00               	movlw	0
  6347  001422  BB3F               	btfsc	63,5,b	;volatile
  6348  001424  0E01               	movlw	1
  6349  001426  6E09               	movwf	RtccWriteDate@wasWrEn,c
  6350  001428  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6351  00142A  A4D8               	btfss	status,2,c
  6352  00142C  D003               	goto	l2333
  6353  00142E  ECA6  F012         	call	_RtccWrOn	;wreg free
  6354  001432  D000               	goto	l2333
  6355  001434                     l2333:
  6356  001434  0E00               	movlw	0
  6357  001436  BF3F               	btfsc	63,7,b	;volatile
  6358  001438  0E01               	movlw	1
  6359  00143A  6E05               	movwf	RtccWriteDate@wasOn,c
  6360  00143C  5005               	movf	RtccWriteDate@wasOn,w,c
  6361  00143E  B4D8               	btfsc	status,2,c
  6362  001440  D007               	goto	l2339
  6363  001442  0E00               	movlw	0
  6364  001444  BE91               	btfsc	3985,7,c	;volatile
  6365  001446  0E01               	movlw	1
  6366  001448  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6367  00144A  010F               	movlb	15	; () banked
  6368  00144C  9F3F               	bcf	63,7,b	;volatile
  6369  00144E  D000               	goto	l2339
  6370  001450                     l2339:
  6371  001450  0EFC               	movlw	252
  6372  001452  010F               	movlb	15	; () banked
  6373  001454  173F               	andwf	63,f,b	;volatile
  6374  001456  010F               	movlb	15	; () banked
  6375  001458  813F               	bsf	63,0,b	;volatile
  6376                           
  6377                           ; BSR set to: 15
  6378  00145A  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  6379                           
  6380                           ; BSR set to: 15
  6381  00145E  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  6382                           
  6383                           ; BSR set to: 15
  6384  001462  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  6385  001466  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  6386  00146A  50DF               	movf	indf2,w,c
  6387  00146C  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  6388                           
  6389                           ; BSR set to: 15
  6390  00146E  0EFC               	movlw	252
  6391  001470  010F               	movlb	15	; () banked
  6392  001472  173F               	andwf	63,f,b	;volatile
  6393                           
  6394                           ; BSR set to: 15
  6395  001474  0E03               	movlw	3
  6396  001476  010F               	movlb	15	; () banked
  6397  001478  133F               	iorwf	63,f,b	;volatile
  6398                           
  6399                           ; BSR set to: 15
  6400  00147A  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  6401                           
  6402                           ; BSR set to: 15
  6403  00147E  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  6404                           
  6405                           ; BSR set to: 15
  6406  001482  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  6407                           
  6408                           ; BSR set to: 15
  6409  001486  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  6410                           
  6411                           ; BSR set to: 15
  6412  00148A  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  6413                           
  6414                           ; BSR set to: 15
  6415  00148E  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  6416                           
  6417                           ; BSR set to: 15
  6418  001492  5005               	movf	RtccWriteDate@wasOn,w,c
  6419  001494  B4D8               	btfsc	status,2,c
  6420  001496  D00D               	goto	l2375
  6421                           
  6422                           ; BSR set to: 15
  6423  001498  010F               	movlb	15	; () banked
  6424  00149A  8F3F               	bsf	63,7,b	;volatile
  6425                           
  6426                           ; BSR set to: 15
  6427  00149C  5006               	movf	RtccWriteDate@wasAlrm,w,c
  6428  00149E  B4D8               	btfsc	status,2,c
  6429  0014A0  D002               	goto	l2371
  6430                           
  6431                           ; BSR set to: 15
  6432  0014A2  8E91               	bsf	3985,7,c	;volatile
  6433  0014A4  D000               	goto	l2371
  6434  0014A6                     l2371:
  6435                           
  6436                           ; BSR set to: 15
  6437  0014A6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6438  0014A8  B4D8               	btfsc	status,2,c
  6439  0014AA  D009               	goto	l2379
  6440                           
  6441                           ; BSR set to: 15
  6442  0014AC  ECA6  F012         	call	_RtccWrOn	;wreg free
  6443  0014B0  D006               	goto	l2379
  6444  0014B2                     l2375:
  6445  0014B2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6446  0014B4  A4D8               	btfss	status,2,c
  6447  0014B6  D003               	goto	l2379
  6448  0014B8  010F               	movlb	15	; () banked
  6449  0014BA  9B3F               	bcf	63,5,b	;volatile
  6450                           
  6451                           ; BSR set to: 15
  6452  0014BC  D000               	goto	l2379
  6453  0014BE                     l2379:
  6454  0014BE  5003               	movf	RtccWriteDate@di,w,c
  6455  0014C0  B4D8               	btfsc	status,2,c
  6456  0014C2  0012               	return	
  6457  0014C4  9CF2               	bcf	intcon,6,c	;volatile
  6458  0014C6  0012               	return	
  6459                           
  6460                           ;	Return value of _RtccWriteDate is never used
  6461  0014C8  0012               	return		;funcret
  6462  0014CA                     __end_of_RtccWriteDate:
  6463                           	opt stack 0
  6464                           tosu	equ	0xFFF
  6465                           tosh	equ	0xFFE
  6466                           tosl	equ	0xFFD
  6467                           pclath	equ	0xFFA
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           indf0	equ	0xFEF
  6476                           postinc0	equ	0xFEE
  6477                           fsr0h	equ	0xFEA
  6478                           fsr0l	equ	0xFE9
  6479                           wreg	equ	0xFE8
  6480                           postinc1	equ	0xFE6
  6481                           postdec1	equ	0xFE5
  6482                           fsr1h	equ	0xFE2
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _RtccWrOn *****************
  6492 ;; Defined at:
  6493 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;		None
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  data            2    0        unsigned int 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6511 ;;Total ram usage:        0 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_Write_RTC
  6517 ;;		_RtccWriteDate
  6518 ;;		_RtccWriteTime
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text37
  6523  00254C                     __ptext37:
  6524                           	opt stack 0
  6525  00254C                     _RtccWrOn:
  6526                           	opt stack 25
  6527                           
  6528                           ;incstack = 0
  6529  00254C  9CF2               	bcf	intcon,6,c	;volatile
  6530  00254E  0E55               	movlw	85
  6531  002550  6EA7               	movwf	4007,c	;volatile
  6532  002552  0EAA               	movlw	170
  6533  002554  6EA7               	movwf	4007,c	;volatile
  6534  002556  010F               	movlb	15	; () banked
  6535  002558  8B3F               	bsf	63,5,b	;volatile
  6536                           
  6537                           ; BSR set to: 15
  6538  00255A  8CF2               	bsf	intcon,6,c	;volatile
  6539                           
  6540                           ; BSR set to: 15
  6541  00255C  0012               	return		;funcret
  6542  00255E                     __end_of_RtccWrOn:
  6543                           	opt stack 0
  6544                           tosu	equ	0xFFF
  6545                           tosh	equ	0xFFE
  6546                           tosl	equ	0xFFD
  6547                           pclath	equ	0xFFA
  6548                           tblptru	equ	0xFF8
  6549                           tblptrh	equ	0xFF7
  6550                           tblptrl	equ	0xFF6
  6551                           tablat	equ	0xFF5
  6552                           prodh	equ	0xFF4
  6553                           prodl	equ	0xFF3
  6554                           intcon	equ	0xFF2
  6555                           indf0	equ	0xFEF
  6556                           postinc0	equ	0xFEE
  6557                           fsr0h	equ	0xFEA
  6558                           fsr0l	equ	0xFE9
  6559                           wreg	equ	0xFE8
  6560                           postinc1	equ	0xFE6
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function _Read_RTC *****************
  6572 ;; Defined at:
  6573 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;		None
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;		None               void
  6580 ;; Registers used:
  6581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;Total ram usage:        0 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    1
  6594 ;; This function calls:
  6595 ;;		_RtccReadDate
  6596 ;;		_RtccReadTime
  6597 ;; This function is called by:
  6598 ;;		_main
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text38
  6603  001710                     __ptext38:
  6604                           	opt stack 0
  6605  001710                     _Read_RTC:
  6606                           	opt stack 29
  6607                           
  6608                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  6609                           
  6610                           ; BSR set to: 15
  6611                           ;incstack = 0
  6612  001710  0E4B               	movlw	low _RtccTime
  6613  001712  6E01               	movwf	RtccReadTime@pTm,c
  6614  001714  0E00               	movlw	high _RtccTime
  6615  001716  6E02               	movwf	RtccReadTime@pTm+1,c
  6616  001718  EC62  F010         	call	_RtccReadTime	;wreg free
  6617                           
  6618                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  6619  00171C  504C               	movf	_RtccTime+1,w,c
  6620  00171E  0B0F               	andlw	15
  6621  001720  0100               	movlb	0	; () banked
  6622  001722  6FBF               	movwf	_segundo_u& (0+255),b
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  6626  001724  384C               	swapf	_RtccTime+1,w,c
  6627  001726  0B0F               	andlw	15
  6628  001728  0B0F               	andlw	15
  6629  00172A  0100               	movlb	0	; () banked
  6630  00172C  6FBE               	movwf	_segundo_d& (0+255),b
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  6634  00172E  504D               	movf	_RtccTime+2,w,c
  6635  001730  0B0F               	andlw	15
  6636  001732  0100               	movlb	0	; () banked
  6637  001734  6FBD               	movwf	_minuto_u& (0+255),b
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  6641  001736  384D               	swapf	_RtccTime+2,w,c
  6642  001738  0B0F               	andlw	15
  6643  00173A  0B0F               	andlw	15
  6644  00173C  0100               	movlb	0	; () banked
  6645  00173E  6FBC               	movwf	_minuto_d& (0+255),b
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  6649  001740  504E               	movf	_RtccTime+3,w,c
  6650  001742  0B0F               	andlw	15
  6651  001744  0100               	movlb	0	; () banked
  6652  001746  6FB9               	movwf	_hora_u& (0+255),b
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  6656  001748  384E               	swapf	_RtccTime+3,w,c
  6657  00174A  0B0F               	andlw	15
  6658  00174C  0B0F               	andlw	15
  6659  00174E  0100               	movlb	0	; () banked
  6660  001750  6FB8               	movwf	_hora_d& (0+255),b
  6661                           
  6662                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  6663  001752  0E47               	movlw	low _RtccDate
  6664  001754  6E01               	movwf	RtccReadDate@pDt,c
  6665  001756  0E00               	movlw	high _RtccDate
  6666  001758  6E02               	movwf	RtccReadDate@pDt+1,c
  6667  00175A  ECB6  F00E         	call	_RtccReadDate	;wreg free
  6668                           
  6669                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  6670  00175E  5048               	movf	_RtccDate+1,w,c
  6671  001760  0B0F               	andlw	15
  6672  001762  0100               	movlb	0	; () banked
  6673  001764  6FB7               	movwf	_fecha_u& (0+255),b
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  6677  001766  3848               	swapf	_RtccDate+1,w,c
  6678  001768  0B0F               	andlw	15
  6679  00176A  0B0F               	andlw	15
  6680  00176C  0100               	movlb	0	; () banked
  6681  00176E  6FB6               	movwf	_fecha_d& (0+255),b
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  6685  001770  5049               	movf	_RtccDate+2,w,c
  6686  001772  0B0F               	andlw	15
  6687  001774  0100               	movlb	0	; () banked
  6688  001776  6FBB               	movwf	_mes_u& (0+255),b
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  6692  001778  3849               	swapf	_RtccDate+2,w,c
  6693  00177A  0B0F               	andlw	15
  6694  00177C  0B0F               	andlw	15
  6695  00177E  0100               	movlb	0	; () banked
  6696  001780  6FBA               	movwf	_mes_d& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  6700  001782  C047  F0B5         	movff	_RtccDate,_dia_semana
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  6704  001786  504A               	movf	_RtccDate+3,w,c
  6705  001788  0B0F               	andlw	15
  6706  00178A  0100               	movlb	0	; () banked
  6707  00178C  6FB4               	movwf	_anio_u& (0+255),b
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  6711  00178E  384A               	swapf	_RtccDate+3,w,c
  6712  001790  0B0F               	andlw	15
  6713  001792  0B0F               	andlw	15
  6714  001794  0100               	movlb	0	; () banked
  6715  001796  6FB3               	movwf	_anio_d& (0+255),b
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  6719  001798  0100               	movlb	0	; () banked
  6720  00179A  51BE               	movf	_segundo_d& (0+255),w,b
  6721  00179C  0D0A               	mullw	10
  6722  00179E  0100               	movlb	0	; () banked
  6723  0017A0  51BF               	movf	_segundo_u& (0+255),w,b
  6724  0017A2  24F3               	addwf	prodl,w,c
  6725  0017A4  0100               	movlb	0	; () banked
  6726  0017A6  6F92               	movwf	_segundo& (0+255),b
  6727  0017A8  0100               	movlb	0	; () banked
  6728  0017AA  0E00               	movlw	0
  6729  0017AC  20F4               	addwfc	prodh,w,c
  6730  0017AE  0100               	movlb	0	; () banked
  6731  0017B0  6F93               	movwf	(_segundo+1)& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  6735  0017B2  0100               	movlb	0	; () banked
  6736  0017B4  51BC               	movf	_minuto_d& (0+255),w,b
  6737  0017B6  0D0A               	mullw	10
  6738  0017B8  0100               	movlb	0	; () banked
  6739  0017BA  51BD               	movf	_minuto_u& (0+255),w,b
  6740  0017BC  24F3               	addwf	prodl,w,c
  6741  0017BE  6E5D               	movwf	_minuto,c
  6742  0017C0  0100               	movlb	0	; () banked
  6743  0017C2  0E00               	movlw	0
  6744  0017C4  20F4               	addwfc	prodh,w,c
  6745  0017C6  6E5E               	movwf	_minuto+1,c
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  6749  0017C8  0100               	movlb	0	; () banked
  6750  0017CA  51B8               	movf	_hora_d& (0+255),w,b
  6751  0017CC  0D0A               	mullw	10
  6752  0017CE  0100               	movlb	0	; () banked
  6753  0017D0  51B9               	movf	_hora_u& (0+255),w,b
  6754  0017D2  24F3               	addwf	prodl,w,c
  6755  0017D4  6E59               	movwf	_hora,c
  6756  0017D6  0100               	movlb	0	; () banked
  6757  0017D8  0E00               	movlw	0
  6758  0017DA  20F4               	addwfc	prodh,w,c
  6759  0017DC  6E5A               	movwf	_hora+1,c
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  6763  0017DE  0100               	movlb	0	; () banked
  6764  0017E0  51B6               	movf	_fecha_d& (0+255),w,b
  6765  0017E2  0D0A               	mullw	10
  6766  0017E4  0100               	movlb	0	; () banked
  6767  0017E6  51B7               	movf	_fecha_u& (0+255),w,b
  6768  0017E8  24F3               	addwf	prodl,w,c
  6769  0017EA  6E57               	movwf	_dia,c
  6770  0017EC  0100               	movlb	0	; () banked
  6771  0017EE  0E00               	movlw	0
  6772  0017F0  20F4               	addwfc	prodh,w,c
  6773  0017F2  6E58               	movwf	_dia+1,c
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  6777  0017F4  C0B5  F0CA         	movff	_dia_semana,_diasem
  6778  0017F8  0100               	movlb	0	; () banked
  6779  0017FA  6BCB               	clrf	(_diasem+1)& (0+255),b
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  6783  0017FC  0100               	movlb	0	; () banked
  6784  0017FE  51BA               	movf	_mes_d& (0+255),w,b
  6785  001800  0D0A               	mullw	10
  6786  001802  0100               	movlb	0	; () banked
  6787  001804  51BB               	movf	_mes_u& (0+255),w,b
  6788  001806  24F3               	addwf	prodl,w,c
  6789  001808  6E5B               	movwf	_mes,c
  6790  00180A  0100               	movlb	0	; () banked
  6791  00180C  0E00               	movlw	0
  6792  00180E  20F4               	addwfc	prodh,w,c
  6793  001810  6E5C               	movwf	_mes+1,c
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  6797  001812  0100               	movlb	0	; () banked
  6798  001814  51B3               	movf	_anio_d& (0+255),w,b
  6799  001816  0D0A               	mullw	10
  6800  001818  0100               	movlb	0	; () banked
  6801  00181A  51B4               	movf	_anio_u& (0+255),w,b
  6802  00181C  24F3               	addwf	prodl,w,c
  6803  00181E  6E55               	movwf	_anio,c
  6804  001820  0100               	movlb	0	; () banked
  6805  001822  0E00               	movlw	0
  6806  001824  20F4               	addwfc	prodh,w,c
  6807  001826  6E56               	movwf	_anio+1,c
  6808                           
  6809                           ; BSR set to: 0
  6810  001828  0012               	return		;funcret
  6811  00182A                     __end_of_Read_RTC:
  6812                           	opt stack 0
  6813                           tosu	equ	0xFFF
  6814                           tosh	equ	0xFFE
  6815                           tosl	equ	0xFFD
  6816                           pclath	equ	0xFFA
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           indf0	equ	0xFEF
  6825                           postinc0	equ	0xFEE
  6826                           fsr0h	equ	0xFEA
  6827                           fsr0l	equ	0xFE9
  6828                           wreg	equ	0xFE8
  6829                           postinc1	equ	0xFE6
  6830                           postdec1	equ	0xFE5
  6831                           fsr1h	equ	0xFE2
  6832                           fsr1l	equ	0xFE1
  6833                           indf2	equ	0xFDF
  6834                           postinc2	equ	0xFDE
  6835                           postdec2	equ	0xFDD
  6836                           fsr2h	equ	0xFDA
  6837                           fsr2l	equ	0xFD9
  6838                           status	equ	0xFD8
  6839                           
  6840 ;; *************** function _RtccReadTime *****************
  6841 ;; Defined at:
  6842 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  pTm             2    0[COMRAM] PTR struct .
  6845 ;;		 -> RtccTime(4), 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  rTD0            8   10[COMRAM] struct .
  6848 ;;  rTD1            8    2[COMRAM] struct .
  6849 ;; Return value:  Size  Location     Type
  6850 ;;		None               void
  6851 ;; Registers used:
  6852 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6859 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6861 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6862 ;;Total ram usage:       18 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_Read_RTC
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           	psect	text39
  6872  0020C4                     __ptext39:
  6873                           	opt stack 0
  6874  0020C4                     _RtccReadTime:
  6875                           	opt stack 29
  6876  0020C4  0EFC               	movlw	252
  6877  0020C6  010F               	movlb	15	; () banked
  6878  0020C8  173F               	andwf	63,f,b	;volatile
  6879                           
  6880                           ; BSR set to: 15
  6881  0020CA  010F               	movlb	15	; () banked
  6882  0020CC  813F               	bsf	63,0,b	;volatile
  6883                           
  6884                           ; BSR set to: 15
  6885  0020CE  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  6886                           
  6887                           ; BSR set to: 15
  6888  0020D2  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  6889                           
  6890                           ; BSR set to: 15
  6891  0020D6  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  6892                           
  6893                           ; BSR set to: 15
  6894  0020DA  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  6895                           
  6896                           ; BSR set to: 15
  6897  0020DE  0EFC               	movlw	252
  6898  0020E0  010F               	movlb	15	; () banked
  6899  0020E2  173F               	andwf	63,f,b	;volatile
  6900  0020E4  010F               	movlb	15	; () banked
  6901  0020E6  813F               	bsf	63,0,b	;volatile
  6902                           
  6903                           ; BSR set to: 15
  6904  0020E8  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  6905                           
  6906                           ; BSR set to: 15
  6907  0020EC  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  6908                           
  6909                           ; BSR set to: 15
  6910  0020F0  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  6911                           
  6912                           ; BSR set to: 15
  6913  0020F4  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  6914                           
  6915                           ; BSR set to: 15
  6916  0020F8  5009               	movf	RtccReadTime@rTD1+6,w,c
  6917  0020FA  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  6918  0020FC  A4D8               	btfss	status,2,c
  6919  0020FE  D7E2               	goto	l2667
  6920                           
  6921                           ; BSR set to: 15
  6922                           
  6923                           ; BSR set to: 15
  6924  002100  EE20 F003          	lfsr	2,3
  6925  002104  5001               	movf	RtccReadTime@pTm,w,c
  6926  002106  26D9               	addwf	fsr2l,f,c
  6927  002108  5002               	movf	RtccReadTime@pTm+1,w,c
  6928  00210A  22DA               	addwfc	fsr2h,f,c
  6929  00210C  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  6930  002110  EE20 F002          	lfsr	2,2
  6931  002114  5001               	movf	RtccReadTime@pTm,w,c
  6932  002116  26D9               	addwf	fsr2l,f,c
  6933  002118  5002               	movf	RtccReadTime@pTm+1,w,c
  6934  00211A  22DA               	addwfc	fsr2h,f,c
  6935  00211C  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  6936  002120  EE20 F001          	lfsr	2,1
  6937  002124  5001               	movf	RtccReadTime@pTm,w,c
  6938  002126  26D9               	addwf	fsr2l,f,c
  6939  002128  5002               	movf	RtccReadTime@pTm+1,w,c
  6940  00212A  22DA               	addwfc	fsr2h,f,c
  6941  00212C  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  6942                           
  6943                           ; BSR set to: 15
  6944  002130  0012               	return		;funcret
  6945  002132                     __end_of_RtccReadTime:
  6946                           	opt stack 0
  6947                           tosu	equ	0xFFF
  6948                           tosh	equ	0xFFE
  6949                           tosl	equ	0xFFD
  6950                           pclath	equ	0xFFA
  6951                           tblptru	equ	0xFF8
  6952                           tblptrh	equ	0xFF7
  6953                           tblptrl	equ	0xFF6
  6954                           tablat	equ	0xFF5
  6955                           prodh	equ	0xFF4
  6956                           prodl	equ	0xFF3
  6957                           intcon	equ	0xFF2
  6958                           indf0	equ	0xFEF
  6959                           postinc0	equ	0xFEE
  6960                           fsr0h	equ	0xFEA
  6961                           fsr0l	equ	0xFE9
  6962                           wreg	equ	0xFE8
  6963                           postinc1	equ	0xFE6
  6964                           postdec1	equ	0xFE5
  6965                           fsr1h	equ	0xFE2
  6966                           fsr1l	equ	0xFE1
  6967                           indf2	equ	0xFDF
  6968                           postinc2	equ	0xFDE
  6969                           postdec2	equ	0xFDD
  6970                           fsr2h	equ	0xFDA
  6971                           fsr2l	equ	0xFD9
  6972                           status	equ	0xFD8
  6973                           
  6974 ;; *************** function _RtccReadDate *****************
  6975 ;; Defined at:
  6976 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  pDt             2    0[COMRAM] PTR struct .
  6979 ;;		 -> RtccDate(4), 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  rTD0            8   10[COMRAM] struct .
  6982 ;;  rTD1            8    2[COMRAM] struct .
  6983 ;; Return value:  Size  Location     Type
  6984 ;;		None               void
  6985 ;; Registers used:
  6986 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6993 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6995 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6996 ;;Total ram usage:       18 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_Read_RTC
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text40
  7006  001D6C                     __ptext40:
  7007                           	opt stack 0
  7008  001D6C                     _RtccReadDate:
  7009                           	opt stack 29
  7010  001D6C  0EFC               	movlw	252
  7011  001D6E  010F               	movlb	15	; () banked
  7012  001D70  173F               	andwf	63,f,b	;volatile
  7013  001D72  0E03               	movlw	3
  7014  001D74  010F               	movlb	15	; () banked
  7015  001D76  133F               	iorwf	63,f,b	;volatile
  7016                           
  7017                           ; BSR set to: 15
  7018  001D78  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  7019                           
  7020                           ; BSR set to: 15
  7021  001D7C  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  7022                           
  7023                           ; BSR set to: 15
  7024  001D80  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  7025                           
  7026                           ; BSR set to: 15
  7027  001D84  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  7028                           
  7029                           ; BSR set to: 15
  7030  001D88  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  7031                           
  7032                           ; BSR set to: 15
  7033  001D8C  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  7034  001D90  0EFC               	movlw	252
  7035  001D92  010F               	movlb	15	; () banked
  7036  001D94  173F               	andwf	63,f,b	;volatile
  7037  001D96  0E03               	movlw	3
  7038  001D98  010F               	movlb	15	; () banked
  7039  001D9A  133F               	iorwf	63,f,b	;volatile
  7040                           
  7041                           ; BSR set to: 15
  7042  001D9C  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  7043                           
  7044                           ; BSR set to: 15
  7045  001DA0  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  7046                           
  7047                           ; BSR set to: 15
  7048  001DA4  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  7049                           
  7050                           ; BSR set to: 15
  7051  001DA8  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  7052                           
  7053                           ; BSR set to: 15
  7054  001DAC  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  7055                           
  7056                           ; BSR set to: 15
  7057  001DB0  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  7058  001DB4  5005               	movf	RtccReadDate@rTD1+2,w,c
  7059  001DB6  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  7060  001DB8  A4D8               	btfss	status,2,c
  7061  001DBA  D7D8               	goto	l2693
  7062                           
  7063                           ; BSR set to: 15
  7064                           
  7065                           ; BSR set to: 15
  7066  001DBC  EE20 F001          	lfsr	2,1
  7067  001DC0  5001               	movf	RtccReadDate@pDt,w,c
  7068  001DC2  26D9               	addwf	fsr2l,f,c
  7069  001DC4  5002               	movf	RtccReadDate@pDt+1,w,c
  7070  001DC6  22DA               	addwfc	fsr2h,f,c
  7071  001DC8  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  7072  001DCC  EE20 F002          	lfsr	2,2
  7073  001DD0  5001               	movf	RtccReadDate@pDt,w,c
  7074  001DD2  26D9               	addwf	fsr2l,f,c
  7075  001DD4  5002               	movf	RtccReadDate@pDt+1,w,c
  7076  001DD6  22DA               	addwfc	fsr2h,f,c
  7077  001DD8  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  7078                           
  7079                           ; BSR set to: 15
  7080  001DDC  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  7081  001DE0  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  7082  001DE4  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  7083                           
  7084                           ; BSR set to: 15
  7085  001DE8  EE20 F003          	lfsr	2,3
  7086  001DEC  5001               	movf	RtccReadDate@pDt,w,c
  7087  001DEE  26D9               	addwf	fsr2l,f,c
  7088  001DF0  5002               	movf	RtccReadDate@pDt+1,w,c
  7089  001DF2  22DA               	addwfc	fsr2h,f,c
  7090  001DF4  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  7091                           
  7092                           ; BSR set to: 15
  7093  001DF8  0012               	return		;funcret
  7094  001DFA                     __end_of_RtccReadDate:
  7095                           	opt stack 0
  7096                           tosu	equ	0xFFF
  7097                           tosh	equ	0xFFE
  7098                           tosl	equ	0xFFD
  7099                           pclath	equ	0xFFA
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           indf0	equ	0xFEF
  7108                           postinc0	equ	0xFEE
  7109                           fsr0h	equ	0xFEA
  7110                           fsr0l	equ	0xFE9
  7111                           wreg	equ	0xFE8
  7112                           postinc1	equ	0xFE6
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           tosu	equ	0xFFF
  7123                           tosh	equ	0xFFE
  7124                           tosl	equ	0xFFD
  7125                           pclath	equ	0xFFA
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           intcon	equ	0xFF2
  7133                           indf0	equ	0xFEF
  7134                           postinc0	equ	0xFEE
  7135                           fsr0h	equ	0xFEA
  7136                           fsr0l	equ	0xFE9
  7137                           wreg	equ	0xFE8
  7138                           postinc1	equ	0xFE6
  7139                           postdec1	equ	0xFE5
  7140                           fsr1h	equ	0xFE2
  7141                           fsr1l	equ	0xFE1
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149                           	psect	text41
  7150  000000                     __ptext41:
  7151                           	opt stack 0
  7152                           tosu	equ	0xFFF
  7153                           tosh	equ	0xFFE
  7154                           tosl	equ	0xFFD
  7155                           pclath	equ	0xFFA
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon	equ	0xFF2
  7163                           indf0	equ	0xFEF
  7164                           postinc0	equ	0xFEE
  7165                           fsr0h	equ	0xFEA
  7166                           fsr0l	equ	0xFE9
  7167                           wreg	equ	0xFE8
  7168                           postinc1	equ	0xFE6
  7169                           postdec1	equ	0xFE5
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           fsr2h	equ	0xFDA
  7176                           fsr2l	equ	0xFD9
  7177                           status	equ	0xFD8
  7178                           
  7179                           	psect	rparam
  7180  0000                     tosu	equ	0xFFF
  7181                           tosh	equ	0xFFE
  7182                           tosl	equ	0xFFD
  7183                           pclath	equ	0xFFA
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           intcon	equ	0xFF2
  7191                           indf0	equ	0xFEF
  7192                           postinc0	equ	0xFEE
  7193                           fsr0h	equ	0xFEA
  7194                           fsr0l	equ	0xFE9
  7195                           wreg	equ	0xFE8
  7196                           postinc1	equ	0xFE6
  7197                           postdec1	equ	0xFE5
  7198                           fsr1h	equ	0xFE2
  7199                           fsr1l	equ	0xFE1
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8


Data Sizes:
    Strings     138
    Constant    14
    Data        22
    BSS         100
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     67      95
    BANK0           160      0     108
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[5]), STR_12(CODE[17]), STR_11(CODE[15]), STR_10(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), STR_19(CODE[8]), STR_17(CODE[10]), STR_16(CODE[18]), 
		 -> STR_14(CODE[11]), STR_13(CODE[17]), ingresar_password@clear(COMRAM[16]), day(BANK0[3]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), buffer2(BANK0[20]), 

    main@puntero_funcion	PTR void  size(2) Largest target is 2
		 -> ingresar_comando(), cambiar_dia(), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 8
		 -> STR_19(CODE[8]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_anio(COMRAM[2]), tamanio_mes(COMRAM[2]), tamanio_dia(COMRAM[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), cambiar_dia(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), cambiar_dia(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_18(CODE[4]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _mostrar_actualizacion_dia->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_cambiar_dia
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _cambiar_dia->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   71175
                                             58 COMRAM     9     9      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
          _mostrar_actualizacion_dia
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     518
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _mostrar_actualizacion_dia                            3     3      0    4705
                                             10 COMRAM     3     3      0
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4   42821
                                             51 COMRAM     7     3      4
                        _cambiar_dia *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   21569
                                             45 COMRAM     6     0      6
                        _cambiar_dia *
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    8398
                                             36 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                       1     1      0    5776
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    2600
                                             38 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                      3     3      0    2578
                                             35 COMRAM     3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0    6621
                                             42 COMRAM     3     3      0
                          _Write_RTC
                    _convertir_a_int
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                     7     3      4    3072
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int                                      4     0      4    1203
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     775
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    5535
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             2     0      2    7947
                                             35 COMRAM     2     0      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2556
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    3198
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _cambiar_dia *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _guardar_tecla_presionada *
       _cambiar_dia *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _mostrar_actualizacion_dia
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _restaurar_comando
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6C       5       67.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     43      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB       6        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 01 21:34:58 2016

                                 _a 0082                                   _b 0086  
                                 _c 0088                                   _i 008A  
                                 _j 008C                                   _k 008E  
                    ?_lcd_send_byte 0003                        ___awdiv@sign 0006  
               ___wmul@multiplicand 0003                         lcd_comand@d 0005  
                      __CFG_CP0$OFF 000000          ??_mostrar_guardar_password 0025  
                               l202 16F6                                 l320 2436  
                               l152 20C2                                 l321 2438  
                               l217 2418                                 l226 2198  
                               l170 1BCC                                 l171 1BC8  
                               l174 1BF4                                 l190 169C  
                               l183 1C36                                 l175 1BF0  
                               l159 1F68                                 l193 16C6  
                               l178 1C1E                                 l194 16C2  
                               l179 1C1A                                 l197 16E0  
                               l189 16A0                                 l198 16DC  
                               l399 116C                                 l681 1AF8  
                               _dia 0057                                 _day 00AA  
                               _key 0046                                 _mes 005B  
                               tosl 000FFD                                 wreg 000FE8  
                   RtccReadDate@pDt 0001                         lcd_gotoxy@x 0006  
                       lcd_gotoxy@y 0005                                l1058 2250  
                              l1068 22F0                                l3021 1A14  
                              l3013 19E8                                l2303 191E  
                              l2215 2214                                l3103 15C8  
                              l2137 253C                                l2217 221E  
                              l3017 19FC                                l3105 15CE  
                              l2323 13E6                                l2307 192A  
                              l2163 24D0                                l2227 2244  
                              l2219 2226                                l2243 22E4  
                              l2235 22BC                                l2411 106E  
                              l2403 100A                                l3043 1CAE  
                              l2333 1434                                l2261 1892  
                              l2165 24D6                                l2181 230A  
                              l2237 22C6                                l2501 1AC0  
                              l3061 14DC                                l2271 18C2  
                              l2255 1868                                l2183 2316  
                              l2239 22CE                                l2431 10E2  
                              l2423 10B2                                l2415 1074  
                              l2503 1AC6                                l3047 1CC6  
                              l3039 1C9A                                l2329 1420  
                              l2265 18A6                                l2185 2322  
                              l2441 1114                                l2417 1096  
                              l2371 14A6                                l2339 1450  
                              l2531 1D1E                                l2523 1CFE  
                              l2179 22FE                                l2451 1142  
                              l2435 10E6                                l2427 10BE  
                              l2541 1D44                                l2533 1D26  
                              l2517 1CEC                                l2189 232E  
                              l2453 114A                                l2445 1120  
                              l2621 23E6                                l3085 1562  
                              l3077 1538                                l3069 1506  
                              l2375 14B2                                l2199 2500  
                              l2439 110A                                l2391 0FBE  
                              l2607 2086                                l3095 159C  
                              l2529 1D14                                l2545 1D50  
                              l2465 11C6                                l2393 0FCC  
                              l2385 0FA4                                l2617 23C4  
                              l2379 14BE                                l2299 1912  
                              l2635 252A                                l2475 225C  
                              l2459 1172                                l2467 11D2  
                              l2483 1A30                                l2643 1E94  
                              l3099 15B0                                l2549 1D60  
                              l2469 11EE                                l2397 0FD6  
                              l2485 1A36                                l2479 2286  
                              l2399 0FEC                                l2751 2172  
                              l2495 1A76                                l2753 2178  
                              l2649 1EBC                                l2841 1F4E  
                              l2667 20C4                                l2755 2188  
                              l2747 2146                                l2499 1A8A  
                              l2843 1F54                                l2693 1D6C  
                              l2765 1E20                                l2837 1F0E  
                              l2783 1E4C                                l2775 1E38  
                              l2769 1E28                                l2981 193E  
                              l2991 196A                                l2993 197A  
                              l2985 1952                                l2899 16FE  
                              l2999 19A2                                STR_1 0F7C  
                              STR_2 0F7C                                STR_3 0F8F  
                              STR_4 0F91                                STR_5 0F93  
                              STR_6 0F95                                STR_7 0F8F  
                              STR_8 0F8D                                STR_9 0F97  
                   _guardar_comando 2054                                u1410 1FA8  
                              u2140 1ECC                                u1430 1FC4  
                              u1408 1F90                                u1370 1F76  
                              u2218 1BDC                                u1428 1FAA  
                              u1390 1F8E                                u1448 1FC6  
                              u2248 1C06                                u2408 16AC  
                              u2610 1C92                                u1388 1F78  
                              u2188 1BB4                                u2700 15DA  
                              u2710 15DC                                u1930 227C  
                              u2570 19B6                                u1940 22A6  
                              u1937 2272                                u2737 15B6  
                              u1947 229C                                u2747 1CB4  
                              u2757 1704                                u2767 1A02  
                              u2777 252C                                u2787 253E  
                  ?_lcd_send_nibble 0001                                _anio 0055  
                              _flag 02F8                                _atoi 1A2E  
                              _main 14CA                                _hora 0059  
                              _year 00B0                                fsr0h 000FEA  
                              indf0 000FEF                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                     __CFG_T1DIG$ON 000000                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                    RtccReadDate@rTD0 000B  
                  RtccReadDate@rTD1 0003                        ___param_bank 000010  
                   RtccReadTime@pTm 0001                __size_of_cambiar_dia 007A  
                       _Delay1KTCYx 2528                       __CFG_PLLDIV$1 000000  
                             ?_atoi 0007                               ?_main 0001  
                   __end_of___awdiv 1D6C                               STR_10 0F7C  
                             STR_11 0F43                               STR_20 0F81  
                             STR_12 0F32                               STR_21 0F85  
                             STR_13 0F21                               STR_14 0F5F  
                             STR_22 0F52                               STR_15 0F7C  
                             STR_16 0F0F                               STR_17 0F6A  
                             STR_18 0F89                               STR_19 0F74  
             __size_of_Delay100TCYx 0012                    _guardar_elemento 1FE0  
                   ___awdiv@divisor 0003                     __end_of___lwdiv 225A  
                   __end_of___lwmod 22FA                   _restaurar_comando 24A0  
                  ?_validar_comando 0001                     ___awdiv@counter 0005  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                       ?_leer_teclado 0034  
                ?_restaurar_comando 0001                      __CFG_FCMEN$OFF 000000  
                             _Setup 2346                      _ocultar_teclas 0090  
                   __end_of_dpowers 0F0B                               _mes_d 00BA  
                             _mes_u 00BB                     __end_of_isdigit 250A  
                             _month 00AD                               atoi@a 000C  
                             atoi@s 0007                               main@i 0040  
                    __pbitbssCOMRAM 02F8                               pclath 000FFA  
                             tablat 000FF5                   ??_convertir_a_int 0012  
               ??_restaurar_comando 0001                        lcd_putrs@ptr 0009  
                             status 000FD8                     __end_of_sprintf 11FE  
                 validar_password@i 0003             __CFG_DSWDTOSC$INTOSCREF 000000  
                   __initialization 219A                        _Delay100TCYx 253A  
                      __end_of_atoi 1B02                        __end_of_main 15F2  
                   ??_lcd_send_byte 0004                    RtccReadTime@rTD0 000B  
                  RtccReadTime@rTD1 0003                    __end_of_Read_RTC 182A  
          _guardar_current_password 23D4           __size_of_ingresar_comando 000A  
         __end_of_restaurar_comando 24C4                              ??_atoi 0009  
                            ??_main 003B                       __activetblptr 000002  
                    ??_leer_teclado 0038             __end_of_guardar_comando 20C4  
                  __end_of_RtccWrOn 255E                              ?_Setup 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _EECON2 000FA7                              _ANCON0 000F48  
                            _ANCON1 000F49                    ___awdiv@dividend 0001  
                    __CFG_WDTEN$OFF 000000                    RtccWriteDate@pDt 0001  
                            _RTCCFG 000F3F                      __CFG_WPCFG$OFF 000000  
                  __end_of_caratula 1BA4                      __CFG_WPDIS$OFF 000000  
                    __CFG_XINST$OFF 000000                    __end_of_lcd_init 1E7A  
                  __end_of_lcd_putc 2346                   ?_validar_password 0001  
                            ___wmul 2478                           ??___awdiv 0005  
                    __CFG_STVREN$ON 000000                              _diasem 00CA  
                            _anio_d 00B3                              _anio_u 00B4  
                         ??___lwdiv 0005                           ??___lwmod 000C  
                ??_validar_password 0001                              _hora_d 00B8  
                            _hora_u 00B9                              clear_0 21A0  
                            clear_1 21AE                    ___awdiv@quotient 0007  
                            _minuto 005D    __end_of_mostrar_guardar_password 2478  
             __end_of_RtccWriteDate 14CA               __end_of_RtccWriteTime 1936  
                  RtccWriteTime@pTm 0001            _guardar_tecla_presionada 1BA4  
                      __pdataCOMRAM 0055                           ??_isdigit 0001  
                  ??_imprimir_tecla 0024                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_sprintf 0017  
        ?_mostrar_actualizacion_dia 0001                          __accesstop 0060  
           __end_of__initialization 21F4                  __size_of_Write_RTC 0186  
                     ___rparam_used 000001                      __pcstackCOMRAM 0001  
                     __end_of_Setup 238E                        __pidataBANK0 256C  
                   __CFG_DSWDTPS$G2 000000          __size_of_restaurar_comando 0024  
                  leer_teclado@doit 0036                 leer_teclado@ocultar 0034  
                   __CFG_OSC$INTOSC 000000                    ?_guardar_comando 0001  
                           ??_Setup 000E                   lcd_gotoxy@address 0007  
                __size_of_lcd_putrs 0054                        sprintf@width 0021  
                        __pbssBANK0 0060                           ?_Read_RTC 0001  
                   _tamanio_comando 0094                          _dia_semana 00B5  
         RtccWriteTime@tempHourWDay 000A            __end_of_guardar_elemento 2054  
              __end_of_leer_teclado 1710                           ?_RtccWrOn 0001  
                    lcd_send_byte@n 0003          mostrar_actualizacion_dia@i 000C  
                           ?___wmul 0001                       ?_RtccReadDate 0001  
                     ?_RtccReadTime 0001                    _ingresar_comando 2582  
                      ?_Delay1KTCYx 0001                   __end_of_Write_RTC 1384  
                   _convertir_a_int 250A                          _lcd_comand 255E  
                         ?_caratula 0024                          _lcd_gotoxy 24C4  
                           _RTCVALH 000F99                             _RTCVALL 000F98  
                         ?_lcd_init 0001                           ?_lcd_putc 0001  
                        ??_Read_RTC 0013   __size_of_mostrar_guardar_password 002C  
         ?_mostrar_guardar_password 0001          ??_guardar_current_password 0001  
                           __Hparam 0000                       ??_cambiar_dia 002B  
                           __Lparam 0000            __size_of_lcd_send_nibble 0076  
                        ??_RtccWrOn 0001                guardar_comando@tecla 0026  
                    ??_RtccReadDate 0003                          _autorizado 0084  
                    ??_RtccReadTime 0003                             ___awdiv 1CD6  
                 __end_of_lcd_putrs 22AE                     __size_of___wmul 0028  
                           ___lwdiv 21FE                             ___lwmod 22AE  
                      __psmallconst 0F00                         _RtccTimeVal 007E  
                           __pcinit 219A                             _fecha_d 00B6  
                           _fecha_u 00B7                             __ramtop 0F00  
     mostrar_guardar_password@tecla 0025                             __ptext0 14CA  
                           __ptext1 1EF4                             __ptext2 1C40  
                           __ptext3 24A0                             __ptext4 15F2  
                           __ptext5 1BA4                             __ptext6 2582  
                           __ptext7 1E7A                             __ptext8 244C  
                           __ptext9 238E                             _buffer2 0096  
                           _comando 00C6                           _T1CONbits 000FCD  
                           _dpowers 0F01                             _isdigit 24E8  
                    main@validacion 0042                          ??_caratula 0026  
                           _segundo 0092                             _sprintf 0F9A  
                        ??_lcd_init 0005                          ??_lcd_putc 0008  
              end_of_initialization 21F4            __size_of_validar_comando 0076  
              lcd_send_byte@address 0004                       __Lmediumconst 0000  
                           postdec1 000FE5                             postdec2 000FDD  
        ??_guardar_tecla_presionada 0034                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
           __end_of_convertir_a_int 2528               __end_of_lcd_send_byte 244C  
               __end_of_cambiar_dia 1EF4                           _PORTAbits 000F80  
                         _PORTCbits 000F82                    __CFG_DSBOREN$OFF 000000  
                       ?_lcd_comand 0001                    __CFG_CPUDIV$OSC1 000000  
                ingresar_password@i 001E                           _TRISBbits 000F93  
                       ?_lcd_gotoxy 0005           __size_of_validar_password 0068  
                   _LCD_INIT_STRING 0F0B         ??_mostrar_actualizacion_dia 000B  
               main@puntero_funcion 003C                convertir_a_int@array 000E  
                  validar_comando@i 0008                convertir_a_int@valor 0010  
             __size_of_leer_teclado 011E                    _current_password 0078  
                  __CFG_IOL1WAY$OFF 000000           RtccWriteDate@tempDayMonth 000A  
               __CFG_MSSP7B_EN$MSK7 000000                       leer_teclado@i 0039  
                  Delay100TCYx@unit 0001                      __end_of___wmul 24A0  
                     __pidataCOMRAM 2578           RtccWriteDate@tempHourWDay 000C  
                 ??_lcd_send_nibble 0001                __size_of_Delay1KTCYx 0012  
                  __CFG_DSWDTEN$OFF 000000                    cambiar_dia@tecla 002B  
                  cambiar_dia@valor 002C                 start_initialization 219A  
                main@ocultar_teclas 003E                        _leer_teclado 15F2  
              __end_of_RtccReadDate 1DFA                __end_of_RtccReadTime 2132  
          __end_of_ingresar_comando 258C                RtccWriteTime@wasAlrm 0006  
              RtccWriteTime@wasWrEn 0007    __end_of_guardar_current_password 241A  
     guardar_current_password@valor 0003              __size_of_RtccWriteDate 0146  
                   RtccWriteDate@di 0003                   ?_guardar_elemento 0024  
            __size_of_RtccWriteTime 010C                   __size_of_Read_RTC 011A  
                 ??_validar_comando 0005                         _cambiar_dia 1E7A  
               __size_of_lcd_comand 000E                  ??_guardar_elemento 0028  
               __size_of_lcd_gotoxy 0024                            ??___wmul 0005  
         _mostrar_actualizacion_dia 1C40                    ?_convertir_a_int 000E  
                       __pdataBANK0 00C0                   __size_of_RtccWrOn 0012  
                   RtccWriteTime@di 0003                    __CFG_LPT1OSC$OFF 000000  
                       _ALRMCFGbits 000F91             __end_of_LCD_INIT_STRING 0F0F  
                       __pbssCOMRAM 0044                           _Write_RTC 11FE  
                      _isdigit$2145 0002                   __size_of_caratula 00A2  
                   Delay1KTCYx@unit 0001            __size_of_guardar_comando 0070  
                 __size_of_lcd_init 0080                         sprintf@flag 001D  
                 __size_of_lcd_putc 004C                         sprintf@prec 0020  
           __size_of_imprimir_tecla 0046                           __pnvBANK0 00B3  
                  _tamanio_password 0044                    ___lwdiv@dividend 0001  
                     ?_Delay100TCYx 0001    __end_of_guardar_tecla_presionada 1C40  
                          ?___awdiv 0001                            ?___lwdiv 0001  
                          ?___lwmod 0008             RtccWriteTime@tempMinSec 0008  
                         _lcd_putrs 225A                       _RtccWriteDate 1384  
                       __smallconst 0F00                       _RtccWriteTime 182A  
                          ?_isdigit 0001                __CFG_RTCOSC$T1OSCREF 000000  
                  _validar_password 2132                      __size_of_Setup 0048  
                        ?_Write_RTC 0001                    ___lwdiv@quotient 0005  
                          ?_sprintf 000D                   _ingresar_password 1936  
                  _RtccAlrmTimeDate 0060                      ___wmul@product 0005  
                          _LATAbits 000F89                            _LATBbits 000F8A  
                ?_ingresar_password 0001                            _PIE3bits 000FA3  
                         _segundo_d 00BE                      ??_Delay100TCYx 0001  
                         _segundo_u 00BF                    __CFG_WDTPS$32768 000000  
               ??_ingresar_password 000B                  RtccWriteDate@wasOn 0005  
         guardar_tecla_presionada@i 0030            validar_comando@candidato 0001  
                _Rtcc_read_TimeDate 0070                      ?_RtccWriteDate 0001  
                        ?_lcd_putrs 0009                   ___wmul@multiplier 0001  
                    ?_RtccWriteTime 0001   __size_of_guardar_current_password 0046  
                    caratula@titulo 0024           ?_guardar_current_password 0001  
                         lcd_init@i 0005               __size_of_RtccReadDate 008E  
                      ??_lcd_comand 0005                           lcd_putc@c 0008  
             __size_of_RtccReadTime 006E                 imprimir_tecla@tecla 0024  
                      ??_lcd_gotoxy 0006           __end_of_ingresar_password 1A2E  
          _mostrar_guardar_password 244C                           copy_data0 21C8  
                         copy_data1 21E8                            _Read_RTC 1710  
                      _tamanio_anio 004F                     _lcd_send_nibble 1F6A  
                          __Hrparam 0000                            _RtccDate 0047  
                          __Lrparam 0000                   ??_guardar_comando 0024  
                          _RtccTime 004B                            _RtccWrOn 254C  
                __end_of_lcd_comand 256C               guardar_elemento@array 0024  
             guardar_elemento@tecla 002A       guardar_elemento@tamanio_array 0026  
                __end_of_lcd_gotoxy 24E8       guardar_tecla_presionada@letra 002E  
                      _RtccReadDate 1D6C                    __size_of___awdiv 0096  
                      _RtccReadTime 20C4                    __size_of___lwdiv 005C  
               ingresar_comando@key 0027                    __size_of___lwmod 004C  
                      _RtccTimeDate 0068                          sprintf@val 001E  
__size_of_mostrar_actualizacion_dia 0096                            _caratula 1B02  
                  __size_of_isdigit 0022                     ___lwdiv@divisor 0003  
                       ??_Write_RTC 000E                     ___lwdiv@counter 0007  
 __size_of_guardar_tecla_presionada 009C                            __ptext10 23D4  
                          __ptext11 2054                            __ptext20 2478  
                          __ptext12 1FE0                            __ptext21 22AE  
                          __ptext13 250A                            __ptext30 241A  
                          __ptext22 21FE                            __ptext14 1A2E  
                          __ptext31 1F6A                            __ptext23 225A  
                          __ptext15 1936                            __ptext40 1D6C  
                          __ptext32 253A                            __ptext24 22FA  
                          __ptext16 2132                            __ptext41 0000  
                          __ptext33 11FE                            __ptext25 24C4  
                          __ptext17 1B02                            __ptext34 1CD6  
                          __ptext26 2346                            __ptext18 0F9A  
                          __ptext35 182A                            __ptext27 1DFA  
                          __ptext19 24E8                            __ptext36 1384  
                          __ptext28 2528                            __ptext37 254C  
                          __ptext29 255E                            __ptext38 1710  
                          __ptext39 20C4           ?_guardar_tecla_presionada 002E  
                   _validar_comando 1EF4                            _lcd_init 1DFA  
                          _lcd_putc 22FA                    __size_of_sprintf 0264  
                 ?_ingresar_comando 0001              __size_of_lcd_send_byte 0032  
                    _imprimir_tecla 238E                       __size_of_atoi 00D4  
                     __size_of_main 0128                  ??_ingresar_comando 0027  
                          _minuto_d 00BC                            _minuto_u 00BD  
                          _password 00C0                        ?_cambiar_dia 0001  
                          atoi@sign 000B                       ??_Delay1KTCYx 0001  
                   ??_RtccWriteDate 0004                     ??_RtccWriteTime 0004  
                       ??_lcd_putrs 000B           __size_of_guardar_elemento 0074  
                       _OSCTUNEbits 000F9B                          _INTCONbits 000FF2  
                       _tamanio_dia 0051                         _tamanio_mes 0053  
                RtccWriteTime@wasOn 0005   __end_of_mostrar_actualizacion_dia 1CD6  
              __end_of_Delay100TCYx 254C                            isdigit@c 0003  
      guardar_tecla_presionada@doit 0032          __size_of_ingresar_password 00F8  
            __end_of_imprimir_tecla 23D4                           sprintf@ap 001B  
           __end_of_lcd_send_nibble 1FE0                           sprintf@sp 000D  
                  ___lwmod@dividend 0008                          _OSCCONbits 000FD3  
          __end_of_validar_password 219A               RtccWriteDate@tempYear 0007  
           ingresar_password@i_1002 001C                       _lcd_send_byte 241A  
                        _RTCCFGbits 000F3F             __end_of_validar_comando 1F6A  
            validar_comando@validar 0003                            sprintf@c 0023  
                          sprintf@f 000F                     ___lwmod@divisor 000A  
               __end_of_Delay1KTCYx 253A                     ___lwmod@counter 000C  
          __size_of_convertir_a_int 001E                RtccWriteDate@wasAlrm 0006  
              RtccWriteDate@wasWrEn 0009                     ?_imprimir_tecla 0001  
            ingresar_password@clear 000C               lcd_send_nibble@nibble 0002  
