

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 30 21:42:42 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           	psect	idataCOMRAM
    64  002820                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _anio
    68  002820  000F               	dw	15
    69                           
    70                           ;initializer for _dia
    71  002822  0008               	dw	8
    72                           
    73                           ;initializer for _mes
    74  002824  0009               	dw	9
    75                           
    76                           	psect	idataBANK0
    77  0027F8                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _password
    81  0027F8  31                 	db	49
    82  0027F9  32                 	db	50
    83  0027FA  33                 	db	51
    84  0027FB  34                 	db	52
    85  0027FC  35                 	db	53
    86  0027FD  36                 	db	54
    87                           
    88                           ;initializer for _comando
    89  0027FE  78                 	db	120
    90  0027FF  78                 	db	120
    91  002800  78                 	db	120
    92  002801  00                 	db	0
    93                           
    94                           ;initializer for _diasem
    95  002802  0003               	dw	3
    96                           
    97                           ;initializer for _hora
    98  002804  0012               	dw	18
    99                           
   100                           ;initializer for _minuto
   101  002806  001E               	dw	30
   102                           
   103                           	psect	smallconst
   104  000F00                     __psmallconst:
   105                           	opt stack 0
   106  000F00  00                 	db	0
   107  000F01                     _dpowers:
   108                           	opt stack 0
   109  000F01  0001               	dw	1
   110  000F03  000A               	dw	10
   111  000F05  0064               	dw	100
   112  000F07  03E8               	dw	1000
   113  000F09  2710               	dw	10000
   114  000F0B                     __end_of_dpowers:
   115                           	opt stack 0
   116  000F0B                     _LCD_INIT_STRING:
   117                           	opt stack 0
   118  000F0B  28                 	db	40
   119  000F0C  0C                 	db	12
   120  000F0D  01                 	db	1
   121  000F0E  06                 	db	6
   122  000F0F                     __end_of_LCD_INIT_STRING:
   123                           	opt stack 0
   124  000F0F                     STR_14:
   125                           
   126                           ; BSR set to: 15
   127  000F0F  49                 	db	73	;'I'
   128  000F10  6E                 	db	110	;'n'
   129  000F11  73                 	db	115	;'s'
   130  000F12  65                 	db	101	;'e'
   131  000F13  72                 	db	114	;'r'
   132  000F14  74                 	db	116	;'t'
   133  000F15  65                 	db	101	;'e'
   134  000F16  20                 	db	32
   135  000F17  70                 	db	112	;'p'
   136  000F18  61                 	db	97	;'a'
   137  000F19  73                 	db	115	;'s'
   138  000F1A  73                 	db	115	;'s'
   139  000F1B  77                 	db	119	;'w'
   140  000F1C  6F                 	db	111	;'o'
   141  000F1D  72                 	db	114	;'r'
   142  000F1E  64                 	db	100	;'d'
   143  000F1F  00                 	db	0
   144  000F20                     STR_13:
   145                           
   146                           ; BSR set to: 15
   147  000F20  20                 	db	32
   148  000F21  20                 	db	32
   149  000F22  25                 	db	37
   150  000F23  30                 	db	48	;'0'
   151  000F24  32                 	db	50	;'2'
   152  000F25  75                 	db	117	;'u'
   153  000F26  3A                 	db	58	;':'
   154  000F27  25                 	db	37
   155  000F28  30                 	db	48	;'0'
   156  000F29  32                 	db	50	;'2'
   157  000F2A  75                 	db	117	;'u'
   158  000F2B  3A                 	db	58	;':'
   159  000F2C  25                 	db	37
   160  000F2D  30                 	db	48	;'0'
   161  000F2E  32                 	db	50	;'2'
   162  000F2F  75                 	db	117	;'u'
   163  000F30  00                 	db	0
   164  000F31                     STR_20:
   165                           
   166                           ; BSR set to: 15
   167  000F31  49                 	db	73	;'I'
   168  000F32  6E                 	db	110	;'n'
   169  000F33  73                 	db	115	;'s'
   170  000F34  65                 	db	101	;'e'
   171  000F35  72                 	db	114	;'r'
   172  000F36  74                 	db	116	;'t'
   173  000F37  65                 	db	101	;'e'
   174  000F38  20                 	db	32
   175  000F39  64                 	db	100	;'d'
   176  000F3A  69                 	db	105	;'i'
   177  000F3B  61                 	db	97	;'a'
   178  000F3C  3A                 	db	58	;':'
   179  000F3D  00                 	db	0
   180  000F3E                     STR_22:
   181                           
   182                           ; BSR set to: 15
   183  000F3E  63                 	db	99	;'c'
   184  000F3F  61                 	db	97	;'a'
   185  000F40  6D                 	db	109	;'m'
   186  000F41  62                 	db	98	;'b'
   187  000F42  69                 	db	105	;'i'
   188  000F43  61                 	db	97	;'a'
   189  000F44  72                 	db	114	;'r'
   190  000F45  20                 	db	32
   191  000F46  70                 	db	112	;'p'
   192  000F47  61                 	db	97	;'a'
   193  000F48  73                 	db	115	;'s'
   194  000F49  73                 	db	115	;'s'
   195  000F4A  00                 	db	0
   196  000F4B                     STR_15:
   197                           
   198                           ; BSR set to: 15
   199  000F4B  45                 	db	69	;'E'
   200  000F4C  52                 	db	82	;'R'
   201  000F4D  52                 	db	82	;'R'
   202  000F4E  4F                 	db	79	;'O'
   203  000F4F  52                 	db	82	;'R'
   204  000F50  20                 	db	32
   205  000F51  70                 	db	112	;'p'
   206  000F52  61                 	db	97	;'a'
   207  000F53  73                 	db	115	;'s'
   208  000F54  73                 	db	115	;'s'
   209  000F55  00                 	db	0
   210  000F56                     STR_18:
   211                           
   212                           ; BSR set to: 15
   213  000F56  57                 	db	87	;'W'
   214  000F57  65                 	db	101	;'e'
   215  000F58  6C                 	db	108	;'l'
   216  000F59  63                 	db	99	;'c'
   217  000F5A  6F                 	db	111	;'o'
   218  000F5B  6D                 	db	109	;'m'
   219  000F5C  65                 	db	101	;'e'
   220  000F5D  20                 	db	32
   221  000F5E  00                 	db	0
   222  000F5F                     STR_12:
   223                           
   224                           ; BSR set to: 15
   225  000F5F  25                 	db	37
   226  000F60  73                 	db	115	;'s'
   227  000F61  2F                 	db	47
   228  000F62  25                 	db	37
   229  000F63  73                 	db	115	;'s'
   230  000F64  2F                 	db	47
   231  000F65  25                 	db	37
   232  000F66  73                 	db	115	;'s'
   233  000F67  00                 	db	0
   234  000F68                     STR_23:
   235                           
   236                           ; BSR set to: 15
   237  000F68  28                 	db	40
   238  000F69  6E                 	db	110	;'n'
   239  000F6A  75                 	db	117	;'u'
   240  000F6B  6C                 	db	108	;'l'
   241  000F6C  6C                 	db	108	;'l'
   242  000F6D  29                 	db	41
   243  000F6E  00                 	db	0
   244  000F6F                     STR_1:
   245                           
   246                           ; BSR set to: 15
   247  000F6F  25                 	db	37
   248  000F70  30                 	db	48	;'0'
   249  000F71  31                 	db	49	;'1'
   250  000F72  75                 	db	117	;'u'
   251  000F73  00                 	db	0
   252  000F74                     STR_19:
   253                           
   254                           ; BSR set to: 15
   255  000F74  30                 	db	48	;'0'
   256  000F75  30                 	db	48	;'0'
   257  000F76  31                 	db	49	;'1'
   258  000F77  00                 	db	0
   259  000F78                     STR_21:
   260                           
   261                           ; BSR set to: 15
   262  000F78  30                 	db	48	;'0'
   263  000F79  30                 	db	48	;'0'
   264  000F7A  32                 	db	50	;'2'
   265  000F7B  00                 	db	0
   266  000F7C                     STR_17:
   267                           
   268                           ; BSR set to: 15
   269  000F7C  78                 	db	120	;'x'
   270  000F7D  78                 	db	120	;'x'
   271  000F7E  78                 	db	120	;'x'
   272  000F7F  00                 	db	0
   273  000F80                     STR_10:
   274                           
   275                           ; BSR set to: 15
   276  000F80  25                 	db	37
   277  000F81  64                 	db	100	;'d'
   278  000F82  00                 	db	0
   279  000F83                     STR_8:
   280                           
   281                           ; BSR set to: 15
   282  000F83  23                 	db	35
   283  000F84  00                 	db	0
   284  000F85                     STR_3:
   285                           
   286                           ; BSR set to: 15
   287  000F85  2A                 	db	42
   288  000F86  00                 	db	0
   289  000F87                     STR_4:
   290                           
   291                           ; BSR set to: 15
   292  000F87  41                 	db	65	;'A'
   293  000F88  00                 	db	0
   294  000F89                     STR_5:
   295                           
   296                           ; BSR set to: 15
   297  000F89  42                 	db	66	;'B'
   298  000F8A  00                 	db	0
   299  000F8B                     STR_6:
   300                           
   301                           ; BSR set to: 15
   302  000F8B  43                 	db	67	;'C'
   303  000F8C  00                 	db	0
   304  000F8D                     STR_9:
   305                           
   306                           ; BSR set to: 15
   307  000F8D  44                 	db	68	;'D'
   308  000F8E  00                 	db	0
   309  0000                     
   310                           ; #config settings
   311  000F8F  00                 	db	0	; dummy byte at the end
   312  0000                     
   313                           	psect	nvBANK0
   314  0000C7                     __pnvBANK0:
   315                           	opt stack 0
   316  0000C7                     _anio_d:
   317                           	opt stack 0
   318  0000C7                     	ds	1
   319  0000C8                     _anio_u:
   320                           	opt stack 0
   321  0000C8                     	ds	1
   322  0000C9                     _dia_semana:
   323                           	opt stack 0
   324  0000C9                     	ds	1
   325  0000CA                     _fecha_d:
   326                           	opt stack 0
   327  0000CA                     	ds	1
   328  0000CB                     _fecha_u:
   329                           	opt stack 0
   330  0000CB                     	ds	1
   331  0000CC                     _hora_d:
   332                           	opt stack 0
   333  0000CC                     	ds	1
   334  0000CD                     _hora_u:
   335                           	opt stack 0
   336  0000CD                     	ds	1
   337  0000CE                     _mes_d:
   338                           	opt stack 0
   339  0000CE                     	ds	1
   340  0000CF                     _mes_u:
   341                           	opt stack 0
   342  0000CF                     	ds	1
   343  0000D0                     _minuto_d:
   344                           	opt stack 0
   345  0000D0                     	ds	1
   346  0000D1                     _minuto_u:
   347                           	opt stack 0
   348  0000D1                     	ds	1
   349  0000D2                     _segundo_d:
   350                           	opt stack 0
   351  0000D2                     	ds	1
   352  0000D3                     _segundo_u:
   353                           	opt stack 0
   354  0000D3                     	ds	1
   355  0000                     _ANCON0	set	3912
   356  0000                     _ANCON1	set	3913
   357  0000                     _RTCCFG	set	3903
   358  0000                     _RTCCFGbits	set	3903
   359  0000                     _ADCON0	set	4034
   360  0000                     _ADCON1	set	4033
   361  0000                     _ALRMCFGbits	set	3985
   362  0000                     _EECON2	set	4007
   363  0000                     _INTCONbits	set	4082
   364  0000                     _LATAbits	set	3977
   365  0000                     _LATBbits	set	3978
   366  0000                     _OSCCONbits	set	4051
   367  0000                     _OSCTUNEbits	set	3995
   368  0000                     _PIE3bits	set	4003
   369  0000                     _PORTAbits	set	3968
   370  0000                     _PORTCbits	set	3970
   371  0000                     _RTCVALH	set	3993
   372  0000                     _RTCVALL	set	3992
   373  0000                     _T1CONbits	set	4045
   374  0000                     _TRISA	set	3986
   375  0000                     _TRISB	set	3987
   376  0000                     _TRISBbits	set	3987
   377  0000                     _TRISC	set	3988
   378                           
   379                           	psect	cinit
   380  0023AC                     __pcinit:
   381                           	opt stack 0
   382  0023AC                     start_initialization:
   383                           	opt stack 0
   384  0023AC                     __initialization:
   385                           	opt stack 0
   386                           
   387                           ; Clear objects allocated to BANK0 (87 bytes)
   388  0023AC  EE00  F060         	lfsr	0,__pbssBANK0
   389  0023B0  0E57               	movlw	87
   390  0023B2                     clear_0:
   391  0023B2  6AEE               	clrf	postinc0,c
   392  0023B4  06E8               	decf	wreg,f,c
   393  0023B6  E1FD               	bnz	clear_0
   394                           
   395                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   396  0023B8  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   397                           
   398                           ; Clear objects allocated to COMRAM (13 bytes)
   399  0023BA  EE00  F04C         	lfsr	0,__pbssCOMRAM
   400  0023BE  0E0D               	movlw	13
   401  0023C0                     clear_1:
   402  0023C0  6AEE               	clrf	postinc0,c
   403  0023C2  06E8               	decf	wreg,f,c
   404  0023C4  E1FD               	bnz	clear_1
   405                           
   406                           ; Initialize objects allocated to BANK0 (16 bytes)
   407                           ; load TBLPTR registers with __pidataBANK0
   408  0023C6  0EF8               	movlw	low __pidataBANK0
   409  0023C8  6EF6               	movwf	tblptrl,c
   410  0023CA  0E27               	movlw	high __pidataBANK0
   411  0023CC  6EF7               	movwf	tblptrh,c
   412  0023CE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   413  0023D0  6EF8               	movwf	tblptru,c
   414  0023D2  EE00  F0B7         	lfsr	0,__pdataBANK0
   415  0023D6  EE10 F010          	lfsr	1,16
   416  0023DA                     copy_data0:
   417  0023DA  0009               	tblrd		*+
   418  0023DC  CFF5 FFEE          	movff	tablat,postinc0
   419  0023E0  50E5               	movf	postdec1,w,c
   420  0023E2  50E1               	movf	fsr1l,w,c
   421  0023E4  E1FA               	bnz	copy_data0
   422                           
   423                           ; Initialize objects allocated to COMRAM (6 bytes)
   424                           ; load TBLPTR registers with __pidataCOMRAM
   425  0023E6  0E20               	movlw	low __pidataCOMRAM
   426  0023E8  6EF6               	movwf	tblptrl,c
   427  0023EA  0E28               	movlw	high __pidataCOMRAM
   428  0023EC  6EF7               	movwf	tblptrh,c
   429  0023EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   430  0023F0  6EF8               	movwf	tblptru,c
   431  0023F2  EE00  F059         	lfsr	0,__pdataCOMRAM
   432  0023F6  EE10 F006          	lfsr	1,6
   433  0023FA                     copy_data1:
   434  0023FA  0009               	tblrd		*+
   435  0023FC  CFF5 FFEE          	movff	tablat,postinc0
   436  002400  50E5               	movf	postdec1,w,c
   437  002402  50E1               	movf	fsr1l,w,c
   438  002404  E1FA               	bnz	copy_data1
   439  002406                     end_of_initialization:
   440                           	opt stack 0
   441  002406                     __end_of__initialization:
   442                           	opt stack 0
   443  002406  0E00               	movlw	low (__Lmediumconst shr (0+16))
   444  002408  6EF8               	movwf	tblptru,c
   445  00240A  0100               	movlb	0
   446  00240C  EFC3  F009         	goto	_main	;jump to C main() function
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	bitbssCOMRAM
   457  0002F8                     __pbitbssCOMRAM:
   458                           	opt stack 0
   459  0002F8                     _flag:
   460                           	opt stack 0
   461  0002F8                     	ds	1
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           postdec1	equ	0xFE5
   469                           fsr1l	equ	0xFE1
   470                           
   471                           	psect	bssCOMRAM
   472  00004C                     __pbssCOMRAM:
   473                           	opt stack 0
   474  00004C                     _tamanio_password:
   475                           	opt stack 0
   476  00004C                     	ds	2
   477  00004E                     _key:
   478                           	opt stack 0
   479  00004E                     	ds	1
   480  00004F                     _RtccDate:
   481                           	opt stack 0
   482  00004F                     	ds	4
   483  000053                     _RtccTime:
   484                           	opt stack 0
   485  000053                     	ds	4
   486  000057                     _tamanio_dia:
   487                           	opt stack 0
   488  000057                     	ds	2
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1l	equ	0xFE1
   497                           
   498                           	psect	dataCOMRAM
   499  000059                     __pdataCOMRAM:
   500                           	opt stack 0
   501  000059                     _anio:
   502                           	opt stack 0
   503  000059                     	ds	2
   504  00005B                     _dia:
   505                           	opt stack 0
   506  00005B                     	ds	2
   507  00005D                     _mes:
   508                           	opt stack 0
   509  00005D                     	ds	2
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssBANK0
   520  000060                     __pbssBANK0:
   521                           	opt stack 0
   522  000060                     _RtccAlrmTimeDate:
   523                           	opt stack 0
   524  000060                     	ds	8
   525  000068                     _RtccTimeDate:
   526                           	opt stack 0
   527  000068                     	ds	8
   528  000070                     _Rtcc_read_TimeDate:
   529                           	opt stack 0
   530  000070                     	ds	8
   531  000078                     _current_password:
   532                           	opt stack 0
   533  000078                     	ds	6
   534  00007E                     _RtccTimeVal:
   535                           	opt stack 0
   536  00007E                     	ds	4
   537  000082                     _a:
   538                           	opt stack 0
   539  000082                     	ds	2
   540  000084                     _autorizado:
   541                           	opt stack 0
   542  000084                     	ds	2
   543  000086                     _b:
   544                           	opt stack 0
   545  000086                     	ds	2
   546  000088                     _c:
   547                           	opt stack 0
   548  000088                     	ds	2
   549  00008A                     _i:
   550                           	opt stack 0
   551  00008A                     	ds	2
   552  00008C                     _j:
   553                           	opt stack 0
   554  00008C                     	ds	2
   555  00008E                     _k:
   556                           	opt stack 0
   557  00008E                     	ds	2
   558  000090                     _ocultar_teclas:
   559                           	opt stack 0
   560  000090                     	ds	2
   561  000092                     _segundo:
   562                           	opt stack 0
   563  000092                     	ds	2
   564  000094                     _tamanio_anio:
   565                           	opt stack 0
   566  000094                     	ds	2
   567  000096                     _tamanio_comando:
   568                           	opt stack 0
   569  000096                     	ds	2
   570  000098                     _tamanio_mes:
   571                           	opt stack 0
   572  000098                     	ds	2
   573  00009A                     _buffer2:
   574                           	opt stack 0
   575  00009A                     	ds	20
   576  0000AE                     _day:
   577                           	opt stack 0
   578  0000AE                     	ds	3
   579  0000B1                     _month:
   580                           	opt stack 0
   581  0000B1                     	ds	3
   582  0000B4                     _year:
   583                           	opt stack 0
   584  0000B4                     	ds	3
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           postdec1	equ	0xFE5
   592                           fsr1l	equ	0xFE1
   593                           
   594                           	psect	dataBANK0
   595  0000B7                     __pdataBANK0:
   596                           	opt stack 0
   597  0000B7                     _password:
   598                           	opt stack 0
   599  0000B7                     	ds	6
   600  0000BD                     _comando:
   601                           	opt stack 0
   602  0000BD                     	ds	4
   603  0000C1                     _diasem:
   604                           	opt stack 0
   605  0000C1                     	ds	2
   606  0000C3                     _hora:
   607                           	opt stack 0
   608  0000C3                     	ds	2
   609  0000C5                     _minuto:
   610                           	opt stack 0
   611  0000C5                     	ds	2
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1l	equ	0xFE1
   620                           
   621                           	psect	cstackCOMRAM
   622  000001                     __pcstackCOMRAM:
   623                           	opt stack 0
   624  000001                     ??_isdigit:
   625  000001                     ??_guardar_current_password:
   626  000001                     ??_lcd_send_nibble:
   627  000001                     ?___wmul:
   628                           	opt stack 0
   629  000001                     ?___awdiv:
   630                           	opt stack 0
   631  000001                     ?___lwdiv:
   632                           	opt stack 0
   633  000001                     Delay100TCYx@unit:
   634                           	opt stack 0
   635  000001                     Delay1KTCYx@unit:
   636                           	opt stack 0
   637  000001                     validar_comando@candidato:
   638                           	opt stack 0
   639  000001                     RtccReadDate@pDt:
   640                           	opt stack 0
   641  000001                     RtccReadTime@pTm:
   642                           	opt stack 0
   643  000001                     RtccWriteDate@pDt:
   644                           	opt stack 0
   645  000001                     RtccWriteTime@pTm:
   646                           	opt stack 0
   647  000001                     ___wmul@multiplier:
   648                           	opt stack 0
   649  000001                     ___awdiv@dividend:
   650                           	opt stack 0
   651  000001                     ___lwdiv@dividend:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x0
   655  000001                     	ds	1
   656  000002                     lcd_send_nibble@nibble:
   657                           	opt stack 0
   658  000002                     _isdigit$2159:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x1
   662  000002                     	ds	1
   663  000003                     guardar_current_password@valor:
   664                           	opt stack 0
   665  000003                     lcd_send_byte@n:
   666                           	opt stack 0
   667  000003                     RtccWriteDate@di:
   668                           	opt stack 0
   669  000003                     RtccWriteTime@di:
   670                           	opt stack 0
   671  000003                     isdigit@c:
   672                           	opt stack 0
   673  000003                     validar_comando@validar:
   674                           	opt stack 0
   675  000003                     validar_password@i:
   676                           	opt stack 0
   677  000003                     ___wmul@multiplicand:
   678                           	opt stack 0
   679  000003                     ___awdiv@divisor:
   680                           	opt stack 0
   681  000003                     ___lwdiv@divisor:
   682                           	opt stack 0
   683  000003                     RtccReadDate@rTD1:
   684                           	opt stack 0
   685  000003                     RtccReadTime@rTD1:
   686                           	opt stack 0
   687                           
   688                           ; 8 bytes @ 0x2
   689  000003                     	ds	1
   690  000004                     lcd_send_byte@address:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x3
   694  000004                     	ds	1
   695  000005                     ??_validar_comando:
   696  000005                     lcd_init@i:
   697                           	opt stack 0
   698  000005                     lcd_gotoxy@y:
   699                           	opt stack 0
   700  000005                     lcd_comand@d:
   701                           	opt stack 0
   702  000005                     RtccWriteDate@wasOn:
   703                           	opt stack 0
   704  000005                     RtccWriteTime@wasOn:
   705                           	opt stack 0
   706  000005                     ___awdiv@counter:
   707                           	opt stack 0
   708  000005                     ___wmul@product:
   709                           	opt stack 0
   710  000005                     ___lwdiv@quotient:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x4
   714  000005                     	ds	1
   715  000006                     lcd_gotoxy@x:
   716                           	opt stack 0
   717  000006                     RtccWriteDate@wasAlrm:
   718                           	opt stack 0
   719  000006                     RtccWriteTime@wasAlrm:
   720                           	opt stack 0
   721  000006                     ___awdiv@sign:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x5
   725  000006                     	ds	1
   726  000007                     ?_atoi:
   727                           	opt stack 0
   728  000007                     lcd_gotoxy@address:
   729                           	opt stack 0
   730  000007                     RtccWriteTime@wasWrEn:
   731                           	opt stack 0
   732  000007                     ___lwdiv@counter:
   733                           	opt stack 0
   734  000007                     RtccWriteDate@tempYear:
   735                           	opt stack 0
   736  000007                     atoi@s:
   737                           	opt stack 0
   738  000007                     ___awdiv@quotient:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x6
   742  000007                     	ds	1
   743  000008                     ?___lwmod:
   744                           	opt stack 0
   745  000008                     lcd_putc@c:
   746                           	opt stack 0
   747  000008                     validar_comando@i:
   748                           	opt stack 0
   749  000008                     RtccWriteTime@tempMinSec:
   750                           	opt stack 0
   751  000008                     ___lwmod@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x7
   755  000008                     	ds	1
   756  000009                     ??_atoi:
   757  000009                     RtccWriteDate@wasWrEn:
   758                           	opt stack 0
   759  000009                     lcd_putrs@ptr:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x8
   763  000009                     	ds	1
   764  00000A                     RtccWriteDate@tempDayMonth:
   765                           	opt stack 0
   766  00000A                     RtccWriteTime@tempHourWDay:
   767                           	opt stack 0
   768  00000A                     ___lwmod@divisor:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x9
   772  00000A                     	ds	1
   773  00000B                     ??_ingresar_password:
   774  00000B                     atoi@sign:
   775                           	opt stack 0
   776  00000B                     clear@limpiar:
   777                           	opt stack 0
   778  00000B                     RtccReadDate@rTD0:
   779                           	opt stack 0
   780  00000B                     RtccReadTime@rTD0:
   781                           	opt stack 0
   782                           
   783                           ; 8 bytes @ 0xA
   784  00000B                     	ds	1
   785  00000C                     ___lwmod@counter:
   786                           	opt stack 0
   787  00000C                     RtccWriteDate@tempHourWDay:
   788                           	opt stack 0
   789  00000C                     atoi@a:
   790                           	opt stack 0
   791  00000C                     ingresar_password@clear:
   792                           	opt stack 0
   793                           
   794                           ; 16 bytes @ 0xB
   795  00000C                     	ds	1
   796  00000D                     ?_sprintf:
   797                           	opt stack 0
   798  00000D                     sprintf@sp:
   799                           	opt stack 0
   800  00000D                     clear@clear:
   801                           	opt stack 0
   802                           
   803                           ; 16 bytes @ 0xC
   804  00000D                     	ds	1
   805  00000E                     convertir_a_int@array:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0xD
   809  00000E                     	ds	1
   810  00000F                     sprintf@f:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0xE
   814  00000F                     	ds	1
   815  000010                     convertir_a_int@valor:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0xF
   819  000010                     	ds	2
   820  000012                     
   821                           ; 0 bytes @ 0x11
   822  000012                     	ds	1
   823  000013                     
   824                           ; 0 bytes @ 0x12
   825  000013                     	ds	4
   826  000017                     ??_sprintf:
   827                           
   828                           ; 0 bytes @ 0x16
   829  000017                     	ds	4
   830  00001B                     sprintf@prec:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x1A
   834  00001B                     	ds	1
   835  00001C                     ingresar_password@i_1013:
   836                           	opt stack 0
   837  00001C                     sprintf@cp:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x1B
   841  00001C                     	ds	1
   842  00001D                     clear@i:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x1C
   846  00001D                     	ds	1
   847  00001E                     ingresar_password@i:
   848                           	opt stack 0
   849  00001E                     sprintf@ap:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x1D
   853  00001E                     	ds	2
   854  000020                     sprintf@len:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x1F
   858  000020                     	ds	2
   859  000022                     sprintf@val:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x21
   863  000022                     	ds	2
   864  000024                     sprintf@flag:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x23
   868  000024                     	ds	1
   869  000025                     sprintf@c:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x24
   873  000025                     	ds	1
   874  000026                     sprintf@width:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x25
   878  000026                     	ds	2
   879  000028                     ??_guardar_comando:
   880  000028                     imprimir_tecla@tecla:
   881                           	opt stack 0
   882  000028                     inicializar_elemento@array:
   883                           	opt stack 0
   884  000028                     guardar_elemento@array:
   885                           	opt stack 0
   886  000028                     caratula@titulo:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x27
   890  000028                     	ds	1
   891  000029                     mostrar_guardar_password@tecla:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x28
   895  000029                     	ds	1
   896  00002A                     guardar_comando@tecla:
   897                           	opt stack 0
   898  00002A                     inicializar_elemento@val:
   899                           	opt stack 0
   900  00002A                     guardar_elemento@tamanio_array:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x29
   904  00002A                     	ds	1
   905  00002B                     ingresar_comando@key:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x2A
   909  00002B                     	ds	1
   910  00002C                     ??_guardar_elemento:
   911                           
   912                           ; 0 bytes @ 0x2B
   913  00002C                     	ds	2
   914  00002E                     guardar_elemento@tecla:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x2D
   918  00002E                     	ds	1
   919  00002F                     cambiar_dia@tecla:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x2E
   923  00002F                     	ds	1
   924  000030                     cambiar_dia@valor:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x2F
   928  000030                     	ds	2
   929  000032                     guardar_tecla_presionada@letra:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x31
   933  000032                     	ds	2
   934  000034                     guardar_tecla_presionada@i:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x33
   938  000034                     	ds	2
   939  000036                     guardar_tecla_presionada@doit:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x35
   943  000036                     	ds	2
   944  000038                     leer_teclado@ocultar:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x37
   948  000038                     	ds	2
   949  00003A                     leer_teclado@doit:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x39
   953  00003A                     	ds	2
   954  00003C                     ??_leer_teclado:
   955                           
   956                           ; 0 bytes @ 0x3B
   957  00003C                     	ds	1
   958  00003D                     leer_teclado@i:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x3C
   962  00003D                     	ds	2
   963  00003F                     ??_main:
   964                           
   965                           ; 0 bytes @ 0x3E
   966  00003F                     	ds	1
   967  000040                     main@puntero_funcion:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x3F
   971  000040                     	ds	2
   972  000042                     main@ocultar_teclas:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x41
   976  000042                     	ds	2
   977  000044                     main@limpiar:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x43
   981  000044                     	ds	2
   982  000046                     main@i:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x45
   986  000046                     	ds	2
   987  000048                     main@i_1044:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x47
   991  000048                     	ds	2
   992  00004A                     main@validacion:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x49
   996  00004A                     	ds	2
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006 ;;
  1007 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1008 ;;
  1009 ;; *************** function _main *****************
  1010 ;; Defined at:
  1011 ;;		line 147 in file "main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  i               2   69[COMRAM] int 
  1016 ;;  i               2   71[COMRAM] int 
  1017 ;;  validacion      2   73[COMRAM] int 
  1018 ;;  limpiar         2   67[COMRAM] int 
  1019 ;;  ocultar_tecl    2   65[COMRAM] int 
  1020 ;;  puntero_func    2   63[COMRAM] PTR unsigned char 
  1021 ;;		 -> ingresar_comando(2), cambiar_dia(2), 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  2  298[None  ] int 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1032 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1034 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1035 ;;Total ram usage:       13 bytes
  1036 ;; Hardware stack levels required when called:    9
  1037 ;; This function calls:
  1038 ;;		_Read_RTC
  1039 ;;		_Setup
  1040 ;;		_caratula
  1041 ;;		_clear
  1042 ;;		_ingresar_password
  1043 ;;		_inicializar_fecha
  1044 ;;		_lcd_gotoxy
  1045 ;;		_lcd_putrs
  1046 ;;		_leer_teclado
  1047 ;;		_restaurar_comando
  1048 ;;		_validar_comando
  1049 ;; This function is called by:
  1050 ;;		Startup code after reset
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           	psect	text0
  1055  001386                     __ptext0:
  1056                           	opt stack 0
  1057  001386                     _main:
  1058                           	opt stack 22
  1059                           
  1060                           ;main.c: 149: Setup();
  1061                           
  1062                           ; BSR set to: 15
  1063                           ;incstack = 0
  1064  001386  ECD1  F012         	call	_Setup	;wreg free
  1065                           
  1066                           ;main.c: 150: inicializar_fecha();
  1067  00138A  EC3B  F013         	call	_inicializar_fecha	;wreg free
  1068                           
  1069                           ;main.c: 151: restaurar_comando();
  1070  00138E  EC9D  F013         	call	_restaurar_comando	;wreg free
  1071                           
  1072                           ;main.c: 153: int ocultar_teclas = 1;
  1073  001392  0E00               	movlw	0
  1074  001394  6E43               	movwf	main@ocultar_teclas+1,c
  1075  001396  0E01               	movlw	1
  1076  001398  6E42               	movwf	main@ocultar_teclas,c
  1077                           
  1078                           ;main.c: 154: int validacion;
  1079                           ;main.c: 155: int limpiar = 1;
  1080  00139A  0E00               	movlw	0
  1081  00139C  6E45               	movwf	main@limpiar+1,c
  1082  00139E  0E01               	movlw	1
  1083  0013A0  6E44               	movwf	main@limpiar,c
  1084                           
  1085                           ;main.c: 156: char * puntero_funcion = ingresar_comando;
  1086  0013A2  0E16               	movlw	low _ingresar_comando
  1087  0013A4  6E40               	movwf	main@puntero_funcion,c
  1088  0013A6  0E28               	movlw	high _ingresar_comando
  1089  0013A8  6E41               	movwf	main@puntero_funcion+1,c
  1090  0013AA  D000               	goto	l3258
  1091  0013AC                     l3258:
  1092                           
  1093                           ;main.c: 159: {
  1094                           ;main.c: 160: Read_RTC();
  1095  0013AC  EC11  F00C         	call	_Read_RTC	;wreg free
  1096                           
  1097                           ;main.c: 162: if (!autorizado){
  1098  0013B0  0100               	movlb	0	; () banked
  1099  0013B2  5184               	movf	_autorizado& (0+255),w,b
  1100  0013B4  0100               	movlb	0	; () banked
  1101  0013B6  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  1102  0013B8  A4D8               	btfss	status,2,c
  1103  0013BA  D00D               	goto	l3266
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 163: leer_teclado(ocultar_teclas,mostrar_guardar_password);
  1107  0013BC  C042  F038         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1108  0013C0  C043  F039         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1109  0013C4  0EE6               	movlw	low _mostrar_guardar_password
  1110  0013C6  6E3A               	movwf	leer_teclado@doit,c
  1111  0013C8  0E26               	movlw	high _mostrar_guardar_password
  1112  0013CA  6E3B               	movwf	leer_teclado@doit+1,c
  1113  0013CC  ECA2  F00C         	call	_leer_teclado	;wreg free
  1114                           
  1115                           ;main.c: 164: ingresar_password();
  1116  0013D0  ECB7  F00D         	call	_ingresar_password	;wreg free
  1117                           
  1118                           ;main.c: 165: }else{
  1119  0013D4  D7EB               	goto	l3258
  1120  0013D6                     l3266:
  1121                           
  1122                           ;main.c: 167: validar_comando("xxx",&validacion);
  1123  0013D6  0E7C               	movlw	low STR_17
  1124  0013D8  6E01               	movwf	validar_comando@candidato,c
  1125  0013DA  0E0F               	movlw	high STR_17
  1126  0013DC  6E02               	movwf	validar_comando@candidato+1,c
  1127  0013DE  0E4A               	movlw	low main@validacion
  1128  0013E0  6E03               	movwf	validar_comando@validar,c
  1129  0013E2  0E00               	movlw	high main@validacion
  1130  0013E4  6E04               	movwf	validar_comando@validar+1,c
  1131  0013E6  EC14  F010         	call	_validar_comando	;wreg free
  1132                           
  1133                           ;main.c: 168: if(validacion){
  1134  0013EA  504A               	movf	main@validacion,w,c
  1135  0013EC  104B               	iorwf	main@validacion+1,w,c
  1136  0013EE  B4D8               	btfsc	status,2,c
  1137  0013F0  D007               	goto	l3272
  1138                           
  1139                           ;main.c: 169: caratula("Welcome ");
  1140  0013F2  0E56               	movlw	low STR_18
  1141  0013F4  6E28               	movwf	caratula@titulo,c
  1142  0013F6  0E0F               	movlw	high STR_18
  1143  0013F8  6E29               	movwf	caratula@titulo+1,c
  1144  0013FA  EC9D  F00E         	call	_caratula	;wreg free
  1145  0013FE  D000               	goto	l3272
  1146  001400                     l3272:
  1147                           
  1148                           ;main.c: 170: }
  1149                           ;main.c: 172: validar_comando("001",&validacion);
  1150  001400  0E74               	movlw	low STR_19
  1151  001402  6E01               	movwf	validar_comando@candidato,c
  1152  001404  0E0F               	movlw	high STR_19
  1153  001406  6E02               	movwf	validar_comando@candidato+1,c
  1154  001408  0E4A               	movlw	low main@validacion
  1155  00140A  6E03               	movwf	validar_comando@validar,c
  1156  00140C  0E00               	movlw	high main@validacion
  1157  00140E  6E04               	movwf	validar_comando@validar+1,c
  1158  001410  EC14  F010         	call	_validar_comando	;wreg free
  1159                           
  1160                           ;main.c: 173: if(validacion){
  1161  001414  504A               	movf	main@validacion,w,c
  1162  001416  104B               	iorwf	main@validacion+1,w,c
  1163  001418  B4D8               	btfsc	status,2,c
  1164  00141A  D04D               	goto	l3306
  1165                           
  1166                           ;main.c: 174: puntero_funcion = cambiar_dia;
  1167  00141C  0E88               	movlw	low _cambiar_dia
  1168  00141E  6E40               	movwf	main@puntero_funcion,c
  1169  001420  0E21               	movlw	high _cambiar_dia
  1170  001422  6E41               	movwf	main@puntero_funcion+1,c
  1171                           
  1172                           ;main.c: 176: clear(limpiar);
  1173  001424  C044  F00B         	movff	main@limpiar,clear@limpiar
  1174  001428  C045  F00C         	movff	main@limpiar+1,clear@limpiar+1
  1175  00142C  EC6C  F011         	call	_clear	;wreg free
  1176                           
  1177                           ;main.c: 177: limpiar = 0;
  1178  001430  0E00               	movlw	0
  1179  001432  6E45               	movwf	main@limpiar+1,c
  1180  001434  0E00               	movlw	0
  1181  001436  6E44               	movwf	main@limpiar,c
  1182                           
  1183                           ;main.c: 179: lcd_gotoxy(1,1);
  1184  001438  0E01               	movlw	1
  1185  00143A  6E05               	movwf	lcd_gotoxy@y,c
  1186  00143C  0E01               	movlw	1
  1187  00143E  ECAF  F013         	call	_lcd_gotoxy
  1188                           
  1189                           ;main.c: 180: lcd_putrs("Inserte dia:");
  1190  001442  0E31               	movlw	low STR_20
  1191  001444  6E09               	movwf	lcd_putrs@ptr,c
  1192  001446  0E0F               	movlw	high STR_20
  1193  001448  6E0A               	movwf	lcd_putrs@ptr+1,c
  1194  00144A  EC36  F012         	call	_lcd_putrs	;wreg free
  1195                           
  1196                           ;main.c: 182: lcd_gotoxy(1,2);
  1197  00144E  0E02               	movlw	2
  1198  001450  6E05               	movwf	lcd_gotoxy@y,c
  1199  001452  0E01               	movlw	1
  1200  001454  ECAF  F013         	call	_lcd_gotoxy
  1201                           
  1202                           ;main.c: 183: lcd_putrs(day);
  1203  001458  0EAE               	movlw	low _day
  1204  00145A  6E09               	movwf	lcd_putrs@ptr,c
  1205  00145C  0E00               	movlw	high _day
  1206  00145E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1207  001460  EC36  F012         	call	_lcd_putrs	;wreg free
  1208                           
  1209                           ;main.c: 185: if (tamanio_dia >= 2){
  1210  001464  BE58               	btfsc	_tamanio_dia+1,7,c
  1211  001466  D027               	goto	l3306
  1212  001468  5058               	movf	_tamanio_dia+1,w,c
  1213  00146A  E104               	bnz	u2920
  1214  00146C  0E02               	movlw	2
  1215  00146E  5C57               	subwf	_tamanio_dia,w,c
  1216  001470  A0D8               	btfss	status,0,c
  1217  001472  D021               	goto	l3306
  1218  001474                     u2920:
  1219                           
  1220                           ;main.c: 186: for (int i=0;i<6;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1221  001474  0E00               	movlw	0
  1222  001476  6E47               	movwf	main@i+1,c
  1223  001478  0E00               	movlw	0
  1224  00147A  6E46               	movwf	main@i,c
  1225  00147C                     l3294:
  1226  00147C  BE47               	btfsc	main@i+1,7,c
  1227  00147E  D008               	goto	l3298
  1228  001480  5047               	movf	main@i+1,w,c
  1229  001482  E112               	bnz	l3302
  1230  001484  0E06               	movlw	6
  1231  001486  5C46               	subwf	main@i,w,c
  1232  001488  B0D8               	btfsc	status,0,c
  1233  00148A  D00E               	goto	l3302
  1234  00148C  D001               	goto	l3298
  1235  00148E  D00C               	goto	l3302
  1236  001490                     l3298:
  1237  001490  0EFF               	movlw	255
  1238  001492  6E3F               	movwf	??_main& (0+255),c
  1239  001494  0E8A               	movlw	138
  1240  001496                     u3017:
  1241  001496  2EE8               	decfsz	wreg,f,c
  1242  001498  D7FE               	goto	u3017
  1243  00149A  2E3F               	decfsz	??_main& (0+255),f,c
  1244  00149C  D7FC               	goto	u3017
  1245  00149E  D000               	nop2	
  1246  0014A0  4A46               	infsnz	main@i,f,c
  1247  0014A2  2A47               	incf	main@i+1,f,c
  1248  0014A4  D7EB               	goto	l3294
  1249  0014A6  D000               	goto	l3302
  1250  0014A8                     l3302:
  1251                           
  1252                           ;main.c: 187: tamanio_dia = 0;
  1253  0014A8  0E00               	movlw	0
  1254  0014AA  6E58               	movwf	_tamanio_dia+1,c
  1255  0014AC  0E00               	movlw	0
  1256  0014AE  6E57               	movwf	_tamanio_dia,c
  1257                           
  1258                           ;main.c: 188: restaurar_comando();
  1259  0014B0  EC9D  F013         	call	_restaurar_comando	;wreg free
  1260  0014B4  D000               	goto	l3306
  1261  0014B6                     l3306:
  1262                           
  1263                           ;main.c: 189: }
  1264                           ;main.c: 190: }
  1265                           ;main.c: 192: validar_comando("002",&validacion);
  1266  0014B6  0E78               	movlw	low STR_21
  1267  0014B8  6E01               	movwf	validar_comando@candidato,c
  1268  0014BA  0E0F               	movlw	high STR_21
  1269  0014BC  6E02               	movwf	validar_comando@candidato+1,c
  1270  0014BE  0E4A               	movlw	low main@validacion
  1271  0014C0  6E03               	movwf	validar_comando@validar,c
  1272  0014C2  0E00               	movlw	high main@validacion
  1273  0014C4  6E04               	movwf	validar_comando@validar+1,c
  1274  0014C6  EC14  F010         	call	_validar_comando	;wreg free
  1275                           
  1276                           ;main.c: 193: if(validacion){
  1277  0014CA  504A               	movf	main@validacion,w,c
  1278  0014CC  104B               	iorwf	main@validacion+1,w,c
  1279  0014CE  B4D8               	btfsc	status,2,c
  1280  0014D0  D02E               	goto	l3328
  1281                           
  1282                           ;main.c: 194: clear(limpiar);
  1283  0014D2  C044  F00B         	movff	main@limpiar,clear@limpiar
  1284  0014D6  C045  F00C         	movff	main@limpiar+1,clear@limpiar+1
  1285  0014DA  EC6C  F011         	call	_clear	;wreg free
  1286                           
  1287                           ;main.c: 195: lcd_gotoxy(1,2);
  1288  0014DE  0E02               	movlw	2
  1289  0014E0  6E05               	movwf	lcd_gotoxy@y,c
  1290  0014E2  0E01               	movlw	1
  1291  0014E4  ECAF  F013         	call	_lcd_gotoxy
  1292                           
  1293                           ;main.c: 196: lcd_putrs("cambiar pass");
  1294  0014E8  0E3E               	movlw	low STR_22
  1295  0014EA  6E09               	movwf	lcd_putrs@ptr,c
  1296  0014EC  0E0F               	movlw	high STR_22
  1297  0014EE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1298  0014F0  EC36  F012         	call	_lcd_putrs	;wreg free
  1299                           
  1300                           ;main.c: 197: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1301  0014F4  0E00               	movlw	0
  1302  0014F6  6E49               	movwf	main@i_1044+1,c
  1303  0014F8  0E00               	movlw	0
  1304  0014FA  6E48               	movwf	main@i_1044,c
  1305  0014FC                     l3318:
  1306  0014FC  BE49               	btfsc	main@i_1044+1,7,c
  1307  0014FE  D008               	goto	l3322
  1308  001500  5049               	movf	main@i_1044+1,w,c
  1309  001502  E112               	bnz	l3326
  1310  001504  0E0A               	movlw	10
  1311  001506  5C48               	subwf	main@i_1044,w,c
  1312  001508  B0D8               	btfsc	status,0,c
  1313  00150A  D00E               	goto	l3326
  1314  00150C  D001               	goto	l3322
  1315  00150E  D00C               	goto	l3326
  1316  001510                     l3322:
  1317  001510  0EFF               	movlw	255
  1318  001512  6E3F               	movwf	??_main& (0+255),c
  1319  001514  0E8A               	movlw	138
  1320  001516                     u3027:
  1321  001516  2EE8               	decfsz	wreg,f,c
  1322  001518  D7FE               	goto	u3027
  1323  00151A  2E3F               	decfsz	??_main& (0+255),f,c
  1324  00151C  D7FC               	goto	u3027
  1325  00151E  D000               	nop2	
  1326  001520  4A48               	infsnz	main@i_1044,f,c
  1327  001522  2A49               	incf	main@i_1044+1,f,c
  1328  001524  D7EB               	goto	l3318
  1329  001526  D000               	goto	l3326
  1330  001528                     l3326:
  1331                           
  1332                           ;main.c: 198: restaurar_comando();
  1333  001528  EC9D  F013         	call	_restaurar_comando	;wreg free
  1334  00152C  D000               	goto	l3328
  1335  00152E                     l3328:
  1336                           
  1337                           ;main.c: 199: }
  1338                           ;main.c: 201: leer_teclado(!ocultar_teclas,puntero_funcion);
  1339  00152E  5042               	movf	main@ocultar_teclas,w,c
  1340  001530  1043               	iorwf	main@ocultar_teclas+1,w,c
  1341  001532  A4D8               	btfss	status,2,c
  1342  001534  D002               	goto	u2980
  1343  001536  0E01               	movlw	1
  1344  001538  D001               	goto	u2990
  1345  00153A                     u2980:
  1346  00153A  0E00               	movlw	0
  1347  00153C                     u2990:
  1348  00153C  6E38               	movwf	leer_teclado@ocultar,c
  1349  00153E  6A39               	clrf	leer_teclado@ocultar+1,c
  1350  001540  C040  F03A         	movff	main@puntero_funcion,leer_teclado@doit
  1351  001544  C041  F03B         	movff	main@puntero_funcion+1,leer_teclado@doit+1
  1352  001548  ECA2  F00C         	call	_leer_teclado	;wreg free
  1353  00154C  D72F               	goto	l3258
  1354                           
  1355                           ;main.c: 202: }
  1356                           ;main.c: 203: }
  1357                           ;main.c: 204: return 0;
  1358                           ;	Return value of _main is never used
  1359  00154E  EF00  F000         	goto	start
  1360  001552                     __end_of_main:
  1361                           	opt stack 0
  1362                           tblptru	equ	0xFF8
  1363                           tblptrh	equ	0xFF7
  1364                           tblptrl	equ	0xFF6
  1365                           tablat	equ	0xFF5
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postdec1	equ	0xFE5
  1369                           fsr1l	equ	0xFE1
  1370                           status	equ	0xFD8
  1371                           
  1372 ;; *************** function _validar_comando *****************
  1373 ;; Defined at:
  1374 ;;		line 28 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1377 ;;		 -> STR_21(4), STR_19(4), STR_17(4), 
  1378 ;;  validar         2    2[COMRAM] PTR int 
  1379 ;;		 -> main@validacion(2), 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  i               2    7[COMRAM] int 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  2    0[COMRAM] int 
  1384 ;; Registers used:
  1385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1395 ;;Total ram usage:        9 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text1
  1405  002028                     __ptext1:
  1406                           	opt stack 0
  1407  002028                     _validar_comando:
  1408                           	opt stack 30
  1409                           
  1410                           ;headers\teclado.h: 30: *validar=1;
  1411                           
  1412                           ;incstack = 0
  1413  002028  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1414  00202C  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1415  002030  0E01               	movlw	1
  1416  002032  6EDE               	movwf	postinc2,c
  1417  002034  0E00               	movlw	0
  1418  002036  6EDD               	movwf	postdec2,c
  1419                           
  1420                           ;headers\teclado.h: 31: int i = 0;
  1421  002038  0E00               	movlw	0
  1422  00203A  6E09               	movwf	validar_comando@i+1,c
  1423  00203C  0E00               	movlw	0
  1424  00203E  6E08               	movwf	validar_comando@i,c
  1425                           
  1426                           ;headers\teclado.h: 32: while (i < 3){
  1427  002040  D023               	goto	l3056
  1428  002042                     l3050:
  1429                           
  1430                           ;headers\teclado.h: 33: if (comando[i] != *(candidato+i))
  1431  002042  0EBD               	movlw	low _comando
  1432  002044  2408               	addwf	validar_comando@i,w,c
  1433  002046  6ED9               	movwf	fsr2l,c
  1434  002048  0E00               	movlw	high _comando
  1435  00204A  2009               	addwfc	validar_comando@i+1,w,c
  1436  00204C  6EDA               	movwf	fsr2h,c
  1437  00204E  50DF               	movf	indf2,w,c
  1438  002050  6E05               	movwf	??_validar_comando& (0+255),c
  1439  002052  5008               	movf	validar_comando@i,w,c
  1440  002054  2401               	addwf	validar_comando@candidato,w,c
  1441  002056  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1442  002058  5009               	movf	validar_comando@i+1,w,c
  1443  00205A  2002               	addwfc	validar_comando@candidato+1,w,c
  1444  00205C  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1445  00205E  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1446  002062  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1447  002066                     	if	0	;tblptru may be non-zero
  1448  002066                     	endif
  1449  002066                     	if	0	;tblptru may be non-zero
  1450  002066                     	endif
  1451  002066  0008               	tblrd		*
  1452  002068  50F5               	movf	tablat,w,c
  1453  00206A  1805               	xorwf	??_validar_comando,w,c
  1454  00206C  B4D8               	btfsc	status,2,c
  1455  00206E  D009               	goto	l3054
  1456                           
  1457                           ;headers\teclado.h: 34: *validar = 0;
  1458  002070  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1459  002074  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1460  002078  0E00               	movlw	0
  1461  00207A  6EDE               	movwf	postinc2,c
  1462  00207C  0E00               	movlw	0
  1463  00207E  6EDD               	movwf	postdec2,c
  1464  002080  D000               	goto	l3054
  1465  002082                     l3054:
  1466                           
  1467                           ;headers\teclado.h: 36: i++;
  1468  002082  4A08               	infsnz	validar_comando@i,f,c
  1469  002084  2A09               	incf	validar_comando@i+1,f,c
  1470  002086  D000               	goto	l3056
  1471  002088                     l3056:
  1472  002088  BE09               	btfsc	validar_comando@i+1,7,c
  1473  00208A  D7DB               	goto	l3050
  1474  00208C  5009               	movf	validar_comando@i+1,w,c
  1475  00208E  E106               	bnz	l159
  1476  002090  0E03               	movlw	3
  1477  002092  5C08               	subwf	validar_comando@i,w,c
  1478  002094  B0D8               	btfsc	status,0,c
  1479  002096  0012               	return	
  1480  002098  D7D4               	goto	l3050
  1481  00209A  0012               	return	
  1482  00209C                     l159:
  1483  00209C  0012               	return		;funcret
  1484  00209E                     __end_of_validar_comando:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1l	equ	0xFE1
  1494                           indf2	equ	0xFDF
  1495                           postinc2	equ	0xFDE
  1496                           postdec2	equ	0xFDD
  1497                           fsr2h	equ	0xFDA
  1498                           fsr2l	equ	0xFD9
  1499                           status	equ	0xFD8
  1500                           
  1501 ;; *************** function _restaurar_comando *****************
  1502 ;; Defined at:
  1503 ;;		line 50 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;		None
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  2  166[None  ] int 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1521 ;;Total ram usage:        0 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_main
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text2
  1531  00273A                     __ptext2:
  1532                           	opt stack 0
  1533  00273A                     _restaurar_comando:
  1534                           	opt stack 30
  1535                           
  1536                           ;headers\teclado.h: 51: tamanio_comando = 0;
  1537                           
  1538                           ;incstack = 0
  1539  00273A  0E00               	movlw	0
  1540  00273C  0100               	movlb	0	; () banked
  1541  00273E  6F97               	movwf	(_tamanio_comando+1)& (0+255),b
  1542  002740  0E00               	movlw	0
  1543  002742  6F96               	movwf	_tamanio_comando& (0+255),b
  1544                           
  1545                           ;headers\teclado.h: 53: comando[0]='x';
  1546  002744  0E78               	movlw	120
  1547  002746  0100               	movlb	0	; () banked
  1548  002748  6FBD               	movwf	_comando& (0+255),b
  1549                           
  1550                           ;headers\teclado.h: 54: comando[1]='x';
  1551  00274A  0E78               	movlw	120
  1552  00274C  0100               	movlb	0	; () banked
  1553  00274E  6FBE               	movwf	(_comando+1)& (0+255),b
  1554                           
  1555                           ;headers\teclado.h: 55: comando[2]='x';
  1556  002750  0E78               	movlw	120
  1557  002752  0100               	movlb	0	; () banked
  1558  002754  6FBF               	movwf	(_comando+2)& (0+255),b
  1559                           
  1560                           ;headers\teclado.h: 56: comando[3]=0;
  1561  002756  0E00               	movlw	0
  1562  002758  0100               	movlb	0	; () banked
  1563  00275A  6FC0               	movwf	(_comando+3)& (0+255),b
  1564                           
  1565                           ; BSR set to: 0
  1566  00275C  0012               	return		;funcret
  1567  00275E                     __end_of_restaurar_comando:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           indf2	equ	0xFDF
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           fsr2h	equ	0xFDA
  1581                           fsr2l	equ	0xFD9
  1582                           status	equ	0xFD8
  1583                           
  1584 ;; *************** function _leer_teclado *****************
  1585 ;; Defined at:
  1586 ;;		line 66 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  ocultar         2   55[COMRAM] int 
  1589 ;;  doit            2   57[COMRAM] PTR FTN()PTR unsigned ch
  1590 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), cambiar_dia(2), 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  i               2   60[COMRAM] int 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  2   55[COMRAM] int 
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1606 ;;Total ram usage:        7 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    8
  1609 ;; This function calls:
  1610 ;;		_cambiar_dia
  1611 ;;		_guardar_tecla_presionada
  1612 ;;		_ingresar_comando
  1613 ;;		_lcd_putrs
  1614 ;;		_mostrar_guardar_password
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text3
  1621  001944                     __ptext3:
  1622                           	opt stack 0
  1623  001944                     _leer_teclado:
  1624                           	opt stack 22
  1625                           
  1626                           ;headers\teclado.h: 67: int i;
  1627                           ;headers\teclado.h: 68: ocultar_teclas = ocultar;
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;incstack = 0
  1631  001944  C038  F090         	movff	leer_teclado@ocultar,_ocultar_teclas
  1632  001948  C039  F091         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1633                           
  1634                           ;headers\teclado.h: 70: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=1;
  1635  00194C  8089               	bsf	3977,0,c	;volatile
  1636  00194E  9289               	bcf	3977,1,c	;volatile
  1637  001950  9489               	bcf	3977,2,c	;volatile
  1638  001952  9689               	bcf	3977,3,c	;volatile
  1639  001954  0E00               	movlw	0
  1640  001956  6E3E               	movwf	leer_teclado@i+1,c
  1641  001958  0E01               	movlw	1
  1642  00195A  6E3D               	movwf	leer_teclado@i,c
  1643                           
  1644                           ;headers\teclado.h: 71: guardar_tecla_presionada("A",i,doit);
  1645  00195C  0E87               	movlw	low STR_4
  1646  00195E  6E32               	movwf	guardar_tecla_presionada@letra,c
  1647  001960  0E0F               	movlw	high STR_4
  1648  001962  6E33               	movwf	guardar_tecla_presionada@letra+1,c
  1649  001964  C03D  F034         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1650  001968  C03E  F035         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1651  00196C  C03A  F036         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1652  001970  C03B  F037         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1653  001974  ECF4  F00E         	call	_guardar_tecla_presionada	;wreg free
  1654                           
  1655                           ;headers\teclado.h: 73: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=0;i=4;
  1656  001978  9089               	bcf	3977,0,c	;volatile
  1657  00197A  8289               	bsf	3977,1,c	;volatile
  1658  00197C  9489               	bcf	3977,2,c	;volatile
  1659  00197E  9689               	bcf	3977,3,c	;volatile
  1660  001980  0E00               	movlw	0
  1661  001982  6E3E               	movwf	leer_teclado@i+1,c
  1662  001984  0E04               	movlw	4
  1663  001986  6E3D               	movwf	leer_teclado@i,c
  1664                           
  1665                           ;headers\teclado.h: 74: guardar_tecla_presionada("B",i,doit);
  1666  001988  0E89               	movlw	low STR_5
  1667  00198A  6E32               	movwf	guardar_tecla_presionada@letra,c
  1668  00198C  0E0F               	movlw	high STR_5
  1669  00198E  6E33               	movwf	guardar_tecla_presionada@letra+1,c
  1670  001990  C03D  F034         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1671  001994  C03E  F035         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1672  001998  C03A  F036         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1673  00199C  C03B  F037         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1674  0019A0  ECF4  F00E         	call	_guardar_tecla_presionada	;wreg free
  1675                           
  1676                           ;headers\teclado.h: 76: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA
      +                          3=0;i=7;
  1677  0019A4  9089               	bcf	3977,0,c	;volatile
  1678  0019A6  9289               	bcf	3977,1,c	;volatile
  1679  0019A8  8489               	bsf	3977,2,c	;volatile
  1680  0019AA  9689               	bcf	3977,3,c	;volatile
  1681  0019AC  0E00               	movlw	0
  1682  0019AE  6E3E               	movwf	leer_teclado@i+1,c
  1683  0019B0  0E07               	movlw	7
  1684  0019B2  6E3D               	movwf	leer_teclado@i,c
  1685                           
  1686                           ;headers\teclado.h: 77: guardar_tecla_presionada("C",i,doit);
  1687  0019B4  0E8B               	movlw	low STR_6
  1688  0019B6  6E32               	movwf	guardar_tecla_presionada@letra,c
  1689  0019B8  0E0F               	movlw	high STR_6
  1690  0019BA  6E33               	movwf	guardar_tecla_presionada@letra+1,c
  1691  0019BC  C03D  F034         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1692  0019C0  C03E  F035         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1693  0019C4  C03A  F036         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1694  0019C8  C03B  F037         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1695  0019CC  ECF4  F00E         	call	_guardar_tecla_presionada	;wreg free
  1696                           
  1697                           ;headers\teclado.h: 79: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA
      +                          3=1;
  1698  0019D0  9089               	bcf	3977,0,c	;volatile
  1699  0019D2  9289               	bcf	3977,1,c	;volatile
  1700  0019D4  9489               	bcf	3977,2,c	;volatile
  1701  0019D6  8689               	bsf	3977,3,c	;volatile
  1702                           
  1703                           ;headers\teclado.h: 80: {
  1704                           ;headers\teclado.h: 81: if (PORTAbits.RA5==1){key=18;lcd_putrs("*");while(PORTAbits.RA5=
      +                          =1){};}
  1705  0019D8  AA80               	btfss	3968,5,c	;volatile
  1706  0019DA  D00B               	goto	l189
  1707  0019DC  0E12               	movlw	18
  1708  0019DE  6E4E               	movwf	_key,c
  1709  0019E0  0E85               	movlw	low STR_3
  1710  0019E2  6E09               	movwf	lcd_putrs@ptr,c
  1711  0019E4  0E0F               	movlw	high STR_3
  1712  0019E6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1713  0019E8  EC36  F012         	call	_lcd_putrs	;wreg free
  1714  0019EC  D000               	goto	l190
  1715  0019EE                     l190:
  1716  0019EE  BA80               	btfsc	3968,5,c	;volatile
  1717  0019F0  D7FE               	goto	l190
  1718  0019F2                     l189:
  1719                           
  1720                           ;headers\teclado.h: 82: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};
      +                          }
  1721  0019F2  AE80               	btfss	3968,7,c	;volatile
  1722  0019F4  D011               	goto	l193
  1723  0019F6  0E00               	movlw	0
  1724  0019F8  6E4E               	movwf	_key,c
  1725  0019FA  D801               	call	u2708
  1726  0019FC  D00B               	goto	l194
  1727  0019FE                     u2708:
  1728  0019FE  0005               	push	
  1729  001A00  6EFA               	movwf	pclath,c
  1730  001A02  503A               	movf	leer_teclado@doit,w,c
  1731  001A04  6EFD               	movwf	tosl,c
  1732  001A06  503B               	movf	leer_teclado@doit+1,w,c
  1733  001A08  6EFE               	movwf	tosh,c
  1734  001A0A  50F8               	movf	tblptru,w,c
  1735  001A0C  6EFF               	movwf	tosu,c
  1736  001A0E  50FA               	movf	pclath,w,c
  1737  001A10  504E               	movf	_key,w,c
  1738  001A12  0012               	return		;indir
  1739  001A14                     l194:
  1740  001A14  BE80               	btfsc	3968,7,c	;volatile
  1741  001A16  D7FE               	goto	l194
  1742  001A18                     l193:
  1743                           
  1744                           ;headers\teclado.h: 83: if (PORTAbits.RA6==1){key=19;lcd_putrs("#");while(PORTAbits.RA6=
      +                          =1){};}
  1745  001A18  AC80               	btfss	3968,6,c	;volatile
  1746  001A1A  D00B               	goto	l197
  1747  001A1C  0E13               	movlw	19
  1748  001A1E  6E4E               	movwf	_key,c
  1749  001A20  0E83               	movlw	low STR_8
  1750  001A22  6E09               	movwf	lcd_putrs@ptr,c
  1751  001A24  0E0F               	movlw	high STR_8
  1752  001A26  6E0A               	movwf	lcd_putrs@ptr+1,c
  1753  001A28  EC36  F012         	call	_lcd_putrs
  1754  001A2C  D000               	goto	l198
  1755  001A2E                     l198:
  1756  001A2E  BC80               	btfsc	3968,6,c	;volatile
  1757  001A30  D7FE               	goto	l198
  1758  001A32                     l197:
  1759                           
  1760                           ;headers\teclado.h: 84: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2
      +                          ==1){};}
  1761  001A32  A482               	btfss	3970,2,c	;volatile
  1762  001A34  D00D               	goto	l3114
  1763  001A36  0E44               	movlw	68
  1764  001A38  6E4E               	movwf	_key,c
  1765  001A3A  0E8D               	movlw	low STR_9
  1766  001A3C  6E09               	movwf	lcd_putrs@ptr,c
  1767  001A3E  0E0F               	movlw	high STR_9
  1768  001A40  6E0A               	movwf	lcd_putrs@ptr+1,c
  1769  001A42  EC36  F012         	call	_lcd_putrs	;wreg free
  1770  001A46  D000               	goto	l202
  1771  001A48                     l202:
  1772  001A48  A482               	btfss	3970,2,c	;volatile
  1773  001A4A  D002               	goto	l3114
  1774  001A4C  D7FD               	goto	l202
  1775  001A4E  D000               	goto	l3114
  1776  001A50                     l3114:
  1777                           
  1778                           ;headers\teclado.h: 85: }
  1779                           ;headers\teclado.h: 86: _delay((unsigned long)((98)*(8000000/4000.0)));
  1780  001A50  0EFF               	movlw	255
  1781  001A52  6E3C               	movwf	??_leer_teclado& (0+255),c
  1782  001A54  0E8A               	movlw	138
  1783  001A56                     u3037:
  1784  001A56  2EE8               	decfsz	wreg,f,c
  1785  001A58  D7FE               	goto	u3037
  1786  001A5A  2E3C               	decfsz	??_leer_teclado& (0+255),f,c
  1787  001A5C  D7FC               	goto	u3037
  1788  001A5E  D000               	nop2	
  1789  001A60  0012               	return		;funcret
  1790  001A62                     __end_of_leer_teclado:
  1791                           	opt stack 0
  1792                           tosu	equ	0xFFF
  1793                           tosh	equ	0xFFE
  1794                           tosl	equ	0xFFD
  1795                           pclath	equ	0xFFA
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1l	equ	0xFE1
  1804                           indf2	equ	0xFDF
  1805                           postinc2	equ	0xFDE
  1806                           postdec2	equ	0xFDD
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _guardar_tecla_presionada *****************
  1812 ;; Defined at:
  1813 ;;		line 59 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  letra           2   49[COMRAM] PTR unsigned char 
  1816 ;;		 -> STR_6(2), STR_5(2), STR_4(2), 
  1817 ;;  i               2   51[COMRAM] int 
  1818 ;;  doit            2   53[COMRAM] PTR FTN(PTR unsigned cha
  1819 ;;		 -> ingresar_comando(2), mostrar_guardar_password(2), cambiar_dia(2), 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  2   49[COMRAM] int 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1831 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1834 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1835 ;;Total ram usage:        6 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    7
  1838 ;; This function calls:
  1839 ;;		_cambiar_dia
  1840 ;;		_ingresar_comando
  1841 ;;		_lcd_putrs
  1842 ;;		_mostrar_guardar_password
  1843 ;; This function is called by:
  1844 ;;		_leer_teclado
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text4
  1849  001DE8                     __ptext4:
  1850                           	opt stack 0
  1851  001DE8                     _guardar_tecla_presionada:
  1852                           	opt stack 22
  1853                           
  1854                           ;headers\teclado.h: 60: if (PORTAbits.RA5==1){key=i; doit(key);while(PORTAbits.RA5==1){}
      +                          ;}
  1855                           
  1856                           ;incstack = 0
  1857  001DE8  AA80               	btfss	3968,5,c	;volatile
  1858  001DEA  D012               	goto	l170
  1859  001DEC  C034  F04E         	movff	guardar_tecla_presionada@i,_key
  1860  001DF0  C04E  FFE8         	movff	_key,wreg
  1861  001DF4  D801               	call	u2458
  1862  001DF6  D00A               	goto	l171
  1863  001DF8                     u2458:
  1864  001DF8  0005               	push	
  1865  001DFA  6EFA               	movwf	pclath,c
  1866  001DFC  5036               	movf	guardar_tecla_presionada@doit,w,c
  1867  001DFE  6EFD               	movwf	tosl,c
  1868  001E00  5037               	movf	guardar_tecla_presionada@doit+1,w,c
  1869  001E02  6EFE               	movwf	tosh,c
  1870  001E04  50F8               	movf	tblptru,w,c
  1871  001E06  6EFF               	movwf	tosu,c
  1872  001E08  50FA               	movf	pclath,w,c
  1873  001E0A  0012               	return		;indir
  1874  001E0C                     l171:
  1875  001E0C  BA80               	btfsc	3968,5,c	;volatile
  1876  001E0E  D7FE               	goto	l171
  1877  001E10                     l170:
  1878                           
  1879                           ;headers\teclado.h: 61: if (PORTAbits.RA7==1){key=(i)+1; doit(key);while(PORTAbits.RA7==
      +                          1){};}
  1880  001E10  AE80               	btfss	3968,7,c	;volatile
  1881  001E12  D012               	goto	l174
  1882  001E14  2834               	incf	guardar_tecla_presionada@i,w,c
  1883  001E16  6E4E               	movwf	_key,c
  1884  001E18  C04E  FFE8         	movff	_key,wreg
  1885  001E1C  D801               	call	u2488
  1886  001E1E  D00A               	goto	l175
  1887  001E20                     u2488:
  1888  001E20  0005               	push	
  1889  001E22  6EFA               	movwf	pclath,c
  1890  001E24  5036               	movf	guardar_tecla_presionada@doit,w,c
  1891  001E26  6EFD               	movwf	tosl,c
  1892  001E28  5037               	movf	guardar_tecla_presionada@doit+1,w,c
  1893  001E2A  6EFE               	movwf	tosh,c
  1894  001E2C  50F8               	movf	tblptru,w,c
  1895  001E2E  6EFF               	movwf	tosu,c
  1896  001E30  50FA               	movf	pclath,w,c
  1897  001E32  0012               	return		;indir
  1898  001E34                     l175:
  1899  001E34  BE80               	btfsc	3968,7,c	;volatile
  1900  001E36  D7FE               	goto	l175
  1901  001E38                     l174:
  1902                           
  1903                           ;headers\teclado.h: 62: if (PORTAbits.RA6==1){key=(i)+2; doit(key);while(PORTAbits.RA6==
      +                          1){};}
  1904  001E38  AC80               	btfss	3968,6,c	;volatile
  1905  001E3A  D013               	goto	l178
  1906  001E3C  5034               	movf	guardar_tecla_presionada@i,w,c
  1907  001E3E  0F02               	addlw	2
  1908  001E40  6E4E               	movwf	_key,c
  1909  001E42  C04E  FFE8         	movff	_key,wreg
  1910  001E46  D801               	call	u2518
  1911  001E48  D00A               	goto	l179
  1912  001E4A                     u2518:
  1913  001E4A  0005               	push	
  1914  001E4C  6EFA               	movwf	pclath,c
  1915  001E4E  5036               	movf	guardar_tecla_presionada@doit,w,c
  1916  001E50  6EFD               	movwf	tosl,c
  1917  001E52  5037               	movf	guardar_tecla_presionada@doit+1,w,c
  1918  001E54  6EFE               	movwf	tosh,c
  1919  001E56  50F8               	movf	tblptru,w,c
  1920  001E58  6EFF               	movwf	tosu,c
  1921  001E5A  50FA               	movf	pclath,w,c
  1922  001E5C  0012               	return		;indir
  1923  001E5E                     l179:
  1924  001E5E  BC80               	btfsc	3968,6,c	;volatile
  1925  001E60  D7FE               	goto	l179
  1926  001E62                     l178:
  1927                           
  1928                           ;headers\teclado.h: 63: if (PORTCbits.RC2==1){key=(i)+10;lcd_putrs(letra);while(PORTCbit
      +                          s.RC2==1){};}
  1929  001E62  A482               	btfss	3970,2,c	;volatile
  1930  001E64  0012               	return	
  1931  001E66  5034               	movf	guardar_tecla_presionada@i,w,c
  1932  001E68  0F0A               	addlw	10
  1933  001E6A  6E4E               	movwf	_key,c
  1934  001E6C  C032  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  1935  001E70  C033  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  1936  001E74  EC36  F012         	call	_lcd_putrs	;wreg free
  1937  001E78  D000               	goto	l183
  1938  001E7A                     l183:
  1939  001E7A  A482               	btfss	3970,2,c	;volatile
  1940  001E7C  0012               	return	
  1941  001E7E  D7FD               	goto	l183
  1942  001E80  0012               	return	
  1943  001E82  0012               	return		;funcret
  1944  001E84                     __end_of_guardar_tecla_presionada:
  1945                           	opt stack 0
  1946                           tosu	equ	0xFFF
  1947                           tosh	equ	0xFFE
  1948                           tosl	equ	0xFFD
  1949                           pclath	equ	0xFFA
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           indf2	equ	0xFDF
  1959                           postinc2	equ	0xFDE
  1960                           postdec2	equ	0xFDD
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _ingresar_comando *****************
  1966 ;; Defined at:
  1967 ;;		line 132 in file "main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  key             1    wreg     unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  key             1   42[COMRAM] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  2  292[None  ] int 
  1974 ;; Registers used:
  1975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1985 ;;Total ram usage:        1 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    3
  1988 ;; This function calls:
  1989 ;;		_guardar_comando
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;;		_guardar_tecla_presionada
  1993 ;;		_leer_teclado
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text5
  1998  002816                     __ptext5:
  1999                           	opt stack 0
  2000  002816                     _ingresar_comando:
  2001                           	opt stack 26
  2002                           
  2003                           ;incstack = 0
  2004                           ;ingresar_comando@key stored from wreg
  2005  002816  6E2B               	movwf	ingresar_comando@key,c
  2006                           
  2007                           ;main.c: 133: guardar_comando(key);
  2008  002818  502B               	movf	ingresar_comando@key,w,c
  2009  00281A  ECFD  F010         	call	_guardar_comando
  2010  00281E  0012               	return		;funcret
  2011  002820                     __end_of_ingresar_comando:
  2012                           	opt stack 0
  2013                           tosu	equ	0xFFF
  2014                           tosh	equ	0xFFE
  2015                           tosl	equ	0xFFD
  2016                           pclath	equ	0xFFA
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           indf2	equ	0xFDF
  2026                           postinc2	equ	0xFDE
  2027                           postdec2	equ	0xFDD
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _cambiar_dia *****************
  2033 ;; Defined at:
  2034 ;;		line 38 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  tecla           1    wreg     unsigned char 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  tecla           1   46[COMRAM] unsigned char 
  2039 ;;  valor           2   47[COMRAM] int 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  2  252[None  ] int 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2050 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2053 ;;Total ram usage:        3 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    3
  2056 ;; This function calls:
  2057 ;;		_convertir_a_int
  2058 ;;		_guardar_elemento
  2059 ;; This function is called by:
  2060 ;;		_main
  2061 ;;		_cambiar_fecha
  2062 ;;		_cambiar_day
  2063 ;;		_guardar_tecla_presionada
  2064 ;;		_leer_teclado
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text6
  2069  002188                     __ptext6:
  2070                           	opt stack 0
  2071  002188                     _cambiar_dia:
  2072                           	opt stack 25
  2073                           
  2074                           ;incstack = 0
  2075                           ;cambiar_dia@tecla stored from wreg
  2076  002188  6E2F               	movwf	cambiar_dia@tecla,c
  2077                           
  2078                           ;headers\fecha.h: 39: int valor = 0;
  2079  00218A  0E00               	movlw	0
  2080  00218C  6E31               	movwf	cambiar_dia@valor+1,c
  2081  00218E  0E00               	movlw	0
  2082  002190  6E30               	movwf	cambiar_dia@valor,c
  2083                           
  2084                           ;headers\fecha.h: 41: if (tamanio_dia < 3 && tamanio_mes == 0 && tamanio_anio == 0){
  2085  002192  BE58               	btfsc	_tamanio_dia+1,7,c
  2086  002194  D006               	goto	l2742
  2087  002196  5058               	movf	_tamanio_dia+1,w,c
  2088  002198  E11C               	bnz	l2748
  2089  00219A  0E03               	movlw	3
  2090  00219C  5C57               	subwf	_tamanio_dia,w,c
  2091  00219E  B0D8               	btfsc	status,0,c
  2092  0021A0  D018               	goto	l2748
  2093  0021A2                     l2742:
  2094  0021A2  0100               	movlb	0	; () banked
  2095  0021A4  5198               	movf	_tamanio_mes& (0+255),w,b
  2096  0021A6  0100               	movlb	0	; () banked
  2097  0021A8  1199               	iorwf	(_tamanio_mes+1)& (0+255),w,b
  2098  0021AA  A4D8               	btfss	status,2,c
  2099  0021AC  D012               	goto	l2748
  2100                           
  2101                           ; BSR set to: 0
  2102  0021AE  0100               	movlb	0	; () banked
  2103  0021B0  5194               	movf	_tamanio_anio& (0+255),w,b
  2104  0021B2  0100               	movlb	0	; () banked
  2105  0021B4  1195               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  2106  0021B6  A4D8               	btfss	status,2,c
  2107  0021B8  D00C               	goto	l2748
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;headers\fecha.h: 42: guardar_elemento(tecla,day,&tamanio_dia);
  2111  0021BA  0EAE               	movlw	low _day
  2112  0021BC  6E28               	movwf	guardar_elemento@array,c
  2113  0021BE  0E00               	movlw	high _day
  2114  0021C0  6E29               	movwf	guardar_elemento@array+1,c
  2115  0021C2  0E57               	movlw	low _tamanio_dia
  2116  0021C4  6E2A               	movwf	guardar_elemento@tamanio_array,c
  2117  0021C6  0E00               	movlw	high _tamanio_dia
  2118  0021C8  6E2B               	movwf	guardar_elemento@tamanio_array+1,c
  2119  0021CA  502F               	movf	cambiar_dia@tecla,w,c
  2120  0021CC  EC8A  F010         	call	_guardar_elemento
  2121  0021D0  D000               	goto	l2748
  2122  0021D2                     l2748:
  2123                           
  2124                           ;headers\fecha.h: 43: }
  2125                           ;headers\fecha.h: 45: if (tamanio_dia == 1){
  2126  0021D2  0457               	decf	_tamanio_dia,w,c
  2127  0021D4  1058               	iorwf	_tamanio_dia+1,w,c
  2128  0021D6  A4D8               	btfss	status,2,c
  2129  0021D8  0012               	return	
  2130                           
  2131                           ;headers\fecha.h: 46: convertir_a_int(dia,&valor);
  2132  0021DA  C05B  F00E         	movff	_dia,convertir_a_int@array
  2133  0021DE  C05C  F00F         	movff	_dia+1,convertir_a_int@array+1
  2134  0021E2  0E30               	movlw	low cambiar_dia@valor
  2135  0021E4  6E10               	movwf	convertir_a_int@valor,c
  2136  0021E6  0E00               	movlw	high cambiar_dia@valor
  2137  0021E8  6E11               	movwf	convertir_a_int@valor+1,c
  2138  0021EA  ECD2  F013         	call	_convertir_a_int	;wreg free
  2139                           
  2140                           ;headers\fecha.h: 47: dia = valor;
  2141  0021EE  C030  F05B         	movff	cambiar_dia@valor,_dia
  2142  0021F2  C031  F05C         	movff	cambiar_dia@valor+1,_dia+1
  2143  0021F6  0012               	return	
  2144  0021F8  0012               	return		;funcret
  2145  0021FA                     __end_of_cambiar_dia:
  2146                           	opt stack 0
  2147                           tosu	equ	0xFFF
  2148                           tosh	equ	0xFFE
  2149                           tosl	equ	0xFFD
  2150                           pclath	equ	0xFFA
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postdec1	equ	0xFE5
  2158                           fsr1l	equ	0xFE1
  2159                           indf2	equ	0xFDF
  2160                           postinc2	equ	0xFDE
  2161                           postdec2	equ	0xFDD
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _mostrar_guardar_password *****************
  2167 ;; Defined at:
  2168 ;;		line 124 in file "main.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  tecla           1    wreg     unsigned char 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  tecla           1   40[COMRAM] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2  289[None  ] int 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    6
  2189 ;; This function calls:
  2190 ;;		_guardar_current_password
  2191 ;;		_imprimir_tecla
  2192 ;;		_sprintf
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;;		_guardar_tecla_presionada
  2196 ;;		_leer_teclado
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text7
  2201  0026E6                     __ptext7:
  2202                           	opt stack 0
  2203  0026E6                     _mostrar_guardar_password:
  2204                           	opt stack 23
  2205                           
  2206                           ;incstack = 0
  2207                           ;mostrar_guardar_password@tecla stored from wreg
  2208  0026E6  6E29               	movwf	mostrar_guardar_password@tecla,c
  2209                           
  2210                           ;main.c: 126: imprimir_tecla(tecla);
  2211  0026E8  5029               	movf	mostrar_guardar_password@tecla,w,c
  2212  0026EA  ECF5  F012         	call	_imprimir_tecla
  2213                           
  2214                           ;main.c: 127: sprintf(buffer2,"%01u",tecla);
  2215  0026EE  0E9A               	movlw	low _buffer2
  2216  0026F0  6E0D               	movwf	sprintf@sp,c
  2217  0026F2  0E00               	movlw	high _buffer2
  2218  0026F4  6E0E               	movwf	sprintf@sp+1,c
  2219  0026F6  0E6F               	movlw	low STR_1
  2220  0026F8  6E0F               	movwf	sprintf@f,c
  2221  0026FA  0E0F               	movlw	high STR_1
  2222  0026FC  6E10               	movwf	sprintf@f+1,c
  2223  0026FE  C029  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2224  002702  6A12               	clrf	?_sprintf+5,c
  2225  002704  ECC8  F007         	call	_sprintf	;wreg free
  2226                           
  2227                           ;main.c: 128: guardar_current_password(*buffer2);
  2228  002708  0100               	movlb	0	; () banked
  2229  00270A  519A               	movf	_buffer2& (0+255),w,b
  2230  00270C  EC18  F013         	call	_guardar_current_password
  2231  002710  0012               	return		;funcret
  2232  002712                     __end_of_mostrar_guardar_password:
  2233                           	opt stack 0
  2234                           tosu	equ	0xFFF
  2235                           tosh	equ	0xFFE
  2236                           tosl	equ	0xFFD
  2237                           pclath	equ	0xFFA
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postdec1	equ	0xFE5
  2245                           fsr1l	equ	0xFE1
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _imprimir_tecla *****************
  2254 ;; Defined at:
  2255 ;;		line 40 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  tecla           1    wreg     unsigned char 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  tecla           1   39[COMRAM] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2  161[None  ] int 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;Total ram usage:        1 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    5
  2276 ;; This function calls:
  2277 ;;		_lcd_putrs
  2278 ;;		_sprintf
  2279 ;; This function is called by:
  2280 ;;		_mostrar_guardar_password
  2281 ;;		_cambiar_day
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text8
  2286  0025EA                     __ptext8:
  2287                           	opt stack 0
  2288  0025EA                     _imprimir_tecla:
  2289                           	opt stack 23
  2290                           
  2291                           ;incstack = 0
  2292                           ;imprimir_tecla@tecla stored from wreg
  2293  0025EA  6E28               	movwf	imprimir_tecla@tecla,c
  2294                           
  2295                           ;headers\teclado.h: 42: sprintf(buffer2,"%01u",tecla);
  2296  0025EC  0E9A               	movlw	low _buffer2
  2297  0025EE  6E0D               	movwf	sprintf@sp,c
  2298  0025F0  0E00               	movlw	high _buffer2
  2299  0025F2  6E0E               	movwf	sprintf@sp+1,c
  2300  0025F4  0E6F               	movlw	low STR_1
  2301  0025F6  6E0F               	movwf	sprintf@f,c
  2302  0025F8  0E0F               	movlw	high STR_1
  2303  0025FA  6E10               	movwf	sprintf@f+1,c
  2304  0025FC  C028  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  2305  002600  6A12               	clrf	?_sprintf+5,c
  2306  002602  ECC8  F007         	call	_sprintf	;wreg free
  2307                           
  2308                           ;headers\teclado.h: 43: if (ocultar_teclas == 1){
  2309  002606  0100               	movlb	0	; () banked
  2310  002608  0590               	decf	_ocultar_teclas& (0+255),w,b
  2311  00260A  0100               	movlb	0	; () banked
  2312  00260C  1191               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  2313  00260E  A4D8               	btfss	status,2,c
  2314  002610  D007               	goto	l2580
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;headers\teclado.h: 44: lcd_putrs("*");
  2318  002612  0E85               	movlw	low STR_3
  2319  002614  6E09               	movwf	lcd_putrs@ptr,c
  2320  002616  0E0F               	movlw	high STR_3
  2321  002618  6E0A               	movwf	lcd_putrs@ptr+1,c
  2322  00261A  EC36  F012         	call	_lcd_putrs	;wreg free
  2323                           
  2324                           ;headers\teclado.h: 45: }else{
  2325  00261E  0012               	return	
  2326  002620                     l2580:
  2327                           
  2328                           ;headers\teclado.h: 46: lcd_putrs(buffer2);
  2329  002620  0E9A               	movlw	low _buffer2
  2330  002622  6E09               	movwf	lcd_putrs@ptr,c
  2331  002624  0E00               	movlw	high _buffer2
  2332  002626  6E0A               	movwf	lcd_putrs@ptr+1,c
  2333  002628  EC36  F012         	call	_lcd_putrs	;wreg free
  2334  00262C  0012               	return	
  2335  00262E  0012               	return		;funcret
  2336  002630                     __end_of_imprimir_tecla:
  2337                           	opt stack 0
  2338                           tosu	equ	0xFFF
  2339                           tosh	equ	0xFFE
  2340                           tosl	equ	0xFFD
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _guardar_current_password *****************
  2358 ;; Defined at:
  2359 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  valor           1    wreg     unsigned char 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  valor           1    2[COMRAM] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2  215[None  ] int 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2377 ;;Total ram usage:        3 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_mostrar_guardar_password
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text9
  2387  002630                     __ptext9:
  2388                           	opt stack 0
  2389  002630                     _guardar_current_password:
  2390                           	opt stack 28
  2391                           
  2392                           ;incstack = 0
  2393                           ;guardar_current_password@valor stored from wreg
  2394  002630  6E03               	movwf	guardar_current_password@valor,c
  2395                           
  2396                           ;headers\password.h: 15: if (tamanio_password < 6){
  2397  002632  BE4D               	btfsc	_tamanio_password+1,7,c
  2398  002634  D006               	goto	l2584
  2399  002636  504D               	movf	_tamanio_password+1,w,c
  2400  002638  E11D               	bnz	l217
  2401  00263A  0E06               	movlw	6
  2402  00263C  5C4C               	subwf	_tamanio_password,w,c
  2403  00263E  B0D8               	btfsc	status,0,c
  2404  002640  0012               	return	
  2405  002642                     l2584:
  2406                           
  2407                           ;headers\password.h: 16: current_password[tamanio_password] = valor;
  2408  002642  0E78               	movlw	low _current_password
  2409  002644  244C               	addwf	_tamanio_password,w,c
  2410  002646  6ED9               	movwf	fsr2l,c
  2411  002648  0E00               	movlw	high _current_password
  2412  00264A  204D               	addwfc	_tamanio_password+1,w,c
  2413  00264C  6EDA               	movwf	fsr2h,c
  2414  00264E  C003  FFDF         	movff	guardar_current_password@valor,indf2
  2415                           
  2416                           ;headers\password.h: 17: current_password [tamanio_password+1] = '\0';
  2417  002652  0E01               	movlw	1
  2418  002654  244C               	addwf	_tamanio_password,w,c
  2419  002656  6E01               	movwf	??_guardar_current_password& (0+255),c
  2420  002658  0E00               	movlw	0
  2421  00265A  204D               	addwfc	_tamanio_password+1,w,c
  2422  00265C  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  2423  00265E  0E78               	movlw	low _current_password
  2424  002660  2401               	addwf	??_guardar_current_password,w,c
  2425  002662  6ED9               	movwf	fsr2l,c
  2426  002664  0E00               	movlw	high _current_password
  2427  002666  2002               	addwfc	??_guardar_current_password+1,w,c
  2428  002668  6EDA               	movwf	fsr2h,c
  2429  00266A  0E00               	movlw	0
  2430  00266C  6EDF               	movwf	indf2,c
  2431                           
  2432                           ;headers\password.h: 18: tamanio_password++;
  2433  00266E  4A4C               	infsnz	_tamanio_password,f,c
  2434  002670  2A4D               	incf	_tamanio_password+1,f,c
  2435  002672  0012               	return	
  2436  002674                     l217:
  2437  002674  0012               	return		;funcret
  2438  002676                     __end_of_guardar_current_password:
  2439                           	opt stack 0
  2440                           tosu	equ	0xFFF
  2441                           tosh	equ	0xFFE
  2442                           tosl	equ	0xFFD
  2443                           pclath	equ	0xFFA
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           postinc0	equ	0xFEE
  2449                           wreg	equ	0xFE8
  2450                           postdec1	equ	0xFE5
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _guardar_comando *****************
  2460 ;; Defined at:
  2461 ;;		line 18 in file "C:/Archivos de programa/Unimic/unmc_01/headers\teclado.h"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  tecla           1    wreg     unsigned char 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  tecla           1   41[COMRAM] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  2  150[None  ] int 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2478 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2479 ;;Total ram usage:        3 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    2
  2482 ;; This function calls:
  2483 ;;		_sprintf
  2484 ;; This function is called by:
  2485 ;;		_ingresar_comando
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text10
  2490  0021FA                     __ptext10:
  2491                           	opt stack 0
  2492  0021FA                     _guardar_comando:
  2493                           	opt stack 26
  2494                           
  2495                           ;incstack = 0
  2496                           ;guardar_comando@tecla stored from wreg
  2497  0021FA  6E2A               	movwf	guardar_comando@tecla,c
  2498                           
  2499                           ;headers\teclado.h: 20: sprintf(buffer2,"%01u",tecla);
  2500  0021FC  0E9A               	movlw	low _buffer2
  2501  0021FE  6E0D               	movwf	sprintf@sp,c
  2502  002200  0E00               	movlw	high _buffer2
  2503  002202  6E0E               	movwf	sprintf@sp+1,c
  2504  002204  0E6F               	movlw	low STR_1
  2505  002206  6E0F               	movwf	sprintf@f,c
  2506  002208  0E0F               	movlw	high STR_1
  2507  00220A  6E10               	movwf	sprintf@f+1,c
  2508  00220C  C02A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  2509  002210  6A12               	clrf	?_sprintf+5,c
  2510  002212  ECC8  F007         	call	_sprintf	;wreg free
  2511                           
  2512                           ;headers\teclado.h: 21: if (tamanio_comando <3){
  2513  002216  0100               	movlb	0	; () banked
  2514  002218  BF97               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  2515  00221A  D008               	goto	l2570
  2516  00221C  0100               	movlb	0	; () banked
  2517  00221E  5197               	movf	(_tamanio_comando+1)& (0+255),w,b
  2518  002220  E123               	bnz	l152
  2519  002222  0E03               	movlw	3
  2520  002224  0100               	movlb	0	; () banked
  2521  002226  5D96               	subwf	_tamanio_comando& (0+255),w,b
  2522  002228  B0D8               	btfsc	status,0,c
  2523  00222A  0012               	return	
  2524  00222C                     l2570:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;headers\teclado.h: 22: comando[tamanio_comando] = *buffer2;
  2528  00222C  0EBD               	movlw	low _comando
  2529  00222E  0100               	movlb	0	; () banked
  2530  002230  2596               	addwf	_tamanio_comando& (0+255),w,b
  2531  002232  6ED9               	movwf	fsr2l,c
  2532  002234  0E00               	movlw	high _comando
  2533  002236  0100               	movlb	0	; () banked
  2534  002238  2197               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2535  00223A  6EDA               	movwf	fsr2h,c
  2536  00223C  C09A  FFDF         	movff	_buffer2,indf2
  2537                           
  2538                           ;headers\teclado.h: 23: comando [tamanio_comando+1] = '\0';
  2539  002240  0E01               	movlw	1
  2540  002242  0100               	movlb	0	; () banked
  2541  002244  2596               	addwf	_tamanio_comando& (0+255),w,b
  2542  002246  6E28               	movwf	??_guardar_comando& (0+255),c
  2543  002248  0E00               	movlw	0
  2544  00224A  0100               	movlb	0	; () banked
  2545  00224C  2197               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  2546  00224E  6E29               	movwf	(??_guardar_comando+1)& (0+255),c
  2547  002250  0EBD               	movlw	low _comando
  2548  002252  2428               	addwf	??_guardar_comando,w,c
  2549  002254  6ED9               	movwf	fsr2l,c
  2550  002256  0E00               	movlw	high _comando
  2551  002258  2029               	addwfc	??_guardar_comando+1,w,c
  2552  00225A  6EDA               	movwf	fsr2h,c
  2553  00225C  0E00               	movlw	0
  2554  00225E  6EDF               	movwf	indf2,c
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;headers\teclado.h: 24: tamanio_comando++;
  2558  002260  0100               	movlb	0	; () banked
  2559  002262  4B96               	infsnz	_tamanio_comando& (0+255),f,b
  2560  002264  2B97               	incf	(_tamanio_comando+1)& (0+255),f,b
  2561  002266  0012               	return	
  2562  002268                     l152:
  2563                           
  2564                           ; BSR set to: 0
  2565  002268  0012               	return		;funcret
  2566  00226A                     __end_of_guardar_comando:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           postdec1	equ	0xFE5
  2579                           fsr1l	equ	0xFE1
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _guardar_elemento *****************
  2588 ;; Defined at:
  2589 ;;		line 26 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  tecla           1    wreg     unsigned char 
  2592 ;;  array           2   39[COMRAM] PTR unsigned char 
  2593 ;;		 -> year(3), month(3), day(3), 
  2594 ;;  tamanio_arra    2   41[COMRAM] PTR int 
  2595 ;;		 -> tamanio_dia(2), RAM(3775), 
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  tecla           1   45[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  2   39[COMRAM] int 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2611 ;;Total ram usage:        7 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    2
  2614 ;; This function calls:
  2615 ;;		_sprintf
  2616 ;; This function is called by:
  2617 ;;		_cambiar_dia
  2618 ;;		_cambiar_mes
  2619 ;;		_cambiar_anio
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text11
  2624  002114                     __ptext11:
  2625                           	opt stack 0
  2626  002114                     _guardar_elemento:
  2627                           	opt stack 25
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;incstack = 0
  2631                           ;guardar_elemento@tecla stored from wreg
  2632  002114  6E2E               	movwf	guardar_elemento@tecla,c
  2633                           
  2634                           ;headers\fecha.h: 28: sprintf(buffer2,"%01u",tecla);
  2635  002116  0E9A               	movlw	low _buffer2
  2636  002118  6E0D               	movwf	sprintf@sp,c
  2637  00211A  0E00               	movlw	high _buffer2
  2638  00211C  6E0E               	movwf	sprintf@sp+1,c
  2639  00211E  0E6F               	movlw	low STR_1
  2640  002120  6E0F               	movwf	sprintf@f,c
  2641  002122  0E0F               	movlw	high STR_1
  2642  002124  6E10               	movwf	sprintf@f+1,c
  2643  002126  C02E  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  2644  00212A  6A12               	clrf	?_sprintf+5,c
  2645  00212C  ECC8  F007         	call	_sprintf	;wreg free
  2646                           
  2647                           ;headers\fecha.h: 29: array[*tamanio_array] = *buffer2;
  2648  002130  C02A  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2649  002134  C02B  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2650  002138  CFDE F02C          	movff	postinc2,??_guardar_elemento
  2651  00213C  CFDD F02D          	movff	postdec2,??_guardar_elemento+1
  2652  002140  502C               	movf	??_guardar_elemento,w,c
  2653  002142  2428               	addwf	guardar_elemento@array,w,c
  2654  002144  6ED9               	movwf	fsr2l,c
  2655  002146  502D               	movf	??_guardar_elemento+1,w,c
  2656  002148  2029               	addwfc	guardar_elemento@array+1,w,c
  2657  00214A  6EDA               	movwf	fsr2h,c
  2658  00214C  C09A  FFDF         	movff	_buffer2,indf2
  2659                           
  2660                           ;headers\fecha.h: 30: array [(*tamanio_array)+1] = '\0';
  2661  002150  C02A  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2662  002154  C02B  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2663  002158  CFDE F02C          	movff	postinc2,??_guardar_elemento
  2664  00215C  CFDD F02D          	movff	postdec2,??_guardar_elemento+1
  2665  002160  0E01               	movlw	1
  2666  002162  262C               	addwf	??_guardar_elemento,f,c
  2667  002164  0E00               	movlw	0
  2668  002166  222D               	addwfc	??_guardar_elemento+1,f,c
  2669  002168  502C               	movf	??_guardar_elemento,w,c
  2670  00216A  2428               	addwf	guardar_elemento@array,w,c
  2671  00216C  6ED9               	movwf	fsr2l,c
  2672  00216E  502D               	movf	??_guardar_elemento+1,w,c
  2673  002170  2029               	addwfc	guardar_elemento@array+1,w,c
  2674  002172  6EDA               	movwf	fsr2h,c
  2675  002174  0E00               	movlw	0
  2676  002176  6EDF               	movwf	indf2,c
  2677                           
  2678                           ;headers\fecha.h: 31: (*tamanio_array)++;
  2679  002178  C02A  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  2680  00217C  C02B  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  2681  002180  2ADE               	incf	postinc2,f,c
  2682  002182  0E00               	movlw	0
  2683  002184  22DD               	addwfc	postdec2,f,c
  2684  002186  0012               	return		;funcret
  2685  002188                     __end_of_guardar_elemento:
  2686                           	opt stack 0
  2687                           tosu	equ	0xFFF
  2688                           tosh	equ	0xFFE
  2689                           tosl	equ	0xFFD
  2690                           pclath	equ	0xFFA
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _convertir_a_int *****************
  2707 ;; Defined at:
  2708 ;;		line 34 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  array           2   13[COMRAM] PTR unsigned char 
  2711 ;;		 -> RAM(3775), 
  2712 ;;  valor           2   15[COMRAM] PTR int 
  2713 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  2   13[COMRAM] int 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2728 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2729 ;;Total ram usage:        4 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    2
  2732 ;; This function calls:
  2733 ;;		_atoi
  2734 ;; This function is called by:
  2735 ;;		_cambiar_dia
  2736 ;;		_cambiar_mes
  2737 ;;		_cambiar_anio
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text12
  2742  0027A4                     __ptext12:
  2743                           	opt stack 0
  2744  0027A4                     _convertir_a_int:
  2745                           	opt stack 25
  2746                           
  2747                           ;headers\fecha.h: 35: *valor = atoi(array);
  2748                           
  2749                           ;incstack = 0
  2750  0027A4  C00E  F007         	movff	convertir_a_int@array,atoi@s
  2751  0027A8  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  2752  0027AC  EC33  F00E         	call	_atoi	;wreg free
  2753  0027B0  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  2754  0027B4  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  2755  0027B8  C007  FFDE         	movff	?_atoi,postinc2
  2756  0027BC  C008  FFDD         	movff	?_atoi+1,postdec2
  2757  0027C0  0012               	return		;funcret
  2758  0027C2                     __end_of_convertir_a_int:
  2759                           	opt stack 0
  2760                           tosu	equ	0xFFF
  2761                           tosh	equ	0xFFE
  2762                           tosl	equ	0xFFD
  2763                           pclath	equ	0xFFA
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _atoi *****************
  2780 ;; Defined at:
  2781 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2784 ;;		 -> RAM(3775), 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  a               2   11[COMRAM] int 
  2787 ;;  sign            1   10[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  2    6[COMRAM] int 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2798 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;Total ram usage:        7 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    1
  2804 ;; This function calls:
  2805 ;;		___wmul
  2806 ;;		_isdigit
  2807 ;; This function is called by:
  2808 ;;		_convertir_a_int
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text13
  2813  001C66                     __ptext13:
  2814                           	opt stack 0
  2815  001C66                     _atoi:
  2816                           	opt stack 25
  2817                           
  2818                           ;incstack = 0
  2819  001C66  D003               	goto	l2534
  2820  001C68                     l2532:
  2821  001C68  4A07               	infsnz	atoi@s,f,c
  2822  001C6A  2A08               	incf	atoi@s+1,f,c
  2823  001C6C  D000               	goto	l2534
  2824  001C6E                     l2534:
  2825  001C6E  C007  FFD9         	movff	atoi@s,fsr2l
  2826  001C72  C008  FFDA         	movff	atoi@s+1,fsr2h
  2827  001C76  0E20               	movlw	32
  2828  001C78  18DE               	xorwf	postinc2,w,c
  2829  001C7A  B4D8               	btfsc	status,2,c
  2830  001C7C  D7F5               	goto	l2532
  2831  001C7E  C007  FFD9         	movff	atoi@s,fsr2l
  2832  001C82  C008  FFDA         	movff	atoi@s+1,fsr2h
  2833  001C86  0E09               	movlw	9
  2834  001C88  18DE               	xorwf	postinc2,w,c
  2835  001C8A  B4D8               	btfsc	status,2,c
  2836  001C8C  D7ED               	goto	l2532
  2837  001C8E  0E00               	movlw	0
  2838  001C90  6E0D               	movwf	atoi@a+1,c
  2839  001C92  0E00               	movlw	0
  2840  001C94  6E0C               	movwf	atoi@a,c
  2841  001C96  0E00               	movlw	0
  2842  001C98  6E0B               	movwf	atoi@sign,c
  2843  001C9A  C007  FFD9         	movff	atoi@s,fsr2l
  2844  001C9E  C008  FFDA         	movff	atoi@s+1,fsr2h
  2845  001CA2  0E2D               	movlw	45
  2846  001CA4  18DE               	xorwf	postinc2,w,c
  2847  001CA6  A4D8               	btfss	status,2,c
  2848  001CA8  D002               	goto	l2544
  2849  001CAA  2A0B               	incf	atoi@sign,f,c
  2850  001CAC  D025               	goto	l2550
  2851  001CAE                     l2544:
  2852  001CAE  C007  FFD9         	movff	atoi@s,fsr2l
  2853  001CB2  C008  FFDA         	movff	atoi@s+1,fsr2h
  2854  001CB6  0E2B               	movlw	43
  2855  001CB8  18DE               	xorwf	postinc2,w,c
  2856  001CBA  A4D8               	btfss	status,2,c
  2857  001CBC  D020               	goto	l2552
  2858  001CBE  D01C               	goto	l2550
  2859  001CC0  D01E               	goto	l2552
  2860  001CC2                     l2548:
  2861  001CC2  C00C  F001         	movff	atoi@a,___wmul@multiplier
  2862  001CC6  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  2863  001CCA  0E00               	movlw	0
  2864  001CCC  6E04               	movwf	___wmul@multiplicand+1,c
  2865  001CCE  0E0A               	movlw	10
  2866  001CD0  6E03               	movwf	___wmul@multiplicand,c
  2867  001CD2  EC89  F013         	call	___wmul	;wreg free
  2868  001CD6  C007  FFD9         	movff	atoi@s,fsr2l
  2869  001CDA  C008  FFDA         	movff	atoi@s+1,fsr2h
  2870  001CDE  50DF               	movf	indf2,w,c
  2871  001CE0  6E09               	movwf	??_atoi& (0+255),c
  2872  001CE2  6A0A               	clrf	(??_atoi+1)& (0+255),c
  2873  001CE4  5001               	movf	?___wmul,w,c
  2874  001CE6  2609               	addwf	??_atoi,f,c
  2875  001CE8  5002               	movf	?___wmul+1,w,c
  2876  001CEA  220A               	addwfc	??_atoi+1,f,c
  2877  001CEC  0ED0               	movlw	208
  2878  001CEE  2409               	addwf	??_atoi,w,c
  2879  001CF0  6E0C               	movwf	atoi@a,c
  2880  001CF2  0EFF               	movlw	255
  2881  001CF4  200A               	addwfc	??_atoi+1,w,c
  2882  001CF6  6E0D               	movwf	atoi@a+1,c
  2883  001CF8                     l2550:
  2884  001CF8  4A07               	infsnz	atoi@s,f,c
  2885  001CFA  2A08               	incf	atoi@s+1,f,c
  2886  001CFC  D000               	goto	l2552
  2887  001CFE                     l2552:
  2888  001CFE  C007  FFD9         	movff	atoi@s,fsr2l
  2889  001D02  C008  FFDA         	movff	atoi@s+1,fsr2h
  2890  001D06  50DF               	movf	indf2,w,c
  2891  001D08  ECC1  F013         	call	_isdigit
  2892  001D0C  B0D8               	btfsc	status,0,c
  2893  001D0E  D7D9               	goto	l2548
  2894  001D10  500B               	movf	atoi@sign,w,c
  2895  001D12  B4D8               	btfsc	status,2,c
  2896  001D14  D00D               	goto	l712
  2897  001D16  C00C  F009         	movff	atoi@a,??_atoi
  2898  001D1A  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  2899  001D1E  1E09               	comf	??_atoi,f,c
  2900  001D20  1E0A               	comf	??_atoi+1,f,c
  2901  001D22  4A09               	infsnz	??_atoi,f,c
  2902  001D24  2A0A               	incf	??_atoi+1,f,c
  2903  001D26  C009  F007         	movff	??_atoi,?_atoi
  2904  001D2A  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2905  001D2E  0012               	return	
  2906  001D30                     l712:
  2907  001D30  C00C  F007         	movff	atoi@a,?_atoi
  2908  001D34  C00D  F008         	movff	atoi@a+1,?_atoi+1
  2909  001D38  0012               	return		;funcret
  2910  001D3A                     __end_of_atoi:
  2911                           	opt stack 0
  2912                           tosu	equ	0xFFF
  2913                           tosh	equ	0xFFE
  2914                           tosl	equ	0xFFD
  2915                           pclath	equ	0xFFA
  2916                           tblptru	equ	0xFF8
  2917                           tblptrh	equ	0xFF7
  2918                           tblptrl	equ	0xFF6
  2919                           tablat	equ	0xFF5
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           postdec1	equ	0xFE5
  2923                           fsr1l	equ	0xFE1
  2924                           indf2	equ	0xFDF
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _inicializar_fecha *****************
  2932 ;; Defined at:
  2933 ;;		line 20 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  2  243[None  ] int 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;Total ram usage:        0 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    3
  2954 ;; This function calls:
  2955 ;;		_inicializar_elemento
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text14
  2962  002676                     __ptext14:
  2963                           	opt stack 0
  2964  002676                     _inicializar_fecha:
  2965                           	opt stack 27
  2966                           
  2967                           ;headers\fecha.h: 21: inicializar_elemento(day,dia);
  2968                           
  2969                           ;incstack = 0
  2970  002676  0EAE               	movlw	low _day
  2971  002678  6E28               	movwf	inicializar_elemento@array,c
  2972  00267A  0E00               	movlw	high _day
  2973  00267C  6E29               	movwf	inicializar_elemento@array+1,c
  2974  00267E  C05B  F02A         	movff	_dia,inicializar_elemento@val
  2975  002682  C05C  F02B         	movff	_dia+1,inicializar_elemento@val+1
  2976  002686  ECAC  F012         	call	_inicializar_elemento	;wreg free
  2977                           
  2978                           ;headers\fecha.h: 22: inicializar_elemento(month,mes);
  2979  00268A  0EB1               	movlw	low _month
  2980  00268C  6E28               	movwf	inicializar_elemento@array,c
  2981  00268E  0E00               	movlw	high _month
  2982  002690  6E29               	movwf	inicializar_elemento@array+1,c
  2983  002692  C05D  F02A         	movff	_mes,inicializar_elemento@val
  2984  002696  C05E  F02B         	movff	_mes+1,inicializar_elemento@val+1
  2985  00269A  ECAC  F012         	call	_inicializar_elemento	;wreg free
  2986                           
  2987                           ;headers\fecha.h: 23: inicializar_elemento(year,anio);
  2988  00269E  0EB4               	movlw	low _year
  2989  0026A0  6E28               	movwf	inicializar_elemento@array,c
  2990  0026A2  0E00               	movlw	high _year
  2991  0026A4  6E29               	movwf	inicializar_elemento@array+1,c
  2992  0026A6  C059  F02A         	movff	_anio,inicializar_elemento@val
  2993  0026AA  C05A  F02B         	movff	_anio+1,inicializar_elemento@val+1
  2994  0026AE  ECAC  F012         	call	_inicializar_elemento	;wreg free
  2995  0026B2  0012               	return		;funcret
  2996  0026B4                     __end_of_inicializar_fecha:
  2997                           	opt stack 0
  2998                           tosu	equ	0xFFF
  2999                           tosh	equ	0xFFE
  3000                           tosl	equ	0xFFD
  3001                           pclath	equ	0xFFA
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           postdec2	equ	0xFDD
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _inicializar_elemento *****************
  3018 ;; Defined at:
  3019 ;;		line 12 in file "C:/Archivos de programa/Unimic/unmc_01/headers\fecha.h"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  array           2   39[COMRAM] PTR unsigned char 
  3022 ;;		 -> year(3), month(3), day(3), 
  3023 ;;  val             2   41[COMRAM] int 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  2   39[COMRAM] int 
  3028 ;; Registers used:
  3029 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3039 ;;Total ram usage:        4 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    2
  3042 ;; This function calls:
  3043 ;;		_sprintf
  3044 ;; This function is called by:
  3045 ;;		_inicializar_fecha
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text15
  3050  002558                     __ptext15:
  3051                           	opt stack 0
  3052  002558                     _inicializar_elemento:
  3053                           	opt stack 27
  3054                           
  3055                           ;headers\fecha.h: 14: sprintf(buffer2,"%d",val);
  3056                           
  3057                           ;incstack = 0
  3058  002558  0E9A               	movlw	low _buffer2
  3059  00255A  6E0D               	movwf	sprintf@sp,c
  3060  00255C  0E00               	movlw	high _buffer2
  3061  00255E  6E0E               	movwf	sprintf@sp+1,c
  3062  002560  0E80               	movlw	low STR_10
  3063  002562  6E0F               	movwf	sprintf@f,c
  3064  002564  0E0F               	movlw	high STR_10
  3065  002566  6E10               	movwf	sprintf@f+1,c
  3066  002568  C02A  F011         	movff	inicializar_elemento@val,?_sprintf+4
  3067  00256C  C02B  F012         	movff	inicializar_elemento@val+1,?_sprintf+5
  3068  002570  ECC8  F007         	call	_sprintf	;wreg free
  3069                           
  3070                           ;headers\fecha.h: 15: array[0] = buffer2[0];
  3071  002574  C028  FFD9         	movff	inicializar_elemento@array,fsr2l
  3072  002578  C029  FFDA         	movff	inicializar_elemento@array+1,fsr2h
  3073  00257C  C09A  FFDF         	movff	_buffer2,indf2
  3074                           
  3075                           ;headers\fecha.h: 16: array[1] = buffer2[1];
  3076  002580  EE20 F001          	lfsr	2,1
  3077  002584  5028               	movf	inicializar_elemento@array,w,c
  3078  002586  26D9               	addwf	fsr2l,f,c
  3079  002588  5029               	movf	inicializar_elemento@array+1,w,c
  3080  00258A  22DA               	addwfc	fsr2h,f,c
  3081  00258C  C09B  FFDF         	movff	_buffer2+1,indf2
  3082                           
  3083                           ;headers\fecha.h: 17: array[2] = '\0';
  3084  002590  EE20 F002          	lfsr	2,2
  3085  002594  5028               	movf	inicializar_elemento@array,w,c
  3086  002596  26D9               	addwf	fsr2l,f,c
  3087  002598  5029               	movf	inicializar_elemento@array+1,w,c
  3088  00259A  22DA               	addwfc	fsr2h,f,c
  3089  00259C  0E00               	movlw	0
  3090  00259E  6EDF               	movwf	indf2,c
  3091  0025A0  0012               	return		;funcret
  3092  0025A2                     __end_of_inicializar_elemento:
  3093                           	opt stack 0
  3094                           tosu	equ	0xFFF
  3095                           tosh	equ	0xFFE
  3096                           tosl	equ	0xFFD
  3097                           pclath	equ	0xFFA
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           postdec1	equ	0xFE5
  3105                           fsr1l	equ	0xFE1
  3106                           indf2	equ	0xFDF
  3107                           postinc2	equ	0xFDE
  3108                           postdec2	equ	0xFDD
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _ingresar_password *****************
  3114 ;; Defined at:
  3115 ;;		line 101 in file "main.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  i               2   27[COMRAM] int 
  3120 ;;  i               2   29[COMRAM] int 
  3121 ;;  clear          16   11[COMRAM] unsigned char [16]
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  2  280[None  ] int 
  3124 ;; Registers used:
  3125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3132 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3134 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3135 ;;Total ram usage:       21 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    5
  3138 ;; This function calls:
  3139 ;;		_lcd_comand
  3140 ;;		_lcd_gotoxy
  3141 ;;		_lcd_putrs
  3142 ;;		_validar_password
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text16
  3149  001B6E                     __ptext16:
  3150                           	opt stack 0
  3151  001B6E                     _ingresar_password:
  3152                           	opt stack 25
  3153                           
  3154                           ;main.c: 102: char clear[16];
  3155                           ;main.c: 103: for (int i=0;i<16;i++) clear[i]=' ';
  3156                           
  3157                           ;incstack = 0
  3158  001B6E  0E00               	movlw	0
  3159  001B70  6E1F               	movwf	ingresar_password@i+1,c
  3160  001B72  0E00               	movlw	0
  3161  001B74  6E1E               	movwf	ingresar_password@i,c
  3162  001B76                     l3196:
  3163  001B76  BE1F               	btfsc	ingresar_password@i+1,7,c
  3164  001B78  D008               	goto	l3200
  3165  001B7A  501F               	movf	ingresar_password@i+1,w,c
  3166  001B7C  E112               	bnz	l3206
  3167  001B7E  0E10               	movlw	16
  3168  001B80  5C1E               	subwf	ingresar_password@i,w,c
  3169  001B82  B0D8               	btfsc	status,0,c
  3170  001B84  D00E               	goto	l3206
  3171  001B86  D001               	goto	l3200
  3172  001B88  D00C               	goto	l3206
  3173  001B8A                     l3200:
  3174  001B8A  0E0C               	movlw	low ingresar_password@clear
  3175  001B8C  241E               	addwf	ingresar_password@i,w,c
  3176  001B8E  6ED9               	movwf	fsr2l,c
  3177  001B90  0E00               	movlw	high ingresar_password@clear
  3178  001B92  201F               	addwfc	ingresar_password@i+1,w,c
  3179  001B94  6EDA               	movwf	fsr2h,c
  3180  001B96  0E20               	movlw	32
  3181  001B98  6EDF               	movwf	indf2,c
  3182  001B9A  4A1E               	infsnz	ingresar_password@i,f,c
  3183  001B9C  2A1F               	incf	ingresar_password@i+1,f,c
  3184  001B9E  D7EB               	goto	l3196
  3185  001BA0  D000               	goto	l3206
  3186  001BA2                     l3206:
  3187                           
  3188                           ;main.c: 105: if(tamanio_password < 6){
  3189  001BA2  BE4D               	btfsc	_tamanio_password+1,7,c
  3190  001BA4  D006               	goto	l3208
  3191  001BA6  504D               	movf	_tamanio_password+1,w,c
  3192  001BA8  E118               	bnz	l3214
  3193  001BAA  0E06               	movlw	6
  3194  001BAC  5C4C               	subwf	_tamanio_password,w,c
  3195  001BAE  B0D8               	btfsc	status,0,c
  3196  001BB0  D014               	goto	l3214
  3197  001BB2                     l3208:
  3198                           
  3199                           ;main.c: 107: lcd_comand(0b00001100);
  3200  001BB2  0E0C               	movlw	12
  3201  001BB4  EC04  F014         	call	_lcd_comand
  3202                           
  3203                           ;main.c: 108: lcd_gotoxy(1,1);
  3204  001BB8  0E01               	movlw	1
  3205  001BBA  6E05               	movwf	lcd_gotoxy@y,c
  3206  001BBC  0E01               	movlw	1
  3207  001BBE  ECAF  F013         	call	_lcd_gotoxy
  3208                           
  3209                           ;main.c: 109: lcd_putrs("Inserte password");
  3210  001BC2  0E0F               	movlw	low STR_14
  3211  001BC4  6E09               	movwf	lcd_putrs@ptr,c
  3212  001BC6  0E0F               	movlw	high STR_14
  3213  001BC8  6E0A               	movwf	lcd_putrs@ptr+1,c
  3214  001BCA  EC36  F012         	call	_lcd_putrs	;wreg free
  3215                           
  3216                           ;main.c: 110: lcd_gotoxy(tamanio_password+1,2);
  3217  001BCE  0E02               	movlw	2
  3218  001BD0  6E05               	movwf	lcd_gotoxy@y,c
  3219  001BD2  284C               	incf	_tamanio_password,w,c
  3220  001BD4  ECAF  F013         	call	_lcd_gotoxy
  3221  001BD8  D000               	goto	l3214
  3222  001BDA                     l3214:
  3223                           
  3224                           ;main.c: 111: }
  3225                           ;main.c: 113: validar_password();
  3226  001BDA  ECA2  F011         	call	_validar_password	;wreg free
  3227                           
  3228                           ;main.c: 114: if (tamanio_password >= 6 && !autorizado){
  3229  001BDE  BE4D               	btfsc	_tamanio_password+1,7,c
  3230  001BE0  0012               	return	
  3231  001BE2  504D               	movf	_tamanio_password+1,w,c
  3232  001BE4  E104               	bnz	u2850
  3233  001BE6  0E06               	movlw	6
  3234  001BE8  5C4C               	subwf	_tamanio_password,w,c
  3235  001BEA  A0D8               	btfss	status,0,c
  3236  001BEC  0012               	return	
  3237  001BEE                     u2850:
  3238  001BEE  0100               	movlb	0	; () banked
  3239  001BF0  5184               	movf	_autorizado& (0+255),w,b
  3240  001BF2  0100               	movlb	0	; () banked
  3241  001BF4  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3242  001BF6  A4D8               	btfss	status,2,c
  3243  001BF8  0012               	return	
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 115: tamanio_password = 0;
  3247  001BFA  0E00               	movlw	0
  3248  001BFC  6E4D               	movwf	_tamanio_password+1,c
  3249  001BFE  0E00               	movlw	0
  3250  001C00  6E4C               	movwf	_tamanio_password,c
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 116: lcd_gotoxy(1,2);
  3254  001C02  0E02               	movlw	2
  3255  001C04  6E05               	movwf	lcd_gotoxy@y,c
  3256  001C06  0E01               	movlw	1
  3257  001C08  ECAF  F013         	call	_lcd_gotoxy
  3258                           
  3259                           ;main.c: 117: lcd_putrs("ERROR pass");
  3260  001C0C  0E4B               	movlw	low STR_15
  3261  001C0E  6E09               	movwf	lcd_putrs@ptr,c
  3262  001C10  0E0F               	movlw	high STR_15
  3263  001C12  6E0A               	movwf	lcd_putrs@ptr+1,c
  3264  001C14  EC36  F012         	call	_lcd_putrs	;wreg free
  3265                           
  3266                           ;main.c: 118: for (int i=0;i<6;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3267  001C18  0E00               	movlw	0
  3268  001C1A  6E1D               	movwf	ingresar_password@i_1013+1,c
  3269  001C1C  0E00               	movlw	0
  3270  001C1E  6E1C               	movwf	ingresar_password@i_1013,c
  3271  001C20                     l3228:
  3272  001C20  BE1D               	btfsc	ingresar_password@i_1013+1,7,c
  3273  001C22  D008               	goto	l3232
  3274  001C24  501D               	movf	ingresar_password@i_1013+1,w,c
  3275  001C26  E112               	bnz	l3236
  3276  001C28  0E06               	movlw	6
  3277  001C2A  5C1C               	subwf	ingresar_password@i_1013,w,c
  3278  001C2C  B0D8               	btfsc	status,0,c
  3279  001C2E  D00E               	goto	l3236
  3280  001C30  D001               	goto	l3232
  3281  001C32  D00C               	goto	l3236
  3282  001C34                     l3232:
  3283  001C34  0EFF               	movlw	255
  3284  001C36  6E0B               	movwf	??_ingresar_password& (0+255),c
  3285  001C38  0E8A               	movlw	138
  3286  001C3A                     u3047:
  3287  001C3A  2EE8               	decfsz	wreg,f,c
  3288  001C3C  D7FE               	goto	u3047
  3289  001C3E  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  3290  001C40  D7FC               	goto	u3047
  3291  001C42  D000               	nop2	
  3292  001C44  4A1C               	infsnz	ingresar_password@i_1013,f,c
  3293  001C46  2A1D               	incf	ingresar_password@i_1013+1,f,c
  3294  001C48  D7EB               	goto	l3228
  3295  001C4A  D000               	goto	l3236
  3296  001C4C                     l3236:
  3297                           
  3298                           ;main.c: 119: lcd_gotoxy(1,2);
  3299  001C4C  0E02               	movlw	2
  3300  001C4E  6E05               	movwf	lcd_gotoxy@y,c
  3301  001C50  0E01               	movlw	1
  3302  001C52  ECAF  F013         	call	_lcd_gotoxy
  3303                           
  3304                           ;main.c: 120: lcd_putrs(clear);
  3305  001C56  0E0C               	movlw	low ingresar_password@clear
  3306  001C58  6E09               	movwf	lcd_putrs@ptr,c
  3307  001C5A  0E00               	movlw	high ingresar_password@clear
  3308  001C5C  6E0A               	movwf	lcd_putrs@ptr+1,c
  3309  001C5E  EC36  F012         	call	_lcd_putrs	;wreg free
  3310  001C62  0012               	return	
  3311  001C64  0012               	return		;funcret
  3312  001C66                     __end_of_ingresar_password:
  3313                           	opt stack 0
  3314                           tosu	equ	0xFFF
  3315                           tosh	equ	0xFFE
  3316                           tosl	equ	0xFFD
  3317                           pclath	equ	0xFFA
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           indf2	equ	0xFDF
  3327                           postinc2	equ	0xFDE
  3328                           postdec2	equ	0xFDD
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function _validar_password *****************
  3334 ;; Defined at:
  3335 ;;		line 22 in file "C:/Archivos de programa/Unimic/unmc_01/headers\password.h"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  i               2    2[COMRAM] int 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  2  219[None  ] int 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3352 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3353 ;;Total ram usage:        4 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_ingresar_password
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text17
  3363  002344                     __ptext17:
  3364                           	opt stack 0
  3365  002344                     _validar_password:
  3366                           	opt stack 29
  3367                           
  3368                           ;headers\password.h: 24: autorizado = 1;
  3369                           
  3370                           ;incstack = 0
  3371  002344  0E00               	movlw	0
  3372  002346  0100               	movlb	0	; () banked
  3373  002348  6F85               	movwf	(_autorizado+1)& (0+255),b
  3374  00234A  0E01               	movlw	1
  3375  00234C  6F84               	movwf	_autorizado& (0+255),b
  3376                           
  3377                           ;headers\password.h: 25: int i = 0;
  3378  00234E  0E00               	movlw	0
  3379  002350  6E04               	movwf	validar_password@i+1,c
  3380  002352  0E00               	movlw	0
  3381  002354  6E03               	movwf	validar_password@i,c
  3382                           
  3383                           ;headers\password.h: 26: while (i < 6 && autorizado==1){
  3384  002356  D019               	goto	l2938
  3385  002358                     l2932:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;headers\password.h: 28: if (current_password[i] != password[i])
  3389  002358  0EB7               	movlw	low _password
  3390  00235A  2403               	addwf	validar_password@i,w,c
  3391  00235C  6ED9               	movwf	fsr2l,c
  3392  00235E  0E00               	movlw	high _password
  3393  002360  2004               	addwfc	validar_password@i+1,w,c
  3394  002362  6EDA               	movwf	fsr2h,c
  3395  002364  0E78               	movlw	low _current_password
  3396  002366  2403               	addwf	validar_password@i,w,c
  3397  002368  6EE1               	movwf	fsr1l,c
  3398  00236A  0E00               	movlw	high _current_password
  3399  00236C  2004               	addwfc	validar_password@i+1,w,c
  3400  00236E  6EE2               	movwf	fsr1h,c
  3401  002370  50DE               	movf	postinc2,w,c
  3402  002372  18E6               	xorwf	postinc1,w,c
  3403  002374  B4D8               	btfsc	status,2,c
  3404  002376  D006               	goto	l2936
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;headers\password.h: 29: autorizado = 0;
  3408  002378  0E00               	movlw	0
  3409  00237A  0100               	movlb	0	; () banked
  3410  00237C  6F85               	movwf	(_autorizado+1)& (0+255),b
  3411  00237E  0E00               	movlw	0
  3412  002380  6F84               	movwf	_autorizado& (0+255),b
  3413  002382  D000               	goto	l2936
  3414  002384                     l2936:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;headers\password.h: 31: i++;
  3418  002384  4A03               	infsnz	validar_password@i,f,c
  3419  002386  2A04               	incf	validar_password@i+1,f,c
  3420  002388  D000               	goto	l2938
  3421  00238A                     l2938:
  3422                           
  3423                           ; BSR set to: 0
  3424  00238A  BE04               	btfsc	validar_password@i+1,7,c
  3425  00238C  D006               	goto	l2940
  3426  00238E  5004               	movf	validar_password@i+1,w,c
  3427  002390  E10C               	bnz	l226
  3428  002392  0E06               	movlw	6
  3429  002394  5C03               	subwf	validar_password@i,w,c
  3430  002396  B0D8               	btfsc	status,0,c
  3431  002398  0012               	return	
  3432  00239A                     l2940:
  3433                           
  3434                           ; BSR set to: 0
  3435  00239A  0100               	movlb	0	; () banked
  3436  00239C  0584               	decf	_autorizado& (0+255),w,b
  3437  00239E  0100               	movlb	0	; () banked
  3438  0023A0  1185               	iorwf	(_autorizado+1)& (0+255),w,b
  3439  0023A2  A4D8               	btfss	status,2,c
  3440  0023A4  0012               	return	
  3441  0023A6  D7D8               	goto	l2932
  3442                           
  3443                           ; BSR set to: 0
  3444  0023A8  0012               	return	
  3445  0023AA                     l226:
  3446                           
  3447                           ; BSR set to: 0
  3448  0023AA  0012               	return		;funcret
  3449  0023AC                     __end_of_validar_password:
  3450                           	opt stack 0
  3451                           tosu	equ	0xFFF
  3452                           tosh	equ	0xFFE
  3453                           tosl	equ	0xFFD
  3454                           pclath	equ	0xFFA
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           postinc1	equ	0xFE6
  3462                           postdec1	equ	0xFE5
  3463                           fsr1h	equ	0xFE2
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _caratula *****************
  3473 ;; Defined at:
  3474 ;;		line 48 in file "main.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  titulo          2   39[COMRAM] PTR unsigned char 
  3477 ;;		 -> STR_18(9), 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;		None               void
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;Total ram usage:        2 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    6
  3496 ;; This function calls:
  3497 ;;		_clear
  3498 ;;		_lcd_comand
  3499 ;;		_lcd_gotoxy
  3500 ;;		_lcd_putrs
  3501 ;;		_sprintf
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text18
  3508  001D3A                     __ptext18:
  3509                           	opt stack 0
  3510  001D3A                     _caratula:
  3511                           	opt stack 24
  3512                           
  3513                           ;main.c: 50: clear(1);
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;incstack = 0
  3517  001D3A  0E00               	movlw	0
  3518  001D3C  6E0C               	movwf	clear@limpiar+1,c
  3519  001D3E  0E01               	movlw	1
  3520  001D40  6E0B               	movwf	clear@limpiar,c
  3521  001D42  EC6C  F011         	call	_clear	;wreg free
  3522                           
  3523                           ;main.c: 52: lcd_comand(0b00001100);
  3524  001D46  0E0C               	movlw	12
  3525  001D48  EC04  F014         	call	_lcd_comand
  3526                           
  3527                           ;main.c: 53: lcd_gotoxy(1,1);
  3528  001D4C  0E01               	movlw	1
  3529  001D4E  6E05               	movwf	lcd_gotoxy@y,c
  3530  001D50  0E01               	movlw	1
  3531  001D52  ECAF  F013         	call	_lcd_gotoxy
  3532                           
  3533                           ;main.c: 54: lcd_putrs(titulo);
  3534  001D56  C028  F009         	movff	caratula@titulo,lcd_putrs@ptr
  3535  001D5A  C029  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  3536  001D5E  EC36  F012         	call	_lcd_putrs	;wreg free
  3537                           
  3538                           ;main.c: 56: sprintf(buffer2,"%s/%s/%s",day,month,year);
  3539  001D62  0E9A               	movlw	low _buffer2
  3540  001D64  6E0D               	movwf	sprintf@sp,c
  3541  001D66  0E00               	movlw	high _buffer2
  3542  001D68  6E0E               	movwf	sprintf@sp+1,c
  3543  001D6A  0E5F               	movlw	low STR_12
  3544  001D6C  6E0F               	movwf	sprintf@f,c
  3545  001D6E  0E0F               	movlw	high STR_12
  3546  001D70  6E10               	movwf	sprintf@f+1,c
  3547  001D72  0EAE               	movlw	low _day
  3548  001D74  6E11               	movwf	?_sprintf+4,c
  3549  001D76  0E00               	movlw	high _day
  3550  001D78  6E12               	movwf	?_sprintf+5,c
  3551  001D7A  0EB1               	movlw	low _month
  3552  001D7C  6E13               	movwf	?_sprintf+6,c
  3553  001D7E  0E00               	movlw	high _month
  3554  001D80  6E14               	movwf	?_sprintf+7,c
  3555  001D82  0EB4               	movlw	low _year
  3556  001D84  6E15               	movwf	?_sprintf+8,c
  3557  001D86  0E00               	movlw	high _year
  3558  001D88  6E16               	movwf	?_sprintf+9,c
  3559  001D8A  ECC8  F007         	call	_sprintf	;wreg free
  3560                           
  3561                           ;main.c: 57: lcd_gotoxy(9,1);
  3562  001D8E  0E01               	movlw	1
  3563  001D90  6E05               	movwf	lcd_gotoxy@y,c
  3564  001D92  0E09               	movlw	9
  3565  001D94  ECAF  F013         	call	_lcd_gotoxy
  3566                           
  3567                           ;main.c: 58: lcd_putrs(buffer2);
  3568  001D98  0E9A               	movlw	low _buffer2
  3569  001D9A  6E09               	movwf	lcd_putrs@ptr,c
  3570  001D9C  0E00               	movlw	high _buffer2
  3571  001D9E  6E0A               	movwf	lcd_putrs@ptr+1,c
  3572  001DA0  EC36  F012         	call	_lcd_putrs	;wreg free
  3573                           
  3574                           ;main.c: 60: sprintf(buffer2,"  %02u:%02u:%02u",hora,minuto,segundo);
  3575  001DA4  0E9A               	movlw	low _buffer2
  3576  001DA6  6E0D               	movwf	sprintf@sp,c
  3577  001DA8  0E00               	movlw	high _buffer2
  3578  001DAA  6E0E               	movwf	sprintf@sp+1,c
  3579  001DAC  0E20               	movlw	low STR_13
  3580  001DAE  6E0F               	movwf	sprintf@f,c
  3581  001DB0  0E0F               	movlw	high STR_13
  3582  001DB2  6E10               	movwf	sprintf@f+1,c
  3583  001DB4  C0C3  F011         	movff	_hora,?_sprintf+4
  3584  001DB8  C0C4  F012         	movff	_hora+1,?_sprintf+5
  3585  001DBC  C0C5  F013         	movff	_minuto,?_sprintf+6
  3586  001DC0  C0C6  F014         	movff	_minuto+1,?_sprintf+7
  3587  001DC4  C092  F015         	movff	_segundo,?_sprintf+8
  3588  001DC8  C093  F016         	movff	_segundo+1,?_sprintf+9
  3589  001DCC  ECC8  F007         	call	_sprintf	;wreg free
  3590                           
  3591                           ;main.c: 61: lcd_gotoxy(1,2);
  3592  001DD0  0E02               	movlw	2
  3593  001DD2  6E05               	movwf	lcd_gotoxy@y,c
  3594  001DD4  0E01               	movlw	1
  3595  001DD6  ECAF  F013         	call	_lcd_gotoxy
  3596                           
  3597                           ;main.c: 62: lcd_putrs(buffer2);
  3598  001DDA  0E9A               	movlw	low _buffer2
  3599  001DDC  6E09               	movwf	lcd_putrs@ptr,c
  3600  001DDE  0E00               	movlw	high _buffer2
  3601  001DE0  6E0A               	movwf	lcd_putrs@ptr+1,c
  3602  001DE2  EC36  F012         	call	_lcd_putrs	;wreg free
  3603  001DE6  0012               	return		;funcret
  3604  001DE8                     __end_of_caratula:
  3605                           	opt stack 0
  3606                           tosu	equ	0xFFF
  3607                           tosh	equ	0xFFE
  3608                           tosl	equ	0xFFD
  3609                           pclath	equ	0xFFA
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           postinc0	equ	0xFEE
  3615                           wreg	equ	0xFE8
  3616                           postinc1	equ	0xFE6
  3617                           postdec1	equ	0xFE5
  3618                           fsr1h	equ	0xFE2
  3619                           fsr1l	equ	0xFE1
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _sprintf *****************
  3628 ;; Defined at:
  3629 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3632 ;;		 -> buffer2(20), 
  3633 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3634 ;;		 -> STR_16(5), STR_13(17), STR_12(9), STR_11(5), 
  3635 ;;		 -> STR_10(3), STR_2(5), STR_1(5), 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  tmpval          4    0        struct .
  3638 ;;  width           2   37[COMRAM] int 
  3639 ;;  val             2   33[COMRAM] unsigned int 
  3640 ;;  len             2   31[COMRAM] unsigned int 
  3641 ;;  ap              2   29[COMRAM] PTR void [1]
  3642 ;;		 -> ?_sprintf(2), 
  3643 ;;  cp              2   27[COMRAM] PTR const unsigned char 
  3644 ;;		 -> STR_23(7), year(3), month(3), day(3), 
  3645 ;;		 -> RAM(3775), 
  3646 ;;  c               1   36[COMRAM] char 
  3647 ;;  flag            1   35[COMRAM] unsigned char 
  3648 ;;  prec            1   26[COMRAM] char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  2   12[COMRAM] int 
  3651 ;; Registers used:
  3652 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3658 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3659 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3660 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3661 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3662 ;;Total ram usage:       27 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    1
  3665 ;; This function calls:
  3666 ;;		___lwdiv
  3667 ;;		___lwmod
  3668 ;;		___wmul
  3669 ;;		_isdigit
  3670 ;; This function is called by:
  3671 ;;		_guardar_comando
  3672 ;;		_imprimir_tecla
  3673 ;;		_inicializar_elemento
  3674 ;;		_guardar_elemento
  3675 ;;		_caratula
  3676 ;;		_mostrar_guardar_password
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text19
  3681  000F90                     __ptext19:
  3682                           	opt stack 0
  3683  000F90                     _sprintf:
  3684                           	opt stack 27
  3685                           
  3686                           ;doprnt.c: 494: va_list ap;
  3687                           ;doprnt.c: 499: signed char c;
  3688                           ;doprnt.c: 501: int width;
  3689                           ;doprnt.c: 506: signed char prec;
  3690                           ;doprnt.c: 508: unsigned char flag;
  3691                           ;doprnt.c: 523: union {
  3692                           ;doprnt.c: 524: unsigned long vd;
  3693                           ;doprnt.c: 525: double integ;
  3694                           ;doprnt.c: 526: } tmpval;
  3695                           ;doprnt.c: 528: unsigned int val;
  3696                           ;doprnt.c: 529: unsigned len;
  3697                           ;doprnt.c: 530: const char * cp;
  3698                           ;doprnt.c: 533: *ap = __va_start();
  3699                           
  3700                           ;incstack = 0
  3701  000F90  0E11               	movlw	low (?_sprintf+4)
  3702  000F92  6E1E               	movwf	sprintf@ap,c
  3703  000F94  0E00               	movlw	high (?_sprintf+4)
  3704  000F96  6E1F               	movwf	sprintf@ap+1,c
  3705                           
  3706                           ;doprnt.c: 536: while(c = *f++) {
  3707  000F98  D1E0               	goto	l2516
  3708  000F9A                     l2370:
  3709                           
  3710                           ;doprnt.c: 538: if(c != '%')
  3711  000F9A  0E25               	movlw	37
  3712  000F9C  1825               	xorwf	sprintf@c,w,c
  3713  000F9E  B4D8               	btfsc	status,2,c
  3714  000FA0  D009               	goto	l2376
  3715                           
  3716                           ;doprnt.c: 540: {
  3717                           ;doprnt.c: 541: ((*sp++ = (c)));
  3718  000FA2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3719  000FA6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3720  000FAA  C025  FFDF         	movff	sprintf@c,indf2
  3721  000FAE  4A0D               	infsnz	sprintf@sp,f,c
  3722  000FB0  2A0E               	incf	sprintf@sp+1,f,c
  3723                           
  3724                           ;doprnt.c: 542: continue;
  3725  000FB2  D1D3               	goto	l2516
  3726  000FB4                     l2376:
  3727                           
  3728                           ;doprnt.c: 543: }
  3729                           ;doprnt.c: 546: width = 0;
  3730  000FB4  0E00               	movlw	0
  3731  000FB6  6E27               	movwf	sprintf@width+1,c
  3732  000FB8  0E00               	movlw	0
  3733  000FBA  6E26               	movwf	sprintf@width,c
  3734                           
  3735                           ;doprnt.c: 548: flag = 0;
  3736  000FBC  0E00               	movlw	0
  3737  000FBE  6E24               	movwf	sprintf@flag,c
  3738                           
  3739                           ;doprnt.c: 551: switch(*f) {
  3740                           
  3741                           ;doprnt.c: 550: for(;;) {
  3742  000FC0  D005               	goto	l2382
  3743  000FC2                     l2378:
  3744                           
  3745                           ;doprnt.c: 580: flag |= 0x04;
  3746  000FC2  8424               	bsf	sprintf@flag,2,c
  3747                           
  3748                           ;doprnt.c: 581: f++;
  3749  000FC4  4A0F               	infsnz	sprintf@f,f,c
  3750  000FC6  2A10               	incf	sprintf@f+1,f,c
  3751                           
  3752                           ;doprnt.c: 582: continue;
  3753  000FC8  D001               	goto	l2382
  3754                           
  3755                           ;doprnt.c: 584: }
  3756  000FCA  D00B               	goto	l2384
  3757  000FCC                     l2382:
  3758  000FCC  C00F  FFF6         	movff	sprintf@f,tblptrl
  3759  000FD0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3760  000FD4                     	if	0	;tblptru may be non-zero
  3761  000FD4                     	endif
  3762  000FD4                     	if	0	;tblptru may be non-zero
  3763  000FD4                     	endif
  3764  000FD4  0008               	tblrd		*
  3765  000FD6  50F5               	movf	tablat,w,c
  3766                           
  3767                           ; Switch size 1, requested type "space"
  3768                           ; Number of cases is 1, Range of values is 48 to 48
  3769                           ; switch strategies available:
  3770                           ; Name         Instructions Cycles
  3771                           ; simple_byte            4     3 (average)
  3772                           ;	Chosen strategy is simple_byte
  3773  000FD8  0A30               	xorlw	48	; case 48
  3774  000FDA  B4D8               	btfsc	status,2,c
  3775  000FDC  D7F2               	goto	l2378
  3776                           
  3777                           ;doprnt.c: 585: break;
  3778  000FDE  D001               	goto	l2384
  3779                           
  3780                           ;doprnt.c: 586: }
  3781  000FE0  D7F5               	goto	l2382
  3782  000FE2                     l2384:
  3783                           
  3784                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3785  000FE2  C00F  FFF6         	movff	sprintf@f,tblptrl
  3786  000FE6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3787  000FEA                     	if	0	;tblptru may be non-zero
  3788  000FEA                     	endif
  3789  000FEA                     	if	0	;tblptru may be non-zero
  3790  000FEA                     	endif
  3791  000FEA  0008               	tblrd		*
  3792  000FEC  50F5               	movf	tablat,w,c
  3793  000FEE  ECC1  F013         	call	_isdigit
  3794  000FF2  A0D8               	btfss	status,0,c
  3795  000FF4  D0B6               	goto	l2434
  3796                           
  3797                           ;doprnt.c: 598: width = 0;
  3798  000FF6  0E00               	movlw	0
  3799  000FF8  6E27               	movwf	sprintf@width+1,c
  3800  000FFA  0E00               	movlw	0
  3801  000FFC  6E26               	movwf	sprintf@width,c
  3802  000FFE  D000               	goto	l2388
  3803  001000                     l2388:
  3804                           
  3805                           ;doprnt.c: 600: width *= 10;
  3806  001000  C026  F001         	movff	sprintf@width,___wmul@multiplier
  3807  001004  C027  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  3808  001008  0E00               	movlw	0
  3809  00100A  6E04               	movwf	___wmul@multiplicand+1,c
  3810  00100C  0E0A               	movlw	10
  3811  00100E  6E03               	movwf	___wmul@multiplicand,c
  3812  001010  EC89  F013         	call	___wmul	;wreg free
  3813  001014  C001  F026         	movff	?___wmul,sprintf@width
  3814  001018  C002  F027         	movff	?___wmul+1,sprintf@width+1
  3815                           
  3816                           ;doprnt.c: 601: width += *f++ - '0';
  3817  00101C  0ED0               	movlw	208
  3818  00101E  6E17               	movwf	??_sprintf& (0+255),c
  3819  001020  0EFF               	movlw	255
  3820  001022  6E18               	movwf	(??_sprintf+1)& (0+255),c
  3821  001024  C00F  FFF6         	movff	sprintf@f,tblptrl
  3822  001028  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3823  00102C                     	if	0	;tblptru may be non-zero
  3824  00102C                     	endif
  3825  00102C                     	if	0	;tblptru may be non-zero
  3826  00102C                     	endif
  3827  00102C  0008               	tblrd		*
  3828  00102E  50F5               	movf	tablat,w,c
  3829  001030  6E19               	movwf	(??_sprintf+2)& (0+255),c
  3830  001032  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  3831  001034  5017               	movf	??_sprintf,w,c
  3832  001036  2619               	addwf	??_sprintf+2,f,c
  3833  001038  5018               	movf	??_sprintf+1,w,c
  3834  00103A  221A               	addwfc	??_sprintf+3,f,c
  3835  00103C  5019               	movf	??_sprintf+2,w,c
  3836  00103E  2626               	addwf	sprintf@width,f,c
  3837  001040  501A               	movf	??_sprintf+3,w,c
  3838  001042  2227               	addwfc	sprintf@width+1,f,c
  3839  001044  4A0F               	infsnz	sprintf@f,f,c
  3840  001046  2A10               	incf	sprintf@f+1,f,c
  3841                           
  3842                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3843  001048  C00F  FFF6         	movff	sprintf@f,tblptrl
  3844  00104C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3845  001050                     	if	0	;tblptru may be non-zero
  3846  001050                     	endif
  3847  001050                     	if	0	;tblptru may be non-zero
  3848  001050                     	endif
  3849  001050  0008               	tblrd		*
  3850  001052  50F5               	movf	tablat,w,c
  3851  001054  ECC1  F013         	call	_isdigit
  3852  001058  A0D8               	btfss	status,0,c
  3853  00105A  D083               	goto	l2434
  3854  00105C  D7D1               	goto	l2388
  3855                           
  3856                           ;doprnt.c: 608: }
  3857                           ;doprnt.c: 635: switch(c = *f++) {
  3858  00105E  D081               	goto	l2434
  3859                           
  3860                           ;doprnt.c: 638: goto alldone;
  3861                           
  3862                           ;doprnt.c: 637: case 0:
  3863  001060  D18A               	goto	l2518
  3864                           
  3865                           ;doprnt.c: 698: case 'i':
  3866                           ;doprnt.c: 699: break;
  3867                           
  3868                           ;doprnt.c: 697: case 'd':
  3869  001062  D099               	goto	l399
  3870  001064                     l2396:
  3871                           
  3872                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3873  001064  C01E  FFD9         	movff	sprintf@ap,fsr2l
  3874  001068  C01F  FFDA         	movff	sprintf@ap+1,fsr2h
  3875  00106C  CFDE F01C          	movff	postinc2,sprintf@cp
  3876  001070  CFDD F01D          	movff	postdec2,sprintf@cp+1
  3877  001074  0E02               	movlw	2
  3878  001076  261E               	addwf	sprintf@ap,f,c
  3879  001078  0E00               	movlw	0
  3880  00107A  221F               	addwfc	sprintf@ap+1,f,c
  3881                           
  3882                           ;doprnt.c: 740: if(!cp)
  3883  00107C  501C               	movf	sprintf@cp,w,c
  3884  00107E  101D               	iorwf	sprintf@cp+1,w,c
  3885  001080  A4D8               	btfss	status,2,c
  3886  001082  D005               	goto	l2404
  3887                           
  3888                           ;doprnt.c: 741: cp = "(null)";
  3889  001084  0E68               	movlw	low STR_23
  3890  001086  6E1C               	movwf	sprintf@cp,c
  3891  001088  0E0F               	movlw	high STR_23
  3892  00108A  6E1D               	movwf	sprintf@cp+1,c
  3893  00108C  D000               	goto	l2404
  3894  00108E                     l2404:
  3895                           
  3896                           ;doprnt.c: 745: len = 0;
  3897  00108E  0E00               	movlw	0
  3898  001090  6E21               	movwf	sprintf@len+1,c
  3899  001092  0E00               	movlw	0
  3900  001094  6E20               	movwf	sprintf@len,c
  3901                           
  3902                           ;doprnt.c: 746: while(cp[len])
  3903  001096  D003               	goto	l2408
  3904  001098                     l2406:
  3905                           
  3906                           ;doprnt.c: 747: len++;
  3907  001098  4A20               	infsnz	sprintf@len,f,c
  3908  00109A  2A21               	incf	sprintf@len+1,f,c
  3909  00109C  D000               	goto	l2408
  3910  00109E                     l2408:
  3911  00109E  5020               	movf	sprintf@len,w,c
  3912  0010A0  241C               	addwf	sprintf@cp,w,c
  3913  0010A2  6E17               	movwf	??_sprintf& (0+255),c
  3914  0010A4  5021               	movf	sprintf@len+1,w,c
  3915  0010A6  201D               	addwfc	sprintf@cp+1,w,c
  3916  0010A8  6E18               	movwf	(??_sprintf+1)& (0+255),c
  3917  0010AA  C017  FFF6         	movff	??_sprintf,tblptrl
  3918  0010AE  C018  FFF7         	movff	??_sprintf+1,tblptrh
  3919  0010B2  6AF8               	clrf	tblptru,c
  3920  0010B4  0E0E               	movlw	(high __ramtop+-1)
  3921  0010B6  64F7               	cpfsgt	tblptrh,c
  3922  0010B8  D003               	bra	u1737
  3923  0010BA  0008               	tblrd		*
  3924  0010BC  50F5               	movf	tablat,w,c
  3925  0010BE  D005               	bra	u1730
  3926  0010C0                     u1737:
  3927  0010C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3928  0010C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3929  0010C8  50EF               	movf	indf0,w,c
  3930  0010CA                     u1730:
  3931  0010CA  0900               	iorlw	0
  3932  0010CC  A4D8               	btfss	status,2,c
  3933  0010CE  D7E4               	goto	l2406
  3934                           
  3935                           ;doprnt.c: 757: if(width > len)
  3936  0010D0  5026               	movf	sprintf@width,w,c
  3937  0010D2  5C20               	subwf	sprintf@len,w,c
  3938  0010D4  5027               	movf	sprintf@width+1,w,c
  3939  0010D6  5821               	subwfb	sprintf@len+1,w,c
  3940  0010D8  B0D8               	btfsc	status,0,c
  3941  0010DA  D005               	goto	l2414
  3942                           
  3943                           ;doprnt.c: 758: width -= len;
  3944  0010DC  5020               	movf	sprintf@len,w,c
  3945  0010DE  5E26               	subwf	sprintf@width,f,c
  3946  0010E0  5021               	movf	sprintf@len+1,w,c
  3947  0010E2  5A27               	subwfb	sprintf@width+1,f,c
  3948  0010E4  D00E               	goto	l2420
  3949  0010E6                     l2414:
  3950                           
  3951                           ;doprnt.c: 759: else
  3952                           ;doprnt.c: 760: width = 0;
  3953  0010E6  0E00               	movlw	0
  3954  0010E8  6E27               	movwf	sprintf@width+1,c
  3955  0010EA  0E00               	movlw	0
  3956  0010EC  6E26               	movwf	sprintf@width,c
  3957                           
  3958                           ;doprnt.c: 764: while(width--)
  3959  0010EE  D009               	goto	l2420
  3960  0010F0                     l2416:
  3961                           
  3962                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3963  0010F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3964  0010F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3965  0010F8  0E20               	movlw	32
  3966  0010FA  6EDF               	movwf	indf2,c
  3967  0010FC  4A0D               	infsnz	sprintf@sp,f,c
  3968  0010FE  2A0E               	incf	sprintf@sp+1,f,c
  3969  001100  D000               	goto	l2420
  3970  001102                     l2420:
  3971  001102  0626               	decf	sprintf@width,f,c
  3972  001104  A0D8               	btfss	status,0,c
  3973  001106  0627               	decf	sprintf@width+1,f,c
  3974  001108  2826               	incf	sprintf@width,w,c
  3975  00110A  E1F2               	bnz	l2416
  3976  00110C  2827               	incf	sprintf@width+1,w,c
  3977  00110E  B4D8               	btfsc	status,2,c
  3978  001110  D01C               	goto	l2428
  3979  001112  D7EE               	goto	l2416
  3980                           
  3981                           ;doprnt.c: 767: while(len--)
  3982  001114  D01A               	goto	l2428
  3983  001116                     l2422:
  3984                           
  3985                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3986  001116  C01C  FFF6         	movff	sprintf@cp,tblptrl
  3987  00111A  C01D  FFF7         	movff	sprintf@cp+1,tblptrh
  3988  00111E  6AF8               	clrf	tblptru,c
  3989  001120  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3990  001124  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3991  001128  0E0E               	movlw	(high __ramtop+-1)
  3992  00112A  64F7               	cpfsgt	tblptrh,c
  3993  00112C  D003               	bra	u1777
  3994  00112E  0008               	tblrd		*
  3995  001130  50F5               	movf	tablat,w,c
  3996  001132  D005               	bra	u1770
  3997  001134                     u1777:
  3998  001134  CFF6 FFE9          	movff	tblptrl,fsr0l
  3999  001138  CFF7 FFEA          	movff	tblptrh,fsr0h
  4000  00113C  50EF               	movf	indf0,w,c
  4001  00113E                     u1770:
  4002  00113E  6EDF               	movwf	indf2,c
  4003  001140  4A1C               	infsnz	sprintf@cp,f,c
  4004  001142  2A1D               	incf	sprintf@cp+1,f,c
  4005  001144  4A0D               	infsnz	sprintf@sp,f,c
  4006  001146  2A0E               	incf	sprintf@sp+1,f,c
  4007  001148  D000               	goto	l2428
  4008  00114A                     l2428:
  4009  00114A  0620               	decf	sprintf@len,f,c
  4010  00114C  A0D8               	btfss	status,0,c
  4011  00114E  0621               	decf	sprintf@len+1,f,c
  4012  001150  2820               	incf	sprintf@len,w,c
  4013  001152  E1E1               	bnz	l2422
  4014  001154  2821               	incf	sprintf@len+1,w,c
  4015  001156  B4D8               	btfsc	status,2,c
  4016  001158  D100               	goto	l2516
  4017  00115A  D7DD               	goto	l2422
  4018                           
  4019                           ;doprnt.c: 813: continue;
  4020                           
  4021                           ;doprnt.c: 802: default:
  4022                           
  4023                           ;doprnt.c: 774: continue;
  4024  00115C  D0FE               	goto	l2516
  4025  00115E                     l2430:
  4026                           
  4027                           ;doprnt.c: 818: flag |= 0x40;
  4028  00115E  8C24               	bsf	sprintf@flag,6,c
  4029                           
  4030                           ;doprnt.c: 822: }
  4031                           
  4032                           ;doprnt.c: 819: break;
  4033  001160  D01A               	goto	l399
  4034  001162                     l2434:
  4035  001162  C00F  FFF6         	movff	sprintf@f,tblptrl
  4036  001166  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4037  00116A  4A0F               	infsnz	sprintf@f,f,c
  4038  00116C  2A10               	incf	sprintf@f+1,f,c
  4039  00116E                     	if	0	;tblptru may be non-zero
  4040  00116E                     	endif
  4041  00116E                     	if	0	;tblptru may be non-zero
  4042  00116E                     	endif
  4043  00116E  0008               	tblrd		*
  4044  001170  CFF5 F025          	movff	tablat,sprintf@c
  4045  001174  5025               	movf	sprintf@c,w,c
  4046                           
  4047                           ; Switch size 1, requested type "space"
  4048                           ; Number of cases is 5, Range of values is 0 to 117
  4049                           ; switch strategies available:
  4050                           ; Name         Instructions Cycles
  4051                           ; simple_byte           16     9 (average)
  4052                           ;	Chosen strategy is simple_byte
  4053  001176  0A00               	xorlw	0	; case 0
  4054  001178  B4D8               	btfsc	status,2,c
  4055  00117A  D0FD               	goto	l2518
  4056  00117C  0A64               	xorlw	100	; case 100
  4057  00117E  B4D8               	btfsc	status,2,c
  4058  001180  D00A               	goto	l399
  4059  001182  0A0D               	xorlw	13	; case 105
  4060  001184  B4D8               	btfsc	status,2,c
  4061  001186  D007               	goto	l399
  4062  001188  0A1A               	xorlw	26	; case 115
  4063  00118A  B4D8               	btfsc	status,2,c
  4064  00118C  D76B               	goto	l2396
  4065  00118E  0A06               	xorlw	6	; case 117
  4066  001190  B4D8               	btfsc	status,2,c
  4067  001192  D7E5               	goto	l2430
  4068  001194  D0E2               	goto	l2516
  4069  001196                     l399:
  4070                           
  4071                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4072  001196  BC24               	btfsc	sprintf@flag,6,c
  4073  001198  D015               	goto	l2446
  4074                           
  4075                           ;doprnt.c: 1253: {
  4076                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4077  00119A  C01E  FFD9         	movff	sprintf@ap,fsr2l
  4078  00119E  C01F  FFDA         	movff	sprintf@ap+1,fsr2h
  4079  0011A2  CFDE F022          	movff	postinc2,sprintf@val
  4080  0011A6  CFDD F023          	movff	postdec2,sprintf@val+1
  4081  0011AA  0E02               	movlw	2
  4082  0011AC  261E               	addwf	sprintf@ap,f,c
  4083  0011AE  0E00               	movlw	0
  4084  0011B0  221F               	addwfc	sprintf@ap+1,f,c
  4085                           
  4086                           ;doprnt.c: 1261: if((int)val < 0) {
  4087  0011B2  AE23               	btfss	sprintf@val+1,7,c
  4088  0011B4  D014               	goto	l2450
  4089                           
  4090                           ;doprnt.c: 1262: flag |= 0x03;
  4091  0011B6  0E03               	movlw	3
  4092  0011B8  1224               	iorwf	sprintf@flag,f,c
  4093                           
  4094                           ;doprnt.c: 1263: val = -val;
  4095  0011BA  6C22               	negf	sprintf@val,c
  4096  0011BC  1E23               	comf	sprintf@val+1,f,c
  4097  0011BE  B0D8               	btfsc	status,0,c
  4098  0011C0  2A23               	incf	sprintf@val+1,f,c
  4099                           
  4100                           ;doprnt.c: 1264: }
  4101                           ;doprnt.c: 1266: }
  4102  0011C2  D00D               	goto	l2450
  4103  0011C4                     l2446:
  4104                           
  4105                           ;doprnt.c: 1268: else
  4106                           ;doprnt.c: 1273: {
  4107                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4108  0011C4  C01E  FFD9         	movff	sprintf@ap,fsr2l
  4109  0011C8  C01F  FFDA         	movff	sprintf@ap+1,fsr2h
  4110  0011CC  CFDE F022          	movff	postinc2,sprintf@val
  4111  0011D0  CFDD F023          	movff	postdec2,sprintf@val+1
  4112  0011D4  0E02               	movlw	2
  4113  0011D6  261E               	addwf	sprintf@ap,f,c
  4114  0011D8  0E00               	movlw	0
  4115  0011DA  221F               	addwfc	sprintf@ap+1,f,c
  4116  0011DC  D000               	goto	l2450
  4117  0011DE                     l2450:
  4118                           
  4119                           ;doprnt.c: 1287: }
  4120                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4121  0011DE  0E01               	movlw	1
  4122  0011E0  6E25               	movwf	sprintf@c,c
  4123  0011E2                     l2452:
  4124  0011E2  0E05               	movlw	5
  4125  0011E4  1825               	xorwf	sprintf@c,w,c
  4126  0011E6  B4D8               	btfsc	status,2,c
  4127  0011E8  D016               	goto	l2464
  4128  0011EA  D001               	goto	l2456
  4129  0011EC  D014               	goto	l2464
  4130  0011EE                     l2456:
  4131                           
  4132                           ;doprnt.c: 1306: if(val < dpowers[c])
  4133  0011EE  5025               	movf	sprintf@c,w,c
  4134  0011F0  0D02               	mullw	2
  4135  0011F2  0E01               	movlw	low _dpowers
  4136  0011F4  24F3               	addwf	prodl,w,c
  4137  0011F6  6EF6               	movwf	tblptrl,c
  4138  0011F8  0E0F               	movlw	high _dpowers
  4139  0011FA  20F4               	addwfc	prodh,w,c
  4140  0011FC  6EF7               	movwf	tblptrh,c
  4141  0011FE                     	if	0	;There are less than 3 active tblptr bytes
  4142  0011FE                     	endif
  4143  0011FE  0009               	tblrd		*+
  4144  001200  50F5               	movf	tablat,w,c
  4145  001202  5C22               	subwf	sprintf@val,w,c
  4146  001204  0009               	tblrd		*+
  4147  001206  50F5               	movf	tablat,w,c
  4148  001208  5823               	subwfb	sprintf@val+1,w,c
  4149  00120A  A0D8               	btfss	status,0,c
  4150  00120C  D004               	goto	l2464
  4151  00120E  D001               	goto	l2460
  4152                           
  4153                           ;doprnt.c: 1307: break;
  4154  001210  D002               	goto	l2464
  4155  001212                     l2460:
  4156  001212  2A25               	incf	sprintf@c,f,c
  4157  001214  D7E6               	goto	l2452
  4158  001216                     l2464:
  4159                           
  4160                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4161  001216  5026               	movf	sprintf@width,w,c
  4162  001218  1027               	iorwf	sprintf@width+1,w,c
  4163  00121A  B4D8               	btfsc	status,2,c
  4164  00121C  D00A               	goto	l2470
  4165  00121E  C024  F017         	movff	sprintf@flag,??_sprintf
  4166  001222  0E03               	movlw	3
  4167  001224  1617               	andwf	??_sprintf,f,c
  4168  001226  B4D8               	btfsc	status,2,c
  4169  001228  D004               	goto	l2470
  4170                           
  4171                           ;doprnt.c: 1346: width--;
  4172  00122A  0626               	decf	sprintf@width,f,c
  4173  00122C  A0D8               	btfss	status,0,c
  4174  00122E  0627               	decf	sprintf@width+1,f,c
  4175  001230  D000               	goto	l2470
  4176  001232                     l2470:
  4177                           
  4178                           ;doprnt.c: 1381: if(width > c)
  4179  001232  0E80               	movlw	128
  4180  001234  BE25               	btfsc	sprintf@c,7,c
  4181  001236  0E7F               	movlw	127
  4182  001238  6E17               	movwf	??_sprintf& (0+255),c
  4183  00123A  5026               	movf	sprintf@width,w,c
  4184  00123C  5C25               	subwf	sprintf@c,w,c
  4185  00123E  5027               	movf	sprintf@width+1,w,c
  4186  001240  0A80               	xorlw	128
  4187  001242  5817               	subwfb	??_sprintf& (0+255),w,c
  4188  001244  B0D8               	btfsc	status,0,c
  4189  001246  D007               	goto	l2474
  4190                           
  4191                           ;doprnt.c: 1382: width -= c;
  4192  001248  5025               	movf	sprintf@c,w,c
  4193  00124A  5E26               	subwf	sprintf@width,f,c
  4194  00124C  0E00               	movlw	0
  4195  00124E  BE25               	btfsc	sprintf@c,7,c
  4196  001250  0EFF               	movlw	255
  4197  001252  5A27               	subwfb	sprintf@width+1,f,c
  4198  001254  D005               	goto	l2476
  4199  001256                     l2474:
  4200                           
  4201                           ;doprnt.c: 1383: else
  4202                           ;doprnt.c: 1384: width = 0;
  4203  001256  0E00               	movlw	0
  4204  001258  6E27               	movwf	sprintf@width+1,c
  4205  00125A  0E00               	movlw	0
  4206  00125C  6E26               	movwf	sprintf@width,c
  4207  00125E  D000               	goto	l2476
  4208  001260                     l2476:
  4209                           
  4210                           ;doprnt.c: 1387: if(flag & 0x04) {
  4211  001260  A424               	btfss	sprintf@flag,2,c
  4212  001262  D024               	goto	l2492
  4213                           
  4214                           ;doprnt.c: 1392: if(flag & 0x03)
  4215  001264  C024  F017         	movff	sprintf@flag,??_sprintf
  4216  001268  0E03               	movlw	3
  4217  00126A  1617               	andwf	??_sprintf,f,c
  4218  00126C  B4D8               	btfsc	status,2,c
  4219  00126E  D009               	goto	l2484
  4220                           
  4221                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4222  001270  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4223  001274  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4224  001278  0E2D               	movlw	45
  4225  00127A  6EDF               	movwf	indf2,c
  4226  00127C  4A0D               	infsnz	sprintf@sp,f,c
  4227  00127E  2A0E               	incf	sprintf@sp+1,f,c
  4228  001280  D000               	goto	l2484
  4229  001282                     l2484:
  4230                           
  4231                           ;doprnt.c: 1415: if(width)
  4232  001282  5026               	movf	sprintf@width,w,c
  4233  001284  1027               	iorwf	sprintf@width+1,w,c
  4234  001286  B4D8               	btfsc	status,2,c
  4235  001288  D035               	goto	l2506
  4236  00128A                     l2486:
  4237                           
  4238                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4239  00128A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4240  00128E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4241  001292  0E30               	movlw	48
  4242  001294  6EDF               	movwf	indf2,c
  4243  001296  4A0D               	infsnz	sprintf@sp,f,c
  4244  001298  2A0E               	incf	sprintf@sp+1,f,c
  4245                           
  4246                           ;doprnt.c: 1418: while(--width);
  4247  00129A  0626               	decf	sprintf@width,f,c
  4248  00129C  A0D8               	btfss	status,0,c
  4249  00129E  0627               	decf	sprintf@width+1,f,c
  4250  0012A0  5026               	movf	sprintf@width,w,c
  4251  0012A2  1027               	iorwf	sprintf@width+1,w,c
  4252  0012A4  B4D8               	btfsc	status,2,c
  4253  0012A6  D026               	goto	l2506
  4254  0012A8  D7F0               	goto	l2486
  4255                           
  4256                           ;doprnt.c: 1420: } else
  4257  0012AA  D024               	goto	l2506
  4258  0012AC                     l2492:
  4259                           
  4260                           ;doprnt.c: 1422: {
  4261                           ;doprnt.c: 1424: if(width
  4262                           ;doprnt.c: 1428: )
  4263  0012AC  5026               	movf	sprintf@width,w,c
  4264  0012AE  1027               	iorwf	sprintf@width+1,w,c
  4265  0012B0  B4D8               	btfsc	status,2,c
  4266  0012B2  D011               	goto	l2500
  4267  0012B4                     l2494:
  4268                           
  4269                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4270  0012B4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4271  0012B8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4272  0012BC  0E20               	movlw	32
  4273  0012BE  6EDF               	movwf	indf2,c
  4274  0012C0  4A0D               	infsnz	sprintf@sp,f,c
  4275  0012C2  2A0E               	incf	sprintf@sp+1,f,c
  4276                           
  4277                           ;doprnt.c: 1431: while(--width);
  4278  0012C4  0626               	decf	sprintf@width,f,c
  4279  0012C6  A0D8               	btfss	status,0,c
  4280  0012C8  0627               	decf	sprintf@width+1,f,c
  4281  0012CA  5026               	movf	sprintf@width,w,c
  4282  0012CC  1027               	iorwf	sprintf@width+1,w,c
  4283  0012CE  B4D8               	btfsc	status,2,c
  4284  0012D0  D002               	goto	l2500
  4285  0012D2  D7F0               	goto	l2494
  4286  0012D4  D000               	goto	l2500
  4287  0012D6                     l2500:
  4288                           
  4289                           ;doprnt.c: 1438: if(flag & 0x03)
  4290  0012D6  C024  F017         	movff	sprintf@flag,??_sprintf
  4291  0012DA  0E03               	movlw	3
  4292  0012DC  1617               	andwf	??_sprintf,f,c
  4293  0012DE  B4D8               	btfsc	status,2,c
  4294  0012E0  D009               	goto	l2506
  4295                           
  4296                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4297  0012E2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4298  0012E6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4299  0012EA  0E2D               	movlw	45
  4300  0012EC  6EDF               	movwf	indf2,c
  4301  0012EE  4A0D               	infsnz	sprintf@sp,f,c
  4302  0012F0  2A0E               	incf	sprintf@sp+1,f,c
  4303  0012F2  D000               	goto	l2506
  4304  0012F4                     l2506:
  4305                           
  4306                           ;doprnt.c: 1469: }
  4307                           ;doprnt.c: 1472: prec = c;
  4308  0012F4  C025  F01B         	movff	sprintf@c,sprintf@prec
  4309                           
  4310                           ;doprnt.c: 1474: while(prec--) {
  4311  0012F8  D02A               	goto	l2514
  4312  0012FA                     l2508:
  4313                           
  4314                           ;doprnt.c: 1478: {
  4315                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4316  0012FA  501B               	movf	sprintf@prec,w,c
  4317  0012FC  0D02               	mullw	2
  4318  0012FE  0E01               	movlw	low _dpowers
  4319  001300  24F3               	addwf	prodl,w,c
  4320  001302  6EF6               	movwf	tblptrl,c
  4321  001304  0E0F               	movlw	high _dpowers
  4322  001306  20F4               	addwfc	prodh,w,c
  4323  001308  6EF7               	movwf	tblptrh,c
  4324  00130A                     	if	0	;There are less than 3 active tblptr bytes
  4325  00130A                     	endif
  4326  00130A  0009               	tblrd		*+
  4327  00130C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4328  001310  000A               	tblrd		*-
  4329  001312  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4330  001316  C022  F001         	movff	sprintf@val,___lwdiv@dividend
  4331  00131A  C023  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  4332  00131E  EC08  F012         	call	___lwdiv	;wreg free
  4333  001322  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4334  001326  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4335  00132A  0E00               	movlw	0
  4336  00132C  6E0B               	movwf	___lwmod@divisor+1,c
  4337  00132E  0E0A               	movlw	10
  4338  001330  6E0A               	movwf	___lwmod@divisor,c
  4339  001332  EC60  F012         	call	___lwmod	;wreg free
  4340  001336  5008               	movf	?___lwmod,w,c
  4341  001338  0F30               	addlw	48
  4342  00133A  6E25               	movwf	sprintf@c,c
  4343                           
  4344                           ;doprnt.c: 1523: }
  4345                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4346  00133C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4347  001340  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4348  001344  C025  FFDF         	movff	sprintf@c,indf2
  4349  001348  4A0D               	infsnz	sprintf@sp,f,c
  4350  00134A  2A0E               	incf	sprintf@sp+1,f,c
  4351  00134C  D000               	goto	l2514
  4352  00134E                     l2514:
  4353  00134E  061B               	decf	sprintf@prec,f,c
  4354  001350  281B               	incf	sprintf@prec,w,c
  4355  001352  B4D8               	btfsc	status,2,c
  4356  001354  D002               	goto	l2516
  4357  001356  D7D1               	goto	l2508
  4358  001358  D000               	goto	l2516
  4359  00135A                     l2516:
  4360  00135A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4361  00135E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4362  001362  4A0F               	infsnz	sprintf@f,f,c
  4363  001364  2A10               	incf	sprintf@f+1,f,c
  4364  001366                     	if	0	;tblptru may be non-zero
  4365  001366                     	endif
  4366  001366                     	if	0	;tblptru may be non-zero
  4367  001366                     	endif
  4368  001366  0008               	tblrd		*
  4369  001368  CFF5 F025          	movff	tablat,sprintf@c
  4370  00136C  5025               	movf	sprintf@c,w,c
  4371  00136E  B4D8               	btfsc	status,2,c
  4372  001370  D002               	goto	l2518
  4373  001372  D613               	goto	l2370
  4374  001374  D000               	goto	l2518
  4375  001376                     l2518:
  4376                           
  4377                           ;doprnt.c: 1538: *sp = 0;
  4378  001376  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4379  00137A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4380  00137E  0E00               	movlw	0
  4381  001380  6EDF               	movwf	indf2,c
  4382  001382  0012               	return	
  4383                           
  4384                           ;doprnt.c: 1540: return 0;
  4385                           ;	Return value of _sprintf is never used
  4386  001384  0012               	return		;funcret
  4387  001386                     __end_of_sprintf:
  4388                           	opt stack 0
  4389                           tosu	equ	0xFFF
  4390                           tosh	equ	0xFFE
  4391                           tosl	equ	0xFFD
  4392                           pclath	equ	0xFFA
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           prodh	equ	0xFF4
  4398                           prodl	equ	0xFF3
  4399                           indf0	equ	0xFEF
  4400                           postinc0	equ	0xFEE
  4401                           fsr0h	equ	0xFEA
  4402                           fsr0l	equ	0xFE9
  4403                           wreg	equ	0xFE8
  4404                           postinc1	equ	0xFE6
  4405                           postdec1	equ	0xFE5
  4406                           fsr1h	equ	0xFE2
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _isdigit *****************
  4416 ;; Defined at:
  4417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  c               1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  c               1    2[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4434 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4435 ;;Total ram usage:        3 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_sprintf
  4441 ;;		_atoi
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text20
  4446  002782                     __ptext20:
  4447                           	opt stack 0
  4448  002782                     _isdigit:
  4449                           	opt stack 27
  4450                           
  4451                           ;incstack = 0
  4452                           ;isdigit@c stored from wreg
  4453  002782  6E03               	movwf	isdigit@c,c
  4454  002784  0E00               	movlw	0
  4455  002786  6E02               	movwf	_isdigit$2159,c
  4456  002788  0E3A               	movlw	58
  4457  00278A  6003               	cpfslt	isdigit@c,c
  4458  00278C  D006               	goto	l2320
  4459  00278E  0E2F               	movlw	47
  4460  002790  6403               	cpfsgt	isdigit@c,c
  4461  002792  D003               	goto	l2320
  4462  002794  0E01               	movlw	1
  4463  002796  6E02               	movwf	_isdigit$2159,c
  4464  002798  D000               	goto	l2320
  4465  00279A                     l2320:
  4466  00279A  C002  F001         	movff	_isdigit$2159,??_isdigit
  4467  00279E  3001               	rrcf	??_isdigit,w,c
  4468  0027A0  0012               	return	
  4469  0027A2  0012               	return		;funcret
  4470  0027A4                     __end_of_isdigit:
  4471                           	opt stack 0
  4472                           tosu	equ	0xFFF
  4473                           tosh	equ	0xFFE
  4474                           tosl	equ	0xFFD
  4475                           pclath	equ	0xFFA
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           prodh	equ	0xFF4
  4481                           prodl	equ	0xFF3
  4482                           indf0	equ	0xFEF
  4483                           postinc0	equ	0xFEE
  4484                           fsr0h	equ	0xFEA
  4485                           fsr0l	equ	0xFE9
  4486                           wreg	equ	0xFE8
  4487                           postinc1	equ	0xFE6
  4488                           postdec1	equ	0xFE5
  4489                           fsr1h	equ	0xFE2
  4490                           fsr1l	equ	0xFE1
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function ___wmul *****************
  4499 ;; Defined at:
  4500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  multiplier      2    0[COMRAM] unsigned int 
  4503 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  product         2    4[COMRAM] unsigned int 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  2    0[COMRAM] unsigned int 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0, prodl, prodh
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4518 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; This function calls:
  4522 ;;		Nothing
  4523 ;; This function is called by:
  4524 ;;		_sprintf
  4525 ;;		_atoi
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text21
  4530  002712                     __ptext21:
  4531                           	opt stack 0
  4532  002712                     ___wmul:
  4533                           	opt stack 27
  4534                           
  4535                           ;incstack = 0
  4536  002712  5001               	movf	___wmul@multiplier,w,c
  4537  002714  0203               	mulwf	___wmul@multiplicand,c
  4538  002716  CFF3 F005          	movff	prodl,___wmul@product
  4539  00271A  CFF4 F006          	movff	prodh,___wmul@product+1
  4540  00271E  5001               	movf	___wmul@multiplier,w,c
  4541  002720  0204               	mulwf	___wmul@multiplicand+1,c
  4542  002722  50F3               	movf	prodl,w,c
  4543  002724  2606               	addwf	___wmul@product+1,f,c
  4544  002726  5002               	movf	___wmul@multiplier+1,w,c
  4545  002728  0203               	mulwf	___wmul@multiplicand,c
  4546  00272A  50F3               	movf	prodl,w,c
  4547  00272C  2606               	addwf	___wmul@product+1,f,c
  4548  00272E  C005  F001         	movff	___wmul@product,?___wmul
  4549  002732  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4550  002736  0012               	return	
  4551  002738  0012               	return		;funcret
  4552  00273A                     __end_of___wmul:
  4553                           	opt stack 0
  4554                           tosu	equ	0xFFF
  4555                           tosh	equ	0xFFE
  4556                           tosl	equ	0xFFD
  4557                           pclath	equ	0xFFA
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           indf0	equ	0xFEF
  4565                           postinc0	equ	0xFEE
  4566                           fsr0h	equ	0xFEA
  4567                           fsr0l	equ	0xFE9
  4568                           wreg	equ	0xFE8
  4569                           postinc1	equ	0xFE6
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function ___lwmod *****************
  4581 ;; Defined at:
  4582 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  dividend        2    7[COMRAM] unsigned int 
  4585 ;;  divisor         2    9[COMRAM] unsigned int 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  counter         1   11[COMRAM] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  2    7[COMRAM] unsigned int 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4600 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;Total ram usage:        5 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; This function calls:
  4604 ;;		Nothing
  4605 ;; This function is called by:
  4606 ;;		_sprintf
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text22
  4611  0024C0                     __ptext22:
  4612                           	opt stack 0
  4613  0024C0                     ___lwmod:
  4614                           	opt stack 27
  4615                           
  4616                           ;incstack = 0
  4617  0024C0  500A               	movf	___lwmod@divisor,w,c
  4618  0024C2  100B               	iorwf	___lwmod@divisor+1,w,c
  4619  0024C4  B4D8               	btfsc	status,2,c
  4620  0024C6  D01D               	goto	l1099
  4621  0024C8  0E01               	movlw	1
  4622  0024CA  6E0C               	movwf	___lwmod@counter,c
  4623  0024CC  D005               	goto	l2358
  4624  0024CE                     l2356:
  4625  0024CE  90D8               	bcf	status,0,c
  4626  0024D0  360A               	rlcf	___lwmod@divisor,f,c
  4627  0024D2  360B               	rlcf	___lwmod@divisor+1,f,c
  4628  0024D4  2A0C               	incf	___lwmod@counter,f,c
  4629  0024D6  D000               	goto	l2358
  4630  0024D8                     l2358:
  4631  0024D8  BE0B               	btfsc	___lwmod@divisor+1,7,c
  4632  0024DA  D002               	goto	l2360
  4633  0024DC  D7F8               	goto	l2356
  4634  0024DE  D000               	goto	l2360
  4635  0024E0                     l2360:
  4636  0024E0  500A               	movf	___lwmod@divisor,w,c
  4637  0024E2  5C08               	subwf	___lwmod@dividend,w,c
  4638  0024E4  500B               	movf	___lwmod@divisor+1,w,c
  4639  0024E6  5809               	subwfb	___lwmod@dividend+1,w,c
  4640  0024E8  A0D8               	btfss	status,0,c
  4641  0024EA  D005               	goto	l2364
  4642  0024EC  500A               	movf	___lwmod@divisor,w,c
  4643  0024EE  5E08               	subwf	___lwmod@dividend,f,c
  4644  0024F0  500B               	movf	___lwmod@divisor+1,w,c
  4645  0024F2  5A09               	subwfb	___lwmod@dividend+1,f,c
  4646  0024F4  D000               	goto	l2364
  4647  0024F6                     l2364:
  4648  0024F6  90D8               	bcf	status,0,c
  4649  0024F8  320B               	rrcf	___lwmod@divisor+1,f,c
  4650  0024FA  320A               	rrcf	___lwmod@divisor,f,c
  4651  0024FC  2E0C               	decfsz	___lwmod@counter,f,c
  4652  0024FE  D7F0               	goto	l2360
  4653  002500  D000               	goto	l1099
  4654  002502                     l1099:
  4655  002502  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4656  002506  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4657  00250A  0012               	return		;funcret
  4658  00250C                     __end_of___lwmod:
  4659                           	opt stack 0
  4660                           tosu	equ	0xFFF
  4661                           tosh	equ	0xFFE
  4662                           tosl	equ	0xFFD
  4663                           pclath	equ	0xFFA
  4664                           tblptru	equ	0xFF8
  4665                           tblptrh	equ	0xFF7
  4666                           tblptrl	equ	0xFF6
  4667                           tablat	equ	0xFF5
  4668                           prodh	equ	0xFF4
  4669                           prodl	equ	0xFF3
  4670                           indf0	equ	0xFEF
  4671                           postinc0	equ	0xFEE
  4672                           fsr0h	equ	0xFEA
  4673                           fsr0l	equ	0xFE9
  4674                           wreg	equ	0xFE8
  4675                           postinc1	equ	0xFE6
  4676                           postdec1	equ	0xFE5
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function ___lwdiv *****************
  4687 ;; Defined at:
  4688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  dividend        2    0[COMRAM] unsigned int 
  4691 ;;  divisor         2    2[COMRAM] unsigned int 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  quotient        2    4[COMRAM] unsigned int 
  4694 ;;  counter         1    6[COMRAM] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  2    0[COMRAM] unsigned int 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2, status,0
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4708 ;;Total ram usage:        7 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_sprintf
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text23
  4718  002410                     __ptext23:
  4719                           	opt stack 0
  4720  002410                     ___lwdiv:
  4721                           	opt stack 27
  4722                           
  4723                           ;incstack = 0
  4724  002410  0E00               	movlw	0
  4725  002412  6E06               	movwf	___lwdiv@quotient+1,c
  4726  002414  0E00               	movlw	0
  4727  002416  6E05               	movwf	___lwdiv@quotient,c
  4728  002418  5003               	movf	___lwdiv@divisor,w,c
  4729  00241A  1004               	iorwf	___lwdiv@divisor+1,w,c
  4730  00241C  B4D8               	btfsc	status,2,c
  4731  00241E  D021               	goto	l1089
  4732  002420  0E01               	movlw	1
  4733  002422  6E07               	movwf	___lwdiv@counter,c
  4734  002424  D005               	goto	l2338
  4735  002426                     l2336:
  4736  002426  90D8               	bcf	status,0,c
  4737  002428  3603               	rlcf	___lwdiv@divisor,f,c
  4738  00242A  3604               	rlcf	___lwdiv@divisor+1,f,c
  4739  00242C  2A07               	incf	___lwdiv@counter,f,c
  4740  00242E  D000               	goto	l2338
  4741  002430                     l2338:
  4742  002430  BE04               	btfsc	___lwdiv@divisor+1,7,c
  4743  002432  D002               	goto	l2340
  4744  002434  D7F8               	goto	l2336
  4745  002436  D000               	goto	l2340
  4746  002438                     l2340:
  4747  002438  90D8               	bcf	status,0,c
  4748  00243A  3605               	rlcf	___lwdiv@quotient,f,c
  4749  00243C  3606               	rlcf	___lwdiv@quotient+1,f,c
  4750  00243E  5003               	movf	___lwdiv@divisor,w,c
  4751  002440  5C01               	subwf	___lwdiv@dividend,w,c
  4752  002442  5004               	movf	___lwdiv@divisor+1,w,c
  4753  002444  5802               	subwfb	___lwdiv@dividend+1,w,c
  4754  002446  A0D8               	btfss	status,0,c
  4755  002448  D006               	goto	l2348
  4756  00244A  5003               	movf	___lwdiv@divisor,w,c
  4757  00244C  5E01               	subwf	___lwdiv@dividend,f,c
  4758  00244E  5004               	movf	___lwdiv@divisor+1,w,c
  4759  002450  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4760  002452  8005               	bsf	___lwdiv@quotient,0,c
  4761  002454  D000               	goto	l2348
  4762  002456                     l2348:
  4763  002456  90D8               	bcf	status,0,c
  4764  002458  3204               	rrcf	___lwdiv@divisor+1,f,c
  4765  00245A  3203               	rrcf	___lwdiv@divisor,f,c
  4766  00245C  2E07               	decfsz	___lwdiv@counter,f,c
  4767  00245E  D7EC               	goto	l2340
  4768  002460  D000               	goto	l1089
  4769  002462                     l1089:
  4770  002462  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4771  002466  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4772  00246A  0012               	return		;funcret
  4773  00246C                     __end_of___lwdiv:
  4774                           	opt stack 0
  4775                           tosu	equ	0xFFF
  4776                           tosh	equ	0xFFE
  4777                           tosl	equ	0xFFD
  4778                           pclath	equ	0xFFA
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           indf0	equ	0xFEF
  4786                           postinc0	equ	0xFEE
  4787                           fsr0h	equ	0xFEA
  4788                           fsr0l	equ	0xFE9
  4789                           wreg	equ	0xFE8
  4790                           postinc1	equ	0xFE6
  4791                           postdec1	equ	0xFE5
  4792                           fsr1h	equ	0xFE2
  4793                           fsr1l	equ	0xFE1
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function _clear *****************
  4802 ;; Defined at:
  4803 ;;		line 34 in file "main.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  limpiar         2   10[COMRAM] int 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  i               2   28[COMRAM] int 
  4808 ;;  clear          16   12[COMRAM] unsigned char [16]
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  2   10[COMRAM] int 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4819 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4821 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4822 ;;Total ram usage:       20 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    5
  4825 ;; This function calls:
  4826 ;;		_lcd_gotoxy
  4827 ;;		_lcd_putrs
  4828 ;; This function is called by:
  4829 ;;		_caratula
  4830 ;;		_main
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text24
  4835  0022D8                     __ptext24:
  4836                           	opt stack 0
  4837  0022D8                     _clear:
  4838                           	opt stack 25
  4839                           
  4840                           ;main.c: 36: if(limpiar == 1){
  4841                           
  4842                           ;incstack = 0
  4843  0022D8  040B               	decf	clear@limpiar,w,c
  4844  0022DA  100C               	iorwf	clear@limpiar+1,w,c
  4845  0022DC  A4D8               	btfss	status,2,c
  4846  0022DE  0012               	return	
  4847                           
  4848                           ;main.c: 37: char clear[16];
  4849                           ;main.c: 38: for (int i=0;i<16;i++) clear[i]=' ';
  4850  0022E0  0E00               	movlw	0
  4851  0022E2  6E1E               	movwf	clear@i+1,c
  4852  0022E4  0E00               	movlw	0
  4853  0022E6  6E1D               	movwf	clear@i,c
  4854  0022E8                     l2954:
  4855  0022E8  BE1E               	btfsc	clear@i+1,7,c
  4856  0022EA  D008               	goto	l2958
  4857  0022EC  501E               	movf	clear@i+1,w,c
  4858  0022EE  E112               	bnz	l2964
  4859  0022F0  0E10               	movlw	16
  4860  0022F2  5C1D               	subwf	clear@i,w,c
  4861  0022F4  B0D8               	btfsc	status,0,c
  4862  0022F6  D00E               	goto	l2964
  4863  0022F8  D001               	goto	l2958
  4864  0022FA  D00C               	goto	l2964
  4865  0022FC                     l2958:
  4866  0022FC  0E0D               	movlw	low clear@clear
  4867  0022FE  241D               	addwf	clear@i,w,c
  4868  002300  6ED9               	movwf	fsr2l,c
  4869  002302  0E00               	movlw	high clear@clear
  4870  002304  201E               	addwfc	clear@i+1,w,c
  4871  002306  6EDA               	movwf	fsr2h,c
  4872  002308  0E20               	movlw	32
  4873  00230A  6EDF               	movwf	indf2,c
  4874  00230C  4A1D               	infsnz	clear@i,f,c
  4875  00230E  2A1E               	incf	clear@i+1,f,c
  4876  002310  D7EB               	goto	l2954
  4877  002312  D000               	goto	l2964
  4878  002314                     l2964:
  4879                           
  4880                           ;main.c: 40: lcd_gotoxy(1,1);
  4881  002314  0E01               	movlw	1
  4882  002316  6E05               	movwf	lcd_gotoxy@y,c
  4883  002318  0E01               	movlw	1
  4884  00231A  ECAF  F013         	call	_lcd_gotoxy
  4885                           
  4886                           ;main.c: 41: lcd_putrs(clear);
  4887  00231E  0E0D               	movlw	low clear@clear
  4888  002320  6E09               	movwf	lcd_putrs@ptr,c
  4889  002322  0E00               	movlw	high clear@clear
  4890  002324  6E0A               	movwf	lcd_putrs@ptr+1,c
  4891  002326  EC36  F012         	call	_lcd_putrs	;wreg free
  4892                           
  4893                           ;main.c: 43: lcd_gotoxy(1,2);
  4894  00232A  0E02               	movlw	2
  4895  00232C  6E05               	movwf	lcd_gotoxy@y,c
  4896  00232E  0E01               	movlw	1
  4897  002330  ECAF  F013         	call	_lcd_gotoxy
  4898                           
  4899                           ;main.c: 44: lcd_putrs(clear);
  4900  002334  0E0D               	movlw	low clear@clear
  4901  002336  6E09               	movwf	lcd_putrs@ptr,c
  4902  002338  0E00               	movlw	high clear@clear
  4903  00233A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4904  00233C  EC36  F012         	call	_lcd_putrs	;wreg free
  4905  002340  0012               	return	
  4906  002342  0012               	return		;funcret
  4907  002344                     __end_of_clear:
  4908                           	opt stack 0
  4909                           tosu	equ	0xFFF
  4910                           tosh	equ	0xFFE
  4911                           tosl	equ	0xFFD
  4912                           pclath	equ	0xFFA
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           indf0	equ	0xFEF
  4920                           postinc0	equ	0xFEE
  4921                           fsr0h	equ	0xFEA
  4922                           fsr0l	equ	0xFE9
  4923                           wreg	equ	0xFE8
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _lcd_putrs *****************
  4936 ;; Defined at:
  4937 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  4940 ;;		 -> STR_22(13), STR_20(13), STR_18(9), STR_15(11), 
  4941 ;;		 -> STR_14(17), ingresar_password@clear(16), clear@clear(16), day(3), 
  4942 ;;		 -> STR_9(2), STR_8(2), STR_7(2), STR_6(2), 
  4943 ;;		 -> STR_5(2), STR_4(2), STR_3(2), buffer2(20), 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;		None               void
  4948 ;; Registers used:
  4949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4959 ;;Total ram usage:        2 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    4
  4962 ;; This function calls:
  4963 ;;		_lcd_putc
  4964 ;; This function is called by:
  4965 ;;		_imprimir_tecla
  4966 ;;		_guardar_tecla_presionada
  4967 ;;		_leer_teclado
  4968 ;;		_clear
  4969 ;;		_caratula
  4970 ;;		_ingresar_password
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text25
  4976  00246C                     __ptext25:
  4977                           	opt stack 0
  4978  00246C                     _lcd_putrs:
  4979                           	opt stack 23
  4980                           
  4981                           ;unmc_lcd_216.c: 223: while(*ptr){
  4982                           
  4983                           ;incstack = 0
  4984  00246C  D015               	goto	l2528
  4985  00246E                     l2524:
  4986                           
  4987                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  4988  00246E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  4989  002472  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  4990  002476  6AF8               	clrf	tblptru,c
  4991  002478  0E0E               	movlw	(high __ramtop+-1)
  4992  00247A  64F7               	cpfsgt	tblptrh,c
  4993  00247C  D003               	bra	u1967
  4994  00247E  0008               	tblrd		*
  4995  002480  50F5               	movf	tablat,w,c
  4996  002482  D005               	bra	u1960
  4997  002484                     u1967:
  4998  002484  CFF6 FFE9          	movff	tblptrl,fsr0l
  4999  002488  CFF7 FFEA          	movff	tblptrh,fsr0h
  5000  00248C  50EF               	movf	indf0,w,c
  5001  00248E                     u1960:
  5002  00248E  EC86  F012         	call	_lcd_putc
  5003  002492  4A09               	infsnz	lcd_putrs@ptr,f,c
  5004  002494  2A0A               	incf	lcd_putrs@ptr+1,f,c
  5005  002496  D000               	goto	l2528
  5006  002498                     l2528:
  5007  002498  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5008  00249C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5009  0024A0  6AF8               	clrf	tblptru,c
  5010  0024A2  0E0E               	movlw	(high __ramtop+-1)
  5011  0024A4  64F7               	cpfsgt	tblptrh,c
  5012  0024A6  D003               	bra	u1977
  5013  0024A8  0008               	tblrd		*
  5014  0024AA  50F5               	movf	tablat,w,c
  5015  0024AC  D005               	bra	u1970
  5016  0024AE                     u1977:
  5017  0024AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  5018  0024B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  5019  0024B6  50EF               	movf	indf0,w,c
  5020  0024B8                     u1970:
  5021  0024B8  0900               	iorlw	0
  5022  0024BA  A4D8               	btfss	status,2,c
  5023  0024BC  D7D8               	goto	l2524
  5024  0024BE  0012               	return		;funcret
  5025  0024C0                     __end_of_lcd_putrs:
  5026                           	opt stack 0
  5027                           tosu	equ	0xFFF
  5028                           tosh	equ	0xFFE
  5029                           tosl	equ	0xFFD
  5030                           pclath	equ	0xFFA
  5031                           tblptru	equ	0xFF8
  5032                           tblptrh	equ	0xFF7
  5033                           tblptrl	equ	0xFF6
  5034                           tablat	equ	0xFF5
  5035                           prodh	equ	0xFF4
  5036                           prodl	equ	0xFF3
  5037                           indf0	equ	0xFEF
  5038                           postinc0	equ	0xFEE
  5039                           fsr0h	equ	0xFEA
  5040                           fsr0l	equ	0xFE9
  5041                           wreg	equ	0xFE8
  5042                           postinc1	equ	0xFE6
  5043                           postdec1	equ	0xFE5
  5044                           fsr1h	equ	0xFE2
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _lcd_putc *****************
  5054 ;; Defined at:
  5055 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  c               1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  c               1    7[COMRAM] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5073 ;;Total ram usage:        1 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    3
  5076 ;; This function calls:
  5077 ;;		_lcd_gotoxy
  5078 ;;		_lcd_send_byte
  5079 ;; This function is called by:
  5080 ;;		_lcd_putrs
  5081 ;;		_lcd_puts
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text26
  5086  00250C                     __ptext26:
  5087                           	opt stack 0
  5088  00250C                     _lcd_putc:
  5089                           	opt stack 23
  5090                           
  5091                           ;incstack = 0
  5092                           ;lcd_putc@c stored from wreg
  5093  00250C  6E08               	movwf	lcd_putc@c,c
  5094                           
  5095                           ;unmc_lcd_216.c: 173: switch(c){
  5096  00250E  D018               	goto	l2310
  5097  002510                     l2300:
  5098                           
  5099                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  5100  002510  0E01               	movlw	1
  5101  002512  6E03               	movwf	lcd_send_byte@n,c
  5102  002514  0E00               	movlw	0
  5103  002516  EC5A  F013         	call	_lcd_send_byte
  5104                           
  5105                           ;unmc_lcd_216.c: 176: break;
  5106  00251A  0012               	return	
  5107  00251C                     l2302:
  5108                           
  5109                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  5110  00251C  0E02               	movlw	2
  5111  00251E  6E05               	movwf	lcd_gotoxy@y,c
  5112  002520  0E01               	movlw	1
  5113  002522  ECAF  F013         	call	_lcd_gotoxy
  5114                           
  5115                           ;unmc_lcd_216.c: 179: break;
  5116  002526  0012               	return	
  5117  002528                     l2304:
  5118                           
  5119                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  5120  002528  0E10               	movlw	16
  5121  00252A  6E03               	movwf	lcd_send_byte@n,c
  5122  00252C  0E00               	movlw	0
  5123  00252E  EC5A  F013         	call	_lcd_send_byte
  5124                           
  5125                           ;unmc_lcd_216.c: 182: break;
  5126  002532  0012               	return	
  5127  002534                     l2306:
  5128                           
  5129                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  5130  002534  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  5131  002538  0E01               	movlw	1
  5132  00253A  EC5A  F013         	call	_lcd_send_byte
  5133                           
  5134                           ;unmc_lcd_216.c: 186: }
  5135                           
  5136                           ;unmc_lcd_216.c: 185: break;
  5137  00253E  0012               	return	
  5138  002540                     l2310:
  5139  002540  5008               	movf	lcd_putc@c,w,c
  5140                           
  5141                           ; Switch size 1, requested type "space"
  5142                           ; Number of cases is 3, Range of values is 8 to 12
  5143                           ; switch strategies available:
  5144                           ; Name         Instructions Cycles
  5145                           ; simple_byte           10     6 (average)
  5146                           ;	Chosen strategy is simple_byte
  5147  002542  0A08               	xorlw	8	; case 8
  5148  002544  B4D8               	btfsc	status,2,c
  5149  002546  D7F0               	goto	l2304
  5150  002548  0A02               	xorlw	2	; case 10
  5151  00254A  B4D8               	btfsc	status,2,c
  5152  00254C  D7E7               	goto	l2302
  5153  00254E  0A06               	xorlw	6	; case 12
  5154  002550  B4D8               	btfsc	status,2,c
  5155  002552  D7DE               	goto	l2300
  5156  002554  D7EF               	goto	l2306
  5157  002556  0012               	return		;funcret
  5158  002558                     __end_of_lcd_putc:
  5159                           	opt stack 0
  5160                           tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           pclath	equ	0xFFA
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           indf0	equ	0xFEF
  5171                           postinc0	equ	0xFEE
  5172                           fsr0h	equ	0xFEA
  5173                           fsr0l	equ	0xFE9
  5174                           wreg	equ	0xFE8
  5175                           postinc1	equ	0xFE6
  5176                           postdec1	equ	0xFE5
  5177                           fsr1h	equ	0xFE2
  5178                           fsr1l	equ	0xFE1
  5179                           indf2	equ	0xFDF
  5180                           postinc2	equ	0xFDE
  5181                           postdec2	equ	0xFDD
  5182                           fsr2h	equ	0xFDA
  5183                           fsr2l	equ	0xFD9
  5184                           status	equ	0xFD8
  5185                           
  5186 ;; *************** function _lcd_gotoxy *****************
  5187 ;; Defined at:
  5188 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;  x               1    wreg     unsigned char 
  5191 ;;  y               1    4[COMRAM] unsigned char 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  x               1    5[COMRAM] unsigned char 
  5194 ;;  address         1    6[COMRAM] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;		None               void
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5204 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5207 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5208 ;;Total ram usage:        3 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		_lcd_send_byte
  5213 ;; This function is called by:
  5214 ;;		_clear
  5215 ;;		_caratula
  5216 ;;		_ingresar_password
  5217 ;;		_main
  5218 ;;		_lcd_putc
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text27
  5223  00275E                     __ptext27:
  5224                           	opt stack 0
  5225  00275E                     _lcd_gotoxy:
  5226                           	opt stack 23
  5227                           
  5228                           ;incstack = 0
  5229                           ;lcd_gotoxy@x stored from wreg
  5230  00275E  6E06               	movwf	lcd_gotoxy@x,c
  5231                           
  5232                           ;unmc_lcd_216.c: 159: int8 address;
  5233                           ;unmc_lcd_216.c: 161: if(y != 1)
  5234  002760  0405               	decf	lcd_gotoxy@y,w,c
  5235  002762  B4D8               	btfsc	status,2,c
  5236  002764  D002               	goto	l2292
  5237                           
  5238                           ;unmc_lcd_216.c: 162: address = 0x40;
  5239  002766  0E40               	movlw	64
  5240  002768  D001               	goto	L1
  5241  00276A                     l2292:
  5242                           
  5243                           ;unmc_lcd_216.c: 163: else
  5244                           ;unmc_lcd_216.c: 164: address=0;
  5245  00276A  0E00               	movlw	0
  5246  00276C                     L1:
  5247  00276C  6E07               	movwf	lcd_gotoxy@address,c
  5248  00276E  D000               	goto	l2294
  5249  002770                     l2294:
  5250                           
  5251                           ;unmc_lcd_216.c: 166: address += x-1;
  5252  002770  0406               	decf	lcd_gotoxy@x,w,c
  5253  002772  2607               	addwf	lcd_gotoxy@address,f,c
  5254                           
  5255                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  5256  002774  5007               	movf	lcd_gotoxy@address,w,c
  5257  002776  0980               	iorlw	128
  5258  002778  6E03               	movwf	lcd_send_byte@n,c
  5259  00277A  0E00               	movlw	0
  5260  00277C  EC5A  F013         	call	_lcd_send_byte
  5261  002780  0012               	return		;funcret
  5262  002782                     __end_of_lcd_gotoxy:
  5263                           	opt stack 0
  5264                           tosu	equ	0xFFF
  5265                           tosh	equ	0xFFE
  5266                           tosl	equ	0xFFD
  5267                           pclath	equ	0xFFA
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           indf0	equ	0xFEF
  5275                           postinc0	equ	0xFEE
  5276                           fsr0h	equ	0xFEA
  5277                           fsr0l	equ	0xFE9
  5278                           wreg	equ	0xFE8
  5279                           postinc1	equ	0xFE6
  5280                           postdec1	equ	0xFE5
  5281                           fsr1h	equ	0xFE2
  5282                           fsr1l	equ	0xFE1
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function _Setup *****************
  5291 ;; Defined at:
  5292 ;;		line 71 in file "main.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5310 ;;Total ram usage:        0 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    3
  5313 ;; This function calls:
  5314 ;;		_Write_RTC
  5315 ;;		_lcd_comand
  5316 ;;		_lcd_init
  5317 ;; This function is called by:
  5318 ;;		_main
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text28
  5323  0025A2                     __ptext28:
  5324                           	opt stack 0
  5325  0025A2                     _Setup:
  5326                           	opt stack 27
  5327                           
  5328                           ;main.c: 73: OSCTUNEbits.INTSRC=1;
  5329                           
  5330                           ;incstack = 0
  5331  0025A2  8E9B               	bsf	3995,7,c	;volatile
  5332                           
  5333                           ;main.c: 74: OSCTUNEbits.PLLEN=0;
  5334  0025A4  9C9B               	bcf	3995,6,c	;volatile
  5335                           
  5336                           ;main.c: 75: OSCCONbits.IRCF0=1;
  5337  0025A6  88D3               	bsf	4051,4,c	;volatile
  5338                           
  5339                           ;main.c: 76: OSCCONbits.IRCF1=1;
  5340  0025A8  8AD3               	bsf	4051,5,c	;volatile
  5341                           
  5342                           ;main.c: 77: OSCCONbits.IRCF2=1;
  5343  0025AA  8CD3               	bsf	4051,6,c	;volatile
  5344                           
  5345                           ;main.c: 78: OSCCONbits.SCS0=0;
  5346  0025AC  90D3               	bcf	4051,0,c	;volatile
  5347                           
  5348                           ;main.c: 79: OSCCONbits.SCS1=0;
  5349  0025AE  92D3               	bcf	4051,1,c	;volatile
  5350                           
  5351                           ;main.c: 80: TRISA = 0b11110000;
  5352  0025B0  0EF0               	movlw	240
  5353  0025B2  6E92               	movwf	3986,c	;volatile
  5354                           
  5355                           ;main.c: 81: TRISB = 0;
  5356  0025B4  0E00               	movlw	0
  5357  0025B6  6E93               	movwf	3987,c	;volatile
  5358                           
  5359                           ;main.c: 82: TRISC = 0b00000111;
  5360  0025B8  0E07               	movlw	7
  5361  0025BA  6E94               	movwf	3988,c	;volatile
  5362                           
  5363                           ;main.c: 86: ANCON0=0b11111111;
  5364  0025BC  010F               	movlb	15	; () banked
  5365  0025BE  6948               	setf	72,b	;volatile
  5366                           
  5367                           ; BSR set to: 15
  5368                           ;main.c: 88: ANCON1=0b11111111;
  5369  0025C0  010F               	movlb	15	; () banked
  5370  0025C2  6949               	setf	73,b	;volatile
  5371                           
  5372                           ;main.c: 89: ADCON0=0b00101101;
  5373  0025C4  0E2D               	movlw	45
  5374  0025C6  6EC2               	movwf	4034,c	;volatile
  5375                           
  5376                           ;main.c: 90: ADCON1=0b00010000;
  5377  0025C8  0E10               	movlw	16
  5378  0025CA  6EC1               	movwf	4033,c	;volatile
  5379                           
  5380                           ; BSR set to: 15
  5381                           ;main.c: 91: RTCCFGbits.RTCEN=1;
  5382  0025CC  010F               	movlb	15	; () banked
  5383  0025CE  8F3F               	bsf	63,7,b	;volatile
  5384                           
  5385                           ; BSR set to: 15
  5386                           ;main.c: 92: RTCCFGbits.RTCWREN=1;
  5387  0025D0  010F               	movlb	15	; () banked
  5388  0025D2  8B3F               	bsf	63,5,b	;volatile
  5389                           
  5390                           ; BSR set to: 15
  5391                           ;main.c: 93: T1CONbits.T1OSCEN=1;
  5392  0025D4  86CD               	bsf	4045,3,c	;volatile
  5393                           
  5394                           ; BSR set to: 15
  5395                           ;main.c: 94: Write_RTC();
  5396  0025D6  ECA9  F00A         	call	_Write_RTC	;wreg free
  5397                           
  5398                           ;main.c: 95: lcd_init();
  5399  0025DA  ECD4  F00F         	call	_lcd_init	;wreg free
  5400                           
  5401                           ;main.c: 96: lcd_comand(0b00001100);
  5402  0025DE  0E0C               	movlw	12
  5403  0025E0  EC04  F014         	call	_lcd_comand
  5404                           
  5405                           ;main.c: 97: LATBbits.LATB1 = 1;;
  5406  0025E4  828A               	bsf	3978,1,c	;volatile
  5407                           
  5408                           ;main.c: 98: LATBbits.LATB0 = 1;;
  5409  0025E6  808A               	bsf	3978,0,c	;volatile
  5410  0025E8  0012               	return		;funcret
  5411  0025EA                     __end_of_Setup:
  5412                           	opt stack 0
  5413                           tosu	equ	0xFFF
  5414                           tosh	equ	0xFFE
  5415                           tosl	equ	0xFFD
  5416                           pclath	equ	0xFFA
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           indf0	equ	0xFEF
  5424                           postinc0	equ	0xFEE
  5425                           fsr0h	equ	0xFEA
  5426                           fsr0l	equ	0xFE9
  5427                           wreg	equ	0xFE8
  5428                           postinc1	equ	0xFE6
  5429                           postdec1	equ	0xFE5
  5430                           fsr1h	equ	0xFE2
  5431                           fsr1l	equ	0xFE1
  5432                           indf2	equ	0xFDF
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _lcd_init *****************
  5440 ;; Defined at:
  5441 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  i               1    4[COMRAM] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5459 ;;Total ram usage:        1 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    2
  5462 ;; This function calls:
  5463 ;;		_Delay1KTCYx
  5464 ;;		_lcd_send_byte
  5465 ;;		_lcd_send_nibble
  5466 ;; This function is called by:
  5467 ;;		_Setup
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text29
  5472  001FA8                     __ptext29:
  5473                           	opt stack 0
  5474  001FA8                     _lcd_init:
  5475                           	opt stack 27
  5476                           
  5477                           ;unmc_lcd_216.c: 120: int8 i;
  5478                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  5479                           
  5480                           ;incstack = 0
  5481  001FA8  9693               	bcf	3987,3,c	;volatile
  5482                           
  5483                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  5484  001FAA  9493               	bcf	3987,2,c	;volatile
  5485                           
  5486                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  5487  001FAC  968A               	bcf	3978,3,c	;volatile
  5488                           
  5489                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  5490  001FAE  948A               	bcf	3978,2,c	;volatile
  5491                           
  5492                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  5493  001FB0  9893               	bcf	3987,4,c	;volatile
  5494                           
  5495                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  5496  001FB2  9A93               	bcf	3987,5,c	;volatile
  5497                           
  5498                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  5499  001FB4  9C93               	bcf	3987,6,c	;volatile
  5500                           
  5501                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  5502  001FB6  9E93               	bcf	3987,7,c	;volatile
  5503                           
  5504                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  5505  001FB8  0E0A               	movlw	10
  5506  001FBA  ECE1  F013         	call	_Delay1KTCYx
  5507                           
  5508                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  5509  001FBE  0E0A               	movlw	10
  5510  001FC0  ECE1  F013         	call	_Delay1KTCYx
  5511                           
  5512                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  5513  001FC4  0E0A               	movlw	10
  5514  001FC6  ECE1  F013         	call	_Delay1KTCYx
  5515                           
  5516                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  5517  001FCA  0E00               	movlw	0
  5518  001FCC  6E05               	movwf	lcd_init@i,c
  5519  001FCE                     l2978:
  5520  001FCE  0E02               	movlw	2
  5521  001FD0  6405               	cpfsgt	lcd_init@i,c
  5522  001FD2  D001               	goto	l2982
  5523  001FD4  D008               	goto	l2988
  5524  001FD6                     l2982:
  5525                           
  5526                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  5527  001FD6  0E03               	movlw	3
  5528  001FD8  EC4F  F010         	call	_lcd_send_nibble
  5529                           
  5530                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  5531  001FDC  0E0A               	movlw	10
  5532  001FDE  ECE1  F013         	call	_Delay1KTCYx
  5533  001FE2  2A05               	incf	lcd_init@i,f,c
  5534  001FE4  D7F4               	goto	l2978
  5535  001FE6                     l2988:
  5536                           
  5537                           ;unmc_lcd_216.c: 146: }
  5538                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  5539  001FE6  0E02               	movlw	2
  5540  001FE8  EC4F  F010         	call	_lcd_send_nibble
  5541                           
  5542                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  5543  001FEC  0E00               	movlw	0
  5544  001FEE  6E05               	movwf	lcd_init@i,c
  5545  001FF0  0E03               	movlw	3
  5546  001FF2  6405               	cpfsgt	lcd_init@i,c
  5547  001FF4  D002               	goto	l2996
  5548  001FF6  0012               	return	
  5549  001FF8  0012               	return	
  5550  001FFA                     l2996:
  5551                           
  5552                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  5553  001FFA  5005               	movf	lcd_init@i,w,c
  5554  001FFC  0D01               	mullw	1
  5555  001FFE  0E0B               	movlw	low _LCD_INIT_STRING
  5556  002000  24F3               	addwf	prodl,w,c
  5557  002002  6EF6               	movwf	tblptrl,c
  5558  002004  0E0F               	movlw	high _LCD_INIT_STRING
  5559  002006  20F4               	addwfc	prodh,w,c
  5560  002008  6EF7               	movwf	tblptrh,c
  5561  00200A                     	if	0	;There are less than 3 active tblptr bytes
  5562  00200A                     	endif
  5563  00200A  0008               	tblrd		*
  5564  00200C  CFF5 F003          	movff	tablat,lcd_send_byte@n
  5565  002010  0E00               	movlw	0
  5566  002012  EC5A  F013         	call	_lcd_send_byte
  5567                           
  5568                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  5569  002016  0E0A               	movlw	10
  5570  002018  ECE1  F013         	call	_Delay1KTCYx
  5571  00201C  2A05               	incf	lcd_init@i,f,c
  5572  00201E  0E03               	movlw	3
  5573  002020  6405               	cpfsgt	lcd_init@i,c
  5574  002022  D7EB               	goto	l2996
  5575  002024  0012               	return	
  5576  002026  0012               	return		;funcret
  5577  002028                     __end_of_lcd_init:
  5578                           	opt stack 0
  5579                           tosu	equ	0xFFF
  5580                           tosh	equ	0xFFE
  5581                           tosl	equ	0xFFD
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           indf0	equ	0xFEF
  5590                           postinc0	equ	0xFEE
  5591                           fsr0h	equ	0xFEA
  5592                           fsr0l	equ	0xFE9
  5593                           wreg	equ	0xFE8
  5594                           postinc1	equ	0xFE6
  5595                           postdec1	equ	0xFE5
  5596                           fsr1h	equ	0xFE2
  5597                           fsr1l	equ	0xFE1
  5598                           indf2	equ	0xFDF
  5599                           postinc2	equ	0xFDE
  5600                           postdec2	equ	0xFDD
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _Delay1KTCYx *****************
  5606 ;; Defined at:
  5607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;  unit            1    wreg     unsigned char 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  unit            1    0[COMRAM] unsigned char 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5625 ;;Total ram usage:        1 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_lcd_init
  5631 ;;		_DelayPORXLCD
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text30
  5636  0027C2                     __ptext30:
  5637                           	opt stack 0
  5638  0027C2                     _Delay1KTCYx:
  5639                           	opt stack 28
  5640                           
  5641                           ;incstack = 0
  5642                           ;Delay1KTCYx@unit stored from wreg
  5643  0027C2  6E01               	movwf	Delay1KTCYx@unit,c
  5644  0027C4  0EFA               	movlw	250
  5645  0027C6                     u3057:
  5646  0027C6  F000               	nop	
  5647  0027C8  2EE8               	decfsz	wreg,f,c
  5648  0027CA  D7FD               	goto	u3057
  5649  0027CC  2E01               	decfsz	Delay1KTCYx@unit,f,c
  5650  0027CE  D7FA               	goto	l2598
  5651  0027D0  0012               	return	
  5652  0027D2  0012               	return		;funcret
  5653  0027D4                     __end_of_Delay1KTCYx:
  5654                           	opt stack 0
  5655                           tosu	equ	0xFFF
  5656                           tosh	equ	0xFFE
  5657                           tosl	equ	0xFFD
  5658                           pclath	equ	0xFFA
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           indf0	equ	0xFEF
  5666                           postinc0	equ	0xFEE
  5667                           fsr0h	equ	0xFEA
  5668                           fsr0l	equ	0xFE9
  5669                           wreg	equ	0xFE8
  5670                           postinc1	equ	0xFE6
  5671                           postdec1	equ	0xFE5
  5672                           fsr1h	equ	0xFE2
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function _lcd_comand *****************
  5682 ;; Defined at:
  5683 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  d               1    wreg     unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  d               1    4[COMRAM] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5701 ;;Total ram usage:        1 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    2
  5704 ;; This function calls:
  5705 ;;		_lcd_send_byte
  5706 ;; This function is called by:
  5707 ;;		_caratula
  5708 ;;		_Setup
  5709 ;;		_ingresar_password
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text31
  5714  002808                     __ptext31:
  5715                           	opt stack 0
  5716  002808                     _lcd_comand:
  5717                           	opt stack 27
  5718                           
  5719                           ;incstack = 0
  5720                           ;lcd_comand@d stored from wreg
  5721  002808  6E05               	movwf	lcd_comand@d,c
  5722                           
  5723                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  5724  00280A  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  5725  00280E  0E00               	movlw	0
  5726  002810  EC5A  F013         	call	_lcd_send_byte
  5727  002814  0012               	return		;funcret
  5728  002816                     __end_of_lcd_comand:
  5729                           	opt stack 0
  5730                           tosu	equ	0xFFF
  5731                           tosh	equ	0xFFE
  5732                           tosl	equ	0xFFD
  5733                           pclath	equ	0xFFA
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           indf0	equ	0xFEF
  5741                           postinc0	equ	0xFEE
  5742                           fsr0h	equ	0xFEA
  5743                           fsr0l	equ	0xFE9
  5744                           wreg	equ	0xFE8
  5745                           postinc1	equ	0xFE6
  5746                           postdec1	equ	0xFE5
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _lcd_send_byte *****************
  5757 ;; Defined at:
  5758 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  address         1    wreg     unsigned char 
  5761 ;;  n               1    2[COMRAM] unsigned char 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  address         1    3[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;		None               void
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5773 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5777 ;;Total ram usage:        2 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    1
  5780 ;; This function calls:
  5781 ;;		_Delay100TCYx
  5782 ;;		_lcd_send_nibble
  5783 ;; This function is called by:
  5784 ;;		_lcd_init
  5785 ;;		_lcd_gotoxy
  5786 ;;		_lcd_putc
  5787 ;;		_lcd_comand
  5788 ;;		_lcd_setcursor_vb
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text32
  5793  0026B4                     __ptext32:
  5794                           	opt stack 0
  5795  0026B4                     _lcd_send_byte:
  5796                           	opt stack 24
  5797                           
  5798                           ;incstack = 0
  5799                           ;lcd_send_byte@address stored from wreg
  5800  0026B4  6E04               	movwf	lcd_send_byte@address,c
  5801                           
  5802                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  5803  0026B6  968A               	bcf	3978,3,c	;volatile
  5804                           
  5805                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  5806  0026B8  0E02               	movlw	2
  5807  0026BA  ECEA  F013         	call	_Delay100TCYx
  5808                           
  5809                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  5810  0026BE  9893               	bcf	3987,4,c	;volatile
  5811                           
  5812                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  5813  0026C0  9A93               	bcf	3987,5,c	;volatile
  5814                           
  5815                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  5816  0026C2  9C93               	bcf	3987,6,c	;volatile
  5817                           
  5818                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  5819  0026C4  9E93               	bcf	3987,7,c	;volatile
  5820                           
  5821                           ;unmc_lcd_216.c: 101: if(address)
  5822  0026C6  5004               	movf	lcd_send_byte@address,w,c
  5823  0026C8  B4D8               	btfsc	status,2,c
  5824  0026CA  D002               	goto	l330
  5825                           
  5826                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  5827  0026CC  868A               	bsf	3978,3,c	;volatile
  5828  0026CE  D001               	goto	l331
  5829  0026D0                     l330:
  5830                           
  5831                           ;unmc_lcd_216.c: 103: else
  5832                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  5833  0026D0  968A               	bcf	3978,3,c	;volatile
  5834  0026D2                     l331:
  5835                           
  5836                           ;unmc_lcd_216.c: 106: __nop();
  5837  0026D2  F000               	nop	
  5838                           
  5839                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  5840  0026D4  3803               	swapf	lcd_send_byte@n,w,c
  5841  0026D6  0B0F               	andlw	15
  5842  0026D8  EC4F  F010         	call	_lcd_send_nibble
  5843                           
  5844                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  5845  0026DC  5003               	movf	lcd_send_byte@n,w,c
  5846  0026DE  0B0F               	andlw	15
  5847  0026E0  EC4F  F010         	call	_lcd_send_nibble
  5848  0026E4  0012               	return		;funcret
  5849  0026E6                     __end_of_lcd_send_byte:
  5850                           	opt stack 0
  5851                           tosu	equ	0xFFF
  5852                           tosh	equ	0xFFE
  5853                           tosl	equ	0xFFD
  5854                           pclath	equ	0xFFA
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           indf0	equ	0xFEF
  5862                           postinc0	equ	0xFEE
  5863                           fsr0h	equ	0xFEA
  5864                           fsr0l	equ	0xFE9
  5865                           wreg	equ	0xFE8
  5866                           postinc1	equ	0xFE6
  5867                           postdec1	equ	0xFE5
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _lcd_send_nibble *****************
  5878 ;; Defined at:
  5879 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  nibble          1    wreg     unsigned char 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  nibble          1    1[COMRAM] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;		None               void
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5897 ;;Total ram usage:        2 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_lcd_send_byte
  5903 ;;		_lcd_init
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text33
  5908  00209E                     __ptext33:
  5909                           	opt stack 0
  5910  00209E                     _lcd_send_nibble:
  5911                           	opt stack 24
  5912                           
  5913                           ;incstack = 0
  5914                           ;lcd_send_nibble@nibble stored from wreg
  5915  00209E  6E02               	movwf	lcd_send_nibble@nibble,c
  5916                           
  5917                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  5918  0020A0  A002               	btfss	lcd_send_nibble@nibble,0,c
  5919  0020A2  D003               	goto	u1510
  5920  0020A4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5921  0020A6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5922  0020A8  D001               	goto	u1528
  5923  0020AA                     u1510:
  5924  0020AA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5925  0020AC                     u1528:
  5926  0020AC  3A01               	swapf	??_lcd_send_nibble,f,c
  5927  0020AE  508A               	movf	3978,w,c	;volatile
  5928  0020B0  1801               	xorwf	??_lcd_send_nibble,w,c
  5929  0020B2  0BEF               	andlw	-17
  5930  0020B4  1801               	xorwf	??_lcd_send_nibble,w,c
  5931  0020B6  6E8A               	movwf	3978,c	;volatile
  5932                           
  5933                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  5934  0020B8  A202               	btfss	lcd_send_nibble@nibble,1,c
  5935  0020BA  D003               	goto	u1530
  5936  0020BC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5937  0020BE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5938  0020C0  D001               	goto	u1548
  5939  0020C2                     u1530:
  5940  0020C2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5941  0020C4                     u1548:
  5942  0020C4  3A01               	swapf	??_lcd_send_nibble,f,c
  5943  0020C6  4601               	rlncf	??_lcd_send_nibble,f,c
  5944  0020C8  508A               	movf	3978,w,c	;volatile
  5945  0020CA  1801               	xorwf	??_lcd_send_nibble,w,c
  5946  0020CC  0BDF               	andlw	-33
  5947  0020CE  1801               	xorwf	??_lcd_send_nibble,w,c
  5948  0020D0  6E8A               	movwf	3978,c	;volatile
  5949                           
  5950                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  5951  0020D2  A402               	btfss	lcd_send_nibble@nibble,2,c
  5952  0020D4  D003               	goto	u1550
  5953  0020D6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5954  0020D8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5955  0020DA  D001               	goto	u1568
  5956  0020DC                     u1550:
  5957  0020DC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5958  0020DE                     u1568:
  5959  0020DE  3A01               	swapf	??_lcd_send_nibble,f,c
  5960  0020E0  4601               	rlncf	??_lcd_send_nibble,f,c
  5961  0020E2  4601               	rlncf	??_lcd_send_nibble,f,c
  5962  0020E4  508A               	movf	3978,w,c	;volatile
  5963  0020E6  1801               	xorwf	??_lcd_send_nibble,w,c
  5964  0020E8  0BBF               	andlw	-65
  5965  0020EA  1801               	xorwf	??_lcd_send_nibble,w,c
  5966  0020EC  6E8A               	movwf	3978,c	;volatile
  5967                           
  5968                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  5969  0020EE  A602               	btfss	lcd_send_nibble@nibble,3,c
  5970  0020F0  D003               	goto	u1570
  5971  0020F2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5972  0020F4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5973  0020F6  D001               	goto	u1588
  5974  0020F8                     u1570:
  5975  0020F8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5976  0020FA                     u1588:
  5977  0020FA  3201               	rrcf	??_lcd_send_nibble,f,c
  5978  0020FC  3201               	rrcf	??_lcd_send_nibble,f,c
  5979  0020FE  508A               	movf	3978,w,c	;volatile
  5980  002100  1801               	xorwf	??_lcd_send_nibble,w,c
  5981  002102  0B7F               	andlw	-129
  5982  002104  1801               	xorwf	??_lcd_send_nibble,w,c
  5983  002106  6E8A               	movwf	3978,c	;volatile
  5984                           
  5985                           ;unmc_lcd_216.c: 32: __nop();
  5986  002108  F000               	nop	
  5987                           
  5988                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  5989  00210A  848A               	bsf	3978,2,c	;volatile
  5990                           
  5991                           ;unmc_lcd_216.c: 34: __nop();__nop();
  5992  00210C  F000               	nop	
  5993  00210E  F000               	nop	
  5994                           
  5995                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  5996  002110  948A               	bcf	3978,2,c	;volatile
  5997  002112  0012               	return		;funcret
  5998  002114                     __end_of_lcd_send_nibble:
  5999                           	opt stack 0
  6000                           tosu	equ	0xFFF
  6001                           tosh	equ	0xFFE
  6002                           tosl	equ	0xFFD
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           indf0	equ	0xFEF
  6011                           postinc0	equ	0xFEE
  6012                           fsr0h	equ	0xFEA
  6013                           fsr0l	equ	0xFE9
  6014                           wreg	equ	0xFE8
  6015                           postinc1	equ	0xFE6
  6016                           postdec1	equ	0xFE5
  6017                           fsr1h	equ	0xFE2
  6018                           fsr1l	equ	0xFE1
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _Delay100TCYx *****************
  6027 ;; Defined at:
  6028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  unit            1    wreg     unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  unit            1    0[COMRAM] unsigned char 
  6033 ;; Return value:  Size  Location     Type
  6034 ;;		None               void
  6035 ;; Registers used:
  6036 ;;		wreg
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6046 ;;Total ram usage:        1 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_lcd_send_byte
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text34
  6056  0027D4                     __ptext34:
  6057                           	opt stack 0
  6058  0027D4                     _Delay100TCYx:
  6059                           	opt stack 24
  6060                           
  6061                           ;incstack = 0
  6062                           ;Delay100TCYx@unit stored from wreg
  6063  0027D4  6E01               	movwf	Delay100TCYx@unit,c
  6064  0027D6  0E21               	movlw	33
  6065  0027D8                     u3067:
  6066  0027D8  2EE8               	decfsz	wreg,f,c
  6067  0027DA  D7FE               	goto	u3067
  6068  0027DC  F000               	nop	
  6069  0027DE  2E01               	decfsz	Delay100TCYx@unit,f,c
  6070  0027E0  D7FA               	goto	l2266
  6071  0027E2  0012               	return	
  6072  0027E4  0012               	return		;funcret
  6073  0027E6                     __end_of_Delay100TCYx:
  6074                           	opt stack 0
  6075                           tosu	equ	0xFFF
  6076                           tosh	equ	0xFFE
  6077                           tosl	equ	0xFFD
  6078                           pclath	equ	0xFFA
  6079                           tblptru	equ	0xFF8
  6080                           tblptrh	equ	0xFF7
  6081                           tblptrl	equ	0xFF6
  6082                           tablat	equ	0xFF5
  6083                           prodh	equ	0xFF4
  6084                           prodl	equ	0xFF3
  6085                           indf0	equ	0xFEF
  6086                           postinc0	equ	0xFEE
  6087                           fsr0h	equ	0xFEA
  6088                           fsr0l	equ	0xFE9
  6089                           wreg	equ	0xFE8
  6090                           postinc1	equ	0xFE6
  6091                           postdec1	equ	0xFE5
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _Write_RTC *****************
  6102 ;; Defined at:
  6103 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;		None               void
  6110 ;; Registers used:
  6111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6121 ;;Total ram usage:        0 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    2
  6124 ;; This function calls:
  6125 ;;		_RtccWrOn
  6126 ;;		_RtccWriteDate
  6127 ;;		_RtccWriteTime
  6128 ;;		___awdiv
  6129 ;; This function is called by:
  6130 ;;		_Setup
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text35
  6135  001552                     __ptext35:
  6136                           	opt stack 0
  6137  001552                     _Write_RTC:
  6138                           	opt stack 27
  6139                           
  6140                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  6141                           
  6142                           ;incstack = 0
  6143  001552  ECF3  F013         	call	_RtccWrOn	;wreg free
  6144                           
  6145                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  6146  001556  80A3               	bsf	4003,0,c	;volatile
  6147                           
  6148                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  6149  001558  C092  F001         	movff	_segundo,___awdiv@dividend
  6150  00155C  C093  F002         	movff	_segundo+1,___awdiv@dividend+1
  6151  001560  0E00               	movlw	0
  6152  001562  6E04               	movwf	___awdiv@divisor+1,c
  6153  001564  0E0A               	movlw	10
  6154  001566  6E03               	movwf	___awdiv@divisor,c
  6155  001568  EC42  F00F         	call	___awdiv	;wreg free
  6156  00156C  5001               	movf	?___awdiv,w,c
  6157  00156E  0100               	movlb	0	; () banked
  6158  001570  6FD2               	movwf	_segundo_d& (0+255),b
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  6162  001572  0100               	movlb	0	; () banked
  6163  001574  51D2               	movf	_segundo_d& (0+255),w,b
  6164  001576  0D0A               	mullw	10
  6165  001578  50F3               	movf	prodl,w,c
  6166  00157A  0800               	sublw	0
  6167  00157C  0100               	movlb	0	; () banked
  6168  00157E  2592               	addwf	_segundo& (0+255),w,b
  6169  001580  0100               	movlb	0	; () banked
  6170  001582  6FD3               	movwf	_segundo_u& (0+255),b
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  6174  001584  0100               	movlb	0	; () banked
  6175  001586  51D2               	movf	_segundo_d& (0+255),w,b
  6176  001588  0D10               	mullw	16
  6177  00158A  50F3               	movf	prodl,w,c
  6178  00158C  0100               	movlb	0	; () banked
  6179  00158E  25D3               	addwf	_segundo_u& (0+255),w,b
  6180  001590  6E54               	movwf	_RtccTime+1,c
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  6184  001592  C0C5  F001         	movff	_minuto,___awdiv@dividend
  6185  001596  C0C6  F002         	movff	_minuto+1,___awdiv@dividend+1
  6186  00159A  0E00               	movlw	0
  6187  00159C  6E04               	movwf	___awdiv@divisor+1,c
  6188  00159E  0E0A               	movlw	10
  6189  0015A0  6E03               	movwf	___awdiv@divisor,c
  6190  0015A2  EC42  F00F         	call	___awdiv	;wreg free
  6191  0015A6  5001               	movf	?___awdiv,w,c
  6192  0015A8  0100               	movlb	0	; () banked
  6193  0015AA  6FD0               	movwf	_minuto_d& (0+255),b
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  6197  0015AC  0100               	movlb	0	; () banked
  6198  0015AE  51D0               	movf	_minuto_d& (0+255),w,b
  6199  0015B0  0D0A               	mullw	10
  6200  0015B2  50F3               	movf	prodl,w,c
  6201  0015B4  0800               	sublw	0
  6202  0015B6  0100               	movlb	0	; () banked
  6203  0015B8  25C5               	addwf	_minuto& (0+255),w,b
  6204  0015BA  0100               	movlb	0	; () banked
  6205  0015BC  6FD1               	movwf	_minuto_u& (0+255),b
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  6209  0015BE  0100               	movlb	0	; () banked
  6210  0015C0  51D0               	movf	_minuto_d& (0+255),w,b
  6211  0015C2  0D10               	mullw	16
  6212  0015C4  50F3               	movf	prodl,w,c
  6213  0015C6  0100               	movlb	0	; () banked
  6214  0015C8  25D1               	addwf	_minuto_u& (0+255),w,b
  6215  0015CA  6E55               	movwf	_RtccTime+2,c
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  6219  0015CC  C0C3  F001         	movff	_hora,___awdiv@dividend
  6220  0015D0  C0C4  F002         	movff	_hora+1,___awdiv@dividend+1
  6221  0015D4  0E00               	movlw	0
  6222  0015D6  6E04               	movwf	___awdiv@divisor+1,c
  6223  0015D8  0E0A               	movlw	10
  6224  0015DA  6E03               	movwf	___awdiv@divisor,c
  6225  0015DC  EC42  F00F         	call	___awdiv	;wreg free
  6226  0015E0  5001               	movf	?___awdiv,w,c
  6227  0015E2  0100               	movlb	0	; () banked
  6228  0015E4  6FCC               	movwf	_hora_d& (0+255),b
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  6232  0015E6  0100               	movlb	0	; () banked
  6233  0015E8  51CC               	movf	_hora_d& (0+255),w,b
  6234  0015EA  0D0A               	mullw	10
  6235  0015EC  50F3               	movf	prodl,w,c
  6236  0015EE  0800               	sublw	0
  6237  0015F0  0100               	movlb	0	; () banked
  6238  0015F2  25C3               	addwf	_hora& (0+255),w,b
  6239  0015F4  0100               	movlb	0	; () banked
  6240  0015F6  6FCD               	movwf	_hora_u& (0+255),b
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  6244  0015F8  0100               	movlb	0	; () banked
  6245  0015FA  51CC               	movf	_hora_d& (0+255),w,b
  6246  0015FC  0D10               	mullw	16
  6247  0015FE  50F3               	movf	prodl,w,c
  6248  001600  0100               	movlb	0	; () banked
  6249  001602  25CD               	addwf	_hora_u& (0+255),w,b
  6250  001604  6E56               	movwf	_RtccTime+3,c
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  6254  001606  C059  F001         	movff	_anio,___awdiv@dividend
  6255  00160A  C05A  F002         	movff	_anio+1,___awdiv@dividend+1
  6256  00160E  0E00               	movlw	0
  6257  001610  6E04               	movwf	___awdiv@divisor+1,c
  6258  001612  0E0A               	movlw	10
  6259  001614  6E03               	movwf	___awdiv@divisor,c
  6260  001616  EC42  F00F         	call	___awdiv	;wreg free
  6261  00161A  5001               	movf	?___awdiv,w,c
  6262  00161C  0100               	movlb	0	; () banked
  6263  00161E  6FC7               	movwf	_anio_d& (0+255),b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  6267  001620  0100               	movlb	0	; () banked
  6268  001622  51C7               	movf	_anio_d& (0+255),w,b
  6269  001624  0D0A               	mullw	10
  6270  001626  50F3               	movf	prodl,w,c
  6271  001628  0800               	sublw	0
  6272  00162A  2459               	addwf	_anio,w,c
  6273  00162C  0100               	movlb	0	; () banked
  6274  00162E  6FC8               	movwf	_anio_u& (0+255),b
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  6278  001630  0100               	movlb	0	; () banked
  6279  001632  51C7               	movf	_anio_d& (0+255),w,b
  6280  001634  0D10               	mullw	16
  6281  001636  50F3               	movf	prodl,w,c
  6282  001638  0100               	movlb	0	; () banked
  6283  00163A  25C8               	addwf	_anio_u& (0+255),w,b
  6284  00163C  6E52               	movwf	_RtccDate+3,c
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  6288  00163E  C05D  F001         	movff	_mes,___awdiv@dividend
  6289  001642  C05E  F002         	movff	_mes+1,___awdiv@dividend+1
  6290  001646  0E00               	movlw	0
  6291  001648  6E04               	movwf	___awdiv@divisor+1,c
  6292  00164A  0E0A               	movlw	10
  6293  00164C  6E03               	movwf	___awdiv@divisor,c
  6294  00164E  EC42  F00F         	call	___awdiv	;wreg free
  6295  001652  5001               	movf	?___awdiv,w,c
  6296  001654  0100               	movlb	0	; () banked
  6297  001656  6FCE               	movwf	_mes_d& (0+255),b
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  6301  001658  0100               	movlb	0	; () banked
  6302  00165A  51CE               	movf	_mes_d& (0+255),w,b
  6303  00165C  0D0A               	mullw	10
  6304  00165E  50F3               	movf	prodl,w,c
  6305  001660  0800               	sublw	0
  6306  001662  245D               	addwf	_mes,w,c
  6307  001664  0100               	movlb	0	; () banked
  6308  001666  6FCF               	movwf	_mes_u& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  6312  001668  0100               	movlb	0	; () banked
  6313  00166A  51CE               	movf	_mes_d& (0+255),w,b
  6314  00166C  0D10               	mullw	16
  6315  00166E  50F3               	movf	prodl,w,c
  6316  001670  0100               	movlb	0	; () banked
  6317  001672  25CF               	addwf	_mes_u& (0+255),w,b
  6318  001674  6E51               	movwf	_RtccDate+2,c
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  6322  001676  C05B  F001         	movff	_dia,___awdiv@dividend
  6323  00167A  C05C  F002         	movff	_dia+1,___awdiv@dividend+1
  6324  00167E  0E00               	movlw	0
  6325  001680  6E04               	movwf	___awdiv@divisor+1,c
  6326  001682  0E0A               	movlw	10
  6327  001684  6E03               	movwf	___awdiv@divisor,c
  6328  001686  EC42  F00F         	call	___awdiv	;wreg free
  6329  00168A  5001               	movf	?___awdiv,w,c
  6330  00168C  0100               	movlb	0	; () banked
  6331  00168E  6FCA               	movwf	_fecha_d& (0+255),b
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  6335  001690  0100               	movlb	0	; () banked
  6336  001692  51CA               	movf	_fecha_d& (0+255),w,b
  6337  001694  0D0A               	mullw	10
  6338  001696  50F3               	movf	prodl,w,c
  6339  001698  0800               	sublw	0
  6340  00169A  245B               	addwf	_dia,w,c
  6341  00169C  0100               	movlb	0	; () banked
  6342  00169E  6FCB               	movwf	_fecha_u& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  6346  0016A0  0100               	movlb	0	; () banked
  6347  0016A2  51CA               	movf	_fecha_d& (0+255),w,b
  6348  0016A4  0D10               	mullw	16
  6349  0016A6  50F3               	movf	prodl,w,c
  6350  0016A8  0100               	movlb	0	; () banked
  6351  0016AA  25CB               	addwf	_fecha_u& (0+255),w,b
  6352  0016AC  6E50               	movwf	_RtccDate+1,c
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  6356  0016AE  C0C1  F0C9         	movff	_diasem,_dia_semana
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  6360  0016B2  C0C1  F04F         	movff	_diasem,_RtccDate
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  6364  0016B6  0E53               	movlw	low _RtccTime
  6365  0016B8  6E01               	movwf	RtccWriteTime@pTm,c
  6366  0016BA  0E00               	movlw	high _RtccTime
  6367  0016BC  6E02               	movwf	RtccWriteTime@pTm+1,c
  6368  0016BE  0E01               	movlw	1
  6369  0016C0  6E03               	movwf	RtccWriteTime@di,c
  6370  0016C2  EC31  F00D         	call	_RtccWriteTime	;wreg free
  6371                           
  6372                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  6373  0016C6  0E4F               	movlw	low _RtccDate
  6374  0016C8  6E01               	movwf	RtccWriteDate@pDt,c
  6375  0016CA  0E00               	movlw	high _RtccDate
  6376  0016CC  6E02               	movwf	RtccWriteDate@pDt+1,c
  6377  0016CE  0E01               	movlw	1
  6378  0016D0  6E03               	movwf	RtccWriteDate@di,c
  6379  0016D2  EC6E  F00B         	call	_RtccWriteDate	;wreg free
  6380                           
  6381                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  6382  0016D6  010F               	movlb	15	; () banked
  6383  0016D8  8F3F               	bsf	63,7,b	;volatile
  6384                           
  6385                           ; BSR set to: 15
  6386  0016DA  0012               	return		;funcret
  6387  0016DC                     __end_of_Write_RTC:
  6388                           	opt stack 0
  6389                           tosu	equ	0xFFF
  6390                           tosh	equ	0xFFE
  6391                           tosl	equ	0xFFD
  6392                           pclath	equ	0xFFA
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           indf0	equ	0xFEF
  6400                           postinc0	equ	0xFEE
  6401                           fsr0h	equ	0xFEA
  6402                           fsr0l	equ	0xFE9
  6403                           wreg	equ	0xFE8
  6404                           postinc1	equ	0xFE6
  6405                           postdec1	equ	0xFE5
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function ___awdiv *****************
  6416 ;; Defined at:
  6417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  dividend        2    0[COMRAM] int 
  6420 ;;  divisor         2    2[COMRAM] int 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  quotient        2    6[COMRAM] int 
  6423 ;;  sign            1    5[COMRAM] unsigned char 
  6424 ;;  counter         1    4[COMRAM] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  2    0[COMRAM] int 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6435 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6437 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6438 ;;Total ram usage:        8 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_Write_RTC
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text36
  6448  001E84                     __ptext36:
  6449                           	opt stack 0
  6450  001E84                     ___awdiv:
  6451                           	opt stack 28
  6452                           
  6453                           ; BSR set to: 15
  6454                           ;incstack = 0
  6455  001E84  0E00               	movlw	0
  6456  001E86  6E06               	movwf	___awdiv@sign,c
  6457  001E88  AE04               	btfss	___awdiv@divisor+1,7,c
  6458  001E8A  D007               	goto	l2768
  6459  001E8C  6C03               	negf	___awdiv@divisor,c
  6460  001E8E  1E04               	comf	___awdiv@divisor+1,f,c
  6461  001E90  B0D8               	btfsc	status,0,c
  6462  001E92  2A04               	incf	___awdiv@divisor+1,f,c
  6463  001E94  0E01               	movlw	1
  6464  001E96  6E06               	movwf	___awdiv@sign,c
  6465  001E98  D000               	goto	l2768
  6466  001E9A                     l2768:
  6467  001E9A  AE02               	btfss	___awdiv@dividend+1,7,c
  6468  001E9C  D007               	goto	l2774
  6469  001E9E  6C01               	negf	___awdiv@dividend,c
  6470  001EA0  1E02               	comf	___awdiv@dividend+1,f,c
  6471  001EA2  B0D8               	btfsc	status,0,c
  6472  001EA4  2A02               	incf	___awdiv@dividend+1,f,c
  6473  001EA6  0E01               	movlw	1
  6474  001EA8  1A06               	xorwf	___awdiv@sign,f,c
  6475  001EAA  D000               	goto	l2774
  6476  001EAC                     l2774:
  6477  001EAC  0E00               	movlw	0
  6478  001EAE  6E08               	movwf	___awdiv@quotient+1,c
  6479  001EB0  0E00               	movlw	0
  6480  001EB2  6E07               	movwf	___awdiv@quotient,c
  6481  001EB4  5003               	movf	___awdiv@divisor,w,c
  6482  001EB6  1004               	iorwf	___awdiv@divisor+1,w,c
  6483  001EB8  B4D8               	btfsc	status,2,c
  6484  001EBA  D021               	goto	l2796
  6485  001EBC  0E01               	movlw	1
  6486  001EBE  6E05               	movwf	___awdiv@counter,c
  6487  001EC0  D005               	goto	l2782
  6488  001EC2                     l2780:
  6489  001EC2  90D8               	bcf	status,0,c
  6490  001EC4  3603               	rlcf	___awdiv@divisor,f,c
  6491  001EC6  3604               	rlcf	___awdiv@divisor+1,f,c
  6492  001EC8  2A05               	incf	___awdiv@counter,f,c
  6493  001ECA  D000               	goto	l2782
  6494  001ECC                     l2782:
  6495  001ECC  BE04               	btfsc	___awdiv@divisor+1,7,c
  6496  001ECE  D002               	goto	l2784
  6497  001ED0  D7F8               	goto	l2780
  6498  001ED2  D000               	goto	l2784
  6499  001ED4                     l2784:
  6500  001ED4  90D8               	bcf	status,0,c
  6501  001ED6  3607               	rlcf	___awdiv@quotient,f,c
  6502  001ED8  3608               	rlcf	___awdiv@quotient+1,f,c
  6503  001EDA  5003               	movf	___awdiv@divisor,w,c
  6504  001EDC  5C01               	subwf	___awdiv@dividend,w,c
  6505  001EDE  5004               	movf	___awdiv@divisor+1,w,c
  6506  001EE0  5802               	subwfb	___awdiv@dividend+1,w,c
  6507  001EE2  A0D8               	btfss	status,0,c
  6508  001EE4  D006               	goto	l2792
  6509  001EE6  5003               	movf	___awdiv@divisor,w,c
  6510  001EE8  5E01               	subwf	___awdiv@dividend,f,c
  6511  001EEA  5004               	movf	___awdiv@divisor+1,w,c
  6512  001EEC  5A02               	subwfb	___awdiv@dividend+1,f,c
  6513  001EEE  8007               	bsf	___awdiv@quotient,0,c
  6514  001EF0  D000               	goto	l2792
  6515  001EF2                     l2792:
  6516  001EF2  90D8               	bcf	status,0,c
  6517  001EF4  3204               	rrcf	___awdiv@divisor+1,f,c
  6518  001EF6  3203               	rrcf	___awdiv@divisor,f,c
  6519  001EF8  2E05               	decfsz	___awdiv@counter,f,c
  6520  001EFA  D7EC               	goto	l2784
  6521  001EFC  D000               	goto	l2796
  6522  001EFE                     l2796:
  6523  001EFE  5006               	movf	___awdiv@sign,w,c
  6524  001F00  B4D8               	btfsc	status,2,c
  6525  001F02  D005               	goto	l2800
  6526  001F04  6C07               	negf	___awdiv@quotient,c
  6527  001F06  1E08               	comf	___awdiv@quotient+1,f,c
  6528  001F08  B0D8               	btfsc	status,0,c
  6529  001F0A  2A08               	incf	___awdiv@quotient+1,f,c
  6530  001F0C  D000               	goto	l2800
  6531  001F0E                     l2800:
  6532  001F0E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  6533  001F12  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  6534  001F16  0012               	return	
  6535  001F18  0012               	return		;funcret
  6536  001F1A                     __end_of___awdiv:
  6537                           	opt stack 0
  6538                           tosu	equ	0xFFF
  6539                           tosh	equ	0xFFE
  6540                           tosl	equ	0xFFD
  6541                           pclath	equ	0xFFA
  6542                           tblptru	equ	0xFF8
  6543                           tblptrh	equ	0xFF7
  6544                           tblptrl	equ	0xFF6
  6545                           tablat	equ	0xFF5
  6546                           prodh	equ	0xFF4
  6547                           prodl	equ	0xFF3
  6548                           indf0	equ	0xFEF
  6549                           postinc0	equ	0xFEE
  6550                           fsr0h	equ	0xFEA
  6551                           fsr0l	equ	0xFE9
  6552                           wreg	equ	0xFE8
  6553                           postinc1	equ	0xFE6
  6554                           postdec1	equ	0xFE5
  6555                           fsr1h	equ	0xFE2
  6556                           fsr1l	equ	0xFE1
  6557                           indf2	equ	0xFDF
  6558                           postinc2	equ	0xFDE
  6559                           postdec2	equ	0xFDD
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _RtccWriteTime *****************
  6565 ;; Defined at:
  6566 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;  pTm             2    0[COMRAM] PTR const struct .
  6569 ;;		 -> RtccTime(4), 
  6570 ;;  di              1    2[COMRAM] enum E7121
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  tempHourWDay    2    9[COMRAM] struct .
  6573 ;;  tempMinSec      2    7[COMRAM] struct .
  6574 ;;  wasWrEn         1    6[COMRAM] enum E7121
  6575 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6576 ;;  wasOn           1    4[COMRAM] enum E7121
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      enum E7337
  6579 ;; Registers used:
  6580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6586 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6587 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6589 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;Total ram usage:       11 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    1
  6593 ;; This function calls:
  6594 ;;		_RtccWrOn
  6595 ;; This function is called by:
  6596 ;;		_Write_RTC
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text37
  6601  001A62                     __ptext37:
  6602                           	opt stack 0
  6603  001A62                     _RtccWriteTime:
  6604                           	opt stack 27
  6605                           
  6606                           ;incstack = 0
  6607  001A62  0E00               	movlw	0
  6608  001A64  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6609  001A66  EE20 F002          	lfsr	2,2
  6610  001A6A  5001               	movf	RtccWriteTime@pTm,w,c
  6611  001A6C  26D9               	addwf	fsr2l,f,c
  6612  001A6E  5002               	movf	RtccWriteTime@pTm+1,w,c
  6613  001A70  22DA               	addwfc	fsr2h,f,c
  6614  001A72  0E5A               	movlw	90
  6615  001A74  60DF               	cpfslt	indf2,c
  6616  001A76  0012               	return	
  6617  001A78  EE20 F001          	lfsr	2,1
  6618  001A7C  5001               	movf	RtccWriteTime@pTm,w,c
  6619  001A7E  26D9               	addwf	fsr2l,f,c
  6620  001A80  5002               	movf	RtccWriteTime@pTm+1,w,c
  6621  001A82  22DA               	addwfc	fsr2h,f,c
  6622  001A84  0E5A               	movlw	90
  6623  001A86  60DF               	cpfslt	indf2,c
  6624  001A88  0012               	return	
  6625  001A8A  EE20 F003          	lfsr	2,3
  6626  001A8E  5001               	movf	RtccWriteTime@pTm,w,c
  6627  001A90  26D9               	addwf	fsr2l,f,c
  6628  001A92  5002               	movf	RtccWriteTime@pTm+1,w,c
  6629  001A94  22DA               	addwfc	fsr2h,f,c
  6630  001A96  0E24               	movlw	36
  6631  001A98  64DF               	cpfsgt	indf2,c
  6632  001A9A  D002               	goto	l2610
  6633  001A9C  0012               	return	
  6634                           
  6635                           ;	Return value of _RtccWriteTime is never used
  6636  001A9E  0012               	return	
  6637  001AA0                     l2610:
  6638  001AA0  EE20 F002          	lfsr	2,2
  6639  001AA4  5001               	movf	RtccWriteTime@pTm,w,c
  6640  001AA6  26D9               	addwf	fsr2l,f,c
  6641  001AA8  5002               	movf	RtccWriteTime@pTm+1,w,c
  6642  001AAA  22DA               	addwfc	fsr2h,f,c
  6643  001AAC  50DF               	movf	indf2,w,c
  6644  001AAE  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  6645  001AB0  EE20 F001          	lfsr	2,1
  6646  001AB4  5001               	movf	RtccWriteTime@pTm,w,c
  6647  001AB6  26D9               	addwf	fsr2l,f,c
  6648  001AB8  5002               	movf	RtccWriteTime@pTm+1,w,c
  6649  001ABA  22DA               	addwfc	fsr2h,f,c
  6650  001ABC  50DF               	movf	indf2,w,c
  6651  001ABE  6E08               	movwf	RtccWriteTime@tempMinSec,c
  6652  001AC0  5003               	movf	RtccWriteTime@di,w,c
  6653  001AC2  B4D8               	btfsc	status,2,c
  6654  001AC4  D002               	goto	l2616
  6655  001AC6  9CF2               	bcf	intcon,6,c	;volatile
  6656  001AC8  D000               	goto	l2616
  6657  001ACA                     l2616:
  6658  001ACA  0E00               	movlw	0
  6659  001ACC  BB3F               	btfsc	63,5,b	;volatile
  6660  001ACE  0E01               	movlw	1
  6661  001AD0  6E07               	movwf	RtccWriteTime@wasWrEn,c
  6662  001AD2  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6663  001AD4  A4D8               	btfss	status,2,c
  6664  001AD6  D003               	goto	l2620
  6665  001AD8  ECF3  F013         	call	_RtccWrOn	;wreg free
  6666  001ADC  D000               	goto	l2620
  6667  001ADE                     l2620:
  6668  001ADE  0E00               	movlw	0
  6669  001AE0  BF3F               	btfsc	63,7,b	;volatile
  6670  001AE2  0E01               	movlw	1
  6671  001AE4  6E05               	movwf	RtccWriteTime@wasOn,c
  6672  001AE6  5005               	movf	RtccWriteTime@wasOn,w,c
  6673  001AE8  B4D8               	btfsc	status,2,c
  6674  001AEA  D007               	goto	l2626
  6675  001AEC  0E00               	movlw	0
  6676  001AEE  BE91               	btfsc	3985,7,c	;volatile
  6677  001AF0  0E01               	movlw	1
  6678  001AF2  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6679  001AF4  010F               	movlb	15	; () banked
  6680  001AF6  9F3F               	bcf	63,7,b	;volatile
  6681  001AF8  D000               	goto	l2626
  6682  001AFA                     l2626:
  6683  001AFA  0EFC               	movlw	252
  6684  001AFC  010F               	movlb	15	; () banked
  6685  001AFE  173F               	andwf	63,f,b	;volatile
  6686  001B00  010F               	movlb	15	; () banked
  6687  001B02  813F               	bsf	63,0,b	;volatile
  6688                           
  6689                           ; BSR set to: 15
  6690  001B04  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  6691                           
  6692                           ; BSR set to: 15
  6693  001B08  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  6694                           
  6695                           ; BSR set to: 15
  6696  001B0C  EE20 F003          	lfsr	2,3
  6697  001B10  5001               	movf	RtccWriteTime@pTm,w,c
  6698  001B12  26D9               	addwf	fsr2l,f,c
  6699  001B14  5002               	movf	RtccWriteTime@pTm+1,w,c
  6700  001B16  22DA               	addwfc	fsr2h,f,c
  6701  001B18  50DF               	movf	indf2,w,c
  6702  001B1A  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  6703                           
  6704                           ; BSR set to: 15
  6705  001B1C  0EFC               	movlw	252
  6706  001B1E  010F               	movlb	15	; () banked
  6707  001B20  173F               	andwf	63,f,b	;volatile
  6708                           
  6709                           ; BSR set to: 15
  6710  001B22  010F               	movlb	15	; () banked
  6711  001B24  813F               	bsf	63,0,b	;volatile
  6712                           
  6713                           ; BSR set to: 15
  6714  001B26  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  6715                           
  6716                           ; BSR set to: 15
  6717  001B2A  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  6718                           
  6719                           ; BSR set to: 15
  6720  001B2E  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  6721                           
  6722                           ; BSR set to: 15
  6723  001B32  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  6724                           
  6725                           ; BSR set to: 15
  6726  001B36  5005               	movf	RtccWriteTime@wasOn,w,c
  6727  001B38  B4D8               	btfsc	status,2,c
  6728  001B3A  D00D               	goto	l2658
  6729                           
  6730                           ; BSR set to: 15
  6731  001B3C  010F               	movlb	15	; () banked
  6732  001B3E  8F3F               	bsf	63,7,b	;volatile
  6733                           
  6734                           ; BSR set to: 15
  6735  001B40  5006               	movf	RtccWriteTime@wasAlrm,w,c
  6736  001B42  B4D8               	btfsc	status,2,c
  6737  001B44  D002               	goto	l2654
  6738                           
  6739                           ; BSR set to: 15
  6740  001B46  8E91               	bsf	3985,7,c	;volatile
  6741  001B48  D000               	goto	l2654
  6742  001B4A                     l2654:
  6743                           
  6744                           ; BSR set to: 15
  6745  001B4A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6746  001B4C  B4D8               	btfsc	status,2,c
  6747  001B4E  D009               	goto	l2662
  6748                           
  6749                           ; BSR set to: 15
  6750  001B50  ECF3  F013         	call	_RtccWrOn	;wreg free
  6751  001B54  D006               	goto	l2662
  6752  001B56                     l2658:
  6753  001B56  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6754  001B58  A4D8               	btfss	status,2,c
  6755  001B5A  D003               	goto	l2662
  6756  001B5C  010F               	movlb	15	; () banked
  6757  001B5E  9B3F               	bcf	63,5,b	;volatile
  6758                           
  6759                           ; BSR set to: 15
  6760  001B60  D000               	goto	l2662
  6761  001B62                     l2662:
  6762  001B62  5003               	movf	RtccWriteTime@di,w,c
  6763  001B64  B4D8               	btfsc	status,2,c
  6764  001B66  0012               	return	
  6765  001B68  8CF2               	bsf	intcon,6,c	;volatile
  6766  001B6A  0012               	return	
  6767                           
  6768                           ;	Return value of _RtccWriteTime is never used
  6769  001B6C  0012               	return		;funcret
  6770  001B6E                     __end_of_RtccWriteTime:
  6771                           	opt stack 0
  6772                           tosu	equ	0xFFF
  6773                           tosh	equ	0xFFE
  6774                           tosl	equ	0xFFD
  6775                           pclath	equ	0xFFA
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           indf0	equ	0xFEF
  6784                           postinc0	equ	0xFEE
  6785                           fsr0h	equ	0xFEA
  6786                           fsr0l	equ	0xFE9
  6787                           wreg	equ	0xFE8
  6788                           postinc1	equ	0xFE6
  6789                           postdec1	equ	0xFE5
  6790                           fsr1h	equ	0xFE2
  6791                           fsr1l	equ	0xFE1
  6792                           indf2	equ	0xFDF
  6793                           postinc2	equ	0xFDE
  6794                           postdec2	equ	0xFDD
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _RtccWriteDate *****************
  6800 ;; Defined at:
  6801 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  pDt             2    0[COMRAM] PTR const struct .
  6804 ;;		 -> RtccDate(4), 
  6805 ;;  di              1    2[COMRAM] enum E7121
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;  tempHourWDay    2   11[COMRAM] struct .
  6808 ;;  tempDayMonth    2    9[COMRAM] struct .
  6809 ;;  tempYear        2    6[COMRAM] struct .
  6810 ;;  wasWrEn         1    8[COMRAM] enum E7121
  6811 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6812 ;;  wasOn           1    4[COMRAM] enum E7121
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      enum E7337
  6815 ;; Registers used:
  6816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6822 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6823 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6825 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6826 ;;Total ram usage:       13 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    1
  6829 ;; This function calls:
  6830 ;;		_RtccWrOn
  6831 ;; This function is called by:
  6832 ;;		_Write_RTC
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           	psect	text38
  6837  0016DC                     __ptext38:
  6838                           	opt stack 0
  6839  0016DC                     _RtccWriteDate:
  6840                           	opt stack 27
  6841                           
  6842                           ;incstack = 0
  6843  0016DC  0E00               	movlw	0
  6844  0016DE  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6845  0016E0  EE20 F002          	lfsr	2,2
  6846  0016E4  5001               	movf	RtccWriteDate@pDt,w,c
  6847  0016E6  26D9               	addwf	fsr2l,f,c
  6848  0016E8  5002               	movf	RtccWriteDate@pDt+1,w,c
  6849  0016EA  22DA               	addwfc	fsr2h,f,c
  6850  0016EC  0E13               	movlw	19
  6851  0016EE  60DF               	cpfslt	indf2,c
  6852  0016F0  0012               	return	
  6853  0016F2  EE20 F002          	lfsr	2,2
  6854  0016F6  5001               	movf	RtccWriteDate@pDt,w,c
  6855  0016F8  26D9               	addwf	fsr2l,f,c
  6856  0016FA  5002               	movf	RtccWriteDate@pDt+1,w,c
  6857  0016FC  22DA               	addwfc	fsr2h,f,c
  6858  0016FE  50DF               	movf	indf2,w,c
  6859  001700  B4D8               	btfsc	status,2,c
  6860  001702  0012               	return	
  6861  001704  EE20 F001          	lfsr	2,1
  6862  001708  5001               	movf	RtccWriteDate@pDt,w,c
  6863  00170A  26D9               	addwf	fsr2l,f,c
  6864  00170C  5002               	movf	RtccWriteDate@pDt+1,w,c
  6865  00170E  22DA               	addwfc	fsr2h,f,c
  6866  001710  0E32               	movlw	50
  6867  001712  60DF               	cpfslt	indf2,c
  6868  001714  0012               	return	
  6869  001716  EE20 F001          	lfsr	2,1
  6870  00171A  5001               	movf	RtccWriteDate@pDt,w,c
  6871  00171C  26D9               	addwf	fsr2l,f,c
  6872  00171E  5002               	movf	RtccWriteDate@pDt+1,w,c
  6873  001720  22DA               	addwfc	fsr2h,f,c
  6874  001722  50DF               	movf	indf2,w,c
  6875  001724  B4D8               	btfsc	status,2,c
  6876  001726  0012               	return	
  6877  001728  EE20 F003          	lfsr	2,3
  6878  00172C  5001               	movf	RtccWriteDate@pDt,w,c
  6879  00172E  26D9               	addwf	fsr2l,f,c
  6880  001730  5002               	movf	RtccWriteDate@pDt+1,w,c
  6881  001732  22DA               	addwfc	fsr2h,f,c
  6882  001734  0E99               	movlw	153
  6883  001736  64DF               	cpfsgt	indf2,c
  6884  001738  D002               	goto	l2678
  6885  00173A  0012               	return	
  6886                           
  6887                           ;	Return value of _RtccWriteDate is never used
  6888  00173C  0012               	return	
  6889  00173E                     l2678:
  6890  00173E  EE20 F003          	lfsr	2,3
  6891  001742  5001               	movf	RtccWriteDate@pDt,w,c
  6892  001744  26D9               	addwf	fsr2l,f,c
  6893  001746  5002               	movf	RtccWriteDate@pDt+1,w,c
  6894  001748  22DA               	addwfc	fsr2h,f,c
  6895  00174A  50DF               	movf	indf2,w,c
  6896  00174C  6E07               	movwf	RtccWriteDate@tempYear,c
  6897  00174E  EE20 F001          	lfsr	2,1
  6898  001752  5001               	movf	RtccWriteDate@pDt,w,c
  6899  001754  26D9               	addwf	fsr2l,f,c
  6900  001756  5002               	movf	RtccWriteDate@pDt+1,w,c
  6901  001758  22DA               	addwfc	fsr2h,f,c
  6902  00175A  50DF               	movf	indf2,w,c
  6903  00175C  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  6904  00175E  EE20 F002          	lfsr	2,2
  6905  001762  5001               	movf	RtccWriteDate@pDt,w,c
  6906  001764  26D9               	addwf	fsr2l,f,c
  6907  001766  5002               	movf	RtccWriteDate@pDt+1,w,c
  6908  001768  22DA               	addwfc	fsr2h,f,c
  6909  00176A  50DF               	movf	indf2,w,c
  6910  00176C  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  6911  00176E  5003               	movf	RtccWriteDate@di,w,c
  6912  001770  B4D8               	btfsc	status,2,c
  6913  001772  D002               	goto	l2684
  6914  001774  9CF2               	bcf	intcon,6,c	;volatile
  6915  001776  D000               	goto	l2684
  6916  001778                     l2684:
  6917  001778  0E00               	movlw	0
  6918  00177A  BB3F               	btfsc	63,5,b	;volatile
  6919  00177C  0E01               	movlw	1
  6920  00177E  6E09               	movwf	RtccWriteDate@wasWrEn,c
  6921  001780  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6922  001782  A4D8               	btfss	status,2,c
  6923  001784  D003               	goto	l2688
  6924  001786  ECF3  F013         	call	_RtccWrOn	;wreg free
  6925  00178A  D000               	goto	l2688
  6926  00178C                     l2688:
  6927  00178C  0E00               	movlw	0
  6928  00178E  BF3F               	btfsc	63,7,b	;volatile
  6929  001790  0E01               	movlw	1
  6930  001792  6E05               	movwf	RtccWriteDate@wasOn,c
  6931  001794  5005               	movf	RtccWriteDate@wasOn,w,c
  6932  001796  B4D8               	btfsc	status,2,c
  6933  001798  D007               	goto	l2694
  6934  00179A  0E00               	movlw	0
  6935  00179C  BE91               	btfsc	3985,7,c	;volatile
  6936  00179E  0E01               	movlw	1
  6937  0017A0  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6938  0017A2  010F               	movlb	15	; () banked
  6939  0017A4  9F3F               	bcf	63,7,b	;volatile
  6940  0017A6  D000               	goto	l2694
  6941  0017A8                     l2694:
  6942  0017A8  0EFC               	movlw	252
  6943  0017AA  010F               	movlb	15	; () banked
  6944  0017AC  173F               	andwf	63,f,b	;volatile
  6945  0017AE  010F               	movlb	15	; () banked
  6946  0017B0  813F               	bsf	63,0,b	;volatile
  6947                           
  6948                           ; BSR set to: 15
  6949  0017B2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  6950                           
  6951                           ; BSR set to: 15
  6952  0017B6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  6953                           
  6954                           ; BSR set to: 15
  6955  0017BA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  6956  0017BE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  6957  0017C2  50DF               	movf	indf2,w,c
  6958  0017C4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  6959                           
  6960                           ; BSR set to: 15
  6961  0017C6  0EFC               	movlw	252
  6962  0017C8  010F               	movlb	15	; () banked
  6963  0017CA  173F               	andwf	63,f,b	;volatile
  6964                           
  6965                           ; BSR set to: 15
  6966  0017CC  0E03               	movlw	3
  6967  0017CE  010F               	movlb	15	; () banked
  6968  0017D0  133F               	iorwf	63,f,b	;volatile
  6969                           
  6970                           ; BSR set to: 15
  6971  0017D2  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  6972                           
  6973                           ; BSR set to: 15
  6974  0017D6  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  6975                           
  6976                           ; BSR set to: 15
  6977  0017DA  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  6978                           
  6979                           ; BSR set to: 15
  6980  0017DE  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  6981                           
  6982                           ; BSR set to: 15
  6983  0017E2  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  6984                           
  6985                           ; BSR set to: 15
  6986  0017E6  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  6987                           
  6988                           ; BSR set to: 15
  6989  0017EA  5005               	movf	RtccWriteDate@wasOn,w,c
  6990  0017EC  B4D8               	btfsc	status,2,c
  6991  0017EE  D00D               	goto	l2730
  6992                           
  6993                           ; BSR set to: 15
  6994  0017F0  010F               	movlb	15	; () banked
  6995  0017F2  8F3F               	bsf	63,7,b	;volatile
  6996                           
  6997                           ; BSR set to: 15
  6998  0017F4  5006               	movf	RtccWriteDate@wasAlrm,w,c
  6999  0017F6  B4D8               	btfsc	status,2,c
  7000  0017F8  D002               	goto	l2726
  7001                           
  7002                           ; BSR set to: 15
  7003  0017FA  8E91               	bsf	3985,7,c	;volatile
  7004  0017FC  D000               	goto	l2726
  7005  0017FE                     l2726:
  7006                           
  7007                           ; BSR set to: 15
  7008  0017FE  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7009  001800  B4D8               	btfsc	status,2,c
  7010  001802  D009               	goto	l2734
  7011                           
  7012                           ; BSR set to: 15
  7013  001804  ECF3  F013         	call	_RtccWrOn	;wreg free
  7014  001808  D006               	goto	l2734
  7015  00180A                     l2730:
  7016  00180A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7017  00180C  A4D8               	btfss	status,2,c
  7018  00180E  D003               	goto	l2734
  7019  001810  010F               	movlb	15	; () banked
  7020  001812  9B3F               	bcf	63,5,b	;volatile
  7021                           
  7022                           ; BSR set to: 15
  7023  001814  D000               	goto	l2734
  7024  001816                     l2734:
  7025  001816  5003               	movf	RtccWriteDate@di,w,c
  7026  001818  B4D8               	btfsc	status,2,c
  7027  00181A  0012               	return	
  7028  00181C  9CF2               	bcf	intcon,6,c	;volatile
  7029  00181E  0012               	return	
  7030                           
  7031                           ;	Return value of _RtccWriteDate is never used
  7032  001820  0012               	return		;funcret
  7033  001822                     __end_of_RtccWriteDate:
  7034                           	opt stack 0
  7035                           tosu	equ	0xFFF
  7036                           tosh	equ	0xFFE
  7037                           tosl	equ	0xFFD
  7038                           pclath	equ	0xFFA
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           indf0	equ	0xFEF
  7047                           postinc0	equ	0xFEE
  7048                           fsr0h	equ	0xFEA
  7049                           fsr0l	equ	0xFE9
  7050                           wreg	equ	0xFE8
  7051                           postinc1	equ	0xFE6
  7052                           postdec1	equ	0xFE5
  7053                           fsr1h	equ	0xFE2
  7054                           fsr1l	equ	0xFE1
  7055                           indf2	equ	0xFDF
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           fsr2h	equ	0xFDA
  7059                           fsr2l	equ	0xFD9
  7060                           status	equ	0xFD8
  7061                           
  7062 ;; *************** function _RtccWrOn *****************
  7063 ;; Defined at:
  7064 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  data            2    0        unsigned int 
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, status,2
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7082 ;;Total ram usage:        0 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_Write_RTC
  7088 ;;		_RtccWriteDate
  7089 ;;		_RtccWriteTime
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text39
  7094  0027E6                     __ptext39:
  7095                           	opt stack 0
  7096  0027E6                     _RtccWrOn:
  7097                           	opt stack 27
  7098                           
  7099                           ;incstack = 0
  7100  0027E6  9CF2               	bcf	intcon,6,c	;volatile
  7101  0027E8  0E55               	movlw	85
  7102  0027EA  6EA7               	movwf	4007,c	;volatile
  7103  0027EC  0EAA               	movlw	170
  7104  0027EE  6EA7               	movwf	4007,c	;volatile
  7105  0027F0  010F               	movlb	15	; () banked
  7106  0027F2  8B3F               	bsf	63,5,b	;volatile
  7107                           
  7108                           ; BSR set to: 15
  7109  0027F4  8CF2               	bsf	intcon,6,c	;volatile
  7110                           
  7111                           ; BSR set to: 15
  7112  0027F6  0012               	return		;funcret
  7113  0027F8                     __end_of_RtccWrOn:
  7114                           	opt stack 0
  7115                           tosu	equ	0xFFF
  7116                           tosh	equ	0xFFE
  7117                           tosl	equ	0xFFD
  7118                           pclath	equ	0xFFA
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           prodh	equ	0xFF4
  7124                           prodl	equ	0xFF3
  7125                           intcon	equ	0xFF2
  7126                           indf0	equ	0xFEF
  7127                           postinc0	equ	0xFEE
  7128                           fsr0h	equ	0xFEA
  7129                           fsr0l	equ	0xFE9
  7130                           wreg	equ	0xFE8
  7131                           postinc1	equ	0xFE6
  7132                           postdec1	equ	0xFE5
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function _Read_RTC *****************
  7143 ;; Defined at:
  7144 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;		None
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;		None
  7149 ;; Return value:  Size  Location     Type
  7150 ;;		None               void
  7151 ;; Registers used:
  7152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7162 ;;Total ram usage:        0 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    1
  7165 ;; This function calls:
  7166 ;;		_RtccReadDate
  7167 ;;		_RtccReadTime
  7168 ;; This function is called by:
  7169 ;;		_main
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text40
  7174  001822                     __ptext40:
  7175                           	opt stack 0
  7176  001822                     _Read_RTC:
  7177                           	opt stack 29
  7178                           
  7179                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  7180                           
  7181                           ; BSR set to: 15
  7182                           ;incstack = 0
  7183  001822  0E53               	movlw	low _RtccTime
  7184  001824  6E01               	movwf	RtccReadTime@pTm,c
  7185  001826  0E00               	movlw	high _RtccTime
  7186  001828  6E02               	movwf	RtccReadTime@pTm+1,c
  7187  00182A  EC35  F011         	call	_RtccReadTime	;wreg free
  7188                           
  7189                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  7190  00182E  5054               	movf	_RtccTime+1,w,c
  7191  001830  0B0F               	andlw	15
  7192  001832  0100               	movlb	0	; () banked
  7193  001834  6FD3               	movwf	_segundo_u& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  7197  001836  3854               	swapf	_RtccTime+1,w,c
  7198  001838  0B0F               	andlw	15
  7199  00183A  0B0F               	andlw	15
  7200  00183C  0100               	movlb	0	; () banked
  7201  00183E  6FD2               	movwf	_segundo_d& (0+255),b
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  7205  001840  5055               	movf	_RtccTime+2,w,c
  7206  001842  0B0F               	andlw	15
  7207  001844  0100               	movlb	0	; () banked
  7208  001846  6FD1               	movwf	_minuto_u& (0+255),b
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  7212  001848  3855               	swapf	_RtccTime+2,w,c
  7213  00184A  0B0F               	andlw	15
  7214  00184C  0B0F               	andlw	15
  7215  00184E  0100               	movlb	0	; () banked
  7216  001850  6FD0               	movwf	_minuto_d& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  7220  001852  5056               	movf	_RtccTime+3,w,c
  7221  001854  0B0F               	andlw	15
  7222  001856  0100               	movlb	0	; () banked
  7223  001858  6FCD               	movwf	_hora_u& (0+255),b
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  7227  00185A  3856               	swapf	_RtccTime+3,w,c
  7228  00185C  0B0F               	andlw	15
  7229  00185E  0B0F               	andlw	15
  7230  001860  0100               	movlb	0	; () banked
  7231  001862  6FCC               	movwf	_hora_d& (0+255),b
  7232                           
  7233                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  7234  001864  0E4F               	movlw	low _RtccDate
  7235  001866  6E01               	movwf	RtccReadDate@pDt,c
  7236  001868  0E00               	movlw	high _RtccDate
  7237  00186A  6E02               	movwf	RtccReadDate@pDt+1,c
  7238  00186C  EC8D  F00F         	call	_RtccReadDate	;wreg free
  7239                           
  7240                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  7241  001870  5050               	movf	_RtccDate+1,w,c
  7242  001872  0B0F               	andlw	15
  7243  001874  0100               	movlb	0	; () banked
  7244  001876  6FCB               	movwf	_fecha_u& (0+255),b
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  7248  001878  3850               	swapf	_RtccDate+1,w,c
  7249  00187A  0B0F               	andlw	15
  7250  00187C  0B0F               	andlw	15
  7251  00187E  0100               	movlb	0	; () banked
  7252  001880  6FCA               	movwf	_fecha_d& (0+255),b
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  7256  001882  5051               	movf	_RtccDate+2,w,c
  7257  001884  0B0F               	andlw	15
  7258  001886  0100               	movlb	0	; () banked
  7259  001888  6FCF               	movwf	_mes_u& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  7263  00188A  3851               	swapf	_RtccDate+2,w,c
  7264  00188C  0B0F               	andlw	15
  7265  00188E  0B0F               	andlw	15
  7266  001890  0100               	movlb	0	; () banked
  7267  001892  6FCE               	movwf	_mes_d& (0+255),b
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  7271  001894  C04F  F0C9         	movff	_RtccDate,_dia_semana
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  7275  001898  5052               	movf	_RtccDate+3,w,c
  7276  00189A  0B0F               	andlw	15
  7277  00189C  0100               	movlb	0	; () banked
  7278  00189E  6FC8               	movwf	_anio_u& (0+255),b
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  7282  0018A0  3852               	swapf	_RtccDate+3,w,c
  7283  0018A2  0B0F               	andlw	15
  7284  0018A4  0B0F               	andlw	15
  7285  0018A6  0100               	movlb	0	; () banked
  7286  0018A8  6FC7               	movwf	_anio_d& (0+255),b
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  7290  0018AA  0100               	movlb	0	; () banked
  7291  0018AC  51D2               	movf	_segundo_d& (0+255),w,b
  7292  0018AE  0D0A               	mullw	10
  7293  0018B0  0100               	movlb	0	; () banked
  7294  0018B2  51D3               	movf	_segundo_u& (0+255),w,b
  7295  0018B4  24F3               	addwf	prodl,w,c
  7296  0018B6  0100               	movlb	0	; () banked
  7297  0018B8  6F92               	movwf	_segundo& (0+255),b
  7298  0018BA  0100               	movlb	0	; () banked
  7299  0018BC  0E00               	movlw	0
  7300  0018BE  20F4               	addwfc	prodh,w,c
  7301  0018C0  0100               	movlb	0	; () banked
  7302  0018C2  6F93               	movwf	(_segundo+1)& (0+255),b
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  7306  0018C4  0100               	movlb	0	; () banked
  7307  0018C6  51D0               	movf	_minuto_d& (0+255),w,b
  7308  0018C8  0D0A               	mullw	10
  7309  0018CA  0100               	movlb	0	; () banked
  7310  0018CC  51D1               	movf	_minuto_u& (0+255),w,b
  7311  0018CE  24F3               	addwf	prodl,w,c
  7312  0018D0  0100               	movlb	0	; () banked
  7313  0018D2  6FC5               	movwf	_minuto& (0+255),b
  7314  0018D4  0100               	movlb	0	; () banked
  7315  0018D6  0E00               	movlw	0
  7316  0018D8  20F4               	addwfc	prodh,w,c
  7317  0018DA  0100               	movlb	0	; () banked
  7318  0018DC  6FC6               	movwf	(_minuto+1)& (0+255),b
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  7322  0018DE  0100               	movlb	0	; () banked
  7323  0018E0  51CC               	movf	_hora_d& (0+255),w,b
  7324  0018E2  0D0A               	mullw	10
  7325  0018E4  0100               	movlb	0	; () banked
  7326  0018E6  51CD               	movf	_hora_u& (0+255),w,b
  7327  0018E8  24F3               	addwf	prodl,w,c
  7328  0018EA  0100               	movlb	0	; () banked
  7329  0018EC  6FC3               	movwf	_hora& (0+255),b
  7330  0018EE  0100               	movlb	0	; () banked
  7331  0018F0  0E00               	movlw	0
  7332  0018F2  20F4               	addwfc	prodh,w,c
  7333  0018F4  0100               	movlb	0	; () banked
  7334  0018F6  6FC4               	movwf	(_hora+1)& (0+255),b
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  7338  0018F8  0100               	movlb	0	; () banked
  7339  0018FA  51CA               	movf	_fecha_d& (0+255),w,b
  7340  0018FC  0D0A               	mullw	10
  7341  0018FE  0100               	movlb	0	; () banked
  7342  001900  51CB               	movf	_fecha_u& (0+255),w,b
  7343  001902  24F3               	addwf	prodl,w,c
  7344  001904  6E5B               	movwf	_dia,c
  7345  001906  0100               	movlb	0	; () banked
  7346  001908  0E00               	movlw	0
  7347  00190A  20F4               	addwfc	prodh,w,c
  7348  00190C  6E5C               	movwf	_dia+1,c
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  7352  00190E  C0C9  F0C1         	movff	_dia_semana,_diasem
  7353  001912  0100               	movlb	0	; () banked
  7354  001914  6BC2               	clrf	(_diasem+1)& (0+255),b
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  7358  001916  0100               	movlb	0	; () banked
  7359  001918  51CE               	movf	_mes_d& (0+255),w,b
  7360  00191A  0D0A               	mullw	10
  7361  00191C  0100               	movlb	0	; () banked
  7362  00191E  51CF               	movf	_mes_u& (0+255),w,b
  7363  001920  24F3               	addwf	prodl,w,c
  7364  001922  6E5D               	movwf	_mes,c
  7365  001924  0100               	movlb	0	; () banked
  7366  001926  0E00               	movlw	0
  7367  001928  20F4               	addwfc	prodh,w,c
  7368  00192A  6E5E               	movwf	_mes+1,c
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  7372  00192C  0100               	movlb	0	; () banked
  7373  00192E  51C7               	movf	_anio_d& (0+255),w,b
  7374  001930  0D0A               	mullw	10
  7375  001932  0100               	movlb	0	; () banked
  7376  001934  51C8               	movf	_anio_u& (0+255),w,b
  7377  001936  24F3               	addwf	prodl,w,c
  7378  001938  6E59               	movwf	_anio,c
  7379  00193A  0100               	movlb	0	; () banked
  7380  00193C  0E00               	movlw	0
  7381  00193E  20F4               	addwfc	prodh,w,c
  7382  001940  6E5A               	movwf	_anio+1,c
  7383                           
  7384                           ; BSR set to: 0
  7385  001942  0012               	return		;funcret
  7386  001944                     __end_of_Read_RTC:
  7387                           	opt stack 0
  7388                           tosu	equ	0xFFF
  7389                           tosh	equ	0xFFE
  7390                           tosl	equ	0xFFD
  7391                           pclath	equ	0xFFA
  7392                           tblptru	equ	0xFF8
  7393                           tblptrh	equ	0xFF7
  7394                           tblptrl	equ	0xFF6
  7395                           tablat	equ	0xFF5
  7396                           prodh	equ	0xFF4
  7397                           prodl	equ	0xFF3
  7398                           intcon	equ	0xFF2
  7399                           indf0	equ	0xFEF
  7400                           postinc0	equ	0xFEE
  7401                           fsr0h	equ	0xFEA
  7402                           fsr0l	equ	0xFE9
  7403                           wreg	equ	0xFE8
  7404                           postinc1	equ	0xFE6
  7405                           postdec1	equ	0xFE5
  7406                           fsr1h	equ	0xFE2
  7407                           fsr1l	equ	0xFE1
  7408                           indf2	equ	0xFDF
  7409                           postinc2	equ	0xFDE
  7410                           postdec2	equ	0xFDD
  7411                           fsr2h	equ	0xFDA
  7412                           fsr2l	equ	0xFD9
  7413                           status	equ	0xFD8
  7414                           
  7415 ;; *************** function _RtccReadTime *****************
  7416 ;; Defined at:
  7417 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  pTm             2    0[COMRAM] PTR struct .
  7420 ;;		 -> RtccTime(4), 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  rTD0            8   10[COMRAM] struct .
  7423 ;;  rTD1            8    2[COMRAM] struct .
  7424 ;; Return value:  Size  Location     Type
  7425 ;;		None               void
  7426 ;; Registers used:
  7427 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7434 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7436 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7437 ;;Total ram usage:       18 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_Read_RTC
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text41
  7447  00226A                     __ptext41:
  7448                           	opt stack 0
  7449  00226A                     _RtccReadTime:
  7450                           	opt stack 29
  7451  00226A  0EFC               	movlw	252
  7452  00226C  010F               	movlb	15	; () banked
  7453  00226E  173F               	andwf	63,f,b	;volatile
  7454                           
  7455                           ; BSR set to: 15
  7456  002270  010F               	movlb	15	; () banked
  7457  002272  813F               	bsf	63,0,b	;volatile
  7458                           
  7459                           ; BSR set to: 15
  7460  002274  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  7461                           
  7462                           ; BSR set to: 15
  7463  002278  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  7464                           
  7465                           ; BSR set to: 15
  7466  00227C  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  7467                           
  7468                           ; BSR set to: 15
  7469  002280  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  7470                           
  7471                           ; BSR set to: 15
  7472  002284  0EFC               	movlw	252
  7473  002286  010F               	movlb	15	; () banked
  7474  002288  173F               	andwf	63,f,b	;volatile
  7475  00228A  010F               	movlb	15	; () banked
  7476  00228C  813F               	bsf	63,0,b	;volatile
  7477                           
  7478                           ; BSR set to: 15
  7479  00228E  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  7480                           
  7481                           ; BSR set to: 15
  7482  002292  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  7483                           
  7484                           ; BSR set to: 15
  7485  002296  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  7486                           
  7487                           ; BSR set to: 15
  7488  00229A  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  7489                           
  7490                           ; BSR set to: 15
  7491  00229E  5009               	movf	RtccReadTime@rTD1+6,w,c
  7492  0022A0  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  7493  0022A2  A4D8               	btfss	status,2,c
  7494  0022A4  D7E2               	goto	l2854
  7495                           
  7496                           ; BSR set to: 15
  7497                           
  7498                           ; BSR set to: 15
  7499  0022A6  EE20 F003          	lfsr	2,3
  7500  0022AA  5001               	movf	RtccReadTime@pTm,w,c
  7501  0022AC  26D9               	addwf	fsr2l,f,c
  7502  0022AE  5002               	movf	RtccReadTime@pTm+1,w,c
  7503  0022B0  22DA               	addwfc	fsr2h,f,c
  7504  0022B2  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  7505  0022B6  EE20 F002          	lfsr	2,2
  7506  0022BA  5001               	movf	RtccReadTime@pTm,w,c
  7507  0022BC  26D9               	addwf	fsr2l,f,c
  7508  0022BE  5002               	movf	RtccReadTime@pTm+1,w,c
  7509  0022C0  22DA               	addwfc	fsr2h,f,c
  7510  0022C2  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  7511  0022C6  EE20 F001          	lfsr	2,1
  7512  0022CA  5001               	movf	RtccReadTime@pTm,w,c
  7513  0022CC  26D9               	addwf	fsr2l,f,c
  7514  0022CE  5002               	movf	RtccReadTime@pTm+1,w,c
  7515  0022D0  22DA               	addwfc	fsr2h,f,c
  7516  0022D2  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  7517                           
  7518                           ; BSR set to: 15
  7519  0022D6  0012               	return		;funcret
  7520  0022D8                     __end_of_RtccReadTime:
  7521                           	opt stack 0
  7522                           tosu	equ	0xFFF
  7523                           tosh	equ	0xFFE
  7524                           tosl	equ	0xFFD
  7525                           pclath	equ	0xFFA
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           prodh	equ	0xFF4
  7531                           prodl	equ	0xFF3
  7532                           intcon	equ	0xFF2
  7533                           indf0	equ	0xFEF
  7534                           postinc0	equ	0xFEE
  7535                           fsr0h	equ	0xFEA
  7536                           fsr0l	equ	0xFE9
  7537                           wreg	equ	0xFE8
  7538                           postinc1	equ	0xFE6
  7539                           postdec1	equ	0xFE5
  7540                           fsr1h	equ	0xFE2
  7541                           fsr1l	equ	0xFE1
  7542                           indf2	equ	0xFDF
  7543                           postinc2	equ	0xFDE
  7544                           postdec2	equ	0xFDD
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8
  7548                           
  7549 ;; *************** function _RtccReadDate *****************
  7550 ;; Defined at:
  7551 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  pDt             2    0[COMRAM] PTR struct .
  7554 ;;		 -> RtccDate(4), 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  rTD0            8   10[COMRAM] struct .
  7557 ;;  rTD1            8    2[COMRAM] struct .
  7558 ;; Return value:  Size  Location     Type
  7559 ;;		None               void
  7560 ;; Registers used:
  7561 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7568 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7570 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7571 ;;Total ram usage:       18 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_Read_RTC
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text42
  7581  001F1A                     __ptext42:
  7582                           	opt stack 0
  7583  001F1A                     _RtccReadDate:
  7584                           	opt stack 29
  7585  001F1A  0EFC               	movlw	252
  7586  001F1C  010F               	movlb	15	; () banked
  7587  001F1E  173F               	andwf	63,f,b	;volatile
  7588  001F20  0E03               	movlw	3
  7589  001F22  010F               	movlb	15	; () banked
  7590  001F24  133F               	iorwf	63,f,b	;volatile
  7591                           
  7592                           ; BSR set to: 15
  7593  001F26  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  7594                           
  7595                           ; BSR set to: 15
  7596  001F2A  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  7597                           
  7598                           ; BSR set to: 15
  7599  001F2E  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  7600                           
  7601                           ; BSR set to: 15
  7602  001F32  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  7603                           
  7604                           ; BSR set to: 15
  7605  001F36  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  7606                           
  7607                           ; BSR set to: 15
  7608  001F3A  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  7609  001F3E  0EFC               	movlw	252
  7610  001F40  010F               	movlb	15	; () banked
  7611  001F42  173F               	andwf	63,f,b	;volatile
  7612  001F44  0E03               	movlw	3
  7613  001F46  010F               	movlb	15	; () banked
  7614  001F48  133F               	iorwf	63,f,b	;volatile
  7615                           
  7616                           ; BSR set to: 15
  7617  001F4A  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  7618                           
  7619                           ; BSR set to: 15
  7620  001F4E  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  7621                           
  7622                           ; BSR set to: 15
  7623  001F52  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  7624                           
  7625                           ; BSR set to: 15
  7626  001F56  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  7627                           
  7628                           ; BSR set to: 15
  7629  001F5A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  7630                           
  7631                           ; BSR set to: 15
  7632  001F5E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  7633  001F62  5005               	movf	RtccReadDate@rTD1+2,w,c
  7634  001F64  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  7635  001F66  A4D8               	btfss	status,2,c
  7636  001F68  D7D8               	goto	l2880
  7637                           
  7638                           ; BSR set to: 15
  7639                           
  7640                           ; BSR set to: 15
  7641  001F6A  EE20 F001          	lfsr	2,1
  7642  001F6E  5001               	movf	RtccReadDate@pDt,w,c
  7643  001F70  26D9               	addwf	fsr2l,f,c
  7644  001F72  5002               	movf	RtccReadDate@pDt+1,w,c
  7645  001F74  22DA               	addwfc	fsr2h,f,c
  7646  001F76  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  7647  001F7A  EE20 F002          	lfsr	2,2
  7648  001F7E  5001               	movf	RtccReadDate@pDt,w,c
  7649  001F80  26D9               	addwf	fsr2l,f,c
  7650  001F82  5002               	movf	RtccReadDate@pDt+1,w,c
  7651  001F84  22DA               	addwfc	fsr2h,f,c
  7652  001F86  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  7653                           
  7654                           ; BSR set to: 15
  7655  001F8A  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  7656  001F8E  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  7657  001F92  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  7658                           
  7659                           ; BSR set to: 15
  7660  001F96  EE20 F003          	lfsr	2,3
  7661  001F9A  5001               	movf	RtccReadDate@pDt,w,c
  7662  001F9C  26D9               	addwf	fsr2l,f,c
  7663  001F9E  5002               	movf	RtccReadDate@pDt+1,w,c
  7664  001FA0  22DA               	addwfc	fsr2h,f,c
  7665  001FA2  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  7666                           
  7667                           ; BSR set to: 15
  7668  001FA6  0012               	return		;funcret
  7669  001FA8                     __end_of_RtccReadDate:
  7670                           	opt stack 0
  7671                           tosu	equ	0xFFF
  7672                           tosh	equ	0xFFE
  7673                           tosl	equ	0xFFD
  7674                           pclath	equ	0xFFA
  7675                           tblptru	equ	0xFF8
  7676                           tblptrh	equ	0xFF7
  7677                           tblptrl	equ	0xFF6
  7678                           tablat	equ	0xFF5
  7679                           prodh	equ	0xFF4
  7680                           prodl	equ	0xFF3
  7681                           intcon	equ	0xFF2
  7682                           indf0	equ	0xFEF
  7683                           postinc0	equ	0xFEE
  7684                           fsr0h	equ	0xFEA
  7685                           fsr0l	equ	0xFE9
  7686                           wreg	equ	0xFE8
  7687                           postinc1	equ	0xFE6
  7688                           postdec1	equ	0xFE5
  7689                           fsr1h	equ	0xFE2
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8
  7697                           tosu	equ	0xFFF
  7698                           tosh	equ	0xFFE
  7699                           tosl	equ	0xFFD
  7700                           pclath	equ	0xFFA
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           indf0	equ	0xFEF
  7709                           postinc0	equ	0xFEE
  7710                           fsr0h	equ	0xFEA
  7711                           fsr0l	equ	0xFE9
  7712                           wreg	equ	0xFE8
  7713                           postinc1	equ	0xFE6
  7714                           postdec1	equ	0xFE5
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           postdec2	equ	0xFDD
  7720                           fsr2h	equ	0xFDA
  7721                           fsr2l	equ	0xFD9
  7722                           status	equ	0xFD8
  7723                           
  7724                           	psect	text43
  7725  000000                     __ptext43:
  7726                           	opt stack 0
  7727                           tosu	equ	0xFFF
  7728                           tosh	equ	0xFFE
  7729                           tosl	equ	0xFFD
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           indf0	equ	0xFEF
  7739                           postinc0	equ	0xFEE
  7740                           fsr0h	equ	0xFEA
  7741                           fsr0l	equ	0xFE9
  7742                           wreg	equ	0xFE8
  7743                           postinc1	equ	0xFE6
  7744                           postdec1	equ	0xFE5
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754                           	psect	rparam
  7755  0000                     tosu	equ	0xFFF
  7756                           tosh	equ	0xFFE
  7757                           tosl	equ	0xFFD
  7758                           pclath	equ	0xFFA
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           indf0	equ	0xFEF
  7767                           postinc0	equ	0xFEE
  7768                           fsr0h	equ	0xFEA
  7769                           fsr0l	equ	0xFE9
  7770                           wreg	equ	0xFE8
  7771                           postinc1	equ	0xFE6
  7772                           postdec1	equ	0xFE5
  7773                           fsr1h	equ	0xFE2
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           fsr2h	equ	0xFDA
  7779                           fsr2l	equ	0xFD9
  7780                           status	equ	0xFD8


Data Sizes:
    Strings     128
    Constant    14
    Data        22
    BSS         100
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      95
    BANK0           160      0     116
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 3775
		 -> STR_23(CODE[7]), year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 
		 -> RAM(DATA[3775]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_16(CODE[5]), STR_13(CODE[17]), STR_12(CODE[9]), STR_11(CODE[5]), 
		 -> STR_10(CODE[3]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[13]), STR_20(CODE[13]), STR_18(CODE[9]), STR_15(CODE[11]), 
		 -> STR_14(CODE[17]), ingresar_password@clear(COMRAM[16]), clear@clear(COMRAM[16]), day(BANK0[3]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), buffer2(BANK0[20]), 

    main@puntero_funcion	PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), cambiar_dia(), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[9]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 3775
		 -> tamanio_dia(COMRAM[2]), RAM(DATA[3775]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    inicializar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), cambiar_dia(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> ingresar_comando(), mostrar_guardar_password(), cambiar_dia(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_21(CODE[4]), STR_19(CODE[4]), STR_17(CODE[4]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_cambiar_dia
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _cambiar_dia->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _inicializar_fecha->_inicializar_elemento
    _inicializar_elemento->_sprintf
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _clear->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   82820
                                             62 COMRAM    13    13      0
                           _Read_RTC
                              _Setup
                           _caratula
                              _clear
                  _ingresar_password
                  _inicializar_fecha
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     518
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4   43811
                                             55 COMRAM     7     3      4
                        _cambiar_dia *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   22064
                                             49 COMRAM     6     0      6
                        _cambiar_dia *
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    9784
                                             40 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                       1     1      0    6533
                                             39 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3229
                                             42 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                      3     3      0    3207
                                             39 COMRAM     3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0    4973
                                             46 COMRAM     3     3      0
                    _convertir_a_int
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                     7     3      4    3701
                                             39 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int                                      4     0      4    1203
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     775
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _inicializar_fecha                                    0     0      0    3657
               _inicializar_elemento
 ---------------------------------------------------------------------------------
 (2) _inicializar_elemento                                 4     0      4    3657
                                             39 COMRAM     4     0      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    5727
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             2     0      2   13971
                                             39 COMRAM     2     0      2
                              _clear
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             31    21     10    3185
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _clear                                               20    18      2    5203
                                             10 COMRAM    20    18      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    3326
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    2193
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1525
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _clear
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _clear
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _inicializar_fecha
     _inicializar_elemento
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _cambiar_dia *
       _convertir_a_int
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _guardar_tecla_presionada *
       _cambiar_dia *
         _convertir_a_int
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      74       5       72.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     4B      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       6        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 30 21:42:42 2016

                                _a 0082                                  _b 0086  
                                _c 0088                                  _i 008A  
                                _j 008C                                  _k 008E  
                   ?_lcd_send_byte 0003                       ___awdiv@sign 0006  
              ___wmul@multiplicand 0003                        lcd_comand@d 0005  
                     __CFG_CP0$OFF 000000         ??_mostrar_guardar_password 0029  
                              l202 1A48                                l152 2268  
                              l217 2674                                l330 26D0  
                              l226 23AA                                l170 1E10  
                              l331 26D2                                l171 1E0C  
                              l174 1E38                                l190 19EE  
                              l183 1E7A                                l175 1E34  
                              l159 209C                                l193 1A18  
                              l178 1E62                                l194 1A14  
                              l179 1E5E                                l197 1A32  
                              l189 19F2                                l198 1A2E  
                              l712 1D30                                l399 1196  
                              _dia 005B                                _day 00AE  
                              _key 004E                                _mes 005D  
                              tosl 000FFD                                wreg 000FE8  
                  RtccReadDate@pDt 0001                        lcd_gotoxy@x 0006  
                      lcd_gotoxy@y 0005                               l2300 2510  
                             l2302 251C                               l2310 2540  
                             l2304 2528                               l2320 279A  
                             l3200 1B8A                               l1089 2462  
                             l2306 2534                               l3114 1A50  
                             l3050 2042                               l1099 2502  
                             l2340 2438                               l2500 12D6  
                             l2420 1102                               l2404 108E  
                             l2430 115E                               l2422 1116  
                             l2414 10E6                               l2406 1098  
                             l3214 1BDA                               l3206 1BA2  
                             l3054 2082                               l3302 14A8  
                             l2336 2426                               l2360 24E0  
                             l2416 10F0                               l2408 109E  
                             l3232 1C34                               l3208 1BB2  
                             l3056 2088                               l2610 1AA0  
                             l2266 27D6                               l2338 2430  
                             l2514 134E                               l2506 12F4  
                             l2450 11DE                               l2434 1162  
                             l2370 0F9A                               l3322 1510  
                             l3306 14B6                               l2620 1ADE  
                             l2292 276A                               l2524 246E  
                             l2348 2456                               l2364 24F6  
                             l2356 24CE                               l2508 12FA  
                             l2460 1212                               l2452 11E2  
                             l2428 114A                               l2516 135A  
                             l3236 1C4C                               l3228 1C20  
                             l2532 1C68                               l2294 2770  
                             l2358 24D8                               l2470 1232  
                             l2446 11C4                               l2518 1376  
                             l2382 0FCC                               l2550 1CF8  
                             l2534 1C6E                               l3326 1528  
                             l3318 14FC                               l2616 1ACA  
                             l2800 1F0E                               l2528 2498  
                             l2464 1216                               l2456 11EE  
                             l2384 0FE2                               l2376 0FB4  
                             l2552 1CFE                               l2544 1CAE  
                             l3328 152E                               l3272 1400  
                             l2730 180A                               l2626 1AFA  
                             l2474 1256                               l2378 0FC2  
                             l2570 222C                               l3266 13D6  
                             l3258 13AC                               l2484 1282  
                             l2492 12AC                               l2476 1260  
                             l2396 1064                               l2388 1000  
                             l3196 1B76                               l2548 1CC2  
                             l2580 2620                               l2734 1816  
                             l2726 17FE                               l2662 1B62  
                             l2654 1B4A                               l2494 12B4  
                             l2486 128A                               l2742 21A2  
                             l3294 147C                               l2584 2642  
                             l2658 1B56                               l3298 1490  
                             l2684 1778                               l2780 1EC2  
                             l2940 239A                               l2932 2358  
                             l2748 21D2                               l2854 226A  
                             l2694 17A8                               l2678 173E  
                             l2782 1ECC                               l2774 1EAC  
                             l2598 27C4                               l2880 1F1A  
                             l2688 178C                               l2792 1EF2  
                             l2784 1ED4                               l2768 1E9A  
                             l2936 2384                               l2954 22E8  
                             l2938 238A                               l2796 1EFE  
                             l2964 2314                               l2982 1FD6  
                             l2958 22FC                               l2978 1FCE  
                             l2996 1FFA                               l2988 1FE6  
                             STR_1 0F6F                               STR_2 0F6F  
                             STR_3 0F85                               STR_4 0F87  
                             STR_5 0F89                               STR_6 0F8B  
                             STR_7 0F85                               STR_8 0F83  
                             STR_9 0F8D                    _guardar_comando 21FA  
                             u1510 20AA                               u3017 1496  
                             u1530 20C2                               u3027 1516  
                             u3037 1A56                               u1550 20DC  
                             u3047 1C3A                               u1528 20AC  
                             u3057 27C6                               u1570 20F8  
                             u1730 10CA                               u3067 27D8  
                             u1548 20C4                               u2518 1E4A  
                             u1568 20DE                               u1737 10C0  
                             u1770 113E                               u2458 1DF8  
                             u1588 20FA                               u2708 19FE  
                             u1960 248E                               u2488 1E20  
                             u2920 1474                               u1777 1134  
                             u1970 24B8                               u2850 1BEE  
                             u1967 2484                               u1977 24AE  
                             u2980 153A                               u2990 153C  
                 ?_lcd_send_nibble 0001                        main@limpiar 0044  
                             _anio 0059                               _flag 02F8  
                             _atoi 1C66                               _main 1386  
                             _hora 00C3                               _year 00B4  
                             fsr0h 000FEA                               indf0 000FEF  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                      __CFG_T1DIG$ON 000000  
                             prodh 000FF4                               prodl 000FF3  
                             start 0000                      __CFG_IESO$OFF 000000  
                 RtccReadDate@rTD0 000B                   RtccReadDate@rTD1 0003  
                     ___param_bank 000010                    RtccReadTime@pTm 0001  
             __size_of_cambiar_dia 0072                  _inicializar_fecha 2676  
                      _Delay1KTCYx 27C2                      __CFG_PLLDIV$1 000000  
                            ?_atoi 0007                              ?_main 0001  
                  __end_of___awdiv 1F1A                 ?_inicializar_fecha 0001  
                            STR_10 0F80                              STR_11 0F6F  
                            STR_12 0F5F                              STR_20 0F31  
                            STR_21 0F78                              STR_13 0F20  
                            STR_22 0F3E                              STR_14 0F0F  
                            STR_23 0F68                              STR_15 0F4B  
                            STR_16 0F6F                              STR_17 0F7C  
                            STR_18 0F56                              STR_19 0F74  
            __size_of_Delay100TCYx 0012                   _guardar_elemento 2114  
                  ___awdiv@divisor 0003                    __end_of___lwdiv 246C  
                  __end_of___lwmod 250C                  _restaurar_comando 273A  
                 ?_validar_comando 0001                    ___awdiv@counter 0005  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                      ?_leer_teclado 0038  
               ?_restaurar_comando 0001                     __CFG_FCMEN$OFF 000000  
                            _Setup 25A2                ??_inicializar_fecha 002C  
                   _ocultar_teclas 0090                              _clear 22D8  
                  __end_of_dpowers 0F0B                              _mes_d 00CE  
                            _mes_u 00CF                    __end_of_isdigit 27A4  
                            _month 00B1                              atoi@a 000C  
                            atoi@s 0007                              main@i 0046  
                   __pbitbssCOMRAM 02F8                              pclath 000FFA  
                            tablat 000FF5                  ??_convertir_a_int 0012  
              ??_restaurar_comando 0001                       lcd_putrs@ptr 0009  
                            status 000FD8                    __end_of_sprintf 1386  
                validar_password@i 0003            __CFG_DSWDTOSC$INTOSCREF 000000  
                  __initialization 23AC                       _Delay100TCYx 27D4  
        __end_of_inicializar_fecha 26B4                       __end_of_atoi 1D3A  
                     __end_of_main 1552                    ??_lcd_send_byte 0004  
                 RtccReadTime@rTD0 000B                   RtccReadTime@rTD1 0003  
                 __end_of_Read_RTC 1944           _guardar_current_password 2630  
        __size_of_ingresar_comando 000A          __end_of_restaurar_comando 275E  
                           ??_atoi 0009                             ??_main 003F  
                    __activetblptr 000002                     ??_leer_teclado 003C  
          __end_of_guardar_comando 226A                   __end_of_RtccWrOn 27F8  
                           ?_Setup 0001                             ?_clear 000B  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _EECON2 000FA7                             _ANCON0 000F48  
                           _ANCON1 000F49                   ___awdiv@dividend 0001  
    __size_of_inicializar_elemento 004A                     __CFG_WDTEN$OFF 000000  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                   __CFG_WPCFG$OFF 000000                   __end_of_caratula 1DE8  
                   __CFG_WPDIS$OFF 000000                     __CFG_XINST$OFF 000000  
                 __end_of_lcd_init 2028                   __end_of_lcd_putc 2558  
                ?_validar_password 0001                             ___wmul 2712  
                        ??___awdiv 0005                     __CFG_STVREN$ON 000000  
                           _diasem 00C1                             _anio_d 00C7  
                           _anio_u 00C8                          ??___lwdiv 0005  
                        ??___lwmod 000C                 ??_validar_password 0001  
                           _hora_d 00CC                             _hora_u 00CD  
                           clear@i 001D                             clear_0 23B2  
                           clear_1 23C0                   ___awdiv@quotient 0007  
                           _minuto 00C5   __end_of_mostrar_guardar_password 2712  
            __end_of_RtccWriteDate 1822              __end_of_RtccWriteTime 1B6E  
                 RtccWriteTime@pTm 0001           _guardar_tecla_presionada 1DE8  
                     __pdataCOMRAM 0059                          ??_isdigit 0001  
                 ??_imprimir_tecla 0028                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_sprintf 0017  
                       __accesstop 0060            __end_of__initialization 2406  
               __size_of_Write_RTC 018A                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001                      __end_of_Setup 25EA  
       __size_of_inicializar_fecha 003E                       __pidataBANK0 27F8  
                    __end_of_clear 2344                    __CFG_DSWDTPS$G2 000000  
       __size_of_restaurar_comando 0024                   leer_teclado@doit 003A  
              leer_teclado@ocultar 0038                    __CFG_OSC$INTOSC 000000  
                 ?_guardar_comando 0001                            ??_Setup 000E  
                lcd_gotoxy@address 0007                            ??_clear 000D  
               __size_of_lcd_putrs 0054                       sprintf@width 0026  
                       __pbssBANK0 0060                          ?_Read_RTC 0001  
                  _tamanio_comando 0096                         _dia_semana 00C9  
        RtccWriteTime@tempHourWDay 000A           __end_of_guardar_elemento 2188  
             __end_of_leer_teclado 1A62                          ?_RtccWrOn 0001  
                   lcd_send_byte@n 0003                            ?___wmul 0001  
                    ?_RtccReadDate 0001                      ?_RtccReadTime 0001  
                 _ingresar_comando 2816                       ?_Delay1KTCYx 0001  
                __end_of_Write_RTC 16DC                    _convertir_a_int 27A4  
                       _lcd_comand 2808                          ?_caratula 0028  
                       _lcd_gotoxy 275E                            _RTCVALH 000F99  
                          _RTCVALL 000F98                          ?_lcd_init 0001  
                        ?_lcd_putc 0001                         ??_Read_RTC 0013  
__size_of_mostrar_guardar_password 002C          ?_mostrar_guardar_password 0001  
       ??_guardar_current_password 0001                            __Hparam 0000  
                    ??_cambiar_dia 002F                            __Lparam 0000  
         __size_of_lcd_send_nibble 0076                         ??_RtccWrOn 0001  
             guardar_comando@tecla 002A                     ??_RtccReadDate 0003  
                       _autorizado 0084                     ??_RtccReadTime 0003  
                          ___awdiv 1E84                  __end_of_lcd_putrs 24C0  
                  __size_of___wmul 0028                            ___lwdiv 2410  
                          ___lwmod 24C0                       __psmallconst 0F00  
                      _RtccTimeVal 007E                            __pcinit 23AC  
                          _fecha_d 00CA                            _fecha_u 00CB  
                          __ramtop 0F00      mostrar_guardar_password@tecla 0029  
                          __ptext0 1386                            __ptext1 2028  
                          __ptext2 273A                            __ptext3 1944  
                          __ptext4 1DE8                            __ptext5 2816  
                          __ptext6 2188                            __ptext7 26E6  
                          __ptext8 25EA                            __ptext9 2630  
                          _buffer2 009A                            _comando 00BD  
                        _T1CONbits 000FCD                            _dpowers 0F01  
                          _isdigit 2782                     main@validacion 004A  
                       ??_caratula 002A                         clear@clear 000D  
                          _segundo 0092                            _sprintf 0F90  
                       ??_lcd_init 0005                         ??_lcd_putc 0008  
             end_of_initialization 2406           __size_of_validar_comando 0076  
             lcd_send_byte@address 0004                      __Lmediumconst 0000  
     __end_of_inicializar_elemento 25A2                            postdec1 000FE5  
                          postdec2 000FDD         ??_guardar_tecla_presionada 0038  
                          postinc0 000FEE                            postinc1 000FE6  
                          postinc2 000FDE            __end_of_convertir_a_int 27C2  
            __end_of_lcd_send_byte 26E6                __end_of_cambiar_dia 21FA  
                        _PORTAbits 000F80                          _PORTCbits 000F82  
                 __CFG_DSBOREN$OFF 000000                        ?_lcd_comand 0001  
                 __CFG_CPUDIV$OSC1 000000                 ingresar_password@i 001E  
                        _TRISBbits 000F93                        ?_lcd_gotoxy 0005  
        __size_of_validar_password 0068                         main@i_1044 0048  
                  _LCD_INIT_STRING 0F0B                main@puntero_funcion 0040  
             convertir_a_int@array 000E                   validar_comando@i 0008  
             convertir_a_int@valor 0010              __size_of_leer_teclado 011E  
                 _current_password 0078                   __CFG_IOL1WAY$OFF 000000  
        RtccWriteDate@tempDayMonth 000A                __CFG_MSSP7B_EN$MSK7 000000  
                    leer_teclado@i 003D                   Delay100TCYx@unit 0001  
                   __end_of___wmul 273A                      __pidataCOMRAM 2820  
        RtccWriteDate@tempHourWDay 000C                  ??_lcd_send_nibble 0001  
             __size_of_Delay1KTCYx 0012                   __CFG_DSWDTEN$OFF 000000  
                 cambiar_dia@tecla 002F                   cambiar_dia@valor 0030  
              start_initialization 23AC                 main@ocultar_teclas 0042  
                     _leer_teclado 1944               __end_of_RtccReadDate 1FA8  
             __end_of_RtccReadTime 22D8           __end_of_ingresar_comando 2820  
             RtccWriteTime@wasAlrm 0006               RtccWriteTime@wasWrEn 0007  
 __end_of_guardar_current_password 2676      guardar_current_password@valor 0003  
           __size_of_RtccWriteDate 0146                    RtccWriteDate@di 0003  
                ?_guardar_elemento 0028             __size_of_RtccWriteTime 010C  
                __size_of_Read_RTC 0122                  ??_validar_comando 0005  
                      _cambiar_dia 2188                __size_of_lcd_comand 000E  
               ??_guardar_elemento 002C                __size_of_lcd_gotoxy 0024  
                         ??___wmul 0005                   ?_convertir_a_int 000E  
                      __pdataBANK0 00B7                  __size_of_RtccWrOn 0012  
                  RtccWriteTime@di 0003                   __CFG_LPT1OSC$OFF 000000  
                      _ALRMCFGbits 000F91            __end_of_LCD_INIT_STRING 0F0F  
                      __pbssCOMRAM 004C                          _Write_RTC 1552  
                     _isdigit$2159 0002                  __size_of_caratula 00AE  
             _inicializar_elemento 2558                    Delay1KTCYx@unit 0001  
         __size_of_guardar_comando 0070                  __size_of_lcd_init 0080  
                      sprintf@flag 0024                  __size_of_lcd_putc 004C  
                      sprintf@prec 001B            __size_of_imprimir_tecla 0046  
                        __pnvBANK0 00C7                   _tamanio_password 004C  
                 ___lwdiv@dividend 0001                      ?_Delay100TCYx 0001  
 __end_of_guardar_tecla_presionada 1E84                           ?___awdiv 0001  
                         ?___lwdiv 0001                           ?___lwmod 0008  
          RtccWriteTime@tempMinSec 0008                          _lcd_putrs 246C  
                    _RtccWriteDate 16DC                        __smallconst 0F00  
                    _RtccWriteTime 1A62                           ?_isdigit 0001  
             __CFG_RTCOSC$T1OSCREF 000000                   _validar_password 2344  
                   __size_of_Setup 0048                         ?_Write_RTC 0001  
                 ___lwdiv@quotient 0005                     __size_of_clear 006C  
            ?_inicializar_elemento 0028                           ?_sprintf 000D  
                _ingresar_password 1B6E                   _RtccAlrmTimeDate 0060  
                   ___wmul@product 0005                           _LATAbits 000F89  
                         _LATBbits 000F8A                 ?_ingresar_password 0001  
                         _PIE3bits 000FA3                          _segundo_d 00D2  
                   ??_Delay100TCYx 0001                          _segundo_u 00D3  
                     clear@limpiar 000B                   __CFG_WDTPS$32768 000000  
              ??_ingresar_password 000B                 RtccWriteDate@wasOn 0005  
        guardar_tecla_presionada@i 0034           validar_comando@candidato 0001  
               _Rtcc_read_TimeDate 0070                     ?_RtccWriteDate 0001  
                       ?_lcd_putrs 0009                  ___wmul@multiplier 0001  
                   ?_RtccWriteTime 0001  __size_of_guardar_current_password 0046  
                   caratula@titulo 0028          ?_guardar_current_password 0001  
                        lcd_init@i 0005              __size_of_RtccReadDate 008E  
                     ??_lcd_comand 0005                          lcd_putc@c 0008  
            __size_of_RtccReadTime 006E                imprimir_tecla@tecla 0028  
                     ??_lcd_gotoxy 0006          __end_of_ingresar_password 1C66  
         _mostrar_guardar_password 26E6                          copy_data0 23DA  
                        copy_data1 23FA                           _Read_RTC 1822  
                     _tamanio_anio 0094                    _lcd_send_nibble 209E  
                         __Hrparam 0000                           _RtccDate 004F  
                         __Lrparam 0000                  ??_guardar_comando 0028  
                         _RtccTime 0053                           _RtccWrOn 27E6  
               __end_of_lcd_comand 2816              guardar_elemento@array 0028  
            guardar_elemento@tecla 002E      guardar_elemento@tamanio_array 002A  
               __end_of_lcd_gotoxy 2782      guardar_tecla_presionada@letra 0032  
                     _RtccReadDate 1F1A                   __size_of___awdiv 0096  
                     _RtccReadTime 226A                   __size_of___lwdiv 005C  
              ingresar_comando@key 002B                   __size_of___lwmod 004C  
                     _RtccTimeDate 0068                         sprintf@len 0020  
                       sprintf@val 0022                           _caratula 1D3A  
                 __size_of_isdigit 0022                    ___lwdiv@divisor 0003  
           ??_inicializar_elemento 002C                        ??_Write_RTC 000E  
                  ___lwdiv@counter 0007  __size_of_guardar_tecla_presionada 009C  
                         __ptext10 21FA                           __ptext11 2114  
                         __ptext20 2782                           __ptext12 27A4  
                         __ptext21 2712                           __ptext13 1C66  
                         __ptext30 27C2                           __ptext22 24C0  
                         __ptext14 2676                           __ptext31 2808  
                         __ptext23 2410                           __ptext15 2558  
                         __ptext40 1822                           __ptext32 26B4  
                         __ptext24 22D8                           __ptext16 1B6E  
                         __ptext41 226A                           __ptext33 209E  
                         __ptext25 246C                           __ptext17 2344  
                         __ptext42 1F1A                           __ptext34 27D4  
                         __ptext26 250C                           __ptext18 1D3A  
                         __ptext43 0000                           __ptext35 1552  
                         __ptext27 275E                           __ptext19 0F90  
                         __ptext36 1E84                           __ptext28 25A2  
                         __ptext37 1A62                           __ptext29 1FA8  
                         __ptext38 16DC                           __ptext39 27E6  
        ?_guardar_tecla_presionada 0032                    _validar_comando 2028  
          inicializar_elemento@val 002A                           _lcd_init 1FA8  
                         _lcd_putc 250C                   __size_of_sprintf 03F6  
                ?_ingresar_comando 0001             __size_of_lcd_send_byte 0032  
                   _imprimir_tecla 25EA                      __size_of_atoi 00D4  
                    __size_of_main 01CC                 ??_ingresar_comando 002B  
                         _minuto_d 00D0                           _minuto_u 00D1  
                         _password 00B7                       ?_cambiar_dia 0001  
                         atoi@sign 000B                      ??_Delay1KTCYx 0001  
                  ??_RtccWriteDate 0004                    ??_RtccWriteTime 0004  
                      ??_lcd_putrs 000B          __size_of_guardar_elemento 0074  
                      _OSCTUNEbits 000F9B                         _INTCONbits 000FF2  
                      _tamanio_dia 0057                        _tamanio_mes 0098  
               RtccWriteTime@wasOn 0005               __end_of_Delay100TCYx 27E6  
                         isdigit@c 0003       guardar_tecla_presionada@doit 0036  
       __size_of_ingresar_password 00F8             __end_of_imprimir_tecla 2630  
                        sprintf@ap 001E                          sprintf@cp 001C  
          __end_of_lcd_send_nibble 2114                          sprintf@sp 000D  
                 ___lwmod@dividend 0008                         _OSCCONbits 000FD3  
         __end_of_validar_password 23AC              RtccWriteDate@tempYear 0007  
        inicializar_elemento@array 0028            ingresar_password@i_1013 001C  
                    _lcd_send_byte 26B4                         _RTCCFGbits 000F3F  
          __end_of_validar_comando 209E             validar_comando@validar 0003  
                         sprintf@c 0025                           sprintf@f 000F  
                  ___lwmod@divisor 000A                __end_of_Delay1KTCYx 27D4  
                  ___lwmod@counter 000C           __size_of_convertir_a_int 001E  
             RtccWriteDate@wasAlrm 0006               RtccWriteDate@wasWrEn 0009  
                  ?_imprimir_tecla 0001             ingresar_password@clear 000C  
            lcd_send_nibble@nibble 0002  
