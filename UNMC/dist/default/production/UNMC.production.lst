

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 27 19:29:19 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           	psect	idataCOMRAM
   107  00DBC4                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _anio
   111  00DBC4  000F               	dw	15
   112                           
   113                           ;initializer for _mes
   114  00DBC6  0009               	dw	9
   115                           
   116                           	psect	idataBANK0
   117  00DBD0                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _diasem
   121  00DBD0  0003               	dw	3
   122                           
   123                           ;initializer for _dia
   124  00DBD2  0008               	dw	8
   125                           
   126                           ;initializer for _hora
   127  00DBD4  0012               	dw	18
   128                           
   129                           ;initializer for _minuto
   130  00DBD6  001E               	dw	30
   131                           
   132                           	psect	mediumconst
   133  00FE8A                     __pmediumconst:
   134                           	opt stack 0
   135  00FE8A  00                 	db	0
   136  00FE8B                     _dpowers:
   137                           	opt stack 0
   138  00FE8B  0001               	dw	1
   139  00FE8D  000A               	dw	10
   140  00FE8F  0064               	dw	100
   141  00FE91  03E8               	dw	1000
   142  00FE93  2710               	dw	10000
   143  00FE95                     __end_of_dpowers:
   144                           	opt stack 0
   145  00FE95                     _LCD_INIT_STRING:
   146                           	opt stack 0
   147  00FE95  28                 	db	40
   148  00FE96  0C                 	db	12
   149  00FE97  01                 	db	1
   150  00FE98  06                 	db	6
   151  00FE99                     __end_of_LCD_INIT_STRING:
   152                           	opt stack 0
   153  00FE99                     STR_17:
   154                           
   155                           ; BSR set to: 15
   156  00FE99  50                 	db	80	;'P'
   157  00FE9A  61                 	db	97	;'a'
   158  00FE9B  73                 	db	115	;'s'
   159  00FE9C  73                 	db	115	;'s'
   160  00FE9D  77                 	db	119	;'w'
   161  00FE9E  6F                 	db	111	;'o'
   162  00FE9F  72                 	db	114	;'r'
   163  00FEA0  64                 	db	100	;'d'
   164  00FEA1  20                 	db	32
   165  00FEA2  61                 	db	97	;'a'
   166  00FEA3  63                 	db	99	;'c'
   167  00FEA4  74                 	db	116	;'t'
   168  00FEA5  75                 	db	117	;'u'
   169  00FEA6  61                 	db	97	;'a'
   170  00FEA7  6C                 	db	108	;'l'
   171  00FEA8  3A                 	db	58	;':'
   172  00FEA9  20                 	db	32
   173  00FEAA  20                 	db	32
   174  00FEAB  20                 	db	32
   175  00FEAC  20                 	db	32
   176  00FEAD  20                 	db	32
   177  00FEAE  20                 	db	32
   178  00FEAF  20                 	db	32
   179  00FEB0  20                 	db	32
   180  00FEB1  20                 	db	32
   181  00FEB2  20                 	db	32
   182  00FEB3  00                 	db	0
   183  00FEB4                     STR_5:
   184                           
   185                           ; BSR set to: 15
   186  00FEB4  20                 	db	32
   187  00FEB5  20                 	db	32
   188  00FEB6  20                 	db	32
   189  00FEB7  20                 	db	32
   190  00FEB8  20                 	db	32
   191  00FEB9  20                 	db	32
   192  00FEBA  20                 	db	32
   193  00FEBB  20                 	db	32
   194  00FEBC  20                 	db	32
   195  00FEBD  20                 	db	32
   196  00FEBE  20                 	db	32
   197  00FEBF  20                 	db	32
   198  00FEC0  20                 	db	32
   199  00FEC1  20                 	db	32
   200  00FEC2  20                 	db	32
   201  00FEC3  20                 	db	32
   202  00FEC4  20                 	db	32
   203  00FEC5  20                 	db	32
   204  00FEC6  20                 	db	32
   205  00FEC7  20                 	db	32
   206  00FEC8  20                 	db	32
   207  00FEC9  20                 	db	32
   208  00FECA  20                 	db	32
   209  00FECB  20                 	db	32
   210  00FECC  20                 	db	32
   211  00FECD  00                 	db	0
   212  00FECE                     STR_19:
   213                           
   214                           ; BSR set to: 15
   215  00FECE  43                 	db	67	;'C'
   216  00FECF  6F                 	db	111	;'o'
   217  00FED0  6E                 	db	110	;'n'
   218  00FED1  66                 	db	102	;'f'
   219  00FED2  69                 	db	105	;'i'
   220  00FED3  72                 	db	114	;'r'
   221  00FED4  6D                 	db	109	;'m'
   222  00FED5  65                 	db	101	;'e'
   223  00FED6  20                 	db	32
   224  00FED7  70                 	db	112	;'p'
   225  00FED8  61                 	db	97	;'a'
   226  00FED9  73                 	db	115	;'s'
   227  00FEDA  73                 	db	115	;'s'
   228  00FEDB  3A                 	db	58	;':'
   229  00FEDC  20                 	db	32
   230  00FEDD  20                 	db	32
   231  00FEDE  20                 	db	32
   232  00FEDF  20                 	db	32
   233  00FEE0  20                 	db	32
   234  00FEE1  20                 	db	32
   235  00FEE2  20                 	db	32
   236  00FEE3  20                 	db	32
   237  00FEE4  00                 	db	0
   238  00FEE5                     STR_15:
   239                           
   240                           ; BSR set to: 15
   241  00FEE5  49                 	db	73	;'I'
   242  00FEE6  6E                 	db	110	;'n'
   243  00FEE7  73                 	db	115	;'s'
   244  00FEE8  65                 	db	101	;'e'
   245  00FEE9  72                 	db	114	;'r'
   246  00FEEA  74                 	db	116	;'t'
   247  00FEEB  65                 	db	101	;'e'
   248  00FEEC  20                 	db	32
   249  00FEED  6D                 	db	109	;'m'
   250  00FEEE  69                 	db	105	;'i'
   251  00FEEF  6E                 	db	110	;'n'
   252  00FEF0  75                 	db	117	;'u'
   253  00FEF1  74                 	db	116	;'t'
   254  00FEF2  6F                 	db	111	;'o'
   255  00FEF3  73                 	db	115	;'s'
   256  00FEF4  3A                 	db	58	;':'
   257  00FEF5  20                 	db	32
   258  00FEF6  20                 	db	32
   259  00FEF7  20                 	db	32
   260  00FEF8  20                 	db	32
   261  00FEF9  20                 	db	32
   262  00FEFA  00                 	db	0
   263  00FEFB                     STR_18:
   264                           
   265                           ; BSR set to: 15
   266  00FEFB  4E                 	db	78	;'N'
   267  00FEFC  75                 	db	117	;'u'
   268  00FEFD  65                 	db	101	;'e'
   269  00FEFE  76                 	db	118	;'v'
   270  00FEFF  6F                 	db	111	;'o'
   271  00FF00  20                 	db	32
   272  00FF01  70                 	db	112	;'p'
   273  00FF02  61                 	db	97	;'a'
   274  00FF03  73                 	db	115	;'s'
   275  00FF04  73                 	db	115	;'s'
   276  00FF05  3A                 	db	58	;':'
   277  00FF06  20                 	db	32
   278  00FF07  20                 	db	32
   279  00FF08  20                 	db	32
   280  00FF09  20                 	db	32
   281  00FF0A  20                 	db	32
   282  00FF0B  20                 	db	32
   283  00FF0C  20                 	db	32
   284  00FF0D  20                 	db	32
   285  00FF0E  00                 	db	0
   286  00FF0F                     STR_16:
   287                           
   288                           ; BSR set to: 15
   289  00FF0F  49                 	db	73	;'I'
   290  00FF10  6E                 	db	110	;'n'
   291  00FF11  73                 	db	115	;'s'
   292  00FF12  65                 	db	101	;'e'
   293  00FF13  72                 	db	114	;'r'
   294  00FF14  74                 	db	116	;'t'
   295  00FF15  65                 	db	101	;'e'
   296  00FF16  20                 	db	32
   297  00FF17  68                 	db	104	;'h'
   298  00FF18  6F                 	db	111	;'o'
   299  00FF19  72                 	db	114	;'r'
   300  00FF1A  61                 	db	97	;'a'
   301  00FF1B  3A                 	db	58	;':'
   302  00FF1C  20                 	db	32
   303  00FF1D  20                 	db	32
   304  00FF1E  20                 	db	32
   305  00FF1F  20                 	db	32
   306  00FF20  20                 	db	32
   307  00FF21  00                 	db	0
   308  00FF22                     STR_12:
   309                           
   310                           ; BSR set to: 15
   311  00FF22  49                 	db	73	;'I'
   312  00FF23  6E                 	db	110	;'n'
   313  00FF24  73                 	db	115	;'s'
   314  00FF25  65                 	db	101	;'e'
   315  00FF26  72                 	db	114	;'r'
   316  00FF27  74                 	db	116	;'t'
   317  00FF28  65                 	db	101	;'e'
   318  00FF29  20                 	db	32
   319  00FF2A  61                 	db	97	;'a'
   320  00FF2B  6E                 	db	110	;'n'
   321  00FF2C  69                 	db	105	;'i'
   322  00FF2D  6F                 	db	111	;'o'
   323  00FF2E  3A                 	db	58	;':'
   324  00FF2F  20                 	db	32
   325  00FF30  20                 	db	32
   326  00FF31  20                 	db	32
   327  00FF32  20                 	db	32
   328  00FF33  20                 	db	32
   329  00FF34  00                 	db	0
   330  00FF35                     STR_32:
   331                           
   332                           ; BSR set to: 15
   333  00FF35  76                 	db	118	;'v'
   334  00FF36  61                 	db	97	;'a'
   335  00FF37  6C                 	db	108	;'l'
   336  00FF38  6F                 	db	111	;'o'
   337  00FF39  72                 	db	114	;'r'
   338  00FF3A  20                 	db	32
   339  00FF3B  3E                 	db	62	;'>'
   340  00FF3C  3D                 	db	61	;'='
   341  00FF3D  25                 	db	37
   342  00FF3E  64                 	db	100	;'d'
   343  00FF3F  20                 	db	32
   344  00FF40  79                 	db	121	;'y'
   345  00FF41  20                 	db	32
   346  00FF42  3C                 	db	60	;'<'
   347  00FF43  3D                 	db	61	;'='
   348  00FF44  25                 	db	37
   349  00FF45  64                 	db	100	;'d'
   350  00FF46  00                 	db	0
   351  00FF47                     STR_14:
   352                           
   353                           ; BSR set to: 15
   354  00FF47  49                 	db	73	;'I'
   355  00FF48  6E                 	db	110	;'n'
   356  00FF49  73                 	db	115	;'s'
   357  00FF4A  65                 	db	101	;'e'
   358  00FF4B  72                 	db	114	;'r'
   359  00FF4C  74                 	db	116	;'t'
   360  00FF4D  65                 	db	101	;'e'
   361  00FF4E  20                 	db	32
   362  00FF4F  64                 	db	100	;'d'
   363  00FF50  69                 	db	105	;'i'
   364  00FF51  61                 	db	97	;'a'
   365  00FF52  3A                 	db	58	;':'
   366  00FF53  20                 	db	32
   367  00FF54  20                 	db	32
   368  00FF55  20                 	db	32
   369  00FF56  20                 	db	32
   370  00FF57  20                 	db	32
   371  00FF58  00                 	db	0
   372  00FF59                     STR_13:
   373                           
   374                           ; BSR set to: 15
   375  00FF59  49                 	db	73	;'I'
   376  00FF5A  6E                 	db	110	;'n'
   377  00FF5B  73                 	db	115	;'s'
   378  00FF5C  65                 	db	101	;'e'
   379  00FF5D  72                 	db	114	;'r'
   380  00FF5E  74                 	db	116	;'t'
   381  00FF5F  65                 	db	101	;'e'
   382  00FF60  20                 	db	32
   383  00FF61  6D                 	db	109	;'m'
   384  00FF62  65                 	db	101	;'e'
   385  00FF63  73                 	db	115	;'s'
   386  00FF64  3A                 	db	58	;':'
   387  00FF65  20                 	db	32
   388  00FF66  20                 	db	32
   389  00FF67  20                 	db	32
   390  00FF68  20                 	db	32
   391  00FF69  20                 	db	32
   392  00FF6A  00                 	db	0
   393  00FF6B                     STR_21:
   394                           
   395                           ; BSR set to: 15
   396  00FF6B  23                 	db	35
   397  00FF6C  23                 	db	35
   398  00FF6D  23                 	db	35
   399  00FF6E  20                 	db	32
   400  00FF6F  41                 	db	65	;'A'
   401  00FF70  43                 	db	67	;'C'
   402  00FF71  54                 	db	84	;'T'
   403  00FF72  49                 	db	73	;'I'
   404  00FF73  56                 	db	86	;'V'
   405  00FF74  41                 	db	65	;'A'
   406  00FF75  44                 	db	68	;'D'
   407  00FF76  41                 	db	65	;'A'
   408  00FF77  20                 	db	32
   409  00FF78  23                 	db	35
   410  00FF79  23                 	db	35
   411  00FF7A  23                 	db	35
   412  00FF7B  00                 	db	0
   413  00FF7C                     STR_20:
   414                           
   415                           ; BSR set to: 15
   416  00FF7C  23                 	db	35
   417  00FF7D  23                 	db	35
   418  00FF7E  23                 	db	35
   419  00FF7F  23                 	db	35
   420  00FF80  20                 	db	32
   421  00FF81  41                 	db	65	;'A'
   422  00FF82  4C                 	db	76	;'L'
   423  00FF83  41                 	db	65	;'A'
   424  00FF84  52                 	db	82	;'R'
   425  00FF85  4D                 	db	77	;'M'
   426  00FF86  41                 	db	65	;'A'
   427  00FF87  20                 	db	32
   428  00FF88  23                 	db	35
   429  00FF89  23                 	db	35
   430  00FF8A  23                 	db	35
   431  00FF8B  23                 	db	35
   432  00FF8C  00                 	db	0
   433  00FF8D                     STR_6:
   434                           
   435                           ; BSR set to: 15
   436  00FF8D  49                 	db	73	;'I'
   437  00FF8E  6E                 	db	110	;'n'
   438  00FF8F  73                 	db	115	;'s'
   439  00FF90  65                 	db	101	;'e'
   440  00FF91  72                 	db	114	;'r'
   441  00FF92  74                 	db	116	;'t'
   442  00FF93  65                 	db	101	;'e'
   443  00FF94  20                 	db	32
   444  00FF95  70                 	db	112	;'p'
   445  00FF96  61                 	db	97	;'a'
   446  00FF97  73                 	db	115	;'s'
   447  00FF98  73                 	db	115	;'s'
   448  00FF99  77                 	db	119	;'w'
   449  00FF9A  6F                 	db	111	;'o'
   450  00FF9B  72                 	db	114	;'r'
   451  00FF9C  64                 	db	100	;'d'
   452  00FF9D  00                 	db	0
   453  00FF9E                     STR_1:
   454                           
   455                           ; BSR set to: 15
   456  00FF9E  25                 	db	37
   457  00FF9F  30                 	db	48	;'0'
   458  00FFA0  32                 	db	50	;'2'
   459  00FFA1  75                 	db	117	;'u'
   460  00FFA2  2F                 	db	47
   461  00FFA3  25                 	db	37
   462  00FFA4  30                 	db	48	;'0'
   463  00FFA5  32                 	db	50	;'2'
   464  00FFA6  75                 	db	117	;'u'
   465  00FFA7  2F                 	db	47
   466  00FFA8  25                 	db	37
   467  00FFA9  30                 	db	48	;'0'
   468  00FFAA  32                 	db	50	;'2'
   469  00FFAB  75                 	db	117	;'u'
   470  00FFAC  00                 	db	0
   471  00FFAD                     STR_2:
   472                           
   473                           ; BSR set to: 15
   474  00FFAD  25                 	db	37
   475  00FFAE  30                 	db	48	;'0'
   476  00FFAF  32                 	db	50	;'2'
   477  00FFB0  75                 	db	117	;'u'
   478  00FFB1  3A                 	db	58	;':'
   479  00FFB2  25                 	db	37
   480  00FFB3  30                 	db	48	;'0'
   481  00FFB4  32                 	db	50	;'2'
   482  00FFB5  75                 	db	117	;'u'
   483  00FFB6  3A                 	db	58	;':'
   484  00FFB7  25                 	db	37
   485  00FFB8  30                 	db	48	;'0'
   486  00FFB9  32                 	db	50	;'2'
   487  00FFBA  75                 	db	117	;'u'
   488  00FFBB  00                 	db	0
   489  00FFBC                     STR_22:
   490                           
   491                           ; BSR set to: 15
   492  00FFBC  50                 	db	80	;'P'
   493  00FFBD  61                 	db	97	;'a'
   494  00FFBE  72                 	db	114	;'r'
   495  00FFBF  61                 	db	97	;'a'
   496  00FFC0  20                 	db	32
   497  00FFC1  65                 	db	101	;'e'
   498  00FFC2  6E                 	db	110	;'n'
   499  00FFC3  63                 	db	99	;'c'
   500  00FFC4  65                 	db	101	;'e'
   501  00FFC5  6E                 	db	110	;'n'
   502  00FFC6  64                 	db	100	;'d'
   503  00FFC7  65                 	db	101	;'e'
   504  00FFC8  72                 	db	114	;'r'
   505  00FFC9  00                 	db	0
   506  00FFCA                     STR_23:
   507                           
   508                           ; BSR set to: 15
   509  00FFCA  50                 	db	80	;'P'
   510  00FFCB  72                 	db	114	;'r'
   511  00FFCC  65                 	db	101	;'e'
   512  00FFCD  73                 	db	115	;'s'
   513  00FFCE  69                 	db	105	;'i'
   514  00FFCF  6F                 	db	111	;'o'
   515  00FFD0  6E                 	db	110	;'n'
   516  00FFD1  65                 	db	101	;'e'
   517  00FFD2  20                 	db	32
   518  00FFD3  41                 	db	65	;'A'
   519  00FFD4  00                 	db	0
   520  00FFD5                     STR_7:
   521                           
   522                           ; BSR set to: 15
   523  00FFD5  45                 	db	69	;'E'
   524  00FFD6  52                 	db	82	;'R'
   525  00FFD7  52                 	db	82	;'R'
   526  00FFD8  4F                 	db	79	;'O'
   527  00FFD9  52                 	db	82	;'R'
   528  00FFDA  20                 	db	32
   529  00FFDB  70                 	db	112	;'p'
   530  00FFDC  61                 	db	97	;'a'
   531  00FFDD  73                 	db	115	;'s'
   532  00FFDE  73                 	db	115	;'s'
   533  00FFDF  00                 	db	0
   534  00FFE0                     STR_24:
   535                           
   536                           ; BSR set to: 15
   537  00FFE0  57                 	db	87	;'W'
   538  00FFE1  65                 	db	101	;'e'
   539  00FFE2  6C                 	db	108	;'l'
   540  00FFE3  63                 	db	99	;'c'
   541  00FFE4  6F                 	db	111	;'o'
   542  00FFE5  6D                 	db	109	;'m'
   543  00FFE6  65                 	db	101	;'e'
   544  00FFE7  20                 	db	32
   545  00FFE8  00                 	db	0
   546  00FFE9                     STR_8:
   547                           
   548                           ; BSR set to: 15
   549  00FFE9  25                 	db	37
   550  00FFEA  30                 	db	48	;'0'
   551  00FFEB  31                 	db	49	;'1'
   552  00FFEC  75                 	db	117	;'u'
   553  00FFED  00                 	db	0
   554  00FFEE                     STR_4:
   555                           
   556                           ; BSR set to: 15
   557  00FFEE  4F                 	db	79	;'O'
   558  00FFEF  46                 	db	70	;'F'
   559  00FFF0  46                 	db	70	;'F'
   560  00FFF1  00                 	db	0
   561  00FFF2                     STR_3:
   562                           
   563                           ; BSR set to: 15
   564  00FFF2  4F                 	db	79	;'O'
   565  00FFF3  4E                 	db	78	;'N'
   566  00FFF4  00                 	db	0
   567  00FFF5                     STR_28:
   568                           
   569                           ; BSR set to: 15
   570  00FFF5  2A                 	db	42
   571  00FFF6  00                 	db	0
   572  0000                     
   573                           ; #config settings
   574  00FFF7  00                 	db	0	; dummy byte at the end
   575  0000                     
   576                           	psect	nvCOMRAM
   577  00005E                     __pnvCOMRAM:
   578                           	opt stack 0
   579  00005E                     _segundo_d:
   580                           	opt stack 0
   581  00005E                     	ds	1
   582                           
   583                           	psect	nvBANK0
   584  0000EB                     __pnvBANK0:
   585                           	opt stack 0
   586  0000EB                     _anio_d:
   587                           	opt stack 0
   588  0000EB                     	ds	1
   589  0000EC                     _anio_u:
   590                           	opt stack 0
   591  0000EC                     	ds	1
   592  0000ED                     _dia_semana:
   593                           	opt stack 0
   594  0000ED                     	ds	1
   595  0000EE                     _fecha_d:
   596                           	opt stack 0
   597  0000EE                     	ds	1
   598  0000EF                     _fecha_u:
   599                           	opt stack 0
   600  0000EF                     	ds	1
   601  0000F0                     _hora_d:
   602                           	opt stack 0
   603  0000F0                     	ds	1
   604  0000F1                     _hora_u:
   605                           	opt stack 0
   606  0000F1                     	ds	1
   607  0000F2                     _mes_d:
   608                           	opt stack 0
   609  0000F2                     	ds	1
   610  0000F3                     _mes_u:
   611                           	opt stack 0
   612  0000F3                     	ds	1
   613  0000F4                     _minuto_d:
   614                           	opt stack 0
   615  0000F4                     	ds	1
   616  0000F5                     _minuto_u:
   617                           	opt stack 0
   618  0000F5                     	ds	1
   619  0000F6                     _segundo_u:
   620                           	opt stack 0
   621  0000F6                     	ds	1
   622  0000                     _ANCON0	set	3912
   623  0000                     _ANCON1	set	3913
   624  0000                     _RTCCFG	set	3903
   625  0000                     _RTCCFGbits	set	3903
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON1	set	4033
   628  0000                     _ALRMCFGbits	set	3985
   629  0000                     _EECON2	set	4007
   630  0000                     _INTCONbits	set	4082
   631  0000                     _LATAbits	set	3977
   632  0000                     _LATBbits	set	3978
   633  0000                     _LATCbits	set	3979
   634  0000                     _OSCCONbits	set	4051
   635  0000                     _OSCTUNEbits	set	3995
   636  0000                     _PIE3bits	set	4003
   637  0000                     _PORTAbits	set	3968
   638  0000                     _PORTCbits	set	3970
   639  0000                     _RTCVALH	set	3993
   640  0000                     _RTCVALL	set	3992
   641  0000                     _T1CONbits	set	4045
   642  0000                     _TRISA	set	3986
   643  0000                     _TRISB	set	3987
   644  0000                     _TRISBbits	set	3987
   645  0000                     _TRISC	set	3988
   646                           
   647                           	psect	cinit
   648  00E49A                     __pcinit:
   649                           	opt stack 0
   650  00E49A                     start_initialization:
   651                           	opt stack 0
   652  00E49A                     __initialization:
   653                           	opt stack 0
   654                           
   655                           ; Clear objects allocated to BANK1 (16 bytes)
   656  00E49A  EE01  F000         	lfsr	0,__pbssBANK1
   657  00E49E  0E10               	movlw	16
   658  00E4A0                     clear_0:
   659  00E4A0  6AEE               	clrf	postinc0,c
   660  00E4A2  06E8               	decf	wreg,f,c
   661  00E4A4  E1FD               	bnz	clear_0
   662                           
   663                           ; Clear objects allocated to BANK0 (139 bytes)
   664  00E4A6  EE00  F060         	lfsr	0,__pbssBANK0
   665  00E4AA  0E8B               	movlw	139
   666  00E4AC                     clear_1:
   667  00E4AC  6AEE               	clrf	postinc0,c
   668  00E4AE  06E8               	decf	wreg,f,c
   669  00E4B0  E1FD               	bnz	clear_1
   670                           
   671                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   672  00E4B2  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   673                           
   674                           ; Clear objects allocated to COMRAM (21 bytes)
   675  00E4B4  EE00  F045         	lfsr	0,__pbssCOMRAM
   676  00E4B8  0E15               	movlw	21
   677  00E4BA                     clear_2:
   678  00E4BA  6AEE               	clrf	postinc0,c
   679  00E4BC  06E8               	decf	wreg,f,c
   680  00E4BE  E1FD               	bnz	clear_2
   681                           
   682                           ; Initialize objects allocated to BANK0 (8 bytes)
   683                           ; load TBLPTR registers with __pidataBANK0
   684  00E4C0  0ED0               	movlw	low __pidataBANK0
   685  00E4C2  6EF6               	movwf	tblptrl,c
   686  00E4C4  0EDB               	movlw	high __pidataBANK0
   687  00E4C6  6EF7               	movwf	tblptrh,c
   688  00E4C8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   689  00E4CA  6EF8               	movwf	tblptru,c
   690  00E4CC  EE00  F0F7         	lfsr	0,__pdataBANK0
   691  00E4D0  EE10 F008          	lfsr	1,8
   692  00E4D4                     copy_data0:
   693  00E4D4  0009               	tblrd		*+
   694  00E4D6  CFF5 FFEE          	movff	tablat,postinc0
   695  00E4DA  50E5               	movf	postdec1,w,c
   696  00E4DC  50E1               	movf	fsr1l,w,c
   697  00E4DE  E1FA               	bnz	copy_data0
   698                           
   699                           ; Initialize objects allocated to COMRAM (4 bytes)
   700                           ; load TBLPTR registers with __pidataCOMRAM
   701  00E4E0  0EC4               	movlw	low __pidataCOMRAM
   702  00E4E2  6EF6               	movwf	tblptrl,c
   703  00E4E4  0EDB               	movlw	high __pidataCOMRAM
   704  00E4E6  6EF7               	movwf	tblptrh,c
   705  00E4E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   706  00E4EA  6EF8               	movwf	tblptru,c
   707  00E4EC  EE00  F05A         	lfsr	0,__pdataCOMRAM
   708  00E4F0  EE10 F004          	lfsr	1,4
   709  00E4F4                     copy_data1:
   710  00E4F4  0009               	tblrd		*+
   711  00E4F6  CFF5 FFEE          	movff	tablat,postinc0
   712  00E4FA  50E5               	movf	postdec1,w,c
   713  00E4FC  50E1               	movf	fsr1l,w,c
   714  00E4FE  E1FA               	bnz	copy_data1
   715  00E500                     end_of_initialization:
   716                           	opt stack 0
   717  00E500                     __end_of__initialization:
   718                           	opt stack 0
   719  00E500  0E00               	movlw	low (__Lmediumconst shr (0+16))
   720  00E502  6EF8               	movwf	tblptru,c
   721  00E504  0100               	movlb	0
   722  00E506  EF15  F07C         	goto	_main	;jump to C main() function
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	bitbssCOMRAM
   733  0002F8                     __pbitbssCOMRAM:
   734                           	opt stack 0
   735  0002F8                     _flag:
   736                           	opt stack 0
   737  0002F8                     	ds	1
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747                           	psect	bssCOMRAM
   748  000045                     __pbssCOMRAM:
   749                           	opt stack 0
   750  000045                     _autorizado:
   751                           	opt stack 0
   752  000045                     	ds	2
   753  000047                     _tamanio_comando:
   754                           	opt stack 0
   755  000047                     	ds	2
   756  000049                     _key:
   757                           	opt stack 0
   758  000049                     	ds	1
   759  00004A                     _RtccDate:
   760                           	opt stack 0
   761  00004A                     	ds	4
   762  00004E                     _RtccTime:
   763                           	opt stack 0
   764  00004E                     	ds	4
   765  000052                     _tamanio_dia:
   766                           	opt stack 0
   767  000052                     	ds	2
   768  000054                     _tamanio_hora:
   769                           	opt stack 0
   770  000054                     	ds	2
   771  000056                     _tamanio_mes:
   772                           	opt stack 0
   773  000056                     	ds	2
   774  000058                     _tamanio_password:
   775                           	opt stack 0
   776  000058                     	ds	2
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786                           	psect	dataCOMRAM
   787  00005A                     __pdataCOMRAM:
   788                           	opt stack 0
   789  00005A                     _anio:
   790                           	opt stack 0
   791  00005A                     	ds	2
   792  00005C                     _mes:
   793                           	opt stack 0
   794  00005C                     	ds	2
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           
   804                           	psect	bssBANK0
   805  000060                     __pbssBANK0:
   806                           	opt stack 0
   807  000060                     _RtccTimeDate:
   808                           	opt stack 0
   809  000060                     	ds	8
   810  000068                     _password:
   811                           	opt stack 0
   812  000068                     	ds	7
   813  00006F                     _RtccTimeVal:
   814                           	opt stack 0
   815  00006F                     	ds	4
   816  000073                     	ds	3
   817  000076                     	ds	3
   818  000079                     	ds	3
   819  00007C                     	ds	3
   820  00007F                     	ds	3
   821  000082                     _a:
   822                           	opt stack 0
   823  000082                     	ds	2
   824  000084                     _activada:
   825                           	opt stack 0
   826  000084                     	ds	2
   827  000086                     _b:
   828                           	opt stack 0
   829  000086                     	ds	2
   830  000088                     _c:
   831                           	opt stack 0
   832  000088                     	ds	2
   833  00008A                     _encendida:
   834                           	opt stack 0
   835  00008A                     	ds	2
   836  00008C                     _funcion_pulsador_A:
   837                           	opt stack 0
   838  00008C                     	ds	2
   839  00008E                     _funcion_pulsador_B:
   840                           	opt stack 0
   841  00008E                     	ds	2
   842  000090                     _funcion_pulsador_C:
   843                           	opt stack 0
   844  000090                     	ds	2
   845  000092                     _funcion_pulsador_D:
   846                           	opt stack 0
   847  000092                     	ds	2
   848  000094                     _i:
   849                           	opt stack 0
   850  000094                     	ds	2
   851  000096                     _intentos_fallidos:
   852                           	opt stack 0
   853  000096                     	ds	2
   854  000098                     _j:
   855                           	opt stack 0
   856  000098                     	ds	2
   857  00009A                     _k:
   858                           	opt stack 0
   859  00009A                     	ds	2
   860  00009C                     _ocultar_teclas:
   861                           	opt stack 0
   862  00009C                     	ds	2
   863  00009E                     _puntero_funcion:
   864                           	opt stack 0
   865  00009E                     	ds	2
   866  0000A0                     _segundo:
   867                           	opt stack 0
   868  0000A0                     	ds	2
   869  0000A2                     	ds	2
   870  0000A4                     	ds	2
   871  0000A6                     fecha@valor_max:
   872                           	opt stack 0
   873  0000A6                     	ds	2
   874  0000A8                     fecha@valor_min:
   875                           	opt stack 0
   876  0000A8                     	ds	2
   877  0000AA                     _buffer2:
   878                           	opt stack 0
   879  0000AA                     	ds	20
   880  0000BE                     _current_password:
   881                           	opt stack 0
   882  0000BE                     	ds	7
   883  0000C5                     _new_password:
   884                           	opt stack 0
   885  0000C5                     	ds	7
   886  0000CC                     _temporal:
   887                           	opt stack 0
   888  0000CC                     	ds	7
   889  0000D3                     _comando:
   890                           	opt stack 0
   891  0000D3                     	ds	3
   892  0000D6                     fecha@day:
   893                           	opt stack 0
   894  0000D6                     	ds	3
   895  0000D9                     fecha@hour:
   896                           	opt stack 0
   897  0000D9                     	ds	3
   898  0000DC                     fecha@minutes:
   899                           	opt stack 0
   900  0000DC                     	ds	3
   901  0000DF                     fecha@month:
   902                           	opt stack 0
   903  0000DF                     	ds	3
   904  0000E2                     fecha@year:
   905                           	opt stack 0
   906  0000E2                     	ds	3
   907  0000E5                     _tamanio_anio:
   908                           	opt stack 0
   909  0000E5                     	ds	2
   910  0000E7                     _tamanio_minutos:
   911                           	opt stack 0
   912  0000E7                     	ds	2
   913  0000E9                     _tamanio_new_password:
   914                           	opt stack 0
   915  0000E9                     	ds	2
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	dataBANK0
   926  0000F7                     __pdataBANK0:
   927                           	opt stack 0
   928  0000F7                     _diasem:
   929                           	opt stack 0
   930  0000F7                     	ds	2
   931  0000F9                     _dia:
   932                           	opt stack 0
   933  0000F9                     	ds	2
   934  0000FB                     _hora:
   935                           	opt stack 0
   936  0000FB                     	ds	2
   937  0000FD                     _minuto:
   938                           	opt stack 0
   939  0000FD                     	ds	2
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1l	equ	0xFE1
   948                           
   949                           	psect	bssBANK1
   950  000100                     __pbssBANK1:
   951                           	opt stack 0
   952  000100                     _RtccAlrmTimeDate:
   953                           	opt stack 0
   954  000100                     	ds	8
   955  000108                     _Rtcc_read_TimeDate:
   956                           	opt stack 0
   957  000108                     	ds	8
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           	psect	cstackCOMRAM
   968  000001                     __pcstackCOMRAM:
   969                           	opt stack 0
   970  000001                     ??_isdigit:
   971  000001                     ??_lcd_send_nibble:
   972  000001                     ?___wmul:
   973                           	opt stack 0
   974  000001                     ?___awdiv:
   975                           	opt stack 0
   976  000001                     ?___awmod:
   977                           	opt stack 0
   978  000001                     ?___lwdiv:
   979                           	opt stack 0
   980  000001                     Delay100TCYx@unit:
   981                           	opt stack 0
   982  000001                     Delay1KTCYx@unit:
   983                           	opt stack 0
   984  000001                     guardar_elemento_arreglo@arreglo:
   985                           	opt stack 0
   986  000001                     verficar_password@verifica:
   987                           	opt stack 0
   988  000001                     RtccReadDate@pDt:
   989                           	opt stack 0
   990  000001                     RtccReadTime@pTm:
   991                           	opt stack 0
   992  000001                     RtccWriteDate@pDt:
   993                           	opt stack 0
   994  000001                     RtccWriteTime@pTm:
   995                           	opt stack 0
   996  000001                     ___wmul@multiplier:
   997                           	opt stack 0
   998  000001                     ___awdiv@dividend:
   999                           	opt stack 0
  1000  000001                     ___awmod@dividend:
  1001                           	opt stack 0
  1002  000001                     ___lwdiv@dividend:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x0
  1006  000001                     	ds	1
  1007  000002                     lcd_send_nibble@nibble:
  1008                           	opt stack 0
  1009  000002                     _isdigit$2694:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x1
  1013  000002                     	ds	1
  1014  000003                     lcd_send_byte@n:
  1015                           	opt stack 0
  1016  000003                     guardar_elemento_arreglo@valor:
  1017                           	opt stack 0
  1018  000003                     RtccWriteDate@di:
  1019                           	opt stack 0
  1020  000003                     RtccWriteTime@di:
  1021                           	opt stack 0
  1022  000003                     isdigit@c:
  1023                           	opt stack 0
  1024  000003                     validar_password@i:
  1025                           	opt stack 0
  1026  000003                     ___wmul@multiplicand:
  1027                           	opt stack 0
  1028  000003                     ___awdiv@divisor:
  1029                           	opt stack 0
  1030  000003                     ___awmod@divisor:
  1031                           	opt stack 0
  1032  000003                     ___lwdiv@divisor:
  1033                           	opt stack 0
  1034  000003                     RtccReadDate@rTD1:
  1035                           	opt stack 0
  1036  000003                     RtccReadTime@rTD1:
  1037                           	opt stack 0
  1038                           
  1039                           ; 8 bytes @ 0x2
  1040  000003                     	ds	1
  1041  000004                     lcd_send_byte@address:
  1042                           	opt stack 0
  1043  000004                     guardar_elemento_arreglo@tamanio:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x3
  1047  000004                     	ds	1
  1048  000005                     lcd_init@i:
  1049                           	opt stack 0
  1050  000005                     lcd_gotoxy@y:
  1051                           	opt stack 0
  1052  000005                     lcd_comand@d:
  1053                           	opt stack 0
  1054  000005                     RtccWriteDate@wasOn:
  1055                           	opt stack 0
  1056  000005                     RtccWriteTime@wasOn:
  1057                           	opt stack 0
  1058  000005                     ___awdiv@counter:
  1059                           	opt stack 0
  1060  000005                     ___awmod@counter:
  1061                           	opt stack 0
  1062  000005                     verficar_password@i:
  1063                           	opt stack 0
  1064  000005                     ___wmul@product:
  1065                           	opt stack 0
  1066  000005                     ___lwdiv@quotient:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x4
  1070  000005                     	ds	1
  1071  000006                     ??_guardar_elemento_arreglo:
  1072  000006                     lcd_gotoxy@x:
  1073                           	opt stack 0
  1074  000006                     RtccWriteDate@wasAlrm:
  1075                           	opt stack 0
  1076  000006                     RtccWriteTime@wasAlrm:
  1077                           	opt stack 0
  1078  000006                     ___awdiv@sign:
  1079                           	opt stack 0
  1080  000006                     ___awmod@sign:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x5
  1084  000006                     	ds	1
  1085  000007                     ??_obtener_dia_mes:
  1086  000007                     ?_atoi:
  1087                           	opt stack 0
  1088  000007                     lcd_gotoxy@address:
  1089                           	opt stack 0
  1090  000007                     RtccWriteTime@wasWrEn:
  1091                           	opt stack 0
  1092  000007                     ___lwdiv@counter:
  1093                           	opt stack 0
  1094  000007                     RtccWriteDate@tempYear:
  1095                           	opt stack 0
  1096  000007                     atoi@s:
  1097                           	opt stack 0
  1098  000007                     ___awdiv@quotient:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x6
  1102  000007                     	ds	1
  1103  000008                     ?___lwmod:
  1104                           	opt stack 0
  1105  000008                     lcd_putc@c:
  1106                           	opt stack 0
  1107  000008                     guardar_current_password@valor:
  1108                           	opt stack 0
  1109  000008                     guardar_password_temporal@valor:
  1110                           	opt stack 0
  1111  000008                     guardar_nuevo_password@valor:
  1112                           	opt stack 0
  1113  000008                     RtccWriteTime@tempMinSec:
  1114                           	opt stack 0
  1115  000008                     ___lwmod@dividend:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x7
  1119  000008                     	ds	1
  1120  000009                     ??_atoi:
  1121  000009                     RtccWriteDate@wasWrEn:
  1122                           	opt stack 0
  1123  000009                     lcd_putrs@ptr:
  1124                           	opt stack 0
  1125  000009                     confirmar_nuevo_password@confirmar:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x8
  1129  000009                     	ds	1
  1130  00000A                     RtccWriteDate@tempDayMonth:
  1131                           	opt stack 0
  1132  00000A                     RtccWriteTime@tempHourWDay:
  1133                           	opt stack 0
  1134  00000A                     ___lwmod@divisor:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x9
  1138  00000A                     	ds	1
  1139  00000B                     confirmar_nuevo_password@valor:
  1140                           	opt stack 0
  1141  00000B                     atoi@sign:
  1142                           	opt stack 0
  1143  00000B                     clear_display@pos:
  1144                           	opt stack 0
  1145  00000B                     mostrar_titulo_menu@titulo_menu:
  1146                           	opt stack 0
  1147  00000B                     RtccReadDate@rTD0:
  1148                           	opt stack 0
  1149  00000B                     RtccReadTime@rTD0:
  1150                           	opt stack 0
  1151                           
  1152                           ; 8 bytes @ 0xA
  1153  00000B                     	ds	1
  1154  00000C                     ___lwmod@counter:
  1155                           	opt stack 0
  1156  00000C                     RtccWriteDate@tempHourWDay:
  1157                           	opt stack 0
  1158  00000C                     atoi@a:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0xB
  1162  00000C                     	ds	1
  1163  00000D                     ??_menu_ingresar_password:
  1164  00000D                     ?_sprintf:
  1165                           	opt stack 0
  1166  00000D                     menu_cambiar_password@verifica:
  1167                           	opt stack 0
  1168  00000D                     sprintf@sp:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0xC
  1172  00000D                     	ds	1
  1173  00000E                     menu_ingresar_password@i:
  1174                           	opt stack 0
  1175  00000E                     convertir_a_int@array:
  1176                           	opt stack 0
  1177  00000E                     confirmar_nuevo_password@i:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0xD
  1181  00000E                     	ds	1
  1182  00000F                     sprintf@f:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0xE
  1186  00000F                     	ds	1
  1187  000010                     actualizar_password@valor:
  1188                           	opt stack 0
  1189  000010                     convertir_a_int@valor:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0xF
  1193  000010                     	ds	1
  1194  000011                     actualizar_password@confirmar:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x10
  1198  000011                     	ds	1
  1199  000012                     
  1200                           ; 0 bytes @ 0x11
  1201  000012                     	ds	1
  1202  000013                     actualizar_password@j:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x12
  1206  000013                     	ds	3
  1207  000016                     actualiza_elemento@elemento:
  1208                           	opt stack 0
  1209  000016                     actualiza_dia@elemento:
  1210                           	opt stack 0
  1211  000016                     actualizar_hora@elemento:
  1212                           	opt stack 0
  1213  000016                     actualizar_minutos@elemento:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x15
  1217  000016                     	ds	1
  1218  000017                     ??_sprintf:
  1219                           
  1220                           ; 0 bytes @ 0x16
  1221  000017                     	ds	1
  1222  000018                     actualiza_elemento@valor:
  1223                           	opt stack 0
  1224  000018                     actualiza_dia@valor:
  1225                           	opt stack 0
  1226  000018                     actualizar_hora@valor:
  1227                           	opt stack 0
  1228  000018                     actualizar_minutos@valor:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x17
  1232  000018                     	ds	2
  1233  00001A                     
  1234                           ; 0 bytes @ 0x19
  1235  00001A                     	ds	1
  1236  00001B                     sprintf@prec:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x1A
  1240  00001B                     	ds	1
  1241  00001C                     sprintf@ap:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x1B
  1245  00001C                     	ds	2
  1246  00001E                     sprintf@val:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x1D
  1250  00001E                     	ds	2
  1251  000020                     sprintf@flag:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1F
  1255  000020                     	ds	1
  1256  000021                     sprintf@width:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x20
  1260  000021                     	ds	2
  1261  000023                     sprintf@c:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x22
  1265  000023                     	ds	1
  1266  000024                     ??_guardar_comando:
  1267  000024                     caratula@titulo:
  1268                           	opt stack 0
  1269  000024                     guardar_elemento@array:
  1270                           	opt stack 0
  1271  000024                     imprimir_tecla@aux:
  1272                           	opt stack 0
  1273                           
  1274                           ; 20 bytes @ 0x23
  1275  000024                     	ds	2
  1276  000026                     _caratula$667:
  1277                           	opt stack 0
  1278  000026                     guardar_elemento@tamanio_array:
  1279                           	opt stack 0
  1280  000026                     guardar_comando@aux:
  1281                           	opt stack 0
  1282                           
  1283                           ; 20 bytes @ 0x25
  1284  000026                     	ds	2
  1285  000028                     guardar_elemento@validacion:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x27
  1289  000028                     	ds	2
  1290  00002A                     guardar_elemento@dato_fecha:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x29
  1294  00002A                     	ds	2
  1295  00002C                     guardar_elemento@doit:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x2B
  1299  00002C                     	ds	2
  1300  00002E                     ??_guardar_elemento:
  1301                           
  1302                           ; 0 bytes @ 0x2D
  1303  00002E                     	ds	2
  1304  000030                     guardar_elemento@tecla:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x2F
  1308  000030                     	ds	1
  1309  000031                     guardar_elemento@i:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x30
  1313  000031                     	ds	2
  1314  000033                     guardar_elemento@valor:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x32
  1318  000033                     	ds	2
  1319  000035                     cambiar_dia@validacion:
  1320                           	opt stack 0
  1321  000035                     cambiar_mes@validacion:
  1322                           	opt stack 0
  1323  000035                     cambiar_anio@validacion:
  1324                           	opt stack 0
  1325  000035                     cambiar_hora@validacion:
  1326                           	opt stack 0
  1327  000035                     cambiar_minutos@validacion:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x34
  1331  000035                     	ds	2
  1332  000037                     cambiar_dia@tecla:
  1333                           	opt stack 0
  1334  000037                     cambiar_mes@tecla:
  1335                           	opt stack 0
  1336  000037                     cambiar_anio@tecla:
  1337                           	opt stack 0
  1338  000037                     cambiar_hora@tecla:
  1339                           	opt stack 0
  1340  000037                     cambiar_minutos@tecla:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x36
  1344  000037                     	ds	1
  1345  000038                     imprimir_tecla@tecla:
  1346                           	opt stack 0
  1347  000038                     _cambiar_mes$1417:
  1348                           	opt stack 0
  1349  000038                     _cambiar_anio$1421:
  1350                           	opt stack 0
  1351  000038                     _cambiar_minutos$1440:
  1352                           	opt stack 0
  1353                           
  1354                           ; 1 bytes @ 0x37
  1355  000038                     	ds	1
  1356  000039                     mostrar_guardar_password@tecla:
  1357                           	opt stack 0
  1358  000039                     mostrar_guardar_temporal_password@tecla:
  1359                           	opt stack 0
  1360  000039                     mostrar_guardar_nuevo_password@tecla:
  1361                           	opt stack 0
  1362  000039                     confirmar_actualizar_password@tecla:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x38
  1366  000039                     	ds	1
  1367  00003A                     guardar_comando@tecla:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x39
  1371  00003A                     	ds	1
  1372  00003B                     ingresar_comando@key:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x3A
  1376  00003B                     	ds	1
  1377  00003C                     guardar_tecla_presionada@i:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x3B
  1381  00003C                     	ds	2
  1382  00003E                     leer_teclado@ocultar:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x3D
  1386  00003E                     	ds	2
  1387  000040                     ??_leer_teclado:
  1388                           
  1389                           ; 0 bytes @ 0x3F
  1390  000040                     	ds	1
  1391  000041                     leer_teclado@i:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x40
  1395  000041                     	ds	2
  1396  000043                     main@ocultar_teclas:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x42
  1400  000043                     	ds	2
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           postdec1	equ	0xFE5
  1408                           fsr1l	equ	0xFE1
  1409                           
  1410 ;;
  1411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1412 ;;
  1413 ;; *************** function _main *****************
  1414 ;; Defined at:
  1415 ;;		line 288 in file "main.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  ocultar_tecl    2   66[COMRAM] int 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2  310[None  ] int 
  1422 ;; Registers used:
  1423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;Total ram usage:        2 bytes
  1434 ;; Hardware stack levels required when called:   10
  1435 ;; This function calls:
  1436 ;;		_Read_RTC
  1437 ;;		_Setup
  1438 ;;		_activar_sonido_alarma
  1439 ;;		_atoi
  1440 ;;		_caratula
  1441 ;;		_desactivar_sonido_alarma
  1442 ;;		_inicializar_alarma
  1443 ;;		_inicializar_teclado
  1444 ;;		_lcd_gotoxy
  1445 ;;		_lcd_putrs
  1446 ;;		_leer_teclado
  1447 ;;		_mensaje_alarma_activada
  1448 ;;		_menu_cambiar_fecha
  1449 ;;		_menu_cambiar_horario
  1450 ;;		_menu_cambiar_password
  1451 ;; This function is called by:
  1452 ;;		Startup code after reset
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text0
  1457  00F82A                     __ptext0:
  1458                           	opt stack 0
  1459  00F82A                     _main:
  1460                           	opt stack 21
  1461                           
  1462                           ;main.c: 290: Setup();
  1463                           
  1464                           ; BSR set to: 15
  1465                           ;incstack = 0
  1466  00F82A  EC55  F070         	call	_Setup	;wreg free
  1467                           
  1468                           ;main.c: 291: inicializar_teclado();
  1469  00F82E  EC7C  F06F         	call	_inicializar_teclado	;wreg free
  1470                           
  1471                           ;main.c: 292: inicializar_alarma();
  1472  00F832  EC33  F073         	call	_inicializar_alarma	;wreg free
  1473                           
  1474                           ;main.c: 294: lcd_gotoxy(1,1);
  1475  00F836  0E01               	movlw	1
  1476  00F838  6E05               	movwf	lcd_gotoxy@y,c
  1477  00F83A  0E01               	movlw	1
  1478  00F83C  EC31  F06F         	call	_lcd_gotoxy
  1479                           
  1480                           ;main.c: 295: lcd_putrs("Para encender");
  1481  00F840  0EBC               	movlw	low STR_22
  1482  00F842  6E09               	movwf	lcd_putrs@ptr,c
  1483  00F844  0EFF               	movlw	high STR_22
  1484  00F846  6E0A               	movwf	lcd_putrs@ptr+1,c
  1485  00F848  ECC5  F070         	call	_lcd_putrs	;wreg free
  1486                           
  1487                           ;main.c: 296: lcd_gotoxy(1,2);
  1488  00F84C  0E02               	movlw	2
  1489  00F84E  6E05               	movwf	lcd_gotoxy@y,c
  1490  00F850  0E01               	movlw	1
  1491  00F852  EC31  F06F         	call	_lcd_gotoxy
  1492                           
  1493                           ;main.c: 297: lcd_putrs("Presione A");
  1494  00F856  0ECA               	movlw	low STR_23
  1495  00F858  6E09               	movwf	lcd_putrs@ptr,c
  1496  00F85A  0EFF               	movlw	high STR_23
  1497  00F85C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1498  00F85E  ECC5  F070         	call	_lcd_putrs	;wreg free
  1499                           
  1500                           ;main.c: 299: funcion_pulsador_A = accionar_alarma;
  1501  00F862  0E54               	movlw	low _accionar_alarma
  1502  00F864  0100               	movlb	0	; () banked
  1503  00F866  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1504  00F868  0EE3               	movlw	high _accionar_alarma
  1505  00F86A  0100               	movlb	0	; () banked
  1506  00F86C  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 300: int ocultar_teclas = 1;;
  1510  00F86E  0E00               	movlw	0
  1511  00F870  6E44               	movwf	main@ocultar_teclas+1,c
  1512  00F872  0E01               	movlw	1
  1513  00F874  6E43               	movwf	main@ocultar_teclas,c
  1514  00F876  D000               	goto	l4341
  1515  00F878                     l4341:
  1516                           
  1517                           ;main.c: 303: {
  1518                           ;main.c: 304: Read_RTC();
  1519  00F878  EC67  F079         	call	_Read_RTC	;wreg free
  1520                           
  1521                           ;main.c: 306: if (intentos_fallidos > 2){
  1522  00F87C  0100               	movlb	0	; () banked
  1523  00F87E  BF97               	btfsc	(_intentos_fallidos+1)& (0+255),7,b
  1524  00F880  D01C               	goto	l4353
  1525  00F882  0100               	movlb	0	; () banked
  1526  00F884  5197               	movf	(_intentos_fallidos+1)& (0+255),w,b
  1527  00F886  E105               	bnz	u3740
  1528  00F888  0E03               	movlw	3
  1529  00F88A  0100               	movlb	0	; () banked
  1530  00F88C  5D96               	subwf	_intentos_fallidos& (0+255),w,b
  1531  00F88E  A0D8               	btfss	status,0,c
  1532  00F890  D014               	goto	l4353
  1533  00F892                     u3740:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 307: activada = 1;
  1537  00F892  0E00               	movlw	0
  1538  00F894  0100               	movlb	0	; () banked
  1539  00F896  6F85               	movwf	(_activada+1)& (0+255),b
  1540  00F898  0E01               	movlw	1
  1541  00F89A  6F84               	movwf	_activada& (0+255),b
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 308: mensaje_alarma_activada();
  1545  00F89C  ECEA  F06F         	call	_mensaje_alarma_activada	;wreg free
  1546                           
  1547                           ;main.c: 309: funcion_pulsador_A = ingresar_comando;
  1548  00F8A0  0EEC               	movlw	low _ingresar_comando
  1549  00F8A2  0100               	movlb	0	; () banked
  1550  00F8A4  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1551  00F8A6  0EDB               	movlw	high _ingresar_comando
  1552  00F8A8  0100               	movlb	0	; () banked
  1553  00F8AA  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 310: funcion_pulsador_B = desactivar_alarma;
  1557  00F8AC  0EAA               	movlw	low _desactivar_alarma
  1558  00F8AE  0100               	movlb	0	; () banked
  1559  00F8B0  6F8E               	movwf	_funcion_pulsador_B& (0+255),b
  1560  00F8B2  0EDE               	movlw	high _desactivar_alarma
  1561  00F8B4  0100               	movlb	0	; () banked
  1562  00F8B6  6F8F               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  1563  00F8B8  D000               	goto	l4353
  1564  00F8BA                     l4353:
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 311: }
  1568                           ;main.c: 313: if (activada)
  1569  00F8BA  0100               	movlb	0	; () banked
  1570  00F8BC  5184               	movf	_activada& (0+255),w,b
  1571  00F8BE  0100               	movlb	0	; () banked
  1572  00F8C0  1185               	iorwf	(_activada+1)& (0+255),w,b
  1573  00F8C2  B4D8               	btfsc	status,2,c
  1574  00F8C4  D003               	goto	l4357
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 314: activar_sonido_alarma();
  1578  00F8C6  ECE4  F06D         	call	_activar_sonido_alarma	;wreg free
  1579  00F8CA  D000               	goto	l4357
  1580  00F8CC                     l4357:
  1581                           
  1582                           ;main.c: 315: if (autorizado)
  1583  00F8CC  5045               	movf	_autorizado,w,c
  1584  00F8CE  1046               	iorwf	_autorizado+1,w,c
  1585  00F8D0  B4D8               	btfsc	status,2,c
  1586  00F8D2  D003               	goto	l4361
  1587                           
  1588                           ;main.c: 316: desactivar_sonido_alarma();
  1589  00F8D4  EC66  F06E         	call	_desactivar_sonido_alarma	;wreg free
  1590  00F8D8  D000               	goto	l4361
  1591  00F8DA                     l4361:
  1592                           
  1593                           ;main.c: 318: if (autorizado && !encendida){
  1594  00F8DA  5045               	movf	_autorizado,w,c
  1595  00F8DC  1046               	iorwf	_autorizado+1,w,c
  1596  00F8DE  B4D8               	btfsc	status,2,c
  1597  00F8E0  D019               	goto	l4371
  1598  00F8E2  0100               	movlb	0	; () banked
  1599  00F8E4  518A               	movf	_encendida& (0+255),w,b
  1600  00F8E6  0100               	movlb	0	; () banked
  1601  00F8E8  118B               	iorwf	(_encendida+1)& (0+255),w,b
  1602  00F8EA  A4D8               	btfss	status,2,c
  1603  00F8EC  D013               	goto	l4371
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 319: caratula("Welcome ");
  1607  00F8EE  0EE0               	movlw	low STR_24
  1608  00F8F0  6E24               	movwf	caratula@titulo,c
  1609  00F8F2  0EFF               	movlw	high STR_24
  1610  00F8F4  6E25               	movwf	caratula@titulo+1,c
  1611  00F8F6  EC18  F077         	call	_caratula	;wreg free
  1612                           
  1613                           ;main.c: 320: puntero_funcion = &ingresar_comando;
  1614  00F8FA  0EEC               	movlw	low _ingresar_comando
  1615  00F8FC  0100               	movlb	0	; () banked
  1616  00F8FE  6F9E               	movwf	_puntero_funcion& (0+255),b
  1617  00F900  0EDB               	movlw	high _ingresar_comando
  1618  00F902  0100               	movlb	0	; () banked
  1619  00F904  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 321: funcion_pulsador_A = accionar_alarma;
  1623  00F906  0E54               	movlw	low _accionar_alarma
  1624  00F908  0100               	movlb	0	; () banked
  1625  00F90A  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1626  00F90C  0EE3               	movlw	high _accionar_alarma
  1627  00F90E  0100               	movlb	0	; () banked
  1628  00F910  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1629  00F912  D000               	goto	l4371
  1630  00F914                     l4371:
  1631                           
  1632                           ;main.c: 322: }
  1633                           ;main.c: 324: if (autorizado && encendida){
  1634  00F914  5045               	movf	_autorizado,w,c
  1635  00F916  1046               	iorwf	_autorizado+1,w,c
  1636  00F918  B4D8               	btfsc	status,2,c
  1637  00F91A  D052               	goto	l4395
  1638  00F91C  0100               	movlb	0	; () banked
  1639  00F91E  518A               	movf	_encendida& (0+255),w,b
  1640  00F920  0100               	movlb	0	; () banked
  1641  00F922  118B               	iorwf	(_encendida+1)& (0+255),w,b
  1642  00F924  B4D8               	btfsc	status,2,c
  1643  00F926  D04C               	goto	l4395
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 325: LATBbits.LATB1 = !LATBbits.LATB1;;
  1647  00F928  728A               	btg	3978,1,c	;volatile
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 327: puntero_funcion = &ingresar_comando;
  1651  00F92A  0EEC               	movlw	low _ingresar_comando
  1652  00F92C  0100               	movlb	0	; () banked
  1653  00F92E  6F9E               	movwf	_puntero_funcion& (0+255),b
  1654  00F930  0EDB               	movlw	high _ingresar_comando
  1655  00F932  0100               	movlb	0	; () banked
  1656  00F934  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1657                           
  1658                           ;main.c: 328: funcion_pulsador_A = accionar_alarma;
  1659  00F936  0E54               	movlw	low _accionar_alarma
  1660  00F938  0100               	movlb	0	; () banked
  1661  00F93A  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1662  00F93C  0EE3               	movlw	high _accionar_alarma
  1663  00F93E  0100               	movlb	0	; () banked
  1664  00F940  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1665                           
  1666                           ;main.c: 329: funcion_pulsador_C = restaurar_comando;
  1667  00F942  0E10               	movlw	low _restaurar_comando
  1668  00F944  0100               	movlb	0	; () banked
  1669  00F946  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  1670  00F948  0EDD               	movlw	high _restaurar_comando
  1671  00F94A  0100               	movlb	0	; () banked
  1672  00F94C  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1673                           
  1674                           ;main.c: 330: funcion_pulsador_D = restaurar_comando;
  1675  00F94E  0E10               	movlw	low _restaurar_comando
  1676  00F950  0100               	movlb	0	; () banked
  1677  00F952  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1678  00F954  0EDD               	movlw	high _restaurar_comando
  1679  00F956  0100               	movlb	0	; () banked
  1680  00F958  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1681                           
  1682                           ;main.c: 332: switch (atoi(comando))
  1683  00F95A  D01C               	goto	l4393
  1684  00F95C                     l4379:
  1685  00F95C  EC63  F078         	call	_menu_cambiar_password	;wreg free
  1686  00F960  D02F               	goto	l4395
  1687  00F962                     l4381:
  1688  00F962  EC83  F077         	call	_menu_cambiar_fecha	;wreg free
  1689  00F966  D02C               	goto	l4395
  1690  00F968                     l4383:
  1691  00F968  ECBD  F075         	call	_menu_cambiar_horario	;wreg free
  1692  00F96C  D029               	goto	l4395
  1693  00F96E                     l4385:
  1694  00F96E  0EE0               	movlw	low STR_24
  1695  00F970  6E24               	movwf	caratula@titulo,c
  1696  00F972  0EFF               	movlw	high STR_24
  1697  00F974  6E25               	movwf	caratula@titulo+1,c
  1698  00F976  EC18  F077         	call	_caratula	;wreg free
  1699                           
  1700                           ;main.c: 338: if (tamanio_comando >= 2)
  1701  00F97A  BE48               	btfsc	_tamanio_comando+1,7,c
  1702  00F97C  D021               	goto	l4395
  1703  00F97E  5048               	movf	_tamanio_comando+1,w,c
  1704  00F980  E104               	bnz	u3810
  1705  00F982  0E02               	movlw	2
  1706  00F984  5C47               	subwf	_tamanio_comando,w,c
  1707  00F986  A0D8               	btfss	status,0,c
  1708  00F988  D01B               	goto	l4395
  1709  00F98A                     u3810:
  1710                           
  1711                           ;main.c: 339: tamanio_comando = 0;
  1712  00F98A  0E00               	movlw	0
  1713  00F98C  6E48               	movwf	_tamanio_comando+1,c
  1714  00F98E  0E00               	movlw	0
  1715  00F990  6E47               	movwf	_tamanio_comando,c
  1716                           
  1717                           ;main.c: 341: }
  1718                           
  1719                           ;main.c: 340: break;
  1720  00F992  D016               	goto	l4395
  1721  00F994                     l4393:
  1722  00F994  0ED3               	movlw	low _comando
  1723  00F996  6E07               	movwf	atoi@s,c
  1724  00F998  0E00               	movlw	high _comando
  1725  00F99A  6E08               	movwf	atoi@s+1,c
  1726  00F99C  ECAE  F076         	call	_atoi	;wreg free
  1727                           
  1728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1729                           ; Switch size 1, requested type "space"
  1730                           ; Number of cases is 1, Range of values is 0 to 0
  1731                           ; switch strategies available:
  1732                           ; Name         Instructions Cycles
  1733                           ; simple_byte            4     3 (average)
  1734                           ;	Chosen strategy is simple_byte
  1735  00F9A0  5008               	movf	?_atoi+1,w,c
  1736  00F9A2  0A00               	xorlw	0	; case 0
  1737  00F9A4  A4D8               	btfss	status,2,c
  1738  00F9A6  D7E3               	goto	l4385
  1739                           
  1740                           ; Switch size 1, requested type "space"
  1741                           ; Number of cases is 3, Range of values is 10 to 12
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte           10     6 (average)
  1745                           ;	Chosen strategy is simple_byte
  1746  00F9A8  5007               	movf	?_atoi,w,c
  1747  00F9AA  0A0A               	xorlw	10	; case 10
  1748  00F9AC  B4D8               	btfsc	status,2,c
  1749  00F9AE  D7D6               	goto	l4379
  1750  00F9B0  0A01               	xorlw	1	; case 11
  1751  00F9B2  B4D8               	btfsc	status,2,c
  1752  00F9B4  D7D6               	goto	l4381
  1753  00F9B6  0A07               	xorlw	7	; case 12
  1754  00F9B8  B4D8               	btfsc	status,2,c
  1755  00F9BA  D7D6               	goto	l4383
  1756  00F9BC  D7D8               	goto	l4385
  1757  00F9BE  D000               	goto	l4395
  1758  00F9C0                     l4395:
  1759                           
  1760                           ;main.c: 342: }
  1761                           ;main.c: 344: leer_teclado(ocultar_teclas);
  1762  00F9C0  C043  F03E         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1763  00F9C4  C044  F03F         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1764  00F9C8  EC9B  F07A         	call	_leer_teclado	;wreg free
  1765  00F9CC  D755               	goto	l4341
  1766                           
  1767                           ;main.c: 345: }
  1768                           ;main.c: 346: return 0;
  1769                           ;	Return value of _main is never used
  1770  00F9CE  EF00  F000         	goto	start
  1771  00F9D2                     __end_of_main:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1l	equ	0xFE1
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _menu_cambiar_password *****************
  1784 ;; Defined at:
  1785 ;;		line 200 in file "main.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  verifica        2   12[COMRAM] int 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;		None               void
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    6
  1806 ;; This function calls:
  1807 ;;		_clear_display
  1808 ;;		_mostrar_titulo_menu
  1809 ;;		_verficar_password
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text1
  1816  00F0C6                     __ptext1:
  1817                           	opt stack 0
  1818  00F0C6                     _menu_cambiar_password:
  1819                           	opt stack 24
  1820                           
  1821                           ;main.c: 202: int verifica;
  1822                           ;main.c: 204: funcion_pulsador_C = cancelar_cambio_password;
  1823                           
  1824                           ;incstack = 0
  1825  00F0C6  0E86               	movlw	low _cancelar_cambio_password
  1826  00F0C8  0100               	movlb	0	; () banked
  1827  00F0CA  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  1828  00F0CC  0EDE               	movlw	high _cancelar_cambio_password
  1829  00F0CE  0100               	movlb	0	; () banked
  1830  00F0D0  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 206: verficar_password(&verifica);
  1834  00F0D2  0E0D               	movlw	low menu_cambiar_password@verifica
  1835  00F0D4  6E01               	movwf	verficar_password@verifica,c
  1836  00F0D6  0E00               	movlw	high menu_cambiar_password@verifica
  1837  00F0D8  6E02               	movwf	verficar_password@verifica+1,c
  1838  00F0DA  ECA9  F073         	call	_verficar_password	;wreg free
  1839                           
  1840                           ;main.c: 207: if(!verifica){
  1841  00F0DE  500D               	movf	menu_cambiar_password@verifica,w,c
  1842  00F0E0  100E               	iorwf	menu_cambiar_password@verifica+1,w,c
  1843  00F0E2  A4D8               	btfss	status,2,c
  1844  00F0E4  D01B               	goto	l4189
  1845                           
  1846                           ;main.c: 208: puntero_funcion = &mostrar_guardar_temporal_password;
  1847  00F0E6  0E22               	movlw	low _mostrar_guardar_temporal_password
  1848  00F0E8  0100               	movlb	0	; () banked
  1849  00F0EA  6F9E               	movwf	_puntero_funcion& (0+255),b
  1850  00F0EC  0EDF               	movlw	high _mostrar_guardar_temporal_password
  1851  00F0EE  0100               	movlb	0	; () banked
  1852  00F0F0  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1853                           
  1854                           ;main.c: 209: funcion_pulsador_D = borrar_temporal_password;
  1855  00F0F2  0E40               	movlw	low _borrar_temporal_password
  1856  00F0F4  0100               	movlb	0	; () banked
  1857  00F0F6  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1858  00F0F8  0EDC               	movlw	high _borrar_temporal_password
  1859  00F0FA  0100               	movlb	0	; () banked
  1860  00F0FC  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;main.c: 210: mostrar_titulo_menu("Password actual:          ");
  1864  00F0FE  0E99               	movlw	low STR_17
  1865  00F100  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1866  00F102  0EFE               	movlw	high STR_17
  1867  00F104  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1868  00F106  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  1869                           
  1870                           ;main.c: 211: clear_display(tamanio_password+1);
  1871  00F10A  0E01               	movlw	1
  1872  00F10C  2458               	addwf	_tamanio_password,w,c
  1873  00F10E  6E0B               	movwf	clear_display@pos,c
  1874  00F110  0E00               	movlw	0
  1875  00F112  2059               	addwfc	_tamanio_password+1,w,c
  1876  00F114  6E0C               	movwf	clear_display@pos+1,c
  1877  00F116  EC0F  F06F         	call	_clear_display	;wreg free
  1878                           
  1879                           ;main.c: 213: }else {
  1880  00F11A  0012               	return	
  1881  00F11C                     l4189:
  1882                           
  1883                           ;main.c: 214: if (tamanio_new_password <= 6){
  1884  00F11C  0100               	movlb	0	; () banked
  1885  00F11E  BFEA               	btfsc	(_tamanio_new_password+1)& (0+255),7,b
  1886  00F120  D008               	goto	l4191
  1887  00F122  0100               	movlb	0	; () banked
  1888  00F124  51EA               	movf	(_tamanio_new_password+1)& (0+255),w,b
  1889  00F126  E131               	bnz	l4201
  1890  00F128  0E07               	movlw	7
  1891  00F12A  0100               	movlb	0	; () banked
  1892  00F12C  5DE9               	subwf	_tamanio_new_password& (0+255),w,b
  1893  00F12E  B0D8               	btfsc	status,0,c
  1894  00F130  D02C               	goto	l4201
  1895  00F132                     l4191:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 215: puntero_funcion = &mostrar_guardar_nuevo_password;
  1899  00F132  0E4E               	movlw	low _mostrar_guardar_nuevo_password
  1900  00F134  0100               	movlb	0	; () banked
  1901  00F136  6F9E               	movwf	_puntero_funcion& (0+255),b
  1902  00F138  0EDF               	movlw	high _mostrar_guardar_nuevo_password
  1903  00F13A  0100               	movlb	0	; () banked
  1904  00F13C  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1905                           
  1906                           ;main.c: 216: funcion_pulsador_D = borrar_nuevo_password;
  1907  00F13E  0EBA               	movlw	low _borrar_nuevo_password
  1908  00F140  0100               	movlb	0	; () banked
  1909  00F142  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1910  00F144  0EDC               	movlw	high _borrar_nuevo_password
  1911  00F146  0100               	movlb	0	; () banked
  1912  00F148  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;main.c: 218: mostrar_titulo_menu("Nuevo pass:        ");
  1916  00F14A  0EFB               	movlw	low STR_18
  1917  00F14C  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1918  00F14E  0EFE               	movlw	high STR_18
  1919  00F150  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1920  00F152  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  1921                           
  1922                           ;main.c: 219: clear_display(tamanio_new_password+1);
  1923  00F156  0E01               	movlw	1
  1924  00F158  0100               	movlb	0	; () banked
  1925  00F15A  25E9               	addwf	_tamanio_new_password& (0+255),w,b
  1926  00F15C  6E0B               	movwf	clear_display@pos,c
  1927  00F15E  0E00               	movlw	0
  1928  00F160  0100               	movlb	0	; () banked
  1929  00F162  21EA               	addwfc	(_tamanio_new_password+1)& (0+255),w,b
  1930  00F164  6E0C               	movwf	clear_display@pos+1,c
  1931  00F166  EC0F  F06F         	call	_clear_display	;wreg free
  1932                           
  1933                           ;main.c: 221: if (tamanio_new_password == 6) tamanio_new_password++;
  1934  00F16A  0E06               	movlw	6
  1935  00F16C  0100               	movlb	0	; () banked
  1936  00F16E  19E9               	xorwf	_tamanio_new_password& (0+255),w,b
  1937  00F170  0100               	movlb	0	; () banked
  1938  00F172  11EA               	iorwf	(_tamanio_new_password+1)& (0+255),w,b
  1939  00F174  A4D8               	btfss	status,2,c
  1940  00F176  D004               	goto	l4199
  1941                           
  1942                           ; BSR set to: 0
  1943  00F178  0100               	movlb	0	; () banked
  1944  00F17A  4BE9               	infsnz	_tamanio_new_password& (0+255),f,b
  1945  00F17C  2BEA               	incf	(_tamanio_new_password+1)& (0+255),f,b
  1946  00F17E  D000               	goto	l4199
  1947  00F180                     l4199:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 222: tamanio_password = 0;
  1951  00F180  0E00               	movlw	0
  1952  00F182  6E59               	movwf	_tamanio_password+1,c
  1953  00F184  0E00               	movlw	0
  1954  00F186  6E58               	movwf	_tamanio_password,c
  1955                           
  1956                           ;main.c: 224: }else {
  1957  00F188  0012               	return	
  1958  00F18A                     l4201:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 225: puntero_funcion = &confirmar_actualizar_password;
  1962  00F18A  0E7A               	movlw	low _confirmar_actualizar_password
  1963  00F18C  0100               	movlb	0	; () banked
  1964  00F18E  6F9E               	movwf	_puntero_funcion& (0+255),b
  1965  00F190  0EDF               	movlw	high _confirmar_actualizar_password
  1966  00F192  0100               	movlb	0	; () banked
  1967  00F194  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1968                           
  1969                           ;main.c: 226: funcion_pulsador_D = borrar_current_password;
  1970  00F196  0E50               	movlw	low _borrar_current_password
  1971  00F198  0100               	movlb	0	; () banked
  1972  00F19A  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1973  00F19C  0EDC               	movlw	high _borrar_current_password
  1974  00F19E  0100               	movlb	0	; () banked
  1975  00F1A0  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 228: mostrar_titulo_menu("Confirme pass:        ");
  1979  00F1A2  0ECE               	movlw	low STR_19
  1980  00F1A4  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1981  00F1A6  0EFE               	movlw	high STR_19
  1982  00F1A8  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1983  00F1AA  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  1984                           
  1985                           ;main.c: 229: clear_display(tamanio_password+1);
  1986  00F1AE  0E01               	movlw	1
  1987  00F1B0  2458               	addwf	_tamanio_password,w,c
  1988  00F1B2  6E0B               	movwf	clear_display@pos,c
  1989  00F1B4  0E00               	movlw	0
  1990  00F1B6  2059               	addwfc	_tamanio_password+1,w,c
  1991  00F1B8  6E0C               	movwf	clear_display@pos+1,c
  1992  00F1BA  EC0F  F06F         	call	_clear_display	;wreg free
  1993  00F1BE  0012               	return	
  1994  00F1C0  0012               	return		;funcret
  1995  00F1C2                     __end_of_menu_cambiar_password:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           postinc0	equ	0xFEE
  2002                           wreg	equ	0xFE8
  2003                           postdec1	equ	0xFE5
  2004                           fsr1l	equ	0xFE1
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _verficar_password *****************
  2008 ;; Defined at:
  2009 ;;		line 76 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  verifica        2    0[COMRAM] PTR int 
  2012 ;;		 -> menu_cambiar_password@verifica(2), 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  i               2    4[COMRAM] int 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;		None               void
  2017 ;; Registers used:
  2018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2028 ;;Total ram usage:        6 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_menu_cambiar_password
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text2
  2038  00E752                     __ptext2:
  2039                           	opt stack 0
  2040  00E752                     _verficar_password:
  2041                           	opt stack 29
  2042                           
  2043                           ;alarma.c: 78: *verifica=1;
  2044                           
  2045                           ;incstack = 0
  2046  00E752  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2047  00E756  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2048  00E75A  0E01               	movlw	1
  2049  00E75C  6EDE               	movwf	postinc2,c
  2050  00E75E  0E00               	movlw	0
  2051  00E760  6EDD               	movwf	postdec2,c
  2052                           
  2053                           ;alarma.c: 79: int i = 0;
  2054  00E762  0E00               	movlw	0
  2055  00E764  6E06               	movwf	verficar_password@i+1,c
  2056  00E766  0E00               	movlw	0
  2057  00E768  6E05               	movwf	verficar_password@i,c
  2058                           
  2059                           ;alarma.c: 80: while (i < 6 && *verifica == 1){
  2060  00E76A  D01C               	goto	l3963
  2061  00E76C                     l3957:
  2062                           
  2063                           ;alarma.c: 81: if (password[i] != *(temporal+i))
  2064  00E76C  0ECC               	movlw	low _temporal
  2065  00E76E  2405               	addwf	verficar_password@i,w,c
  2066  00E770  6ED9               	movwf	fsr2l,c
  2067  00E772  0E00               	movlw	high _temporal
  2068  00E774  2006               	addwfc	verficar_password@i+1,w,c
  2069  00E776  6EDA               	movwf	fsr2h,c
  2070  00E778  0E68               	movlw	low _password
  2071  00E77A  2405               	addwf	verficar_password@i,w,c
  2072  00E77C  6EE1               	movwf	fsr1l,c
  2073  00E77E  0E00               	movlw	high _password
  2074  00E780  2006               	addwfc	verficar_password@i+1,w,c
  2075  00E782  6EE2               	movwf	fsr1h,c
  2076  00E784  50DE               	movf	postinc2,w,c
  2077  00E786  18E6               	xorwf	postinc1,w,c
  2078  00E788  B4D8               	btfsc	status,2,c
  2079  00E78A  D009               	goto	l3961
  2080                           
  2081                           ;alarma.c: 82: *verifica = 0;
  2082  00E78C  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2083  00E790  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2084  00E794  0E00               	movlw	0
  2085  00E796  6EDE               	movwf	postinc2,c
  2086  00E798  0E00               	movlw	0
  2087  00E79A  6EDD               	movwf	postdec2,c
  2088  00E79C  D000               	goto	l3961
  2089  00E79E                     l3961:
  2090                           
  2091                           ;alarma.c: 84: i++;
  2092  00E79E  4A05               	infsnz	verficar_password@i,f,c
  2093  00E7A0  2A06               	incf	verficar_password@i+1,f,c
  2094  00E7A2  D000               	goto	l3963
  2095  00E7A4                     l3963:
  2096  00E7A4  BE06               	btfsc	verficar_password@i+1,7,c
  2097  00E7A6  D006               	goto	l3965
  2098  00E7A8  5006               	movf	verficar_password@i+1,w,c
  2099  00E7AA  E10E               	bnz	l852
  2100  00E7AC  0E06               	movlw	6
  2101  00E7AE  5C05               	subwf	verficar_password@i,w,c
  2102  00E7B0  B0D8               	btfsc	status,0,c
  2103  00E7B2  0012               	return	
  2104  00E7B4                     l3965:
  2105  00E7B4  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2106  00E7B8  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2107  00E7BC  04DE               	decf	postinc2,w,c
  2108  00E7BE  10DE               	iorwf	postinc2,w,c
  2109  00E7C0  A4D8               	btfss	status,2,c
  2110  00E7C2  0012               	return	
  2111  00E7C4  D7D3               	goto	l3957
  2112  00E7C6  0012               	return	
  2113  00E7C8                     l852:
  2114  00E7C8  0012               	return		;funcret
  2115  00E7CA                     __end_of_verficar_password:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           postinc1	equ	0xFE6
  2124                           postdec1	equ	0xFE5
  2125                           fsr1h	equ	0xFE2
  2126                           fsr1l	equ	0xFE1
  2127                           postinc2	equ	0xFDE
  2128                           postdec2	equ	0xFDD
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _menu_cambiar_horario *****************
  2134 ;; Defined at:
  2135 ;;		line 181 in file "main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;		None               void
  2142 ;; Registers used:
  2143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    6
  2156 ;; This function calls:
  2157 ;;		_clear_display
  2158 ;;		_mostrar_titulo_menu
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text3
  2165  00EB7A                     __ptext3:
  2166                           	opt stack 0
  2167  00EB7A                     _menu_cambiar_horario:
  2168                           	opt stack 24
  2169                           
  2170                           ;main.c: 183: funcion_pulsador_C = cancelar_cambio_hora;
  2171                           
  2172                           ;incstack = 0
  2173  00EB7A  0EE2               	movlw	low _cancelar_cambio_hora
  2174  00EB7C  0100               	movlb	0	; () banked
  2175  00EB7E  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  2176  00EB80  0EDB               	movlw	high _cancelar_cambio_hora
  2177  00EB82  0100               	movlb	0	; () banked
  2178  00EB84  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2179                           
  2180                           ;main.c: 185: if (tamanio_minutos != 2){
  2181  00EB86  0E02               	movlw	2
  2182  00EB88  0100               	movlb	0	; () banked
  2183  00EB8A  19E7               	xorwf	_tamanio_minutos& (0+255),w,b
  2184  00EB8C  0100               	movlb	0	; () banked
  2185  00EB8E  11E8               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  2186  00EB90  B4D8               	btfsc	status,2,c
  2187  00EB92  D01D               	goto	l4169
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;main.c: 186: mostrar_titulo_menu("Inserte minutos:     ");
  2191  00EB94  0EE5               	movlw	low STR_15
  2192  00EB96  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2193  00EB98  0EFE               	movlw	high STR_15
  2194  00EB9A  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2195  00EB9C  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  2196                           
  2197                           ;main.c: 187: puntero_funcion = cambiar_minutos;
  2198  00EBA0  0E7C               	movlw	low _cambiar_minutos
  2199  00EBA2  0100               	movlb	0	; () banked
  2200  00EBA4  6F9E               	movwf	_puntero_funcion& (0+255),b
  2201  00EBA6  0EE5               	movlw	high _cambiar_minutos
  2202  00EBA8  0100               	movlb	0	; () banked
  2203  00EBAA  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 188: funcion_pulsador_D = borrar_minutos;
  2207  00EBAC  0EA8               	movlw	low _borrar_minutos
  2208  00EBAE  0100               	movlb	0	; () banked
  2209  00EBB0  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2210  00EBB2  0EDC               	movlw	high _borrar_minutos
  2211  00EBB4  0100               	movlb	0	; () banked
  2212  00EBB6  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2213                           
  2214                           ;main.c: 189: clear_display(tamanio_minutos+1);
  2215  00EBB8  0E01               	movlw	1
  2216  00EBBA  0100               	movlb	0	; () banked
  2217  00EBBC  25E7               	addwf	_tamanio_minutos& (0+255),w,b
  2218  00EBBE  6E0B               	movwf	clear_display@pos,c
  2219  00EBC0  0E00               	movlw	0
  2220  00EBC2  0100               	movlb	0	; () banked
  2221  00EBC4  21E8               	addwfc	(_tamanio_minutos+1)& (0+255),w,b
  2222  00EBC6  6E0C               	movwf	clear_display@pos+1,c
  2223  00EBC8  EC0F  F06F         	call	_clear_display	;wreg free
  2224                           
  2225                           ;main.c: 191: }else if (tamanio_hora != 2){
  2226  00EBCC  0012               	return	
  2227  00EBCE                     l4169:
  2228  00EBCE  0E02               	movlw	2
  2229  00EBD0  1854               	xorwf	_tamanio_hora,w,c
  2230  00EBD2  1055               	iorwf	_tamanio_hora+1,w,c
  2231  00EBD4  B4D8               	btfsc	status,2,c
  2232  00EBD6  0012               	return	
  2233                           
  2234                           ;main.c: 192: mostrar_titulo_menu("Inserte hora:     ");
  2235  00EBD8  0E0F               	movlw	low STR_16
  2236  00EBDA  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2237  00EBDC  0EFF               	movlw	high STR_16
  2238  00EBDE  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2239  00EBE0  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  2240                           
  2241                           ;main.c: 193: puntero_funcion = cambiar_hora;
  2242  00EBE4  0EF4               	movlw	low _cambiar_hora
  2243  00EBE6  0100               	movlb	0	; () banked
  2244  00EBE8  6F9E               	movwf	_puntero_funcion& (0+255),b
  2245  00EBEA  0EE2               	movlw	high _cambiar_hora
  2246  00EBEC  0100               	movlb	0	; () banked
  2247  00EBEE  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;main.c: 194: funcion_pulsador_D = borrar_hora;
  2251  00EBF0  0E30               	movlw	low _borrar_hora
  2252  00EBF2  0100               	movlb	0	; () banked
  2253  00EBF4  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2254  00EBF6  0EDC               	movlw	high _borrar_hora
  2255  00EBF8  0100               	movlb	0	; () banked
  2256  00EBFA  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2257                           
  2258                           ;main.c: 195: clear_display(tamanio_hora+1);
  2259  00EBFC  0E01               	movlw	1
  2260  00EBFE  2454               	addwf	_tamanio_hora,w,c
  2261  00EC00  6E0B               	movwf	clear_display@pos,c
  2262  00EC02  0E00               	movlw	0
  2263  00EC04  2055               	addwfc	_tamanio_hora+1,w,c
  2264  00EC06  6E0C               	movwf	clear_display@pos+1,c
  2265  00EC08  EC0F  F06F         	call	_clear_display	;wreg free
  2266  00EC0C  0012               	return	
  2267  00EC0E  0012               	return		;funcret
  2268  00EC10                     __end_of_menu_cambiar_horario:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           postinc1	equ	0xFE6
  2277                           postdec1	equ	0xFE5
  2278                           fsr1h	equ	0xFE2
  2279                           fsr1l	equ	0xFE1
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _menu_cambiar_fecha *****************
  2287 ;; Defined at:
  2288 ;;		line 156 in file "main.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;		None               void
  2295 ;; Registers used:
  2296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    6
  2309 ;; This function calls:
  2310 ;;		_clear_display
  2311 ;;		_mostrar_titulo_menu
  2312 ;; This function is called by:
  2313 ;;		_main
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text4
  2318  00EF06                     __ptext4:
  2319                           	opt stack 0
  2320  00EF06                     _menu_cambiar_fecha:
  2321                           	opt stack 24
  2322                           
  2323                           ;main.c: 158: funcion_pulsador_C = cancelar_cambio_fecha;
  2324                           
  2325                           ;incstack = 0
  2326  00EF06  0ED8               	movlw	low _cancelar_cambio_fecha
  2327  00EF08  0100               	movlb	0	; () banked
  2328  00EF0A  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  2329  00EF0C  0EDB               	movlw	high _cancelar_cambio_fecha
  2330  00EF0E  0100               	movlb	0	; () banked
  2331  00EF10  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2332                           
  2333                           ;main.c: 160: if (tamanio_anio != 2){
  2334  00EF12  0E02               	movlw	2
  2335  00EF14  0100               	movlb	0	; () banked
  2336  00EF16  19E5               	xorwf	_tamanio_anio& (0+255),w,b
  2337  00EF18  0100               	movlb	0	; () banked
  2338  00EF1A  11E6               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  2339  00EF1C  B4D8               	btfsc	status,2,c
  2340  00EF1E  D01D               	goto	l4145
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 161: mostrar_titulo_menu("Inserte anio:     ");
  2344  00EF20  0E22               	movlw	low STR_12
  2345  00EF22  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2346  00EF24  0EFF               	movlw	high STR_12
  2347  00EF26  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2348  00EF28  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  2349                           
  2350                           ;main.c: 162: puntero_funcion = &cambiar_anio;
  2351  00EF2C  0ECA               	movlw	low _cambiar_anio
  2352  00EF2E  0100               	movlb	0	; () banked
  2353  00EF30  6F9E               	movwf	_puntero_funcion& (0+255),b
  2354  00EF32  0EE7               	movlw	high _cambiar_anio
  2355  00EF34  0100               	movlb	0	; () banked
  2356  00EF36  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 163: funcion_pulsador_D = borrar_anio;
  2360  00EF38  0E96               	movlw	low _borrar_anio
  2361  00EF3A  0100               	movlb	0	; () banked
  2362  00EF3C  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2363  00EF3E  0EDC               	movlw	high _borrar_anio
  2364  00EF40  0100               	movlb	0	; () banked
  2365  00EF42  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2366                           
  2367                           ;main.c: 164: clear_display(tamanio_anio+1);
  2368  00EF44  0E01               	movlw	1
  2369  00EF46  0100               	movlb	0	; () banked
  2370  00EF48  25E5               	addwf	_tamanio_anio& (0+255),w,b
  2371  00EF4A  6E0B               	movwf	clear_display@pos,c
  2372  00EF4C  0E00               	movlw	0
  2373  00EF4E  0100               	movlb	0	; () banked
  2374  00EF50  21E6               	addwfc	(_tamanio_anio+1)& (0+255),w,b
  2375  00EF52  6E0C               	movwf	clear_display@pos+1,c
  2376  00EF54  EC0F  F06F         	call	_clear_display	;wreg free
  2377                           
  2378                           ;main.c: 166: }else if (tamanio_mes != 2){
  2379  00EF58  0012               	return	
  2380  00EF5A                     l4145:
  2381  00EF5A  0E02               	movlw	2
  2382  00EF5C  1856               	xorwf	_tamanio_mes,w,c
  2383  00EF5E  1057               	iorwf	_tamanio_mes+1,w,c
  2384  00EF60  B4D8               	btfsc	status,2,c
  2385  00EF62  D01B               	goto	l4153
  2386                           
  2387                           ;main.c: 167: mostrar_titulo_menu("Inserte mes:     ");
  2388  00EF64  0E59               	movlw	low STR_13
  2389  00EF66  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2390  00EF68  0EFF               	movlw	high STR_13
  2391  00EF6A  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2392  00EF6C  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  2393                           
  2394                           ;main.c: 168: puntero_funcion = &cambiar_mes;
  2395  00EF70  0E2C               	movlw	low _cambiar_mes
  2396  00EF72  0100               	movlb	0	; () banked
  2397  00EF74  6F9E               	movwf	_puntero_funcion& (0+255),b
  2398  00EF76  0EE4               	movlw	high _cambiar_mes
  2399  00EF78  0100               	movlb	0	; () banked
  2400  00EF7A  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 169: funcion_pulsador_D = borrar_mes;
  2404  00EF7C  0E10               	movlw	low _borrar_mes
  2405  00EF7E  0100               	movlb	0	; () banked
  2406  00EF80  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2407  00EF82  0EDC               	movlw	high _borrar_mes
  2408  00EF84  0100               	movlb	0	; () banked
  2409  00EF86  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2410                           
  2411                           ;main.c: 170: clear_display(tamanio_mes+1);
  2412  00EF88  0E01               	movlw	1
  2413  00EF8A  2456               	addwf	_tamanio_mes,w,c
  2414  00EF8C  6E0B               	movwf	clear_display@pos,c
  2415  00EF8E  0E00               	movlw	0
  2416  00EF90  2057               	addwfc	_tamanio_mes+1,w,c
  2417  00EF92  6E0C               	movwf	clear_display@pos+1,c
  2418  00EF94  EC0F  F06F         	call	_clear_display	;wreg free
  2419                           
  2420                           ;main.c: 172: }else if (tamanio_dia != 2){
  2421  00EF98  0012               	return	
  2422  00EF9A                     l4153:
  2423  00EF9A  0E02               	movlw	2
  2424  00EF9C  1852               	xorwf	_tamanio_dia,w,c
  2425  00EF9E  1053               	iorwf	_tamanio_dia+1,w,c
  2426  00EFA0  B4D8               	btfsc	status,2,c
  2427  00EFA2  0012               	return	
  2428                           
  2429                           ;main.c: 173: mostrar_titulo_menu("Inserte dia:     ");
  2430  00EFA4  0E47               	movlw	low STR_14
  2431  00EFA6  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2432  00EFA8  0EFF               	movlw	high STR_14
  2433  00EFAA  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2434  00EFAC  EC7C  F06E         	call	_mostrar_titulo_menu	;wreg free
  2435                           
  2436                           ;main.c: 174: puntero_funcion = &cambiar_dia;
  2437  00EFB0  0EDE               	movlw	low _cambiar_dia
  2438  00EFB2  0100               	movlb	0	; () banked
  2439  00EFB4  6F9E               	movwf	_puntero_funcion& (0+255),b
  2440  00EFB6  0EE1               	movlw	high _cambiar_dia
  2441  00EFB8  0100               	movlb	0	; () banked
  2442  00EFBA  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;main.c: 175: funcion_pulsador_D = borrar_dia;
  2446  00EFBC  0E20               	movlw	low _borrar_dia
  2447  00EFBE  0100               	movlb	0	; () banked
  2448  00EFC0  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2449  00EFC2  0EDC               	movlw	high _borrar_dia
  2450  00EFC4  0100               	movlb	0	; () banked
  2451  00EFC6  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2452                           
  2453                           ;main.c: 176: clear_display(tamanio_dia+1);
  2454  00EFC8  0E01               	movlw	1
  2455  00EFCA  2452               	addwf	_tamanio_dia,w,c
  2456  00EFCC  6E0B               	movwf	clear_display@pos,c
  2457  00EFCE  0E00               	movlw	0
  2458  00EFD0  2053               	addwfc	_tamanio_dia+1,w,c
  2459  00EFD2  6E0C               	movwf	clear_display@pos+1,c
  2460  00EFD4  EC0F  F06F         	call	_clear_display	;wreg free
  2461  00EFD8  0012               	return	
  2462  00EFDA  0012               	return		;funcret
  2463  00EFDC                     __end_of_menu_cambiar_fecha:
  2464                           	opt stack 0
  2465                           tblptru	equ	0xFF8
  2466                           tblptrh	equ	0xFF7
  2467                           tblptrl	equ	0xFF6
  2468                           tablat	equ	0xFF5
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postinc1	equ	0xFE6
  2472                           postdec1	equ	0xFE5
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           postinc2	equ	0xFDE
  2476                           postdec2	equ	0xFDD
  2477                           fsr2h	equ	0xFDA
  2478                           fsr2l	equ	0xFD9
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function _mostrar_titulo_menu *****************
  2482 ;; Defined at:
  2483 ;;		line 118 in file "main.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  titulo_menu     2   10[COMRAM] PTR const unsigned char 
  2486 ;;		 -> STR_19(23), STR_18(20), STR_17(27), STR_16(19), 
  2487 ;;		 -> STR_15(22), STR_14(18), STR_13(18), STR_12(19), 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;		None
  2490 ;; Return value:  Size  Location     Type
  2491 ;;		None               void
  2492 ;; Registers used:
  2493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2503 ;;Total ram usage:        2 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    5
  2506 ;; This function calls:
  2507 ;;		_lcd_gotoxy
  2508 ;;		_lcd_putrs
  2509 ;; This function is called by:
  2510 ;;		_menu_cambiar_fecha
  2511 ;;		_menu_cambiar_horario
  2512 ;;		_menu_cambiar_password
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text5
  2517  00DCF8                     __ptext5:
  2518                           	opt stack 0
  2519  00DCF8                     _mostrar_titulo_menu:
  2520                           	opt stack 24
  2521                           
  2522                           ;main.c: 119: lcd_gotoxy(1,1);
  2523                           
  2524                           ;incstack = 0
  2525  00DCF8  0E01               	movlw	1
  2526  00DCFA  6E05               	movwf	lcd_gotoxy@y,c
  2527  00DCFC  0E01               	movlw	1
  2528  00DCFE  EC31  F06F         	call	_lcd_gotoxy
  2529                           
  2530                           ;main.c: 120: lcd_putrs(titulo_menu);
  2531  00DD02  C00B  F009         	movff	mostrar_titulo_menu@titulo_menu,lcd_putrs@ptr
  2532  00DD06  C00C  F00A         	movff	mostrar_titulo_menu@titulo_menu+1,lcd_putrs@ptr+1
  2533  00DD0A  ECC5  F070         	call	_lcd_putrs	;wreg free
  2534  00DD0E  0012               	return		;funcret
  2535  00DD10                     __end_of_mostrar_titulo_menu:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postinc1	equ	0xFE6
  2544                           postdec1	equ	0xFE5
  2545                           fsr1h	equ	0xFE2
  2546                           fsr1l	equ	0xFE1
  2547                           postinc2	equ	0xFDE
  2548                           postdec2	equ	0xFDD
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _mensaje_alarma_activada *****************
  2554 ;; Defined at:
  2555 ;;		line 234 in file "main.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;		None
  2560 ;; Return value:  Size  Location     Type
  2561 ;;		None               void
  2562 ;; Registers used:
  2563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2573 ;;Total ram usage:        0 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    5
  2576 ;; This function calls:
  2577 ;;		_lcd_gotoxy
  2578 ;;		_lcd_putrs
  2579 ;; This function is called by:
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text6
  2585  00DFD4                     __ptext6:
  2586                           	opt stack 0
  2587  00DFD4                     _mensaje_alarma_activada:
  2588                           	opt stack 25
  2589                           
  2590                           ;main.c: 235: lcd_gotoxy(1,1);
  2591                           
  2592                           ;incstack = 0
  2593  00DFD4  0E01               	movlw	1
  2594  00DFD6  6E05               	movwf	lcd_gotoxy@y,c
  2595  00DFD8  0E01               	movlw	1
  2596  00DFDA  EC31  F06F         	call	_lcd_gotoxy
  2597                           
  2598                           ;main.c: 236: lcd_putrs("#### ALARMA ####");
  2599  00DFDE  0E7C               	movlw	low STR_20
  2600  00DFE0  6E09               	movwf	lcd_putrs@ptr,c
  2601  00DFE2  0EFF               	movlw	high STR_20
  2602  00DFE4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2603  00DFE6  ECC5  F070         	call	_lcd_putrs	;wreg free
  2604                           
  2605                           ;main.c: 237: lcd_gotoxy(1,2);
  2606  00DFEA  0E02               	movlw	2
  2607  00DFEC  6E05               	movwf	lcd_gotoxy@y,c
  2608  00DFEE  0E01               	movlw	1
  2609  00DFF0  EC31  F06F         	call	_lcd_gotoxy
  2610                           
  2611                           ;main.c: 238: lcd_putrs("### ACTIVADA ###");
  2612  00DFF4  0E6B               	movlw	low STR_21
  2613  00DFF6  6E09               	movwf	lcd_putrs@ptr,c
  2614  00DFF8  0EFF               	movlw	high STR_21
  2615  00DFFA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2616  00DFFC  ECC5  F070         	call	_lcd_putrs	;wreg free
  2617  00E000  0012               	return		;funcret
  2618  00E002                     __end_of_mensaje_alarma_activada:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           postinc1	equ	0xFE6
  2627                           postdec1	equ	0xFE5
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _leer_teclado *****************
  2637 ;; Defined at:
  2638 ;;		line 57 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  ocultar         2   61[COMRAM] int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  i               2   64[COMRAM] int 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;		None               void
  2645 ;; Registers used:
  2646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;Total ram usage:        5 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    9
  2659 ;; This function calls:
  2660 ;;		Absolute function
  2661 ;;		_accionar_alarma
  2662 ;;		_borrar_anio
  2663 ;;		_borrar_current_password
  2664 ;;		_borrar_dia
  2665 ;;		_borrar_hora
  2666 ;;		_borrar_mes
  2667 ;;		_borrar_minutos
  2668 ;;		_borrar_nuevo_password
  2669 ;;		_borrar_temporal_password
  2670 ;;		_cambiar_anio
  2671 ;;		_cambiar_dia
  2672 ;;		_cambiar_hora
  2673 ;;		_cambiar_mes
  2674 ;;		_cambiar_minutos
  2675 ;;		_cancelar_cambio_fecha
  2676 ;;		_cancelar_cambio_hora
  2677 ;;		_cancelar_cambio_password
  2678 ;;		_confirmar_actualizar_password
  2679 ;;		_desactivar_alarma
  2680 ;;		_guardar_tecla_presionada
  2681 ;;		_ingresar_comando
  2682 ;;		_lcd_putrs
  2683 ;;		_mostrar_guardar_nuevo_password
  2684 ;;		_mostrar_guardar_password
  2685 ;;		_mostrar_guardar_temporal_password
  2686 ;;		_restaurar_comando
  2687 ;; This function is called by:
  2688 ;;		_main
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text7
  2693  00F536                     __ptext7:
  2694                           	opt stack 0
  2695  00F536                     _leer_teclado:
  2696                           	opt stack 21
  2697                           
  2698                           ;teclado.c: 58: int i;
  2699                           ;teclado.c: 59: ocultar_teclas = ocultar;
  2700                           
  2701                           ;incstack = 0
  2702  00F536  C03E  F09C         	movff	leer_teclado@ocultar,_ocultar_teclas
  2703  00F53A  C03F  F09D         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  2704                           
  2705                           ;teclado.c: 61: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  2706  00F53E  8089               	bsf	3977,0,c	;volatile
  2707  00F540  9289               	bcf	3977,1,c	;volatile
  2708  00F542  9489               	bcf	3977,2,c	;volatile
  2709  00F544  9689               	bcf	3977,3,c	;volatile
  2710  00F546  0E00               	movlw	0
  2711  00F548  6E42               	movwf	leer_teclado@i+1,c
  2712  00F54A  0E01               	movlw	1
  2713  00F54C  6E41               	movwf	leer_teclado@i,c
  2714                           
  2715                           ;teclado.c: 62: guardar_tecla_presionada(i);
  2716  00F54E  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2717  00F552  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2718  00F556  EC63  F074         	call	_guardar_tecla_presionada	;wreg free
  2719                           
  2720                           ;teclado.c: 63: if (PORTCbits.RC2==1){key='A';funcion_pulsador_A();while(PORTCbits.RC2==
      +                          1){};}
  2721  00F55A  A482               	btfss	3970,2,c	;volatile
  2722  00F55C  D011               	goto	l448
  2723  00F55E  0E41               	movlw	65
  2724  00F560  6E49               	movwf	_key,c
  2725  00F562  D801               	call	u3568
  2726  00F564  D00B               	goto	l449
  2727  00F566                     u3568:
  2728  00F566  0005               	push	
  2729  00F568  0100               	movlb	0	; () banked
  2730  00F56A  6EFA               	movwf	pclath,c
  2731  00F56C  518C               	movf	_funcion_pulsador_A& (0+255),w,b
  2732  00F56E  6EFD               	movwf	tosl,c
  2733  00F570  518D               	movf	(_funcion_pulsador_A+1)& (0+255),w,b
  2734  00F572  6EFE               	movwf	tosh,c
  2735  00F574  50F8               	movf	tblptru,w,c
  2736  00F576  6EFF               	movwf	tosu,c
  2737  00F578  50FA               	movf	pclath,w,c
  2738  00F57A  0012               	return		;indir
  2739  00F57C                     l449:
  2740  00F57C  B482               	btfsc	3970,2,c	;volatile
  2741  00F57E  D7FE               	goto	l449
  2742  00F580                     l448:
  2743                           
  2744                           ;teclado.c: 65: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  2745  00F580  9089               	bcf	3977,0,c	;volatile
  2746  00F582  8289               	bsf	3977,1,c	;volatile
  2747  00F584  9489               	bcf	3977,2,c	;volatile
  2748  00F586  9689               	bcf	3977,3,c	;volatile
  2749  00F588  0E00               	movlw	0
  2750  00F58A  6E42               	movwf	leer_teclado@i+1,c
  2751  00F58C  0E04               	movlw	4
  2752  00F58E  6E41               	movwf	leer_teclado@i,c
  2753                           
  2754                           ;teclado.c: 66: guardar_tecla_presionada(i);
  2755  00F590  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2756  00F594  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2757  00F598  EC63  F074         	call	_guardar_tecla_presionada	;wreg free
  2758                           
  2759                           ;teclado.c: 67: if (PORTCbits.RC2==1){key='B';funcion_pulsador_B();while(PORTCbits.RC2==
      +                          1){};}
  2760  00F59C  A482               	btfss	3970,2,c	;volatile
  2761  00F59E  D011               	goto	l452
  2762  00F5A0  0E42               	movlw	66
  2763  00F5A2  6E49               	movwf	_key,c
  2764  00F5A4  D801               	call	u3598
  2765  00F5A6  D00B               	goto	l453
  2766  00F5A8                     u3598:
  2767  00F5A8  0005               	push	
  2768  00F5AA  0100               	movlb	0	; () banked
  2769  00F5AC  6EFA               	movwf	pclath,c
  2770  00F5AE  518E               	movf	_funcion_pulsador_B& (0+255),w,b
  2771  00F5B0  6EFD               	movwf	tosl,c
  2772  00F5B2  518F               	movf	(_funcion_pulsador_B+1)& (0+255),w,b
  2773  00F5B4  6EFE               	movwf	tosh,c
  2774  00F5B6  50F8               	movf	tblptru,w,c
  2775  00F5B8  6EFF               	movwf	tosu,c
  2776  00F5BA  50FA               	movf	pclath,w,c
  2777  00F5BC  0012               	return		;indir
  2778  00F5BE                     l453:
  2779  00F5BE  B482               	btfsc	3970,2,c	;volatile
  2780  00F5C0  D7FE               	goto	l453
  2781  00F5C2                     l452:
  2782                           
  2783                           ;teclado.c: 69: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  2784  00F5C2  9089               	bcf	3977,0,c	;volatile
  2785  00F5C4  9289               	bcf	3977,1,c	;volatile
  2786  00F5C6  8489               	bsf	3977,2,c	;volatile
  2787  00F5C8  9689               	bcf	3977,3,c	;volatile
  2788  00F5CA  0E00               	movlw	0
  2789  00F5CC  6E42               	movwf	leer_teclado@i+1,c
  2790  00F5CE  0E07               	movlw	7
  2791  00F5D0  6E41               	movwf	leer_teclado@i,c
  2792                           
  2793                           ;teclado.c: 70: guardar_tecla_presionada(i);
  2794  00F5D2  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2795  00F5D6  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2796  00F5DA  EC63  F074         	call	_guardar_tecla_presionada	;wreg free
  2797                           
  2798                           ;teclado.c: 71: if (PORTCbits.RC2==1){key='C';funcion_pulsador_C();while(PORTCbits.RC2==
      +                          1){};}
  2799  00F5DE  A482               	btfss	3970,2,c	;volatile
  2800  00F5E0  D011               	goto	l456
  2801  00F5E2  0E43               	movlw	67
  2802  00F5E4  6E49               	movwf	_key,c
  2803  00F5E6  D801               	call	u3628
  2804  00F5E8  D00B               	goto	l457
  2805  00F5EA                     u3628:
  2806  00F5EA  0005               	push	
  2807  00F5EC  0100               	movlb	0	; () banked
  2808  00F5EE  6EFA               	movwf	pclath,c
  2809  00F5F0  5190               	movf	_funcion_pulsador_C& (0+255),w,b
  2810  00F5F2  6EFD               	movwf	tosl,c
  2811  00F5F4  5191               	movf	(_funcion_pulsador_C+1)& (0+255),w,b
  2812  00F5F6  6EFE               	movwf	tosh,c
  2813  00F5F8  50F8               	movf	tblptru,w,c
  2814  00F5FA  6EFF               	movwf	tosu,c
  2815  00F5FC  50FA               	movf	pclath,w,c
  2816  00F5FE  0012               	return		;indir
  2817  00F600                     l457:
  2818  00F600  B482               	btfsc	3970,2,c	;volatile
  2819  00F602  D7FE               	goto	l457
  2820  00F604                     l456:
  2821                           
  2822                           ;teclado.c: 73: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2823  00F604  9089               	bcf	3977,0,c	;volatile
  2824  00F606  9289               	bcf	3977,1,c	;volatile
  2825  00F608  9489               	bcf	3977,2,c	;volatile
  2826  00F60A  8689               	bsf	3977,3,c	;volatile
  2827                           
  2828                           ;teclado.c: 74: {
  2829                           ;teclado.c: 75: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  2830  00F60C  AA80               	btfss	3968,5,c	;volatile
  2831  00F60E  D00B               	goto	l460
  2832  00F610  0E2A               	movlw	42
  2833  00F612  6E49               	movwf	_key,c
  2834  00F614  0EF5               	movlw	low STR_28
  2835  00F616  6E09               	movwf	lcd_putrs@ptr,c
  2836  00F618  0EFF               	movlw	high STR_28
  2837  00F61A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2838  00F61C  ECC5  F070         	call	_lcd_putrs	;wreg free
  2839  00F620  D000               	goto	l461
  2840  00F622                     l461:
  2841  00F622  BA80               	btfsc	3968,5,c	;volatile
  2842  00F624  D7FE               	goto	l461
  2843  00F626                     l460:
  2844                           
  2845                           ;teclado.c: 76: if (PORTAbits.RA7==1){key=0;puntero_funcion(key);while(PORTAbits.RA7==1)
      +                          {};}
  2846  00F626  AE80               	btfss	3968,7,c	;volatile
  2847  00F628  D012               	goto	l464
  2848  00F62A  0E00               	movlw	0
  2849  00F62C  6E49               	movwf	_key,c
  2850  00F62E  D801               	call	u3678
  2851  00F630  D00C               	goto	l465
  2852  00F632                     u3678:
  2853  00F632  0005               	push	
  2854  00F634  0100               	movlb	0	; () banked
  2855  00F636  6EFA               	movwf	pclath,c
  2856  00F638  519E               	movf	_puntero_funcion& (0+255),w,b
  2857  00F63A  6EFD               	movwf	tosl,c
  2858  00F63C  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  2859  00F63E  6EFE               	movwf	tosh,c
  2860  00F640  50F8               	movf	tblptru,w,c
  2861  00F642  6EFF               	movwf	tosu,c
  2862  00F644  50FA               	movf	pclath,w,c
  2863  00F646  5049               	movf	_key,w,c
  2864  00F648  0012               	return		;indir
  2865  00F64A                     l465:
  2866  00F64A  BE80               	btfsc	3968,7,c	;volatile
  2867  00F64C  D7FE               	goto	l465
  2868  00F64E                     l464:
  2869                           
  2870                           ;teclado.c: 77: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  2871  00F64E  AC80               	btfss	3968,6,c	;volatile
  2872  00F650  D00B               	goto	l468
  2873  00F652  0E23               	movlw	35
  2874  00F654  6E49               	movwf	_key,c
  2875  00F656  0E7A               	movlw	low (STR_21+15)
  2876  00F658  6E09               	movwf	lcd_putrs@ptr,c
  2877  00F65A  0EFF               	movlw	high (STR_21+15)
  2878  00F65C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2879  00F65E  ECC5  F070         	call	_lcd_putrs
  2880  00F662  D000               	goto	l469
  2881  00F664                     l469:
  2882  00F664  BC80               	btfsc	3968,6,c	;volatile
  2883  00F666  D7FE               	goto	l469
  2884  00F668                     l468:
  2885                           
  2886                           ;teclado.c: 78: if (PORTCbits.RC2==1){key='D';funcion_pulsador_D();while(PORTCbits.RC2==
      +                          1){};}
  2887  00F668  A482               	btfss	3970,2,c	;volatile
  2888  00F66A  D013               	goto	l4321
  2889  00F66C  0E44               	movlw	68
  2890  00F66E  6E49               	movwf	_key,c
  2891  00F670  D801               	call	u3728
  2892  00F672  D00B               	goto	l473
  2893  00F674                     u3728:
  2894  00F674  0005               	push	
  2895  00F676  0100               	movlb	0	; () banked
  2896  00F678  6EFA               	movwf	pclath,c
  2897  00F67A  5192               	movf	_funcion_pulsador_D& (0+255),w,b
  2898  00F67C  6EFD               	movwf	tosl,c
  2899  00F67E  5193               	movf	(_funcion_pulsador_D+1)& (0+255),w,b
  2900  00F680  6EFE               	movwf	tosh,c
  2901  00F682  50F8               	movf	tblptru,w,c
  2902  00F684  6EFF               	movwf	tosu,c
  2903  00F686  50FA               	movf	pclath,w,c
  2904  00F688  0012               	return		;indir
  2905  00F68A                     l473:
  2906  00F68A  A482               	btfss	3970,2,c	;volatile
  2907  00F68C  D002               	goto	l4321
  2908  00F68E  D7FD               	goto	l473
  2909  00F690  D000               	goto	l4321
  2910  00F692                     l4321:
  2911                           
  2912                           ;teclado.c: 79: }
  2913                           ;teclado.c: 80: _delay((unsigned long)((98)*(8000000/4000.0)));
  2914  00F692  0EFF               	movlw	255
  2915  00F694  6E40               	movwf	??_leer_teclado& (0+255),c
  2916  00F696  0E8A               	movlw	138
  2917  00F698                     u3837:
  2918  00F698  2EE8               	decfsz	wreg,f,c
  2919  00F69A  D7FE               	goto	u3837
  2920  00F69C  2E40               	decfsz	??_leer_teclado& (0+255),f,c
  2921  00F69E  D7FC               	goto	u3837
  2922  00F6A0  D000               	nop2	
  2923  00F6A2  0012               	return		;funcret
  2924  00F6A4                     __end_of_leer_teclado:
  2925                           	opt stack 0
  2926                           tosu	equ	0xFFF
  2927                           tosh	equ	0xFFE
  2928                           tosl	equ	0xFFD
  2929                           pclath	equ	0xFFA
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postinc1	equ	0xFE6
  2937                           postdec1	equ	0xFE5
  2938                           fsr1h	equ	0xFE2
  2939                           fsr1l	equ	0xFE1
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _guardar_tecla_presionada *****************
  2947 ;; Defined at:
  2948 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  i               2   59[COMRAM] int 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2962 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;Total ram usage:        2 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    8
  2969 ;; This function calls:
  2970 ;;		Absolute function
  2971 ;;		_cambiar_anio
  2972 ;;		_cambiar_dia
  2973 ;;		_cambiar_hora
  2974 ;;		_cambiar_mes
  2975 ;;		_cambiar_minutos
  2976 ;;		_confirmar_actualizar_password
  2977 ;;		_ingresar_comando
  2978 ;;		_mostrar_guardar_nuevo_password
  2979 ;;		_mostrar_guardar_password
  2980 ;;		_mostrar_guardar_temporal_password
  2981 ;; This function is called by:
  2982 ;;		_leer_teclado
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text8
  2987  00E8C6                     __ptext8:
  2988                           	opt stack 0
  2989  00E8C6                     _guardar_tecla_presionada:
  2990                           	opt stack 21
  2991                           
  2992                           ;teclado.c: 52: if (PORTAbits.RA5==1){key=i;puntero_funcion(key);while(PORTAbits.RA5==1)
      +                          {};}
  2993                           
  2994                           ;incstack = 0
  2995  00E8C6  AA80               	btfss	3968,5,c	;volatile
  2996  00E8C8  D012               	goto	l433
  2997  00E8CA  C03C  F049         	movff	guardar_tecla_presionada@i,_key
  2998  00E8CE  D801               	call	u3368
  2999  00E8D0  D00C               	goto	l434
  3000  00E8D2                     u3368:
  3001  00E8D2  0005               	push	
  3002  00E8D4  0100               	movlb	0	; () banked
  3003  00E8D6  6EFA               	movwf	pclath,c
  3004  00E8D8  519E               	movf	_puntero_funcion& (0+255),w,b
  3005  00E8DA  6EFD               	movwf	tosl,c
  3006  00E8DC  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3007  00E8DE  6EFE               	movwf	tosh,c
  3008  00E8E0  50F8               	movf	tblptru,w,c
  3009  00E8E2  6EFF               	movwf	tosu,c
  3010  00E8E4  50FA               	movf	pclath,w,c
  3011  00E8E6  5049               	movf	_key,w,c
  3012  00E8E8  0012               	return		;indir
  3013  00E8EA                     l434:
  3014  00E8EA  BA80               	btfsc	3968,5,c	;volatile
  3015  00E8EC  D7FE               	goto	l434
  3016  00E8EE                     l433:
  3017                           
  3018                           ;teclado.c: 53: if (PORTAbits.RA7==1){key=(i)+1;puntero_funcion(key);while(PORTAbits.RA7
      +                          ==1){};}
  3019  00E8EE  AE80               	btfss	3968,7,c	;volatile
  3020  00E8F0  D012               	goto	l437
  3021  00E8F2  283C               	incf	guardar_tecla_presionada@i,w,c
  3022  00E8F4  6E49               	movwf	_key,c
  3023  00E8F6  D801               	call	u3398
  3024  00E8F8  D00C               	goto	l438
  3025  00E8FA                     u3398:
  3026  00E8FA  0005               	push	
  3027  00E8FC  0100               	movlb	0	; () banked
  3028  00E8FE  6EFA               	movwf	pclath,c
  3029  00E900  519E               	movf	_puntero_funcion& (0+255),w,b
  3030  00E902  6EFD               	movwf	tosl,c
  3031  00E904  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3032  00E906  6EFE               	movwf	tosh,c
  3033  00E908  50F8               	movf	tblptru,w,c
  3034  00E90A  6EFF               	movwf	tosu,c
  3035  00E90C  50FA               	movf	pclath,w,c
  3036  00E90E  5049               	movf	_key,w,c
  3037  00E910  0012               	return		;indir
  3038  00E912                     l438:
  3039  00E912  BE80               	btfsc	3968,7,c	;volatile
  3040  00E914  D7FE               	goto	l438
  3041  00E916                     l437:
  3042                           
  3043                           ;teclado.c: 54: if (PORTAbits.RA6==1){key=(i)+2;puntero_funcion(key);while(PORTAbits.RA6
      +                          ==1){};}
  3044  00E916  AC80               	btfss	3968,6,c	;volatile
  3045  00E918  0012               	return	
  3046  00E91A  503C               	movf	guardar_tecla_presionada@i,w,c
  3047  00E91C  0F02               	addlw	2
  3048  00E91E  6E49               	movwf	_key,c
  3049  00E920  D801               	call	u3428
  3050  00E922  D00C               	goto	l442
  3051  00E924                     u3428:
  3052  00E924  0005               	push	
  3053  00E926  0100               	movlb	0	; () banked
  3054  00E928  6EFA               	movwf	pclath,c
  3055  00E92A  519E               	movf	_puntero_funcion& (0+255),w,b
  3056  00E92C  6EFD               	movwf	tosl,c
  3057  00E92E  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3058  00E930  6EFE               	movwf	tosh,c
  3059  00E932  50F8               	movf	tblptru,w,c
  3060  00E934  6EFF               	movwf	tosu,c
  3061  00E936  50FA               	movf	pclath,w,c
  3062  00E938  5049               	movf	_key,w,c
  3063  00E93A  0012               	return		;indir
  3064  00E93C                     l442:
  3065  00E93C  AC80               	btfss	3968,6,c	;volatile
  3066  00E93E  0012               	return	
  3067  00E940  D7FD               	goto	l442
  3068  00E942  0012               	return	
  3069  00E944  0012               	return		;funcret
  3070  00E946                     __end_of_guardar_tecla_presionada:
  3071                           	opt stack 0
  3072                           tosu	equ	0xFFF
  3073                           tosh	equ	0xFFE
  3074                           tosl	equ	0xFFD
  3075                           pclath	equ	0xFFA
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           postinc1	equ	0xFE6
  3083                           postdec1	equ	0xFE5
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _accionar_alarma *****************
  3093 ;; Defined at:
  3094 ;;		line 263 in file "main.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;		None               void
  3101 ;; Registers used:
  3102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3112 ;;Total ram usage:        0 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    7
  3115 ;; This function calls:
  3116 ;;		_clear_display
  3117 ;;		_menu_ingresar_password
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;;		_leer_teclado
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text9
  3125  00E354                     __ptext9:
  3126                           	opt stack 0
  3127  00E354                     _accionar_alarma:
  3128                           	opt stack 22
  3129                           
  3130                           ;main.c: 265: *current_password = 0;
  3131                           
  3132                           ;incstack = 0
  3133  00E354  0E00               	movlw	0
  3134  00E356  0100               	movlb	0	; () banked
  3135  00E358  6FBE               	movwf	_current_password& (0+255),b
  3136                           
  3137                           ;main.c: 266: autorizado = 0;
  3138  00E35A  0E00               	movlw	0
  3139  00E35C  6E46               	movwf	_autorizado+1,c
  3140  00E35E  0E00               	movlw	0
  3141  00E360  6E45               	movwf	_autorizado,c
  3142                           
  3143                           ;main.c: 267: tamanio_password = 0;
  3144  00E362  0E00               	movlw	0
  3145  00E364  6E59               	movwf	_tamanio_password+1,c
  3146  00E366  0E00               	movlw	0
  3147  00E368  6E58               	movwf	_tamanio_password,c
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 269: if(encendida){
  3151  00E36A  0100               	movlb	0	; () banked
  3152  00E36C  518A               	movf	_encendida& (0+255),w,b
  3153  00E36E  0100               	movlb	0	; () banked
  3154  00E370  118B               	iorwf	(_encendida+1)& (0+255),w,b
  3155  00E372  B4D8               	btfsc	status,2,c
  3156  00E374  D007               	goto	l3983
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 270: encendida = 0;
  3160  00E376  0E00               	movlw	0
  3161  00E378  0100               	movlb	0	; () banked
  3162  00E37A  6F8B               	movwf	(_encendida+1)& (0+255),b
  3163  00E37C  0E00               	movlw	0
  3164  00E37E  6F8A               	movwf	_encendida& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 271: LATBbits.LATB1 = 0;;
  3168  00E380  928A               	bcf	3978,1,c	;volatile
  3169                           
  3170                           ;main.c: 272: }else
  3171  00E382  D006               	goto	l3985
  3172  00E384                     l3983:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 273: encendida = 1;
  3176  00E384  0E00               	movlw	0
  3177  00E386  0100               	movlb	0	; () banked
  3178  00E388  6F8B               	movwf	(_encendida+1)& (0+255),b
  3179  00E38A  0E01               	movlw	1
  3180  00E38C  6F8A               	movwf	_encendida& (0+255),b
  3181  00E38E  D000               	goto	l3985
  3182  00E390                     l3985:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 275: puntero_funcion = mostrar_guardar_password;
  3186  00E390  0E02               	movlw	low _mostrar_guardar_password
  3187  00E392  0100               	movlb	0	; () banked
  3188  00E394  6F9E               	movwf	_puntero_funcion& (0+255),b
  3189  00E396  0EE0               	movlw	high _mostrar_guardar_password
  3190  00E398  0100               	movlb	0	; () banked
  3191  00E39A  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 276: funcion_pulsador_A = ingresar_comando;
  3195  00E39C  0EEC               	movlw	low _ingresar_comando
  3196  00E39E  0100               	movlb	0	; () banked
  3197  00E3A0  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  3198  00E3A2  0EDB               	movlw	high _ingresar_comando
  3199  00E3A4  0100               	movlb	0	; () banked
  3200  00E3A6  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 277: clear_display(tamanio_password+1);
  3204  00E3A8  0E01               	movlw	1
  3205  00E3AA  2458               	addwf	_tamanio_password,w,c
  3206  00E3AC  6E0B               	movwf	clear_display@pos,c
  3207  00E3AE  0E00               	movlw	0
  3208  00E3B0  2059               	addwfc	_tamanio_password+1,w,c
  3209  00E3B2  6E0C               	movwf	clear_display@pos+1,c
  3210  00E3B4  EC0F  F06F         	call	_clear_display
  3211                           
  3212                           ;main.c: 278: menu_ingresar_password();
  3213  00E3B8  EC54  F076         	call	_menu_ingresar_password	;wreg free
  3214  00E3BC  0012               	return		;funcret
  3215  00E3BE                     __end_of_accionar_alarma:
  3216                           	opt stack 0
  3217                           tosu	equ	0xFFF
  3218                           tosh	equ	0xFFE
  3219                           tosl	equ	0xFFD
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           postinc1	equ	0xFE6
  3228                           postdec1	equ	0xFE5
  3229                           fsr1h	equ	0xFE2
  3230                           fsr1l	equ	0xFE1
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _ingresar_comando *****************
  3238 ;; Defined at:
  3239 ;;		line 152 in file "main.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  key             1    wreg     unsigned char 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  key             1   58[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;		None               void
  3246 ;; Registers used:
  3247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;Total ram usage:        1 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    3
  3260 ;; This function calls:
  3261 ;;		_guardar_comando
  3262 ;; This function is called by:
  3263 ;;		_accionar_alarma
  3264 ;;		_main
  3265 ;;		_guardar_tecla_presionada
  3266 ;;		_leer_teclado
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text10
  3271  00DBEC                     __ptext10:
  3272                           	opt stack 0
  3273  00DBEC                     _ingresar_comando:
  3274                           	opt stack 26
  3275                           
  3276                           ;incstack = 0
  3277                           ;ingresar_comando@key stored from wreg
  3278  00DBEC  6E3B               	movwf	ingresar_comando@key,c
  3279                           
  3280                           ;main.c: 153: guardar_comando(key);
  3281  00DBEE  503B               	movf	ingresar_comando@key,w,c
  3282  00DBF0  EC4A  F071         	call	_guardar_comando
  3283  00DBF4  0012               	return		;funcret
  3284  00DBF6                     __end_of_ingresar_comando:
  3285                           	opt stack 0
  3286                           tosu	equ	0xFFF
  3287                           tosh	equ	0xFFE
  3288                           tosl	equ	0xFFD
  3289                           pclath	equ	0xFFA
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           postinc1	equ	0xFE6
  3297                           postdec1	equ	0xFE5
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _confirmar_actualizar_password *****************
  3307 ;; Defined at:
  3308 ;;		line 145 in file "main.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  tecla           1    wreg     unsigned char 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  tecla           1   56[COMRAM] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;		None               void
  3315 ;; Registers used:
  3316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3326 ;;Total ram usage:        1 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    6
  3329 ;; This function calls:
  3330 ;;		_actualizar_password
  3331 ;;		_imprimir_tecla
  3332 ;;		_sprintf
  3333 ;; This function is called by:
  3334 ;;		_menu_cambiar_password
  3335 ;;		_guardar_tecla_presionada
  3336 ;;		_leer_teclado
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text11
  3341  00DF7A                     __ptext11:
  3342                           	opt stack 0
  3343  00DF7A                     _confirmar_actualizar_password:
  3344                           	opt stack 22
  3345                           
  3346                           ;incstack = 0
  3347                           ;confirmar_actualizar_password@tecla stored from wreg
  3348  00DF7A  6E39               	movwf	confirmar_actualizar_password@tecla,c
  3349                           
  3350                           ;main.c: 147: imprimir_tecla(tecla);
  3351  00DF7C  5039               	movf	confirmar_actualizar_password@tecla,w,c
  3352  00DF7E  EC32  F070         	call	_imprimir_tecla
  3353                           
  3354                           ;main.c: 148: sprintf(buffer2,"%01u",tecla);
  3355  00DF82  0EAA               	movlw	low _buffer2
  3356  00DF84  6E0D               	movwf	sprintf@sp,c
  3357  00DF86  0E00               	movlw	high _buffer2
  3358  00DF88  6E0E               	movwf	sprintf@sp+1,c
  3359  00DF8A  0EE9               	movlw	low STR_8
  3360  00DF8C  6E0F               	movwf	sprintf@f,c
  3361  00DF8E  0EFF               	movlw	high STR_8
  3362  00DF90  6E10               	movwf	sprintf@f+1,c
  3363  00DF92  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  3364  00DF96  6A12               	clrf	?_sprintf+5,c
  3365  00DF98  ECC9  F07D         	call	_sprintf	;wreg free
  3366                           
  3367                           ;main.c: 149: actualizar_password(buffer2[0]);
  3368  00DF9C  0100               	movlb	0	; () banked
  3369  00DF9E  51AA               	movf	_buffer2& (0+255),w,b
  3370  00DFA0  EC08  F076         	call	_actualizar_password
  3371  00DFA4  0012               	return		;funcret
  3372  00DFA6                     __end_of_confirmar_actualizar_password:
  3373                           	opt stack 0
  3374                           tosu	equ	0xFFF
  3375                           tosh	equ	0xFFE
  3376                           tosl	equ	0xFFD
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           postinc1	equ	0xFE6
  3385                           postdec1	equ	0xFE5
  3386                           fsr1h	equ	0xFE2
  3387                           fsr1l	equ	0xFE1
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _mostrar_guardar_nuevo_password *****************
  3395 ;; Defined at:
  3396 ;;		line 138 in file "main.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  tecla           1    wreg     unsigned char 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  tecla           1   56[COMRAM] unsigned char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;		None               void
  3403 ;; Registers used:
  3404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3414 ;;Total ram usage:        1 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    6
  3417 ;; This function calls:
  3418 ;;		_guardar_nuevo_password
  3419 ;;		_imprimir_tecla
  3420 ;;		_sprintf
  3421 ;; This function is called by:
  3422 ;;		_menu_cambiar_password
  3423 ;;		_guardar_tecla_presionada
  3424 ;;		_leer_teclado
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text12
  3429  00DF4E                     __ptext12:
  3430                           	opt stack 0
  3431  00DF4E                     _mostrar_guardar_nuevo_password:
  3432                           	opt stack 23
  3433                           
  3434                           ;incstack = 0
  3435                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  3436  00DF4E  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  3437                           
  3438                           ;main.c: 140: imprimir_tecla(tecla);
  3439  00DF50  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  3440  00DF52  EC32  F070         	call	_imprimir_tecla
  3441                           
  3442                           ;main.c: 141: sprintf(buffer2,"%01u",tecla);
  3443  00DF56  0EAA               	movlw	low _buffer2
  3444  00DF58  6E0D               	movwf	sprintf@sp,c
  3445  00DF5A  0E00               	movlw	high _buffer2
  3446  00DF5C  6E0E               	movwf	sprintf@sp+1,c
  3447  00DF5E  0EE9               	movlw	low STR_8
  3448  00DF60  6E0F               	movwf	sprintf@f,c
  3449  00DF62  0EFF               	movlw	high STR_8
  3450  00DF64  6E10               	movwf	sprintf@f+1,c
  3451  00DF66  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  3452  00DF6A  6A12               	clrf	?_sprintf+5,c
  3453  00DF6C  ECC9  F07D         	call	_sprintf	;wreg free
  3454                           
  3455                           ;main.c: 142: guardar_nuevo_password(*buffer2);
  3456  00DF70  0100               	movlb	0	; () banked
  3457  00DF72  51AA               	movf	_buffer2& (0+255),w,b
  3458  00DF74  ECA4  F06E         	call	_guardar_nuevo_password
  3459  00DF78  0012               	return		;funcret
  3460  00DF7A                     __end_of_mostrar_guardar_nuevo_password:
  3461                           	opt stack 0
  3462                           tosu	equ	0xFFF
  3463                           tosh	equ	0xFFE
  3464                           tosl	equ	0xFFD
  3465                           pclath	equ	0xFFA
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postinc1	equ	0xFE6
  3473                           postdec1	equ	0xFE5
  3474                           fsr1h	equ	0xFE2
  3475                           fsr1l	equ	0xFE1
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _mostrar_guardar_password *****************
  3483 ;; Defined at:
  3484 ;;		line 123 in file "main.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  tecla           1    wreg     unsigned char 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  tecla           1   56[COMRAM] unsigned char 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;		None               void
  3491 ;; Registers used:
  3492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3502 ;;Total ram usage:        1 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    7
  3505 ;; This function calls:
  3506 ;;		_guardar_current_password
  3507 ;;		_imprimir_tecla
  3508 ;;		_menu_ingresar_password
  3509 ;;		_sprintf
  3510 ;; This function is called by:
  3511 ;;		_desactivar_alarma
  3512 ;;		_accionar_alarma
  3513 ;;		_guardar_tecla_presionada
  3514 ;;		_leer_teclado
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text13
  3519  00E002                     __ptext13:
  3520                           	opt stack 0
  3521  00E002                     _mostrar_guardar_password:
  3522                           	opt stack 22
  3523                           
  3524                           ;incstack = 0
  3525                           ;mostrar_guardar_password@tecla stored from wreg
  3526  00E002  6E39               	movwf	mostrar_guardar_password@tecla,c
  3527                           
  3528                           ;main.c: 125: imprimir_tecla(tecla);
  3529  00E004  5039               	movf	mostrar_guardar_password@tecla,w,c
  3530  00E006  EC32  F070         	call	_imprimir_tecla
  3531                           
  3532                           ;main.c: 126: sprintf(buffer2,"%01u",tecla);
  3533  00E00A  0EAA               	movlw	low _buffer2
  3534  00E00C  6E0D               	movwf	sprintf@sp,c
  3535  00E00E  0E00               	movlw	high _buffer2
  3536  00E010  6E0E               	movwf	sprintf@sp+1,c
  3537  00E012  0EE9               	movlw	low STR_8
  3538  00E014  6E0F               	movwf	sprintf@f,c
  3539  00E016  0EFF               	movlw	high STR_8
  3540  00E018  6E10               	movwf	sprintf@f+1,c
  3541  00E01A  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  3542  00E01E  6A12               	clrf	?_sprintf+5,c
  3543  00E020  ECC9  F07D         	call	_sprintf	;wreg free
  3544                           
  3545                           ;main.c: 127: guardar_current_password(*buffer2);
  3546  00E024  0100               	movlb	0	; () banked
  3547  00E026  51AA               	movf	_buffer2& (0+255),w,b
  3548  00E028  EC96  F06E         	call	_guardar_current_password
  3549                           
  3550                           ;main.c: 128: menu_ingresar_password();
  3551  00E02C  EC54  F076         	call	_menu_ingresar_password	;wreg free
  3552  00E030  0012               	return		;funcret
  3553  00E032                     __end_of_mostrar_guardar_password:
  3554                           	opt stack 0
  3555                           tosu	equ	0xFFF
  3556                           tosh	equ	0xFFE
  3557                           tosl	equ	0xFFD
  3558                           pclath	equ	0xFFA
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postinc1	equ	0xFE6
  3566                           postdec1	equ	0xFE5
  3567                           fsr1h	equ	0xFE2
  3568                           fsr1l	equ	0xFE1
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _cambiar_hora *****************
  3576 ;; Defined at:
  3577 ;;		line 165 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  tecla           1    wreg     unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  tecla           1   54[COMRAM] unsigned char 
  3582 ;;  validacion      2   52[COMRAM] int 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;		None               void
  3585 ;; Registers used:
  3586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3593 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3596 ;;Total ram usage:        3 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    6
  3599 ;; This function calls:
  3600 ;;		_guardar_elemento
  3601 ;; This function is called by:
  3602 ;;		_menu_cambiar_horario
  3603 ;;		_guardar_tecla_presionada
  3604 ;;		_leer_teclado
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text14
  3609  00E2F4                     __ptext14:
  3610                           	opt stack 0
  3611  00E2F4                     _cambiar_hora:
  3612                           	opt stack 22
  3613                           
  3614                           ;incstack = 0
  3615                           ;cambiar_hora@tecla stored from wreg
  3616  00E2F4  6E37               	movwf	cambiar_hora@tecla,c
  3617                           
  3618                           ;fecha.c: 167: valor_min = 0;
  3619  00E2F6  0E00               	movlw	0
  3620  00E2F8  0100               	movlb	0	; () banked
  3621  00E2FA  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3622  00E2FC  0E00               	movlw	0
  3623  00E2FE  6FA8               	movwf	fecha@valor_min& (0+255),b
  3624                           
  3625                           ;fecha.c: 168: valor_max = 23;
  3626  00E300  0E00               	movlw	0
  3627  00E302  0100               	movlb	0	; () banked
  3628  00E304  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  3629  00E306  0E17               	movlw	23
  3630  00E308  6FA6               	movwf	fecha@valor_max& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;fecha.c: 170: int validacion = tamanio_hora < 3 - 1;
  3634  00E30A  BE55               	btfsc	_tamanio_hora+1,7,c
  3635  00E30C  D006               	goto	u3231
  3636  00E30E  5055               	movf	_tamanio_hora+1,w,c
  3637  00E310  E106               	bnz	u3230
  3638  00E312  0E02               	movlw	2
  3639  00E314  5C54               	subwf	_tamanio_hora,w,c
  3640  00E316  B0D8               	btfsc	status,0,c
  3641  00E318  D002               	goto	u3230
  3642  00E31A                     u3231:
  3643  00E31A  0E01               	movlw	1
  3644  00E31C  D001               	goto	u3240
  3645  00E31E                     u3230:
  3646  00E31E  0E00               	movlw	0
  3647  00E320                     u3240:
  3648  00E320  6E35               	movwf	cambiar_hora@validacion,c
  3649  00E322  6A36               	clrf	cambiar_hora@validacion+1,c
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;fecha.c: 171: guardar_elemento(tecla,hour,&tamanio_hora,validacion,&hora,actualizar_hor
      +                          a);
  3653  00E324  0ED9               	movlw	low fecha@hour
  3654  00E326  6E24               	movwf	guardar_elemento@array,c
  3655  00E328  0E00               	movlw	high fecha@hour
  3656  00E32A  6E25               	movwf	guardar_elemento@array+1,c
  3657  00E32C  0E54               	movlw	low _tamanio_hora
  3658  00E32E  6E26               	movwf	guardar_elemento@tamanio_array,c
  3659  00E330  0E00               	movlw	high _tamanio_hora
  3660  00E332  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3661  00E334  C035  F028         	movff	cambiar_hora@validacion,guardar_elemento@validacion
  3662  00E338  C036  F029         	movff	cambiar_hora@validacion+1,guardar_elemento@validacion+1
  3663  00E33C  0EFB               	movlw	low _hora
  3664  00E33E  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3665  00E340  0E00               	movlw	high _hora
  3666  00E342  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3667  00E344  0E40               	movlw	low _actualizar_hora
  3668  00E346  6E2C               	movwf	guardar_elemento@doit,c
  3669  00E348  0EDE               	movlw	high _actualizar_hora
  3670  00E34A  6E2D               	movwf	guardar_elemento@doit+1,c
  3671  00E34C  5037               	movf	cambiar_hora@tecla,w,c
  3672  00E34E  ECE9  F07C         	call	_guardar_elemento
  3673  00E352  0012               	return		;funcret
  3674  00E354                     __end_of_cambiar_hora:
  3675                           	opt stack 0
  3676                           tosu	equ	0xFFF
  3677                           tosh	equ	0xFFE
  3678                           tosl	equ	0xFFD
  3679                           pclath	equ	0xFFA
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           postinc0	equ	0xFEE
  3685                           wreg	equ	0xFE8
  3686                           postinc1	equ	0xFE6
  3687                           postdec1	equ	0xFE5
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _cambiar_minutos *****************
  3697 ;; Defined at:
  3698 ;;		line 174 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  tecla           1    wreg     unsigned char 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  tecla           1   54[COMRAM] unsigned char 
  3703 ;;  validacion      2   52[COMRAM] int 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;		None               void
  3706 ;; Registers used:
  3707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3714 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3716 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3717 ;;Total ram usage:        4 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    6
  3720 ;; This function calls:
  3721 ;;		_guardar_elemento
  3722 ;; This function is called by:
  3723 ;;		_menu_cambiar_horario
  3724 ;;		_guardar_tecla_presionada
  3725 ;;		_leer_teclado
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text15
  3730  00E57C                     __ptext15:
  3731                           	opt stack 0
  3732  00E57C                     _cambiar_minutos:
  3733                           	opt stack 22
  3734                           
  3735                           ;incstack = 0
  3736                           ;cambiar_minutos@tecla stored from wreg
  3737  00E57C  6E37               	movwf	cambiar_minutos@tecla,c
  3738                           
  3739                           ;fecha.c: 176: valor_min = 0;
  3740  00E57E  0E00               	movlw	0
  3741  00E580  0100               	movlb	0	; () banked
  3742  00E582  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3743  00E584  0E00               	movlw	0
  3744  00E586  6FA8               	movwf	fecha@valor_min& (0+255),b
  3745                           
  3746                           ;fecha.c: 177: valor_max = 59;
  3747  00E588  0E00               	movlw	0
  3748  00E58A  0100               	movlb	0	; () banked
  3749  00E58C  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  3750  00E58E  0E3B               	movlw	59
  3751  00E590  6FA6               	movwf	fecha@valor_max& (0+255),b
  3752                           
  3753                           ;fecha.c: 179: int validacion = (tamanio_minutos < 3 - 1 && tamanio_hora == 0);
  3754  00E592  0E00               	movlw	0
  3755  00E594  6E38               	movwf	_cambiar_minutos$1440,c
  3756                           
  3757                           ; BSR set to: 0
  3758  00E596  0100               	movlb	0	; () banked
  3759  00E598  BFE8               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  3760  00E59A  D008               	goto	l3909
  3761  00E59C  0100               	movlb	0	; () banked
  3762  00E59E  51E8               	movf	(_tamanio_minutos+1)& (0+255),w,b
  3763  00E5A0  E10C               	bnz	l3913
  3764  00E5A2  0E02               	movlw	2
  3765  00E5A4  0100               	movlb	0	; () banked
  3766  00E5A6  5DE7               	subwf	_tamanio_minutos& (0+255),w,b
  3767  00E5A8  B0D8               	btfsc	status,0,c
  3768  00E5AA  D007               	goto	l3913
  3769  00E5AC                     l3909:
  3770                           
  3771                           ; BSR set to: 0
  3772  00E5AC  5054               	movf	_tamanio_hora,w,c
  3773  00E5AE  1055               	iorwf	_tamanio_hora+1,w,c
  3774  00E5B0  A4D8               	btfss	status,2,c
  3775  00E5B2  D003               	goto	l3913
  3776                           
  3777                           ; BSR set to: 0
  3778  00E5B4  0E01               	movlw	1
  3779  00E5B6  6E38               	movwf	_cambiar_minutos$1440,c
  3780  00E5B8  D000               	goto	l3913
  3781  00E5BA                     l3913:
  3782                           
  3783                           ; BSR set to: 0
  3784  00E5BA  C038  F035         	movff	_cambiar_minutos$1440,cambiar_minutos@validacion
  3785  00E5BE  6A36               	clrf	cambiar_minutos@validacion+1,c
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;fecha.c: 180: guardar_elemento(tecla,minutes,&tamanio_minutos,validacion,&minuto,actual
      +                          izar_minutos);
  3789  00E5C0  0EDC               	movlw	low fecha@minutes
  3790  00E5C2  6E24               	movwf	guardar_elemento@array,c
  3791  00E5C4  0E00               	movlw	high fecha@minutes
  3792  00E5C6  6E25               	movwf	guardar_elemento@array+1,c
  3793  00E5C8  0EE7               	movlw	low _tamanio_minutos
  3794  00E5CA  6E26               	movwf	guardar_elemento@tamanio_array,c
  3795  00E5CC  0E00               	movlw	high _tamanio_minutos
  3796  00E5CE  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3797  00E5D0  C035  F028         	movff	cambiar_minutos@validacion,guardar_elemento@validacion
  3798  00E5D4  C036  F029         	movff	cambiar_minutos@validacion+1,guardar_elemento@validacion+1
  3799  00E5D8  0EFD               	movlw	low _minuto
  3800  00E5DA  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3801  00E5DC  0E00               	movlw	high _minuto
  3802  00E5DE  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3803  00E5E0  0EDC               	movlw	low _actualizar_minutos
  3804  00E5E2  6E2C               	movwf	guardar_elemento@doit,c
  3805  00E5E4  0EDD               	movlw	high _actualizar_minutos
  3806  00E5E6  6E2D               	movwf	guardar_elemento@doit+1,c
  3807  00E5E8  5037               	movf	cambiar_minutos@tecla,w,c
  3808  00E5EA  ECE9  F07C         	call	_guardar_elemento
  3809  00E5EE  0012               	return		;funcret
  3810  00E5F0                     __end_of_cambiar_minutos:
  3811                           	opt stack 0
  3812                           tosu	equ	0xFFF
  3813                           tosh	equ	0xFFE
  3814                           tosl	equ	0xFFD
  3815                           pclath	equ	0xFFA
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postinc1	equ	0xFE6
  3823                           postdec1	equ	0xFE5
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           postinc2	equ	0xFDE
  3827                           postdec2	equ	0xFDD
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _cambiar_dia *****************
  3833 ;; Defined at:
  3834 ;;		line 86 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  tecla           1    wreg     unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  tecla           1   54[COMRAM] unsigned char 
  3839 ;;  validacion      2   52[COMRAM] int 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;		None               void
  3842 ;; Registers used:
  3843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3850 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3853 ;;Total ram usage:        3 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    6
  3856 ;; This function calls:
  3857 ;;		_guardar_elemento
  3858 ;;		_obtener_dia_mes
  3859 ;; This function is called by:
  3860 ;;		_menu_cambiar_fecha
  3861 ;;		_guardar_tecla_presionada
  3862 ;;		_leer_teclado
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text16
  3867  00E1DE                     __ptext16:
  3868                           	opt stack 0
  3869  00E1DE                     _cambiar_dia:
  3870                           	opt stack 22
  3871                           
  3872                           ;incstack = 0
  3873                           ;cambiar_dia@tecla stored from wreg
  3874  00E1DE  6E37               	movwf	cambiar_dia@tecla,c
  3875                           
  3876                           ;fecha.c: 88: valor_min = 1;
  3877  00E1E0  0E00               	movlw	0
  3878  00E1E2  0100               	movlb	0	; () banked
  3879  00E1E4  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3880  00E1E6  0E01               	movlw	1
  3881  00E1E8  6FA8               	movwf	fecha@valor_min& (0+255),b
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;fecha.c: 89: obtener_dia_mes();
  3885  00E1EA  ECEE  F077         	call	_obtener_dia_mes	;wreg free
  3886                           
  3887                           ;fecha.c: 91: int validacion = tamanio_dia < 3 - 1;
  3888  00E1EE  BE53               	btfsc	_tamanio_dia+1,7,c
  3889  00E1F0  D006               	goto	u3161
  3890  00E1F2  5053               	movf	_tamanio_dia+1,w,c
  3891  00E1F4  E106               	bnz	u3160
  3892  00E1F6  0E02               	movlw	2
  3893  00E1F8  5C52               	subwf	_tamanio_dia,w,c
  3894  00E1FA  B0D8               	btfsc	status,0,c
  3895  00E1FC  D002               	goto	u3160
  3896  00E1FE                     u3161:
  3897  00E1FE  0E01               	movlw	1
  3898  00E200  D001               	goto	u3170
  3899  00E202                     u3160:
  3900  00E202  0E00               	movlw	0
  3901  00E204                     u3170:
  3902  00E204  6E35               	movwf	cambiar_dia@validacion,c
  3903  00E206  6A36               	clrf	cambiar_dia@validacion+1,c
  3904                           
  3905                           ;fecha.c: 92: guardar_elemento(tecla,day,&tamanio_dia,validacion,&dia,actualiza_dia);
  3906  00E208  0ED6               	movlw	low fecha@day
  3907  00E20A  6E24               	movwf	guardar_elemento@array,c
  3908  00E20C  0E00               	movlw	high fecha@day
  3909  00E20E  6E25               	movwf	guardar_elemento@array+1,c
  3910  00E210  0E52               	movlw	low _tamanio_dia
  3911  00E212  6E26               	movwf	guardar_elemento@tamanio_array,c
  3912  00E214  0E00               	movlw	high _tamanio_dia
  3913  00E216  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3914  00E218  C035  F028         	movff	cambiar_dia@validacion,guardar_elemento@validacion
  3915  00E21C  C036  F029         	movff	cambiar_dia@validacion+1,guardar_elemento@validacion+1
  3916  00E220  0EF9               	movlw	low _dia
  3917  00E222  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3918  00E224  0E00               	movlw	high _dia
  3919  00E226  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3920  00E228  0E80               	movlw	low _actualiza_dia
  3921  00E22A  6E2C               	movwf	guardar_elemento@doit,c
  3922  00E22C  0EDD               	movlw	high _actualiza_dia
  3923  00E22E  6E2D               	movwf	guardar_elemento@doit+1,c
  3924  00E230  5037               	movf	cambiar_dia@tecla,w,c
  3925  00E232  ECE9  F07C         	call	_guardar_elemento
  3926  00E236  0012               	return		;funcret
  3927  00E238                     __end_of_cambiar_dia:
  3928                           	opt stack 0
  3929                           tosu	equ	0xFFF
  3930                           tosh	equ	0xFFE
  3931                           tosl	equ	0xFFD
  3932                           pclath	equ	0xFFA
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postinc1	equ	0xFE6
  3940                           postdec1	equ	0xFE5
  3941                           fsr1h	equ	0xFE2
  3942                           fsr1l	equ	0xFE1
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _cambiar_mes *****************
  3950 ;; Defined at:
  3951 ;;		line 96 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  tecla           1    wreg     unsigned char 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  tecla           1   54[COMRAM] unsigned char 
  3956 ;;  validacion      2   52[COMRAM] int 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;		None               void
  3959 ;; Registers used:
  3960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3967 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3969 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3970 ;;Total ram usage:        4 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    6
  3973 ;; This function calls:
  3974 ;;		_guardar_elemento
  3975 ;; This function is called by:
  3976 ;;		_menu_cambiar_fecha
  3977 ;;		_guardar_tecla_presionada
  3978 ;;		_leer_teclado
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text17
  3983  00E42C                     __ptext17:
  3984                           	opt stack 0
  3985  00E42C                     _cambiar_mes:
  3986                           	opt stack 22
  3987                           
  3988                           ;incstack = 0
  3989                           ;cambiar_mes@tecla stored from wreg
  3990  00E42C  6E37               	movwf	cambiar_mes@tecla,c
  3991                           
  3992                           ;fecha.c: 98: valor_min = 1;
  3993  00E42E  0E00               	movlw	0
  3994  00E430  0100               	movlb	0	; () banked
  3995  00E432  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3996  00E434  0E01               	movlw	1
  3997  00E436  6FA8               	movwf	fecha@valor_min& (0+255),b
  3998                           
  3999                           ;fecha.c: 99: valor_max = 12;
  4000  00E438  0E00               	movlw	0
  4001  00E43A  0100               	movlb	0	; () banked
  4002  00E43C  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  4003  00E43E  0E0C               	movlw	12
  4004  00E440  6FA6               	movwf	fecha@valor_max& (0+255),b
  4005                           
  4006                           ;fecha.c: 101: int validacion = (tamanio_mes < 3 - 1 && tamanio_dia == 0);
  4007  00E442  0E00               	movlw	0
  4008  00E444  6E38               	movwf	_cambiar_mes$1417,c
  4009                           
  4010                           ; BSR set to: 0
  4011  00E446  BE57               	btfsc	_tamanio_mes+1,7,c
  4012  00E448  D006               	goto	l3877
  4013  00E44A  5057               	movf	_tamanio_mes+1,w,c
  4014  00E44C  E10B               	bnz	l3881
  4015  00E44E  0E02               	movlw	2
  4016  00E450  5C56               	subwf	_tamanio_mes,w,c
  4017  00E452  B0D8               	btfsc	status,0,c
  4018  00E454  D007               	goto	l3881
  4019  00E456                     l3877:
  4020                           
  4021                           ; BSR set to: 0
  4022  00E456  5052               	movf	_tamanio_dia,w,c
  4023  00E458  1053               	iorwf	_tamanio_dia+1,w,c
  4024  00E45A  A4D8               	btfss	status,2,c
  4025  00E45C  D003               	goto	l3881
  4026                           
  4027                           ; BSR set to: 0
  4028  00E45E  0E01               	movlw	1
  4029  00E460  6E38               	movwf	_cambiar_mes$1417,c
  4030  00E462  D000               	goto	l3881
  4031  00E464                     l3881:
  4032                           
  4033                           ; BSR set to: 0
  4034  00E464  C038  F035         	movff	_cambiar_mes$1417,cambiar_mes@validacion
  4035  00E468  6A36               	clrf	cambiar_mes@validacion+1,c
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;fecha.c: 102: guardar_elemento(tecla,month,&tamanio_mes,validacion,&mes,actualiza_eleme
      +                          nto);
  4039  00E46A  0EDF               	movlw	low fecha@month
  4040  00E46C  6E24               	movwf	guardar_elemento@array,c
  4041  00E46E  0E00               	movlw	high fecha@month
  4042  00E470  6E25               	movwf	guardar_elemento@array+1,c
  4043  00E472  0E56               	movlw	low _tamanio_mes
  4044  00E474  6E26               	movwf	guardar_elemento@tamanio_array,c
  4045  00E476  0E00               	movlw	high _tamanio_mes
  4046  00E478  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  4047  00E47A  C035  F028         	movff	cambiar_mes@validacion,guardar_elemento@validacion
  4048  00E47E  C036  F029         	movff	cambiar_mes@validacion+1,guardar_elemento@validacion+1
  4049  00E482  0E5C               	movlw	low _mes
  4050  00E484  6E2A               	movwf	guardar_elemento@dato_fecha,c
  4051  00E486  0E00               	movlw	high _mes
  4052  00E488  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  4053  00E48A  0EE2               	movlw	low _actualiza_elemento
  4054  00E48C  6E2C               	movwf	guardar_elemento@doit,c
  4055  00E48E  0EDC               	movlw	high _actualiza_elemento
  4056  00E490  6E2D               	movwf	guardar_elemento@doit+1,c
  4057  00E492  5037               	movf	cambiar_mes@tecla,w,c
  4058  00E494  ECE9  F07C         	call	_guardar_elemento
  4059  00E498  0012               	return		;funcret
  4060  00E49A                     __end_of_cambiar_mes:
  4061                           	opt stack 0
  4062                           tosu	equ	0xFFF
  4063                           tosh	equ	0xFFE
  4064                           tosl	equ	0xFFD
  4065                           pclath	equ	0xFFA
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           postinc1	equ	0xFE6
  4073                           postdec1	equ	0xFE5
  4074                           fsr1h	equ	0xFE2
  4075                           fsr1l	equ	0xFE1
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           fsr2h	equ	0xFDA
  4079                           fsr2l	equ	0xFD9
  4080                           status	equ	0xFD8
  4081                           
  4082 ;; *************** function _cambiar_anio *****************
  4083 ;; Defined at:
  4084 ;;		line 106 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  tecla           1    wreg     unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  tecla           1   54[COMRAM] unsigned char 
  4089 ;;  validacion      2   52[COMRAM] int 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;		None               void
  4092 ;; Registers used:
  4093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4100 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4102 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4103 ;;Total ram usage:        4 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    6
  4106 ;; This function calls:
  4107 ;;		_guardar_elemento
  4108 ;; This function is called by:
  4109 ;;		_menu_cambiar_fecha
  4110 ;;		_guardar_tecla_presionada
  4111 ;;		_leer_teclado
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text18
  4116  00E7CA                     __ptext18:
  4117                           	opt stack 0
  4118  00E7CA                     _cambiar_anio:
  4119                           	opt stack 22
  4120                           
  4121                           ;incstack = 0
  4122                           ;cambiar_anio@tecla stored from wreg
  4123  00E7CA  6E37               	movwf	cambiar_anio@tecla,c
  4124                           
  4125                           ;fecha.c: 108: valor_min = 16;
  4126  00E7CC  0E00               	movlw	0
  4127  00E7CE  0100               	movlb	0	; () banked
  4128  00E7D0  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  4129  00E7D2  0E10               	movlw	16
  4130  00E7D4  6FA8               	movwf	fecha@valor_min& (0+255),b
  4131                           
  4132                           ;fecha.c: 109: valor_max = 99;
  4133  00E7D6  0E00               	movlw	0
  4134  00E7D8  0100               	movlb	0	; () banked
  4135  00E7DA  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  4136  00E7DC  0E63               	movlw	99
  4137  00E7DE  6FA6               	movwf	fecha@valor_max& (0+255),b
  4138                           
  4139                           ;fecha.c: 111: int validacion = (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia
      +                           == 0);
  4140  00E7E0  0E00               	movlw	0
  4141  00E7E2  6E38               	movwf	_cambiar_anio$1421,c
  4142                           
  4143                           ; BSR set to: 0
  4144  00E7E4  0100               	movlb	0	; () banked
  4145  00E7E6  BFE6               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  4146  00E7E8  D008               	goto	l3889
  4147  00E7EA  0100               	movlb	0	; () banked
  4148  00E7EC  51E6               	movf	(_tamanio_anio+1)& (0+255),w,b
  4149  00E7EE  E110               	bnz	l3895
  4150  00E7F0  0E02               	movlw	2
  4151  00E7F2  0100               	movlb	0	; () banked
  4152  00E7F4  5DE5               	subwf	_tamanio_anio& (0+255),w,b
  4153  00E7F6  B0D8               	btfsc	status,0,c
  4154  00E7F8  D00B               	goto	l3895
  4155  00E7FA                     l3889:
  4156                           
  4157                           ; BSR set to: 0
  4158  00E7FA  5056               	movf	_tamanio_mes,w,c
  4159  00E7FC  1057               	iorwf	_tamanio_mes+1,w,c
  4160  00E7FE  A4D8               	btfss	status,2,c
  4161  00E800  D007               	goto	l3895
  4162                           
  4163                           ; BSR set to: 0
  4164  00E802  5052               	movf	_tamanio_dia,w,c
  4165  00E804  1053               	iorwf	_tamanio_dia+1,w,c
  4166  00E806  A4D8               	btfss	status,2,c
  4167  00E808  D003               	goto	l3895
  4168                           
  4169                           ; BSR set to: 0
  4170  00E80A  0E01               	movlw	1
  4171  00E80C  6E38               	movwf	_cambiar_anio$1421,c
  4172  00E80E  D000               	goto	l3895
  4173  00E810                     l3895:
  4174                           
  4175                           ; BSR set to: 0
  4176  00E810  C038  F035         	movff	_cambiar_anio$1421,cambiar_anio@validacion
  4177  00E814  6A36               	clrf	cambiar_anio@validacion+1,c
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;fecha.c: 112: guardar_elemento(tecla,year,&tamanio_anio,validacion,&anio,actualiza_elem
      +                          ento);
  4181  00E816  0EE2               	movlw	low fecha@year
  4182  00E818  6E24               	movwf	guardar_elemento@array,c
  4183  00E81A  0E00               	movlw	high fecha@year
  4184  00E81C  6E25               	movwf	guardar_elemento@array+1,c
  4185  00E81E  0EE5               	movlw	low _tamanio_anio
  4186  00E820  6E26               	movwf	guardar_elemento@tamanio_array,c
  4187  00E822  0E00               	movlw	high _tamanio_anio
  4188  00E824  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  4189  00E826  C035  F028         	movff	cambiar_anio@validacion,guardar_elemento@validacion
  4190  00E82A  C036  F029         	movff	cambiar_anio@validacion+1,guardar_elemento@validacion+1
  4191  00E82E  0E5A               	movlw	low _anio
  4192  00E830  6E2A               	movwf	guardar_elemento@dato_fecha,c
  4193  00E832  0E00               	movlw	high _anio
  4194  00E834  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  4195  00E836  0EE2               	movlw	low _actualiza_elemento
  4196  00E838  6E2C               	movwf	guardar_elemento@doit,c
  4197  00E83A  0EDC               	movlw	high _actualiza_elemento
  4198  00E83C  6E2D               	movwf	guardar_elemento@doit+1,c
  4199  00E83E  5037               	movf	cambiar_anio@tecla,w,c
  4200  00E840  ECE9  F07C         	call	_guardar_elemento
  4201  00E844  0012               	return		;funcret
  4202  00E846                     __end_of_cambiar_anio:
  4203                           	opt stack 0
  4204                           tosu	equ	0xFFF
  4205                           tosh	equ	0xFFE
  4206                           tosl	equ	0xFFD
  4207                           pclath	equ	0xFFA
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postinc1	equ	0xFE6
  4215                           postdec1	equ	0xFE5
  4216                           fsr1h	equ	0xFE2
  4217                           fsr1l	equ	0xFE1
  4218                           postinc2	equ	0xFDE
  4219                           postdec2	equ	0xFDD
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _mostrar_guardar_temporal_password *****************
  4225 ;; Defined at:
  4226 ;;		line 131 in file "main.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  tecla           1    wreg     unsigned char 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  tecla           1   56[COMRAM] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;		None               void
  4233 ;; Registers used:
  4234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4244 ;;Total ram usage:        1 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    6
  4247 ;; This function calls:
  4248 ;;		_guardar_password_temporal
  4249 ;;		_imprimir_tecla
  4250 ;;		_sprintf
  4251 ;; This function is called by:
  4252 ;;		_menu_cambiar_password
  4253 ;;		_guardar_tecla_presionada
  4254 ;;		_leer_teclado
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text19
  4259  00DF22                     __ptext19:
  4260                           	opt stack 0
  4261  00DF22                     _mostrar_guardar_temporal_password:
  4262                           	opt stack 23
  4263                           
  4264                           ;incstack = 0
  4265                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  4266  00DF22  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  4267                           
  4268                           ;main.c: 133: imprimir_tecla(tecla);
  4269  00DF24  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  4270  00DF26  EC32  F070         	call	_imprimir_tecla
  4271                           
  4272                           ;main.c: 134: sprintf(buffer2,"%01u",tecla);
  4273  00DF2A  0EAA               	movlw	low _buffer2
  4274  00DF2C  6E0D               	movwf	sprintf@sp,c
  4275  00DF2E  0E00               	movlw	high _buffer2
  4276  00DF30  6E0E               	movwf	sprintf@sp+1,c
  4277  00DF32  0EE9               	movlw	low STR_8
  4278  00DF34  6E0F               	movwf	sprintf@f,c
  4279  00DF36  0EFF               	movlw	high STR_8
  4280  00DF38  6E10               	movwf	sprintf@f+1,c
  4281  00DF3A  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  4282  00DF3E  6A12               	clrf	?_sprintf+5,c
  4283  00DF40  ECC9  F07D         	call	_sprintf	;wreg free
  4284                           
  4285                           ;main.c: 135: guardar_password_temporal(*buffer2);
  4286  00DF44  0100               	movlb	0	; () banked
  4287  00DF46  51AA               	movf	_buffer2& (0+255),w,b
  4288  00DF48  ECB2  F06E         	call	_guardar_password_temporal
  4289  00DF4C  0012               	return		;funcret
  4290  00DF4E                     __end_of_mostrar_guardar_temporal_password:
  4291                           	opt stack 0
  4292                           tosu	equ	0xFFF
  4293                           tosh	equ	0xFFE
  4294                           tosl	equ	0xFFD
  4295                           pclath	equ	0xFFA
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postinc1	equ	0xFE6
  4303                           postdec1	equ	0xFE5
  4304                           fsr1h	equ	0xFE2
  4305                           fsr1l	equ	0xFE1
  4306                           postinc2	equ	0xFDE
  4307                           postdec2	equ	0xFDD
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _guardar_password_temporal *****************
  4313 ;; Defined at:
  4314 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  valor           1    wreg     const unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  valor           1    7[COMRAM] const unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;		None               void
  4321 ;; Registers used:
  4322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4329 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4331 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4332 ;;Total ram usage:        1 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    1
  4335 ;; This function calls:
  4336 ;;		_guardar_elemento_arreglo
  4337 ;; This function is called by:
  4338 ;;		_mostrar_guardar_temporal_password
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text20
  4343  00DD64                     __ptext20:
  4344                           	opt stack 0
  4345  00DD64                     _guardar_password_temporal:
  4346                           	opt stack 27
  4347                           
  4348                           ;incstack = 0
  4349                           ;guardar_password_temporal@valor stored from wreg
  4350  00DD64  6E08               	movwf	guardar_password_temporal@valor,c
  4351                           
  4352                           ;alarma.c: 54: guardar_elemento_arreglo(temporal,valor, &tamanio_password );
  4353  00DD66  0ECC               	movlw	low _temporal
  4354  00DD68  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4355  00DD6A  0E00               	movlw	high _temporal
  4356  00DD6C  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4357  00DD6E  C008  F003         	movff	guardar_password_temporal@valor,guardar_elemento_arreglo@valor
  4358  00DD72  0E58               	movlw	low _tamanio_password
  4359  00DD74  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4360  00DD76  0E00               	movlw	high _tamanio_password
  4361  00DD78  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4362  00DD7A  EC6E  F073         	call	_guardar_elemento_arreglo	;wreg free
  4363  00DD7E  0012               	return		;funcret
  4364  00DD80                     __end_of_guardar_password_temporal:
  4365                           	opt stack 0
  4366                           tosu	equ	0xFFF
  4367                           tosh	equ	0xFFE
  4368                           tosl	equ	0xFFD
  4369                           pclath	equ	0xFFA
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           postinc1	equ	0xFE6
  4377                           postdec1	equ	0xFE5
  4378                           fsr1h	equ	0xFE2
  4379                           fsr1l	equ	0xFE1
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _guardar_nuevo_password *****************
  4387 ;; Defined at:
  4388 ;;		line 57 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  valor           1    wreg     unsigned char 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  valor           1    7[COMRAM] unsigned char 
  4393 ;; Return value:  Size  Location     Type
  4394 ;;		None               void
  4395 ;; Registers used:
  4396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4406 ;;Total ram usage:        1 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    1
  4409 ;; This function calls:
  4410 ;;		_guardar_elemento_arreglo
  4411 ;; This function is called by:
  4412 ;;		_mostrar_guardar_nuevo_password
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text21
  4417  00DD48                     __ptext21:
  4418                           	opt stack 0
  4419  00DD48                     _guardar_nuevo_password:
  4420                           	opt stack 27
  4421                           
  4422                           ;incstack = 0
  4423                           ;guardar_nuevo_password@valor stored from wreg
  4424  00DD48  6E08               	movwf	guardar_nuevo_password@valor,c
  4425                           
  4426                           ;alarma.c: 58: guardar_elemento_arreglo(new_password,valor, &tamanio_new_password );
  4427  00DD4A  0EC5               	movlw	low _new_password
  4428  00DD4C  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4429  00DD4E  0E00               	movlw	high _new_password
  4430  00DD50  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4431  00DD52  C008  F003         	movff	guardar_nuevo_password@valor,guardar_elemento_arreglo@valor
  4432  00DD56  0EE9               	movlw	low _tamanio_new_password
  4433  00DD58  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4434  00DD5A  0E00               	movlw	high _tamanio_new_password
  4435  00DD5C  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4436  00DD5E  EC6E  F073         	call	_guardar_elemento_arreglo	;wreg free
  4437  00DD62  0012               	return		;funcret
  4438  00DD64                     __end_of_guardar_nuevo_password:
  4439                           	opt stack 0
  4440                           tosu	equ	0xFFF
  4441                           tosh	equ	0xFFE
  4442                           tosl	equ	0xFFD
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postinc1	equ	0xFE6
  4451                           postdec1	equ	0xFE5
  4452                           fsr1h	equ	0xFE2
  4453                           fsr1l	equ	0xFE1
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _guardar_comando *****************
  4461 ;; Defined at:
  4462 ;;		line 29 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  tecla           1    wreg     unsigned char 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  tecla           1   57[COMRAM] unsigned char 
  4467 ;;  aux            20   37[COMRAM] unsigned char [20]
  4468 ;; Return value:  Size  Location     Type
  4469 ;;		None               void
  4470 ;; Registers used:
  4471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4478 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4480 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4481 ;;Total ram usage:       23 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    2
  4484 ;; This function calls:
  4485 ;;		_sprintf
  4486 ;; This function is called by:
  4487 ;;		_ingresar_comando
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text22
  4492  00E294                     __ptext22:
  4493                           	opt stack 0
  4494  00E294                     _guardar_comando:
  4495                           	opt stack 26
  4496                           
  4497                           ;incstack = 0
  4498                           ;guardar_comando@tecla stored from wreg
  4499  00E294  6E3A               	movwf	guardar_comando@tecla,c
  4500                           
  4501                           ;teclado.c: 31: unsigned char aux[20];
  4502                           ;teclado.c: 32: sprintf(aux,"%01u",tecla);
  4503  00E296  0E26               	movlw	low guardar_comando@aux
  4504  00E298  6E0D               	movwf	sprintf@sp,c
  4505  00E29A  0E00               	movlw	high guardar_comando@aux
  4506  00E29C  6E0E               	movwf	sprintf@sp+1,c
  4507  00E29E  0EE9               	movlw	low STR_8
  4508  00E2A0  6E0F               	movwf	sprintf@f,c
  4509  00E2A2  0EFF               	movlw	high STR_8
  4510  00E2A4  6E10               	movwf	sprintf@f+1,c
  4511  00E2A6  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  4512  00E2AA  6A12               	clrf	?_sprintf+5,c
  4513  00E2AC  ECC9  F07D         	call	_sprintf	;wreg free
  4514                           
  4515                           ;teclado.c: 33: if (tamanio_comando < 2){
  4516  00E2B0  BE48               	btfsc	_tamanio_comando+1,7,c
  4517  00E2B2  D006               	goto	l3745
  4518  00E2B4  5048               	movf	_tamanio_comando+1,w,c
  4519  00E2B6  E11D               	bnz	l425
  4520  00E2B8  0E02               	movlw	2
  4521  00E2BA  5C47               	subwf	_tamanio_comando,w,c
  4522  00E2BC  B0D8               	btfsc	status,0,c
  4523  00E2BE  0012               	return	
  4524  00E2C0                     l3745:
  4525                           
  4526                           ;teclado.c: 34: comando[tamanio_comando] = *aux;
  4527  00E2C0  0ED3               	movlw	low _comando
  4528  00E2C2  2447               	addwf	_tamanio_comando,w,c
  4529  00E2C4  6ED9               	movwf	fsr2l,c
  4530  00E2C6  0E00               	movlw	high _comando
  4531  00E2C8  2048               	addwfc	_tamanio_comando+1,w,c
  4532  00E2CA  6EDA               	movwf	fsr2h,c
  4533  00E2CC  C026  FFDF         	movff	guardar_comando@aux,indf2
  4534                           
  4535                           ;teclado.c: 35: comando [tamanio_comando+1] = 0;
  4536  00E2D0  0E01               	movlw	1
  4537  00E2D2  2447               	addwf	_tamanio_comando,w,c
  4538  00E2D4  6E24               	movwf	??_guardar_comando& (0+255),c
  4539  00E2D6  0E00               	movlw	0
  4540  00E2D8  2048               	addwfc	_tamanio_comando+1,w,c
  4541  00E2DA  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  4542  00E2DC  0ED3               	movlw	low _comando
  4543  00E2DE  2424               	addwf	??_guardar_comando,w,c
  4544  00E2E0  6ED9               	movwf	fsr2l,c
  4545  00E2E2  0E00               	movlw	high _comando
  4546  00E2E4  2025               	addwfc	??_guardar_comando+1,w,c
  4547  00E2E6  6EDA               	movwf	fsr2h,c
  4548  00E2E8  0E00               	movlw	0
  4549  00E2EA  6EDF               	movwf	indf2,c
  4550                           
  4551                           ;teclado.c: 36: tamanio_comando++;
  4552  00E2EC  4A47               	infsnz	_tamanio_comando,f,c
  4553  00E2EE  2A48               	incf	_tamanio_comando+1,f,c
  4554  00E2F0  0012               	return	
  4555  00E2F2                     l425:
  4556  00E2F2  0012               	return		;funcret
  4557  00E2F4                     __end_of_guardar_comando:
  4558                           	opt stack 0
  4559                           tosu	equ	0xFFF
  4560                           tosh	equ	0xFFE
  4561                           tosl	equ	0xFFD
  4562                           pclath	equ	0xFFA
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postinc1	equ	0xFE6
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _imprimir_tecla *****************
  4581 ;; Defined at:
  4582 ;;		line 40 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  tecla           1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  tecla           1   55[COMRAM] unsigned char 
  4587 ;;  aux            20   35[COMRAM] unsigned char [20]
  4588 ;; Return value:  Size  Location     Type
  4589 ;;		None               void
  4590 ;; Registers used:
  4591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4598 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4600 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;Total ram usage:       21 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    5
  4604 ;; This function calls:
  4605 ;;		_lcd_putrs
  4606 ;;		_sprintf
  4607 ;; This function is called by:
  4608 ;;		_mostrar_guardar_password
  4609 ;;		_mostrar_guardar_temporal_password
  4610 ;;		_mostrar_guardar_nuevo_password
  4611 ;;		_confirmar_actualizar_password
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text23
  4616  00E064                     __ptext23:
  4617                           	opt stack 0
  4618  00E064                     _imprimir_tecla:
  4619                           	opt stack 23
  4620                           
  4621                           ;incstack = 0
  4622                           ;imprimir_tecla@tecla stored from wreg
  4623  00E064  6E38               	movwf	imprimir_tecla@tecla,c
  4624                           
  4625                           ;teclado.c: 42: unsigned char aux[20];
  4626                           ;teclado.c: 43: sprintf(aux,"%01u",tecla);
  4627  00E066  0E24               	movlw	low imprimir_tecla@aux
  4628  00E068  6E0D               	movwf	sprintf@sp,c
  4629  00E06A  0E00               	movlw	high imprimir_tecla@aux
  4630  00E06C  6E0E               	movwf	sprintf@sp+1,c
  4631  00E06E  0EE9               	movlw	low STR_8
  4632  00E070  6E0F               	movwf	sprintf@f,c
  4633  00E072  0EFF               	movlw	high STR_8
  4634  00E074  6E10               	movwf	sprintf@f+1,c
  4635  00E076  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  4636  00E07A  6A12               	clrf	?_sprintf+5,c
  4637  00E07C  ECC9  F07D         	call	_sprintf	;wreg free
  4638                           
  4639                           ;teclado.c: 44: if (ocultar_teclas == 1){
  4640  00E080  0100               	movlb	0	; () banked
  4641  00E082  059C               	decf	_ocultar_teclas& (0+255),w,b
  4642  00E084  0100               	movlb	0	; () banked
  4643  00E086  119D               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  4644  00E088  A4D8               	btfss	status,2,c
  4645  00E08A  D007               	goto	l3705
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;teclado.c: 45: lcd_putrs("*");
  4649  00E08C  0EF5               	movlw	low STR_28
  4650  00E08E  6E09               	movwf	lcd_putrs@ptr,c
  4651  00E090  0EFF               	movlw	high STR_28
  4652  00E092  6E0A               	movwf	lcd_putrs@ptr+1,c
  4653  00E094  ECC5  F070         	call	_lcd_putrs	;wreg free
  4654                           
  4655                           ;teclado.c: 46: }else{
  4656  00E098  0012               	return	
  4657  00E09A                     l3705:
  4658                           
  4659                           ;teclado.c: 47: lcd_putrs(aux);
  4660  00E09A  0E24               	movlw	low imprimir_tecla@aux
  4661  00E09C  6E09               	movwf	lcd_putrs@ptr,c
  4662  00E09E  0E00               	movlw	high imprimir_tecla@aux
  4663  00E0A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  4664  00E0A2  ECC5  F070         	call	_lcd_putrs	;wreg free
  4665  00E0A6  0012               	return	
  4666  00E0A8  0012               	return		;funcret
  4667  00E0AA                     __end_of_imprimir_tecla:
  4668                           	opt stack 0
  4669                           tosu	equ	0xFFF
  4670                           tosh	equ	0xFFE
  4671                           tosl	equ	0xFFD
  4672                           pclath	equ	0xFFA
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postinc1	equ	0xFE6
  4680                           postdec1	equ	0xFE5
  4681                           fsr1h	equ	0xFE2
  4682                           fsr1l	equ	0xFE1
  4683                           indf2	equ	0xFDF
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _actualizar_password *****************
  4691 ;; Defined at:
  4692 ;;		line 102 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  valor           1    wreg     unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  valor           1   15[COMRAM] unsigned char 
  4697 ;;  j               2   18[COMRAM] int 
  4698 ;;  confirmar       2   16[COMRAM] int 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;		None               void
  4701 ;; Registers used:
  4702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4709 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4711 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4712 ;;Total ram usage:        5 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    3
  4715 ;; This function calls:
  4716 ;;		_confirmar_nuevo_password
  4717 ;;		_restaurar_comando
  4718 ;; This function is called by:
  4719 ;;		_confirmar_actualizar_password
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text24
  4724  00EC10                     __ptext24:
  4725                           	opt stack 0
  4726  00EC10                     _actualizar_password:
  4727                           	opt stack 24
  4728                           
  4729                           ;incstack = 0
  4730                           ;actualizar_password@valor stored from wreg
  4731  00EC10  6E10               	movwf	actualizar_password@valor,c
  4732                           
  4733                           ;alarma.c: 104: int confirmar=1;
  4734  00EC12  0E00               	movlw	0
  4735  00EC14  6E12               	movwf	actualizar_password@confirmar+1,c
  4736  00EC16  0E01               	movlw	1
  4737  00EC18  6E11               	movwf	actualizar_password@confirmar,c
  4738                           
  4739                           ;alarma.c: 105: confirmar_nuevo_password(&confirmar,valor);
  4740  00EC1A  0E11               	movlw	low actualizar_password@confirmar
  4741  00EC1C  6E09               	movwf	confirmar_nuevo_password@confirmar,c
  4742  00EC1E  0E00               	movlw	high actualizar_password@confirmar
  4743  00EC20  6E0A               	movwf	confirmar_nuevo_password@confirmar+1,c
  4744  00EC22  C010  F00B         	movff	actualizar_password@valor,confirmar_nuevo_password@valor
  4745  00EC26  EC2B  F075         	call	_confirmar_nuevo_password	;wreg free
  4746                           
  4747                           ;alarma.c: 107: if (confirmar && tamanio_password >= 6){
  4748  00EC2A  5011               	movf	actualizar_password@confirmar,w,c
  4749  00EC2C  1012               	iorwf	actualizar_password@confirmar+1,w,c
  4750  00EC2E  B4D8               	btfsc	status,2,c
  4751  00EC30  0012               	return	
  4752  00EC32  BE59               	btfsc	_tamanio_password+1,7,c
  4753  00EC34  0012               	return	
  4754  00EC36  5059               	movf	_tamanio_password+1,w,c
  4755  00EC38  E104               	bnz	u2910
  4756  00EC3A  0E06               	movlw	6
  4757  00EC3C  5C58               	subwf	_tamanio_password,w,c
  4758  00EC3E  A0D8               	btfss	status,0,c
  4759  00EC40  0012               	return	
  4760  00EC42                     u2910:
  4761                           
  4762                           ;alarma.c: 109: int j;
  4763                           ;alarma.c: 110: for (j=0; j < 6; j++ )
  4764  00EC42  0E00               	movlw	0
  4765  00EC44  6E14               	movwf	actualizar_password@j+1,c
  4766  00EC46  0E00               	movlw	0
  4767  00EC48  6E13               	movwf	actualizar_password@j,c
  4768  00EC4A                     l3721:
  4769  00EC4A  BE14               	btfsc	actualizar_password@j+1,7,c
  4770  00EC4C  D008               	goto	l3725
  4771  00EC4E  5014               	movf	actualizar_password@j+1,w,c
  4772  00EC50  E118               	bnz	l3731
  4773  00EC52  0E06               	movlw	6
  4774  00EC54  5C13               	subwf	actualizar_password@j,w,c
  4775  00EC56  B0D8               	btfsc	status,0,c
  4776  00EC58  D014               	goto	l3731
  4777  00EC5A  D001               	goto	l3725
  4778  00EC5C  D012               	goto	l3731
  4779  00EC5E                     l3725:
  4780                           
  4781                           ;alarma.c: 111: password[j] = new_password[j];
  4782  00EC5E  0EC5               	movlw	low _new_password
  4783  00EC60  2413               	addwf	actualizar_password@j,w,c
  4784  00EC62  6ED9               	movwf	fsr2l,c
  4785  00EC64  0E00               	movlw	high _new_password
  4786  00EC66  2014               	addwfc	actualizar_password@j+1,w,c
  4787  00EC68  6EDA               	movwf	fsr2h,c
  4788  00EC6A  0E68               	movlw	low _password
  4789  00EC6C  2413               	addwf	actualizar_password@j,w,c
  4790  00EC6E  6EE1               	movwf	fsr1l,c
  4791  00EC70  0E00               	movlw	high _password
  4792  00EC72  2014               	addwfc	actualizar_password@j+1,w,c
  4793  00EC74  6EE2               	movwf	fsr1h,c
  4794  00EC76  CFDF FFE7          	movff	indf2,indf1
  4795  00EC7A  4A13               	infsnz	actualizar_password@j,f,c
  4796  00EC7C  2A14               	incf	actualizar_password@j+1,f,c
  4797  00EC7E  D7E5               	goto	l3721
  4798  00EC80  D000               	goto	l3731
  4799  00EC82                     l3731:
  4800                           
  4801                           ;alarma.c: 112: restaurar_comando();
  4802  00EC82  EC88  F06E         	call	_restaurar_comando	;wreg free
  4803                           
  4804                           ;alarma.c: 114: new_password[0] = 0;
  4805  00EC86  0E00               	movlw	0
  4806  00EC88  0100               	movlb	0	; () banked
  4807  00EC8A  6FC5               	movwf	_new_password& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;alarma.c: 115: temporal[0] = 0;
  4811  00EC8C  0E00               	movlw	0
  4812  00EC8E  0100               	movlb	0	; () banked
  4813  00EC90  6FCC               	movwf	_temporal& (0+255),b
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;alarma.c: 117: tamanio_new_password = 0;
  4817  00EC92  0E00               	movlw	0
  4818  00EC94  0100               	movlb	0	; () banked
  4819  00EC96  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  4820  00EC98  0E00               	movlw	0
  4821  00EC9A  6FE9               	movwf	_tamanio_new_password& (0+255),b
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;alarma.c: 118: tamanio_password = 0;
  4825  00EC9C  0E00               	movlw	0
  4826  00EC9E  6E59               	movwf	_tamanio_password+1,c
  4827  00ECA0  0E00               	movlw	0
  4828  00ECA2  6E58               	movwf	_tamanio_password,c
  4829  00ECA4  0012               	return	
  4830                           
  4831                           ; BSR set to: 0
  4832  00ECA6  0012               	return		;funcret
  4833  00ECA8                     __end_of_actualizar_password:
  4834                           	opt stack 0
  4835                           tosu	equ	0xFFF
  4836                           tosh	equ	0xFFE
  4837                           tosl	equ	0xFFD
  4838                           pclath	equ	0xFFA
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           indf1	equ	0xFE7
  4846                           postinc1	equ	0xFE6
  4847                           postdec1	equ	0xFE5
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _confirmar_nuevo_password *****************
  4858 ;; Defined at:
  4859 ;;		line 88 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  confirmar       2    8[COMRAM] PTR int 
  4862 ;;		 -> actualizar_password@confirmar(2), 
  4863 ;;  valor           1   10[COMRAM] unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  i               2   13[COMRAM] int 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;		None               void
  4868 ;; Registers used:
  4869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4875 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4879 ;;Total ram usage:        7 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    2
  4882 ;; This function calls:
  4883 ;;		_guardar_current_password
  4884 ;; This function is called by:
  4885 ;;		_actualizar_password
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text25
  4890  00EA56                     __ptext25:
  4891                           	opt stack 0
  4892  00EA56                     _confirmar_nuevo_password:
  4893                           	opt stack 24
  4894                           
  4895                           ;alarma.c: 90: guardar_current_password(valor);
  4896                           
  4897                           ;incstack = 0
  4898  00EA56  500B               	movf	confirmar_nuevo_password@valor,w,c
  4899  00EA58  EC96  F06E         	call	_guardar_current_password
  4900                           
  4901                           ;alarma.c: 92: if (tamanio_password >= 6 && *confirmar){
  4902  00EA5C  BE59               	btfsc	_tamanio_password+1,7,c
  4903  00EA5E  0012               	return	
  4904  00EA60  5059               	movf	_tamanio_password+1,w,c
  4905  00EA62  E104               	bnz	u2740
  4906  00EA64  0E06               	movlw	6
  4907  00EA66  5C58               	subwf	_tamanio_password,w,c
  4908  00EA68  A0D8               	btfss	status,0,c
  4909  00EA6A  0012               	return	
  4910  00EA6C                     u2740:
  4911  00EA6C  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4912  00EA70  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4913  00EA74  50DE               	movf	postinc2,w,c
  4914  00EA76  10DE               	iorwf	postinc2,w,c
  4915  00EA78  B4D8               	btfsc	status,2,c
  4916  00EA7A  0012               	return	
  4917                           
  4918                           ;alarma.c: 93: int i = 0;
  4919  00EA7C  0E00               	movlw	0
  4920  00EA7E  6E0F               	movwf	confirmar_nuevo_password@i+1,c
  4921  00EA80  0E00               	movlw	0
  4922  00EA82  6E0E               	movwf	confirmar_nuevo_password@i,c
  4923                           
  4924                           ;alarma.c: 94: while (i < 6 && *confirmar){
  4925  00EA84  D01C               	goto	l3625
  4926  00EA86                     l3619:
  4927                           
  4928                           ;alarma.c: 95: if (new_password[i] != current_password[i])
  4929  00EA86  0EBE               	movlw	low _current_password
  4930  00EA88  240E               	addwf	confirmar_nuevo_password@i,w,c
  4931  00EA8A  6ED9               	movwf	fsr2l,c
  4932  00EA8C  0E00               	movlw	high _current_password
  4933  00EA8E  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  4934  00EA90  6EDA               	movwf	fsr2h,c
  4935  00EA92  0EC5               	movlw	low _new_password
  4936  00EA94  240E               	addwf	confirmar_nuevo_password@i,w,c
  4937  00EA96  6EE1               	movwf	fsr1l,c
  4938  00EA98  0E00               	movlw	high _new_password
  4939  00EA9A  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  4940  00EA9C  6EE2               	movwf	fsr1h,c
  4941  00EA9E  50DE               	movf	postinc2,w,c
  4942  00EAA0  18E6               	xorwf	postinc1,w,c
  4943  00EAA2  B4D8               	btfsc	status,2,c
  4944  00EAA4  D009               	goto	l3623
  4945                           
  4946                           ;alarma.c: 96: *confirmar = 0;
  4947  00EAA6  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4948  00EAAA  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4949  00EAAE  0E00               	movlw	0
  4950  00EAB0  6EDE               	movwf	postinc2,c
  4951  00EAB2  0E00               	movlw	0
  4952  00EAB4  6EDD               	movwf	postdec2,c
  4953  00EAB6  D000               	goto	l3623
  4954  00EAB8                     l3623:
  4955                           
  4956                           ;alarma.c: 97: i++;
  4957  00EAB8  4A0E               	infsnz	confirmar_nuevo_password@i,f,c
  4958  00EABA  2A0F               	incf	confirmar_nuevo_password@i+1,f,c
  4959  00EABC  D000               	goto	l3625
  4960  00EABE                     l3625:
  4961  00EABE  BE0F               	btfsc	confirmar_nuevo_password@i+1,7,c
  4962  00EAC0  D006               	goto	l3627
  4963  00EAC2  500F               	movf	confirmar_nuevo_password@i+1,w,c
  4964  00EAC4  E10E               	bnz	l862
  4965  00EAC6  0E06               	movlw	6
  4966  00EAC8  5C0E               	subwf	confirmar_nuevo_password@i,w,c
  4967  00EACA  B0D8               	btfsc	status,0,c
  4968  00EACC  0012               	return	
  4969  00EACE                     l3627:
  4970  00EACE  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  4971  00EAD2  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  4972  00EAD6  50DE               	movf	postinc2,w,c
  4973  00EAD8  10DE               	iorwf	postinc2,w,c
  4974  00EADA  B4D8               	btfsc	status,2,c
  4975  00EADC  0012               	return	
  4976  00EADE  D7D3               	goto	l3619
  4977  00EAE0  0012               	return	
  4978  00EAE2                     l862:
  4979  00EAE2  0012               	return		;funcret
  4980  00EAE4                     __end_of_confirmar_nuevo_password:
  4981                           	opt stack 0
  4982                           tosu	equ	0xFFF
  4983                           tosh	equ	0xFFE
  4984                           tosl	equ	0xFFD
  4985                           pclath	equ	0xFFA
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postinc1	equ	0xFE6
  4994                           postdec1	equ	0xFE5
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _guardar_current_password *****************
  5005 ;; Defined at:
  5006 ;;		line 49 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  valor           1    wreg     const unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  valor           1    7[COMRAM] const unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;		None               void
  5013 ;; Registers used:
  5014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5024 ;;Total ram usage:        1 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    1
  5027 ;; This function calls:
  5028 ;;		_guardar_elemento_arreglo
  5029 ;; This function is called by:
  5030 ;;		_mostrar_guardar_password
  5031 ;;		_confirmar_nuevo_password
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text26
  5036  00DD2C                     __ptext26:
  5037                           	opt stack 0
  5038  00DD2C                     _guardar_current_password:
  5039                           	opt stack 27
  5040                           
  5041                           ;incstack = 0
  5042                           ;guardar_current_password@valor stored from wreg
  5043  00DD2C  6E08               	movwf	guardar_current_password@valor,c
  5044                           
  5045                           ;alarma.c: 50: guardar_elemento_arreglo(current_password,valor, &tamanio_password );
  5046  00DD2E  0EBE               	movlw	low _current_password
  5047  00DD30  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  5048  00DD32  0E00               	movlw	high _current_password
  5049  00DD34  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  5050  00DD36  C008  F003         	movff	guardar_current_password@valor,guardar_elemento_arreglo@valor
  5051  00DD3A  0E58               	movlw	low _tamanio_password
  5052  00DD3C  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  5053  00DD3E  0E00               	movlw	high _tamanio_password
  5054  00DD40  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  5055  00DD42  EC6E  F073         	call	_guardar_elemento_arreglo	;wreg free
  5056  00DD46  0012               	return		;funcret
  5057  00DD48                     __end_of_guardar_current_password:
  5058                           	opt stack 0
  5059                           tosu	equ	0xFFF
  5060                           tosh	equ	0xFFE
  5061                           tosl	equ	0xFFD
  5062                           pclath	equ	0xFFA
  5063                           tblptru	equ	0xFF8
  5064                           tblptrh	equ	0xFF7
  5065                           tblptrl	equ	0xFF6
  5066                           tablat	equ	0xFF5
  5067                           postinc0	equ	0xFEE
  5068                           wreg	equ	0xFE8
  5069                           indf1	equ	0xFE7
  5070                           postinc1	equ	0xFE6
  5071                           postdec1	equ	0xFE5
  5072                           fsr1h	equ	0xFE2
  5073                           fsr1l	equ	0xFE1
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           postdec2	equ	0xFDD
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _guardar_elemento_arreglo *****************
  5082 ;; Defined at:
  5083 ;;		line 39 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  arreglo         2    0[COMRAM] PTR unsigned char 
  5086 ;;		 -> new_password(7), temporal(7), current_password(7), 
  5087 ;;  valor           1    2[COMRAM] const unsigned char 
  5088 ;;  tamanio         2    3[COMRAM] PTR int 
  5089 ;;		 -> tamanio_new_password(2), tamanio_password(2), 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;		None
  5092 ;; Return value:  Size  Location     Type
  5093 ;;		None               void
  5094 ;; Registers used:
  5095 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5101 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5104 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5105 ;;Total ram usage:        7 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_guardar_current_password
  5111 ;;		_guardar_password_temporal
  5112 ;;		_guardar_nuevo_password
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text27
  5117  00E6DC                     __ptext27:
  5118                           	opt stack 0
  5119  00E6DC                     _guardar_elemento_arreglo:
  5120                           	opt stack 27
  5121                           
  5122                           ;alarma.c: 41: if (*tamanio < 6){
  5123                           
  5124                           ;incstack = 0
  5125  00E6DC  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5126  00E6E0  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5127  00E6E4  0E01               	movlw	1
  5128  00E6E6  BEDB               	btfsc	plusw2,7,c
  5129  00E6E8  D007               	goto	l3341
  5130  00E6EA  0E01               	movlw	1
  5131  00E6EC  50DB               	movf	plusw2,w,c
  5132  00E6EE  E130               	bnz	l824
  5133  00E6F0  0E06               	movlw	6
  5134  00E6F2  5CDE               	subwf	postinc2,w,c
  5135  00E6F4  B0D8               	btfsc	status,0,c
  5136  00E6F6  0012               	return	
  5137  00E6F8                     l3341:
  5138                           
  5139                           ;alarma.c: 42: arreglo[*tamanio] = valor;
  5140  00E6F8  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5141  00E6FC  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5142  00E700  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  5143  00E704  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  5144  00E708  5006               	movf	??_guardar_elemento_arreglo,w,c
  5145  00E70A  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  5146  00E70C  6ED9               	movwf	fsr2l,c
  5147  00E70E  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  5148  00E710  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  5149  00E712  6EDA               	movwf	fsr2h,c
  5150  00E714  C003  FFDF         	movff	guardar_elemento_arreglo@valor,indf2
  5151                           
  5152                           ;alarma.c: 43: arreglo [*tamanio + 1] = '\0';
  5153  00E718  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5154  00E71C  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5155  00E720  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  5156  00E724  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  5157  00E728  0E01               	movlw	1
  5158  00E72A  2606               	addwf	??_guardar_elemento_arreglo,f,c
  5159  00E72C  0E00               	movlw	0
  5160  00E72E  2207               	addwfc	??_guardar_elemento_arreglo+1,f,c
  5161  00E730  5006               	movf	??_guardar_elemento_arreglo,w,c
  5162  00E732  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  5163  00E734  6ED9               	movwf	fsr2l,c
  5164  00E736  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  5165  00E738  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  5166  00E73A  6EDA               	movwf	fsr2h,c
  5167  00E73C  0E00               	movlw	0
  5168  00E73E  6EDF               	movwf	indf2,c
  5169                           
  5170                           ;alarma.c: 44: (*tamanio)++;
  5171  00E740  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5172  00E744  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5173  00E748  2ADE               	incf	postinc2,f,c
  5174  00E74A  0E00               	movlw	0
  5175  00E74C  22DD               	addwfc	postdec2,f,c
  5176  00E74E  0012               	return	
  5177  00E750                     l824:
  5178  00E750  0012               	return		;funcret
  5179  00E752                     __end_of_guardar_elemento_arreglo:
  5180                           	opt stack 0
  5181                           tosu	equ	0xFFF
  5182                           tosh	equ	0xFFE
  5183                           tosl	equ	0xFFD
  5184                           pclath	equ	0xFFA
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           indf1	equ	0xFE7
  5192                           postinc1	equ	0xFE6
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           plusw2	equ	0xFDB
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _obtener_dia_mes *****************
  5205 ;; Defined at:
  5206 ;;		line 71 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;		None               void
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5223 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5224 ;;Total ram usage:        2 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    1
  5227 ;; This function calls:
  5228 ;;		___awmod
  5229 ;; This function is called by:
  5230 ;;		_cambiar_dia
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text28
  5235  00EFDC                     __ptext28:
  5236                           	opt stack 0
  5237  00EFDC                     _obtener_dia_mes:
  5238                           	opt stack 26
  5239                           
  5240                           ;fecha.c: 73: if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 
      +                          || mes == 12)
  5241                           
  5242                           ;incstack = 0
  5243  00EFDC  045C               	decf	_mes,w,c
  5244  00EFDE  105D               	iorwf	_mes+1,w,c
  5245  00EFE0  B4D8               	btfsc	status,2,c
  5246  00EFE2  D01E               	goto	l3809
  5247  00EFE4  0E03               	movlw	3
  5248  00EFE6  185C               	xorwf	_mes,w,c
  5249  00EFE8  105D               	iorwf	_mes+1,w,c
  5250  00EFEA  B4D8               	btfsc	status,2,c
  5251  00EFEC  D019               	goto	l3809
  5252  00EFEE  0E05               	movlw	5
  5253  00EFF0  185C               	xorwf	_mes,w,c
  5254  00EFF2  105D               	iorwf	_mes+1,w,c
  5255  00EFF4  B4D8               	btfsc	status,2,c
  5256  00EFF6  D014               	goto	l3809
  5257  00EFF8  0E07               	movlw	7
  5258  00EFFA  185C               	xorwf	_mes,w,c
  5259  00EFFC  105D               	iorwf	_mes+1,w,c
  5260  00EFFE  B4D8               	btfsc	status,2,c
  5261  00F000  D00F               	goto	l3809
  5262  00F002  0E08               	movlw	8
  5263  00F004  185C               	xorwf	_mes,w,c
  5264  00F006  105D               	iorwf	_mes+1,w,c
  5265  00F008  B4D8               	btfsc	status,2,c
  5266  00F00A  D00A               	goto	l3809
  5267  00F00C  0E0A               	movlw	10
  5268  00F00E  185C               	xorwf	_mes,w,c
  5269  00F010  105D               	iorwf	_mes+1,w,c
  5270  00F012  B4D8               	btfsc	status,2,c
  5271  00F014  D005               	goto	l3809
  5272  00F016  0E0C               	movlw	12
  5273  00F018  185C               	xorwf	_mes,w,c
  5274  00F01A  105D               	iorwf	_mes+1,w,c
  5275  00F01C  A4D8               	btfss	status,2,c
  5276  00F01E  D006               	goto	l3811
  5277  00F020                     l3809:
  5278                           
  5279                           ;fecha.c: 74: valor_max = 31;
  5280  00F020  0E00               	movlw	0
  5281  00F022  0100               	movlb	0	; () banked
  5282  00F024  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5283  00F026  0E1F               	movlw	31
  5284  00F028  6FA6               	movwf	fecha@valor_max& (0+255),b
  5285  00F02A  0012               	return	
  5286  00F02C                     l3811:
  5287                           
  5288                           ;fecha.c: 75: else if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
  5289  00F02C  0E04               	movlw	4
  5290  00F02E  185C               	xorwf	_mes,w,c
  5291  00F030  105D               	iorwf	_mes+1,w,c
  5292  00F032  B4D8               	btfsc	status,2,c
  5293  00F034  D00F               	goto	l3819
  5294  00F036  0E06               	movlw	6
  5295  00F038  185C               	xorwf	_mes,w,c
  5296  00F03A  105D               	iorwf	_mes+1,w,c
  5297  00F03C  B4D8               	btfsc	status,2,c
  5298  00F03E  D00A               	goto	l3819
  5299  00F040  0E09               	movlw	9
  5300  00F042  185C               	xorwf	_mes,w,c
  5301  00F044  105D               	iorwf	_mes+1,w,c
  5302  00F046  B4D8               	btfsc	status,2,c
  5303  00F048  D005               	goto	l3819
  5304  00F04A  0E0B               	movlw	11
  5305  00F04C  185C               	xorwf	_mes,w,c
  5306  00F04E  105D               	iorwf	_mes+1,w,c
  5307  00F050  A4D8               	btfss	status,2,c
  5308  00F052  D006               	goto	l3821
  5309  00F054                     l3819:
  5310                           
  5311                           ;fecha.c: 76: valor_max = 30;
  5312  00F054  0E00               	movlw	0
  5313  00F056  0100               	movlb	0	; () banked
  5314  00F058  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5315  00F05A  0E1E               	movlw	30
  5316  00F05C  6FA6               	movwf	fecha@valor_max& (0+255),b
  5317  00F05E  0012               	return	
  5318  00F060                     l3821:
  5319                           
  5320                           ;fecha.c: 77: else{
  5321                           ;fecha.c: 78: if ((anio%4==0) && (anio%100!=0) || anio%400==0)
  5322  00F060  0E03               	movlw	3
  5323  00F062  145A               	andwf	_anio,w,c
  5324  00F064  6E07               	movwf	??_obtener_dia_mes& (0+255),c
  5325  00F066  0E00               	movlw	0
  5326  00F068  145B               	andwf	_anio+1,w,c
  5327  00F06A  6E08               	movwf	(??_obtener_dia_mes+1)& (0+255),c
  5328  00F06C  5007               	movf	??_obtener_dia_mes,w,c
  5329  00F06E  1008               	iorwf	??_obtener_dia_mes+1,w,c
  5330  00F070  A4D8               	btfss	status,2,c
  5331  00F072  D00E               	goto	l3825
  5332  00F074  C05A  F001         	movff	_anio,___awmod@dividend
  5333  00F078  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5334  00F07C  0E00               	movlw	0
  5335  00F07E  6E04               	movwf	___awmod@divisor+1,c
  5336  00F080  0E64               	movlw	100
  5337  00F082  6E03               	movwf	___awmod@divisor,c
  5338  00F084  ECA3  F074         	call	___awmod	;wreg free
  5339  00F088  5001               	movf	?___awmod,w,c
  5340  00F08A  1002               	iorwf	?___awmod+1,w,c
  5341  00F08C  A4D8               	btfss	status,2,c
  5342  00F08E  D00E               	goto	l3827
  5343  00F090                     l3825:
  5344  00F090  C05A  F001         	movff	_anio,___awmod@dividend
  5345  00F094  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5346  00F098  0E01               	movlw	1
  5347  00F09A  6E04               	movwf	___awmod@divisor+1,c
  5348  00F09C  0E90               	movlw	144
  5349  00F09E  6E03               	movwf	___awmod@divisor,c
  5350  00F0A0  ECA3  F074         	call	___awmod	;wreg free
  5351  00F0A4  5001               	movf	?___awmod,w,c
  5352  00F0A6  1002               	iorwf	?___awmod+1,w,c
  5353  00F0A8  A4D8               	btfss	status,2,c
  5354  00F0AA  D006               	goto	l3829
  5355  00F0AC                     l3827:
  5356                           
  5357                           ;fecha.c: 79: valor_max =29;
  5358  00F0AC  0E00               	movlw	0
  5359  00F0AE  0100               	movlb	0	; () banked
  5360  00F0B0  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5361  00F0B2  0E1D               	movlw	29
  5362  00F0B4  6FA6               	movwf	fecha@valor_max& (0+255),b
  5363  00F0B6  0012               	return	
  5364  00F0B8                     l3829:
  5365                           
  5366                           ;fecha.c: 80: else
  5367                           ;fecha.c: 81: valor_max =28;
  5368  00F0B8  0E00               	movlw	0
  5369  00F0BA  0100               	movlb	0	; () banked
  5370  00F0BC  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5371  00F0BE  0E1C               	movlw	28
  5372  00F0C0  6FA6               	movwf	fecha@valor_max& (0+255),b
  5373                           
  5374                           ; BSR set to: 0
  5375                           
  5376                           ; BSR set to: 0
  5377  00F0C2  0012               	return	
  5378                           
  5379                           ; BSR set to: 0
  5380                           
  5381                           ; BSR set to: 0
  5382  00F0C4  0012               	return		;funcret
  5383  00F0C6                     __end_of_obtener_dia_mes:
  5384                           	opt stack 0
  5385                           tosu	equ	0xFFF
  5386                           tosh	equ	0xFFE
  5387                           tosl	equ	0xFFD
  5388                           pclath	equ	0xFFA
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           indf1	equ	0xFE7
  5396                           postinc1	equ	0xFE6
  5397                           postdec1	equ	0xFE5
  5398                           fsr1h	equ	0xFE2
  5399                           fsr1l	equ	0xFE1
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           plusw2	equ	0xFDB
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function ___awmod *****************
  5409 ;; Defined at:
  5410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  dividend        2    0[COMRAM] int 
  5413 ;;  divisor         2    2[COMRAM] int 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  sign            1    5[COMRAM] unsigned char 
  5416 ;;  counter         1    4[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  2    0[COMRAM] int 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5430 ;;Total ram usage:        6 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_obtener_dia_mes
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text29
  5440  00E946                     __ptext29:
  5441                           	opt stack 0
  5442  00E946                     ___awmod:
  5443                           	opt stack 26
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;incstack = 0
  5447  00E946  0E00               	movlw	0
  5448  00E948  6E06               	movwf	___awmod@sign,c
  5449  00E94A  AE02               	btfss	___awmod@dividend+1,7,c
  5450  00E94C  D007               	goto	l3637
  5451  00E94E  6C01               	negf	___awmod@dividend,c
  5452  00E950  1E02               	comf	___awmod@dividend+1,f,c
  5453  00E952  B0D8               	btfsc	status,0,c
  5454  00E954  2A02               	incf	___awmod@dividend+1,f,c
  5455  00E956  0E01               	movlw	1
  5456  00E958  6E06               	movwf	___awmod@sign,c
  5457  00E95A  D000               	goto	l3637
  5458  00E95C                     l3637:
  5459  00E95C  AE04               	btfss	___awmod@divisor+1,7,c
  5460  00E95E  D005               	goto	l3641
  5461  00E960  6C03               	negf	___awmod@divisor,c
  5462  00E962  1E04               	comf	___awmod@divisor+1,f,c
  5463  00E964  B0D8               	btfsc	status,0,c
  5464  00E966  2A04               	incf	___awmod@divisor+1,f,c
  5465  00E968  D000               	goto	l3641
  5466  00E96A                     l3641:
  5467  00E96A  5003               	movf	___awmod@divisor,w,c
  5468  00E96C  1004               	iorwf	___awmod@divisor+1,w,c
  5469  00E96E  B4D8               	btfsc	status,2,c
  5470  00E970  D01D               	goto	l3657
  5471  00E972  0E01               	movlw	1
  5472  00E974  6E05               	movwf	___awmod@counter,c
  5473  00E976  D005               	goto	l3647
  5474  00E978                     l3645:
  5475  00E978  90D8               	bcf	status,0,c
  5476  00E97A  3603               	rlcf	___awmod@divisor,f,c
  5477  00E97C  3604               	rlcf	___awmod@divisor+1,f,c
  5478  00E97E  2A05               	incf	___awmod@counter,f,c
  5479  00E980  D000               	goto	l3647
  5480  00E982                     l3647:
  5481  00E982  BE04               	btfsc	___awmod@divisor+1,7,c
  5482  00E984  D002               	goto	l3649
  5483  00E986  D7F8               	goto	l3645
  5484  00E988  D000               	goto	l3649
  5485  00E98A                     l3649:
  5486  00E98A  5003               	movf	___awmod@divisor,w,c
  5487  00E98C  5C01               	subwf	___awmod@dividend,w,c
  5488  00E98E  5004               	movf	___awmod@divisor+1,w,c
  5489  00E990  5802               	subwfb	___awmod@dividend+1,w,c
  5490  00E992  A0D8               	btfss	status,0,c
  5491  00E994  D005               	goto	l3653
  5492  00E996  5003               	movf	___awmod@divisor,w,c
  5493  00E998  5E01               	subwf	___awmod@dividend,f,c
  5494  00E99A  5004               	movf	___awmod@divisor+1,w,c
  5495  00E99C  5A02               	subwfb	___awmod@dividend+1,f,c
  5496  00E99E  D000               	goto	l3653
  5497  00E9A0                     l3653:
  5498  00E9A0  90D8               	bcf	status,0,c
  5499  00E9A2  3204               	rrcf	___awmod@divisor+1,f,c
  5500  00E9A4  3203               	rrcf	___awmod@divisor,f,c
  5501  00E9A6  2E05               	decfsz	___awmod@counter,f,c
  5502  00E9A8  D7F0               	goto	l3649
  5503  00E9AA  D000               	goto	l3657
  5504  00E9AC                     l3657:
  5505  00E9AC  5006               	movf	___awmod@sign,w,c
  5506  00E9AE  B4D8               	btfsc	status,2,c
  5507  00E9B0  D005               	goto	l3661
  5508  00E9B2  6C01               	negf	___awmod@dividend,c
  5509  00E9B4  1E02               	comf	___awmod@dividend+1,f,c
  5510  00E9B6  B0D8               	btfsc	status,0,c
  5511  00E9B8  2A02               	incf	___awmod@dividend+1,f,c
  5512  00E9BA  D000               	goto	l3661
  5513  00E9BC                     l3661:
  5514  00E9BC  C001  F001         	movff	___awmod@dividend,?___awmod
  5515  00E9C0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5516  00E9C4  0012               	return	
  5517  00E9C6  0012               	return		;funcret
  5518  00E9C8                     __end_of___awmod:
  5519                           	opt stack 0
  5520                           tosu	equ	0xFFF
  5521                           tosh	equ	0xFFE
  5522                           tosl	equ	0xFFD
  5523                           pclath	equ	0xFFA
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           indf1	equ	0xFE7
  5531                           postinc1	equ	0xFE6
  5532                           postdec1	equ	0xFE5
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           plusw2	equ	0xFDB
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _guardar_elemento *****************
  5544 ;; Defined at:
  5545 ;;		line 7 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  tecla           1    wreg     unsigned char 
  5548 ;;  array           2   35[COMRAM] PTR unsigned char 
  5549 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5550 ;;		 -> fecha@day(3), 
  5551 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  5552 ;;		 -> tamanio_hora(2), tamanio_minutos(2), tamanio_dia(2), tamanio_mes(2), 
  5553 ;;		 -> tamanio_anio(2), 
  5554 ;;  validacion      2   39[COMRAM] int 
  5555 ;;  dato_fecha      2   41[COMRAM] PTR int 
  5556 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5557 ;;		 -> dia(2), 
  5558 ;;  doit            2   43[COMRAM] PTR FTN(PTR int ,const i
  5559 ;;		 -> actualizar_minutos(0), actualizar_hora(0), actualiza_dia(0), actualiza_elemento(0), 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  tecla           1   47[COMRAM] unsigned char 
  5562 ;;  i               2   48[COMRAM] int 
  5563 ;;  valor           2   50[COMRAM] int 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;		None               void
  5566 ;; Registers used:
  5567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5573 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5574 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5576 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5577 ;;Total ram usage:       17 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    5
  5580 ;; This function calls:
  5581 ;;		_actualiza_dia
  5582 ;;		_actualiza_elemento
  5583 ;;		_actualizar_hora
  5584 ;;		_actualizar_minutos
  5585 ;;		_convertir_a_int
  5586 ;;		_lcd_gotoxy
  5587 ;;		_lcd_putrs
  5588 ;;		_sprintf
  5589 ;; This function is called by:
  5590 ;;		_cambiar_dia
  5591 ;;		_cambiar_mes
  5592 ;;		_cambiar_anio
  5593 ;;		_cambiar_hora
  5594 ;;		_cambiar_minutos
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text30
  5599  00F9D2                     __ptext30:
  5600                           	opt stack 0
  5601  00F9D2                     _guardar_elemento:
  5602                           	opt stack 22
  5603                           
  5604                           ;incstack = 0
  5605                           ;guardar_elemento@tecla stored from wreg
  5606  00F9D2  6E30               	movwf	guardar_elemento@tecla,c
  5607                           
  5608                           ;fecha.c: 9: int valor = 0;
  5609  00F9D4  0E00               	movlw	0
  5610  00F9D6  6E34               	movwf	guardar_elemento@valor+1,c
  5611  00F9D8  0E00               	movlw	0
  5612  00F9DA  6E33               	movwf	guardar_elemento@valor,c
  5613                           
  5614                           ;fecha.c: 11: if (validacion){
  5615  00F9DC  5028               	movf	guardar_elemento@validacion,w,c
  5616  00F9DE  1029               	iorwf	guardar_elemento@validacion+1,w,c
  5617  00F9E0  B4D8               	btfsc	status,2,c
  5618  00F9E2  D044               	goto	l3765
  5619                           
  5620                           ;fecha.c: 13: sprintf(buffer2,"%01u",tecla);
  5621  00F9E4  0EAA               	movlw	low _buffer2
  5622  00F9E6  6E0D               	movwf	sprintf@sp,c
  5623  00F9E8  0E00               	movlw	high _buffer2
  5624  00F9EA  6E0E               	movwf	sprintf@sp+1,c
  5625  00F9EC  0EE9               	movlw	low STR_8
  5626  00F9EE  6E0F               	movwf	sprintf@f,c
  5627  00F9F0  0EFF               	movlw	high STR_8
  5628  00F9F2  6E10               	movwf	sprintf@f+1,c
  5629  00F9F4  C030  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  5630  00F9F8  6A12               	clrf	?_sprintf+5,c
  5631  00F9FA  ECC9  F07D         	call	_sprintf	;wreg free
  5632                           
  5633                           ;fecha.c: 14: array[*tamanio_array] = *buffer2;
  5634  00F9FE  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5635  00FA02  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5636  00FA06  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5637  00FA0A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5638  00FA0E  502E               	movf	??_guardar_elemento,w,c
  5639  00FA10  2424               	addwf	guardar_elemento@array,w,c
  5640  00FA12  6ED9               	movwf	fsr2l,c
  5641  00FA14  502F               	movf	??_guardar_elemento+1,w,c
  5642  00FA16  2025               	addwfc	guardar_elemento@array+1,w,c
  5643  00FA18  6EDA               	movwf	fsr2h,c
  5644  00FA1A  C0AA  FFDF         	movff	_buffer2,indf2
  5645                           
  5646                           ;fecha.c: 15: array [(*tamanio_array)+1] = 0;
  5647  00FA1E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5648  00FA22  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5649  00FA26  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5650  00FA2A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5651  00FA2E  0E01               	movlw	1
  5652  00FA30  262E               	addwf	??_guardar_elemento,f,c
  5653  00FA32  0E00               	movlw	0
  5654  00FA34  222F               	addwfc	??_guardar_elemento+1,f,c
  5655  00FA36  502E               	movf	??_guardar_elemento,w,c
  5656  00FA38  2424               	addwf	guardar_elemento@array,w,c
  5657  00FA3A  6ED9               	movwf	fsr2l,c
  5658  00FA3C  502F               	movf	??_guardar_elemento+1,w,c
  5659  00FA3E  2025               	addwfc	guardar_elemento@array+1,w,c
  5660  00FA40  6EDA               	movwf	fsr2h,c
  5661  00FA42  0E00               	movlw	0
  5662  00FA44  6EDF               	movwf	indf2,c
  5663                           
  5664                           ;fecha.c: 16: (*tamanio_array)++;
  5665  00FA46  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5666  00FA4A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5667  00FA4E  2ADE               	incf	postinc2,f,c
  5668  00FA50  0E00               	movlw	0
  5669  00FA52  22DD               	addwfc	postdec2,f,c
  5670                           
  5671                           ;fecha.c: 18: lcd_gotoxy(1,2);
  5672  00FA54  0E02               	movlw	2
  5673  00FA56  6E05               	movwf	lcd_gotoxy@y,c
  5674  00FA58  0E01               	movlw	1
  5675  00FA5A  EC31  F06F         	call	_lcd_gotoxy
  5676                           
  5677                           ;fecha.c: 19: lcd_putrs(array);
  5678  00FA5E  C024  F009         	movff	guardar_elemento@array,lcd_putrs@ptr
  5679  00FA62  C025  F00A         	movff	guardar_elemento@array+1,lcd_putrs@ptr+1
  5680  00FA66  ECC5  F070         	call	_lcd_putrs	;wreg free
  5681  00FA6A  D000               	goto	l3765
  5682  00FA6C                     l3765:
  5683                           
  5684                           ;fecha.c: 20: }
  5685                           ;fecha.c: 22: if (*tamanio_array >= 3 - 1){
  5686  00FA6C  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5687  00FA70  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5688  00FA74  0E01               	movlw	1
  5689  00FA76  BEDB               	btfsc	plusw2,7,c
  5690  00FA78  0012               	return	
  5691  00FA7A  0E01               	movlw	1
  5692  00FA7C  50DB               	movf	plusw2,w,c
  5693  00FA7E  E104               	bnz	u2960
  5694  00FA80  0E02               	movlw	2
  5695  00FA82  5CDE               	subwf	postinc2,w,c
  5696  00FA84  A0D8               	btfss	status,0,c
  5697  00FA86  0012               	return	
  5698  00FA88                     u2960:
  5699                           
  5700                           ;fecha.c: 24: convertir_a_int(array,&valor);
  5701  00FA88  C024  F00E         	movff	guardar_elemento@array,convertir_a_int@array
  5702  00FA8C  C025  F00F         	movff	guardar_elemento@array+1,convertir_a_int@array+1
  5703  00FA90  0E33               	movlw	low guardar_elemento@valor
  5704  00FA92  6E10               	movwf	convertir_a_int@valor,c
  5705  00FA94  0E00               	movlw	high guardar_elemento@valor
  5706  00FA96  6E11               	movwf	convertir_a_int@valor+1,c
  5707  00FA98  ECCF  F06E         	call	_convertir_a_int	;wreg free
  5708                           
  5709                           ;fecha.c: 26: if(valor >= valor_min && valor <= valor_max){
  5710  00FA9C  0100               	movlb	0	; () banked
  5711  00FA9E  51A8               	movf	fecha@valor_min& (0+255),w,b
  5712  00FAA0  5C33               	subwf	guardar_elemento@valor,w,c
  5713  00FAA2  5034               	movf	guardar_elemento@valor+1,w,c
  5714  00FAA4  0A80               	xorlw	128
  5715  00FAA6  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5716  00FAA8  0100               	movlb	0	; () banked
  5717  00FAAA  51A9               	movf	(fecha@valor_min+1)& (0+255),w,b
  5718  00FAAC  0A80               	xorlw	128
  5719  00FAAE  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5720  00FAB0  A0D8               	btfss	status,0,c
  5721  00FAB2  D029               	goto	l3777
  5722                           
  5723                           ; BSR set to: 0
  5724  00FAB4  5033               	movf	guardar_elemento@valor,w,c
  5725  00FAB6  0100               	movlb	0	; () banked
  5726  00FAB8  5DA6               	subwf	fecha@valor_max& (0+255),w,b
  5727  00FABA  0100               	movlb	0	; () banked
  5728  00FABC  51A7               	movf	(fecha@valor_max+1)& (0+255),w,b
  5729  00FABE  0A80               	xorlw	128
  5730  00FAC0  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5731  00FAC2  5034               	movf	guardar_elemento@valor+1,w,c
  5732  00FAC4  0A80               	xorlw	128
  5733  00FAC6  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5734  00FAC8  A0D8               	btfss	status,0,c
  5735  00FACA  D01D               	goto	l3777
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;fecha.c: 27: doit(dato_fecha,valor);
  5739  00FACC  C02A  F016         	movff	guardar_elemento@dato_fecha,actualizar_minutos@elemento
  5740  00FAD0  C02B  F017         	movff	guardar_elemento@dato_fecha+1,actualizar_minutos@elemento+1
  5741  00FAD4  C033  F018         	movff	guardar_elemento@valor,actualizar_minutos@valor
  5742  00FAD8  C034  F019         	movff	guardar_elemento@valor+1,actualizar_minutos@valor+1
  5743  00FADC  D801               	call	u2998
  5744  00FADE  D00A               	goto	l3775
  5745  00FAE0                     u2998:
  5746  00FAE0  0005               	push	
  5747  00FAE2  6EFA               	movwf	pclath,c
  5748  00FAE4  502C               	movf	guardar_elemento@doit,w,c
  5749  00FAE6  6EFD               	movwf	tosl,c
  5750  00FAE8  502D               	movf	guardar_elemento@doit+1,w,c
  5751  00FAEA  6EFE               	movwf	tosh,c
  5752  00FAEC  50F8               	movf	tblptru,w,c
  5753  00FAEE  6EFF               	movwf	tosu,c
  5754  00FAF0  50FA               	movf	pclath,w,c
  5755  00FAF2  0012               	return		;indir
  5756  00FAF4                     l3775:
  5757                           
  5758                           ;fecha.c: 28: _delay((unsigned long)((98)*(8000000/4000.0)));
  5759  00FAF4  0EFF               	movlw	255
  5760  00FAF6  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5761  00FAF8  0E8A               	movlw	138
  5762  00FAFA                     u3847:
  5763  00FAFA  2EE8               	decfsz	wreg,f,c
  5764  00FAFC  D7FE               	goto	u3847
  5765  00FAFE  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5766  00FB00  D7FC               	goto	u3847
  5767  00FB02  D000               	nop2	
  5768                           
  5769                           ;fecha.c: 30: }else{
  5770  00FB04  0012               	return	
  5771  00FB06                     l3777:
  5772                           
  5773                           ;fecha.c: 31: *tamanio_array = 0;
  5774  00FB06  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5775  00FB0A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5776  00FB0E  0E00               	movlw	0
  5777  00FB10  6EDE               	movwf	postinc2,c
  5778  00FB12  0E00               	movlw	0
  5779  00FB14  6EDD               	movwf	postdec2,c
  5780                           
  5781                           ;fecha.c: 32: *array = 0;
  5782  00FB16  C024  FFD9         	movff	guardar_elemento@array,fsr2l
  5783  00FB1A  C025  FFDA         	movff	guardar_elemento@array+1,fsr2h
  5784  00FB1E  0E00               	movlw	0
  5785  00FB20  6EDF               	movwf	indf2,c
  5786                           
  5787                           ;fecha.c: 33: lcd_gotoxy(1,2);
  5788  00FB22  0E02               	movlw	2
  5789  00FB24  6E05               	movwf	lcd_gotoxy@y,c
  5790  00FB26  0E01               	movlw	1
  5791  00FB28  EC31  F06F         	call	_lcd_gotoxy
  5792                           
  5793                           ;fecha.c: 34: sprintf(buffer2,"valor >=%d y <=%d",valor_min,valor_max);
  5794  00FB2C  0EAA               	movlw	low _buffer2
  5795  00FB2E  6E0D               	movwf	sprintf@sp,c
  5796  00FB30  0E00               	movlw	high _buffer2
  5797  00FB32  6E0E               	movwf	sprintf@sp+1,c
  5798  00FB34  0E35               	movlw	low STR_32
  5799  00FB36  6E0F               	movwf	sprintf@f,c
  5800  00FB38  0EFF               	movlw	high STR_32
  5801  00FB3A  6E10               	movwf	sprintf@f+1,c
  5802  00FB3C  C0A8  F011         	movff	fecha@valor_min,?_sprintf+4
  5803  00FB40  C0A9  F012         	movff	fecha@valor_min+1,?_sprintf+5
  5804  00FB44  C0A6  F013         	movff	fecha@valor_max,?_sprintf+6
  5805  00FB48  C0A7  F014         	movff	fecha@valor_max+1,?_sprintf+7
  5806  00FB4C  ECC9  F07D         	call	_sprintf	;wreg free
  5807                           
  5808                           ;fecha.c: 35: lcd_putrs(buffer2);
  5809  00FB50  0EAA               	movlw	low _buffer2
  5810  00FB52  6E09               	movwf	lcd_putrs@ptr,c
  5811  00FB54  0E00               	movlw	high _buffer2
  5812  00FB56  6E0A               	movwf	lcd_putrs@ptr+1,c
  5813  00FB58  ECC5  F070         	call	_lcd_putrs	;wreg free
  5814                           
  5815                           ;fecha.c: 37: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  5816  00FB5C  0E00               	movlw	0
  5817  00FB5E  6E32               	movwf	guardar_elemento@i+1,c
  5818  00FB60  0E00               	movlw	0
  5819  00FB62  6E31               	movwf	guardar_elemento@i,c
  5820  00FB64                     l3787:
  5821  00FB64  BE32               	btfsc	guardar_elemento@i+1,7,c
  5822  00FB66  D008               	goto	l3791
  5823  00FB68  5032               	movf	guardar_elemento@i+1,w,c
  5824  00FB6A  E112               	bnz	l612
  5825  00FB6C  0E04               	movlw	4
  5826  00FB6E  5C31               	subwf	guardar_elemento@i,w,c
  5827  00FB70  B0D8               	btfsc	status,0,c
  5828  00FB72  0012               	return	
  5829  00FB74  D001               	goto	l3791
  5830  00FB76  0012               	return	
  5831  00FB78                     l3791:
  5832  00FB78  0EFF               	movlw	255
  5833  00FB7A  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5834  00FB7C  0E8A               	movlw	138
  5835  00FB7E                     u3857:
  5836  00FB7E  2EE8               	decfsz	wreg,f,c
  5837  00FB80  D7FE               	goto	u3857
  5838  00FB82  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5839  00FB84  D7FC               	goto	u3857
  5840  00FB86  D000               	nop2	
  5841  00FB88  4A31               	infsnz	guardar_elemento@i,f,c
  5842  00FB8A  2A32               	incf	guardar_elemento@i+1,f,c
  5843  00FB8C  D7EB               	goto	l3787
  5844  00FB8E  0012               	return	
  5845  00FB90                     l612:
  5846  00FB90  0012               	return		;funcret
  5847  00FB92                     __end_of_guardar_elemento:
  5848                           	opt stack 0
  5849                           tosu	equ	0xFFF
  5850                           tosh	equ	0xFFE
  5851                           tosl	equ	0xFFD
  5852                           pclath	equ	0xFFA
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           indf1	equ	0xFE7
  5860                           postinc1	equ	0xFE6
  5861                           postdec1	equ	0xFE5
  5862                           fsr1h	equ	0xFE2
  5863                           fsr1l	equ	0xFE1
  5864                           indf2	equ	0xFDF
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           plusw2	equ	0xFDB
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _convertir_a_int *****************
  5873 ;; Defined at:
  5874 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  array           2   13[COMRAM] PTR unsigned char 
  5877 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5878 ;;		 -> fecha@day(3), 
  5879 ;;  valor           2   15[COMRAM] PTR int 
  5880 ;;		 -> guardar_elemento@valor(2), 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5892 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5895 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5896 ;;Total ram usage:        4 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    2
  5899 ;; This function calls:
  5900 ;;		_atoi
  5901 ;; This function is called by:
  5902 ;;		_guardar_elemento
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text31
  5907  00DD9E                     __ptext31:
  5908                           	opt stack 0
  5909  00DD9E                     _convertir_a_int:
  5910                           	opt stack 24
  5911                           
  5912                           ;fecha.c: 4: *valor = atoi(array);
  5913                           
  5914                           ;incstack = 0
  5915  00DD9E  C00E  F007         	movff	convertir_a_int@array,atoi@s
  5916  00DDA2  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  5917  00DDA6  ECAE  F076         	call	_atoi	;wreg free
  5918  00DDAA  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  5919  00DDAE  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  5920  00DDB2  C007  FFDE         	movff	?_atoi,postinc2
  5921  00DDB6  C008  FFDD         	movff	?_atoi+1,postdec2
  5922  00DDBA  0012               	return		;funcret
  5923  00DDBC                     __end_of_convertir_a_int:
  5924                           	opt stack 0
  5925                           tosu	equ	0xFFF
  5926                           tosh	equ	0xFFE
  5927                           tosl	equ	0xFFD
  5928                           pclath	equ	0xFFA
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           indf1	equ	0xFE7
  5936                           postinc1	equ	0xFE6
  5937                           postdec1	equ	0xFE5
  5938                           fsr1h	equ	0xFE2
  5939                           fsr1l	equ	0xFE1
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           plusw2	equ	0xFDB
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _atoi *****************
  5949 ;; Defined at:
  5950 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  s               2    6[COMRAM] PTR const unsigned char 
  5953 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5954 ;;		 -> fecha@day(3), comando(3), 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  a               2   11[COMRAM] int 
  5957 ;;  sign            1   10[COMRAM] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  2    6[COMRAM] int 
  5960 ;; Registers used:
  5961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5968 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5970 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5971 ;;Total ram usage:        7 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    1
  5974 ;; This function calls:
  5975 ;;		___wmul
  5976 ;;		_isdigit
  5977 ;; This function is called by:
  5978 ;;		_main
  5979 ;;		_convertir_a_int
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text32
  5984  00ED5C                     __ptext32:
  5985                           	opt stack 0
  5986  00ED5C                     _atoi:
  5987                           	opt stack 24
  5988                           
  5989                           ;incstack = 0
  5990  00ED5C  D003               	goto	l3375
  5991  00ED5E                     l3373:
  5992  00ED5E  4A07               	infsnz	atoi@s,f,c
  5993  00ED60  2A08               	incf	atoi@s+1,f,c
  5994  00ED62  D000               	goto	l3375
  5995  00ED64                     l3375:
  5996  00ED64  C007  FFD9         	movff	atoi@s,fsr2l
  5997  00ED68  C008  FFDA         	movff	atoi@s+1,fsr2h
  5998  00ED6C  0E20               	movlw	32
  5999  00ED6E  18DE               	xorwf	postinc2,w,c
  6000  00ED70  B4D8               	btfsc	status,2,c
  6001  00ED72  D7F5               	goto	l3373
  6002  00ED74  C007  FFD9         	movff	atoi@s,fsr2l
  6003  00ED78  C008  FFDA         	movff	atoi@s+1,fsr2h
  6004  00ED7C  0E09               	movlw	9
  6005  00ED7E  18DE               	xorwf	postinc2,w,c
  6006  00ED80  B4D8               	btfsc	status,2,c
  6007  00ED82  D7ED               	goto	l3373
  6008  00ED84  0E00               	movlw	0
  6009  00ED86  6E0D               	movwf	atoi@a+1,c
  6010  00ED88  0E00               	movlw	0
  6011  00ED8A  6E0C               	movwf	atoi@a,c
  6012  00ED8C  0E00               	movlw	0
  6013  00ED8E  6E0B               	movwf	atoi@sign,c
  6014  00ED90  C007  FFD9         	movff	atoi@s,fsr2l
  6015  00ED94  C008  FFDA         	movff	atoi@s+1,fsr2h
  6016  00ED98  0E2D               	movlw	45
  6017  00ED9A  18DE               	xorwf	postinc2,w,c
  6018  00ED9C  A4D8               	btfss	status,2,c
  6019  00ED9E  D002               	goto	l3385
  6020  00EDA0  2A0B               	incf	atoi@sign,f,c
  6021  00EDA2  D025               	goto	l3391
  6022  00EDA4                     l3385:
  6023  00EDA4  C007  FFD9         	movff	atoi@s,fsr2l
  6024  00EDA8  C008  FFDA         	movff	atoi@s+1,fsr2h
  6025  00EDAC  0E2B               	movlw	43
  6026  00EDAE  18DE               	xorwf	postinc2,w,c
  6027  00EDB0  A4D8               	btfss	status,2,c
  6028  00EDB2  D020               	goto	l3393
  6029  00EDB4  D01C               	goto	l3391
  6030  00EDB6  D01E               	goto	l3393
  6031  00EDB8                     l3389:
  6032  00EDB8  C00C  F001         	movff	atoi@a,___wmul@multiplier
  6033  00EDBC  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  6034  00EDC0  0E00               	movlw	0
  6035  00EDC2  6E04               	movwf	___wmul@multiplicand+1,c
  6036  00EDC4  0E0A               	movlw	10
  6037  00EDC6  6E03               	movwf	___wmul@multiplicand,c
  6038  00EDC8  EC68  F06F         	call	___wmul	;wreg free
  6039  00EDCC  C007  FFD9         	movff	atoi@s,fsr2l
  6040  00EDD0  C008  FFDA         	movff	atoi@s+1,fsr2h
  6041  00EDD4  50DF               	movf	indf2,w,c
  6042  00EDD6  6E09               	movwf	??_atoi& (0+255),c
  6043  00EDD8  6A0A               	clrf	(??_atoi+1)& (0+255),c
  6044  00EDDA  5001               	movf	?___wmul,w,c
  6045  00EDDC  2609               	addwf	??_atoi,f,c
  6046  00EDDE  5002               	movf	?___wmul+1,w,c
  6047  00EDE0  220A               	addwfc	??_atoi+1,f,c
  6048  00EDE2  0ED0               	movlw	208
  6049  00EDE4  2409               	addwf	??_atoi,w,c
  6050  00EDE6  6E0C               	movwf	atoi@a,c
  6051  00EDE8  0EFF               	movlw	255
  6052  00EDEA  200A               	addwfc	??_atoi+1,w,c
  6053  00EDEC  6E0D               	movwf	atoi@a+1,c
  6054  00EDEE                     l3391:
  6055  00EDEE  4A07               	infsnz	atoi@s,f,c
  6056  00EDF0  2A08               	incf	atoi@s+1,f,c
  6057  00EDF2  D000               	goto	l3393
  6058  00EDF4                     l3393:
  6059  00EDF4  C007  FFD9         	movff	atoi@s,fsr2l
  6060  00EDF8  C008  FFDA         	movff	atoi@s+1,fsr2h
  6061  00EDFC  50DF               	movf	indf2,w,c
  6062  00EDFE  ECFE  F06E         	call	_isdigit
  6063  00EE02  B0D8               	btfsc	status,0,c
  6064  00EE04  D7D9               	goto	l3389
  6065  00EE06  500B               	movf	atoi@sign,w,c
  6066  00EE08  B4D8               	btfsc	status,2,c
  6067  00EE0A  D00D               	goto	l1205
  6068  00EE0C  C00C  F009         	movff	atoi@a,??_atoi
  6069  00EE10  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  6070  00EE14  1E09               	comf	??_atoi,f,c
  6071  00EE16  1E0A               	comf	??_atoi+1,f,c
  6072  00EE18  4A09               	infsnz	??_atoi,f,c
  6073  00EE1A  2A0A               	incf	??_atoi+1,f,c
  6074  00EE1C  C009  F007         	movff	??_atoi,?_atoi
  6075  00EE20  C00A  F008         	movff	??_atoi+1,?_atoi+1
  6076  00EE24  0012               	return	
  6077  00EE26                     l1205:
  6078  00EE26  C00C  F007         	movff	atoi@a,?_atoi
  6079  00EE2A  C00D  F008         	movff	atoi@a+1,?_atoi+1
  6080  00EE2E  0012               	return		;funcret
  6081  00EE30                     __end_of_atoi:
  6082                           	opt stack 0
  6083                           tosu	equ	0xFFF
  6084                           tosh	equ	0xFFE
  6085                           tosl	equ	0xFFD
  6086                           pclath	equ	0xFFA
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           indf1	equ	0xFE7
  6094                           postinc1	equ	0xFE6
  6095                           postdec1	equ	0xFE5
  6096                           fsr1h	equ	0xFE2
  6097                           fsr1l	equ	0xFE1
  6098                           indf2	equ	0xFDF
  6099                           postinc2	equ	0xFDE
  6100                           postdec2	equ	0xFDD
  6101                           plusw2	equ	0xFDB
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _actualizar_hora *****************
  6107 ;; Defined at:
  6108 ;;		line 150 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  elemento        2   21[COMRAM] PTR int 
  6111 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6112 ;;		 -> dia(2), 
  6113 ;;  valor           2   23[COMRAM] const int 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;		None               void
  6118 ;; Registers used:
  6119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6128 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6129 ;;Total ram usage:        4 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    4
  6132 ;; This function calls:
  6133 ;;		_Write_RTC
  6134 ;;		_actualiza_elemento
  6135 ;;		_inicializar_hora
  6136 ;;		_restaurar_comando
  6137 ;; This function is called by:
  6138 ;;		_cambiar_hora
  6139 ;;		_guardar_elemento
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text33
  6144  00DE40                     __ptext33:
  6145                           	opt stack 0
  6146  00DE40                     _actualizar_hora:
  6147                           	opt stack 22
  6148                           
  6149                           ;fecha.c: 152: actualiza_elemento(elemento,valor);
  6150                           
  6151                           ;incstack = 0
  6152  00DE40  C016  F016         	movff	actualizar_hora@elemento,actualiza_elemento@elemento
  6153  00DE44  C017  F017         	movff	actualizar_hora@elemento+1,actualiza_elemento@elemento+1
  6154  00DE48  C018  F018         	movff	actualizar_hora@valor,actualiza_elemento@valor
  6155  00DE4C  C019  F019         	movff	actualizar_hora@valor+1,actualiza_elemento@valor+1
  6156  00DE50  EC71  F06E         	call	_actualiza_elemento	;wreg free
  6157                           
  6158                           ;fecha.c: 153: Write_RTC();
  6159  00DE54  EC52  F07B         	call	_Write_RTC	;wreg free
  6160                           
  6161                           ;fecha.c: 154: restaurar_comando();
  6162  00DE58  EC88  F06E         	call	_restaurar_comando	;wreg free
  6163                           
  6164                           ;fecha.c: 155: inicializar_hora();
  6165  00DE5C  ECDE  F06E         	call	_inicializar_hora	;wreg free
  6166  00DE60  0012               	return		;funcret
  6167  00DE62                     __end_of_actualizar_hora:
  6168                           	opt stack 0
  6169                           tosu	equ	0xFFF
  6170                           tosh	equ	0xFFE
  6171                           tosl	equ	0xFFD
  6172                           pclath	equ	0xFFA
  6173                           tblptru	equ	0xFF8
  6174                           tblptrh	equ	0xFF7
  6175                           tblptrl	equ	0xFF6
  6176                           tablat	equ	0xFF5
  6177                           postinc0	equ	0xFEE
  6178                           wreg	equ	0xFE8
  6179                           indf1	equ	0xFE7
  6180                           postinc1	equ	0xFE6
  6181                           postdec1	equ	0xFE5
  6182                           fsr1h	equ	0xFE2
  6183                           fsr1l	equ	0xFE1
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           plusw2	equ	0xFDB
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _actualiza_dia *****************
  6193 ;; Defined at:
  6194 ;;		line 64 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  elemento        2   21[COMRAM] PTR int 
  6197 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6198 ;;		 -> dia(2), 
  6199 ;;  valor           2   23[COMRAM] const int 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6214 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6215 ;;Total ram usage:        4 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    4
  6218 ;; This function calls:
  6219 ;;		_actualiza_elemento
  6220 ;;		_inicializar_fecha
  6221 ;;		_restaurar_comando
  6222 ;; This function is called by:
  6223 ;;		_cambiar_dia
  6224 ;;		_guardar_elemento
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text34
  6229  00DD80                     __ptext34:
  6230                           	opt stack 0
  6231  00DD80                     _actualiza_dia:
  6232                           	opt stack 22
  6233                           
  6234                           ;fecha.c: 66: actualiza_elemento(elemento,valor);
  6235                           
  6236                           ;incstack = 0
  6237  00DD80  C016  F016         	movff	actualiza_dia@elemento,actualiza_elemento@elemento
  6238  00DD84  C017  F017         	movff	actualiza_dia@elemento+1,actualiza_elemento@elemento+1
  6239  00DD88  C018  F018         	movff	actualiza_dia@valor,actualiza_elemento@valor
  6240  00DD8C  C019  F019         	movff	actualiza_dia@valor+1,actualiza_elemento@valor+1
  6241  00DD90  EC71  F06E         	call	_actualiza_elemento	;wreg free
  6242                           
  6243                           ;fecha.c: 67: restaurar_comando();
  6244  00DD94  EC88  F06E         	call	_restaurar_comando	;wreg free
  6245                           
  6246                           ;fecha.c: 68: inicializar_fecha();
  6247  00DD98  ECD3  F06F         	call	_inicializar_fecha	;wreg free
  6248  00DD9C  0012               	return		;funcret
  6249  00DD9E                     __end_of_actualiza_dia:
  6250                           	opt stack 0
  6251                           tosu	equ	0xFFF
  6252                           tosh	equ	0xFFE
  6253                           tosl	equ	0xFFD
  6254                           pclath	equ	0xFFA
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           postinc0	equ	0xFEE
  6260                           wreg	equ	0xFE8
  6261                           indf1	equ	0xFE7
  6262                           postinc1	equ	0xFE6
  6263                           postdec1	equ	0xFE5
  6264                           fsr1h	equ	0xFE2
  6265                           fsr1l	equ	0xFE1
  6266                           indf2	equ	0xFDF
  6267                           postinc2	equ	0xFDE
  6268                           postdec2	equ	0xFDD
  6269                           plusw2	equ	0xFDB
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function _actualiza_elemento *****************
  6275 ;; Defined at:
  6276 ;;		line 43 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  elemento        2   21[COMRAM] PTR int 
  6279 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6280 ;;		 -> dia(2), 
  6281 ;;  valor           2   23[COMRAM] const int 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;		None               void
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6293 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6296 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6297 ;;Total ram usage:        4 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    3
  6300 ;; This function calls:
  6301 ;;		_Write_RTC
  6302 ;; This function is called by:
  6303 ;;		_actualiza_dia
  6304 ;;		_cambiar_mes
  6305 ;;		_cambiar_anio
  6306 ;;		_actualizar_hora
  6307 ;;		_guardar_elemento
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text35
  6312  00DCE2                     __ptext35:
  6313                           	opt stack 0
  6314  00DCE2                     _actualiza_elemento:
  6315                           	opt stack 22
  6316                           
  6317                           ;fecha.c: 45: *elemento = valor;
  6318                           
  6319                           ;incstack = 0
  6320  00DCE2  C016  FFD9         	movff	actualiza_elemento@elemento,fsr2l
  6321  00DCE6  C017  FFDA         	movff	actualiza_elemento@elemento+1,fsr2h
  6322  00DCEA  C018  FFDE         	movff	actualiza_elemento@valor,postinc2
  6323  00DCEE  C019  FFDD         	movff	actualiza_elemento@valor+1,postdec2
  6324                           
  6325                           ;fecha.c: 46: Write_RTC();
  6326  00DCF2  EC52  F07B         	call	_Write_RTC	;wreg free
  6327  00DCF6  0012               	return		;funcret
  6328  00DCF8                     __end_of_actualiza_elemento:
  6329                           	opt stack 0
  6330                           tosu	equ	0xFFF
  6331                           tosh	equ	0xFFE
  6332                           tosl	equ	0xFFD
  6333                           pclath	equ	0xFFA
  6334                           tblptru	equ	0xFF8
  6335                           tblptrh	equ	0xFF7
  6336                           tblptrl	equ	0xFF6
  6337                           tablat	equ	0xFF5
  6338                           postinc0	equ	0xFEE
  6339                           wreg	equ	0xFE8
  6340                           indf1	equ	0xFE7
  6341                           postinc1	equ	0xFE6
  6342                           postdec1	equ	0xFE5
  6343                           fsr1h	equ	0xFE2
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           plusw2	equ	0xFDB
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function _actualizar_minutos *****************
  6354 ;; Defined at:
  6355 ;;		line 158 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  elemento        2   21[COMRAM] PTR int 
  6358 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6359 ;;		 -> dia(2), 
  6360 ;;  valor           2   23[COMRAM] const int 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6375 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6376 ;;Total ram usage:        4 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    3
  6379 ;; This function calls:
  6380 ;;		_Write_RTC
  6381 ;; This function is called by:
  6382 ;;		_cambiar_minutos
  6383 ;;		_guardar_elemento
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text36
  6388  00DDDC                     __ptext36:
  6389                           	opt stack 0
  6390  00DDDC                     _actualizar_minutos:
  6391                           	opt stack 23
  6392                           
  6393                           ;fecha.c: 160: *elemento = valor;
  6394                           
  6395                           ;incstack = 0
  6396  00DDDC  C016  FFD9         	movff	actualizar_minutos@elemento,fsr2l
  6397  00DDE0  C017  FFDA         	movff	actualizar_minutos@elemento+1,fsr2h
  6398  00DDE4  C018  FFDE         	movff	actualizar_minutos@valor,postinc2
  6399  00DDE8  C019  FFDD         	movff	actualizar_minutos@valor+1,postdec2
  6400                           
  6401                           ;fecha.c: 161: segundo = 00;
  6402  00DDEC  0E00               	movlw	0
  6403  00DDEE  0100               	movlb	0	; () banked
  6404  00DDF0  6FA1               	movwf	(_segundo+1)& (0+255),b
  6405  00DDF2  0E00               	movlw	0
  6406  00DDF4  6FA0               	movwf	_segundo& (0+255),b
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;fecha.c: 162: Write_RTC();
  6410  00DDF6  EC52  F07B         	call	_Write_RTC	;wreg free
  6411  00DDFA  0012               	return		;funcret
  6412  00DDFC                     __end_of_actualizar_minutos:
  6413                           	opt stack 0
  6414                           tosu	equ	0xFFF
  6415                           tosh	equ	0xFFE
  6416                           tosl	equ	0xFFD
  6417                           pclath	equ	0xFFA
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           postinc0	equ	0xFEE
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           postinc1	equ	0xFE6
  6426                           postdec1	equ	0xFE5
  6427                           fsr1h	equ	0xFE2
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           plusw2	equ	0xFDB
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _cancelar_cambio_password *****************
  6438 ;; Defined at:
  6439 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;		None               void
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;Total ram usage:        0 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    1
  6460 ;; This function calls:
  6461 ;;		_restaurar_comando
  6462 ;; This function is called by:
  6463 ;;		_menu_cambiar_password
  6464 ;;		_leer_teclado
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text37
  6469  00DE86                     __ptext37:
  6470                           	opt stack 0
  6471  00DE86                     _cancelar_cambio_password:
  6472                           	opt stack 28
  6473                           
  6474                           ;alarma.c: 26: new_password[0] = 0;
  6475                           
  6476                           ;incstack = 0
  6477  00DE86  0E00               	movlw	0
  6478  00DE88  0100               	movlb	0	; () banked
  6479  00DE8A  6FC5               	movwf	_new_password& (0+255),b
  6480                           
  6481                           ;alarma.c: 27: temporal[0] = 0;
  6482  00DE8C  0E00               	movlw	0
  6483  00DE8E  0100               	movlb	0	; () banked
  6484  00DE90  6FCC               	movwf	_temporal& (0+255),b
  6485                           
  6486                           ;alarma.c: 29: tamanio_new_password = 0;
  6487  00DE92  0E00               	movlw	0
  6488  00DE94  0100               	movlb	0	; () banked
  6489  00DE96  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  6490  00DE98  0E00               	movlw	0
  6491  00DE9A  6FE9               	movwf	_tamanio_new_password& (0+255),b
  6492                           
  6493                           ;alarma.c: 30: tamanio_password = 0;
  6494  00DE9C  0E00               	movlw	0
  6495  00DE9E  6E59               	movwf	_tamanio_password+1,c
  6496  00DEA0  0E00               	movlw	0
  6497  00DEA2  6E58               	movwf	_tamanio_password,c
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;alarma.c: 32: restaurar_comando();
  6501  00DEA4  EC88  F06E         	call	_restaurar_comando	;wreg free
  6502  00DEA8  0012               	return		;funcret
  6503  00DEAA                     __end_of_cancelar_cambio_password:
  6504                           	opt stack 0
  6505                           tosu	equ	0xFFF
  6506                           tosh	equ	0xFFE
  6507                           tosl	equ	0xFFD
  6508                           pclath	equ	0xFFA
  6509                           tblptru	equ	0xFF8
  6510                           tblptrh	equ	0xFF7
  6511                           tblptrl	equ	0xFF6
  6512                           tablat	equ	0xFF5
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           indf1	equ	0xFE7
  6516                           postinc1	equ	0xFE6
  6517                           postdec1	equ	0xFE5
  6518                           fsr1h	equ	0xFE2
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           plusw2	equ	0xFDB
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function _cancelar_cambio_hora *****************
  6529 ;; Defined at:
  6530 ;;		line 183 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;		None               void
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    1
  6551 ;; This function calls:
  6552 ;;		_inicializar_hora
  6553 ;;		_restaurar_comando
  6554 ;; This function is called by:
  6555 ;;		_menu_cambiar_horario
  6556 ;;		_leer_teclado
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text38
  6561  00DBE2                     __ptext38:
  6562                           	opt stack 0
  6563  00DBE2                     _cancelar_cambio_hora:
  6564                           	opt stack 28
  6565                           
  6566                           ;fecha.c: 184: inicializar_hora();
  6567                           
  6568                           ;incstack = 0
  6569  00DBE2  ECDE  F06E         	call	_inicializar_hora	;wreg free
  6570                           
  6571                           ;fecha.c: 185: restaurar_comando();
  6572  00DBE6  EC88  F06E         	call	_restaurar_comando	;wreg free
  6573  00DBEA  0012               	return		;funcret
  6574  00DBEC                     __end_of_cancelar_cambio_hora:
  6575                           	opt stack 0
  6576                           tosu	equ	0xFFF
  6577                           tosh	equ	0xFFE
  6578                           tosl	equ	0xFFD
  6579                           pclath	equ	0xFFA
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           postinc1	equ	0xFE6
  6588                           postdec1	equ	0xFE5
  6589                           fsr1h	equ	0xFE2
  6590                           fsr1l	equ	0xFE1
  6591                           indf2	equ	0xFDF
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           plusw2	equ	0xFDB
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _cancelar_cambio_fecha *****************
  6600 ;; Defined at:
  6601 ;;		line 116 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6619 ;;Total ram usage:        0 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    1
  6622 ;; This function calls:
  6623 ;;		_inicializar_fecha
  6624 ;;		_restaurar_comando
  6625 ;; This function is called by:
  6626 ;;		_menu_cambiar_fecha
  6627 ;;		_leer_teclado
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text39
  6632  00DBD8                     __ptext39:
  6633                           	opt stack 0
  6634  00DBD8                     _cancelar_cambio_fecha:
  6635                           	opt stack 28
  6636                           
  6637                           ;fecha.c: 117: inicializar_fecha();
  6638                           
  6639                           ;incstack = 0
  6640  00DBD8  ECD3  F06F         	call	_inicializar_fecha	;wreg free
  6641                           
  6642                           ;fecha.c: 118: restaurar_comando();
  6643  00DBDC  EC88  F06E         	call	_restaurar_comando	;wreg free
  6644  00DBE0  0012               	return		;funcret
  6645  00DBE2                     __end_of_cancelar_cambio_fecha:
  6646                           	opt stack 0
  6647                           tosu	equ	0xFFF
  6648                           tosh	equ	0xFFE
  6649                           tosl	equ	0xFFD
  6650                           pclath	equ	0xFFA
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           postinc1	equ	0xFE6
  6659                           postdec1	equ	0xFE5
  6660                           fsr1h	equ	0xFE2
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           plusw2	equ	0xFDB
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _borrar_current_password *****************
  6671 ;; Defined at:
  6672 ;;		line 122 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, status,2
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_menu_cambiar_password
  6696 ;;		_leer_teclado
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text40
  6701  00DC50                     __ptext40:
  6702                           	opt stack 0
  6703  00DC50                     _borrar_current_password:
  6704                           	opt stack 29
  6705                           
  6706                           ;alarma.c: 123: *current_password = 0;
  6707                           
  6708                           ;incstack = 0
  6709  00DC50  0E00               	movlw	0
  6710  00DC52  0100               	movlb	0	; () banked
  6711  00DC54  6FBE               	movwf	_current_password& (0+255),b
  6712                           
  6713                           ;alarma.c: 124: tamanio_password = 0;
  6714  00DC56  0E00               	movlw	0
  6715  00DC58  6E59               	movwf	_tamanio_password+1,c
  6716  00DC5A  0E00               	movlw	0
  6717  00DC5C  6E58               	movwf	_tamanio_password,c
  6718                           
  6719                           ; BSR set to: 0
  6720  00DC5E  0012               	return		;funcret
  6721  00DC60                     __end_of_borrar_current_password:
  6722                           	opt stack 0
  6723                           tosu	equ	0xFFF
  6724                           tosh	equ	0xFFE
  6725                           tosl	equ	0xFFD
  6726                           pclath	equ	0xFFA
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           indf1	equ	0xFE7
  6734                           postinc1	equ	0xFE6
  6735                           postdec1	equ	0xFE5
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           plusw2	equ	0xFDB
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _borrar_nuevo_password *****************
  6747 ;; Defined at:
  6748 ;;		line 127 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		wreg, status,2
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_menu_cambiar_password
  6772 ;;		_leer_teclado
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text41
  6777  00DCBA                     __ptext41:
  6778                           	opt stack 0
  6779  00DCBA                     _borrar_nuevo_password:
  6780                           	opt stack 29
  6781                           
  6782                           ;alarma.c: 128: *new_password = 0;
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786  00DCBA  0E00               	movlw	0
  6787  00DCBC  0100               	movlb	0	; () banked
  6788  00DCBE  6FC5               	movwf	_new_password& (0+255),b
  6789                           
  6790                           ;alarma.c: 129: tamanio_new_password = 0;
  6791  00DCC0  0E00               	movlw	0
  6792  00DCC2  0100               	movlb	0	; () banked
  6793  00DCC4  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  6794  00DCC6  0E00               	movlw	0
  6795  00DCC8  6FE9               	movwf	_tamanio_new_password& (0+255),b
  6796                           
  6797                           ; BSR set to: 0
  6798  00DCCA  0012               	return		;funcret
  6799  00DCCC                     __end_of_borrar_nuevo_password:
  6800                           	opt stack 0
  6801                           tosu	equ	0xFFF
  6802                           tosh	equ	0xFFE
  6803                           tosl	equ	0xFFD
  6804                           pclath	equ	0xFFA
  6805                           tblptru	equ	0xFF8
  6806                           tblptrh	equ	0xFF7
  6807                           tblptrl	equ	0xFF6
  6808                           tablat	equ	0xFF5
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           indf1	equ	0xFE7
  6812                           postinc1	equ	0xFE6
  6813                           postdec1	equ	0xFE5
  6814                           fsr1h	equ	0xFE2
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           plusw2	equ	0xFDB
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _borrar_temporal_password *****************
  6825 ;; Defined at:
  6826 ;;		line 132 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;		None               void
  6833 ;; Registers used:
  6834 ;;		wreg, status,2
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_menu_cambiar_password
  6850 ;;		_leer_teclado
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text42
  6855  00DC40                     __ptext42:
  6856                           	opt stack 0
  6857  00DC40                     _borrar_temporal_password:
  6858                           	opt stack 29
  6859                           
  6860                           ;alarma.c: 133: *temporal = 0;
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;incstack = 0
  6864  00DC40  0E00               	movlw	0
  6865  00DC42  0100               	movlb	0	; () banked
  6866  00DC44  6FCC               	movwf	_temporal& (0+255),b
  6867                           
  6868                           ;alarma.c: 134: tamanio_password = 0;
  6869  00DC46  0E00               	movlw	0
  6870  00DC48  6E59               	movwf	_tamanio_password+1,c
  6871  00DC4A  0E00               	movlw	0
  6872  00DC4C  6E58               	movwf	_tamanio_password,c
  6873                           
  6874                           ; BSR set to: 0
  6875  00DC4E  0012               	return		;funcret
  6876  00DC50                     __end_of_borrar_temporal_password:
  6877                           	opt stack 0
  6878                           tosu	equ	0xFFF
  6879                           tosh	equ	0xFFE
  6880                           tosl	equ	0xFFD
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           postinc0	equ	0xFEE
  6887                           wreg	equ	0xFE8
  6888                           indf1	equ	0xFE7
  6889                           postinc1	equ	0xFE6
  6890                           postdec1	equ	0xFE5
  6891                           fsr1h	equ	0xFE2
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           plusw2	equ	0xFDB
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function _borrar_hora *****************
  6902 ;; Defined at:
  6903 ;;		line 188 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;		None
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;		None
  6908 ;; Return value:  Size  Location     Type
  6909 ;;		None               void
  6910 ;; Registers used:
  6911 ;;		wreg, status,2
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6921 ;;Total ram usage:        0 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_menu_cambiar_horario
  6927 ;;		_leer_teclado
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text43
  6932  00DC30                     __ptext43:
  6933                           	opt stack 0
  6934  00DC30                     _borrar_hora:
  6935                           	opt stack 29
  6936                           
  6937                           ;fecha.c: 189: *hour = 0;
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;incstack = 0
  6941  00DC30  0E00               	movlw	0
  6942  00DC32  0100               	movlb	0	; () banked
  6943  00DC34  6FD9               	movwf	fecha@hour& (0+255),b
  6944                           
  6945                           ;fecha.c: 190: tamanio_hora = 0;
  6946  00DC36  0E00               	movlw	0
  6947  00DC38  6E55               	movwf	_tamanio_hora+1,c
  6948  00DC3A  0E00               	movlw	0
  6949  00DC3C  6E54               	movwf	_tamanio_hora,c
  6950                           
  6951                           ; BSR set to: 0
  6952  00DC3E  0012               	return		;funcret
  6953  00DC40                     __end_of_borrar_hora:
  6954                           	opt stack 0
  6955                           tosu	equ	0xFFF
  6956                           tosh	equ	0xFFE
  6957                           tosl	equ	0xFFD
  6958                           pclath	equ	0xFFA
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           postinc0	equ	0xFEE
  6964                           wreg	equ	0xFE8
  6965                           indf1	equ	0xFE7
  6966                           postinc1	equ	0xFE6
  6967                           postdec1	equ	0xFE5
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           plusw2	equ	0xFDB
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _borrar_minutos *****************
  6979 ;; Defined at:
  6980 ;;		line 194 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, status,2
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6998 ;;Total ram usage:        0 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; This function calls:
  7001 ;;		Nothing
  7002 ;; This function is called by:
  7003 ;;		_menu_cambiar_horario
  7004 ;;		_leer_teclado
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text44
  7009  00DCA8                     __ptext44:
  7010                           	opt stack 0
  7011  00DCA8                     _borrar_minutos:
  7012                           	opt stack 29
  7013                           
  7014                           ;fecha.c: 195: *minutes = 0;
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;incstack = 0
  7018  00DCA8  0E00               	movlw	0
  7019  00DCAA  0100               	movlb	0	; () banked
  7020  00DCAC  6FDC               	movwf	fecha@minutes& (0+255),b
  7021                           
  7022                           ;fecha.c: 196: tamanio_minutos = 0;
  7023  00DCAE  0E00               	movlw	0
  7024  00DCB0  0100               	movlb	0	; () banked
  7025  00DCB2  6FE8               	movwf	(_tamanio_minutos+1)& (0+255),b
  7026  00DCB4  0E00               	movlw	0
  7027  00DCB6  6FE7               	movwf	_tamanio_minutos& (0+255),b
  7028                           
  7029                           ; BSR set to: 0
  7030  00DCB8  0012               	return		;funcret
  7031  00DCBA                     __end_of_borrar_minutos:
  7032                           	opt stack 0
  7033                           tosu	equ	0xFFF
  7034                           tosh	equ	0xFFE
  7035                           tosl	equ	0xFFD
  7036                           pclath	equ	0xFFA
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           postinc1	equ	0xFE6
  7045                           postdec1	equ	0xFE5
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _borrar_dia *****************
  7057 ;; Defined at:
  7058 ;;		line 121 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, status,2
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7076 ;;Total ram usage:        0 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; This function calls:
  7079 ;;		Nothing
  7080 ;; This function is called by:
  7081 ;;		_menu_cambiar_fecha
  7082 ;;		_leer_teclado
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text45
  7087  00DC20                     __ptext45:
  7088                           	opt stack 0
  7089  00DC20                     _borrar_dia:
  7090                           	opt stack 29
  7091                           
  7092                           ;fecha.c: 122: *day = 0;
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;incstack = 0
  7096  00DC20  0E00               	movlw	0
  7097  00DC22  0100               	movlb	0	; () banked
  7098  00DC24  6FD6               	movwf	fecha@day& (0+255),b
  7099                           
  7100                           ;fecha.c: 123: tamanio_dia = 0;
  7101  00DC26  0E00               	movlw	0
  7102  00DC28  6E53               	movwf	_tamanio_dia+1,c
  7103  00DC2A  0E00               	movlw	0
  7104  00DC2C  6E52               	movwf	_tamanio_dia,c
  7105                           
  7106                           ; BSR set to: 0
  7107  00DC2E  0012               	return		;funcret
  7108  00DC30                     __end_of_borrar_dia:
  7109                           	opt stack 0
  7110                           tosu	equ	0xFFF
  7111                           tosh	equ	0xFFE
  7112                           tosl	equ	0xFFD
  7113                           pclath	equ	0xFFA
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           postinc0	equ	0xFEE
  7119                           wreg	equ	0xFE8
  7120                           indf1	equ	0xFE7
  7121                           postinc1	equ	0xFE6
  7122                           postdec1	equ	0xFE5
  7123                           fsr1h	equ	0xFE2
  7124                           fsr1l	equ	0xFE1
  7125                           indf2	equ	0xFDF
  7126                           postinc2	equ	0xFDE
  7127                           postdec2	equ	0xFDD
  7128                           plusw2	equ	0xFDB
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _borrar_mes *****************
  7134 ;; Defined at:
  7135 ;;		line 127 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;		None               void
  7142 ;; Registers used:
  7143 ;;		wreg, status,2
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7153 ;;Total ram usage:        0 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_menu_cambiar_fecha
  7159 ;;		_leer_teclado
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text46
  7164  00DC10                     __ptext46:
  7165                           	opt stack 0
  7166  00DC10                     _borrar_mes:
  7167                           	opt stack 29
  7168                           
  7169                           ;fecha.c: 128: *month = 0;
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;incstack = 0
  7173  00DC10  0E00               	movlw	0
  7174  00DC12  0100               	movlb	0	; () banked
  7175  00DC14  6FDF               	movwf	fecha@month& (0+255),b
  7176                           
  7177                           ;fecha.c: 129: tamanio_mes = 0;
  7178  00DC16  0E00               	movlw	0
  7179  00DC18  6E57               	movwf	_tamanio_mes+1,c
  7180  00DC1A  0E00               	movlw	0
  7181  00DC1C  6E56               	movwf	_tamanio_mes,c
  7182                           
  7183                           ; BSR set to: 0
  7184  00DC1E  0012               	return		;funcret
  7185  00DC20                     __end_of_borrar_mes:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           indf1	equ	0xFE7
  7198                           postinc1	equ	0xFE6
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           plusw2	equ	0xFDB
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _borrar_anio *****************
  7211 ;; Defined at:
  7212 ;;		line 132 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;		None               void
  7219 ;; Registers used:
  7220 ;;		wreg, status,2
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_menu_cambiar_fecha
  7236 ;;		_leer_teclado
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text47
  7241  00DC96                     __ptext47:
  7242                           	opt stack 0
  7243  00DC96                     _borrar_anio:
  7244                           	opt stack 29
  7245                           
  7246                           ;fecha.c: 133: *year = 0;
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;incstack = 0
  7250  00DC96  0E00               	movlw	0
  7251  00DC98  0100               	movlb	0	; () banked
  7252  00DC9A  6FE2               	movwf	fecha@year& (0+255),b
  7253                           
  7254                           ;fecha.c: 134: tamanio_anio = 0;
  7255  00DC9C  0E00               	movlw	0
  7256  00DC9E  0100               	movlb	0	; () banked
  7257  00DCA0  6FE6               	movwf	(_tamanio_anio+1)& (0+255),b
  7258  00DCA2  0E00               	movlw	0
  7259  00DCA4  6FE5               	movwf	_tamanio_anio& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262  00DCA6  0012               	return		;funcret
  7263  00DCA8                     __end_of_borrar_anio:
  7264                           	opt stack 0
  7265                           tosu	equ	0xFFF
  7266                           tosh	equ	0xFFE
  7267                           tosl	equ	0xFFD
  7268                           pclath	equ	0xFFA
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           indf1	equ	0xFE7
  7276                           postinc1	equ	0xFE6
  7277                           postdec1	equ	0xFE5
  7278                           fsr1h	equ	0xFE2
  7279                           fsr1l	equ	0xFE1
  7280                           indf2	equ	0xFDF
  7281                           postinc2	equ	0xFDE
  7282                           postdec2	equ	0xFDD
  7283                           plusw2	equ	0xFDB
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _restaurar_comando *****************
  7289 ;; Defined at:
  7290 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;		None               void
  7297 ;; Registers used:
  7298 ;;		wreg, status,2
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7308 ;;Total ram usage:        0 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; This function calls:
  7311 ;;		Nothing
  7312 ;; This function is called by:
  7313 ;;		_main
  7314 ;;		_inicializar_teclado
  7315 ;;		_actualiza_dia
  7316 ;;		_cancelar_cambio_fecha
  7317 ;;		_actualizar_hora
  7318 ;;		_cancelar_cambio_hora
  7319 ;;		_cancelar_cambio_password
  7320 ;;		_actualizar_password
  7321 ;;		_leer_teclado
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text48
  7326  00DD10                     __ptext48:
  7327                           	opt stack 0
  7328  00DD10                     _restaurar_comando:
  7329                           	opt stack 29
  7330                           
  7331                           ;teclado.c: 11: tamanio_comando = 0;
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;incstack = 0
  7335  00DD10  0E00               	movlw	0
  7336  00DD12  6E48               	movwf	_tamanio_comando+1,c
  7337  00DD14  0E00               	movlw	0
  7338  00DD16  6E47               	movwf	_tamanio_comando,c
  7339                           
  7340                           ;teclado.c: 13: comando[0] = 'x';
  7341  00DD18  0E78               	movlw	120
  7342  00DD1A  0100               	movlb	0	; () banked
  7343  00DD1C  6FD3               	movwf	_comando& (0+255),b
  7344                           
  7345                           ;teclado.c: 14: comando[1] = 'x';
  7346  00DD1E  0E78               	movlw	120
  7347  00DD20  0100               	movlb	0	; () banked
  7348  00DD22  6FD4               	movwf	(_comando+1)& (0+255),b
  7349                           
  7350                           ;teclado.c: 15: comando[2] = 0;
  7351  00DD24  0E00               	movlw	0
  7352  00DD26  0100               	movlb	0	; () banked
  7353  00DD28  6FD5               	movwf	(_comando+2)& (0+255),b
  7354                           
  7355                           ; BSR set to: 0
  7356  00DD2A  0012               	return		;funcret
  7357  00DD2C                     __end_of_restaurar_comando:
  7358                           	opt stack 0
  7359                           tosu	equ	0xFFF
  7360                           tosh	equ	0xFFE
  7361                           tosl	equ	0xFFD
  7362                           pclath	equ	0xFFA
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           postinc0	equ	0xFEE
  7368                           wreg	equ	0xFE8
  7369                           indf1	equ	0xFE7
  7370                           postinc1	equ	0xFE6
  7371                           postdec1	equ	0xFE5
  7372                           fsr1h	equ	0xFE2
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           plusw2	equ	0xFDB
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function _desactivar_alarma *****************
  7383 ;; Defined at:
  7384 ;;		line 256 in file "main.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7402 ;;Total ram usage:        0 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    7
  7405 ;; This function calls:
  7406 ;;		_clear_display
  7407 ;;		_inicializar_intentos_fallidos
  7408 ;;		_menu_ingresar_password
  7409 ;; This function is called by:
  7410 ;;		_main
  7411 ;;		_leer_teclado
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text49
  7416  00DEAA                     __ptext49:
  7417                           	opt stack 0
  7418  00DEAA                     _desactivar_alarma:
  7419                           	opt stack 22
  7420                           
  7421                           ;main.c: 257: inicializar_intentos_fallidos();
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;incstack = 0
  7425  00DEAA  ECFB  F06D         	call	_inicializar_intentos_fallidos	;wreg free
  7426                           
  7427                           ;main.c: 258: puntero_funcion = mostrar_guardar_password;
  7428  00DEAE  0E02               	movlw	low _mostrar_guardar_password
  7429  00DEB0  0100               	movlb	0	; () banked
  7430  00DEB2  6F9E               	movwf	_puntero_funcion& (0+255),b
  7431  00DEB4  0EE0               	movlw	high _mostrar_guardar_password
  7432  00DEB6  0100               	movlb	0	; () banked
  7433  00DEB8  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;main.c: 259: menu_ingresar_password();
  7437  00DEBA  EC54  F076         	call	_menu_ingresar_password	;wreg free
  7438                           
  7439                           ;main.c: 260: clear_display(tamanio_password+1);
  7440  00DEBE  0E01               	movlw	1
  7441  00DEC0  2458               	addwf	_tamanio_password,w,c
  7442  00DEC2  6E0B               	movwf	clear_display@pos,c
  7443  00DEC4  0E00               	movlw	0
  7444  00DEC6  2059               	addwfc	_tamanio_password+1,w,c
  7445  00DEC8  6E0C               	movwf	clear_display@pos+1,c
  7446  00DECA  EC0F  F06F         	call	_clear_display	;wreg free
  7447  00DECE  0012               	return		;funcret
  7448  00DED0                     __end_of_desactivar_alarma:
  7449                           	opt stack 0
  7450                           tosu	equ	0xFFF
  7451                           tosh	equ	0xFFE
  7452                           tosl	equ	0xFFD
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           indf1	equ	0xFE7
  7461                           postinc1	equ	0xFE6
  7462                           postdec1	equ	0xFE5
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           plusw2	equ	0xFDB
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _inicializar_hora *****************
  7474 ;; Defined at:
  7475 ;;		line 142 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;		None               void
  7482 ;; Registers used:
  7483 ;;		wreg, status,2
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7493 ;;Total ram usage:        0 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_actualizar_hora
  7499 ;;		_cancelar_cambio_hora
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text50
  7504  00DDBC                     __ptext50:
  7505                           	opt stack 0
  7506  00DDBC                     _inicializar_hora:
  7507                           	opt stack 25
  7508                           
  7509                           ;fecha.c: 143: *hour = 0;
  7510                           
  7511                           ;incstack = 0
  7512  00DDBC  0E00               	movlw	0
  7513  00DDBE  0100               	movlb	0	; () banked
  7514  00DDC0  6FD9               	movwf	fecha@hour& (0+255),b
  7515                           
  7516                           ;fecha.c: 144: *minutes = 0;
  7517  00DDC2  0E00               	movlw	0
  7518  00DDC4  0100               	movlb	0	; () banked
  7519  00DDC6  6FDC               	movwf	fecha@minutes& (0+255),b
  7520                           
  7521                           ;fecha.c: 146: tamanio_hora = 0;
  7522  00DDC8  0E00               	movlw	0
  7523  00DDCA  6E55               	movwf	_tamanio_hora+1,c
  7524  00DDCC  0E00               	movlw	0
  7525  00DDCE  6E54               	movwf	_tamanio_hora,c
  7526                           
  7527                           ;fecha.c: 147: tamanio_minutos = 0;
  7528  00DDD0  0E00               	movlw	0
  7529  00DDD2  0100               	movlb	0	; () banked
  7530  00DDD4  6FE8               	movwf	(_tamanio_minutos+1)& (0+255),b
  7531  00DDD6  0E00               	movlw	0
  7532  00DDD8  6FE7               	movwf	_tamanio_minutos& (0+255),b
  7533                           
  7534                           ; BSR set to: 0
  7535  00DDDA  0012               	return		;funcret
  7536  00DDDC                     __end_of_inicializar_hora:
  7537                           	opt stack 0
  7538                           tosu	equ	0xFFF
  7539                           tosh	equ	0xFFE
  7540                           tosl	equ	0xFFD
  7541                           pclath	equ	0xFFA
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           postinc0	equ	0xFEE
  7547                           wreg	equ	0xFE8
  7548                           indf1	equ	0xFE7
  7549                           postinc1	equ	0xFE6
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           plusw2	equ	0xFDB
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _inicializar_fecha *****************
  7562 ;; Defined at:
  7563 ;;		line 54 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;		None
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;		None
  7568 ;; Return value:  Size  Location     Type
  7569 ;;		None               void
  7570 ;; Registers used:
  7571 ;;		wreg, status,2
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7581 ;;Total ram usage:        0 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		_actualiza_dia
  7587 ;;		_cancelar_cambio_fecha
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text51
  7592  00DFA6                     __ptext51:
  7593                           	opt stack 0
  7594  00DFA6                     _inicializar_fecha:
  7595                           	opt stack 25
  7596                           
  7597                           ;fecha.c: 55: *day = 0;
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;incstack = 0
  7601  00DFA6  0E00               	movlw	0
  7602  00DFA8  0100               	movlb	0	; () banked
  7603  00DFAA  6FD6               	movwf	fecha@day& (0+255),b
  7604                           
  7605                           ;fecha.c: 56: *month = 0;
  7606  00DFAC  0E00               	movlw	0
  7607  00DFAE  0100               	movlb	0	; () banked
  7608  00DFB0  6FDF               	movwf	fecha@month& (0+255),b
  7609                           
  7610                           ;fecha.c: 57: *year = 0;
  7611  00DFB2  0E00               	movlw	0
  7612  00DFB4  0100               	movlb	0	; () banked
  7613  00DFB6  6FE2               	movwf	fecha@year& (0+255),b
  7614                           
  7615                           ;fecha.c: 59: tamanio_dia = 0;
  7616  00DFB8  0E00               	movlw	0
  7617  00DFBA  6E53               	movwf	_tamanio_dia+1,c
  7618  00DFBC  0E00               	movlw	0
  7619  00DFBE  6E52               	movwf	_tamanio_dia,c
  7620                           
  7621                           ;fecha.c: 60: tamanio_mes = 0;
  7622  00DFC0  0E00               	movlw	0
  7623  00DFC2  6E57               	movwf	_tamanio_mes+1,c
  7624  00DFC4  0E00               	movlw	0
  7625  00DFC6  6E56               	movwf	_tamanio_mes,c
  7626                           
  7627                           ;fecha.c: 61: tamanio_anio = 0;
  7628  00DFC8  0E00               	movlw	0
  7629  00DFCA  0100               	movlb	0	; () banked
  7630  00DFCC  6FE6               	movwf	(_tamanio_anio+1)& (0+255),b
  7631  00DFCE  0E00               	movlw	0
  7632  00DFD0  6FE5               	movwf	_tamanio_anio& (0+255),b
  7633                           
  7634                           ; BSR set to: 0
  7635  00DFD2  0012               	return		;funcret
  7636  00DFD4                     __end_of_inicializar_fecha:
  7637                           	opt stack 0
  7638                           tosu	equ	0xFFF
  7639                           tosh	equ	0xFFE
  7640                           tosl	equ	0xFFD
  7641                           pclath	equ	0xFFA
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           indf1	equ	0xFE7
  7649                           postinc1	equ	0xFE6
  7650                           postdec1	equ	0xFE5
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           plusw2	equ	0xFDB
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _menu_ingresar_password *****************
  7662 ;; Defined at:
  7663 ;;		line 97 in file "main.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  i               2   13[COMRAM] int 
  7668 ;; Return value:  Size  Location     Type
  7669 ;;		None               void
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7680 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7681 ;;Total ram usage:        3 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    6
  7684 ;; This function calls:
  7685 ;;		_clear_display
  7686 ;;		_lcd_comand
  7687 ;;		_lcd_gotoxy
  7688 ;;		_lcd_putrs
  7689 ;;		_validar_password
  7690 ;; This function is called by:
  7691 ;;		_mostrar_guardar_password
  7692 ;;		_desactivar_alarma
  7693 ;;		_accionar_alarma
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           	psect	text52
  7698  00ECA8                     __ptext52:
  7699                           	opt stack 0
  7700  00ECA8                     _menu_ingresar_password:
  7701                           	opt stack 22
  7702                           
  7703                           ;main.c: 99: lcd_comand(0b00001100);
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;incstack = 0
  7707  00ECA8  0E0C               	movlw	12
  7708  00ECAA  EC01  F06E         	call	_lcd_comand
  7709                           
  7710                           ;main.c: 100: lcd_gotoxy(1,1);
  7711  00ECAE  0E01               	movlw	1
  7712  00ECB0  6E05               	movwf	lcd_gotoxy@y,c
  7713  00ECB2  0E01               	movlw	1
  7714  00ECB4  EC31  F06F         	call	_lcd_gotoxy
  7715                           
  7716                           ;main.c: 101: lcd_putrs("Inserte password");
  7717  00ECB8  0E8D               	movlw	low STR_6
  7718  00ECBA  6E09               	movwf	lcd_putrs@ptr,c
  7719  00ECBC  0EFF               	movlw	high STR_6
  7720  00ECBE  6E0A               	movwf	lcd_putrs@ptr+1,c
  7721  00ECC0  ECC5  F070         	call	_lcd_putrs	;wreg free
  7722                           
  7723                           ;main.c: 102: lcd_gotoxy(tamanio_password+1,2);
  7724  00ECC4  0E02               	movlw	2
  7725  00ECC6  6E05               	movwf	lcd_gotoxy@y,c
  7726  00ECC8  2858               	incf	_tamanio_password,w,c
  7727  00ECCA  EC31  F06F         	call	_lcd_gotoxy
  7728                           
  7729                           ;main.c: 104: validar_password();
  7730  00ECCE  EC85  F072         	call	_validar_password	;wreg free
  7731                           
  7732                           ;main.c: 105: if (tamanio_password >= 6 && !autorizado){
  7733  00ECD2  BE59               	btfsc	_tamanio_password+1,7,c
  7734  00ECD4  0012               	return	
  7735  00ECD6  5059               	movf	_tamanio_password+1,w,c
  7736  00ECD8  E104               	bnz	u2850
  7737  00ECDA  0E06               	movlw	6
  7738  00ECDC  5C58               	subwf	_tamanio_password,w,c
  7739  00ECDE  A0D8               	btfss	status,0,c
  7740  00ECE0  0012               	return	
  7741  00ECE2                     u2850:
  7742  00ECE2  5045               	movf	_autorizado,w,c
  7743  00ECE4  1046               	iorwf	_autorizado+1,w,c
  7744  00ECE6  A4D8               	btfss	status,2,c
  7745  00ECE8  0012               	return	
  7746                           
  7747                           ;main.c: 106: lcd_gotoxy(1,2);
  7748  00ECEA  0E02               	movlw	2
  7749  00ECEC  6E05               	movwf	lcd_gotoxy@y,c
  7750  00ECEE  0E01               	movlw	1
  7751  00ECF0  EC31  F06F         	call	_lcd_gotoxy
  7752                           
  7753                           ;main.c: 107: lcd_putrs("ERROR pass");
  7754  00ECF4  0ED5               	movlw	low STR_7
  7755  00ECF6  6E09               	movwf	lcd_putrs@ptr,c
  7756  00ECF8  0EFF               	movlw	high STR_7
  7757  00ECFA  6E0A               	movwf	lcd_putrs@ptr+1,c
  7758  00ECFC  ECC5  F070         	call	_lcd_putrs	;wreg free
  7759                           
  7760                           ;main.c: 109: intentos_fallidos++;
  7761  00ED00  0100               	movlb	0	; () banked
  7762  00ED02  4B96               	infsnz	_intentos_fallidos& (0+255),f,b
  7763  00ED04  2B97               	incf	(_intentos_fallidos+1)& (0+255),f,b
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;main.c: 110: tamanio_password = 0;
  7767  00ED06  0E00               	movlw	0
  7768  00ED08  6E59               	movwf	_tamanio_password+1,c
  7769  00ED0A  0E00               	movlw	0
  7770  00ED0C  6E58               	movwf	_tamanio_password,c
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;main.c: 111: *current_password = 0;;
  7774  00ED0E  0E00               	movlw	0
  7775  00ED10  0100               	movlb	0	; () banked
  7776  00ED12  6FBE               	movwf	_current_password& (0+255),b
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;main.c: 113: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  7780  00ED14  0E00               	movlw	0
  7781  00ED16  6E0F               	movwf	menu_ingresar_password@i+1,c
  7782  00ED18  0E00               	movlw	0
  7783  00ED1A  6E0E               	movwf	menu_ingresar_password@i,c
  7784  00ED1C                     l3689:
  7785                           
  7786                           ; BSR set to: 0
  7787  00ED1C  BE0F               	btfsc	menu_ingresar_password@i+1,7,c
  7788  00ED1E  D008               	goto	l3693
  7789  00ED20  500F               	movf	menu_ingresar_password@i+1,w,c
  7790  00ED22  E112               	bnz	l3697
  7791  00ED24  0E04               	movlw	4
  7792  00ED26  5C0E               	subwf	menu_ingresar_password@i,w,c
  7793  00ED28  B0D8               	btfsc	status,0,c
  7794  00ED2A  D00E               	goto	l3697
  7795  00ED2C  D001               	goto	l3693
  7796                           
  7797                           ; BSR set to: 0
  7798  00ED2E  D00C               	goto	l3697
  7799  00ED30                     l3693:
  7800  00ED30  0EFF               	movlw	255
  7801  00ED32  6E0D               	movwf	??_menu_ingresar_password& (0+255),c
  7802  00ED34  0E8A               	movlw	138
  7803  00ED36                     u3867:
  7804  00ED36  2EE8               	decfsz	wreg,f,c
  7805  00ED38  D7FE               	goto	u3867
  7806  00ED3A  2E0D               	decfsz	??_menu_ingresar_password& (0+255),f,c
  7807  00ED3C  D7FC               	goto	u3867
  7808  00ED3E  D000               	nop2	
  7809  00ED40  4A0E               	infsnz	menu_ingresar_password@i,f,c
  7810  00ED42  2A0F               	incf	menu_ingresar_password@i+1,f,c
  7811  00ED44  D7EB               	goto	l3689
  7812  00ED46  D000               	goto	l3697
  7813  00ED48                     l3697:
  7814                           
  7815                           ;main.c: 114: clear_display(tamanio_password+1);
  7816  00ED48  0E01               	movlw	1
  7817  00ED4A  2458               	addwf	_tamanio_password,w,c
  7818  00ED4C  6E0B               	movwf	clear_display@pos,c
  7819  00ED4E  0E00               	movlw	0
  7820  00ED50  2059               	addwfc	_tamanio_password+1,w,c
  7821  00ED52  6E0C               	movwf	clear_display@pos+1,c
  7822  00ED54  EC0F  F06F         	call	_clear_display	;wreg free
  7823  00ED58  0012               	return	
  7824  00ED5A  0012               	return		;funcret
  7825  00ED5C                     __end_of_menu_ingresar_password:
  7826                           	opt stack 0
  7827                           tosu	equ	0xFFF
  7828                           tosh	equ	0xFFE
  7829                           tosl	equ	0xFFD
  7830                           pclath	equ	0xFFA
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           postinc0	equ	0xFEE
  7836                           wreg	equ	0xFE8
  7837                           indf1	equ	0xFE7
  7838                           postinc1	equ	0xFE6
  7839                           postdec1	equ	0xFE5
  7840                           fsr1h	equ	0xFE2
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           plusw2	equ	0xFDB
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _validar_password *****************
  7851 ;; Defined at:
  7852 ;;		line 61 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  i               2    2[COMRAM] int 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;		None               void
  7859 ;; Registers used:
  7860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7870 ;;Total ram usage:        4 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_menu_ingresar_password
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           	psect	text53
  7880  00E50A                     __ptext53:
  7881                           	opt stack 0
  7882  00E50A                     _validar_password:
  7883                           	opt stack 27
  7884                           
  7885                           ;alarma.c: 63: autorizado = 1;
  7886                           
  7887                           ;incstack = 0
  7888  00E50A  0E00               	movlw	0
  7889  00E50C  6E46               	movwf	_autorizado+1,c
  7890  00E50E  0E01               	movlw	1
  7891  00E510  6E45               	movwf	_autorizado,c
  7892                           
  7893                           ;alarma.c: 64: int i = 0;
  7894  00E512  0E00               	movlw	0
  7895  00E514  6E04               	movwf	validar_password@i+1,c
  7896  00E516  0E00               	movlw	0
  7897  00E518  6E03               	movwf	validar_password@i,c
  7898                           
  7899                           ;alarma.c: 65: while (i < 6 && autorizado==1){
  7900  00E51A  D018               	goto	l3583
  7901  00E51C                     l3577:
  7902                           
  7903                           ;alarma.c: 66: if (current_password[i] != password[i])
  7904  00E51C  0E68               	movlw	low _password
  7905  00E51E  2403               	addwf	validar_password@i,w,c
  7906  00E520  6ED9               	movwf	fsr2l,c
  7907  00E522  0E00               	movlw	high _password
  7908  00E524  2004               	addwfc	validar_password@i+1,w,c
  7909  00E526  6EDA               	movwf	fsr2h,c
  7910  00E528  0EBE               	movlw	low _current_password
  7911  00E52A  2403               	addwf	validar_password@i,w,c
  7912  00E52C  6EE1               	movwf	fsr1l,c
  7913  00E52E  0E00               	movlw	high _current_password
  7914  00E530  2004               	addwfc	validar_password@i+1,w,c
  7915  00E532  6EE2               	movwf	fsr1h,c
  7916  00E534  50DE               	movf	postinc2,w,c
  7917  00E536  18E6               	xorwf	postinc1,w,c
  7918  00E538  B4D8               	btfsc	status,2,c
  7919  00E53A  D005               	goto	l3581
  7920                           
  7921                           ;alarma.c: 67: autorizado = 0;
  7922  00E53C  0E00               	movlw	0
  7923  00E53E  6E46               	movwf	_autorizado+1,c
  7924  00E540  0E00               	movlw	0
  7925  00E542  6E45               	movwf	_autorizado,c
  7926  00E544  D000               	goto	l3581
  7927  00E546                     l3581:
  7928                           
  7929                           ;alarma.c: 68: i++;
  7930  00E546  4A03               	infsnz	validar_password@i,f,c
  7931  00E548  2A04               	incf	validar_password@i+1,f,c
  7932  00E54A  D000               	goto	l3583
  7933  00E54C                     l3583:
  7934  00E54C  BE04               	btfsc	validar_password@i+1,7,c
  7935  00E54E  D006               	goto	l3585
  7936  00E550  5004               	movf	validar_password@i+1,w,c
  7937  00E552  E10A               	bnz	l3587
  7938  00E554  0E06               	movlw	6
  7939  00E556  5C03               	subwf	validar_password@i,w,c
  7940  00E558  B0D8               	btfsc	status,0,c
  7941  00E55A  D006               	goto	l3587
  7942  00E55C                     l3585:
  7943  00E55C  0445               	decf	_autorizado,w,c
  7944  00E55E  1046               	iorwf	_autorizado+1,w,c
  7945  00E560  A4D8               	btfss	status,2,c
  7946  00E562  D002               	goto	l3587
  7947  00E564  D7DB               	goto	l3577
  7948  00E566  D000               	goto	l3587
  7949  00E568                     l3587:
  7950                           
  7951                           ;alarma.c: 69: }
  7952                           ;alarma.c: 71: if (autorizado == 1){
  7953  00E568  0445               	decf	_autorizado,w,c
  7954  00E56A  1046               	iorwf	_autorizado+1,w,c
  7955  00E56C  A4D8               	btfss	status,2,c
  7956  00E56E  0012               	return	
  7957                           
  7958                           ;alarma.c: 72: tamanio_password = 0;
  7959  00E570  0E00               	movlw	0
  7960  00E572  6E59               	movwf	_tamanio_password+1,c
  7961  00E574  0E00               	movlw	0
  7962  00E576  6E58               	movwf	_tamanio_password,c
  7963  00E578  0012               	return	
  7964  00E57A  0012               	return		;funcret
  7965  00E57C                     __end_of_validar_password:
  7966                           	opt stack 0
  7967                           tosu	equ	0xFFF
  7968                           tosh	equ	0xFFE
  7969                           tosl	equ	0xFFD
  7970                           pclath	equ	0xFFA
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           indf1	equ	0xFE7
  7978                           postinc1	equ	0xFE6
  7979                           postdec1	equ	0xFE5
  7980                           fsr1h	equ	0xFE2
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           plusw2	equ	0xFDB
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function _clear_display *****************
  7991 ;; Defined at:
  7992 ;;		line 91 in file "main.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  pos             2   10[COMRAM] const int 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;		None
  7997 ;; Return value:  Size  Location     Type
  7998 ;;		None               void
  7999 ;; Registers used:
  8000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8010 ;;Total ram usage:        2 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    5
  8013 ;; This function calls:
  8014 ;;		_lcd_gotoxy
  8015 ;;		_lcd_putrs
  8016 ;; This function is called by:
  8017 ;;		_menu_ingresar_password
  8018 ;;		_menu_cambiar_fecha
  8019 ;;		_menu_cambiar_horario
  8020 ;;		_menu_cambiar_password
  8021 ;;		_desactivar_alarma
  8022 ;;		_accionar_alarma
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text54
  8027  00DE1E                     __ptext54:
  8028                           	opt stack 0
  8029  00DE1E                     _clear_display:
  8030                           	opt stack 24
  8031                           
  8032                           ;main.c: 92: lcd_gotoxy(pos,2);
  8033                           
  8034                           ;incstack = 0
  8035  00DE1E  0E02               	movlw	2
  8036  00DE20  6E05               	movwf	lcd_gotoxy@y,c
  8037  00DE22  500B               	movf	clear_display@pos,w,c
  8038  00DE24  EC31  F06F         	call	_lcd_gotoxy
  8039                           
  8040                           ;main.c: 93: lcd_putrs("                         ");
  8041  00DE28  0EB4               	movlw	low STR_5
  8042  00DE2A  6E09               	movwf	lcd_putrs@ptr,c
  8043  00DE2C  0EFE               	movlw	high STR_5
  8044  00DE2E  6E0A               	movwf	lcd_putrs@ptr+1,c
  8045  00DE30  ECC5  F070         	call	_lcd_putrs	;wreg free
  8046                           
  8047                           ;main.c: 94: lcd_gotoxy(pos,2);
  8048  00DE34  0E02               	movlw	2
  8049  00DE36  6E05               	movwf	lcd_gotoxy@y,c
  8050  00DE38  500B               	movf	clear_display@pos,w,c
  8051  00DE3A  EC31  F06F         	call	_lcd_gotoxy
  8052  00DE3E  0012               	return		;funcret
  8053  00DE40                     __end_of_clear_display:
  8054                           	opt stack 0
  8055                           tosu	equ	0xFFF
  8056                           tosh	equ	0xFFE
  8057                           tosl	equ	0xFFD
  8058                           pclath	equ	0xFFA
  8059                           tblptru	equ	0xFF8
  8060                           tblptrh	equ	0xFF7
  8061                           tblptrl	equ	0xFF6
  8062                           tablat	equ	0xFF5
  8063                           postinc0	equ	0xFEE
  8064                           wreg	equ	0xFE8
  8065                           indf1	equ	0xFE7
  8066                           postinc1	equ	0xFE6
  8067                           postdec1	equ	0xFE5
  8068                           fsr1h	equ	0xFE2
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           plusw2	equ	0xFDB
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078 ;; *************** function _inicializar_teclado *****************
  8079 ;; Defined at:
  8080 ;;		line 19 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;		None
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;		None
  8085 ;; Return value:  Size  Location     Type
  8086 ;;		None               void
  8087 ;; Registers used:
  8088 ;;		wreg, status,2, status,0, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8098 ;;Total ram usage:        0 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    1
  8101 ;; This function calls:
  8102 ;;		_restaurar_comando
  8103 ;; This function is called by:
  8104 ;;		_main
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           	psect	text55
  8109  00DEF8                     __ptext55:
  8110                           	opt stack 0
  8111  00DEF8                     _inicializar_teclado:
  8112                           	opt stack 29
  8113                           
  8114                           ;teclado.c: 21: funcion_pulsador_B = restaurar_comando;
  8115                           
  8116                           ;incstack = 0
  8117  00DEF8  0E10               	movlw	low _restaurar_comando
  8118  00DEFA  0100               	movlb	0	; () banked
  8119  00DEFC  6F8E               	movwf	_funcion_pulsador_B& (0+255),b
  8120  00DEFE  0EDD               	movlw	high _restaurar_comando
  8121  00DF00  0100               	movlb	0	; () banked
  8122  00DF02  6F8F               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  8123                           
  8124                           ;teclado.c: 22: funcion_pulsador_C = restaurar_comando;
  8125  00DF04  0E10               	movlw	low _restaurar_comando
  8126  00DF06  0100               	movlb	0	; () banked
  8127  00DF08  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  8128  00DF0A  0EDD               	movlw	high _restaurar_comando
  8129  00DF0C  0100               	movlb	0	; () banked
  8130  00DF0E  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  8131                           
  8132                           ;teclado.c: 23: funcion_pulsador_D = restaurar_comando;
  8133  00DF10  0E10               	movlw	low _restaurar_comando
  8134  00DF12  0100               	movlb	0	; () banked
  8135  00DF14  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  8136  00DF16  0EDD               	movlw	high _restaurar_comando
  8137  00DF18  0100               	movlb	0	; () banked
  8138  00DF1A  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;teclado.c: 25: restaurar_comando();
  8142  00DF1C  EC88  F06E         	call	_restaurar_comando	;wreg free
  8143  00DF20  0012               	return		;funcret
  8144  00DF22                     __end_of_inicializar_teclado:
  8145                           	opt stack 0
  8146                           tosu	equ	0xFFF
  8147                           tosh	equ	0xFFE
  8148                           tosl	equ	0xFFD
  8149                           pclath	equ	0xFFA
  8150                           tblptru	equ	0xFF8
  8151                           tblptrh	equ	0xFF7
  8152                           tblptrl	equ	0xFF6
  8153                           tablat	equ	0xFF5
  8154                           postinc0	equ	0xFEE
  8155                           wreg	equ	0xFE8
  8156                           indf1	equ	0xFE7
  8157                           postinc1	equ	0xFE6
  8158                           postdec1	equ	0xFE5
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           plusw2	equ	0xFDB
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _inicializar_alarma *****************
  8170 ;; Defined at:
  8171 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  2   94[None  ] int 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_main
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text56
  8199  00E666                     __ptext56:
  8200                           	opt stack 0
  8201  00E666                     _inicializar_alarma:
  8202                           	opt stack 30
  8203                           
  8204                           ;alarma.c: 4: password[0] = '1';
  8205                           
  8206                           ;incstack = 0
  8207  00E666  0E31               	movlw	49
  8208  00E668  0100               	movlb	0	; () banked
  8209  00E66A  6F68               	movwf	_password& (0+255),b
  8210                           
  8211                           ;alarma.c: 5: password[1] = '2';
  8212  00E66C  0E32               	movlw	50
  8213  00E66E  0100               	movlb	0	; () banked
  8214  00E670  6F69               	movwf	(_password+1)& (0+255),b
  8215                           
  8216                           ;alarma.c: 6: password[2] = '3';
  8217  00E672  0E33               	movlw	51
  8218  00E674  0100               	movlb	0	; () banked
  8219  00E676  6F6A               	movwf	(_password+2)& (0+255),b
  8220                           
  8221                           ;alarma.c: 7: password[3] = '4';
  8222  00E678  0E34               	movlw	52
  8223  00E67A  0100               	movlb	0	; () banked
  8224  00E67C  6F6B               	movwf	(_password+3)& (0+255),b
  8225                           
  8226                           ;alarma.c: 8: password[4] = '5';
  8227  00E67E  0E35               	movlw	53
  8228  00E680  0100               	movlb	0	; () banked
  8229  00E682  6F6C               	movwf	(_password+4)& (0+255),b
  8230                           
  8231                           ;alarma.c: 9: password[5] = '6';
  8232  00E684  0E36               	movlw	54
  8233  00E686  0100               	movlb	0	; () banked
  8234  00E688  6F6D               	movwf	(_password+5)& (0+255),b
  8235                           
  8236                           ;alarma.c: 10: password[6] = 0;
  8237  00E68A  0E00               	movlw	0
  8238  00E68C  0100               	movlb	0	; () banked
  8239  00E68E  6F6E               	movwf	(_password+6)& (0+255),b
  8240                           
  8241                           ;alarma.c: 12: *current_password = 0;
  8242  00E690  0E00               	movlw	0
  8243  00E692  0100               	movlb	0	; () banked
  8244  00E694  6FBE               	movwf	_current_password& (0+255),b
  8245                           
  8246                           ;alarma.c: 13: *temporal = 0;
  8247  00E696  0E00               	movlw	0
  8248  00E698  0100               	movlb	0	; () banked
  8249  00E69A  6FCC               	movwf	_temporal& (0+255),b
  8250                           
  8251                           ;alarma.c: 14: *new_password = 0;
  8252  00E69C  0E00               	movlw	0
  8253  00E69E  0100               	movlb	0	; () banked
  8254  00E6A0  6FC5               	movwf	_new_password& (0+255),b
  8255                           
  8256                           ;alarma.c: 16: tamanio_password=0;
  8257  00E6A2  0E00               	movlw	0
  8258  00E6A4  6E59               	movwf	_tamanio_password+1,c
  8259  00E6A6  0E00               	movlw	0
  8260  00E6A8  6E58               	movwf	_tamanio_password,c
  8261                           
  8262                           ;alarma.c: 17: tamanio_new_password=0;
  8263  00E6AA  0E00               	movlw	0
  8264  00E6AC  0100               	movlb	0	; () banked
  8265  00E6AE  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  8266  00E6B0  0E00               	movlw	0
  8267  00E6B2  6FE9               	movwf	_tamanio_new_password& (0+255),b
  8268                           
  8269                           ;alarma.c: 19: autorizado=0;
  8270  00E6B4  0E00               	movlw	0
  8271  00E6B6  6E46               	movwf	_autorizado+1,c
  8272  00E6B8  0E00               	movlw	0
  8273  00E6BA  6E45               	movwf	_autorizado,c
  8274                           
  8275                           ;alarma.c: 20: encendida = 0;
  8276  00E6BC  0E00               	movlw	0
  8277  00E6BE  0100               	movlb	0	; () banked
  8278  00E6C0  6F8B               	movwf	(_encendida+1)& (0+255),b
  8279  00E6C2  0E00               	movlw	0
  8280  00E6C4  6F8A               	movwf	_encendida& (0+255),b
  8281                           
  8282                           ;alarma.c: 21: activada = 0;
  8283  00E6C6  0E00               	movlw	0
  8284  00E6C8  0100               	movlb	0	; () banked
  8285  00E6CA  6F85               	movwf	(_activada+1)& (0+255),b
  8286  00E6CC  0E00               	movlw	0
  8287  00E6CE  6F84               	movwf	_activada& (0+255),b
  8288                           
  8289                           ;alarma.c: 22: intentos_fallidos = 0;
  8290  00E6D0  0E00               	movlw	0
  8291  00E6D2  0100               	movlb	0	; () banked
  8292  00E6D4  6F97               	movwf	(_intentos_fallidos+1)& (0+255),b
  8293  00E6D6  0E00               	movlw	0
  8294  00E6D8  6F96               	movwf	_intentos_fallidos& (0+255),b
  8295                           
  8296                           ; BSR set to: 0
  8297  00E6DA  0012               	return		;funcret
  8298  00E6DC                     __end_of_inicializar_alarma:
  8299                           	opt stack 0
  8300                           tosu	equ	0xFFF
  8301                           tosh	equ	0xFFE
  8302                           tosl	equ	0xFFD
  8303                           pclath	equ	0xFFA
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           postinc0	equ	0xFEE
  8309                           wreg	equ	0xFE8
  8310                           indf1	equ	0xFE7
  8311                           postinc1	equ	0xFE6
  8312                           postdec1	equ	0xFE5
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           plusw2	equ	0xFDB
  8319                           fsr2h	equ	0xFDA
  8320                           fsr2l	equ	0xFD9
  8321                           status	equ	0xFD8
  8322                           
  8323 ;; *************** function _desactivar_sonido_alarma *****************
  8324 ;; Defined at:
  8325 ;;		line 248 in file "main.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;		None               void
  8332 ;; Registers used:
  8333 ;;		wreg, status,2, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8343 ;;Total ram usage:        0 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    1
  8346 ;; This function calls:
  8347 ;;		_inicializar_intentos_fallidos
  8348 ;; This function is called by:
  8349 ;;		_main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text57
  8354  00DCCC                     __ptext57:
  8355                           	opt stack 0
  8356  00DCCC                     _desactivar_sonido_alarma:
  8357                           	opt stack 29
  8358                           
  8359                           ;main.c: 249: activada=0;
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;incstack = 0
  8363  00DCCC  0E00               	movlw	0
  8364  00DCCE  0100               	movlb	0	; () banked
  8365  00DCD0  6F85               	movwf	(_activada+1)& (0+255),b
  8366  00DCD2  0E00               	movlw	0
  8367  00DCD4  6F84               	movwf	_activada& (0+255),b
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;main.c: 250: LATBbits.LATB0 = 0;;
  8371  00DCD6  908A               	bcf	3978,0,c	;volatile
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;main.c: 251: LATCbits.LATC7 = 0;;
  8375  00DCD8  9E8B               	bcf	3979,7,c	;volatile
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;main.c: 252: LATCbits.LATC6 = 0;;
  8379  00DCDA  9C8B               	bcf	3979,6,c	;volatile
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;main.c: 253: inicializar_intentos_fallidos();
  8383  00DCDC  ECFB  F06D         	call	_inicializar_intentos_fallidos	;wreg free
  8384  00DCE0  0012               	return		;funcret
  8385  00DCE2                     __end_of_desactivar_sonido_alarma:
  8386                           	opt stack 0
  8387                           tosu	equ	0xFFF
  8388                           tosh	equ	0xFFE
  8389                           tosl	equ	0xFFD
  8390                           pclath	equ	0xFFA
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           indf1	equ	0xFE7
  8398                           postinc1	equ	0xFE6
  8399                           postdec1	equ	0xFE5
  8400                           fsr1h	equ	0xFE2
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _inicializar_intentos_fallidos *****************
  8411 ;; Defined at:
  8412 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;		None
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  2   90[None  ] int 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8430 ;;Total ram usage:        0 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; This function calls:
  8433 ;;		Nothing
  8434 ;; This function is called by:
  8435 ;;		_desactivar_sonido_alarma
  8436 ;;		_desactivar_alarma
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text58
  8441  00DBF6                     __ptext58:
  8442                           	opt stack 0
  8443  00DBF6                     _inicializar_intentos_fallidos:
  8444                           	opt stack 28
  8445                           
  8446                           ;alarma.c: 36: intentos_fallidos = 0;
  8447                           
  8448                           ;incstack = 0
  8449  00DBF6  0E00               	movlw	0
  8450  00DBF8  0100               	movlb	0	; () banked
  8451  00DBFA  6F97               	movwf	(_intentos_fallidos+1)& (0+255),b
  8452  00DBFC  0E00               	movlw	0
  8453  00DBFE  6F96               	movwf	_intentos_fallidos& (0+255),b
  8454                           
  8455                           ; BSR set to: 0
  8456  00DC00  0012               	return		;funcret
  8457  00DC02                     __end_of_inicializar_intentos_fallidos:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclath	equ	0xFFA
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           postinc0	equ	0xFEE
  8468                           wreg	equ	0xFE8
  8469                           indf1	equ	0xFE7
  8470                           postinc1	equ	0xFE6
  8471                           postdec1	equ	0xFE5
  8472                           fsr1h	equ	0xFE2
  8473                           fsr1l	equ	0xFE1
  8474                           indf2	equ	0xFDF
  8475                           postinc2	equ	0xFDE
  8476                           postdec2	equ	0xFDD
  8477                           plusw2	equ	0xFDB
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _caratula *****************
  8483 ;; Defined at:
  8484 ;;		line 35 in file "main.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  titulo          2   35[COMRAM] PTR const unsigned char 
  8487 ;;		 -> STR_25(9), STR_24(9), 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;		None               void
  8492 ;; Registers used:
  8493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8502 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8503 ;;Total ram usage:        4 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    5
  8506 ;; This function calls:
  8507 ;;		_lcd_comand
  8508 ;;		_lcd_gotoxy
  8509 ;;		_lcd_putrs
  8510 ;;		_sprintf
  8511 ;; This function is called by:
  8512 ;;		_main
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text59
  8517  00EE30                     __ptext59:
  8518                           	opt stack 0
  8519  00EE30                     _caratula:
  8520                           	opt stack 25
  8521                           
  8522                           ;main.c: 37: lcd_comand(0b00001100);
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;incstack = 0
  8526  00EE30  0E0C               	movlw	12
  8527  00EE32  EC01  F06E         	call	_lcd_comand
  8528                           
  8529                           ;main.c: 38: lcd_gotoxy(1,1);
  8530  00EE36  0E01               	movlw	1
  8531  00EE38  6E05               	movwf	lcd_gotoxy@y,c
  8532  00EE3A  0E01               	movlw	1
  8533  00EE3C  EC31  F06F         	call	_lcd_gotoxy
  8534                           
  8535                           ;main.c: 39: lcd_putrs(titulo);
  8536  00EE40  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  8537  00EE44  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  8538  00EE48  ECC5  F070         	call	_lcd_putrs	;wreg free
  8539                           
  8540                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  8541  00EE4C  0EAA               	movlw	low _buffer2
  8542  00EE4E  6E0D               	movwf	sprintf@sp,c
  8543  00EE50  0E00               	movlw	high _buffer2
  8544  00EE52  6E0E               	movwf	sprintf@sp+1,c
  8545  00EE54  0E9E               	movlw	low STR_1
  8546  00EE56  6E0F               	movwf	sprintf@f,c
  8547  00EE58  0EFF               	movlw	high STR_1
  8548  00EE5A  6E10               	movwf	sprintf@f+1,c
  8549  00EE5C  C0F9  F011         	movff	_dia,?_sprintf+4
  8550  00EE60  C0FA  F012         	movff	_dia+1,?_sprintf+5
  8551  00EE64  C05C  F013         	movff	_mes,?_sprintf+6
  8552  00EE68  C05D  F014         	movff	_mes+1,?_sprintf+7
  8553  00EE6C  C05A  F015         	movff	_anio,?_sprintf+8
  8554  00EE70  C05B  F016         	movff	_anio+1,?_sprintf+9
  8555  00EE74  ECC9  F07D         	call	_sprintf	;wreg free
  8556                           
  8557                           ;main.c: 42: lcd_gotoxy(9,1);
  8558  00EE78  0E01               	movlw	1
  8559  00EE7A  6E05               	movwf	lcd_gotoxy@y,c
  8560  00EE7C  0E09               	movlw	9
  8561  00EE7E  EC31  F06F         	call	_lcd_gotoxy
  8562                           
  8563                           ;main.c: 43: lcd_putrs(buffer2);
  8564  00EE82  0EAA               	movlw	low _buffer2
  8565  00EE84  6E09               	movwf	lcd_putrs@ptr,c
  8566  00EE86  0E00               	movlw	high _buffer2
  8567  00EE88  6E0A               	movwf	lcd_putrs@ptr+1,c
  8568  00EE8A  ECC5  F070         	call	_lcd_putrs	;wreg free
  8569                           
  8570                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  8571  00EE8E  0EAA               	movlw	low _buffer2
  8572  00EE90  6E0D               	movwf	sprintf@sp,c
  8573  00EE92  0E00               	movlw	high _buffer2
  8574  00EE94  6E0E               	movwf	sprintf@sp+1,c
  8575  00EE96  0EAD               	movlw	low STR_2
  8576  00EE98  6E0F               	movwf	sprintf@f,c
  8577  00EE9A  0EFF               	movlw	high STR_2
  8578  00EE9C  6E10               	movwf	sprintf@f+1,c
  8579  00EE9E  C0FB  F011         	movff	_hora,?_sprintf+4
  8580  00EEA2  C0FC  F012         	movff	_hora+1,?_sprintf+5
  8581  00EEA6  C0FD  F013         	movff	_minuto,?_sprintf+6
  8582  00EEAA  C0FE  F014         	movff	_minuto+1,?_sprintf+7
  8583  00EEAE  C0A0  F015         	movff	_segundo,?_sprintf+8
  8584  00EEB2  C0A1  F016         	movff	_segundo+1,?_sprintf+9
  8585  00EEB6  ECC9  F07D         	call	_sprintf	;wreg free
  8586                           
  8587                           ;main.c: 46: lcd_gotoxy(1,2);
  8588  00EEBA  0E02               	movlw	2
  8589  00EEBC  6E05               	movwf	lcd_gotoxy@y,c
  8590  00EEBE  0E01               	movlw	1
  8591  00EEC0  EC31  F06F         	call	_lcd_gotoxy
  8592                           
  8593                           ;main.c: 47: lcd_putrs(buffer2);
  8594  00EEC4  0EAA               	movlw	low _buffer2
  8595  00EEC6  6E09               	movwf	lcd_putrs@ptr,c
  8596  00EEC8  0E00               	movlw	high _buffer2
  8597  00EECA  6E0A               	movwf	lcd_putrs@ptr+1,c
  8598  00EECC  ECC5  F070         	call	_lcd_putrs	;wreg free
  8599                           
  8600                           ;main.c: 49: lcd_gotoxy(13,2);
  8601  00EED0  0E02               	movlw	2
  8602  00EED2  6E05               	movwf	lcd_gotoxy@y,c
  8603  00EED4  0E0D               	movlw	13
  8604  00EED6  EC31  F06F         	call	_lcd_gotoxy
  8605                           
  8606                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  8607  00EEDA  0100               	movlb	0	; () banked
  8608  00EEDC  518A               	movf	_encendida& (0+255),w,b
  8609  00EEDE  0100               	movlb	0	; () banked
  8610  00EEE0  118B               	iorwf	(_encendida+1)& (0+255),w,b
  8611  00EEE2  A4D8               	btfss	status,2,c
  8612  00EEE4  D004               	goto	l4109
  8613                           
  8614                           ; BSR set to: 0
  8615  00EEE6  0EEE               	movlw	low STR_4
  8616  00EEE8  6E26               	movwf	_caratula$667,c
  8617  00EEEA  0EFF               	movlw	high STR_4
  8618  00EEEC  D003               	goto	L1
  8619  00EEEE                     l4109:
  8620                           
  8621                           ; BSR set to: 0
  8622  00EEEE  0EF2               	movlw	low STR_3
  8623  00EEF0  6E26               	movwf	_caratula$667,c
  8624  00EEF2  0EFF               	movlw	high STR_3
  8625  00EEF4                     L1:
  8626  00EEF4  6E27               	movwf	_caratula$667+1,c
  8627  00EEF6  D000               	goto	l4111
  8628  00EEF8                     l4111:
  8629                           
  8630                           ; BSR set to: 0
  8631  00EEF8  C026  F009         	movff	_caratula$667,lcd_putrs@ptr
  8632  00EEFC  C027  F00A         	movff	_caratula$667+1,lcd_putrs@ptr+1
  8633  00EF00  ECC5  F070         	call	_lcd_putrs	;wreg free
  8634  00EF04  0012               	return		;funcret
  8635  00EF06                     __end_of_caratula:
  8636                           	opt stack 0
  8637                           tosu	equ	0xFFF
  8638                           tosh	equ	0xFFE
  8639                           tosl	equ	0xFFD
  8640                           pclath	equ	0xFFA
  8641                           tblptru	equ	0xFF8
  8642                           tblptrh	equ	0xFF7
  8643                           tblptrl	equ	0xFF6
  8644                           tablat	equ	0xFF5
  8645                           postinc0	equ	0xFEE
  8646                           wreg	equ	0xFE8
  8647                           indf1	equ	0xFE7
  8648                           postinc1	equ	0xFE6
  8649                           postdec1	equ	0xFE5
  8650                           fsr1h	equ	0xFE2
  8651                           fsr1l	equ	0xFE1
  8652                           indf2	equ	0xFDF
  8653                           postinc2	equ	0xFDE
  8654                           postdec2	equ	0xFDD
  8655                           plusw2	equ	0xFDB
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function _sprintf *****************
  8661 ;; Defined at:
  8662 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  sp              2   12[COMRAM] PTR unsigned char 
  8665 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  8666 ;;  f               2   14[COMRAM] PTR const unsigned char 
  8667 ;;		 -> STR_32(18), STR_31(5), STR_27(5), STR_26(5), 
  8668 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  8669 ;;		 -> STR_2(15), STR_1(15), 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  tmpval          4    0        struct .
  8672 ;;  cp              3    0        PTR const unsigned char 
  8673 ;;  width           2   32[COMRAM] int 
  8674 ;;  val             2   29[COMRAM] unsigned int 
  8675 ;;  ap              2   27[COMRAM] PTR void [1]
  8676 ;;		 -> ?_sprintf(2), 
  8677 ;;  len             2    0        unsigned int 
  8678 ;;  c               1   34[COMRAM] char 
  8679 ;;  flag            1   31[COMRAM] unsigned char 
  8680 ;;  prec            1   26[COMRAM] char 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  2   12[COMRAM] int 
  8683 ;; Registers used:
  8684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8690 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8691 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8692 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8693 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8694 ;;Total ram usage:       23 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    1
  8697 ;; This function calls:
  8698 ;;		___lwdiv
  8699 ;;		___lwmod
  8700 ;;		___wmul
  8701 ;;		_isdigit
  8702 ;; This function is called by:
  8703 ;;		_caratula
  8704 ;;		_mostrar_guardar_password
  8705 ;;		_mostrar_guardar_temporal_password
  8706 ;;		_mostrar_guardar_nuevo_password
  8707 ;;		_confirmar_actualizar_password
  8708 ;;		_guardar_comando
  8709 ;;		_imprimir_tecla
  8710 ;;		_guardar_elemento
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text60
  8715  00FB92                     __ptext60:
  8716                           	opt stack 0
  8717  00FB92                     _sprintf:
  8718                           	opt stack 27
  8719                           
  8720                           ;doprnt.c: 494: va_list ap;
  8721                           ;doprnt.c: 499: signed char c;
  8722                           ;doprnt.c: 501: int width;
  8723                           ;doprnt.c: 506: signed char prec;
  8724                           ;doprnt.c: 508: unsigned char flag;
  8725                           ;doprnt.c: 523: union {
  8726                           ;doprnt.c: 524: unsigned long vd;
  8727                           ;doprnt.c: 525: double integ;
  8728                           ;doprnt.c: 526: } tmpval;
  8729                           ;doprnt.c: 528: unsigned int val;
  8730                           ;doprnt.c: 529: unsigned len;
  8731                           ;doprnt.c: 530: const char * cp;
  8732                           ;doprnt.c: 533: *ap = __va_start();
  8733                           
  8734                           ;incstack = 0
  8735  00FB92  0E11               	movlw	low (?_sprintf+4)
  8736  00FB94  6E1C               	movwf	sprintf@ap,c
  8737  00FB96  0E00               	movlw	high (?_sprintf+4)
  8738  00FB98  6E1D               	movwf	sprintf@ap+1,c
  8739                           
  8740                           ;doprnt.c: 536: while(c = *f++) {
  8741  00FB9A  D161               	goto	l3563
  8742  00FB9C                     l3451:
  8743                           
  8744                           ;doprnt.c: 538: if(c != '%')
  8745  00FB9C  0E25               	movlw	37
  8746  00FB9E  1823               	xorwf	sprintf@c,w,c
  8747  00FBA0  B4D8               	btfsc	status,2,c
  8748  00FBA2  D009               	goto	l3457
  8749                           
  8750                           ;doprnt.c: 540: {
  8751                           ;doprnt.c: 541: ((*sp++ = (c)));
  8752  00FBA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8753  00FBA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8754  00FBAC  C023  FFDF         	movff	sprintf@c,indf2
  8755  00FBB0  4A0D               	infsnz	sprintf@sp,f,c
  8756  00FBB2  2A0E               	incf	sprintf@sp+1,f,c
  8757                           
  8758                           ;doprnt.c: 542: continue;
  8759  00FBB4  D154               	goto	l3563
  8760  00FBB6                     l3457:
  8761                           
  8762                           ;doprnt.c: 543: }
  8763                           ;doprnt.c: 546: width = 0;
  8764  00FBB6  0E00               	movlw	0
  8765  00FBB8  6E22               	movwf	sprintf@width+1,c
  8766  00FBBA  0E00               	movlw	0
  8767  00FBBC  6E21               	movwf	sprintf@width,c
  8768                           
  8769                           ;doprnt.c: 548: flag = 0;
  8770  00FBBE  0E00               	movlw	0
  8771  00FBC0  6E20               	movwf	sprintf@flag,c
  8772                           
  8773                           ;doprnt.c: 551: switch(*f) {
  8774                           
  8775                           ;doprnt.c: 550: for(;;) {
  8776  00FBC2  D005               	goto	l3463
  8777  00FBC4                     l3459:
  8778                           
  8779                           ;doprnt.c: 580: flag |= 0x04;
  8780  00FBC4  8420               	bsf	sprintf@flag,2,c
  8781                           
  8782                           ;doprnt.c: 581: f++;
  8783  00FBC6  4A0F               	infsnz	sprintf@f,f,c
  8784  00FBC8  2A10               	incf	sprintf@f+1,f,c
  8785                           
  8786                           ;doprnt.c: 582: continue;
  8787  00FBCA  D001               	goto	l3463
  8788                           
  8789                           ;doprnt.c: 584: }
  8790  00FBCC  D00B               	goto	l3465
  8791  00FBCE                     l3463:
  8792  00FBCE  C00F  FFF6         	movff	sprintf@f,tblptrl
  8793  00FBD2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8794  00FBD6                     	if	0	;tblptru may be non-zero
  8795  00FBD6                     	endif
  8796  00FBD6                     	if	0	;tblptru may be non-zero
  8797  00FBD6                     	endif
  8798  00FBD6  0008               	tblrd		*
  8799  00FBD8  50F5               	movf	tablat,w,c
  8800                           
  8801                           ; Switch size 1, requested type "space"
  8802                           ; Number of cases is 1, Range of values is 48 to 48
  8803                           ; switch strategies available:
  8804                           ; Name         Instructions Cycles
  8805                           ; simple_byte            4     3 (average)
  8806                           ;	Chosen strategy is simple_byte
  8807  00FBDA  0A30               	xorlw	48	; case 48
  8808  00FBDC  B4D8               	btfsc	status,2,c
  8809  00FBDE  D7F2               	goto	l3459
  8810                           
  8811                           ;doprnt.c: 585: break;
  8812  00FBE0  D001               	goto	l3465
  8813                           
  8814                           ;doprnt.c: 586: }
  8815  00FBE2  D7F5               	goto	l3463
  8816  00FBE4                     l3465:
  8817                           
  8818                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8819  00FBE4  C00F  FFF6         	movff	sprintf@f,tblptrl
  8820  00FBE8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8821  00FBEC                     	if	0	;tblptru may be non-zero
  8822  00FBEC                     	endif
  8823  00FBEC                     	if	0	;tblptru may be non-zero
  8824  00FBEC                     	endif
  8825  00FBEC  0008               	tblrd		*
  8826  00FBEE  50F5               	movf	tablat,w,c
  8827  00FBF0  ECFE  F06E         	call	_isdigit
  8828  00FBF4  A0D8               	btfss	status,0,c
  8829  00FBF6  D03A               	goto	l3481
  8830                           
  8831                           ;doprnt.c: 598: width = 0;
  8832  00FBF8  0E00               	movlw	0
  8833  00FBFA  6E22               	movwf	sprintf@width+1,c
  8834  00FBFC  0E00               	movlw	0
  8835  00FBFE  6E21               	movwf	sprintf@width,c
  8836  00FC00  D000               	goto	l3469
  8837  00FC02                     l3469:
  8838                           
  8839                           ;doprnt.c: 600: width *= 10;
  8840  00FC02  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8841  00FC06  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8842  00FC0A  0E00               	movlw	0
  8843  00FC0C  6E04               	movwf	___wmul@multiplicand+1,c
  8844  00FC0E  0E0A               	movlw	10
  8845  00FC10  6E03               	movwf	___wmul@multiplicand,c
  8846  00FC12  EC68  F06F         	call	___wmul	;wreg free
  8847  00FC16  C001  F021         	movff	?___wmul,sprintf@width
  8848  00FC1A  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8849                           
  8850                           ;doprnt.c: 601: width += *f++ - '0';
  8851  00FC1E  0ED0               	movlw	208
  8852  00FC20  6E17               	movwf	??_sprintf& (0+255),c
  8853  00FC22  0EFF               	movlw	255
  8854  00FC24  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8855  00FC26  C00F  FFF6         	movff	sprintf@f,tblptrl
  8856  00FC2A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8857  00FC2E                     	if	0	;tblptru may be non-zero
  8858  00FC2E                     	endif
  8859  00FC2E                     	if	0	;tblptru may be non-zero
  8860  00FC2E                     	endif
  8861  00FC2E  0008               	tblrd		*
  8862  00FC30  50F5               	movf	tablat,w,c
  8863  00FC32  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8864  00FC34  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8865  00FC36  5017               	movf	??_sprintf,w,c
  8866  00FC38  2619               	addwf	??_sprintf+2,f,c
  8867  00FC3A  5018               	movf	??_sprintf+1,w,c
  8868  00FC3C  221A               	addwfc	??_sprintf+3,f,c
  8869  00FC3E  5019               	movf	??_sprintf+2,w,c
  8870  00FC40  2621               	addwf	sprintf@width,f,c
  8871  00FC42  501A               	movf	??_sprintf+3,w,c
  8872  00FC44  2222               	addwfc	sprintf@width+1,f,c
  8873  00FC46  4A0F               	infsnz	sprintf@f,f,c
  8874  00FC48  2A10               	incf	sprintf@f+1,f,c
  8875                           
  8876                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8877  00FC4A  C00F  FFF6         	movff	sprintf@f,tblptrl
  8878  00FC4E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8879  00FC52                     	if	0	;tblptru may be non-zero
  8880  00FC52                     	endif
  8881  00FC52                     	if	0	;tblptru may be non-zero
  8882  00FC52                     	endif
  8883  00FC52  0008               	tblrd		*
  8884  00FC54  50F5               	movf	tablat,w,c
  8885  00FC56  ECFE  F06E         	call	_isdigit
  8886  00FC5A  A0D8               	btfss	status,0,c
  8887  00FC5C  D007               	goto	l3481
  8888  00FC5E  D7D1               	goto	l3469
  8889                           
  8890                           ;doprnt.c: 608: }
  8891                           ;doprnt.c: 635: switch(c = *f++) {
  8892  00FC60  D005               	goto	l3481
  8893                           
  8894                           ;doprnt.c: 638: goto alldone;
  8895                           
  8896                           ;doprnt.c: 637: case 0:
  8897  00FC62  D10B               	goto	l3565
  8898                           
  8899                           ;doprnt.c: 698: case 'i':
  8900                           ;doprnt.c: 699: break;
  8901                           
  8902                           ;doprnt.c: 697: case 'd':
  8903  00FC64  D01A               	goto	l905
  8904                           
  8905                           ;doprnt.c: 813: continue;
  8906                           
  8907                           ;doprnt.c: 802: default:
  8908  00FC66  D0FB               	goto	l3563
  8909  00FC68                     l3477:
  8910                           
  8911                           ;doprnt.c: 818: flag |= 0x40;
  8912  00FC68  8C20               	bsf	sprintf@flag,6,c
  8913                           
  8914                           ;doprnt.c: 822: }
  8915                           
  8916                           ;doprnt.c: 819: break;
  8917  00FC6A  D017               	goto	l905
  8918  00FC6C                     l3481:
  8919  00FC6C  C00F  FFF6         	movff	sprintf@f,tblptrl
  8920  00FC70  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8921  00FC74  4A0F               	infsnz	sprintf@f,f,c
  8922  00FC76  2A10               	incf	sprintf@f+1,f,c
  8923  00FC78                     	if	0	;tblptru may be non-zero
  8924  00FC78                     	endif
  8925  00FC78                     	if	0	;tblptru may be non-zero
  8926  00FC78                     	endif
  8927  00FC78  0008               	tblrd		*
  8928  00FC7A  CFF5 F023          	movff	tablat,sprintf@c
  8929  00FC7E  5023               	movf	sprintf@c,w,c
  8930                           
  8931                           ; Switch size 1, requested type "space"
  8932                           ; Number of cases is 4, Range of values is 0 to 117
  8933                           ; switch strategies available:
  8934                           ; Name         Instructions Cycles
  8935                           ; simple_byte           13     7 (average)
  8936                           ;	Chosen strategy is simple_byte
  8937  00FC80  0A00               	xorlw	0	; case 0
  8938  00FC82  B4D8               	btfsc	status,2,c
  8939  00FC84  D0FA               	goto	l3565
  8940  00FC86  0A64               	xorlw	100	; case 100
  8941  00FC88  B4D8               	btfsc	status,2,c
  8942  00FC8A  D007               	goto	l905
  8943  00FC8C  0A0D               	xorlw	13	; case 105
  8944  00FC8E  B4D8               	btfsc	status,2,c
  8945  00FC90  D004               	goto	l905
  8946  00FC92  0A1C               	xorlw	28	; case 117
  8947  00FC94  B4D8               	btfsc	status,2,c
  8948  00FC96  D7E8               	goto	l3477
  8949  00FC98  D0E2               	goto	l3563
  8950  00FC9A                     l905:
  8951                           
  8952                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  8953  00FC9A  BC20               	btfsc	sprintf@flag,6,c
  8954  00FC9C  D015               	goto	l3493
  8955                           
  8956                           ;doprnt.c: 1253: {
  8957                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8958  00FC9E  C01C  FFD9         	movff	sprintf@ap,fsr2l
  8959  00FCA2  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  8960  00FCA6  CFDE F01E          	movff	postinc2,sprintf@val
  8961  00FCAA  CFDD F01F          	movff	postdec2,sprintf@val+1
  8962  00FCAE  0E02               	movlw	2
  8963  00FCB0  261C               	addwf	sprintf@ap,f,c
  8964  00FCB2  0E00               	movlw	0
  8965  00FCB4  221D               	addwfc	sprintf@ap+1,f,c
  8966                           
  8967                           ;doprnt.c: 1261: if((int)val < 0) {
  8968  00FCB6  AE1F               	btfss	sprintf@val+1,7,c
  8969  00FCB8  D014               	goto	l3497
  8970                           
  8971                           ;doprnt.c: 1262: flag |= 0x03;
  8972  00FCBA  0E03               	movlw	3
  8973  00FCBC  1220               	iorwf	sprintf@flag,f,c
  8974                           
  8975                           ;doprnt.c: 1263: val = -val;
  8976  00FCBE  6C1E               	negf	sprintf@val,c
  8977  00FCC0  1E1F               	comf	sprintf@val+1,f,c
  8978  00FCC2  B0D8               	btfsc	status,0,c
  8979  00FCC4  2A1F               	incf	sprintf@val+1,f,c
  8980                           
  8981                           ;doprnt.c: 1264: }
  8982                           ;doprnt.c: 1266: }
  8983  00FCC6  D00D               	goto	l3497
  8984  00FCC8                     l3493:
  8985                           
  8986                           ;doprnt.c: 1268: else
  8987                           ;doprnt.c: 1273: {
  8988                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8989  00FCC8  C01C  FFD9         	movff	sprintf@ap,fsr2l
  8990  00FCCC  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  8991  00FCD0  CFDE F01E          	movff	postinc2,sprintf@val
  8992  00FCD4  CFDD F01F          	movff	postdec2,sprintf@val+1
  8993  00FCD8  0E02               	movlw	2
  8994  00FCDA  261C               	addwf	sprintf@ap,f,c
  8995  00FCDC  0E00               	movlw	0
  8996  00FCDE  221D               	addwfc	sprintf@ap+1,f,c
  8997  00FCE0  D000               	goto	l3497
  8998  00FCE2                     l3497:
  8999                           
  9000                           ;doprnt.c: 1287: }
  9001                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9002  00FCE2  0E01               	movlw	1
  9003  00FCE4  6E23               	movwf	sprintf@c,c
  9004  00FCE6                     l3499:
  9005  00FCE6  0E05               	movlw	5
  9006  00FCE8  1823               	xorwf	sprintf@c,w,c
  9007  00FCEA  B4D8               	btfsc	status,2,c
  9008  00FCEC  D016               	goto	l3511
  9009  00FCEE  D001               	goto	l3503
  9010  00FCF0  D014               	goto	l3511
  9011  00FCF2                     l3503:
  9012                           
  9013                           ;doprnt.c: 1306: if(val < dpowers[c])
  9014  00FCF2  5023               	movf	sprintf@c,w,c
  9015  00FCF4  0D02               	mullw	2
  9016  00FCF6  0E8B               	movlw	low _dpowers
  9017  00FCF8  24F3               	addwf	prodl,w,c
  9018  00FCFA  6EF6               	movwf	tblptrl,c
  9019  00FCFC  0EFE               	movlw	high _dpowers
  9020  00FCFE  20F4               	addwfc	prodh,w,c
  9021  00FD00  6EF7               	movwf	tblptrh,c
  9022  00FD02                     	if	0	;There are less than 3 active tblptr bytes
  9023  00FD02                     	endif
  9024  00FD02  0009               	tblrd		*+
  9025  00FD04  50F5               	movf	tablat,w,c
  9026  00FD06  5C1E               	subwf	sprintf@val,w,c
  9027  00FD08  0009               	tblrd		*+
  9028  00FD0A  50F5               	movf	tablat,w,c
  9029  00FD0C  581F               	subwfb	sprintf@val+1,w,c
  9030  00FD0E  A0D8               	btfss	status,0,c
  9031  00FD10  D004               	goto	l3511
  9032  00FD12  D001               	goto	l3507
  9033                           
  9034                           ;doprnt.c: 1307: break;
  9035  00FD14  D002               	goto	l3511
  9036  00FD16                     l3507:
  9037  00FD16  2A23               	incf	sprintf@c,f,c
  9038  00FD18  D7E6               	goto	l3499
  9039  00FD1A                     l3511:
  9040                           
  9041                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9042  00FD1A  5021               	movf	sprintf@width,w,c
  9043  00FD1C  1022               	iorwf	sprintf@width+1,w,c
  9044  00FD1E  B4D8               	btfsc	status,2,c
  9045  00FD20  D00A               	goto	l3517
  9046  00FD22  C020  F017         	movff	sprintf@flag,??_sprintf
  9047  00FD26  0E03               	movlw	3
  9048  00FD28  1617               	andwf	??_sprintf,f,c
  9049  00FD2A  B4D8               	btfsc	status,2,c
  9050  00FD2C  D004               	goto	l3517
  9051                           
  9052                           ;doprnt.c: 1346: width--;
  9053  00FD2E  0621               	decf	sprintf@width,f,c
  9054  00FD30  A0D8               	btfss	status,0,c
  9055  00FD32  0622               	decf	sprintf@width+1,f,c
  9056  00FD34  D000               	goto	l3517
  9057  00FD36                     l3517:
  9058                           
  9059                           ;doprnt.c: 1381: if(width > c)
  9060  00FD36  0E80               	movlw	128
  9061  00FD38  BE23               	btfsc	sprintf@c,7,c
  9062  00FD3A  0E7F               	movlw	127
  9063  00FD3C  6E17               	movwf	??_sprintf& (0+255),c
  9064  00FD3E  5021               	movf	sprintf@width,w,c
  9065  00FD40  5C23               	subwf	sprintf@c,w,c
  9066  00FD42  5022               	movf	sprintf@width+1,w,c
  9067  00FD44  0A80               	xorlw	128
  9068  00FD46  5817               	subwfb	??_sprintf& (0+255),w,c
  9069  00FD48  B0D8               	btfsc	status,0,c
  9070  00FD4A  D007               	goto	l3521
  9071                           
  9072                           ;doprnt.c: 1382: width -= c;
  9073  00FD4C  5023               	movf	sprintf@c,w,c
  9074  00FD4E  5E21               	subwf	sprintf@width,f,c
  9075  00FD50  0E00               	movlw	0
  9076  00FD52  BE23               	btfsc	sprintf@c,7,c
  9077  00FD54  0EFF               	movlw	255
  9078  00FD56  5A22               	subwfb	sprintf@width+1,f,c
  9079  00FD58  D005               	goto	l3523
  9080  00FD5A                     l3521:
  9081                           
  9082                           ;doprnt.c: 1383: else
  9083                           ;doprnt.c: 1384: width = 0;
  9084  00FD5A  0E00               	movlw	0
  9085  00FD5C  6E22               	movwf	sprintf@width+1,c
  9086  00FD5E  0E00               	movlw	0
  9087  00FD60  6E21               	movwf	sprintf@width,c
  9088  00FD62  D000               	goto	l3523
  9089  00FD64                     l3523:
  9090                           
  9091                           ;doprnt.c: 1387: if(flag & 0x04) {
  9092  00FD64  A420               	btfss	sprintf@flag,2,c
  9093  00FD66  D024               	goto	l3539
  9094                           
  9095                           ;doprnt.c: 1392: if(flag & 0x03)
  9096  00FD68  C020  F017         	movff	sprintf@flag,??_sprintf
  9097  00FD6C  0E03               	movlw	3
  9098  00FD6E  1617               	andwf	??_sprintf,f,c
  9099  00FD70  B4D8               	btfsc	status,2,c
  9100  00FD72  D009               	goto	l3531
  9101                           
  9102                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9103  00FD74  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9104  00FD78  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9105  00FD7C  0E2D               	movlw	45
  9106  00FD7E  6EDF               	movwf	indf2,c
  9107  00FD80  4A0D               	infsnz	sprintf@sp,f,c
  9108  00FD82  2A0E               	incf	sprintf@sp+1,f,c
  9109  00FD84  D000               	goto	l3531
  9110  00FD86                     l3531:
  9111                           
  9112                           ;doprnt.c: 1415: if(width)
  9113  00FD86  5021               	movf	sprintf@width,w,c
  9114  00FD88  1022               	iorwf	sprintf@width+1,w,c
  9115  00FD8A  B4D8               	btfsc	status,2,c
  9116  00FD8C  D035               	goto	l3553
  9117  00FD8E                     l3533:
  9118                           
  9119                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9120  00FD8E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9121  00FD92  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9122  00FD96  0E30               	movlw	48
  9123  00FD98  6EDF               	movwf	indf2,c
  9124  00FD9A  4A0D               	infsnz	sprintf@sp,f,c
  9125  00FD9C  2A0E               	incf	sprintf@sp+1,f,c
  9126                           
  9127                           ;doprnt.c: 1418: while(--width);
  9128  00FD9E  0621               	decf	sprintf@width,f,c
  9129  00FDA0  A0D8               	btfss	status,0,c
  9130  00FDA2  0622               	decf	sprintf@width+1,f,c
  9131  00FDA4  5021               	movf	sprintf@width,w,c
  9132  00FDA6  1022               	iorwf	sprintf@width+1,w,c
  9133  00FDA8  B4D8               	btfsc	status,2,c
  9134  00FDAA  D026               	goto	l3553
  9135  00FDAC  D7F0               	goto	l3533
  9136                           
  9137                           ;doprnt.c: 1420: } else
  9138  00FDAE  D024               	goto	l3553
  9139  00FDB0                     l3539:
  9140                           
  9141                           ;doprnt.c: 1422: {
  9142                           ;doprnt.c: 1424: if(width
  9143                           ;doprnt.c: 1428: )
  9144  00FDB0  5021               	movf	sprintf@width,w,c
  9145  00FDB2  1022               	iorwf	sprintf@width+1,w,c
  9146  00FDB4  B4D8               	btfsc	status,2,c
  9147  00FDB6  D011               	goto	l3547
  9148  00FDB8                     l3541:
  9149                           
  9150                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9151  00FDB8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9152  00FDBC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9153  00FDC0  0E20               	movlw	32
  9154  00FDC2  6EDF               	movwf	indf2,c
  9155  00FDC4  4A0D               	infsnz	sprintf@sp,f,c
  9156  00FDC6  2A0E               	incf	sprintf@sp+1,f,c
  9157                           
  9158                           ;doprnt.c: 1431: while(--width);
  9159  00FDC8  0621               	decf	sprintf@width,f,c
  9160  00FDCA  A0D8               	btfss	status,0,c
  9161  00FDCC  0622               	decf	sprintf@width+1,f,c
  9162  00FDCE  5021               	movf	sprintf@width,w,c
  9163  00FDD0  1022               	iorwf	sprintf@width+1,w,c
  9164  00FDD2  B4D8               	btfsc	status,2,c
  9165  00FDD4  D002               	goto	l3547
  9166  00FDD6  D7F0               	goto	l3541
  9167  00FDD8  D000               	goto	l3547
  9168  00FDDA                     l3547:
  9169                           
  9170                           ;doprnt.c: 1438: if(flag & 0x03)
  9171  00FDDA  C020  F017         	movff	sprintf@flag,??_sprintf
  9172  00FDDE  0E03               	movlw	3
  9173  00FDE0  1617               	andwf	??_sprintf,f,c
  9174  00FDE2  B4D8               	btfsc	status,2,c
  9175  00FDE4  D009               	goto	l3553
  9176                           
  9177                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9178  00FDE6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9179  00FDEA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9180  00FDEE  0E2D               	movlw	45
  9181  00FDF0  6EDF               	movwf	indf2,c
  9182  00FDF2  4A0D               	infsnz	sprintf@sp,f,c
  9183  00FDF4  2A0E               	incf	sprintf@sp+1,f,c
  9184  00FDF6  D000               	goto	l3553
  9185  00FDF8                     l3553:
  9186                           
  9187                           ;doprnt.c: 1469: }
  9188                           ;doprnt.c: 1472: prec = c;
  9189  00FDF8  C023  F01B         	movff	sprintf@c,sprintf@prec
  9190                           
  9191                           ;doprnt.c: 1474: while(prec--) {
  9192  00FDFC  D02A               	goto	l3561
  9193  00FDFE                     l3555:
  9194                           
  9195                           ;doprnt.c: 1478: {
  9196                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9197  00FDFE  501B               	movf	sprintf@prec,w,c
  9198  00FE00  0D02               	mullw	2
  9199  00FE02  0E8B               	movlw	low _dpowers
  9200  00FE04  24F3               	addwf	prodl,w,c
  9201  00FE06  6EF6               	movwf	tblptrl,c
  9202  00FE08  0EFE               	movlw	high _dpowers
  9203  00FE0A  20F4               	addwfc	prodh,w,c
  9204  00FE0C  6EF7               	movwf	tblptrh,c
  9205  00FE0E                     	if	0	;There are less than 3 active tblptr bytes
  9206  00FE0E                     	endif
  9207  00FE0E  0009               	tblrd		*+
  9208  00FE10  CFF5 F003          	movff	tablat,___lwdiv@divisor
  9209  00FE14  000A               	tblrd		*-
  9210  00FE16  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  9211  00FE1A  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  9212  00FE1E  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  9213  00FE22  EC1C  F071         	call	___lwdiv	;wreg free
  9214  00FE26  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  9215  00FE2A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  9216  00FE2E  0E00               	movlw	0
  9217  00FE30  6E0B               	movwf	___lwmod@divisor+1,c
  9218  00FE32  0E0A               	movlw	10
  9219  00FE34  6E0A               	movwf	___lwmod@divisor,c
  9220  00FE36  EC9F  F070         	call	___lwmod	;wreg free
  9221  00FE3A  5008               	movf	?___lwmod,w,c
  9222  00FE3C  0F30               	addlw	48
  9223  00FE3E  6E23               	movwf	sprintf@c,c
  9224                           
  9225                           ;doprnt.c: 1523: }
  9226                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9227  00FE40  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9228  00FE44  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9229  00FE48  C023  FFDF         	movff	sprintf@c,indf2
  9230  00FE4C  4A0D               	infsnz	sprintf@sp,f,c
  9231  00FE4E  2A0E               	incf	sprintf@sp+1,f,c
  9232  00FE50  D000               	goto	l3561
  9233  00FE52                     l3561:
  9234  00FE52  061B               	decf	sprintf@prec,f,c
  9235  00FE54  281B               	incf	sprintf@prec,w,c
  9236  00FE56  B4D8               	btfsc	status,2,c
  9237  00FE58  D002               	goto	l3563
  9238  00FE5A  D7D1               	goto	l3555
  9239  00FE5C  D000               	goto	l3563
  9240  00FE5E                     l3563:
  9241  00FE5E  C00F  FFF6         	movff	sprintf@f,tblptrl
  9242  00FE62  C010  FFF7         	movff	sprintf@f+1,tblptrh
  9243  00FE66  4A0F               	infsnz	sprintf@f,f,c
  9244  00FE68  2A10               	incf	sprintf@f+1,f,c
  9245  00FE6A                     	if	0	;tblptru may be non-zero
  9246  00FE6A                     	endif
  9247  00FE6A                     	if	0	;tblptru may be non-zero
  9248  00FE6A                     	endif
  9249  00FE6A  0008               	tblrd		*
  9250  00FE6C  CFF5 F023          	movff	tablat,sprintf@c
  9251  00FE70  5023               	movf	sprintf@c,w,c
  9252  00FE72  B4D8               	btfsc	status,2,c
  9253  00FE74  D002               	goto	l3565
  9254  00FE76  D692               	goto	l3451
  9255  00FE78  D000               	goto	l3565
  9256  00FE7A                     l3565:
  9257                           
  9258                           ;doprnt.c: 1538: *sp = 0;
  9259  00FE7A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9260  00FE7E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9261  00FE82  0E00               	movlw	0
  9262  00FE84  6EDF               	movwf	indf2,c
  9263  00FE86  0012               	return	
  9264                           
  9265                           ;doprnt.c: 1540: return 0;
  9266                           ;	Return value of _sprintf is never used
  9267  00FE88  0012               	return		;funcret
  9268  00FE8A                     __end_of_sprintf:
  9269                           	opt stack 0
  9270                           tosu	equ	0xFFF
  9271                           tosh	equ	0xFFE
  9272                           tosl	equ	0xFFD
  9273                           pclath	equ	0xFFA
  9274                           tblptru	equ	0xFF8
  9275                           tblptrh	equ	0xFF7
  9276                           tblptrl	equ	0xFF6
  9277                           tablat	equ	0xFF5
  9278                           prodh	equ	0xFF4
  9279                           prodl	equ	0xFF3
  9280                           postinc0	equ	0xFEE
  9281                           wreg	equ	0xFE8
  9282                           indf1	equ	0xFE7
  9283                           postinc1	equ	0xFE6
  9284                           postdec1	equ	0xFE5
  9285                           fsr1h	equ	0xFE2
  9286                           fsr1l	equ	0xFE1
  9287                           indf2	equ	0xFDF
  9288                           postinc2	equ	0xFDE
  9289                           postdec2	equ	0xFDD
  9290                           plusw2	equ	0xFDB
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function _isdigit *****************
  9296 ;; Defined at:
  9297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  c               1    wreg     unsigned char 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  c               1    2[COMRAM] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;		None               void
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9315 ;;Total ram usage:        3 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; This function calls:
  9318 ;;		Nothing
  9319 ;; This function is called by:
  9320 ;;		_sprintf
  9321 ;;		_atoi
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text61
  9326  00DDFC                     __ptext61:
  9327                           	opt stack 0
  9328  00DDFC                     _isdigit:
  9329                           	opt stack 27
  9330                           
  9331                           ;incstack = 0
  9332                           ;isdigit@c stored from wreg
  9333  00DDFC  6E03               	movwf	isdigit@c,c
  9334  00DDFE  0E00               	movlw	0
  9335  00DE00  6E02               	movwf	_isdigit$2694,c
  9336  00DE02  0E3A               	movlw	58
  9337  00DE04  6003               	cpfslt	isdigit@c,c
  9338  00DE06  D006               	goto	l3351
  9339  00DE08  0E2F               	movlw	47
  9340  00DE0A  6403               	cpfsgt	isdigit@c,c
  9341  00DE0C  D003               	goto	l3351
  9342  00DE0E  0E01               	movlw	1
  9343  00DE10  6E02               	movwf	_isdigit$2694,c
  9344  00DE12  D000               	goto	l3351
  9345  00DE14                     l3351:
  9346  00DE14  C002  F001         	movff	_isdigit$2694,??_isdigit
  9347  00DE18  3001               	rrcf	??_isdigit,w,c
  9348  00DE1A  0012               	return	
  9349  00DE1C  0012               	return		;funcret
  9350  00DE1E                     __end_of_isdigit:
  9351                           	opt stack 0
  9352                           tosu	equ	0xFFF
  9353                           tosh	equ	0xFFE
  9354                           tosl	equ	0xFFD
  9355                           pclath	equ	0xFFA
  9356                           tblptru	equ	0xFF8
  9357                           tblptrh	equ	0xFF7
  9358                           tblptrl	equ	0xFF6
  9359                           tablat	equ	0xFF5
  9360                           prodh	equ	0xFF4
  9361                           prodl	equ	0xFF3
  9362                           postinc0	equ	0xFEE
  9363                           wreg	equ	0xFE8
  9364                           indf1	equ	0xFE7
  9365                           postinc1	equ	0xFE6
  9366                           postdec1	equ	0xFE5
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           plusw2	equ	0xFDB
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function ___wmul *****************
  9378 ;; Defined at:
  9379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  multiplier      2    0[COMRAM] unsigned int 
  9382 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  product         2    4[COMRAM] unsigned int 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    0[COMRAM] unsigned int 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0, prodl, prodh
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9395 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9397 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_sprintf
  9404 ;;		_atoi
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text62
  9409  00DED0                     __ptext62:
  9410                           	opt stack 0
  9411  00DED0                     ___wmul:
  9412                           	opt stack 27
  9413                           
  9414                           ;incstack = 0
  9415  00DED0  5001               	movf	___wmul@multiplier,w,c
  9416  00DED2  0203               	mulwf	___wmul@multiplicand,c
  9417  00DED4  CFF3 F005          	movff	prodl,___wmul@product
  9418  00DED8  CFF4 F006          	movff	prodh,___wmul@product+1
  9419  00DEDC  5001               	movf	___wmul@multiplier,w,c
  9420  00DEDE  0204               	mulwf	___wmul@multiplicand+1,c
  9421  00DEE0  50F3               	movf	prodl,w,c
  9422  00DEE2  2606               	addwf	___wmul@product+1,f,c
  9423  00DEE4  5002               	movf	___wmul@multiplier+1,w,c
  9424  00DEE6  0203               	mulwf	___wmul@multiplicand,c
  9425  00DEE8  50F3               	movf	prodl,w,c
  9426  00DEEA  2606               	addwf	___wmul@product+1,f,c
  9427  00DEEC  C005  F001         	movff	___wmul@product,?___wmul
  9428  00DEF0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9429  00DEF4  0012               	return	
  9430  00DEF6  0012               	return		;funcret
  9431  00DEF8                     __end_of___wmul:
  9432                           	opt stack 0
  9433                           tosu	equ	0xFFF
  9434                           tosh	equ	0xFFE
  9435                           tosl	equ	0xFFD
  9436                           pclath	equ	0xFFA
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           postinc0	equ	0xFEE
  9444                           wreg	equ	0xFE8
  9445                           indf1	equ	0xFE7
  9446                           postinc1	equ	0xFE6
  9447                           postdec1	equ	0xFE5
  9448                           fsr1h	equ	0xFE2
  9449                           fsr1l	equ	0xFE1
  9450                           indf2	equ	0xFDF
  9451                           postinc2	equ	0xFDE
  9452                           postdec2	equ	0xFDD
  9453                           plusw2	equ	0xFDB
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function ___lwmod *****************
  9459 ;; Defined at:
  9460 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  dividend        2    7[COMRAM] unsigned int 
  9463 ;;  divisor         2    9[COMRAM] unsigned int 
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  counter         1   11[COMRAM] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  2    7[COMRAM] unsigned int 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9478 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9479 ;;Total ram usage:        5 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; This function calls:
  9482 ;;		Nothing
  9483 ;; This function is called by:
  9484 ;;		_sprintf
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           	psect	text63
  9489  00E13E                     __ptext63:
  9490                           	opt stack 0
  9491  00E13E                     ___lwmod:
  9492                           	opt stack 27
  9493                           
  9494                           ;incstack = 0
  9495  00E13E  500A               	movf	___lwmod@divisor,w,c
  9496  00E140  100B               	iorwf	___lwmod@divisor+1,w,c
  9497  00E142  B4D8               	btfsc	status,2,c
  9498  00E144  D01D               	goto	l1592
  9499  00E146  0E01               	movlw	1
  9500  00E148  6E0C               	movwf	___lwmod@counter,c
  9501  00E14A  D005               	goto	l3437
  9502  00E14C                     l3435:
  9503  00E14C  90D8               	bcf	status,0,c
  9504  00E14E  360A               	rlcf	___lwmod@divisor,f,c
  9505  00E150  360B               	rlcf	___lwmod@divisor+1,f,c
  9506  00E152  2A0C               	incf	___lwmod@counter,f,c
  9507  00E154  D000               	goto	l3437
  9508  00E156                     l3437:
  9509  00E156  BE0B               	btfsc	___lwmod@divisor+1,7,c
  9510  00E158  D002               	goto	l3439
  9511  00E15A  D7F8               	goto	l3435
  9512  00E15C  D000               	goto	l3439
  9513  00E15E                     l3439:
  9514  00E15E  500A               	movf	___lwmod@divisor,w,c
  9515  00E160  5C08               	subwf	___lwmod@dividend,w,c
  9516  00E162  500B               	movf	___lwmod@divisor+1,w,c
  9517  00E164  5809               	subwfb	___lwmod@dividend+1,w,c
  9518  00E166  A0D8               	btfss	status,0,c
  9519  00E168  D005               	goto	l3443
  9520  00E16A  500A               	movf	___lwmod@divisor,w,c
  9521  00E16C  5E08               	subwf	___lwmod@dividend,f,c
  9522  00E16E  500B               	movf	___lwmod@divisor+1,w,c
  9523  00E170  5A09               	subwfb	___lwmod@dividend+1,f,c
  9524  00E172  D000               	goto	l3443
  9525  00E174                     l3443:
  9526  00E174  90D8               	bcf	status,0,c
  9527  00E176  320B               	rrcf	___lwmod@divisor+1,f,c
  9528  00E178  320A               	rrcf	___lwmod@divisor,f,c
  9529  00E17A  2E0C               	decfsz	___lwmod@counter,f,c
  9530  00E17C  D7F0               	goto	l3439
  9531  00E17E  D000               	goto	l1592
  9532  00E180                     l1592:
  9533  00E180  C008  F008         	movff	___lwmod@dividend,?___lwmod
  9534  00E184  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  9535  00E188  0012               	return		;funcret
  9536  00E18A                     __end_of___lwmod:
  9537                           	opt stack 0
  9538                           tosu	equ	0xFFF
  9539                           tosh	equ	0xFFE
  9540                           tosl	equ	0xFFD
  9541                           pclath	equ	0xFFA
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           indf1	equ	0xFE7
  9551                           postinc1	equ	0xFE6
  9552                           postdec1	equ	0xFE5
  9553                           fsr1h	equ	0xFE2
  9554                           fsr1l	equ	0xFE1
  9555                           indf2	equ	0xFDF
  9556                           postinc2	equ	0xFDE
  9557                           postdec2	equ	0xFDD
  9558                           plusw2	equ	0xFDB
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function ___lwdiv *****************
  9564 ;; Defined at:
  9565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  dividend        2    0[COMRAM] unsigned int 
  9568 ;;  divisor         2    2[COMRAM] unsigned int 
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;  quotient        2    4[COMRAM] unsigned int 
  9571 ;;  counter         1    6[COMRAM] unsigned char 
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  2    0[COMRAM] unsigned int 
  9574 ;; Registers used:
  9575 ;;		wreg, status,2, status,0
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9584 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9585 ;;Total ram usage:        7 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; This function calls:
  9588 ;;		Nothing
  9589 ;; This function is called by:
  9590 ;;		_sprintf
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text64
  9595  00E238                     __ptext64:
  9596                           	opt stack 0
  9597  00E238                     ___lwdiv:
  9598                           	opt stack 27
  9599                           
  9600                           ;incstack = 0
  9601  00E238  0E00               	movlw	0
  9602  00E23A  6E06               	movwf	___lwdiv@quotient+1,c
  9603  00E23C  0E00               	movlw	0
  9604  00E23E  6E05               	movwf	___lwdiv@quotient,c
  9605  00E240  5003               	movf	___lwdiv@divisor,w,c
  9606  00E242  1004               	iorwf	___lwdiv@divisor+1,w,c
  9607  00E244  B4D8               	btfsc	status,2,c
  9608  00E246  D021               	goto	l1582
  9609  00E248  0E01               	movlw	1
  9610  00E24A  6E07               	movwf	___lwdiv@counter,c
  9611  00E24C  D005               	goto	l3417
  9612  00E24E                     l3415:
  9613  00E24E  90D8               	bcf	status,0,c
  9614  00E250  3603               	rlcf	___lwdiv@divisor,f,c
  9615  00E252  3604               	rlcf	___lwdiv@divisor+1,f,c
  9616  00E254  2A07               	incf	___lwdiv@counter,f,c
  9617  00E256  D000               	goto	l3417
  9618  00E258                     l3417:
  9619  00E258  BE04               	btfsc	___lwdiv@divisor+1,7,c
  9620  00E25A  D002               	goto	l3419
  9621  00E25C  D7F8               	goto	l3415
  9622  00E25E  D000               	goto	l3419
  9623  00E260                     l3419:
  9624  00E260  90D8               	bcf	status,0,c
  9625  00E262  3605               	rlcf	___lwdiv@quotient,f,c
  9626  00E264  3606               	rlcf	___lwdiv@quotient+1,f,c
  9627  00E266  5003               	movf	___lwdiv@divisor,w,c
  9628  00E268  5C01               	subwf	___lwdiv@dividend,w,c
  9629  00E26A  5004               	movf	___lwdiv@divisor+1,w,c
  9630  00E26C  5802               	subwfb	___lwdiv@dividend+1,w,c
  9631  00E26E  A0D8               	btfss	status,0,c
  9632  00E270  D006               	goto	l3427
  9633  00E272  5003               	movf	___lwdiv@divisor,w,c
  9634  00E274  5E01               	subwf	___lwdiv@dividend,f,c
  9635  00E276  5004               	movf	___lwdiv@divisor+1,w,c
  9636  00E278  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9637  00E27A  8005               	bsf	___lwdiv@quotient,0,c
  9638  00E27C  D000               	goto	l3427
  9639  00E27E                     l3427:
  9640  00E27E  90D8               	bcf	status,0,c
  9641  00E280  3204               	rrcf	___lwdiv@divisor+1,f,c
  9642  00E282  3203               	rrcf	___lwdiv@divisor,f,c
  9643  00E284  2E07               	decfsz	___lwdiv@counter,f,c
  9644  00E286  D7EC               	goto	l3419
  9645  00E288  D000               	goto	l1582
  9646  00E28A                     l1582:
  9647  00E28A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9648  00E28E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9649  00E292  0012               	return		;funcret
  9650  00E294                     __end_of___lwdiv:
  9651                           	opt stack 0
  9652                           tosu	equ	0xFFF
  9653                           tosh	equ	0xFFE
  9654                           tosl	equ	0xFFD
  9655                           pclath	equ	0xFFA
  9656                           tblptru	equ	0xFF8
  9657                           tblptrh	equ	0xFF7
  9658                           tblptrl	equ	0xFF6
  9659                           tablat	equ	0xFF5
  9660                           prodh	equ	0xFF4
  9661                           prodl	equ	0xFF3
  9662                           postinc0	equ	0xFEE
  9663                           wreg	equ	0xFE8
  9664                           indf1	equ	0xFE7
  9665                           postinc1	equ	0xFE6
  9666                           postdec1	equ	0xFE5
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           plusw2	equ	0xFDB
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function _lcd_putrs *****************
  9678 ;; Defined at:
  9679 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  9682 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  9683 ;;		 -> fecha@day(3), STR_30(2), STR_29(2), STR_28(2), 
  9684 ;;		 -> imprimir_tecla@aux(20), STR_25(9), STR_24(9), STR_23(11), 
  9685 ;;		 -> STR_22(14), STR_21(17), STR_20(17), STR_19(23), 
  9686 ;;		 -> STR_18(20), STR_17(27), STR_16(19), STR_15(22), 
  9687 ;;		 -> STR_14(18), STR_13(18), STR_12(19), STR_7(11), 
  9688 ;;		 -> STR_6(17), STR_5(26), STR_4(4), STR_3(3), 
  9689 ;;		 -> buffer2(20), 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;		None               void
  9694 ;; Registers used:
  9695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9705 ;;Total ram usage:        2 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    4
  9708 ;; This function calls:
  9709 ;;		_lcd_putc
  9710 ;; This function is called by:
  9711 ;;		_caratula
  9712 ;;		_clear_display
  9713 ;;		_menu_ingresar_password
  9714 ;;		_mostrar_titulo_menu
  9715 ;;		_mensaje_alarma_activada
  9716 ;;		_main
  9717 ;;		_imprimir_tecla
  9718 ;;		_leer_teclado
  9719 ;;		_guardar_elemento
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text65
  9724  00E18A                     __ptext65:
  9725                           	opt stack 0
  9726  00E18A                     _lcd_putrs:
  9727                           	opt stack 24
  9728                           
  9729                           ;unmc_lcd_216.c: 223: while(*ptr){
  9730                           
  9731                           ;incstack = 0
  9732  00E18A  D015               	goto	l3367
  9733  00E18C                     l3363:
  9734                           
  9735                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  9736  00E18C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9737  00E190  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9738  00E194  6AF8               	clrf	tblptru,c
  9739  00E196  0E0E               	movlw	(high __ramtop+-1)
  9740  00E198  64F7               	cpfsgt	tblptrh,c
  9741  00E19A  D003               	bra	u2357
  9742  00E19C  0008               	tblrd		*
  9743  00E19E  50F5               	movf	tablat,w,c
  9744  00E1A0  D005               	bra	u2350
  9745  00E1A2                     u2357:
  9746  00E1A2  CFF6 FFE9          	movff	tblptrl,fsr0l
  9747  00E1A6  CFF7 FFEA          	movff	tblptrh,fsr0h
  9748  00E1AA  50EF               	movf	indf0,w,c
  9749  00E1AC                     u2350:
  9750  00E1AC  EC79  F070         	call	_lcd_putc
  9751  00E1B0  4A09               	infsnz	lcd_putrs@ptr,f,c
  9752  00E1B2  2A0A               	incf	lcd_putrs@ptr+1,f,c
  9753  00E1B4  D000               	goto	l3367
  9754  00E1B6                     l3367:
  9755  00E1B6  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9756  00E1BA  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9757  00E1BE  6AF8               	clrf	tblptru,c
  9758  00E1C0  0E0E               	movlw	(high __ramtop+-1)
  9759  00E1C2  64F7               	cpfsgt	tblptrh,c
  9760  00E1C4  D003               	bra	u2367
  9761  00E1C6  0008               	tblrd		*
  9762  00E1C8  50F5               	movf	tablat,w,c
  9763  00E1CA  D005               	bra	u2360
  9764  00E1CC                     u2367:
  9765  00E1CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9766  00E1D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9767  00E1D4  50EF               	movf	indf0,w,c
  9768  00E1D6                     u2360:
  9769  00E1D6  0900               	iorlw	0
  9770  00E1D8  A4D8               	btfss	status,2,c
  9771  00E1DA  D7D8               	goto	l3363
  9772  00E1DC  0012               	return		;funcret
  9773  00E1DE                     __end_of_lcd_putrs:
  9774                           	opt stack 0
  9775                           tosu	equ	0xFFF
  9776                           tosh	equ	0xFFE
  9777                           tosl	equ	0xFFD
  9778                           pclath	equ	0xFFA
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           prodh	equ	0xFF4
  9784                           prodl	equ	0xFF3
  9785                           indf0	equ	0xFEF
  9786                           postinc0	equ	0xFEE
  9787                           fsr0h	equ	0xFEA
  9788                           fsr0l	equ	0xFE9
  9789                           wreg	equ	0xFE8
  9790                           indf1	equ	0xFE7
  9791                           postinc1	equ	0xFE6
  9792                           postdec1	equ	0xFE5
  9793                           fsr1h	equ	0xFE2
  9794                           fsr1l	equ	0xFE1
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           plusw2	equ	0xFDB
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _lcd_putc *****************
  9804 ;; Defined at:
  9805 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  c               1    wreg     unsigned char 
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  c               1    7[COMRAM] unsigned char 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;		None               void
  9812 ;; Registers used:
  9813 ;;		wreg, status,2, status,0, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9823 ;;Total ram usage:        1 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    3
  9826 ;; This function calls:
  9827 ;;		_lcd_gotoxy
  9828 ;;		_lcd_send_byte
  9829 ;; This function is called by:
  9830 ;;		_lcd_putrs
  9831 ;;		_lcd_puts
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text66
  9836  00E0F2                     __ptext66:
  9837                           	opt stack 0
  9838  00E0F2                     _lcd_putc:
  9839                           	opt stack 24
  9840                           
  9841                           ;incstack = 0
  9842                           ;lcd_putc@c stored from wreg
  9843  00E0F2  6E08               	movwf	lcd_putc@c,c
  9844                           
  9845                           ;unmc_lcd_216.c: 173: switch(c){
  9846  00E0F4  D018               	goto	l3337
  9847  00E0F6                     l3327:
  9848                           
  9849                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9850  00E0F6  0E01               	movlw	1
  9851  00E0F8  6E03               	movwf	lcd_send_byte@n,c
  9852  00E0FA  0E00               	movlw	0
  9853  00E0FC  EC19  F070         	call	_lcd_send_byte
  9854                           
  9855                           ;unmc_lcd_216.c: 176: break;
  9856  00E100  0012               	return	
  9857  00E102                     l3329:
  9858                           
  9859                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9860  00E102  0E02               	movlw	2
  9861  00E104  6E05               	movwf	lcd_gotoxy@y,c
  9862  00E106  0E01               	movlw	1
  9863  00E108  EC31  F06F         	call	_lcd_gotoxy
  9864                           
  9865                           ;unmc_lcd_216.c: 179: break;
  9866  00E10C  0012               	return	
  9867  00E10E                     l3331:
  9868                           
  9869                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9870  00E10E  0E10               	movlw	16
  9871  00E110  6E03               	movwf	lcd_send_byte@n,c
  9872  00E112  0E00               	movlw	0
  9873  00E114  EC19  F070         	call	_lcd_send_byte
  9874                           
  9875                           ;unmc_lcd_216.c: 182: break;
  9876  00E118  0012               	return	
  9877  00E11A                     l3333:
  9878                           
  9879                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  9880  00E11A  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  9881  00E11E  0E01               	movlw	1
  9882  00E120  EC19  F070         	call	_lcd_send_byte
  9883                           
  9884                           ;unmc_lcd_216.c: 186: }
  9885                           
  9886                           ;unmc_lcd_216.c: 185: break;
  9887  00E124  0012               	return	
  9888  00E126                     l3337:
  9889  00E126  5008               	movf	lcd_putc@c,w,c
  9890                           
  9891                           ; Switch size 1, requested type "space"
  9892                           ; Number of cases is 3, Range of values is 8 to 12
  9893                           ; switch strategies available:
  9894                           ; Name         Instructions Cycles
  9895                           ; simple_byte           10     6 (average)
  9896                           ;	Chosen strategy is simple_byte
  9897  00E128  0A08               	xorlw	8	; case 8
  9898  00E12A  B4D8               	btfsc	status,2,c
  9899  00E12C  D7F0               	goto	l3331
  9900  00E12E  0A02               	xorlw	2	; case 10
  9901  00E130  B4D8               	btfsc	status,2,c
  9902  00E132  D7E7               	goto	l3329
  9903  00E134  0A06               	xorlw	6	; case 12
  9904  00E136  B4D8               	btfsc	status,2,c
  9905  00E138  D7DE               	goto	l3327
  9906  00E13A  D7EF               	goto	l3333
  9907  00E13C  0012               	return		;funcret
  9908  00E13E                     __end_of_lcd_putc:
  9909                           	opt stack 0
  9910                           tosu	equ	0xFFF
  9911                           tosh	equ	0xFFE
  9912                           tosl	equ	0xFFD
  9913                           pclath	equ	0xFFA
  9914                           tblptru	equ	0xFF8
  9915                           tblptrh	equ	0xFF7
  9916                           tblptrl	equ	0xFF6
  9917                           tablat	equ	0xFF5
  9918                           prodh	equ	0xFF4
  9919                           prodl	equ	0xFF3
  9920                           indf0	equ	0xFEF
  9921                           postinc0	equ	0xFEE
  9922                           fsr0h	equ	0xFEA
  9923                           fsr0l	equ	0xFE9
  9924                           wreg	equ	0xFE8
  9925                           indf1	equ	0xFE7
  9926                           postinc1	equ	0xFE6
  9927                           postdec1	equ	0xFE5
  9928                           fsr1h	equ	0xFE2
  9929                           fsr1l	equ	0xFE1
  9930                           indf2	equ	0xFDF
  9931                           postinc2	equ	0xFDE
  9932                           postdec2	equ	0xFDD
  9933                           plusw2	equ	0xFDB
  9934                           fsr2h	equ	0xFDA
  9935                           fsr2l	equ	0xFD9
  9936                           status	equ	0xFD8
  9937                           
  9938 ;; *************** function _lcd_gotoxy *****************
  9939 ;; Defined at:
  9940 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;  x               1    wreg     unsigned char 
  9943 ;;  y               1    4[COMRAM] unsigned char 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  x               1    5[COMRAM] unsigned char 
  9946 ;;  address         1    6[COMRAM] unsigned char 
  9947 ;; Return value:  Size  Location     Type
  9948 ;;		None               void
  9949 ;; Registers used:
  9950 ;;		wreg, status,2, status,0, cstack
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9956 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9960 ;;Total ram usage:        3 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:    2
  9963 ;; This function calls:
  9964 ;;		_lcd_send_byte
  9965 ;; This function is called by:
  9966 ;;		_caratula
  9967 ;;		_clear_display
  9968 ;;		_menu_ingresar_password
  9969 ;;		_mostrar_titulo_menu
  9970 ;;		_mensaje_alarma_activada
  9971 ;;		_main
  9972 ;;		_lcd_putc
  9973 ;;		_guardar_elemento
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text67
  9978  00DE62                     __ptext67:
  9979                           	opt stack 0
  9980  00DE62                     _lcd_gotoxy:
  9981                           	opt stack 24
  9982                           
  9983                           ;incstack = 0
  9984                           ;lcd_gotoxy@x stored from wreg
  9985  00DE62  6E06               	movwf	lcd_gotoxy@x,c
  9986                           
  9987                           ;unmc_lcd_216.c: 159: int8 address;
  9988                           ;unmc_lcd_216.c: 161: if(y != 1)
  9989  00DE64  0405               	decf	lcd_gotoxy@y,w,c
  9990  00DE66  B4D8               	btfsc	status,2,c
  9991  00DE68  D002               	goto	l3089
  9992                           
  9993                           ;unmc_lcd_216.c: 162: address = 0x40;
  9994  00DE6A  0E40               	movlw	64
  9995  00DE6C  D001               	goto	L2
  9996  00DE6E                     l3089:
  9997                           
  9998                           ;unmc_lcd_216.c: 163: else
  9999                           ;unmc_lcd_216.c: 164: address=0;
 10000  00DE6E  0E00               	movlw	0
 10001  00DE70                     L2:
 10002  00DE70  6E07               	movwf	lcd_gotoxy@address,c
 10003  00DE72  D000               	goto	l3091
 10004  00DE74                     l3091:
 10005                           
 10006                           ;unmc_lcd_216.c: 166: address += x-1;
 10007  00DE74  0406               	decf	lcd_gotoxy@x,w,c
 10008  00DE76  2607               	addwf	lcd_gotoxy@address,f,c
 10009                           
 10010                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
 10011  00DE78  5007               	movf	lcd_gotoxy@address,w,c
 10012  00DE7A  0980               	iorlw	128
 10013  00DE7C  6E03               	movwf	lcd_send_byte@n,c
 10014  00DE7E  0E00               	movlw	0
 10015  00DE80  EC19  F070         	call	_lcd_send_byte
 10016  00DE84  0012               	return		;funcret
 10017  00DE86                     __end_of_lcd_gotoxy:
 10018                           	opt stack 0
 10019                           tosu	equ	0xFFF
 10020                           tosh	equ	0xFFE
 10021                           tosl	equ	0xFFD
 10022                           pclath	equ	0xFFA
 10023                           tblptru	equ	0xFF8
 10024                           tblptrh	equ	0xFF7
 10025                           tblptrl	equ	0xFF6
 10026                           tablat	equ	0xFF5
 10027                           prodh	equ	0xFF4
 10028                           prodl	equ	0xFF3
 10029                           indf0	equ	0xFEF
 10030                           postinc0	equ	0xFEE
 10031                           fsr0h	equ	0xFEA
 10032                           fsr0l	equ	0xFE9
 10033                           wreg	equ	0xFE8
 10034                           indf1	equ	0xFE7
 10035                           postinc1	equ	0xFE6
 10036                           postdec1	equ	0xFE5
 10037                           fsr1h	equ	0xFE2
 10038                           fsr1l	equ	0xFE1
 10039                           indf2	equ	0xFDF
 10040                           postinc2	equ	0xFDE
 10041                           postdec2	equ	0xFDD
 10042                           plusw2	equ	0xFDB
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047 ;; *************** function _activar_sonido_alarma *****************
 10048 ;; Defined at:
 10049 ;;		line 242 in file "main.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;		None
 10054 ;; Return value:  Size  Location     Type
 10055 ;;		None               void
 10056 ;; Registers used:
 10057 ;;		None
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10067 ;;Total ram usage:        0 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; This function calls:
 10070 ;;		Nothing
 10071 ;; This function is called by:
 10072 ;;		_main
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           	psect	text68
 10077  00DBC8                     __ptext68:
 10078                           	opt stack 0
 10079  00DBC8                     _activar_sonido_alarma:
 10080                           	opt stack 30
 10081                           
 10082                           ;main.c: 243: LATBbits.LATB0 = !LATBbits.LATB0;;
 10083                           
 10084                           ;incstack = 0
 10085  00DBC8  708A               	btg	3978,0,c	;volatile
 10086                           
 10087                           ;main.c: 244: LATCbits.LATC7 = !LATCbits.LATC7;;
 10088  00DBCA  7E8B               	btg	3979,7,c	;volatile
 10089                           
 10090                           ;main.c: 245: LATCbits.LATC6 = !LATCbits.LATC6;;
 10091  00DBCC  7C8B               	btg	3979,6,c	;volatile
 10092  00DBCE  0012               	return		;funcret
 10093  00DBD0                     __end_of_activar_sonido_alarma:
 10094                           	opt stack 0
 10095                           tosu	equ	0xFFF
 10096                           tosh	equ	0xFFE
 10097                           tosl	equ	0xFFD
 10098                           pclath	equ	0xFFA
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           indf0	equ	0xFEF
 10106                           postinc0	equ	0xFEE
 10107                           fsr0h	equ	0xFEA
 10108                           fsr0l	equ	0xFE9
 10109                           wreg	equ	0xFE8
 10110                           indf1	equ	0xFE7
 10111                           postinc1	equ	0xFE6
 10112                           postdec1	equ	0xFE5
 10113                           fsr1h	equ	0xFE2
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           postdec2	equ	0xFDD
 10118                           plusw2	equ	0xFDB
 10119                           fsr2h	equ	0xFDA
 10120                           fsr2l	equ	0xFD9
 10121                           status	equ	0xFD8
 10122                           
 10123 ;; *************** function _Setup *****************
 10124 ;; Defined at:
 10125 ;;		line 60 in file "main.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;		None               void
 10132 ;; Registers used:
 10133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10143 ;;Total ram usage:        0 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:    3
 10146 ;; This function calls:
 10147 ;;		_Write_RTC
 10148 ;;		_lcd_comand
 10149 ;;		_lcd_init
 10150 ;; This function is called by:
 10151 ;;		_main
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           	psect	text69
 10156  00E0AA                     __ptext69:
 10157                           	opt stack 0
 10158  00E0AA                     _Setup:
 10159                           	opt stack 27
 10160                           
 10161                           ;main.c: 62: OSCTUNEbits.INTSRC=1;
 10162                           
 10163                           ;incstack = 0
 10164  00E0AA  8E9B               	bsf	3995,7,c	;volatile
 10165                           
 10166                           ;main.c: 63: OSCTUNEbits.PLLEN=0;
 10167  00E0AC  9C9B               	bcf	3995,6,c	;volatile
 10168                           
 10169                           ;main.c: 64: OSCCONbits.IRCF0=1;
 10170  00E0AE  88D3               	bsf	4051,4,c	;volatile
 10171                           
 10172                           ;main.c: 65: OSCCONbits.IRCF1=1;
 10173  00E0B0  8AD3               	bsf	4051,5,c	;volatile
 10174                           
 10175                           ;main.c: 66: OSCCONbits.IRCF2=1;
 10176  00E0B2  8CD3               	bsf	4051,6,c	;volatile
 10177                           
 10178                           ;main.c: 67: OSCCONbits.SCS0=0;
 10179  00E0B4  90D3               	bcf	4051,0,c	;volatile
 10180                           
 10181                           ;main.c: 68: OSCCONbits.SCS1=0;
 10182  00E0B6  92D3               	bcf	4051,1,c	;volatile
 10183                           
 10184                           ;main.c: 69: TRISA = 0b11110000;
 10185  00E0B8  0EF0               	movlw	240
 10186  00E0BA  6E92               	movwf	3986,c	;volatile
 10187                           
 10188                           ;main.c: 70: TRISB = 0;
 10189  00E0BC  0E00               	movlw	0
 10190  00E0BE  6E93               	movwf	3987,c	;volatile
 10191                           
 10192                           ;main.c: 71: TRISC = 0b00000111;
 10193  00E0C0  0E07               	movlw	7
 10194  00E0C2  6E94               	movwf	3988,c	;volatile
 10195                           
 10196                           ;main.c: 75: ANCON0=0b11111111;
 10197  00E0C4  010F               	movlb	15	; () banked
 10198  00E0C6  6948               	setf	72,b	;volatile
 10199                           
 10200                           ; BSR set to: 15
 10201                           ;main.c: 77: ANCON1=0b11111111;
 10202  00E0C8  010F               	movlb	15	; () banked
 10203  00E0CA  6949               	setf	73,b	;volatile
 10204                           
 10205                           ;main.c: 78: ADCON0=0b00101101;
 10206  00E0CC  0E2D               	movlw	45
 10207  00E0CE  6EC2               	movwf	4034,c	;volatile
 10208                           
 10209                           ;main.c: 79: ADCON1=0b00010000;
 10210  00E0D0  0E10               	movlw	16
 10211  00E0D2  6EC1               	movwf	4033,c	;volatile
 10212                           
 10213                           ; BSR set to: 15
 10214                           ;main.c: 80: RTCCFGbits.RTCEN=1;
 10215  00E0D4  010F               	movlb	15	; () banked
 10216  00E0D6  8F3F               	bsf	63,7,b	;volatile
 10217                           
 10218                           ; BSR set to: 15
 10219                           ;main.c: 81: RTCCFGbits.RTCWREN=1;
 10220  00E0D8  010F               	movlb	15	; () banked
 10221  00E0DA  8B3F               	bsf	63,5,b	;volatile
 10222                           
 10223                           ; BSR set to: 15
 10224                           ;main.c: 82: T1CONbits.T1OSCEN=1;
 10225  00E0DC  86CD               	bsf	4045,3,c	;volatile
 10226                           
 10227                           ; BSR set to: 15
 10228                           ;main.c: 83: Write_RTC();
 10229  00E0DE  EC52  F07B         	call	_Write_RTC	;wreg free
 10230                           
 10231                           ;main.c: 84: lcd_init();
 10232  00E0E2  EC23  F074         	call	_lcd_init	;wreg free
 10233                           
 10234                           ;main.c: 85: lcd_comand(0b00001100);
 10235  00E0E6  0E0C               	movlw	12
 10236  00E0E8  EC01  F06E         	call	_lcd_comand
 10237                           
 10238                           ;main.c: 86: LATBbits.LATB1 = 0;;
 10239  00E0EC  928A               	bcf	3978,1,c	;volatile
 10240                           
 10241                           ;main.c: 87: LATBbits.LATB0 = 0;;
 10242  00E0EE  908A               	bcf	3978,0,c	;volatile
 10243  00E0F0  0012               	return		;funcret
 10244  00E0F2                     __end_of_Setup:
 10245                           	opt stack 0
 10246                           tosu	equ	0xFFF
 10247                           tosh	equ	0xFFE
 10248                           tosl	equ	0xFFD
 10249                           pclath	equ	0xFFA
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           prodh	equ	0xFF4
 10255                           prodl	equ	0xFF3
 10256                           indf0	equ	0xFEF
 10257                           postinc0	equ	0xFEE
 10258                           fsr0h	equ	0xFEA
 10259                           fsr0l	equ	0xFE9
 10260                           wreg	equ	0xFE8
 10261                           indf1	equ	0xFE7
 10262                           postinc1	equ	0xFE6
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           plusw2	equ	0xFDB
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8
 10273                           
 10274 ;; *************** function _lcd_init *****************
 10275 ;; Defined at:
 10276 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10277 ;; Parameters:    Size  Location     Type
 10278 ;;		None
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  i               1    4[COMRAM] unsigned char 
 10281 ;; Return value:  Size  Location     Type
 10282 ;;		None               void
 10283 ;; Registers used:
 10284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10294 ;;Total ram usage:        1 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; Hardware stack levels required when called:    2
 10297 ;; This function calls:
 10298 ;;		_Delay1KTCYx
 10299 ;;		_lcd_send_byte
 10300 ;;		_lcd_send_nibble
 10301 ;; This function is called by:
 10302 ;;		_Setup
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text70
 10307  00E846                     __ptext70:
 10308                           	opt stack 0
 10309  00E846                     _lcd_init:
 10310                           	opt stack 27
 10311                           
 10312                           ;unmc_lcd_216.c: 120: int8 i;
 10313                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
 10314                           
 10315                           ;incstack = 0
 10316  00E846  9693               	bcf	3987,3,c	;volatile
 10317                           
 10318                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
 10319  00E848  9493               	bcf	3987,2,c	;volatile
 10320                           
 10321                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
 10322  00E84A  968A               	bcf	3978,3,c	;volatile
 10323                           
 10324                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
 10325  00E84C  948A               	bcf	3978,2,c	;volatile
 10326                           
 10327                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
 10328  00E84E  9893               	bcf	3987,4,c	;volatile
 10329                           
 10330                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
 10331  00E850  9A93               	bcf	3987,5,c	;volatile
 10332                           
 10333                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
 10334  00E852  9C93               	bcf	3987,6,c	;volatile
 10335                           
 10336                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
 10337  00E854  9E93               	bcf	3987,7,c	;volatile
 10338                           
 10339                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
 10340  00E856  0E0A               	movlw	10
 10341  00E858  EC42  F06E         	call	_Delay1KTCYx
 10342                           
 10343                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
 10344  00E85C  0E0A               	movlw	10
 10345  00E85E  EC42  F06E         	call	_Delay1KTCYx
 10346                           
 10347                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
 10348  00E862  0E0A               	movlw	10
 10349  00E864  EC42  F06E         	call	_Delay1KTCYx
 10350                           
 10351                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
 10352  00E868  0E00               	movlw	0
 10353  00E86A  6E05               	movwf	lcd_init@i,c
 10354  00E86C                     l3923:
 10355  00E86C  0E02               	movlw	2
 10356  00E86E  6405               	cpfsgt	lcd_init@i,c
 10357  00E870  D001               	goto	l3927
 10358  00E872  D008               	goto	l3933
 10359  00E874                     l3927:
 10360                           
 10361                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
 10362  00E874  0E03               	movlw	3
 10363  00E876  ECF8  F072         	call	_lcd_send_nibble
 10364                           
 10365                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
 10366  00E87A  0E0A               	movlw	10
 10367  00E87C  EC42  F06E         	call	_Delay1KTCYx
 10368  00E880  2A05               	incf	lcd_init@i,f,c
 10369  00E882  D7F4               	goto	l3923
 10370  00E884                     l3933:
 10371                           
 10372                           ;unmc_lcd_216.c: 146: }
 10373                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
 10374  00E884  0E02               	movlw	2
 10375  00E886  ECF8  F072         	call	_lcd_send_nibble
 10376                           
 10377                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
 10378  00E88A  0E00               	movlw	0
 10379  00E88C  6E05               	movwf	lcd_init@i,c
 10380  00E88E  0E03               	movlw	3
 10381  00E890  6405               	cpfsgt	lcd_init@i,c
 10382  00E892  D002               	goto	l3941
 10383  00E894  0012               	return	
 10384  00E896  0012               	return	
 10385  00E898                     l3941:
 10386                           
 10387                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10388  00E898  5005               	movf	lcd_init@i,w,c
 10389  00E89A  0D01               	mullw	1
 10390  00E89C  0E95               	movlw	low _LCD_INIT_STRING
 10391  00E89E  24F3               	addwf	prodl,w,c
 10392  00E8A0  6EF6               	movwf	tblptrl,c
 10393  00E8A2  0EFE               	movlw	high _LCD_INIT_STRING
 10394  00E8A4  20F4               	addwfc	prodh,w,c
 10395  00E8A6  6EF7               	movwf	tblptrh,c
 10396  00E8A8                     	if	0	;There are less than 3 active tblptr bytes
 10397  00E8A8                     	endif
 10398  00E8A8  0008               	tblrd		*
 10399  00E8AA  CFF5 F003          	movff	tablat,lcd_send_byte@n
 10400  00E8AE  0E00               	movlw	0
 10401  00E8B0  EC19  F070         	call	_lcd_send_byte
 10402                           
 10403                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
 10404  00E8B4  0E0A               	movlw	10
 10405  00E8B6  EC42  F06E         	call	_Delay1KTCYx
 10406  00E8BA  2A05               	incf	lcd_init@i,f,c
 10407  00E8BC  0E03               	movlw	3
 10408  00E8BE  6405               	cpfsgt	lcd_init@i,c
 10409  00E8C0  D7EB               	goto	l3941
 10410  00E8C2  0012               	return	
 10411  00E8C4  0012               	return		;funcret
 10412  00E8C6                     __end_of_lcd_init:
 10413                           	opt stack 0
 10414                           tosu	equ	0xFFF
 10415                           tosh	equ	0xFFE
 10416                           tosl	equ	0xFFD
 10417                           pclath	equ	0xFFA
 10418                           tblptru	equ	0xFF8
 10419                           tblptrh	equ	0xFF7
 10420                           tblptrl	equ	0xFF6
 10421                           tablat	equ	0xFF5
 10422                           prodh	equ	0xFF4
 10423                           prodl	equ	0xFF3
 10424                           indf0	equ	0xFEF
 10425                           postinc0	equ	0xFEE
 10426                           fsr0h	equ	0xFEA
 10427                           fsr0l	equ	0xFE9
 10428                           wreg	equ	0xFE8
 10429                           indf1	equ	0xFE7
 10430                           postinc1	equ	0xFE6
 10431                           postdec1	equ	0xFE5
 10432                           fsr1h	equ	0xFE2
 10433                           fsr1l	equ	0xFE1
 10434                           indf2	equ	0xFDF
 10435                           postinc2	equ	0xFDE
 10436                           postdec2	equ	0xFDD
 10437                           plusw2	equ	0xFDB
 10438                           fsr2h	equ	0xFDA
 10439                           fsr2l	equ	0xFD9
 10440                           status	equ	0xFD8
 10441                           
 10442 ;; *************** function _Delay1KTCYx *****************
 10443 ;; Defined at:
 10444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;  unit            1    wreg     unsigned char 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  unit            1    0[COMRAM] unsigned char 
 10449 ;; Return value:  Size  Location     Type
 10450 ;;		None               void
 10451 ;; Registers used:
 10452 ;;		wreg
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10462 ;;Total ram usage:        1 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; This function calls:
 10465 ;;		Nothing
 10466 ;; This function is called by:
 10467 ;;		_lcd_init
 10468 ;;		_DelayPORXLCD
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           	psect	text71
 10473  00DC84                     __ptext71:
 10474                           	opt stack 0
 10475  00DC84                     _Delay1KTCYx:
 10476                           	opt stack 28
 10477                           
 10478                           ;incstack = 0
 10479                           ;Delay1KTCYx@unit stored from wreg
 10480  00DC84  6E01               	movwf	Delay1KTCYx@unit,c
 10481  00DC86  0EFA               	movlw	250
 10482  00DC88                     u3877:
 10483  00DC88  F000               	nop	
 10484  00DC8A  2EE8               	decfsz	wreg,f,c
 10485  00DC8C  D7FD               	goto	u3877
 10486  00DC8E  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10487  00DC90  D7FA               	goto	l3861
 10488  00DC92  0012               	return	
 10489  00DC94  0012               	return		;funcret
 10490  00DC96                     __end_of_Delay1KTCYx:
 10491                           	opt stack 0
 10492                           tosu	equ	0xFFF
 10493                           tosh	equ	0xFFE
 10494                           tosl	equ	0xFFD
 10495                           pclath	equ	0xFFA
 10496                           tblptru	equ	0xFF8
 10497                           tblptrh	equ	0xFF7
 10498                           tblptrl	equ	0xFF6
 10499                           tablat	equ	0xFF5
 10500                           prodh	equ	0xFF4
 10501                           prodl	equ	0xFF3
 10502                           indf0	equ	0xFEF
 10503                           postinc0	equ	0xFEE
 10504                           fsr0h	equ	0xFEA
 10505                           fsr0l	equ	0xFE9
 10506                           wreg	equ	0xFE8
 10507                           indf1	equ	0xFE7
 10508                           postinc1	equ	0xFE6
 10509                           postdec1	equ	0xFE5
 10510                           fsr1h	equ	0xFE2
 10511                           fsr1l	equ	0xFE1
 10512                           indf2	equ	0xFDF
 10513                           postinc2	equ	0xFDE
 10514                           postdec2	equ	0xFDD
 10515                           plusw2	equ	0xFDB
 10516                           fsr2h	equ	0xFDA
 10517                           fsr2l	equ	0xFD9
 10518                           status	equ	0xFD8
 10519                           
 10520 ;; *************** function _lcd_comand *****************
 10521 ;; Defined at:
 10522 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;  d               1    wreg     unsigned char 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  d               1    4[COMRAM] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;		None               void
 10529 ;; Registers used:
 10530 ;;		wreg, status,2, status,0, cstack
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10540 ;;Total ram usage:        1 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    2
 10543 ;; This function calls:
 10544 ;;		_lcd_send_byte
 10545 ;; This function is called by:
 10546 ;;		_caratula
 10547 ;;		_Setup
 10548 ;;		_menu_ingresar_password
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           	psect	text72
 10553  00DC02                     __ptext72:
 10554                           	opt stack 0
 10555  00DC02                     _lcd_comand:
 10556                           	opt stack 25
 10557                           
 10558                           ;incstack = 0
 10559                           ;lcd_comand@d stored from wreg
 10560  00DC02  6E05               	movwf	lcd_comand@d,c
 10561                           
 10562                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
 10563  00DC04  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
 10564  00DC08  0E00               	movlw	0
 10565  00DC0A  EC19  F070         	call	_lcd_send_byte
 10566  00DC0E  0012               	return		;funcret
 10567  00DC10                     __end_of_lcd_comand:
 10568                           	opt stack 0
 10569                           tosu	equ	0xFFF
 10570                           tosh	equ	0xFFE
 10571                           tosl	equ	0xFFD
 10572                           pclath	equ	0xFFA
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           indf0	equ	0xFEF
 10580                           postinc0	equ	0xFEE
 10581                           fsr0h	equ	0xFEA
 10582                           fsr0l	equ	0xFE9
 10583                           wreg	equ	0xFE8
 10584                           indf1	equ	0xFE7
 10585                           postinc1	equ	0xFE6
 10586                           postdec1	equ	0xFE5
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           plusw2	equ	0xFDB
 10593                           fsr2h	equ	0xFDA
 10594                           fsr2l	equ	0xFD9
 10595                           status	equ	0xFD8
 10596                           
 10597 ;; *************** function _lcd_send_byte *****************
 10598 ;; Defined at:
 10599 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;  address         1    wreg     unsigned char 
 10602 ;;  n               1    2[COMRAM] unsigned char 
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;  address         1    3[COMRAM] unsigned char 
 10605 ;; Return value:  Size  Location     Type
 10606 ;;		None               void
 10607 ;; Registers used:
 10608 ;;		wreg, status,2, status,0, cstack
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10614 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10618 ;;Total ram usage:        2 bytes
 10619 ;; Hardware stack levels used:    1
 10620 ;; Hardware stack levels required when called:    1
 10621 ;; This function calls:
 10622 ;;		_Delay100TCYx
 10623 ;;		_lcd_send_nibble
 10624 ;; This function is called by:
 10625 ;;		_lcd_init
 10626 ;;		_lcd_gotoxy
 10627 ;;		_lcd_putc
 10628 ;;		_lcd_comand
 10629 ;;		_lcd_setcursor_vb
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           	psect	text73
 10634  00E032                     __ptext73:
 10635                           	opt stack 0
 10636  00E032                     _lcd_send_byte:
 10637                           	opt stack 25
 10638                           
 10639                           ;incstack = 0
 10640                           ;lcd_send_byte@address stored from wreg
 10641  00E032  6E04               	movwf	lcd_send_byte@address,c
 10642                           
 10643                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10644  00E034  968A               	bcf	3978,3,c	;volatile
 10645                           
 10646                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10647  00E036  0E02               	movlw	2
 10648  00E038  EC39  F06E         	call	_Delay100TCYx
 10649                           
 10650                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10651  00E03C  9893               	bcf	3987,4,c	;volatile
 10652                           
 10653                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10654  00E03E  9A93               	bcf	3987,5,c	;volatile
 10655                           
 10656                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10657  00E040  9C93               	bcf	3987,6,c	;volatile
 10658                           
 10659                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10660  00E042  9E93               	bcf	3987,7,c	;volatile
 10661                           
 10662                           ;unmc_lcd_216.c: 101: if(address)
 10663  00E044  5004               	movf	lcd_send_byte@address,w,c
 10664  00E046  B4D8               	btfsc	status,2,c
 10665  00E048  D002               	goto	l344
 10666                           
 10667                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10668  00E04A  868A               	bsf	3978,3,c	;volatile
 10669  00E04C  D001               	goto	l345
 10670  00E04E                     l344:
 10671                           
 10672                           ;unmc_lcd_216.c: 103: else
 10673                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10674  00E04E  968A               	bcf	3978,3,c	;volatile
 10675  00E050                     l345:
 10676                           
 10677                           ;unmc_lcd_216.c: 106: __nop();
 10678  00E050  F000               	nop	
 10679                           
 10680                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10681  00E052  3803               	swapf	lcd_send_byte@n,w,c
 10682  00E054  0B0F               	andlw	15
 10683  00E056  ECF8  F072         	call	_lcd_send_nibble
 10684                           
 10685                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10686  00E05A  5003               	movf	lcd_send_byte@n,w,c
 10687  00E05C  0B0F               	andlw	15
 10688  00E05E  ECF8  F072         	call	_lcd_send_nibble
 10689  00E062  0012               	return		;funcret
 10690  00E064                     __end_of_lcd_send_byte:
 10691                           	opt stack 0
 10692                           tosu	equ	0xFFF
 10693                           tosh	equ	0xFFE
 10694                           tosl	equ	0xFFD
 10695                           pclath	equ	0xFFA
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           indf0	equ	0xFEF
 10703                           postinc0	equ	0xFEE
 10704                           fsr0h	equ	0xFEA
 10705                           fsr0l	equ	0xFE9
 10706                           wreg	equ	0xFE8
 10707                           indf1	equ	0xFE7
 10708                           postinc1	equ	0xFE6
 10709                           postdec1	equ	0xFE5
 10710                           fsr1h	equ	0xFE2
 10711                           fsr1l	equ	0xFE1
 10712                           indf2	equ	0xFDF
 10713                           postinc2	equ	0xFDE
 10714                           postdec2	equ	0xFDD
 10715                           plusw2	equ	0xFDB
 10716                           fsr2h	equ	0xFDA
 10717                           fsr2l	equ	0xFD9
 10718                           status	equ	0xFD8
 10719                           
 10720 ;; *************** function _lcd_send_nibble *****************
 10721 ;; Defined at:
 10722 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  nibble          1    wreg     unsigned char 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  nibble          1    1[COMRAM] unsigned char 
 10727 ;; Return value:  Size  Location     Type
 10728 ;;		None               void
 10729 ;; Registers used:
 10730 ;;		wreg, status,2, status,0
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10739 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10740 ;;Total ram usage:        2 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; This function calls:
 10743 ;;		Nothing
 10744 ;; This function is called by:
 10745 ;;		_lcd_send_byte
 10746 ;;		_lcd_init
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           	psect	text74
 10751  00E5F0                     __ptext74:
 10752                           	opt stack 0
 10753  00E5F0                     _lcd_send_nibble:
 10754                           	opt stack 25
 10755                           
 10756                           ;incstack = 0
 10757                           ;lcd_send_nibble@nibble stored from wreg
 10758  00E5F0  6E02               	movwf	lcd_send_nibble@nibble,c
 10759                           
 10760                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10761  00E5F2  A002               	btfss	lcd_send_nibble@nibble,0,c
 10762  00E5F4  D003               	goto	u1920
 10763  00E5F6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10764  00E5F8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10765  00E5FA  D001               	goto	u1938
 10766  00E5FC                     u1920:
 10767  00E5FC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10768  00E5FE                     u1938:
 10769  00E5FE  3A01               	swapf	??_lcd_send_nibble,f,c
 10770  00E600  508A               	movf	3978,w,c	;volatile
 10771  00E602  1801               	xorwf	??_lcd_send_nibble,w,c
 10772  00E604  0BEF               	andlw	-17
 10773  00E606  1801               	xorwf	??_lcd_send_nibble,w,c
 10774  00E608  6E8A               	movwf	3978,c	;volatile
 10775                           
 10776                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10777  00E60A  A202               	btfss	lcd_send_nibble@nibble,1,c
 10778  00E60C  D003               	goto	u1940
 10779  00E60E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10780  00E610  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10781  00E612  D001               	goto	u1958
 10782  00E614                     u1940:
 10783  00E614  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10784  00E616                     u1958:
 10785  00E616  3A01               	swapf	??_lcd_send_nibble,f,c
 10786  00E618  4601               	rlncf	??_lcd_send_nibble,f,c
 10787  00E61A  508A               	movf	3978,w,c	;volatile
 10788  00E61C  1801               	xorwf	??_lcd_send_nibble,w,c
 10789  00E61E  0BDF               	andlw	-33
 10790  00E620  1801               	xorwf	??_lcd_send_nibble,w,c
 10791  00E622  6E8A               	movwf	3978,c	;volatile
 10792                           
 10793                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10794  00E624  A402               	btfss	lcd_send_nibble@nibble,2,c
 10795  00E626  D003               	goto	u1960
 10796  00E628  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10797  00E62A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10798  00E62C  D001               	goto	u1978
 10799  00E62E                     u1960:
 10800  00E62E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10801  00E630                     u1978:
 10802  00E630  3A01               	swapf	??_lcd_send_nibble,f,c
 10803  00E632  4601               	rlncf	??_lcd_send_nibble,f,c
 10804  00E634  4601               	rlncf	??_lcd_send_nibble,f,c
 10805  00E636  508A               	movf	3978,w,c	;volatile
 10806  00E638  1801               	xorwf	??_lcd_send_nibble,w,c
 10807  00E63A  0BBF               	andlw	-65
 10808  00E63C  1801               	xorwf	??_lcd_send_nibble,w,c
 10809  00E63E  6E8A               	movwf	3978,c	;volatile
 10810                           
 10811                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10812  00E640  A602               	btfss	lcd_send_nibble@nibble,3,c
 10813  00E642  D003               	goto	u1980
 10814  00E644  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10815  00E646  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10816  00E648  D001               	goto	u1998
 10817  00E64A                     u1980:
 10818  00E64A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10819  00E64C                     u1998:
 10820  00E64C  3201               	rrcf	??_lcd_send_nibble,f,c
 10821  00E64E  3201               	rrcf	??_lcd_send_nibble,f,c
 10822  00E650  508A               	movf	3978,w,c	;volatile
 10823  00E652  1801               	xorwf	??_lcd_send_nibble,w,c
 10824  00E654  0B7F               	andlw	-129
 10825  00E656  1801               	xorwf	??_lcd_send_nibble,w,c
 10826  00E658  6E8A               	movwf	3978,c	;volatile
 10827                           
 10828                           ;unmc_lcd_216.c: 32: __nop();
 10829  00E65A  F000               	nop	
 10830                           
 10831                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10832  00E65C  848A               	bsf	3978,2,c	;volatile
 10833                           
 10834                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10835  00E65E  F000               	nop	
 10836  00E660  F000               	nop	
 10837                           
 10838                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10839  00E662  948A               	bcf	3978,2,c	;volatile
 10840  00E664  0012               	return		;funcret
 10841  00E666                     __end_of_lcd_send_nibble:
 10842                           	opt stack 0
 10843                           tosu	equ	0xFFF
 10844                           tosh	equ	0xFFE
 10845                           tosl	equ	0xFFD
 10846                           pclath	equ	0xFFA
 10847                           tblptru	equ	0xFF8
 10848                           tblptrh	equ	0xFF7
 10849                           tblptrl	equ	0xFF6
 10850                           tablat	equ	0xFF5
 10851                           prodh	equ	0xFF4
 10852                           prodl	equ	0xFF3
 10853                           indf0	equ	0xFEF
 10854                           postinc0	equ	0xFEE
 10855                           fsr0h	equ	0xFEA
 10856                           fsr0l	equ	0xFE9
 10857                           wreg	equ	0xFE8
 10858                           indf1	equ	0xFE7
 10859                           postinc1	equ	0xFE6
 10860                           postdec1	equ	0xFE5
 10861                           fsr1h	equ	0xFE2
 10862                           fsr1l	equ	0xFE1
 10863                           indf2	equ	0xFDF
 10864                           postinc2	equ	0xFDE
 10865                           postdec2	equ	0xFDD
 10866                           plusw2	equ	0xFDB
 10867                           fsr2h	equ	0xFDA
 10868                           fsr2l	equ	0xFD9
 10869                           status	equ	0xFD8
 10870                           
 10871 ;; *************** function _Delay100TCYx *****************
 10872 ;; Defined at:
 10873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;  unit            1    wreg     unsigned char 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  unit            1    0[COMRAM] unsigned char 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;		None               void
 10880 ;; Registers used:
 10881 ;;		wreg
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10891 ;;Total ram usage:        1 bytes
 10892 ;; Hardware stack levels used:    1
 10893 ;; This function calls:
 10894 ;;		Nothing
 10895 ;; This function is called by:
 10896 ;;		_lcd_send_byte
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           	psect	text75
 10901  00DC72                     __ptext75:
 10902                           	opt stack 0
 10903  00DC72                     _Delay100TCYx:
 10904                           	opt stack 25
 10905                           
 10906                           ;incstack = 0
 10907                           ;Delay100TCYx@unit stored from wreg
 10908  00DC72  6E01               	movwf	Delay100TCYx@unit,c
 10909  00DC74  0E21               	movlw	33
 10910  00DC76                     u3887:
 10911  00DC76  2EE8               	decfsz	wreg,f,c
 10912  00DC78  D7FE               	goto	u3887
 10913  00DC7A  F000               	nop	
 10914  00DC7C  2E01               	decfsz	Delay100TCYx@unit,f,c
 10915  00DC7E  D7FA               	goto	l3055
 10916  00DC80  0012               	return	
 10917  00DC82  0012               	return		;funcret
 10918  00DC84                     __end_of_Delay100TCYx:
 10919                           	opt stack 0
 10920                           tosu	equ	0xFFF
 10921                           tosh	equ	0xFFE
 10922                           tosl	equ	0xFFD
 10923                           pclath	equ	0xFFA
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           indf0	equ	0xFEF
 10931                           postinc0	equ	0xFEE
 10932                           fsr0h	equ	0xFEA
 10933                           fsr0l	equ	0xFE9
 10934                           wreg	equ	0xFE8
 10935                           indf1	equ	0xFE7
 10936                           postinc1	equ	0xFE6
 10937                           postdec1	equ	0xFE5
 10938                           fsr1h	equ	0xFE2
 10939                           fsr1l	equ	0xFE1
 10940                           indf2	equ	0xFDF
 10941                           postinc2	equ	0xFDE
 10942                           postdec2	equ	0xFDD
 10943                           plusw2	equ	0xFDB
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948 ;; *************** function _Write_RTC *****************
 10949 ;; Defined at:
 10950 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;		None
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;		None
 10955 ;; Return value:  Size  Location     Type
 10956 ;;		None               void
 10957 ;; Registers used:
 10958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10968 ;;Total ram usage:        0 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    2
 10971 ;; This function calls:
 10972 ;;		_RtccWrOn
 10973 ;;		_RtccWriteDate
 10974 ;;		_RtccWriteTime
 10975 ;;		___awdiv
 10976 ;; This function is called by:
 10977 ;;		_Setup
 10978 ;;		_actualiza_elemento
 10979 ;;		_actualizar_hora
 10980 ;;		_actualizar_minutos
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text76
 10985  00F6A4                     __ptext76:
 10986                           	opt stack 0
 10987  00F6A4                     _Write_RTC:
 10988                           	opt stack 23
 10989                           
 10990                           ;unmc_rtcc_02.c: 37: RtccWrOn();
 10991                           
 10992                           ;incstack = 0
 10993  00F6A4  EC30  F06E         	call	_RtccWrOn	;wreg free
 10994                           
 10995                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
 10996  00F6A8  80A3               	bsf	4003,0,c	;volatile
 10997                           
 10998                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
 10999  00F6AA  C0A0  F001         	movff	_segundo,___awdiv@dividend
 11000  00F6AE  C0A1  F002         	movff	_segundo+1,___awdiv@dividend+1
 11001  00F6B2  0E00               	movlw	0
 11002  00F6B4  6E04               	movwf	___awdiv@divisor+1,c
 11003  00F6B6  0E0A               	movlw	10
 11004  00F6B8  6E03               	movwf	___awdiv@divisor,c
 11005  00F6BA  EC72  F075         	call	___awdiv	;wreg free
 11006  00F6BE  5001               	movf	?___awdiv,w,c
 11007  00F6C0  6E5E               	movwf	_segundo_d,c
 11008                           
 11009                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
 11010  00F6C2  505E               	movf	_segundo_d,w,c
 11011  00F6C4  0D0A               	mullw	10
 11012  00F6C6  50F3               	movf	prodl,w,c
 11013  00F6C8  0800               	sublw	0
 11014  00F6CA  0100               	movlb	0	; () banked
 11015  00F6CC  25A0               	addwf	_segundo& (0+255),w,b
 11016  00F6CE  0100               	movlb	0	; () banked
 11017  00F6D0  6FF6               	movwf	_segundo_u& (0+255),b
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
 11021  00F6D2  505E               	movf	_segundo_d,w,c
 11022  00F6D4  0D10               	mullw	16
 11023  00F6D6  50F3               	movf	prodl,w,c
 11024  00F6D8  0100               	movlb	0	; () banked
 11025  00F6DA  25F6               	addwf	_segundo_u& (0+255),w,b
 11026  00F6DC  6E4F               	movwf	_RtccTime+1,c
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
 11030  00F6DE  C0FD  F001         	movff	_minuto,___awdiv@dividend
 11031  00F6E2  C0FE  F002         	movff	_minuto+1,___awdiv@dividend+1
 11032  00F6E6  0E00               	movlw	0
 11033  00F6E8  6E04               	movwf	___awdiv@divisor+1,c
 11034  00F6EA  0E0A               	movlw	10
 11035  00F6EC  6E03               	movwf	___awdiv@divisor,c
 11036  00F6EE  EC72  F075         	call	___awdiv	;wreg free
 11037  00F6F2  5001               	movf	?___awdiv,w,c
 11038  00F6F4  0100               	movlb	0	; () banked
 11039  00F6F6  6FF4               	movwf	_minuto_d& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
 11043  00F6F8  0100               	movlb	0	; () banked
 11044  00F6FA  51F4               	movf	_minuto_d& (0+255),w,b
 11045  00F6FC  0D0A               	mullw	10
 11046  00F6FE  50F3               	movf	prodl,w,c
 11047  00F700  0800               	sublw	0
 11048  00F702  0100               	movlb	0	; () banked
 11049  00F704  25FD               	addwf	_minuto& (0+255),w,b
 11050  00F706  0100               	movlb	0	; () banked
 11051  00F708  6FF5               	movwf	_minuto_u& (0+255),b
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
 11055  00F70A  0100               	movlb	0	; () banked
 11056  00F70C  51F4               	movf	_minuto_d& (0+255),w,b
 11057  00F70E  0D10               	mullw	16
 11058  00F710  50F3               	movf	prodl,w,c
 11059  00F712  0100               	movlb	0	; () banked
 11060  00F714  25F5               	addwf	_minuto_u& (0+255),w,b
 11061  00F716  6E50               	movwf	_RtccTime+2,c
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
 11065  00F718  C0FB  F001         	movff	_hora,___awdiv@dividend
 11066  00F71C  C0FC  F002         	movff	_hora+1,___awdiv@dividend+1
 11067  00F720  0E00               	movlw	0
 11068  00F722  6E04               	movwf	___awdiv@divisor+1,c
 11069  00F724  0E0A               	movlw	10
 11070  00F726  6E03               	movwf	___awdiv@divisor,c
 11071  00F728  EC72  F075         	call	___awdiv	;wreg free
 11072  00F72C  5001               	movf	?___awdiv,w,c
 11073  00F72E  0100               	movlb	0	; () banked
 11074  00F730  6FF0               	movwf	_hora_d& (0+255),b
 11075                           
 11076                           ; BSR set to: 0
 11077                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
 11078  00F732  0100               	movlb	0	; () banked
 11079  00F734  51F0               	movf	_hora_d& (0+255),w,b
 11080  00F736  0D0A               	mullw	10
 11081  00F738  50F3               	movf	prodl,w,c
 11082  00F73A  0800               	sublw	0
 11083  00F73C  0100               	movlb	0	; () banked
 11084  00F73E  25FB               	addwf	_hora& (0+255),w,b
 11085  00F740  0100               	movlb	0	; () banked
 11086  00F742  6FF1               	movwf	_hora_u& (0+255),b
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
 11090  00F744  0100               	movlb	0	; () banked
 11091  00F746  51F0               	movf	_hora_d& (0+255),w,b
 11092  00F748  0D10               	mullw	16
 11093  00F74A  50F3               	movf	prodl,w,c
 11094  00F74C  0100               	movlb	0	; () banked
 11095  00F74E  25F1               	addwf	_hora_u& (0+255),w,b
 11096  00F750  6E51               	movwf	_RtccTime+3,c
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
 11100  00F752  C05A  F001         	movff	_anio,___awdiv@dividend
 11101  00F756  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
 11102  00F75A  0E00               	movlw	0
 11103  00F75C  6E04               	movwf	___awdiv@divisor+1,c
 11104  00F75E  0E0A               	movlw	10
 11105  00F760  6E03               	movwf	___awdiv@divisor,c
 11106  00F762  EC72  F075         	call	___awdiv	;wreg free
 11107  00F766  5001               	movf	?___awdiv,w,c
 11108  00F768  0100               	movlb	0	; () banked
 11109  00F76A  6FEB               	movwf	_anio_d& (0+255),b
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
 11113  00F76C  0100               	movlb	0	; () banked
 11114  00F76E  51EB               	movf	_anio_d& (0+255),w,b
 11115  00F770  0D0A               	mullw	10
 11116  00F772  50F3               	movf	prodl,w,c
 11117  00F774  0800               	sublw	0
 11118  00F776  245A               	addwf	_anio,w,c
 11119  00F778  0100               	movlb	0	; () banked
 11120  00F77A  6FEC               	movwf	_anio_u& (0+255),b
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
 11124  00F77C  0100               	movlb	0	; () banked
 11125  00F77E  51EB               	movf	_anio_d& (0+255),w,b
 11126  00F780  0D10               	mullw	16
 11127  00F782  50F3               	movf	prodl,w,c
 11128  00F784  0100               	movlb	0	; () banked
 11129  00F786  25EC               	addwf	_anio_u& (0+255),w,b
 11130  00F788  6E4D               	movwf	_RtccDate+3,c
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
 11134  00F78A  C05C  F001         	movff	_mes,___awdiv@dividend
 11135  00F78E  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
 11136  00F792  0E00               	movlw	0
 11137  00F794  6E04               	movwf	___awdiv@divisor+1,c
 11138  00F796  0E0A               	movlw	10
 11139  00F798  6E03               	movwf	___awdiv@divisor,c
 11140  00F79A  EC72  F075         	call	___awdiv	;wreg free
 11141  00F79E  5001               	movf	?___awdiv,w,c
 11142  00F7A0  0100               	movlb	0	; () banked
 11143  00F7A2  6FF2               	movwf	_mes_d& (0+255),b
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
 11147  00F7A4  0100               	movlb	0	; () banked
 11148  00F7A6  51F2               	movf	_mes_d& (0+255),w,b
 11149  00F7A8  0D0A               	mullw	10
 11150  00F7AA  50F3               	movf	prodl,w,c
 11151  00F7AC  0800               	sublw	0
 11152  00F7AE  245C               	addwf	_mes,w,c
 11153  00F7B0  0100               	movlb	0	; () banked
 11154  00F7B2  6FF3               	movwf	_mes_u& (0+255),b
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
 11158  00F7B4  0100               	movlb	0	; () banked
 11159  00F7B6  51F2               	movf	_mes_d& (0+255),w,b
 11160  00F7B8  0D10               	mullw	16
 11161  00F7BA  50F3               	movf	prodl,w,c
 11162  00F7BC  0100               	movlb	0	; () banked
 11163  00F7BE  25F3               	addwf	_mes_u& (0+255),w,b
 11164  00F7C0  6E4C               	movwf	_RtccDate+2,c
 11165                           
 11166                           ; BSR set to: 0
 11167                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
 11168  00F7C2  C0F9  F001         	movff	_dia,___awdiv@dividend
 11169  00F7C6  C0FA  F002         	movff	_dia+1,___awdiv@dividend+1
 11170  00F7CA  0E00               	movlw	0
 11171  00F7CC  6E04               	movwf	___awdiv@divisor+1,c
 11172  00F7CE  0E0A               	movlw	10
 11173  00F7D0  6E03               	movwf	___awdiv@divisor,c
 11174  00F7D2  EC72  F075         	call	___awdiv	;wreg free
 11175  00F7D6  5001               	movf	?___awdiv,w,c
 11176  00F7D8  0100               	movlb	0	; () banked
 11177  00F7DA  6FEE               	movwf	_fecha_d& (0+255),b
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
 11181  00F7DC  0100               	movlb	0	; () banked
 11182  00F7DE  51EE               	movf	_fecha_d& (0+255),w,b
 11183  00F7E0  0D0A               	mullw	10
 11184  00F7E2  50F3               	movf	prodl,w,c
 11185  00F7E4  0800               	sublw	0
 11186  00F7E6  0100               	movlb	0	; () banked
 11187  00F7E8  25F9               	addwf	_dia& (0+255),w,b
 11188  00F7EA  0100               	movlb	0	; () banked
 11189  00F7EC  6FEF               	movwf	_fecha_u& (0+255),b
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
 11193  00F7EE  0100               	movlb	0	; () banked
 11194  00F7F0  51EE               	movf	_fecha_d& (0+255),w,b
 11195  00F7F2  0D10               	mullw	16
 11196  00F7F4  50F3               	movf	prodl,w,c
 11197  00F7F6  0100               	movlb	0	; () banked
 11198  00F7F8  25EF               	addwf	_fecha_u& (0+255),w,b
 11199  00F7FA  6E4B               	movwf	_RtccDate+1,c
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
 11203  00F7FC  C0F7  F0ED         	movff	_diasem,_dia_semana
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
 11207  00F800  C0F7  F04A         	movff	_diasem,_RtccDate
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
 11211  00F804  0E4E               	movlw	low _RtccTime
 11212  00F806  6E01               	movwf	RtccWriteTime@pTm,c
 11213  00F808  0E00               	movlw	high _RtccTime
 11214  00F80A  6E02               	movwf	RtccWriteTime@pTm+1,c
 11215  00F80C  0E01               	movlw	1
 11216  00F80E  6E03               	movwf	RtccWriteTime@di,c
 11217  00F810  ECE1  F078         	call	_RtccWriteTime	;wreg free
 11218                           
 11219                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
 11220  00F814  0E4A               	movlw	low _RtccDate
 11221  00F816  6E01               	movwf	RtccWriteDate@pDt,c
 11222  00F818  0E00               	movlw	high _RtccDate
 11223  00F81A  6E02               	movwf	RtccWriteDate@pDt+1,c
 11224  00F81C  0E01               	movlw	1
 11225  00F81E  6E03               	movwf	RtccWriteDate@di,c
 11226  00F820  ECF8  F079         	call	_RtccWriteDate	;wreg free
 11227                           
 11228                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
 11229  00F824  010F               	movlb	15	; () banked
 11230  00F826  8F3F               	bsf	63,7,b	;volatile
 11231                           
 11232                           ; BSR set to: 15
 11233  00F828  0012               	return		;funcret
 11234  00F82A                     __end_of_Write_RTC:
 11235                           	opt stack 0
 11236                           tosu	equ	0xFFF
 11237                           tosh	equ	0xFFE
 11238                           tosl	equ	0xFFD
 11239                           pclath	equ	0xFFA
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           indf0	equ	0xFEF
 11247                           postinc0	equ	0xFEE
 11248                           fsr0h	equ	0xFEA
 11249                           fsr0l	equ	0xFE9
 11250                           wreg	equ	0xFE8
 11251                           indf1	equ	0xFE7
 11252                           postinc1	equ	0xFE6
 11253                           postdec1	equ	0xFE5
 11254                           fsr1h	equ	0xFE2
 11255                           fsr1l	equ	0xFE1
 11256                           indf2	equ	0xFDF
 11257                           postinc2	equ	0xFDE
 11258                           postdec2	equ	0xFDD
 11259                           plusw2	equ	0xFDB
 11260                           fsr2h	equ	0xFDA
 11261                           fsr2l	equ	0xFD9
 11262                           status	equ	0xFD8
 11263                           
 11264 ;; *************** function ___awdiv *****************
 11265 ;; Defined at:
 11266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;  dividend        2    0[COMRAM] int 
 11269 ;;  divisor         2    2[COMRAM] int 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  quotient        2    6[COMRAM] int 
 11272 ;;  sign            1    5[COMRAM] unsigned char 
 11273 ;;  counter         1    4[COMRAM] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  2    0[COMRAM] int 
 11276 ;; Registers used:
 11277 ;;		wreg, status,2, status,0
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11284 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11286 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11287 ;;Total ram usage:        8 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; This function calls:
 11290 ;;		Nothing
 11291 ;; This function is called by:
 11292 ;;		_Write_RTC
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296                           	psect	text77
 11297  00EAE4                     __ptext77:
 11298                           	opt stack 0
 11299  00EAE4                     ___awdiv:
 11300                           	opt stack 24
 11301                           
 11302                           ; BSR set to: 15
 11303                           ;incstack = 0
 11304  00EAE4  0E00               	movlw	0
 11305  00EAE6  6E06               	movwf	___awdiv@sign,c
 11306  00EAE8  AE04               	btfss	___awdiv@divisor+1,7,c
 11307  00EAEA  D007               	goto	l3239
 11308  00EAEC  6C03               	negf	___awdiv@divisor,c
 11309  00EAEE  1E04               	comf	___awdiv@divisor+1,f,c
 11310  00EAF0  B0D8               	btfsc	status,0,c
 11311  00EAF2  2A04               	incf	___awdiv@divisor+1,f,c
 11312  00EAF4  0E01               	movlw	1
 11313  00EAF6  6E06               	movwf	___awdiv@sign,c
 11314  00EAF8  D000               	goto	l3239
 11315  00EAFA                     l3239:
 11316  00EAFA  AE02               	btfss	___awdiv@dividend+1,7,c
 11317  00EAFC  D007               	goto	l3245
 11318  00EAFE  6C01               	negf	___awdiv@dividend,c
 11319  00EB00  1E02               	comf	___awdiv@dividend+1,f,c
 11320  00EB02  B0D8               	btfsc	status,0,c
 11321  00EB04  2A02               	incf	___awdiv@dividend+1,f,c
 11322  00EB06  0E01               	movlw	1
 11323  00EB08  1A06               	xorwf	___awdiv@sign,f,c
 11324  00EB0A  D000               	goto	l3245
 11325  00EB0C                     l3245:
 11326  00EB0C  0E00               	movlw	0
 11327  00EB0E  6E08               	movwf	___awdiv@quotient+1,c
 11328  00EB10  0E00               	movlw	0
 11329  00EB12  6E07               	movwf	___awdiv@quotient,c
 11330  00EB14  5003               	movf	___awdiv@divisor,w,c
 11331  00EB16  1004               	iorwf	___awdiv@divisor+1,w,c
 11332  00EB18  B4D8               	btfsc	status,2,c
 11333  00EB1A  D021               	goto	l3267
 11334  00EB1C  0E01               	movlw	1
 11335  00EB1E  6E05               	movwf	___awdiv@counter,c
 11336  00EB20  D005               	goto	l3253
 11337  00EB22                     l3251:
 11338  00EB22  90D8               	bcf	status,0,c
 11339  00EB24  3603               	rlcf	___awdiv@divisor,f,c
 11340  00EB26  3604               	rlcf	___awdiv@divisor+1,f,c
 11341  00EB28  2A05               	incf	___awdiv@counter,f,c
 11342  00EB2A  D000               	goto	l3253
 11343  00EB2C                     l3253:
 11344  00EB2C  BE04               	btfsc	___awdiv@divisor+1,7,c
 11345  00EB2E  D002               	goto	l3255
 11346  00EB30  D7F8               	goto	l3251
 11347  00EB32  D000               	goto	l3255
 11348  00EB34                     l3255:
 11349  00EB34  90D8               	bcf	status,0,c
 11350  00EB36  3607               	rlcf	___awdiv@quotient,f,c
 11351  00EB38  3608               	rlcf	___awdiv@quotient+1,f,c
 11352  00EB3A  5003               	movf	___awdiv@divisor,w,c
 11353  00EB3C  5C01               	subwf	___awdiv@dividend,w,c
 11354  00EB3E  5004               	movf	___awdiv@divisor+1,w,c
 11355  00EB40  5802               	subwfb	___awdiv@dividend+1,w,c
 11356  00EB42  A0D8               	btfss	status,0,c
 11357  00EB44  D006               	goto	l3263
 11358  00EB46  5003               	movf	___awdiv@divisor,w,c
 11359  00EB48  5E01               	subwf	___awdiv@dividend,f,c
 11360  00EB4A  5004               	movf	___awdiv@divisor+1,w,c
 11361  00EB4C  5A02               	subwfb	___awdiv@dividend+1,f,c
 11362  00EB4E  8007               	bsf	___awdiv@quotient,0,c
 11363  00EB50  D000               	goto	l3263
 11364  00EB52                     l3263:
 11365  00EB52  90D8               	bcf	status,0,c
 11366  00EB54  3204               	rrcf	___awdiv@divisor+1,f,c
 11367  00EB56  3203               	rrcf	___awdiv@divisor,f,c
 11368  00EB58  2E05               	decfsz	___awdiv@counter,f,c
 11369  00EB5A  D7EC               	goto	l3255
 11370  00EB5C  D000               	goto	l3267
 11371  00EB5E                     l3267:
 11372  00EB5E  5006               	movf	___awdiv@sign,w,c
 11373  00EB60  B4D8               	btfsc	status,2,c
 11374  00EB62  D005               	goto	l3271
 11375  00EB64  6C07               	negf	___awdiv@quotient,c
 11376  00EB66  1E08               	comf	___awdiv@quotient+1,f,c
 11377  00EB68  B0D8               	btfsc	status,0,c
 11378  00EB6A  2A08               	incf	___awdiv@quotient+1,f,c
 11379  00EB6C  D000               	goto	l3271
 11380  00EB6E                     l3271:
 11381  00EB6E  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11382  00EB72  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11383  00EB76  0012               	return	
 11384  00EB78  0012               	return		;funcret
 11385  00EB7A                     __end_of___awdiv:
 11386                           	opt stack 0
 11387                           tosu	equ	0xFFF
 11388                           tosh	equ	0xFFE
 11389                           tosl	equ	0xFFD
 11390                           pclath	equ	0xFFA
 11391                           tblptru	equ	0xFF8
 11392                           tblptrh	equ	0xFF7
 11393                           tblptrl	equ	0xFF6
 11394                           tablat	equ	0xFF5
 11395                           prodh	equ	0xFF4
 11396                           prodl	equ	0xFF3
 11397                           indf0	equ	0xFEF
 11398                           postinc0	equ	0xFEE
 11399                           fsr0h	equ	0xFEA
 11400                           fsr0l	equ	0xFE9
 11401                           wreg	equ	0xFE8
 11402                           indf1	equ	0xFE7
 11403                           postinc1	equ	0xFE6
 11404                           postdec1	equ	0xFE5
 11405                           fsr1h	equ	0xFE2
 11406                           fsr1l	equ	0xFE1
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           plusw2	equ	0xFDB
 11411                           fsr2h	equ	0xFDA
 11412                           fsr2l	equ	0xFD9
 11413                           status	equ	0xFD8
 11414                           
 11415 ;; *************** function _RtccWriteTime *****************
 11416 ;; Defined at:
 11417 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;  pTm             2    0[COMRAM] PTR const struct .
 11420 ;;		 -> RtccTime(4), 
 11421 ;;  di              1    2[COMRAM] enum E7121
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  tempHourWDay    2    9[COMRAM] struct .
 11424 ;;  tempMinSec      2    7[COMRAM] struct .
 11425 ;;  wasWrEn         1    6[COMRAM] enum E7121
 11426 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11427 ;;  wasOn           1    4[COMRAM] enum E7121
 11428 ;; Return value:  Size  Location     Type
 11429 ;;                  1    wreg      enum E7121
 11430 ;; Registers used:
 11431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11437 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11438 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11440 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11441 ;;Total ram usage:       11 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    1
 11444 ;; This function calls:
 11445 ;;		_RtccWrOn
 11446 ;; This function is called by:
 11447 ;;		_Write_RTC
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           	psect	text78
 11452  00F1C2                     __ptext78:
 11453                           	opt stack 0
 11454  00F1C2                     _RtccWriteTime:
 11455                           	opt stack 23
 11456                           
 11457                           ;incstack = 0
 11458  00F1C2  0E00               	movlw	0
 11459  00F1C4  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11460  00F1C6  EE20 F002          	lfsr	2,2
 11461  00F1CA  5001               	movf	RtccWriteTime@pTm,w,c
 11462  00F1CC  26D9               	addwf	fsr2l,f,c
 11463  00F1CE  5002               	movf	RtccWriteTime@pTm+1,w,c
 11464  00F1D0  22DA               	addwfc	fsr2h,f,c
 11465  00F1D2  0E5A               	movlw	90
 11466  00F1D4  60DF               	cpfslt	indf2,c
 11467  00F1D6  0012               	return	
 11468  00F1D8  EE20 F001          	lfsr	2,1
 11469  00F1DC  5001               	movf	RtccWriteTime@pTm,w,c
 11470  00F1DE  26D9               	addwf	fsr2l,f,c
 11471  00F1E0  5002               	movf	RtccWriteTime@pTm+1,w,c
 11472  00F1E2  22DA               	addwfc	fsr2h,f,c
 11473  00F1E4  0E5A               	movlw	90
 11474  00F1E6  60DF               	cpfslt	indf2,c
 11475  00F1E8  0012               	return	
 11476  00F1EA  EE20 F003          	lfsr	2,3
 11477  00F1EE  5001               	movf	RtccWriteTime@pTm,w,c
 11478  00F1F0  26D9               	addwf	fsr2l,f,c
 11479  00F1F2  5002               	movf	RtccWriteTime@pTm+1,w,c
 11480  00F1F4  22DA               	addwfc	fsr2h,f,c
 11481  00F1F6  0E24               	movlw	36
 11482  00F1F8  64DF               	cpfsgt	indf2,c
 11483  00F1FA  D002               	goto	l3103
 11484  00F1FC  0012               	return	
 11485                           
 11486                           ;	Return value of _RtccWriteTime is never used
 11487  00F1FE  0012               	return	
 11488  00F200                     l3103:
 11489  00F200  EE20 F002          	lfsr	2,2
 11490  00F204  5001               	movf	RtccWriteTime@pTm,w,c
 11491  00F206  26D9               	addwf	fsr2l,f,c
 11492  00F208  5002               	movf	RtccWriteTime@pTm+1,w,c
 11493  00F20A  22DA               	addwfc	fsr2h,f,c
 11494  00F20C  50DF               	movf	indf2,w,c
 11495  00F20E  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 11496  00F210  EE20 F001          	lfsr	2,1
 11497  00F214  5001               	movf	RtccWriteTime@pTm,w,c
 11498  00F216  26D9               	addwf	fsr2l,f,c
 11499  00F218  5002               	movf	RtccWriteTime@pTm+1,w,c
 11500  00F21A  22DA               	addwfc	fsr2h,f,c
 11501  00F21C  50DF               	movf	indf2,w,c
 11502  00F21E  6E08               	movwf	RtccWriteTime@tempMinSec,c
 11503  00F220  5003               	movf	RtccWriteTime@di,w,c
 11504  00F222  B4D8               	btfsc	status,2,c
 11505  00F224  D002               	goto	l3109
 11506  00F226  9CF2               	bcf	intcon,6,c	;volatile
 11507  00F228  D000               	goto	l3109
 11508  00F22A                     l3109:
 11509  00F22A  0E00               	movlw	0
 11510  00F22C  BB3F               	btfsc	63,5,b	;volatile
 11511  00F22E  0E01               	movlw	1
 11512  00F230  6E07               	movwf	RtccWriteTime@wasWrEn,c
 11513  00F232  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11514  00F234  A4D8               	btfss	status,2,c
 11515  00F236  D003               	goto	l3113
 11516  00F238  EC30  F06E         	call	_RtccWrOn	;wreg free
 11517  00F23C  D000               	goto	l3113
 11518  00F23E                     l3113:
 11519  00F23E  0E00               	movlw	0
 11520  00F240  BF3F               	btfsc	63,7,b	;volatile
 11521  00F242  0E01               	movlw	1
 11522  00F244  6E05               	movwf	RtccWriteTime@wasOn,c
 11523  00F246  5005               	movf	RtccWriteTime@wasOn,w,c
 11524  00F248  B4D8               	btfsc	status,2,c
 11525  00F24A  D007               	goto	l3119
 11526  00F24C  0E00               	movlw	0
 11527  00F24E  BE91               	btfsc	3985,7,c	;volatile
 11528  00F250  0E01               	movlw	1
 11529  00F252  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11530  00F254  010F               	movlb	15	; () banked
 11531  00F256  9F3F               	bcf	63,7,b	;volatile
 11532  00F258  D000               	goto	l3119
 11533  00F25A                     l3119:
 11534  00F25A  0EFC               	movlw	252
 11535  00F25C  010F               	movlb	15	; () banked
 11536  00F25E  173F               	andwf	63,f,b	;volatile
 11537  00F260  010F               	movlb	15	; () banked
 11538  00F262  813F               	bsf	63,0,b	;volatile
 11539                           
 11540                           ; BSR set to: 15
 11541  00F264  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 11542                           
 11543                           ; BSR set to: 15
 11544  00F268  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 11545                           
 11546                           ; BSR set to: 15
 11547  00F26C  EE20 F003          	lfsr	2,3
 11548  00F270  5001               	movf	RtccWriteTime@pTm,w,c
 11549  00F272  26D9               	addwf	fsr2l,f,c
 11550  00F274  5002               	movf	RtccWriteTime@pTm+1,w,c
 11551  00F276  22DA               	addwfc	fsr2h,f,c
 11552  00F278  50DF               	movf	indf2,w,c
 11553  00F27A  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 11554                           
 11555                           ; BSR set to: 15
 11556  00F27C  0EFC               	movlw	252
 11557  00F27E  010F               	movlb	15	; () banked
 11558  00F280  173F               	andwf	63,f,b	;volatile
 11559                           
 11560                           ; BSR set to: 15
 11561  00F282  010F               	movlb	15	; () banked
 11562  00F284  813F               	bsf	63,0,b	;volatile
 11563                           
 11564                           ; BSR set to: 15
 11565  00F286  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 11566                           
 11567                           ; BSR set to: 15
 11568  00F28A  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 11569                           
 11570                           ; BSR set to: 15
 11571  00F28E  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 11572                           
 11573                           ; BSR set to: 15
 11574  00F292  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 11575                           
 11576                           ; BSR set to: 15
 11577  00F296  5005               	movf	RtccWriteTime@wasOn,w,c
 11578  00F298  B4D8               	btfsc	status,2,c
 11579  00F29A  D00D               	goto	l3151
 11580                           
 11581                           ; BSR set to: 15
 11582  00F29C  010F               	movlb	15	; () banked
 11583  00F29E  8F3F               	bsf	63,7,b	;volatile
 11584                           
 11585                           ; BSR set to: 15
 11586  00F2A0  5006               	movf	RtccWriteTime@wasAlrm,w,c
 11587  00F2A2  B4D8               	btfsc	status,2,c
 11588  00F2A4  D002               	goto	l3147
 11589                           
 11590                           ; BSR set to: 15
 11591  00F2A6  8E91               	bsf	3985,7,c	;volatile
 11592  00F2A8  D000               	goto	l3147
 11593  00F2AA                     l3147:
 11594                           
 11595                           ; BSR set to: 15
 11596  00F2AA  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11597  00F2AC  B4D8               	btfsc	status,2,c
 11598  00F2AE  D009               	goto	l3155
 11599                           
 11600                           ; BSR set to: 15
 11601  00F2B0  EC30  F06E         	call	_RtccWrOn	;wreg free
 11602  00F2B4  D006               	goto	l3155
 11603  00F2B6                     l3151:
 11604  00F2B6  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11605  00F2B8  A4D8               	btfss	status,2,c
 11606  00F2BA  D003               	goto	l3155
 11607  00F2BC  010F               	movlb	15	; () banked
 11608  00F2BE  9B3F               	bcf	63,5,b	;volatile
 11609                           
 11610                           ; BSR set to: 15
 11611  00F2C0  D000               	goto	l3155
 11612  00F2C2                     l3155:
 11613  00F2C2  5003               	movf	RtccWriteTime@di,w,c
 11614  00F2C4  B4D8               	btfsc	status,2,c
 11615  00F2C6  0012               	return	
 11616  00F2C8  8CF2               	bsf	intcon,6,c	;volatile
 11617  00F2CA  0012               	return	
 11618                           
 11619                           ;	Return value of _RtccWriteTime is never used
 11620  00F2CC  0012               	return		;funcret
 11621  00F2CE                     __end_of_RtccWriteTime:
 11622                           	opt stack 0
 11623                           tosu	equ	0xFFF
 11624                           tosh	equ	0xFFE
 11625                           tosl	equ	0xFFD
 11626                           pclath	equ	0xFFA
 11627                           tblptru	equ	0xFF8
 11628                           tblptrh	equ	0xFF7
 11629                           tblptrl	equ	0xFF6
 11630                           tablat	equ	0xFF5
 11631                           prodh	equ	0xFF4
 11632                           prodl	equ	0xFF3
 11633                           intcon	equ	0xFF2
 11634                           indf0	equ	0xFEF
 11635                           postinc0	equ	0xFEE
 11636                           fsr0h	equ	0xFEA
 11637                           fsr0l	equ	0xFE9
 11638                           wreg	equ	0xFE8
 11639                           indf1	equ	0xFE7
 11640                           postinc1	equ	0xFE6
 11641                           postdec1	equ	0xFE5
 11642                           fsr1h	equ	0xFE2
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           plusw2	equ	0xFDB
 11648                           fsr2h	equ	0xFDA
 11649                           fsr2l	equ	0xFD9
 11650                           status	equ	0xFD8
 11651                           
 11652 ;; *************** function _RtccWriteDate *****************
 11653 ;; Defined at:
 11654 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  pDt             2    0[COMRAM] PTR const struct .
 11657 ;;		 -> RtccDate(4), 
 11658 ;;  di              1    2[COMRAM] enum E7121
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  tempHourWDay    2   11[COMRAM] struct .
 11661 ;;  tempDayMonth    2    9[COMRAM] struct .
 11662 ;;  tempYear        2    6[COMRAM] struct .
 11663 ;;  wasWrEn         1    8[COMRAM] enum E7121
 11664 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11665 ;;  wasOn           1    4[COMRAM] enum E7121
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      enum E7121
 11668 ;; Registers used:
 11669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11675 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11676 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11678 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11679 ;;Total ram usage:       13 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    1
 11682 ;; This function calls:
 11683 ;;		_RtccWrOn
 11684 ;; This function is called by:
 11685 ;;		_Write_RTC
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text79
 11690  00F3F0                     __ptext79:
 11691                           	opt stack 0
 11692  00F3F0                     _RtccWriteDate:
 11693                           	opt stack 23
 11694                           
 11695                           ;incstack = 0
 11696  00F3F0  0E00               	movlw	0
 11697  00F3F2  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11698  00F3F4  EE20 F002          	lfsr	2,2
 11699  00F3F8  5001               	movf	RtccWriteDate@pDt,w,c
 11700  00F3FA  26D9               	addwf	fsr2l,f,c
 11701  00F3FC  5002               	movf	RtccWriteDate@pDt+1,w,c
 11702  00F3FE  22DA               	addwfc	fsr2h,f,c
 11703  00F400  0E13               	movlw	19
 11704  00F402  60DF               	cpfslt	indf2,c
 11705  00F404  0012               	return	
 11706  00F406  EE20 F002          	lfsr	2,2
 11707  00F40A  5001               	movf	RtccWriteDate@pDt,w,c
 11708  00F40C  26D9               	addwf	fsr2l,f,c
 11709  00F40E  5002               	movf	RtccWriteDate@pDt+1,w,c
 11710  00F410  22DA               	addwfc	fsr2h,f,c
 11711  00F412  50DF               	movf	indf2,w,c
 11712  00F414  B4D8               	btfsc	status,2,c
 11713  00F416  0012               	return	
 11714  00F418  EE20 F001          	lfsr	2,1
 11715  00F41C  5001               	movf	RtccWriteDate@pDt,w,c
 11716  00F41E  26D9               	addwf	fsr2l,f,c
 11717  00F420  5002               	movf	RtccWriteDate@pDt+1,w,c
 11718  00F422  22DA               	addwfc	fsr2h,f,c
 11719  00F424  0E32               	movlw	50
 11720  00F426  60DF               	cpfslt	indf2,c
 11721  00F428  0012               	return	
 11722  00F42A  EE20 F001          	lfsr	2,1
 11723  00F42E  5001               	movf	RtccWriteDate@pDt,w,c
 11724  00F430  26D9               	addwf	fsr2l,f,c
 11725  00F432  5002               	movf	RtccWriteDate@pDt+1,w,c
 11726  00F434  22DA               	addwfc	fsr2h,f,c
 11727  00F436  50DF               	movf	indf2,w,c
 11728  00F438  B4D8               	btfsc	status,2,c
 11729  00F43A  0012               	return	
 11730  00F43C  EE20 F003          	lfsr	2,3
 11731  00F440  5001               	movf	RtccWriteDate@pDt,w,c
 11732  00F442  26D9               	addwf	fsr2l,f,c
 11733  00F444  5002               	movf	RtccWriteDate@pDt+1,w,c
 11734  00F446  22DA               	addwfc	fsr2h,f,c
 11735  00F448  0E99               	movlw	153
 11736  00F44A  64DF               	cpfsgt	indf2,c
 11737  00F44C  D002               	goto	l3171
 11738  00F44E  0012               	return	
 11739                           
 11740                           ;	Return value of _RtccWriteDate is never used
 11741  00F450  0012               	return	
 11742  00F452                     l3171:
 11743  00F452  EE20 F003          	lfsr	2,3
 11744  00F456  5001               	movf	RtccWriteDate@pDt,w,c
 11745  00F458  26D9               	addwf	fsr2l,f,c
 11746  00F45A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11747  00F45C  22DA               	addwfc	fsr2h,f,c
 11748  00F45E  50DF               	movf	indf2,w,c
 11749  00F460  6E07               	movwf	RtccWriteDate@tempYear,c
 11750  00F462  EE20 F001          	lfsr	2,1
 11751  00F466  5001               	movf	RtccWriteDate@pDt,w,c
 11752  00F468  26D9               	addwf	fsr2l,f,c
 11753  00F46A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11754  00F46C  22DA               	addwfc	fsr2h,f,c
 11755  00F46E  50DF               	movf	indf2,w,c
 11756  00F470  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11757  00F472  EE20 F002          	lfsr	2,2
 11758  00F476  5001               	movf	RtccWriteDate@pDt,w,c
 11759  00F478  26D9               	addwf	fsr2l,f,c
 11760  00F47A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11761  00F47C  22DA               	addwfc	fsr2h,f,c
 11762  00F47E  50DF               	movf	indf2,w,c
 11763  00F480  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11764  00F482  5003               	movf	RtccWriteDate@di,w,c
 11765  00F484  B4D8               	btfsc	status,2,c
 11766  00F486  D002               	goto	l3177
 11767  00F488  9CF2               	bcf	intcon,6,c	;volatile
 11768  00F48A  D000               	goto	l3177
 11769  00F48C                     l3177:
 11770  00F48C  0E00               	movlw	0
 11771  00F48E  BB3F               	btfsc	63,5,b	;volatile
 11772  00F490  0E01               	movlw	1
 11773  00F492  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11774  00F494  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11775  00F496  A4D8               	btfss	status,2,c
 11776  00F498  D003               	goto	l3181
 11777  00F49A  EC30  F06E         	call	_RtccWrOn	;wreg free
 11778  00F49E  D000               	goto	l3181
 11779  00F4A0                     l3181:
 11780  00F4A0  0E00               	movlw	0
 11781  00F4A2  BF3F               	btfsc	63,7,b	;volatile
 11782  00F4A4  0E01               	movlw	1
 11783  00F4A6  6E05               	movwf	RtccWriteDate@wasOn,c
 11784  00F4A8  5005               	movf	RtccWriteDate@wasOn,w,c
 11785  00F4AA  B4D8               	btfsc	status,2,c
 11786  00F4AC  D007               	goto	l3187
 11787  00F4AE  0E00               	movlw	0
 11788  00F4B0  BE91               	btfsc	3985,7,c	;volatile
 11789  00F4B2  0E01               	movlw	1
 11790  00F4B4  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11791  00F4B6  010F               	movlb	15	; () banked
 11792  00F4B8  9F3F               	bcf	63,7,b	;volatile
 11793  00F4BA  D000               	goto	l3187
 11794  00F4BC                     l3187:
 11795  00F4BC  0EFC               	movlw	252
 11796  00F4BE  010F               	movlb	15	; () banked
 11797  00F4C0  173F               	andwf	63,f,b	;volatile
 11798  00F4C2  010F               	movlb	15	; () banked
 11799  00F4C4  813F               	bsf	63,0,b	;volatile
 11800                           
 11801                           ; BSR set to: 15
 11802  00F4C6  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11803                           
 11804                           ; BSR set to: 15
 11805  00F4CA  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11806                           
 11807                           ; BSR set to: 15
 11808  00F4CE  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11809  00F4D2  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11810  00F4D6  50DF               	movf	indf2,w,c
 11811  00F4D8  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11812                           
 11813                           ; BSR set to: 15
 11814  00F4DA  0EFC               	movlw	252
 11815  00F4DC  010F               	movlb	15	; () banked
 11816  00F4DE  173F               	andwf	63,f,b	;volatile
 11817                           
 11818                           ; BSR set to: 15
 11819  00F4E0  0E03               	movlw	3
 11820  00F4E2  010F               	movlb	15	; () banked
 11821  00F4E4  133F               	iorwf	63,f,b	;volatile
 11822                           
 11823                           ; BSR set to: 15
 11824  00F4E6  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11825                           
 11826                           ; BSR set to: 15
 11827  00F4EA  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11828                           
 11829                           ; BSR set to: 15
 11830  00F4EE  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11831                           
 11832                           ; BSR set to: 15
 11833  00F4F2  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11834                           
 11835                           ; BSR set to: 15
 11836  00F4F6  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11837                           
 11838                           ; BSR set to: 15
 11839  00F4FA  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11840                           
 11841                           ; BSR set to: 15
 11842  00F4FE  5005               	movf	RtccWriteDate@wasOn,w,c
 11843  00F500  B4D8               	btfsc	status,2,c
 11844  00F502  D00D               	goto	l3223
 11845                           
 11846                           ; BSR set to: 15
 11847  00F504  010F               	movlb	15	; () banked
 11848  00F506  8F3F               	bsf	63,7,b	;volatile
 11849                           
 11850                           ; BSR set to: 15
 11851  00F508  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11852  00F50A  B4D8               	btfsc	status,2,c
 11853  00F50C  D002               	goto	l3219
 11854                           
 11855                           ; BSR set to: 15
 11856  00F50E  8E91               	bsf	3985,7,c	;volatile
 11857  00F510  D000               	goto	l3219
 11858  00F512                     l3219:
 11859                           
 11860                           ; BSR set to: 15
 11861  00F512  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11862  00F514  B4D8               	btfsc	status,2,c
 11863  00F516  D009               	goto	l3227
 11864                           
 11865                           ; BSR set to: 15
 11866  00F518  EC30  F06E         	call	_RtccWrOn	;wreg free
 11867  00F51C  D006               	goto	l3227
 11868  00F51E                     l3223:
 11869  00F51E  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11870  00F520  A4D8               	btfss	status,2,c
 11871  00F522  D003               	goto	l3227
 11872  00F524  010F               	movlb	15	; () banked
 11873  00F526  9B3F               	bcf	63,5,b	;volatile
 11874                           
 11875                           ; BSR set to: 15
 11876  00F528  D000               	goto	l3227
 11877  00F52A                     l3227:
 11878  00F52A  5003               	movf	RtccWriteDate@di,w,c
 11879  00F52C  B4D8               	btfsc	status,2,c
 11880  00F52E  0012               	return	
 11881  00F530  9CF2               	bcf	intcon,6,c	;volatile
 11882  00F532  0012               	return	
 11883                           
 11884                           ;	Return value of _RtccWriteDate is never used
 11885  00F534  0012               	return		;funcret
 11886  00F536                     __end_of_RtccWriteDate:
 11887                           	opt stack 0
 11888                           tosu	equ	0xFFF
 11889                           tosh	equ	0xFFE
 11890                           tosl	equ	0xFFD
 11891                           pclath	equ	0xFFA
 11892                           tblptru	equ	0xFF8
 11893                           tblptrh	equ	0xFF7
 11894                           tblptrl	equ	0xFF6
 11895                           tablat	equ	0xFF5
 11896                           prodh	equ	0xFF4
 11897                           prodl	equ	0xFF3
 11898                           intcon	equ	0xFF2
 11899                           indf0	equ	0xFEF
 11900                           postinc0	equ	0xFEE
 11901                           fsr0h	equ	0xFEA
 11902                           fsr0l	equ	0xFE9
 11903                           wreg	equ	0xFE8
 11904                           indf1	equ	0xFE7
 11905                           postinc1	equ	0xFE6
 11906                           postdec1	equ	0xFE5
 11907                           fsr1h	equ	0xFE2
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           plusw2	equ	0xFDB
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _RtccWrOn *****************
 11918 ;; Defined at:
 11919 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  data            2    0        unsigned int 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, status,2
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11937 ;;Total ram usage:        0 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; This function calls:
 11940 ;;		Nothing
 11941 ;; This function is called by:
 11942 ;;		_Write_RTC
 11943 ;;		_RtccWriteDate
 11944 ;;		_RtccWriteTime
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text80
 11949  00DC60                     __ptext80:
 11950                           	opt stack 0
 11951  00DC60                     _RtccWrOn:
 11952                           	opt stack 23
 11953                           
 11954                           ;incstack = 0
 11955  00DC60  9CF2               	bcf	intcon,6,c	;volatile
 11956  00DC62  0E55               	movlw	85
 11957  00DC64  6EA7               	movwf	4007,c	;volatile
 11958  00DC66  0EAA               	movlw	170
 11959  00DC68  6EA7               	movwf	4007,c	;volatile
 11960  00DC6A  010F               	movlb	15	; () banked
 11961  00DC6C  8B3F               	bsf	63,5,b	;volatile
 11962                           
 11963                           ; BSR set to: 15
 11964  00DC6E  8CF2               	bsf	intcon,6,c	;volatile
 11965                           
 11966                           ; BSR set to: 15
 11967  00DC70  0012               	return		;funcret
 11968  00DC72                     __end_of_RtccWrOn:
 11969                           	opt stack 0
 11970                           tosu	equ	0xFFF
 11971                           tosh	equ	0xFFE
 11972                           tosl	equ	0xFFD
 11973                           pclath	equ	0xFFA
 11974                           tblptru	equ	0xFF8
 11975                           tblptrh	equ	0xFF7
 11976                           tblptrl	equ	0xFF6
 11977                           tablat	equ	0xFF5
 11978                           prodh	equ	0xFF4
 11979                           prodl	equ	0xFF3
 11980                           intcon	equ	0xFF2
 11981                           indf0	equ	0xFEF
 11982                           postinc0	equ	0xFEE
 11983                           fsr0h	equ	0xFEA
 11984                           fsr0l	equ	0xFE9
 11985                           wreg	equ	0xFE8
 11986                           indf1	equ	0xFE7
 11987                           postinc1	equ	0xFE6
 11988                           postdec1	equ	0xFE5
 11989                           fsr1h	equ	0xFE2
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           plusw2	equ	0xFDB
 11995                           fsr2h	equ	0xFDA
 11996                           fsr2l	equ	0xFD9
 11997                           status	equ	0xFD8
 11998                           
 11999 ;; *************** function _Read_RTC *****************
 12000 ;; Defined at:
 12001 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;		None               void
 12008 ;; Registers used:
 12009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12019 ;;Total ram usage:        0 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    1
 12022 ;; This function calls:
 12023 ;;		_RtccReadDate
 12024 ;;		_RtccReadTime
 12025 ;; This function is called by:
 12026 ;;		_main
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           	psect	text81
 12031  00F2CE                     __ptext81:
 12032                           	opt stack 0
 12033  00F2CE                     _Read_RTC:
 12034                           	opt stack 29
 12035                           
 12036                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
 12037                           
 12038                           ; BSR set to: 15
 12039                           ;incstack = 0
 12040  00F2CE  0E4E               	movlw	low _RtccTime
 12041  00F2D0  6E01               	movwf	RtccReadTime@pTm,c
 12042  00F2D2  0E00               	movlw	high _RtccTime
 12043  00F2D4  6E02               	movwf	RtccReadTime@pTm+1,c
 12044  00F2D6  ECDF  F071         	call	_RtccReadTime	;wreg free
 12045                           
 12046                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
 12047  00F2DA  504F               	movf	_RtccTime+1,w,c
 12048  00F2DC  0B0F               	andlw	15
 12049  00F2DE  0100               	movlb	0	; () banked
 12050  00F2E0  6FF6               	movwf	_segundo_u& (0+255),b
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 12054  00F2E2  384F               	swapf	_RtccTime+1,w,c
 12055  00F2E4  0B0F               	andlw	15
 12056  00F2E6  0B0F               	andlw	15
 12057  00F2E8  6E5E               	movwf	_segundo_d,c
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
 12061  00F2EA  5050               	movf	_RtccTime+2,w,c
 12062  00F2EC  0B0F               	andlw	15
 12063  00F2EE  0100               	movlb	0	; () banked
 12064  00F2F0  6FF5               	movwf	_minuto_u& (0+255),b
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 12068  00F2F2  3850               	swapf	_RtccTime+2,w,c
 12069  00F2F4  0B0F               	andlw	15
 12070  00F2F6  0B0F               	andlw	15
 12071  00F2F8  0100               	movlb	0	; () banked
 12072  00F2FA  6FF4               	movwf	_minuto_d& (0+255),b
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
 12076  00F2FC  5051               	movf	_RtccTime+3,w,c
 12077  00F2FE  0B0F               	andlw	15
 12078  00F300  0100               	movlb	0	; () banked
 12079  00F302  6FF1               	movwf	_hora_u& (0+255),b
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 12083  00F304  3851               	swapf	_RtccTime+3,w,c
 12084  00F306  0B0F               	andlw	15
 12085  00F308  0B0F               	andlw	15
 12086  00F30A  0100               	movlb	0	; () banked
 12087  00F30C  6FF0               	movwf	_hora_d& (0+255),b
 12088                           
 12089                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
 12090  00F30E  0E4A               	movlw	low _RtccDate
 12091  00F310  6E01               	movwf	RtccReadDate@pDt,c
 12092  00F312  0E00               	movlw	high _RtccDate
 12093  00F314  6E02               	movwf	RtccReadDate@pDt+1,c
 12094  00F316  ECE4  F074         	call	_RtccReadDate	;wreg free
 12095                           
 12096                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
 12097  00F31A  504B               	movf	_RtccDate+1,w,c
 12098  00F31C  0B0F               	andlw	15
 12099  00F31E  0100               	movlb	0	; () banked
 12100  00F320  6FEF               	movwf	_fecha_u& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 12104  00F322  384B               	swapf	_RtccDate+1,w,c
 12105  00F324  0B0F               	andlw	15
 12106  00F326  0B0F               	andlw	15
 12107  00F328  0100               	movlb	0	; () banked
 12108  00F32A  6FEE               	movwf	_fecha_d& (0+255),b
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
 12112  00F32C  504C               	movf	_RtccDate+2,w,c
 12113  00F32E  0B0F               	andlw	15
 12114  00F330  0100               	movlb	0	; () banked
 12115  00F332  6FF3               	movwf	_mes_u& (0+255),b
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 12119  00F334  384C               	swapf	_RtccDate+2,w,c
 12120  00F336  0B0F               	andlw	15
 12121  00F338  0B0F               	andlw	15
 12122  00F33A  0100               	movlb	0	; () banked
 12123  00F33C  6FF2               	movwf	_mes_d& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
 12127  00F33E  C04A  F0ED         	movff	_RtccDate,_dia_semana
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
 12131  00F342  504D               	movf	_RtccDate+3,w,c
 12132  00F344  0B0F               	andlw	15
 12133  00F346  0100               	movlb	0	; () banked
 12134  00F348  6FEC               	movwf	_anio_u& (0+255),b
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
 12138  00F34A  384D               	swapf	_RtccDate+3,w,c
 12139  00F34C  0B0F               	andlw	15
 12140  00F34E  0B0F               	andlw	15
 12141  00F350  0100               	movlb	0	; () banked
 12142  00F352  6FEB               	movwf	_anio_d& (0+255),b
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
 12146  00F354  505E               	movf	_segundo_d,w,c
 12147  00F356  0D0A               	mullw	10
 12148  00F358  0100               	movlb	0	; () banked
 12149  00F35A  51F6               	movf	_segundo_u& (0+255),w,b
 12150  00F35C  24F3               	addwf	prodl,w,c
 12151  00F35E  0100               	movlb	0	; () banked
 12152  00F360  6FA0               	movwf	_segundo& (0+255),b
 12153  00F362  0100               	movlb	0	; () banked
 12154  00F364  0E00               	movlw	0
 12155  00F366  20F4               	addwfc	prodh,w,c
 12156  00F368  0100               	movlb	0	; () banked
 12157  00F36A  6FA1               	movwf	(_segundo+1)& (0+255),b
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
 12161  00F36C  0100               	movlb	0	; () banked
 12162  00F36E  51F4               	movf	_minuto_d& (0+255),w,b
 12163  00F370  0D0A               	mullw	10
 12164  00F372  0100               	movlb	0	; () banked
 12165  00F374  51F5               	movf	_minuto_u& (0+255),w,b
 12166  00F376  24F3               	addwf	prodl,w,c
 12167  00F378  0100               	movlb	0	; () banked
 12168  00F37A  6FFD               	movwf	_minuto& (0+255),b
 12169  00F37C  0100               	movlb	0	; () banked
 12170  00F37E  0E00               	movlw	0
 12171  00F380  20F4               	addwfc	prodh,w,c
 12172  00F382  0100               	movlb	0	; () banked
 12173  00F384  6FFE               	movwf	(_minuto+1)& (0+255),b
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
 12177  00F386  0100               	movlb	0	; () banked
 12178  00F388  51F0               	movf	_hora_d& (0+255),w,b
 12179  00F38A  0D0A               	mullw	10
 12180  00F38C  0100               	movlb	0	; () banked
 12181  00F38E  51F1               	movf	_hora_u& (0+255),w,b
 12182  00F390  24F3               	addwf	prodl,w,c
 12183  00F392  0100               	movlb	0	; () banked
 12184  00F394  6FFB               	movwf	_hora& (0+255),b
 12185  00F396  0100               	movlb	0	; () banked
 12186  00F398  0E00               	movlw	0
 12187  00F39A  20F4               	addwfc	prodh,w,c
 12188  00F39C  0100               	movlb	0	; () banked
 12189  00F39E  6FFC               	movwf	(_hora+1)& (0+255),b
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
 12193  00F3A0  0100               	movlb	0	; () banked
 12194  00F3A2  51EE               	movf	_fecha_d& (0+255),w,b
 12195  00F3A4  0D0A               	mullw	10
 12196  00F3A6  0100               	movlb	0	; () banked
 12197  00F3A8  51EF               	movf	_fecha_u& (0+255),w,b
 12198  00F3AA  24F3               	addwf	prodl,w,c
 12199  00F3AC  0100               	movlb	0	; () banked
 12200  00F3AE  6FF9               	movwf	_dia& (0+255),b
 12201  00F3B0  0100               	movlb	0	; () banked
 12202  00F3B2  0E00               	movlw	0
 12203  00F3B4  20F4               	addwfc	prodh,w,c
 12204  00F3B6  0100               	movlb	0	; () banked
 12205  00F3B8  6FFA               	movwf	(_dia+1)& (0+255),b
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
 12209  00F3BA  C0ED  F0F7         	movff	_dia_semana,_diasem
 12210  00F3BE  0100               	movlb	0	; () banked
 12211  00F3C0  6BF8               	clrf	(_diasem+1)& (0+255),b
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
 12215  00F3C2  0100               	movlb	0	; () banked
 12216  00F3C4  51F2               	movf	_mes_d& (0+255),w,b
 12217  00F3C6  0D0A               	mullw	10
 12218  00F3C8  0100               	movlb	0	; () banked
 12219  00F3CA  51F3               	movf	_mes_u& (0+255),w,b
 12220  00F3CC  24F3               	addwf	prodl,w,c
 12221  00F3CE  6E5C               	movwf	_mes,c
 12222  00F3D0  0100               	movlb	0	; () banked
 12223  00F3D2  0E00               	movlw	0
 12224  00F3D4  20F4               	addwfc	prodh,w,c
 12225  00F3D6  6E5D               	movwf	_mes+1,c
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
 12229  00F3D8  0100               	movlb	0	; () banked
 12230  00F3DA  51EB               	movf	_anio_d& (0+255),w,b
 12231  00F3DC  0D0A               	mullw	10
 12232  00F3DE  0100               	movlb	0	; () banked
 12233  00F3E0  51EC               	movf	_anio_u& (0+255),w,b
 12234  00F3E2  24F3               	addwf	prodl,w,c
 12235  00F3E4  6E5A               	movwf	_anio,c
 12236  00F3E6  0100               	movlb	0	; () banked
 12237  00F3E8  0E00               	movlw	0
 12238  00F3EA  20F4               	addwfc	prodh,w,c
 12239  00F3EC  6E5B               	movwf	_anio+1,c
 12240                           
 12241                           ; BSR set to: 0
 12242  00F3EE  0012               	return		;funcret
 12243  00F3F0                     __end_of_Read_RTC:
 12244                           	opt stack 0
 12245                           tosu	equ	0xFFF
 12246                           tosh	equ	0xFFE
 12247                           tosl	equ	0xFFD
 12248                           pclath	equ	0xFFA
 12249                           tblptru	equ	0xFF8
 12250                           tblptrh	equ	0xFF7
 12251                           tblptrl	equ	0xFF6
 12252                           tablat	equ	0xFF5
 12253                           prodh	equ	0xFF4
 12254                           prodl	equ	0xFF3
 12255                           intcon	equ	0xFF2
 12256                           indf0	equ	0xFEF
 12257                           postinc0	equ	0xFEE
 12258                           fsr0h	equ	0xFEA
 12259                           fsr0l	equ	0xFE9
 12260                           wreg	equ	0xFE8
 12261                           indf1	equ	0xFE7
 12262                           postinc1	equ	0xFE6
 12263                           postdec1	equ	0xFE5
 12264                           fsr1h	equ	0xFE2
 12265                           fsr1l	equ	0xFE1
 12266                           indf2	equ	0xFDF
 12267                           postinc2	equ	0xFDE
 12268                           postdec2	equ	0xFDD
 12269                           plusw2	equ	0xFDB
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274 ;; *************** function _RtccReadTime *****************
 12275 ;; Defined at:
 12276 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  pTm             2    0[COMRAM] PTR struct .
 12279 ;;		 -> RtccTime(4), 
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;  rTD0            8   10[COMRAM] struct .
 12282 ;;  rTD1            8    2[COMRAM] struct .
 12283 ;; Return value:  Size  Location     Type
 12284 ;;		None               void
 12285 ;; Registers used:
 12286 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12293 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12295 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12296 ;;Total ram usage:       18 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; This function calls:
 12299 ;;		Nothing
 12300 ;; This function is called by:
 12301 ;;		_Read_RTC
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           	psect	text82
 12306  00E3BE                     __ptext82:
 12307                           	opt stack 0
 12308  00E3BE                     _RtccReadTime:
 12309                           	opt stack 29
 12310  00E3BE  0EFC               	movlw	252
 12311  00E3C0  010F               	movlb	15	; () banked
 12312  00E3C2  173F               	andwf	63,f,b	;volatile
 12313                           
 12314                           ; BSR set to: 15
 12315  00E3C4  010F               	movlb	15	; () banked
 12316  00E3C6  813F               	bsf	63,0,b	;volatile
 12317                           
 12318                           ; BSR set to: 15
 12319  00E3C8  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 12320                           
 12321                           ; BSR set to: 15
 12322  00E3CC  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 12323                           
 12324                           ; BSR set to: 15
 12325  00E3D0  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 12326                           
 12327                           ; BSR set to: 15
 12328  00E3D4  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 12329                           
 12330                           ; BSR set to: 15
 12331  00E3D8  0EFC               	movlw	252
 12332  00E3DA  010F               	movlb	15	; () banked
 12333  00E3DC  173F               	andwf	63,f,b	;volatile
 12334  00E3DE  010F               	movlb	15	; () banked
 12335  00E3E0  813F               	bsf	63,0,b	;volatile
 12336                           
 12337                           ; BSR set to: 15
 12338  00E3E2  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 12339                           
 12340                           ; BSR set to: 15
 12341  00E3E6  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 12342                           
 12343                           ; BSR set to: 15
 12344  00E3EA  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 12345                           
 12346                           ; BSR set to: 15
 12347  00E3EE  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 12348                           
 12349                           ; BSR set to: 15
 12350  00E3F2  5009               	movf	RtccReadTime@rTD1+6,w,c
 12351  00E3F4  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 12352  00E3F6  A4D8               	btfss	status,2,c
 12353  00E3F8  D7E2               	goto	l4021
 12354                           
 12355                           ; BSR set to: 15
 12356                           
 12357                           ; BSR set to: 15
 12358  00E3FA  EE20 F003          	lfsr	2,3
 12359  00E3FE  5001               	movf	RtccReadTime@pTm,w,c
 12360  00E400  26D9               	addwf	fsr2l,f,c
 12361  00E402  5002               	movf	RtccReadTime@pTm+1,w,c
 12362  00E404  22DA               	addwfc	fsr2h,f,c
 12363  00E406  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 12364  00E40A  EE20 F002          	lfsr	2,2
 12365  00E40E  5001               	movf	RtccReadTime@pTm,w,c
 12366  00E410  26D9               	addwf	fsr2l,f,c
 12367  00E412  5002               	movf	RtccReadTime@pTm+1,w,c
 12368  00E414  22DA               	addwfc	fsr2h,f,c
 12369  00E416  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 12370  00E41A  EE20 F001          	lfsr	2,1
 12371  00E41E  5001               	movf	RtccReadTime@pTm,w,c
 12372  00E420  26D9               	addwf	fsr2l,f,c
 12373  00E422  5002               	movf	RtccReadTime@pTm+1,w,c
 12374  00E424  22DA               	addwfc	fsr2h,f,c
 12375  00E426  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 12376                           
 12377                           ; BSR set to: 15
 12378  00E42A  0012               	return		;funcret
 12379  00E42C                     __end_of_RtccReadTime:
 12380                           	opt stack 0
 12381                           tosu	equ	0xFFF
 12382                           tosh	equ	0xFFE
 12383                           tosl	equ	0xFFD
 12384                           pclath	equ	0xFFA
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           intcon	equ	0xFF2
 12392                           indf0	equ	0xFEF
 12393                           postinc0	equ	0xFEE
 12394                           fsr0h	equ	0xFEA
 12395                           fsr0l	equ	0xFE9
 12396                           wreg	equ	0xFE8
 12397                           indf1	equ	0xFE7
 12398                           postinc1	equ	0xFE6
 12399                           postdec1	equ	0xFE5
 12400                           fsr1h	equ	0xFE2
 12401                           fsr1l	equ	0xFE1
 12402                           indf2	equ	0xFDF
 12403                           postinc2	equ	0xFDE
 12404                           postdec2	equ	0xFDD
 12405                           plusw2	equ	0xFDB
 12406                           fsr2h	equ	0xFDA
 12407                           fsr2l	equ	0xFD9
 12408                           status	equ	0xFD8
 12409                           
 12410 ;; *************** function _RtccReadDate *****************
 12411 ;; Defined at:
 12412 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  pDt             2    0[COMRAM] PTR struct .
 12415 ;;		 -> RtccDate(4), 
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;  rTD0            8   10[COMRAM] struct .
 12418 ;;  rTD1            8    2[COMRAM] struct .
 12419 ;; Return value:  Size  Location     Type
 12420 ;;		None               void
 12421 ;; Registers used:
 12422 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12429 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12431 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12432 ;;Total ram usage:       18 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; This function calls:
 12435 ;;		Nothing
 12436 ;; This function is called by:
 12437 ;;		_Read_RTC
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           	psect	text83
 12442  00E9C8                     __ptext83:
 12443                           	opt stack 0
 12444  00E9C8                     _RtccReadDate:
 12445                           	opt stack 29
 12446  00E9C8  0EFC               	movlw	252
 12447  00E9CA  010F               	movlb	15	; () banked
 12448  00E9CC  173F               	andwf	63,f,b	;volatile
 12449  00E9CE  0E03               	movlw	3
 12450  00E9D0  010F               	movlb	15	; () banked
 12451  00E9D2  133F               	iorwf	63,f,b	;volatile
 12452                           
 12453                           ; BSR set to: 15
 12454  00E9D4  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 12455                           
 12456                           ; BSR set to: 15
 12457  00E9D8  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 12458                           
 12459                           ; BSR set to: 15
 12460  00E9DC  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 12461                           
 12462                           ; BSR set to: 15
 12463  00E9E0  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 12464                           
 12465                           ; BSR set to: 15
 12466  00E9E4  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 12467                           
 12468                           ; BSR set to: 15
 12469  00E9E8  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 12470  00E9EC  0EFC               	movlw	252
 12471  00E9EE  010F               	movlb	15	; () banked
 12472  00E9F0  173F               	andwf	63,f,b	;volatile
 12473  00E9F2  0E03               	movlw	3
 12474  00E9F4  010F               	movlb	15	; () banked
 12475  00E9F6  133F               	iorwf	63,f,b	;volatile
 12476                           
 12477                           ; BSR set to: 15
 12478  00E9F8  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 12479                           
 12480                           ; BSR set to: 15
 12481  00E9FC  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 12482                           
 12483                           ; BSR set to: 15
 12484  00EA00  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 12485                           
 12486                           ; BSR set to: 15
 12487  00EA04  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 12488                           
 12489                           ; BSR set to: 15
 12490  00EA08  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 12491                           
 12492                           ; BSR set to: 15
 12493  00EA0C  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 12494  00EA10  5005               	movf	RtccReadDate@rTD1+2,w,c
 12495  00EA12  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 12496  00EA14  A4D8               	btfss	status,2,c
 12497  00EA16  D7D8               	goto	l4047
 12498                           
 12499                           ; BSR set to: 15
 12500                           
 12501                           ; BSR set to: 15
 12502  00EA18  EE20 F001          	lfsr	2,1
 12503  00EA1C  5001               	movf	RtccReadDate@pDt,w,c
 12504  00EA1E  26D9               	addwf	fsr2l,f,c
 12505  00EA20  5002               	movf	RtccReadDate@pDt+1,w,c
 12506  00EA22  22DA               	addwfc	fsr2h,f,c
 12507  00EA24  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 12508  00EA28  EE20 F002          	lfsr	2,2
 12509  00EA2C  5001               	movf	RtccReadDate@pDt,w,c
 12510  00EA2E  26D9               	addwf	fsr2l,f,c
 12511  00EA30  5002               	movf	RtccReadDate@pDt+1,w,c
 12512  00EA32  22DA               	addwfc	fsr2h,f,c
 12513  00EA34  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 12514                           
 12515                           ; BSR set to: 15
 12516  00EA38  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 12517  00EA3C  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 12518  00EA40  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 12519                           
 12520                           ; BSR set to: 15
 12521  00EA44  EE20 F003          	lfsr	2,3
 12522  00EA48  5001               	movf	RtccReadDate@pDt,w,c
 12523  00EA4A  26D9               	addwf	fsr2l,f,c
 12524  00EA4C  5002               	movf	RtccReadDate@pDt+1,w,c
 12525  00EA4E  22DA               	addwfc	fsr2h,f,c
 12526  00EA50  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 12527                           
 12528                           ; BSR set to: 15
 12529  00EA54  0012               	return		;funcret
 12530  00EA56                     __end_of_RtccReadDate:
 12531                           	opt stack 0
 12532                           tosu	equ	0xFFF
 12533                           tosh	equ	0xFFE
 12534                           tosl	equ	0xFFD
 12535                           pclath	equ	0xFFA
 12536                           tblptru	equ	0xFF8
 12537                           tblptrh	equ	0xFF7
 12538                           tblptrl	equ	0xFF6
 12539                           tablat	equ	0xFF5
 12540                           prodh	equ	0xFF4
 12541                           prodl	equ	0xFF3
 12542                           intcon	equ	0xFF2
 12543                           indf0	equ	0xFEF
 12544                           postinc0	equ	0xFEE
 12545                           fsr0h	equ	0xFEA
 12546                           fsr0l	equ	0xFE9
 12547                           wreg	equ	0xFE8
 12548                           indf1	equ	0xFE7
 12549                           postinc1	equ	0xFE6
 12550                           postdec1	equ	0xFE5
 12551                           fsr1h	equ	0xFE2
 12552                           fsr1l	equ	0xFE1
 12553                           indf2	equ	0xFDF
 12554                           postinc2	equ	0xFDE
 12555                           postdec2	equ	0xFDD
 12556                           plusw2	equ	0xFDB
 12557                           fsr2h	equ	0xFDA
 12558                           fsr2l	equ	0xFD9
 12559                           status	equ	0xFD8
 12560                           tosu	equ	0xFFF
 12561                           tosh	equ	0xFFE
 12562                           tosl	equ	0xFFD
 12563                           pclath	equ	0xFFA
 12564                           tblptru	equ	0xFF8
 12565                           tblptrh	equ	0xFF7
 12566                           tblptrl	equ	0xFF6
 12567                           tablat	equ	0xFF5
 12568                           prodh	equ	0xFF4
 12569                           prodl	equ	0xFF3
 12570                           intcon	equ	0xFF2
 12571                           indf0	equ	0xFEF
 12572                           postinc0	equ	0xFEE
 12573                           fsr0h	equ	0xFEA
 12574                           fsr0l	equ	0xFE9
 12575                           wreg	equ	0xFE8
 12576                           indf1	equ	0xFE7
 12577                           postinc1	equ	0xFE6
 12578                           postdec1	equ	0xFE5
 12579                           fsr1h	equ	0xFE2
 12580                           fsr1l	equ	0xFE1
 12581                           indf2	equ	0xFDF
 12582                           postinc2	equ	0xFDE
 12583                           postdec2	equ	0xFDD
 12584                           plusw2	equ	0xFDB
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589                           	psect	text84
 12590  000000                     __ptext84:
 12591                           	opt stack 0
 12592                           tosu	equ	0xFFF
 12593                           tosh	equ	0xFFE
 12594                           tosl	equ	0xFFD
 12595                           pclath	equ	0xFFA
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           indf0	equ	0xFEF
 12604                           postinc0	equ	0xFEE
 12605                           fsr0h	equ	0xFEA
 12606                           fsr0l	equ	0xFE9
 12607                           wreg	equ	0xFE8
 12608                           indf1	equ	0xFE7
 12609                           postinc1	equ	0xFE6
 12610                           postdec1	equ	0xFE5
 12611                           fsr1h	equ	0xFE2
 12612                           fsr1l	equ	0xFE1
 12613                           indf2	equ	0xFDF
 12614                           postinc2	equ	0xFDE
 12615                           postdec2	equ	0xFDD
 12616                           plusw2	equ	0xFDB
 12617                           fsr2h	equ	0xFDA
 12618                           fsr2l	equ	0xFD9
 12619                           status	equ	0xFD8
 12620                           
 12621                           	psect	rparam
 12622  0000                     tosu	equ	0xFFF
 12623                           tosh	equ	0xFFE
 12624                           tosl	equ	0xFFD
 12625                           pclath	equ	0xFFA
 12626                           tblptru	equ	0xFF8
 12627                           tblptrh	equ	0xFF7
 12628                           tblptrl	equ	0xFF6
 12629                           tablat	equ	0xFF5
 12630                           prodh	equ	0xFF4
 12631                           prodl	equ	0xFF3
 12632                           intcon	equ	0xFF2
 12633                           indf0	equ	0xFEF
 12634                           postinc0	equ	0xFEE
 12635                           fsr0h	equ	0xFEA
 12636                           fsr0l	equ	0xFE9
 12637                           wreg	equ	0xFE8
 12638                           indf1	equ	0xFE7
 12639                           postinc1	equ	0xFE6
 12640                           postdec1	equ	0xFE5
 12641                           fsr1h	equ	0xFE2
 12642                           fsr1l	equ	0xFE1
 12643                           indf2	equ	0xFDF
 12644                           postinc2	equ	0xFDE
 12645                           postdec2	equ	0xFDD
 12646                           plusw2	equ	0xFDB
 12647                           fsr2h	equ	0xFDA
 12648                           fsr2l	equ	0xFD9
 12649                           status	equ	0xFD8


Data Sizes:
    Strings     350
    Constant    14
    Data        12
    BSS         176
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     68      95
    BANK0           160      0     159
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), comando(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_32(CODE[18]), STR_31(CODE[5]), STR_27(CODE[5]), STR_26(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    confirmar_nuevo_password@confirmar	PTR int  size(2) Largest target is 2
		 -> actualizar_password@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> menu_cambiar_password@verifica(COMRAM[2]), 

    guardar_elemento_arreglo@arreglo	PTR unsigned char  size(2) Largest target is 7
		 -> new_password(BANK0[7]), temporal(BANK0[7]), current_password(BANK0[7]), 

    guardar_elemento_arreglo@tamanio	PTR int  size(2) Largest target is 2
		 -> tamanio_new_password(BANK0[2]), tamanio_password(COMRAM[2]), 

    actualizar_minutos@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualizar_hora@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_dia@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_elemento@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@dato_fecha	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@doit	PTR FTN(PTR int ,const int ,)void  size(2) Largest target is 0
		 -> actualizar_minutos(), actualizar_hora(), actualiza_dia(), actualiza_elemento(), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), 
		 -> tamanio_anio(BANK0[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> guardar_elemento@valor(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), 
		 -> imprimir_tecla@aux(COMRAM[20]), STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[11]), 
		 -> STR_22(CODE[14]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[23]), 
		 -> STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), STR_15(CODE[22]), 
		 -> STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), STR_7(CODE[11]), 
		 -> STR_6(CODE[17]), STR_5(CODE[26]), STR_4(CODE[4]), STR_3(CODE[3]), 
		 -> buffer2(BANK0[20]), 

    funcion_pulsador_B	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), desactivar_alarma(), 

    funcion_pulsador_A	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), accionar_alarma(), ingresar_comando(), 

    funcion_pulsador_D	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), borrar_current_password(), borrar_nuevo_password(), 
		 -> borrar_temporal_password(), borrar_hora(), borrar_minutos(), borrar_dia(), 
		 -> borrar_mes(), borrar_anio(), 

    puntero_funcion	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), cambiar_hora(), cambiar_minutos(), cambiar_dia(), 
		 -> cambiar_mes(), cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), 
		 -> mostrar_guardar_nuevo_password(), mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    funcion_pulsador_C	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), cancelar_cambio_password(), cancelar_cambio_hora(), 
		 -> cancelar_cambio_fecha(), 

    mostrar_titulo_menu@titulo_menu	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), 
		 -> STR_15(CODE[22]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), 

    caratula$667	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), STR_24(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _menu_cambiar_password->_clear_display
    _menu_cambiar_password->_mostrar_titulo_menu
    _menu_cambiar_horario->_clear_display
    _menu_cambiar_horario->_mostrar_titulo_menu
    _menu_cambiar_fecha->_clear_display
    _menu_cambiar_fecha->_mostrar_titulo_menu
    _mostrar_titulo_menu->_lcd_putrs
    _mensaje_alarma_activada->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _guardar_password_temporal->_guardar_elemento_arreglo
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _guardar_nuevo_password->_guardar_elemento_arreglo
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _actualizar_password->_confirmar_nuevo_password
    _confirmar_nuevo_password->_guardar_current_password
    _guardar_current_password->_guardar_elemento_arreglo
    _cambiar_minutos->_guardar_elemento
    _cambiar_mes->_guardar_elemento
    _cambiar_hora->_guardar_elemento
    _cambiar_dia->_guardar_elemento
    _obtener_dia_mes->___awmod
    _cambiar_anio->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _accionar_alarma->_menu_ingresar_password
    _menu_ingresar_password->_clear_display
    _clear_display->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  469613
                                             66 COMRAM     2     2      0
                           _Read_RTC
                              _Setup
              _activar_sonido_alarma
                               _atoi
                           _caratula
           _desactivar_sonido_alarma
                 _inicializar_alarma
                _inicializar_teclado
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
            _mensaje_alarma_activada
                 _menu_cambiar_fecha
               _menu_cambiar_horario
              _menu_cambiar_password
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_password                                2     2      0   12383
                                             12 COMRAM     2     2      0
                      _clear_display
                _mostrar_titulo_menu
                  _verficar_password
 ---------------------------------------------------------------------------------
 (2) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_horario                                 0     0      0   12136
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_fecha                                   0     0      0   12136
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (2) _mostrar_titulo_menu                                  2     0      2    5961
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _mensaje_alarma_activada                              0     0      0    5427
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2  406961
                                             61 COMRAM     5     3      2
                   Absolute function *
                    _accionar_alarma *
                        _borrar_anio *
            _borrar_current_password *
                         _borrar_dia *
                        _borrar_hora *
                         _borrar_mes *
                     _borrar_minutos *
              _borrar_nuevo_password *
           _borrar_temporal_password *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
              _cancelar_cambio_fecha *
               _cancelar_cambio_hora *
           _cancelar_cambio_password *
      _confirmar_actualizar_password *
                  _desactivar_alarma *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
                  _restaurar_comando *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             2     0      2  183172
                                             59 COMRAM     2     0      2
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   11114
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   23476
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
             _menu_ingresar_password
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   11114
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3397
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3375
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   11559
                                             56 COMRAM     1     1      0
                _actualizar_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    7023
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _actualizar_password                                  5     5      0    1197
                                             15 COMRAM     5     5      0
           _confirmar_nuevo_password
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _confirmar_nuevo_password                             7     4      3    1036
                                              8 COMRAM     7     4      3
           _guardar_current_password
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_arreglo                             7     2      5     730
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         3     3      0   24326
                                             52 COMRAM     3     3      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0   24878
                                             52 COMRAM     3     3      0
                   _guardar_elemento
                    _obtener_dia_mes
 ---------------------------------------------------------------------------------
 (4) _obtener_dia_mes                                      2     2      0     552
                                              6 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                    17     7     10   24281
                                             35 COMRAM    17     7     10
                      _actualiza_dia *
                 _actualiza_elemento *
                    _actualizar_hora *
                 _actualizar_minutos *
                    _convertir_a_int
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _convertir_a_int                                      4     0      4    1011
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _actualizar_minutos                                   4     0      4    2407
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (5) _actualizar_hora                                      4     0      4    4898
                                             21 COMRAM     4     0      4
                          _Write_RTC
                 _actualiza_elemento
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _actualiza_dia                                        4     0      4    2621
                                             21 COMRAM     4     0      4
                 _actualiza_elemento
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _actualiza_elemento                                   4     0      4    2577
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _desactivar_alarma                                    0     0      0   18537
                      _clear_display
      _inicializar_intentos_fallidos
             _menu_ingresar_password
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_password                             0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_hora                                 0     0      0       0
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_fecha                                0     0      0       0
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_temporal_password                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_nuevo_password                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_minutos                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_mes                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_hora                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_dia                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_current_password                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_anio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _accionar_alarma                                      0     0      0   18537
                      _clear_display
             _menu_ingresar_password
 ---------------------------------------------------------------------------------
 (3) _menu_ingresar_password                               3     3      0   12362
                                             12 COMRAM     3     3      0
                      _clear_display
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (4) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        2     0      2    6175
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _inicializar_teclado                                  0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializar_alarma                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _desactivar_sonido_alarma                             0     0      0       0
      _inicializar_intentos_fallidos
 ---------------------------------------------------------------------------------
 (3) _inicializar_intentos_fallidos                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9542
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3295
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3646
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2449
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1781
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _activar_sonido_alarma                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (7) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (8) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _activar_sonido_alarma
   _atoi
     ___wmul
     _isdigit
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _desactivar_sonido_alarma
     _inicializar_intentos_fallidos
   _inicializar_alarma
   _inicializar_teclado
     _restaurar_comando
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     Absolute function(Fake) *
     _accionar_alarma *
       _clear_display
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
     _borrar_anio *
     _borrar_current_password *
     _borrar_dia *
     _borrar_hora *
     _borrar_mes *
     _borrar_minutos *
     _borrar_nuevo_password *
     _borrar_temporal_password *
     _cambiar_anio *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_dia *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _obtener_dia_mes
         ___awmod
     _cambiar_hora *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_mes *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_minutos *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cancelar_cambio_fecha *
       _inicializar_fecha
       _restaurar_comando
     _cancelar_cambio_hora *
       _inicializar_hora
       _restaurar_comando
     _cancelar_cambio_password *
       _restaurar_comando
     _confirmar_actualizar_password *
       _actualizar_password
         _confirmar_nuevo_password
           _guardar_current_password
             _guardar_elemento_arreglo
         _restaurar_comando
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _desactivar_alarma *
       _clear_display
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _inicializar_intentos_fallidos
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
     _guardar_tecla_presionada *
       Absolute function(Fake) *
       _cambiar_anio *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_dia *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _obtener_dia_mes
           ___awmod
       _cambiar_hora *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_mes *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_minutos *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _confirmar_actualizar_password *
         _actualizar_password
           _confirmar_nuevo_password
             _guardar_current_password
               _guardar_elemento_arreglo
           _restaurar_comando
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _menu_ingresar_password
           _clear_display
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _validar_password
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _restaurar_comando *
   _mensaje_alarma_activada
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _menu_cambiar_fecha
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_horario
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_password
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _verficar_password

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      10       8        6.3%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9F       5       99.4%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     44      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E       6        0.0%
DATA                 0      0     10E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 27 19:29:19 2016

                    cambiar_hora@validacion 0035                           _verficar_password E752  
                                         _a 0082                                           _b 0086  
                                         _c 0088                                           _i 0094  
                                         _j 0098                                           _k 009A  
                            ?_lcd_send_byte 0003                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                              ?_borrar_anio 0001                  ??_mostrar_guardar_password 0039  
                              ?_borrar_hora 0001                                         l344 E04E  
                                       l345 E050                                         l425 E2F2  
                                       l433 E8EE                                         l442 E93C  
                                       l434 E8EA                                         l612 FB90  
                                       l460 F626                                         l452 F5C2  
                                       l437 E916                                         l461 F622  
                                       l453 F5BE                                         l438 E912  
                                       l464 F64E                                         l456 F604  
                                       l448 F580                                         l473 F68A  
                                       l465 F64A                                         l457 F600  
                                       l449 F57C                                         l468 F668  
                                       l469 F664                                         l824 E750  
                                       l905 FC9A                                         l852 E7C8  
                                       l862 EAE2                        actualizar_password@j 0013  
                                       _dia 00F9                                         _day 0073  
                                       _key 0049                                         _mes 005C  
                              ___awmod@sign 0006                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                    __size_of_actualizar_hora 0022  
                               lcd_gotoxy@x 0006                                 lcd_gotoxy@y 0005  
         __end_of_guardar_password_temporal DD80                              _borrar_minutos DCA8  
                  _desactivar_sonido_alarma DCCC                                        l1205 EE26  
          __end_of_cancelar_cambio_password DEAA                                        l3103 F200  
                                      l3113 F23E                                        l4021 E3BE  
                                      l3109 F22A                                        l3223 F51E  
                                      l3151 F2B6                                        l3119 F25A  
                                      l3055 DC74                                        l4111 EEF8  
                                      l4201 F18A                                        l3227 F52A  
                                      l3219 F512                                        l3171 F452  
                                      l3155 F2C2                                        l3147 F2AA  
                                      l3251 EB22                                        l3091 DE74  
                                      l3331 E10E                                        l3181 F4A0  
                                      l3253 EB2C                                        l3245 EB0C  
                                      l3333 E11A                                        l4109 EEEE  
                                      l3341 E6F8                                        l1582 E28A  
                                      l4047 E9C8                                        l3271 EB6E  
                                      l3263 EB52                                        l3255 EB34  
                                      l3239 EAFA                                        l3327 E0F6  
                                      l3415 E24E                                        l3351 DE14  
                                      l3511 FD1A                                        l3503 FCF2  
                                      l1592 E180                                        l3177 F48C  
                                      l3089 DE6E                                        l3329 E102  
                                      l3337 E126                                        l3417 E258  
                                      l3521 FD5A                                        l4321 F692  
                                      l4153 EF9A                                        l4145 EF5A  
                                      l3187 F4BC                                        l3267 EB5E  
                                      l3363 E18C                                        l3427 E27E  
                                      l3419 E260                                        l3443 E174  
                                      l3435 E14C                                        l3531 FD86  
                                      l3523 FD64                                        l3507 FD16  
                                      l3451 FB9C                                        l3437 E156  
                                      l3541 FDB8                                        l3533 FD8E  
                                      l3517 FD36                                        l3373 ED5E  
                                      l4341 F878                                        l3367 E1B6  
                                      l3439 E15E                                        l3463 FBCE  
                                      l3391 EDEE                                        l3375 ED64  
                                      l3623 EAB8                                        l4191 F132  
                                      l3561 FE52                                        l3553 FDF8  
                                      l3481 FC6C                                        l3465 FBE4  
                                      l3457 FBB6                                        l3393 EDF4  
                                      l3385 EDA4                                        l3641 E96A  
                                      l3625 EABE                                        l3721 EC4A  
                                      l3705 E09A                                        l4169 EBCE  
                                      l4361 F8DA                                        l4353 F8BA  
                                      l3555 FDFE                                        l3547 FDDA  
                                      l3539 FDB0                                        l3459 FBC4  
                                      l3563 FE5E                                        l3811 F02C  
                                      l3627 EACE                                        l3619 EA86  
                                      l3731 EC82                                        l4371 F914  
                                      l3493 FCC8                                        l3477 FC68  
                                      l3565 FE7A                                        l3469 FC02  
                                      l3581 E546                                        l3389 EDB8  
                                      l3661 E9BC                                        l3653 E9A0  
                                      l3645 E978                                        l3637 E95C  
                                      l3821 F060                                        l3725 EC5E  
                                      l4189 F11C                                        l4381 F962  
                                      l4357 F8CC                                        l3583 E54C  
                                      l3647 E982                                        l4199 F180  
                                      l4383 F968                                        l3497 FCE2  
                                      l3585 E55C                                        l3577 E51C  
                                      l3649 E98A                                        l3657 E9AC  
                                      l3825 F090                                        l3809 F020  
                                      l3745 E2C0                                        l3913 E5BA  
                                      l4385 F96E                                        l4393 F994  
                                      l3923 E86C                                        l3499 FCE6  
                                      l3587 E568                                        l3827 F0AC  
                                      l3819 F054                                        l4379 F95C  
                                      l4395 F9C0                                        l3861 DC86  
                                      l3941 E898                                        l3933 E884  
                                      l3693 ED30                                        l3765 FA6C  
                                      l3829 F0B8                                        l3909 E5AC  
                                      l3927 E874                                        l3791 FB78  
                                      l3775 FAF4                                        l3697 ED48  
                                      l3689 ED1C                                        l3777 FB06  
                                      l3881 E464                                        l3961 E79E  
                                      l3787 FB64                                        l3963 E7A4  
                                      l3877 E456                                        l3965 E7B4  
                                      l3957 E76C                                        l3895 E810  
                                      l3983 E384                                        l3889 E7FA  
                                      l3985 E390                                        STR_1 FF9E  
                                      STR_2 FFAD                                        STR_3 FFF2  
                                      STR_4 FFEE                                        STR_5 FEB4  
                                      STR_6 FF8D                                        STR_7 FFD5  
                                      STR_8 FFE9                                        STR_9 FFE9  
                           _guardar_comando E294                           ?_inicializar_hora 0001  
                                      u2350 E1AC                                        u3230 E31E  
                                      u3231 E31A                                        u2360 E1D6  
                                      u3160 E202                                        u3240 E320  
                                      u3161 E1FE                                        u3170 E204  
                                      u2357 E1A2                                        u2367 E1CC  
                                      u1920 E5FC                                        u1940 E614  
                                      u2740 EA6C                                        u3428 E924  
                                      u2910 EC42                                        u1960 E62E  
                                      u3368 E8D2                                        u1938 E5FE  
                                      u2850 ECE2                                        u3810 F98A  
                                      u1980 E64A                                        u3628 F5EA  
                                      u3740 F892                                        u1958 E616  
                                      u3398 E8FA                                        u2960 FA88  
                                      u3728 F674                                        u3568 F566  
                                      u1978 E630                                        u3837 F698  
                                      u1998 E64C                                        u3678 F632  
                                      u3598 F5A8                                        u3847 FAFA  
                                      u3857 FB7E                                        u3867 ED36  
                                      u3877 DC88                                        u2998 FAE0  
                                      u3887 DC76                            ?_lcd_send_nibble 0001  
                                      _anio 005A                                        _flag 02F8  
                                      _atoi ED5C                          ??_inicializar_hora 0001  
                                      _main F82A                                        _hora 00FB  
                                      _hour 0076                                        _year 007F  
                                      fsr0h 000FEA                                        indf0 000FEF  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      indf1 000FE7                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                             __CFG_T1DIG$ON 000000                  actualizar_minutos@elemento 0016  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 0000                               __CFG_IESO$OFF 000000  
                          RtccReadDate@rTD0 000B                            RtccReadDate@rTD1 0003  
                 __end_of_verficar_password E7CA                  __end_of_actualiza_elemento DCF8  
                           _accionar_alarma E354             __end_of_mensaje_alarma_activada E002  
                              ___param_bank 000010                             RtccReadTime@pTm 0001  
                      __size_of_cambiar_dia 005A                        __size_of_cambiar_mes 006E  
                         _inicializar_fecha DFA6                                 _Delay1KTCYx DC84  
                             __CFG_PLLDIV$1 000000                                       ?_atoi 0007  
                                     ?_main 0001                             __end_of___awdiv EB7A  
                        ?_inicializar_fecha 0001                                       STR_10 FFE9  
                                     STR_11 FFE9                                       STR_20 FF7C  
                                     STR_12 FF22                                       STR_21 FF6B  
                                     STR_13 FF59                                       STR_30 FF7A  
                                     STR_22 FFBC                                       STR_14 FF47  
                                     STR_31 FFE9                                       STR_23 FFCA  
                                     STR_15 FEE5                                       STR_24 FFE0  
                                     STR_32 FF35                                       STR_16 FF0F  
                                     STR_25 FFE0                                       STR_17 FE99  
                                     STR_26 FFE9                                       STR_18 FEFB  
                                     STR_27 FFE9                                       STR_19 FECE  
                                     STR_28 FFF5                             __end_of___awmod E9C8  
                                     STR_29 FFF5                       __size_of_Delay100TCYx 0012  
                          _guardar_elemento F9D2                             ___awdiv@divisor 0003  
                           __end_of___lwdiv E294                             __end_of___lwmod E18A  
                         _restaurar_comando DD10                             ___awdiv@counter 0005  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94             ??_confirmar_actualizar_password 0039  
                             ?_leer_teclado 003E                __size_of_inicializar_teclado 002A  
                        ?_restaurar_comando 0001                              __CFG_FCMEN$OFF 000000  
                      _cancelar_cambio_hora DBE2                      __end_of_borrar_minutos DCBA  
                                     _Setup E0AA                         ??_inicializar_fecha 0001  
                            _ocultar_teclas 009C                             __end_of_dpowers FE95  
                                     _mes_d 00F2                                       _mes_u 00F3  
                           __end_of_isdigit DE1E                                       _month 007C  
                                     atoi@a 000C                                       atoi@s 0007  
                            __pbitbssCOMRAM 02F8      __end_of_mostrar_guardar_nuevo_password DF7A  
   __size_of_mostrar_guardar_nuevo_password 002C              _mostrar_guardar_nuevo_password DF4E  
                                     pclath 000FFA                                       tablat 000FF5  
                         ??_convertir_a_int 0012                         ??_restaurar_comando 0001  
                                     plusw2 000FDB                                lcd_putrs@ptr 0009  
                                     status 000FD8                             __end_of_sprintf FE8A  
                         validar_password@i 0003                     __CFG_DSWDTOSC$INTOSCREF 000000  
                     __end_of_actualiza_dia DD9E                             __initialization E49A  
                              _Delay100TCYx DC72                   __end_of_inicializar_fecha DFD4  
                              __end_of_atoi EE30                                __end_of_main F9D2  
                           ??_lcd_send_byte 0004                  __end_of_actualizar_minutos DDFC  
                          RtccReadTime@rTD0 000B                            RtccReadTime@rTD1 0003  
                          __end_of_Read_RTC F3F0                    _guardar_current_password DD2C  
                 __size_of_ingresar_comando 000A                   __end_of_restaurar_comando DD2C  
                         cambiar_anio@tecla 0037                       __size_of_cambiar_anio 007C  
                     __size_of_cambiar_hora 0060                                      ??_atoi 0009  
                                    ??_main 0043                               __activetblptr 000002  
                        _inicializar_alarma E666                              ??_leer_teclado 0040  
                   __end_of_guardar_comando E2F4            __end_of_guardar_elemento_arreglo E752  
                          __end_of_RtccWrOn DC72                       ?_cancelar_cambio_hora 0001  
              __size_of_mostrar_titulo_menu 0018                     actualizar_minutos@valor 0018  
                  ?_borrar_current_password 0001                             ?_borrar_minutos 0001  
                                    ?_Setup 0001                                      _ADCON0 000FC2  
                                    _ADCON1 000FC1                         ?_inicializar_alarma 0001  
                                    _EECON2 000FA7                                      _ANCON0 000F48  
                                    _ANCON1 000F49                            ___awdiv@dividend 0001  
                            __CFG_WDTEN$OFF 000000                     __end_of_accionar_alarma E3BE  
                          RtccWriteDate@pDt 0001                           ??_actualizar_hora 001A  
                                    _RTCCFG 000F3F                     ??_borrar_nuevo_password 0001  
                            __CFG_WPCFG$OFF 000000      mostrar_guardar_temporal_password@tecla 0039  
                     __end_of_clear_display DE40                            __end_of_caratula EF06  
                      cambiar_minutos@tecla 0037                              __CFG_WPDIS$OFF 000000  
                     _cancelar_cambio_fecha DBD8                              __CFG_XINST$OFF 000000  
                __size_of_verficar_password 0078                            _cambiar_mes$1417 0038  
                              _cambiar_anio E7CA                                _cambiar_hora E2F4  
                          __end_of_lcd_init E8C6              guardar_password_temporal@valor 0008  
                          __end_of_lcd_putc E13E                           ?_validar_password 0001  
                      ??_inicializar_alarma 0001                                      ___wmul DED0  
                                 ??___awdiv 0005                              __CFG_STVREN$ON 000000  
                                 ??___awmod 0005                                      _diasem 00F7  
                                    _anio_d 00EB                                      _anio_u 00EC  
                                 ??___lwdiv 0005                                   ??___lwmod 000C  
         __size_of_cancelar_cambio_password 0024                    ??_menu_ingresar_password 000D  
                 ?_cancelar_cambio_password 0001                          ??_validar_password 0001  
                                    _hora_d 00F0                                      _hora_u 00F1  
                                    clear_0 E4A0                                      clear_1 E4AC  
                                    clear_2 E4BA                            ___awdiv@quotient 0007  
                                    _minuto 00FD            __end_of_mostrar_guardar_password E032  
                           ___awmod@divisor 0003                             ___awmod@counter 0005  
                         cambiar_hora@tecla 0037                       __end_of_RtccWriteDate F536  
                     __end_of_RtccWriteTime F2CE                  ??_borrar_temporal_password 0001  
                          RtccWriteTime@pTm 0001                    __size_of_cambiar_minutos 0074  
                  _guardar_tecla_presionada E8C6                                __pdataCOMRAM 005A  
                                 ??_isdigit 0001                        __size_of_borrar_anio 0012  
                          ??_imprimir_tecla 0024                        __size_of_borrar_hora 0010  
 __end_of_mostrar_guardar_temporal_password DF4E  __size_of_mostrar_guardar_temporal_password 002C  
       ??_mostrar_guardar_temporal_password 0039          ?_mostrar_guardar_temporal_password 0001  
         _mostrar_guardar_temporal_password DF22                                __mediumconst FE8A  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                   ??_sprintf 0017  
                                __accesstop 0060                     __end_of__initialization E500  
                        __size_of_Write_RTC 0186                               ___rparam_used 000001  
            __size_of_menu_cambiar_password 00FC               __end_of_menu_cambiar_password F1C2  
                              _caratula$667 0026                              __pcstackCOMRAM 0001  
                             __end_of_Setup E0F2                  __size_of_inicializar_fecha 002E  
                              __pidataBANK0 DBD0                 __end_of_actualizar_password ECA8  
                           __CFG_DSWDTPS$G2 000000                  __size_of_restaurar_comando 001C  
                  __size_of_obtener_dia_mes 00EA                         leer_teclado@ocultar 003E  
                ??_desactivar_sonido_alarma 0001                      ??_cancelar_cambio_hora 0001  
            mostrar_titulo_menu@titulo_menu 000B                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                                     ??_Setup 000E  
                         lcd_gotoxy@address 0007                          __size_of_lcd_putrs 0054  
                     _activar_sonido_alarma DBC8                                sprintf@width 0021  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                 ?_Read_RTC 0001                            ?_accionar_alarma 0001  
                           _tamanio_comando 0047                                  _dia_semana 00ED  
                 RtccWriteTime@tempHourWDay 000A                                  __pnvCOMRAM 005E  
                        actualiza_dia@valor 0018                    __end_of_guardar_elemento FB92  
                    ?_cancelar_cambio_fecha 0001                             _tamanio_minutos 00E7  
               __size_of_menu_cambiar_fecha 00D6           __size_of_guardar_elemento_arreglo 0076  
             __size_of_menu_cambiar_horario 0096                        __end_of_leer_teclado F6A4  
                 ?_guardar_elemento_arreglo 0001                         _inicializar_teclado DEF8  
                         _intentos_fallidos 0096                                   ?_RtccWrOn 0001  
                            lcd_send_byte@n 0003                                     ?___wmul 0001  
                   menu_ingresar_password@i 000E                               ?_RtccReadDate 0001  
                 __size_of_inicializar_hora 0020                               ?_RtccReadTime 0001  
                          _ingresar_comando DBEC                                ?_Delay1KTCYx 0001  
           __size_of_menu_ingresar_password 00B4                          guardar_comando@aux 0026  
                         __end_of_Write_RTC F82A                    ?_mensaje_alarma_activada 0001  
                        _actualiza_elemento DCE2                             _convertir_a_int DD9E  
                     cambiar_mes@validacion 0035                                  _lcd_comand DC02  
                                 ?_caratula 0024                   confirmar_nuevo_password@i 000E  
                      ?_inicializar_teclado 0001                    actualizar_password@valor 0010  
                                _lcd_gotoxy DE62                                     _RTCVALH 000F99  
                                   _RTCVALL 000F98                         ?_actualiza_elemento 0016  
                                 ?_lcd_init 0001                           ??_cambiar_minutos 0035  
                                 ?_lcd_putc 0001                                  _borrar_dia DC20  
             guardar_elemento_arreglo@valor 0003                                  _borrar_mes DC10  
                ?_guardar_password_temporal 0001                    _confirmar_nuevo_password EA56  
                                ??_Read_RTC 0013           __size_of_mostrar_guardar_password 0030  
                 ?_mostrar_guardar_password 0001                  ??_guardar_current_password 0008  
                         _cambiar_anio$1421 0038                  actualiza_elemento@elemento 0016  
                                   __Hparam 0000                               ??_cambiar_dia 0035  
                       _mostrar_titulo_menu DCF8                               ??_cambiar_mes 0035  
                                   __Lparam 0000                    __size_of_lcd_send_nibble 0076  
                                ??_RtccWrOn 0001                        guardar_comando@tecla 003A  
                      guardar_elemento@doit 002C                              ??_RtccReadDate 0003  
                                _autorizado 0045                        ??_actualiza_elemento 0012  
                            ??_RtccReadTime 0003                                     ___awdiv EAE4  
                         __end_of_lcd_putrs E1DE                                     ___awmod E946  
                           __size_of___wmul 0028                                     ___lwdiv E238  
                                   ___lwmod E13E                                 _RtccTimeVal 006F  
                                fecha@month 00DF                                     __pcinit E49A  
                                   _fecha_d 00EE                                     _fecha_u 00EF  
                                   __ramtop 0F00               mostrar_guardar_password@tecla 0039  
          __end_of_borrar_temporal_password DC50                            ??_borrar_minutos 0001  
                                   __ptext0 F82A                                     __ptext1 F0C6  
                                   __ptext2 E752                                     __ptext3 EB7A  
                                   __ptext4 EF06                                     __ptext5 DCF8  
                                   __ptext6 DFD4                                     __ptext7 F536  
                                   __ptext8 E8C6                                     __ptext9 E354  
                                   _buffer2 00AA              ?_inicializar_intentos_fallidos 0001  
                                   _comando 00D3                                   _T1CONbits 000FCD  
                                   _dpowers FE8B                                     _isdigit DDFC  
                     ??_inicializar_teclado 0001                             _actualizar_hora DE40  
                          ___awmod@dividend 0001                                  ??_caratula 0026  
                      ?_mostrar_titulo_menu 000B                                     _minutes 0079  
                        _actualizar_minutos DDDC                                     _segundo 00A0  
                         _desactivar_alarma DEAA                      ?_activar_sonido_alarma 0001  
                         ??_obtener_dia_mes 0007                                     _sprintf FB92  
                  ??_guardar_nuevo_password 0008                                  ??_lcd_init 0005  
                        ?_desactivar_alarma 0001                                  ??_lcd_putc 0008  
                      end_of_initialization E500                      _menu_ingresar_password ECA8  
                       ?_actualizar_minutos 0016                        lcd_send_byte@address 0004  
                             __Lmediumconst FE8A                     actualiza_elemento@valor 0018  
            __size_of_borrar_nuevo_password 0012                         ??_desactivar_alarma 0001  
          __size_of_borrar_current_password 0010               __end_of_borrar_nuevo_password DCCC  
                guardar_elemento@dato_fecha 002A                                     postdec1 000FE5  
                                   postdec2 000FDD                  ??_guardar_tecla_presionada 003E  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                        _tamanio_new_password 00E9  
                   __end_of_convertir_a_int DDBC                       __end_of_lcd_send_byte E064  
                      ??_actualizar_minutos 001A                         __end_of_cambiar_dia E238  
                       __end_of_cambiar_mes E49A            __end_of_desactivar_sonido_alarma DCE2  
                                 _PORTAbits 000F80                                   _PORTCbits 000F82  
                          __CFG_DSBOREN$OFF 000000                   __end_of_desactivar_alarma DED0  
                     ??_mostrar_titulo_menu 000D                                 ?_lcd_comand 0001  
                          __CFG_CPUDIV$OSC1 000000                                   _TRISBbits 000F93  
                               ?_lcd_gotoxy 0005                   __size_of_validar_password 0072  
                    __size_of_actualiza_dia 001E                             _LCD_INIT_STRING FE95  
                               ?_borrar_dia 0001                                 ?_borrar_mes 0001  
                      convertir_a_int@array 000E                        convertir_a_int@valor 0010  
       mostrar_guardar_nuevo_password@tecla 0039                       __size_of_leer_teclado 016E  
                          _current_password 00BE                            __CFG_IOL1WAY$OFF 000000  
                 RtccWriteDate@tempDayMonth 000A                         __CFG_MSSP7B_EN$MSK7 000000  
                             leer_teclado@i 0041                            Delay100TCYx@unit 0001  
                          _inicializar_hora DDBC                 __size_of_inicializar_alarma 0076  
                   __end_of_actualizar_hora DE62                              __end_of___wmul DEF8  
                             __pidataCOMRAM DBC4                   RtccWriteDate@tempHourWDay 000C  
                     actualiza_dia@elemento 0016                               ??_borrar_anio 0001  
                             ??_borrar_hora 0001                           ??_lcd_send_nibble 0001  
         confirmar_nuevo_password@confirmar 0009                        __size_of_Delay1KTCYx 0012  
                          __CFG_DSWDTEN$OFF 000000                            cambiar_dia@tecla 0037  
                    __size_of_clear_display 0022                         start_initialization E49A  
                        main@ocultar_teclas 0043                                _leer_teclado F536  
                      __end_of_RtccReadDate EA56                        __end_of_RtccReadTime E42C  
           __size_of_guardar_nuevo_password 001C                     ??_cancelar_cambio_fecha 0001  
                  __end_of_ingresar_comando DBF6                        RtccWriteTime@wasAlrm 0006  
                           _puntero_funcion 009E           __size_of_borrar_temporal_password 0010  
                      RtccWriteTime@wasWrEn 0007            __end_of_guardar_current_password DD48  
                 ?_borrar_temporal_password 0001               guardar_current_password@valor 0008  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                         ?_guardar_elemento 0024                      __size_of_RtccWriteTime 010C  
                         __size_of_Read_RTC 0122                  guardar_elemento@validacion 0028  
                  _cancelar_cambio_password DE86                                 _cambiar_dia E1DE  
                       __size_of_lcd_comand 000E                          ??_guardar_elemento 002E  
                               _cambiar_mes E42C               menu_cambiar_password@verifica 000D  
                     _menu_cambiar_password F0C6                            cambiar_mes@tecla 0037  
                             _actualiza_dia DD80                         __size_of_lcd_gotoxy 0024  
                                  ??___wmul 0005                            ?_convertir_a_int 000E  
                               __pdataBANK0 00F7                           __size_of_RtccWrOn 0012  
                           RtccWriteTime@di 0003                            __CFG_LPT1OSC$OFF 000000  
                       __size_of_borrar_dia 0010                         __size_of_borrar_mes 0010  
                           _cambiar_minutos E57C                                 _ALRMCFGbits 000F91  
                   __end_of_LCD_INIT_STRING FE99                  __size_of_desactivar_alarma 0026  
              __end_of_menu_cambiar_horario EC10                  ??_confirmar_nuevo_password 000C  
                               __pbssCOMRAM 0045                __size_of_actualizar_password 0098  
             __size_of_cancelar_cambio_hora 000A                         __end_of_borrar_anio DCA8  
                                 _Write_RTC F6A4                         __end_of_borrar_hora DC40  
                              _isdigit$2694 0002                           __size_of_caratula 00D6  
                           Delay1KTCYx@unit 0001                              fecha@valor_max 00A6  
                            fecha@valor_min 00A8                 ??_guardar_password_temporal 0008  
                  __size_of_guardar_comando 0060                           __size_of_lcd_init 0080  
          __size_of_mensaje_alarma_activada 002E       __end_of_confirmar_actualizar_password DFA6  
    __size_of_confirmar_actualizar_password 002C               _confirmar_actualizar_password DF7A  
                               sprintf@flag 0020                           __size_of_lcd_putc 004C  
         __size_of_desactivar_sonido_alarma 0016                  __end_of_menu_cambiar_fecha EFDC  
                               sprintf@prec 001B                     _borrar_current_password DC50  
                   __size_of_imprimir_tecla 0046                   ?_desactivar_sonido_alarma 0001  
                              fecha@minutes 00DC                                   __pnvBANK0 00EB  
                          _tamanio_password 0058                               _clear_display DE1E  
                          ___lwdiv@dividend 0001                          verficar_password@i 0005  
                            ?_actualiza_dia 0016                               ?_Delay100TCYx 0001  
          __end_of_guardar_tecla_presionada E946                    __size_of_accionar_alarma 006A  
                             __pmediumconst FE8A                                    ?___awdiv 0001  
                                  ?___awmod 0001                      _guardar_nuevo_password DD48  
           guardar_elemento_arreglo@arreglo 0001                           guardar_elemento@i 0031  
                                  ?___lwdiv 0001                                    ?___lwmod 0008  
                                 _encendida 008A                            ?_actualizar_hora 0016  
                   RtccWriteTime@tempMinSec 0008                             _obtener_dia_mes EFDC  
           guardar_elemento_arreglo@tamanio 0004                 guardar_nuevo_password@valor 0008  
                                 _lcd_putrs E18A                               _RtccWriteDate F3F0  
                   ??_activar_sonido_alarma 0001                               _RtccWriteTime F1C2  
                                  ?_isdigit 0001                        __CFG_RTCOSC$T1OSCREF 000000  
                   actualizar_hora@elemento 0016                     ?_menu_ingresar_password 0001  
                          _validar_password E50A                              __size_of_Setup 0048  
                                ?_Write_RTC 0001                            ___lwdiv@quotient 0005  
                          clear_display@pos 000B                                   fecha@hour 00D9  
                                  ?_sprintf 000D                                   fecha@year 00E2  
           ??_inicializar_intentos_fallidos 0001                            _RtccAlrmTimeDate 0100  
                  _guardar_elemento_arreglo E6DC                              ___wmul@product 0005  
                                  _LATAbits 000F89                                    _LATBbits 000F8A  
                                  _LATCbits 000F8B                              ?_clear_display 000B  
             confirmar_nuevo_password@valor 000B                                    _PIE3bits 000FA3  
                                 _segundo_d 005E                              ??_Delay100TCYx 0001  
                                 _segundo_u 00F6                      ?_menu_cambiar_password 0001  
                             ?_cambiar_anio 0001                               ?_cambiar_hora 0001  
                   __end_of_cambiar_minutos E5F0                                _new_password 00C5  
                          __CFG_WDTPS$32768 000000                                   _valor_max 00A2  
                                 _valor_min 00A4                 __size_of_actualiza_elemento 0016  
                        RtccWriteDate@wasOn 0005                   cambiar_minutos@validacion 0035  
                 guardar_tecla_presionada@i 003C                   _guardar_password_temporal DD64  
               __end_of_inicializar_teclado DF22                          _Rtcc_read_TimeDate 0108  
                            ?_RtccWriteDate 0001                                  ?_lcd_putrs 0009  
                               _borrar_anio DC96                           ___wmul@multiplier 0001  
                               _borrar_hora DC30                              ?_RtccWriteTime 0001  
         __size_of_guardar_current_password 001C                              caratula@titulo 0024  
        confirmar_actualizar_password@tecla 0039                   ?_guardar_current_password 0001  
                                 lcd_init@i 0005              __end_of_menu_ingresar_password ED5C  
                     __size_of_RtccReadDate 008E                                ??_lcd_comand 0005  
                                 lcd_putc@c 0008                       __size_of_RtccReadTime 006E  
                       imprimir_tecla@tecla 0038                                ??_lcd_gotoxy 0006  
                  _mostrar_guardar_password E002                    __end_of_inicializar_hora DDDC  
                              ??_borrar_dia 0001                                   copy_data0 E4D4  
                                 copy_data1 E4F4                                ??_borrar_mes 0001  
                 ??_borrar_current_password 0001                                    _Read_RTC F2CE  
                      _cambiar_minutos$1440 0038                                _tamanio_anio 00E5  
                              _tamanio_hora 0054                             ??_actualiza_dia 0016  
                            ??_cambiar_anio 0035                             _lcd_send_nibble E5F0  
                                  __Hrparam 0000                              ??_cambiar_hora 0035  
                      _menu_cambiar_horario EB7A                     __end_of_obtener_dia_mes F0C6  
                                  _RtccDate 004A              ?_confirmar_actualizar_password 0001  
                                  __Lrparam 0000                           ??_guardar_comando 0024  
                     _borrar_nuevo_password DCBA                                    _RtccTime 004E  
                                  _RtccWrOn DC60                          _funcion_pulsador_A 008C  
                        _funcion_pulsador_B 008E                          _funcion_pulsador_C 0090  
                        _funcion_pulsador_D 0092                          __end_of_lcd_comand DC10  
                     guardar_elemento@array 0024                       cambiar_dia@validacion 0035  
                     guardar_elemento@tecla 0030                       guardar_elemento@valor 0033  
             guardar_elemento@tamanio_array 0026                          __end_of_lcd_gotoxy DE86  
                              _RtccReadDate E9C8                            __size_of___awdiv 0096  
                          __size_of___awmod 0082                                _RtccReadTime E3BE  
               __end_of_mostrar_titulo_menu DD10                            __size_of___lwdiv 005C  
                       ingresar_comando@key 003B                 __size_of_actualizar_minutos 0020  
                          __size_of___lwmod 004C            ??_mostrar_guardar_nuevo_password 0039  
           ?_mostrar_guardar_nuevo_password 0001                          __end_of_borrar_dia DC30  
                        __end_of_borrar_mes DC20                           ??_accionar_alarma 0010  
          __end_of_confirmar_nuevo_password EAE4                                _RtccTimeDate 0060  
                                sprintf@val 001E                                    _activada 0084  
                                  _caratula EE30                            __size_of_isdigit 0022  
                           ___lwdiv@divisor 0003                      cambiar_anio@validacion 0035  
                               ??_Write_RTC 000E                             ___lwdiv@counter 0007  
         __size_of_guardar_tecla_presionada 0080                                    __ptext10 DBEC  
                                  __ptext11 DF7A                                    __ptext20 DD64  
                                  __ptext12 DF4E                                    __ptext21 DD48  
                                  __ptext13 E002                                    __ptext30 F9D2  
                                  __ptext22 E294                                    __ptext14 E2F4  
                                  __ptext31 DD9E                                    __ptext23 E064  
                                  __ptext15 E57C                                    __ptext40 DC50  
                                  __ptext32 ED5C                                    __ptext24 EC10  
                                  __ptext16 E1DE                                    __ptext41 DCBA  
                                  __ptext33 DE40                                    __ptext25 EA56  
                                  __ptext17 E42C                                    __ptext50 DDBC  
                                  __ptext42 DC40                                    __ptext34 DD80  
                                  __ptext26 DD2C                                    __ptext18 E7CA  
                                  __ptext51 DFA6                                    __ptext43 DC30  
                                  __ptext35 DCE2                                    __ptext27 E6DC  
                                  __ptext19 DF22                                    __ptext60 FB92  
                                  __ptext52 ECA8                                    __ptext44 DCA8  
                                  __ptext36 DDDC                                    __ptext28 EFDC  
                                  __ptext61 DDFC                                    __ptext53 E50A  
                                  __ptext45 DC20                                    __ptext37 DE86  
                                  __ptext29 E946                                    __ptext70 E846  
                                  __ptext62 DED0                                    __ptext54 DE1E  
                                  __ptext46 DC10                                    __ptext38 DBE2  
                                  __ptext71 DC84                                    __ptext63 E13E  
                                  __ptext55 DEF8                                    __ptext47 DC96  
                                  __ptext39 DBD8                                    __ptext80 DC60  
                                  __ptext72 DC02                                    __ptext64 E238  
                                  __ptext56 E666                                    __ptext48 DD10  
                                  __ptext81 F2CE                                    __ptext73 E032  
                                  __ptext65 E18A                                    __ptext57 DCCC  
                                  __ptext49 DEAA                                    __ptext82 E3BE  
                                  __ptext74 E5F0                                    __ptext66 E0F2  
                                  __ptext58 DBF6                                    __ptext83 E9C8  
                                  __ptext75 DC72                                    __ptext67 DE62  
                                  __ptext59 EE30                                    __ptext84 0000  
                                  __ptext76 F6A4                                    __ptext68 DBC8  
                                  __ptext77 EAE4                                    __ptext69 E0AA  
                                  __ptext78 F1C2                                    __ptext79 F3F0  
                 ?_guardar_tecla_presionada 003C                                    _lcd_init E846  
                                  _lcd_putc E0F2                     __size_of_borrar_minutos 0012  
                          __size_of_sprintf 02F8                     _mensaje_alarma_activada DFD4  
                ??_cancelar_cambio_password 0001                             ??_clear_display 000D  
                         ?_ingresar_comando 0001                      __size_of_lcd_send_byte 0032  
                            _imprimir_tecla E064              __size_of_cancelar_cambio_fecha 000A  
                                  fecha@day 00D6                               __size_of_atoi 00D4  
                             __size_of_main 01A8               __end_of_cancelar_cambio_fecha DBE2  
                        ??_ingresar_comando 003B                       ?_menu_cambiar_horario 0001  
                                  _minuto_d 00F4                                    _minuto_u 00F5  
     __end_of_inicializar_intentos_fallidos DC02      __size_of_inicializar_intentos_fallidos 000C  
             _inicializar_intentos_fallidos DBF6                                    _password 0068  
                       _actualizar_password EC10                  __end_of_inicializar_alarma E6DC  
                              ?_cambiar_dia 0001                                ?_cambiar_mes 0001  
                                  _temporal 00CC                            ?_cambiar_minutos 0001  
                                  atoi@sign 000B             __end_of_borrar_current_password DC60  
                             ??_Delay1KTCYx 0001                             ??_RtccWriteDate 0004  
                           ??_RtccWriteTime 0004                actualizar_password@confirmar 0011  
                               ??_lcd_putrs 000B                   __size_of_guardar_elemento 01C0  
                               _OSCTUNEbits 000F9B                                  _INTCONbits 000FF2  
                               _tamanio_dia 0052                        ?_actualizar_password 0001  
                               _tamanio_mes 0056                          RtccWriteTime@wasOn 0005  
                      __end_of_Delay100TCYx DC84                                    isdigit@c 0003  
                    __end_of_imprimir_tecla E0AA                                   sprintf@ap 001C  
                   __end_of_lcd_send_nibble E666                                   sprintf@sp 000D  
                          ___lwmod@dividend 0008                __end_of_cancelar_cambio_hora DBEC  
                    ?_borrar_nuevo_password 0001                     ?_guardar_nuevo_password 0001  
                                _OSCCONbits 000FD3                            ?_obtener_dia_mes 0001  
                  __end_of_validar_password E57C                       RtccWriteDate@tempYear 0007  
                         imprimir_tecla@aux 0024                          _menu_cambiar_fecha EF06  
                             _lcd_send_byte E032                                  _RTCCFGbits 000F3F  
                                  sprintf@c 0023                                    sprintf@f 000F  
                     ??_actualizar_password 0010                             ___lwmod@divisor 000A  
                 verficar_password@verifica 0001                         ?_menu_cambiar_fecha 0001  
                       __end_of_Delay1KTCYx DC96                             ___lwmod@counter 000C  
            __size_of_activar_sonido_alarma 0008                    __size_of_convertir_a_int 001E  
             __end_of_activar_sonido_alarma DBD0                        __end_of_cambiar_anio E846  
                ??_guardar_elemento_arreglo 0006                        actualizar_hora@valor 0018  
        __size_of_guardar_password_temporal 001C                        RtccWriteDate@wasAlrm 0006  
                      __end_of_cambiar_hora E354                        RtccWriteDate@wasWrEn 0009  
                 ??_mensaje_alarma_activada 000B                    _borrar_temporal_password DC40  
                           ?_imprimir_tecla 0001                     ??_menu_cambiar_password 000D  
                    ??_menu_cambiar_horario 000D              __end_of_guardar_nuevo_password DD64  
         __size_of_confirmar_nuevo_password 008E                   ?_confirmar_nuevo_password 0009  
                      ??_menu_cambiar_fecha 000D                       lcd_send_nibble@nibble 0002  
