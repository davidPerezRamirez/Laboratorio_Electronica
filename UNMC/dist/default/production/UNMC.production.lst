

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 11 20:20:26 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           	psect	idataBANK0
    76  00E0E0                     __pidataBANK0:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _comando
    80  00E0E0  78                 	db	120
    81  00E0E1  78                 	db	120
    82  00E0E2  00                 	db	0
    83                           
    84                           ;initializer for _activada
    85  00E0E3  0001               	dw	1
    86                           
    87                           ;initializer for _anio
    88  00E0E5  000F               	dw	15
    89                           
    90                           ;initializer for _dia
    91  00E0E7  0008               	dw	8
    92                           
    93                           ;initializer for _diasem
    94  00E0E9  0003               	dw	3
    95                           
    96                           ;initializer for _hora
    97  00E0EB  0012               	dw	18
    98                           
    99                           ;initializer for _mes
   100  00E0ED  0009               	dw	9
   101                           
   102                           ;initializer for _minuto
   103  00E0EF  001E               	dw	30
   104                           
   105                           ;initializer for _password
   106  00E0F1  31                 	db	49
   107  00E0F2  32                 	db	50
   108  00E0F3  33                 	db	51
   109  00E0F4  34                 	db	52
   110  00E0F5  35                 	db	53
   111  00E0F6  36                 	db	54
   112  00E0F7  00                 	db	0
   113                           
   114                           	psect	mediumconst
   115  00FEC2                     __pmediumconst:
   116                           	opt stack 0
   117  00FEC2  00                 	db	0
   118  00FEC3                     _dpowers:
   119                           	opt stack 0
   120  00FEC3  0001               	dw	1
   121  00FEC5  000A               	dw	10
   122  00FEC7  0064               	dw	100
   123  00FEC9  03E8               	dw	1000
   124  00FECB  2710               	dw	10000
   125  00FECD                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FECD                     _LCD_INIT_STRING:
   128                           	opt stack 0
   129  00FECD  28                 	db	40
   130  00FECE  0C                 	db	12
   131  00FECF  01                 	db	1
   132  00FED0  06                 	db	6
   133  00FED1                     __end_of_LCD_INIT_STRING:
   134                           	opt stack 0
   135  00FED1                     STR_23:
   136                           
   137                           ; BSR set to: 15
   138  00FED1  50                 	db	80	;'P'
   139  00FED2  61                 	db	97	;'a'
   140  00FED3  73                 	db	115	;'s'
   141  00FED4  73                 	db	115	;'s'
   142  00FED5  77                 	db	119	;'w'
   143  00FED6  6F                 	db	111	;'o'
   144  00FED7  72                 	db	114	;'r'
   145  00FED8  64                 	db	100	;'d'
   146  00FED9  20                 	db	32
   147  00FEDA  61                 	db	97	;'a'
   148  00FEDB  63                 	db	99	;'c'
   149  00FEDC  74                 	db	116	;'t'
   150  00FEDD  75                 	db	117	;'u'
   151  00FEDE  61                 	db	97	;'a'
   152  00FEDF  6C                 	db	108	;'l'
   153  00FEE0  3A                 	db	58	;':'
   154  00FEE1  20                 	db	32
   155  00FEE2  20                 	db	32
   156  00FEE3  20                 	db	32
   157  00FEE4  20                 	db	32
   158  00FEE5  20                 	db	32
   159  00FEE6  20                 	db	32
   160  00FEE7  20                 	db	32
   161  00FEE8  20                 	db	32
   162  00FEE9  20                 	db	32
   163  00FEEA  20                 	db	32
   164  00FEEB  00                 	db	0
   165  00FEEC                     STR_24:
   166                           
   167                           ; BSR set to: 15
   168  00FEEC  20                 	db	32
   169  00FEED  20                 	db	32
   170  00FEEE  20                 	db	32
   171  00FEEF  20                 	db	32
   172  00FEF0  20                 	db	32
   173  00FEF1  20                 	db	32
   174  00FEF2  20                 	db	32
   175  00FEF3  20                 	db	32
   176  00FEF4  20                 	db	32
   177  00FEF5  20                 	db	32
   178  00FEF6  20                 	db	32
   179  00FEF7  20                 	db	32
   180  00FEF8  20                 	db	32
   181  00FEF9  20                 	db	32
   182  00FEFA  20                 	db	32
   183  00FEFB  20                 	db	32
   184  00FEFC  20                 	db	32
   185  00FEFD  20                 	db	32
   186  00FEFE  20                 	db	32
   187  00FEFF  20                 	db	32
   188  00FF00  20                 	db	32
   189  00FF01  20                 	db	32
   190  00FF02  20                 	db	32
   191  00FF03  20                 	db	32
   192  00FF04  20                 	db	32
   193  00FF05  00                 	db	0
   194  00FF06                     STR_28:
   195                           
   196                           ; BSR set to: 15
   197  00FF06  43                 	db	67	;'C'
   198  00FF07  6F                 	db	111	;'o'
   199  00FF08  6E                 	db	110	;'n'
   200  00FF09  66                 	db	102	;'f'
   201  00FF0A  69                 	db	105	;'i'
   202  00FF0B  72                 	db	114	;'r'
   203  00FF0C  6D                 	db	109	;'m'
   204  00FF0D  65                 	db	101	;'e'
   205  00FF0E  20                 	db	32
   206  00FF0F  70                 	db	112	;'p'
   207  00FF10  61                 	db	97	;'a'
   208  00FF11  73                 	db	115	;'s'
   209  00FF12  73                 	db	115	;'s'
   210  00FF13  3A                 	db	58	;':'
   211  00FF14  20                 	db	32
   212  00FF15  20                 	db	32
   213  00FF16  20                 	db	32
   214  00FF17  20                 	db	32
   215  00FF18  20                 	db	32
   216  00FF19  20                 	db	32
   217  00FF1A  20                 	db	32
   218  00FF1B  20                 	db	32
   219  00FF1C  00                 	db	0
   220  00FF1D                     STR_20:
   221                           
   222                           ; BSR set to: 15
   223  00FF1D  49                 	db	73	;'I'
   224  00FF1E  6E                 	db	110	;'n'
   225  00FF1F  73                 	db	115	;'s'
   226  00FF20  65                 	db	101	;'e'
   227  00FF21  72                 	db	114	;'r'
   228  00FF22  74                 	db	116	;'t'
   229  00FF23  65                 	db	101	;'e'
   230  00FF24  20                 	db	32
   231  00FF25  6D                 	db	109	;'m'
   232  00FF26  69                 	db	105	;'i'
   233  00FF27  6E                 	db	110	;'n'
   234  00FF28  75                 	db	117	;'u'
   235  00FF29  74                 	db	116	;'t'
   236  00FF2A  6F                 	db	111	;'o'
   237  00FF2B  73                 	db	115	;'s'
   238  00FF2C  3A                 	db	58	;':'
   239  00FF2D  20                 	db	32
   240  00FF2E  20                 	db	32
   241  00FF2F  20                 	db	32
   242  00FF30  20                 	db	32
   243  00FF31  20                 	db	32
   244  00FF32  00                 	db	0
   245  00FF33                     STR_25:
   246                           
   247                           ; BSR set to: 15
   248  00FF33  4E                 	db	78	;'N'
   249  00FF34  75                 	db	117	;'u'
   250  00FF35  65                 	db	101	;'e'
   251  00FF36  76                 	db	118	;'v'
   252  00FF37  6F                 	db	111	;'o'
   253  00FF38  20                 	db	32
   254  00FF39  70                 	db	112	;'p'
   255  00FF3A  61                 	db	97	;'a'
   256  00FF3B  73                 	db	115	;'s'
   257  00FF3C  73                 	db	115	;'s'
   258  00FF3D  3A                 	db	58	;':'
   259  00FF3E  20                 	db	32
   260  00FF3F  20                 	db	32
   261  00FF40  20                 	db	32
   262  00FF41  20                 	db	32
   263  00FF42  20                 	db	32
   264  00FF43  20                 	db	32
   265  00FF44  20                 	db	32
   266  00FF45  20                 	db	32
   267  00FF46  00                 	db	0
   268  00FF47                     STR_21:
   269                           
   270                           ; BSR set to: 15
   271  00FF47  49                 	db	73	;'I'
   272  00FF48  6E                 	db	110	;'n'
   273  00FF49  73                 	db	115	;'s'
   274  00FF4A  65                 	db	101	;'e'
   275  00FF4B  72                 	db	114	;'r'
   276  00FF4C  74                 	db	116	;'t'
   277  00FF4D  65                 	db	101	;'e'
   278  00FF4E  20                 	db	32
   279  00FF4F  68                 	db	104	;'h'
   280  00FF50  6F                 	db	111	;'o'
   281  00FF51  72                 	db	114	;'r'
   282  00FF52  61                 	db	97	;'a'
   283  00FF53  3A                 	db	58	;':'
   284  00FF54  20                 	db	32
   285  00FF55  20                 	db	32
   286  00FF56  20                 	db	32
   287  00FF57  20                 	db	32
   288  00FF58  20                 	db	32
   289  00FF59  00                 	db	0
   290  00FF5A                     STR_15:
   291                           
   292                           ; BSR set to: 15
   293  00FF5A  49                 	db	73	;'I'
   294  00FF5B  6E                 	db	110	;'n'
   295  00FF5C  73                 	db	115	;'s'
   296  00FF5D  65                 	db	101	;'e'
   297  00FF5E  72                 	db	114	;'r'
   298  00FF5F  74                 	db	116	;'t'
   299  00FF60  65                 	db	101	;'e'
   300  00FF61  20                 	db	32
   301  00FF62  61                 	db	97	;'a'
   302  00FF63  6E                 	db	110	;'n'
   303  00FF64  69                 	db	105	;'i'
   304  00FF65  6F                 	db	111	;'o'
   305  00FF66  3A                 	db	58	;':'
   306  00FF67  20                 	db	32
   307  00FF68  20                 	db	32
   308  00FF69  20                 	db	32
   309  00FF6A  20                 	db	32
   310  00FF6B  20                 	db	32
   311  00FF6C  00                 	db	0
   312  00FF6D                     STR_17:
   313                           
   314                           ; BSR set to: 15
   315  00FF6D  49                 	db	73	;'I'
   316  00FF6E  6E                 	db	110	;'n'
   317  00FF6F  73                 	db	115	;'s'
   318  00FF70  65                 	db	101	;'e'
   319  00FF71  72                 	db	114	;'r'
   320  00FF72  74                 	db	116	;'t'
   321  00FF73  65                 	db	101	;'e'
   322  00FF74  20                 	db	32
   323  00FF75  64                 	db	100	;'d'
   324  00FF76  69                 	db	105	;'i'
   325  00FF77  61                 	db	97	;'a'
   326  00FF78  3A                 	db	58	;':'
   327  00FF79  20                 	db	32
   328  00FF7A  20                 	db	32
   329  00FF7B  20                 	db	32
   330  00FF7C  20                 	db	32
   331  00FF7D  20                 	db	32
   332  00FF7E  00                 	db	0
   333  00FF7F                     STR_16:
   334                           
   335                           ; BSR set to: 15
   336  00FF7F  49                 	db	73	;'I'
   337  00FF80  6E                 	db	110	;'n'
   338  00FF81  73                 	db	115	;'s'
   339  00FF82  65                 	db	101	;'e'
   340  00FF83  72                 	db	114	;'r'
   341  00FF84  74                 	db	116	;'t'
   342  00FF85  65                 	db	101	;'e'
   343  00FF86  20                 	db	32
   344  00FF87  6D                 	db	109	;'m'
   345  00FF88  65                 	db	101	;'e'
   346  00FF89  73                 	db	115	;'s'
   347  00FF8A  3A                 	db	58	;':'
   348  00FF8B  20                 	db	32
   349  00FF8C  20                 	db	32
   350  00FF8D  20                 	db	32
   351  00FF8E  20                 	db	32
   352  00FF8F  20                 	db	32
   353  00FF90  00                 	db	0
   354  00FF91                     STR_5:
   355                           
   356                           ; BSR set to: 15
   357  00FF91  49                 	db	73	;'I'
   358  00FF92  6E                 	db	110	;'n'
   359  00FF93  73                 	db	115	;'s'
   360  00FF94  65                 	db	101	;'e'
   361  00FF95  72                 	db	114	;'r'
   362  00FF96  74                 	db	116	;'t'
   363  00FF97  65                 	db	101	;'e'
   364  00FF98  20                 	db	32
   365  00FF99  70                 	db	112	;'p'
   366  00FF9A  61                 	db	97	;'a'
   367  00FF9B  73                 	db	115	;'s'
   368  00FF9C  73                 	db	115	;'s'
   369  00FF9D  77                 	db	119	;'w'
   370  00FF9E  6F                 	db	111	;'o'
   371  00FF9F  72                 	db	114	;'r'
   372  00FFA0  64                 	db	100	;'d'
   373  00FFA1  00                 	db	0
   374  00FFA2                     STR_1:
   375                           
   376                           ; BSR set to: 15
   377  00FFA2  25                 	db	37
   378  00FFA3  30                 	db	48	;'0'
   379  00FFA4  32                 	db	50	;'2'
   380  00FFA5  75                 	db	117	;'u'
   381  00FFA6  2F                 	db	47
   382  00FFA7  25                 	db	37
   383  00FFA8  30                 	db	48	;'0'
   384  00FFA9  32                 	db	50	;'2'
   385  00FFAA  75                 	db	117	;'u'
   386  00FFAB  2F                 	db	47
   387  00FFAC  25                 	db	37
   388  00FFAD  30                 	db	48	;'0'
   389  00FFAE  32                 	db	50	;'2'
   390  00FFAF  75                 	db	117	;'u'
   391  00FFB0  00                 	db	0
   392  00FFB1                     STR_2:
   393                           
   394                           ; BSR set to: 15
   395  00FFB1  25                 	db	37
   396  00FFB2  30                 	db	48	;'0'
   397  00FFB3  32                 	db	50	;'2'
   398  00FFB4  75                 	db	117	;'u'
   399  00FFB5  3A                 	db	58	;':'
   400  00FFB6  25                 	db	37
   401  00FFB7  30                 	db	48	;'0'
   402  00FFB8  32                 	db	50	;'2'
   403  00FFB9  75                 	db	117	;'u'
   404  00FFBA  3A                 	db	58	;':'
   405  00FFBB  25                 	db	37
   406  00FFBC  30                 	db	48	;'0'
   407  00FFBD  32                 	db	50	;'2'
   408  00FFBE  75                 	db	117	;'u'
   409  00FFBF  00                 	db	0
   410  00FFC0                     STR_6:
   411                           
   412                           ; BSR set to: 15
   413  00FFC0  45                 	db	69	;'E'
   414  00FFC1  52                 	db	82	;'R'
   415  00FFC2  52                 	db	82	;'R'
   416  00FFC3  4F                 	db	79	;'O'
   417  00FFC4  52                 	db	82	;'R'
   418  00FFC5  20                 	db	32
   419  00FFC6  70                 	db	112	;'p'
   420  00FFC7  61                 	db	97	;'a'
   421  00FFC8  73                 	db	115	;'s'
   422  00FFC9  73                 	db	115	;'s'
   423  00FFCA  00                 	db	0
   424  00FFCB                     STR_12:
   425                           
   426                           ; BSR set to: 15
   427  00FFCB  57                 	db	87	;'W'
   428  00FFCC  65                 	db	101	;'e'
   429  00FFCD  6C                 	db	108	;'l'
   430  00FFCE  63                 	db	99	;'c'
   431  00FFCF  6F                 	db	111	;'o'
   432  00FFD0  6D                 	db	109	;'m'
   433  00FFD1  65                 	db	101	;'e'
   434  00FFD2  00                 	db	0
   435  00FFD3                     STR_7:
   436                           
   437                           ; BSR set to: 15
   438  00FFD3  25                 	db	37
   439  00FFD4  30                 	db	48	;'0'
   440  00FFD5  31                 	db	49	;'1'
   441  00FFD6  75                 	db	117	;'u'
   442  00FFD7  00                 	db	0
   443  00FFD8                     STR_4:
   444                           
   445                           ; BSR set to: 15
   446  00FFD8  4F                 	db	79	;'O'
   447  00FFD9  46                 	db	70	;'F'
   448  00FFDA  46                 	db	70	;'F'
   449  00FFDB  00                 	db	0
   450  00FFDC                     STR_22:
   451                           
   452                           ; BSR set to: 15
   453  00FFDC  30                 	db	48	;'0'
   454  00FFDD  30                 	db	48	;'0'
   455  00FFDE  00                 	db	0
   456  00FFDF                     STR_13:
   457                           
   458                           ; BSR set to: 15
   459  00FFDF  30                 	db	48	;'0'
   460  00FFE0  31                 	db	49	;'1'
   461  00FFE1  00                 	db	0
   462  00FFE2                     STR_18:
   463                           
   464                           ; BSR set to: 15
   465  00FFE2  30                 	db	48	;'0'
   466  00FFE3  32                 	db	50	;'2'
   467  00FFE4  00                 	db	0
   468  00FFE5                     STR_3:
   469                           
   470                           ; BSR set to: 15
   471  00FFE5  4F                 	db	79	;'O'
   472  00FFE6  4E                 	db	78	;'N'
   473  00FFE7  00                 	db	0
   474  00FFE8                     STR_11:
   475                           
   476                           ; BSR set to: 15
   477  00FFE8  78                 	db	120	;'x'
   478  00FFE9  78                 	db	120	;'x'
   479  00FFEA  00                 	db	0
   480  00FFEB                     STR_37:
   481                           
   482                           ; BSR set to: 15
   483  00FFEB  23                 	db	35
   484  00FFEC  00                 	db	0
   485  00FFED                     STR_32:
   486                           
   487                           ; BSR set to: 15
   488  00FFED  2A                 	db	42
   489  00FFEE  00                 	db	0
   490  00FFEF                     STR_33:
   491                           
   492                           ; BSR set to: 15
   493  00FFEF  41                 	db	65	;'A'
   494  00FFF0  00                 	db	0
   495  00FFF1                     STR_34:
   496                           
   497                           ; BSR set to: 15
   498  00FFF1  42                 	db	66	;'B'
   499  00FFF2  00                 	db	0
   500  00FFF3                     STR_35:
   501                           
   502                           ; BSR set to: 15
   503  00FFF3  43                 	db	67	;'C'
   504  00FFF4  00                 	db	0
   505  00FFF5                     STR_38:
   506                           
   507                           ; BSR set to: 15
   508  00FFF5  44                 	db	68	;'D'
   509  00FFF6  00                 	db	0
   510  0000                     
   511                           ; #config settings
   512  00FFF7  00                 	db	0	; dummy byte at the end
   513  0000                     
   514                           	psect	nvCOMRAM
   515  00005E                     __pnvCOMRAM:
   516                           	opt stack 0
   517  00005E                     _segundo_d:
   518                           	opt stack 0
   519  00005E                     	ds	1
   520                           
   521                           	psect	nvBANK0
   522  0000EE                     __pnvBANK0:
   523                           	opt stack 0
   524  0000EE                     _anio_d:
   525                           	opt stack 0
   526  0000EE                     	ds	1
   527  0000EF                     _anio_u:
   528                           	opt stack 0
   529  0000EF                     	ds	1
   530  0000F0                     _dia_semana:
   531                           	opt stack 0
   532  0000F0                     	ds	1
   533  0000F1                     _fecha_d:
   534                           	opt stack 0
   535  0000F1                     	ds	1
   536  0000F2                     _fecha_u:
   537                           	opt stack 0
   538  0000F2                     	ds	1
   539  0000F3                     _hora_d:
   540                           	opt stack 0
   541  0000F3                     	ds	1
   542  0000F4                     _hora_u:
   543                           	opt stack 0
   544  0000F4                     	ds	1
   545  0000F5                     _mes_d:
   546                           	opt stack 0
   547  0000F5                     	ds	1
   548  0000F6                     _mes_u:
   549                           	opt stack 0
   550  0000F6                     	ds	1
   551  0000F7                     _minuto_d:
   552                           	opt stack 0
   553  0000F7                     	ds	1
   554  0000F8                     _minuto_u:
   555                           	opt stack 0
   556  0000F8                     	ds	1
   557  0000F9                     _segundo_u:
   558                           	opt stack 0
   559  0000F9                     	ds	1
   560  0000                     _ANCON0	set	3912
   561  0000                     _ANCON1	set	3913
   562  0000                     _RTCCFG	set	3903
   563  0000                     _RTCCFGbits	set	3903
   564  0000                     _ADCON0	set	4034
   565  0000                     _ADCON1	set	4033
   566  0000                     _ALRMCFGbits	set	3985
   567  0000                     _EECON2	set	4007
   568  0000                     _INTCONbits	set	4082
   569  0000                     _LATAbits	set	3977
   570  0000                     _LATBbits	set	3978
   571  0000                     _OSCCONbits	set	4051
   572  0000                     _OSCTUNEbits	set	3995
   573  0000                     _PIE3bits	set	4003
   574  0000                     _PORTAbits	set	3968
   575  0000                     _PORTCbits	set	3970
   576  0000                     _RTCVALH	set	3993
   577  0000                     _RTCVALL	set	3992
   578  0000                     _T1CONbits	set	4045
   579  0000                     _TRISA	set	3986
   580  0000                     _TRISB	set	3987
   581  0000                     _TRISBbits	set	3987
   582  0000                     _TRISC	set	3988
   583                           
   584                           	psect	cinit
   585  00E2E8                     __pcinit:
   586                           	opt stack 0
   587  00E2E8                     start_initialization:
   588                           	opt stack 0
   589  00E2E8                     __initialization:
   590                           	opt stack 0
   591                           
   592                           ; Clear objects allocated to BANK0 (118 bytes)
   593  00E2E8  EE00  F060         	lfsr	0,__pbssBANK0
   594  00E2EC  0E76               	movlw	118
   595  00E2EE                     clear_0:
   596  00E2EE  6AEE               	clrf	postinc0,c
   597  00E2F0  06E8               	decf	wreg,f,c
   598  00E2F2  E1FD               	bnz	clear_0
   599                           
   600                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   601  00E2F4  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   602                           
   603                           ; Clear objects allocated to COMRAM (11 bytes)
   604  00E2F6  EE00  F053         	lfsr	0,__pbssCOMRAM
   605  00E2FA  0E0B               	movlw	11
   606  00E2FC                     clear_1:
   607  00E2FC  6AEE               	clrf	postinc0,c
   608  00E2FE  06E8               	decf	wreg,f,c
   609  00E300  E1FD               	bnz	clear_1
   610                           
   611                           ; Initialize objects allocated to BANK0 (24 bytes)
   612                           ; load TBLPTR registers with __pidataBANK0
   613  00E302  0EE0               	movlw	low __pidataBANK0
   614  00E304  6EF6               	movwf	tblptrl,c
   615  00E306  0EE0               	movlw	high __pidataBANK0
   616  00E308  6EF7               	movwf	tblptrh,c
   617  00E30A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   618  00E30C  6EF8               	movwf	tblptru,c
   619  00E30E  EE00  F0D6         	lfsr	0,__pdataBANK0
   620  00E312  EE10 F018          	lfsr	1,24
   621  00E316                     copy_data0:
   622  00E316  0009               	tblrd		*+
   623  00E318  CFF5 FFEE          	movff	tablat,postinc0
   624  00E31C  50E5               	movf	postdec1,w,c
   625  00E31E  50E1               	movf	fsr1l,w,c
   626  00E320  E1FA               	bnz	copy_data0
   627  00E322                     end_of_initialization:
   628                           	opt stack 0
   629  00E322                     __end_of__initialization:
   630                           	opt stack 0
   631  00E322  0E00               	movlw	low (__Lmediumconst shr (0+16))
   632  00E324  6EF8               	movwf	tblptru,c
   633  00E326  0100               	movlb	0
   634  00E328  EFF8  F07D         	goto	_main	;jump to C main() function
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	bitbssCOMRAM
   645  0002F8                     __pbitbssCOMRAM:
   646                           	opt stack 0
   647  0002F8                     _flag:
   648                           	opt stack 0
   649  0002F8                     	ds	1
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           tblptrl	equ	0xFF6
   653                           tablat	equ	0xFF5
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postdec1	equ	0xFE5
   657                           fsr1l	equ	0xFE1
   658                           
   659                           	psect	bssCOMRAM
   660  000053                     __pbssCOMRAM:
   661                           	opt stack 0
   662  000053                     _tamanio_new_password:
   663                           	opt stack 0
   664  000053                     	ds	2
   665  000055                     _tamanio_password:
   666                           	opt stack 0
   667  000055                     	ds	2
   668  000057                     _key:
   669                           	opt stack 0
   670  000057                     	ds	1
   671  000058                     _tamanio_dia:
   672                           	opt stack 0
   673  000058                     	ds	2
   674  00005A                     _tamanio_hora:
   675                           	opt stack 0
   676  00005A                     	ds	2
   677  00005C                     _tamanio_mes:
   678                           	opt stack 0
   679  00005C                     	ds	2
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postdec1	equ	0xFE5
   687                           fsr1l	equ	0xFE1
   688                           
   689                           	psect	bssBANK0
   690  000060                     __pbssBANK0:
   691                           	opt stack 0
   692  000060                     _RtccAlrmTimeDate:
   693                           	opt stack 0
   694  000060                     	ds	8
   695  000068                     _RtccTimeDate:
   696                           	opt stack 0
   697  000068                     	ds	8
   698  000070                     _Rtcc_read_TimeDate:
   699                           	opt stack 0
   700  000070                     	ds	8
   701  000078                     _current_password:
   702                           	opt stack 0
   703  000078                     	ds	7
   704  00007F                     _new_password:
   705                           	opt stack 0
   706  00007F                     	ds	7
   707  000086                     _temporal:
   708                           	opt stack 0
   709  000086                     	ds	7
   710  00008D                     _RtccTimeVal:
   711                           	opt stack 0
   712  00008D                     	ds	4
   713  000091                     _a:
   714                           	opt stack 0
   715  000091                     	ds	2
   716  000093                     _autorizado:
   717                           	opt stack 0
   718  000093                     	ds	2
   719  000095                     _b:
   720                           	opt stack 0
   721  000095                     	ds	2
   722  000097                     _c:
   723                           	opt stack 0
   724  000097                     	ds	2
   725  000099                     _encendida:
   726                           	opt stack 0
   727  000099                     	ds	2
   728  00009B                     _i:
   729                           	opt stack 0
   730  00009B                     	ds	2
   731  00009D                     _j:
   732                           	opt stack 0
   733  00009D                     	ds	2
   734  00009F                     _k:
   735                           	opt stack 0
   736  00009F                     	ds	2
   737  0000A1                     _ocultar_teclas:
   738                           	opt stack 0
   739  0000A1                     	ds	2
   740  0000A3                     _segundo:
   741                           	opt stack 0
   742  0000A3                     	ds	2
   743  0000A5                     _tamanio_comando:
   744                           	opt stack 0
   745  0000A5                     	ds	2
   746  0000A7                     _buffer2:
   747                           	opt stack 0
   748  0000A7                     	ds	20
   749  0000BB                     _RtccDate:
   750                           	opt stack 0
   751  0000BB                     	ds	4
   752  0000BF                     _RtccTime:
   753                           	opt stack 0
   754  0000BF                     	ds	4
   755  0000C3                     _day:
   756                           	opt stack 0
   757  0000C3                     	ds	3
   758  0000C6                     _hour:
   759                           	opt stack 0
   760  0000C6                     	ds	3
   761  0000C9                     _minutes:
   762                           	opt stack 0
   763  0000C9                     	ds	3
   764  0000CC                     _month:
   765                           	opt stack 0
   766  0000CC                     	ds	3
   767  0000CF                     _year:
   768                           	opt stack 0
   769  0000CF                     	ds	3
   770  0000D2                     _tamanio_anio:
   771                           	opt stack 0
   772  0000D2                     	ds	2
   773  0000D4                     _tamanio_minutos:
   774                           	opt stack 0
   775  0000D4                     	ds	2
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           postdec1	equ	0xFE5
   783                           fsr1l	equ	0xFE1
   784                           
   785                           	psect	dataBANK0
   786  0000D6                     __pdataBANK0:
   787                           	opt stack 0
   788  0000D6                     _comando:
   789                           	opt stack 0
   790  0000D6                     	ds	3
   791  0000D9                     _activada:
   792                           	opt stack 0
   793  0000D9                     	ds	2
   794  0000DB                     _anio:
   795                           	opt stack 0
   796  0000DB                     	ds	2
   797  0000DD                     _dia:
   798                           	opt stack 0
   799  0000DD                     	ds	2
   800  0000DF                     _diasem:
   801                           	opt stack 0
   802  0000DF                     	ds	2
   803  0000E1                     _hora:
   804                           	opt stack 0
   805  0000E1                     	ds	2
   806  0000E3                     _mes:
   807                           	opt stack 0
   808  0000E3                     	ds	2
   809  0000E5                     _minuto:
   810                           	opt stack 0
   811  0000E5                     	ds	2
   812  0000E7                     _password:
   813                           	opt stack 0
   814  0000E7                     	ds	7
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           postdec1	equ	0xFE5
   822                           fsr1l	equ	0xFE1
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	opt stack 0
   827  000001                     ??_guardar_current_password:
   828  000001                     ??_guardar_password_temporal:
   829  000001                     ??_guardar_nuevo_password:
   830  000001                     ??_isdigit:
   831  000001                     ??_lcd_send_nibble:
   832  000001                     ?___wmul:
   833                           	opt stack 0
   834  000001                     ?___awdiv:
   835                           	opt stack 0
   836  000001                     ?___lwdiv:
   837                           	opt stack 0
   838  000001                     Delay100TCYx@unit:
   839                           	opt stack 0
   840  000001                     Delay1KTCYx@unit:
   841                           	opt stack 0
   842  000001                     validar_comando@candidato:
   843                           	opt stack 0
   844  000001                     verficar_password@verifica:
   845                           	opt stack 0
   846  000001                     actualizar_password@confirmar:
   847                           	opt stack 0
   848  000001                     RtccReadDate@pDt:
   849                           	opt stack 0
   850  000001                     RtccReadTime@pTm:
   851                           	opt stack 0
   852  000001                     RtccWriteDate@pDt:
   853                           	opt stack 0
   854  000001                     RtccWriteTime@pTm:
   855                           	opt stack 0
   856  000001                     ___wmul@multiplier:
   857                           	opt stack 0
   858  000001                     ___awdiv@dividend:
   859                           	opt stack 0
   860  000001                     ___lwdiv@dividend:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x0
   864  000001                     	ds	1
   865  000002                     lcd_send_nibble@nibble:
   866                           	opt stack 0
   867  000002                     _isdigit$2610:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x1
   871  000002                     	ds	1
   872  000003                     lcd_send_byte@n:
   873                           	opt stack 0
   874  000003                     guardar_current_password@valor:
   875                           	opt stack 0
   876  000003                     guardar_password_temporal@valor:
   877                           	opt stack 0
   878  000003                     guardar_nuevo_password@valor:
   879                           	opt stack 0
   880  000003                     actualizar_password@valor:
   881                           	opt stack 0
   882  000003                     RtccWriteDate@di:
   883                           	opt stack 0
   884  000003                     RtccWriteTime@di:
   885                           	opt stack 0
   886  000003                     isdigit@c:
   887                           	opt stack 0
   888  000003                     validar_comando@validar:
   889                           	opt stack 0
   890  000003                     validar_password@i:
   891                           	opt stack 0
   892  000003                     ___wmul@multiplicand:
   893                           	opt stack 0
   894  000003                     ___awdiv@divisor:
   895                           	opt stack 0
   896  000003                     ___lwdiv@divisor:
   897                           	opt stack 0
   898  000003                     RtccReadDate@rTD1:
   899                           	opt stack 0
   900  000003                     RtccReadTime@rTD1:
   901                           	opt stack 0
   902                           
   903                           ; 8 bytes @ 0x2
   904  000003                     	ds	1
   905  000004                     ??_actualizar_password:
   906  000004                     lcd_send_byte@address:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x3
   910  000004                     	ds	1
   911  000005                     ??_validar_comando:
   912  000005                     lcd_init@i:
   913                           	opt stack 0
   914  000005                     lcd_gotoxy@y:
   915                           	opt stack 0
   916  000005                     lcd_comand@d:
   917                           	opt stack 0
   918  000005                     RtccWriteDate@wasOn:
   919                           	opt stack 0
   920  000005                     RtccWriteTime@wasOn:
   921                           	opt stack 0
   922  000005                     ___awdiv@counter:
   923                           	opt stack 0
   924  000005                     verficar_password@i:
   925                           	opt stack 0
   926  000005                     ___wmul@product:
   927                           	opt stack 0
   928  000005                     ___lwdiv@quotient:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x4
   932  000005                     	ds	1
   933  000006                     lcd_gotoxy@x:
   934                           	opt stack 0
   935  000006                     RtccWriteDate@wasAlrm:
   936                           	opt stack 0
   937  000006                     RtccWriteTime@wasAlrm:
   938                           	opt stack 0
   939  000006                     ___awdiv@sign:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x5
   943  000006                     	ds	1
   944  000007                     ?_atoi:
   945                           	opt stack 0
   946  000007                     lcd_gotoxy@address:
   947                           	opt stack 0
   948  000007                     RtccWriteTime@wasWrEn:
   949                           	opt stack 0
   950  000007                     ___lwdiv@counter:
   951                           	opt stack 0
   952  000007                     RtccWriteDate@tempYear:
   953                           	opt stack 0
   954  000007                     atoi@s:
   955                           	opt stack 0
   956  000007                     ___awdiv@quotient:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x6
   960  000007                     	ds	1
   961  000008                     ?___lwmod:
   962                           	opt stack 0
   963  000008                     lcd_putc@c:
   964                           	opt stack 0
   965  000008                     validar_comando@i:
   966                           	opt stack 0
   967  000008                     RtccWriteTime@tempMinSec:
   968                           	opt stack 0
   969  000008                     ___lwmod@dividend:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x7
   973  000008                     	ds	1
   974  000009                     ??_atoi:
   975  000009                     RtccWriteDate@wasWrEn:
   976                           	opt stack 0
   977  000009                     lcd_putrs@ptr:
   978                           	opt stack 0
   979  000009                     actualizar_password@j:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x8
   983  000009                     	ds	1
   984  00000A                     RtccWriteDate@tempDayMonth:
   985                           	opt stack 0
   986  00000A                     RtccWriteTime@tempHourWDay:
   987                           	opt stack 0
   988  00000A                     ___lwmod@divisor:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x9
   992  00000A                     	ds	1
   993  00000B                     ??_ingresar_password:
   994  00000B                     atoi@sign:
   995                           	opt stack 0
   996  00000B                     mostrar_menu@titulo_menu:
   997                           	opt stack 0
   998  00000B                     actualizar_password@j_1605:
   999                           	opt stack 0
  1000  00000B                     RtccReadDate@rTD0:
  1001                           	opt stack 0
  1002  00000B                     RtccReadTime@rTD0:
  1003                           	opt stack 0
  1004                           
  1005                           ; 8 bytes @ 0xA
  1006  00000B                     	ds	1
  1007  00000C                     ___lwmod@counter:
  1008                           	opt stack 0
  1009  00000C                     RtccWriteDate@tempHourWDay:
  1010                           	opt stack 0
  1011  00000C                     atoi@a:
  1012                           	opt stack 0
  1013  00000C                     ingresar_password@clear:
  1014                           	opt stack 0
  1015                           
  1016                           ; 16 bytes @ 0xB
  1017  00000C                     	ds	1
  1018  00000D                     ?_sprintf:
  1019                           	opt stack 0
  1020  00000D                     sprintf@sp:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0xC
  1024  00000D                     	ds	1
  1025  00000E                     convertir_a_int_fecha@array:
  1026                           	opt stack 0
  1027  00000E                     convertir_a_int_hora@array:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0xD
  1031  00000E                     	ds	1
  1032  00000F                     sprintf@f:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0xE
  1036  00000F                     	ds	1
  1037  000010                     convertir_a_int_fecha@valor:
  1038                           	opt stack 0
  1039  000010                     convertir_a_int_hora@valor:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xF
  1043  000010                     	ds	2
  1044  000012                     
  1045                           ; 0 bytes @ 0x11
  1046  000012                     	ds	1
  1047  000013                     
  1048                           ; 0 bytes @ 0x12
  1049  000013                     	ds	4
  1050  000017                     ??_sprintf:
  1051                           
  1052                           ; 0 bytes @ 0x16
  1053  000017                     	ds	4
  1054  00001B                     sprintf@ap:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x1A
  1058  00001B                     	ds	1
  1059  00001C                     ingresar_password@i_561:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x1B
  1063  00001C                     	ds	1
  1064  00001D                     sprintf@flag:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x1C
  1068  00001D                     	ds	1
  1069  00001E                     ingresar_password@i:
  1070                           	opt stack 0
  1071  00001E                     sprintf@val:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x1D
  1075  00001E                     	ds	2
  1076  000020                     sprintf@prec:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x1F
  1080  000020                     	ds	1
  1081  000021                     sprintf@width:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x20
  1085  000021                     	ds	2
  1086  000023                     sprintf@c:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x22
  1090  000023                     	ds	1
  1091  000024                     ??_guardar_comando:
  1092  000024                     caratula@titulo:
  1093                           	opt stack 0
  1094  000024                     guardar_elemento_fecha@array:
  1095                           	opt stack 0
  1096  000024                     guardar_elemento_hora@array:
  1097                           	opt stack 0
  1098  000024                     imprimir_tecla@aux:
  1099                           	opt stack 0
  1100                           
  1101                           ; 20 bytes @ 0x23
  1102  000024                     	ds	2
  1103  000026                     _caratula$523:
  1104                           	opt stack 0
  1105  000026                     guardar_elemento_fecha@tamanio_array:
  1106                           	opt stack 0
  1107  000026                     guardar_elemento_hora@tamanio_array:
  1108                           	opt stack 0
  1109  000026                     guardar_comando@aux:
  1110                           	opt stack 0
  1111                           
  1112                           ; 20 bytes @ 0x25
  1113  000026                     	ds	2
  1114  000028                     ??_guardar_elemento_fecha:
  1115  000028                     ??_guardar_elemento_hora:
  1116                           
  1117                           ; 0 bytes @ 0x27
  1118  000028                     	ds	2
  1119  00002A                     guardar_elemento_fecha@tecla:
  1120                           	opt stack 0
  1121  00002A                     guardar_elemento_hora@tecla:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x29
  1125  00002A                     	ds	1
  1126  00002B                     ??_cambiar_anio:
  1127  00002B                     ??_cambiar_mes:
  1128  00002B                     ??_cambiar_dia:
  1129  00002B                     ??_cambiar_minutos:
  1130  00002B                     ??_cambiar_hora:
  1131                           
  1132                           ; 0 bytes @ 0x2A
  1133  00002B                     	ds	1
  1134  00002C                     cambiar_dia@tecla:
  1135                           	opt stack 0
  1136  00002C                     cambiar_mes@tecla:
  1137                           	opt stack 0
  1138  00002C                     cambiar_anio@tecla:
  1139                           	opt stack 0
  1140  00002C                     cambiar_hora@tecla:
  1141                           	opt stack 0
  1142  00002C                     cambiar_minutos@tecla:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x2B
  1146  00002C                     	ds	1
  1147  00002D                     cambiar_dia@i:
  1148                           	opt stack 0
  1149  00002D                     cambiar_mes@i:
  1150                           	opt stack 0
  1151  00002D                     cambiar_anio@i:
  1152                           	opt stack 0
  1153  00002D                     cambiar_hora@i:
  1154                           	opt stack 0
  1155  00002D                     cambiar_minutos@i:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x2C
  1159  00002D                     	ds	2
  1160  00002F                     cambiar_dia@valor:
  1161                           	opt stack 0
  1162  00002F                     cambiar_mes@valor:
  1163                           	opt stack 0
  1164  00002F                     cambiar_anio@valor:
  1165                           	opt stack 0
  1166  00002F                     cambiar_hora@valor:
  1167                           	opt stack 0
  1168  00002F                     cambiar_minutos@valor:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x2E
  1172  00002F                     	ds	9
  1173  000038                     imprimir_tecla@tecla:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x37
  1177  000038                     	ds	1
  1178  000039                     mostrar_guardar_password@tecla:
  1179                           	opt stack 0
  1180  000039                     mostrar_guardar_temporal_password@tecla:
  1181                           	opt stack 0
  1182  000039                     mostrar_guardar_nuevo_password@tecla:
  1183                           	opt stack 0
  1184  000039                     confirmar_actualizar_password@tecla:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x38
  1188  000039                     	ds	1
  1189  00003A                     guardar_comando@tecla:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x39
  1193  00003A                     	ds	1
  1194  00003B                     ingresar_comando@key:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x3A
  1198  00003B                     	ds	1
  1199  00003C                     guardar_tecla_presionada@letra:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x3B
  1203  00003C                     	ds	2
  1204  00003E                     guardar_tecla_presionada@i:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x3D
  1208  00003E                     	ds	2
  1209  000040                     guardar_tecla_presionada@doit:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x3F
  1213  000040                     	ds	2
  1214  000042                     leer_teclado@ocultar:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x41
  1218  000042                     	ds	2
  1219  000044                     leer_teclado@doit:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x43
  1223  000044                     	ds	2
  1224  000046                     ??_leer_teclado:
  1225                           
  1226                           ; 0 bytes @ 0x45
  1227  000046                     	ds	1
  1228  000047                     leer_teclado@i:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x46
  1232  000047                     	ds	2
  1233  000049                     main@confirmar:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x48
  1237  000049                     	ds	2
  1238  00004B                     main@ocultar_teclas:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x4A
  1242  00004B                     	ds	2
  1243  00004D                     main@verifica:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x4C
  1247  00004D                     	ds	2
  1248  00004F                     main@puntero_funcion:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x4E
  1252  00004F                     	ds	2
  1253  000051                     main@validacion:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x50
  1257  000051                     	ds	2
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267 ;;
  1268 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1269 ;;
  1270 ;; *************** function _main *****************
  1271 ;; Defined at:
  1272 ;;		line 154 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  validacion      2   80[COMRAM] int 
  1277 ;;  puntero_func    2   78[COMRAM] PTR unsigned char 
  1278 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  1279 ;;		 -> cambiar_anio(0), ingresar_comando(2), confirmar_actualizar_password(2), mostrar_guardar_nuevo_password(2), 
  1280 ;;		 -> mostrar_guardar_temporal_password(2), 
  1281 ;;  verifica        2   76[COMRAM] int 
  1282 ;;  ocultar_tecl    2   74[COMRAM] int 
  1283 ;;  confirmar       2   72[COMRAM] int 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2  224[None  ] int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1294 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1296 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1297 ;;Total ram usage:       10 bytes
  1298 ;; Hardware stack levels required when called:    9
  1299 ;; This function calls:
  1300 ;;		_Read_RTC
  1301 ;;		_Setup
  1302 ;;		_actualizar_password
  1303 ;;		_caratula
  1304 ;;		_ingresar_password
  1305 ;;		_lcd_gotoxy
  1306 ;;		_lcd_putrs
  1307 ;;		_leer_teclado
  1308 ;;		_mostrar_menu
  1309 ;;		_restaurar_comando
  1310 ;;		_sprintf
  1311 ;;		_validar_comando
  1312 ;;		_verficar_password
  1313 ;; This function is called by:
  1314 ;;		Startup code after reset
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text0
  1319  00FBF0                     __ptext0:
  1320                           	opt stack 0
  1321  00FBF0                     _main:
  1322                           	opt stack 22
  1323                           
  1324                           ;main.c: 156: Setup();
  1325                           
  1326                           ; BSR set to: 15
  1327                           ;incstack = 0
  1328  00FBF0  EC22  F072         	call	_Setup	;wreg free
  1329                           
  1330                           ;main.c: 157: restaurar_comando();
  1331  00FBF4  EC7C  F070         	call	_restaurar_comando	;wreg free
  1332                           
  1333                           ;main.c: 159: int ocultar_teclas = 1;
  1334  00FBF8  0E00               	movlw	0
  1335  00FBFA  6E4C               	movwf	main@ocultar_teclas+1,c
  1336  00FBFC  0E01               	movlw	1
  1337  00FBFE  6E4B               	movwf	main@ocultar_teclas,c
  1338  00FC00  D000               	goto	l3916
  1339  00FC02                     l3916:
  1340                           
  1341                           ;main.c: 165: {
  1342                           ;main.c: 166: Read_RTC();
  1343  00FC02  ECB7  F07A         	call	_Read_RTC	;wreg free
  1344                           
  1345                           ;main.c: 168: if (!autorizado){
  1346  00FC06  0100               	movlb	0	; () banked
  1347  00FC08  5193               	movf	_autorizado& (0+255),w,b
  1348  00FC0A  0100               	movlb	0	; () banked
  1349  00FC0C  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  1350  00FC0E  A4D8               	btfss	status,2,c
  1351  00FC10  D00D               	goto	l3924
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 169: leer_teclado(ocultar_teclas,mostrar_guardar_password);
  1355  00FC12  C04B  F042         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1356  00FC16  C04C  F043         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1357  00FC1A  0E30               	movlw	low _mostrar_guardar_password
  1358  00FC1C  6E44               	movwf	leer_teclado@doit,c
  1359  00FC1E  0EE2               	movlw	high _mostrar_guardar_password
  1360  00FC20  6E45               	movwf	leer_teclado@doit+1,c
  1361  00FC22  EC90  F079         	call	_leer_teclado	;wreg free
  1362                           
  1363                           ;main.c: 170: ingresar_password();
  1364  00FC26  EC97  F078         	call	_ingresar_password	;wreg free
  1365                           
  1366                           ;main.c: 172: }else{
  1367  00FC2A  D7EB               	goto	l3916
  1368  00FC2C                     l3924:
  1369                           
  1370                           ;main.c: 173: ocultar_teclas = 1;
  1371  00FC2C  0E00               	movlw	0
  1372  00FC2E  6E4C               	movwf	main@ocultar_teclas+1,c
  1373  00FC30  0E01               	movlw	1
  1374  00FC32  6E4B               	movwf	main@ocultar_teclas,c
  1375                           
  1376                           ;main.c: 174: puntero_funcion = ingresar_comando;
  1377  00FC34  0E7A               	movlw	low _ingresar_comando
  1378  00FC36  6E4F               	movwf	main@puntero_funcion,c
  1379  00FC38  0EE0               	movlw	high _ingresar_comando
  1380  00FC3A  6E50               	movwf	main@puntero_funcion+1,c
  1381                           
  1382                           ;main.c: 176: lcd_gotoxy(10,2);
  1383  00FC3C  0E02               	movlw	2
  1384  00FC3E  6E05               	movwf	lcd_gotoxy@y,c
  1385  00FC40  0E0A               	movlw	10
  1386  00FC42  ECCA  F070         	call	_lcd_gotoxy
  1387                           
  1388                           ;main.c: 177: lcd_putrs(password);
  1389  00FC46  0EE7               	movlw	low _password
  1390  00FC48  6E09               	movwf	lcd_putrs@ptr,c
  1391  00FC4A  0E00               	movlw	high _password
  1392  00FC4C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1393  00FC4E  EC92  F072         	call	_lcd_putrs	;wreg free
  1394                           
  1395                           ;main.c: 179: validar_comando("xx",&validacion);
  1396  00FC52  0EE8               	movlw	low STR_11
  1397  00FC54  6E01               	movwf	validar_comando@candidato,c
  1398  00FC56  0EFF               	movlw	high STR_11
  1399  00FC58  6E02               	movwf	validar_comando@candidato+1,c
  1400  00FC5A  0E51               	movlw	low main@validacion
  1401  00FC5C  6E03               	movwf	validar_comando@validar,c
  1402  00FC5E  0E00               	movlw	high main@validacion
  1403  00FC60  6E04               	movwf	validar_comando@validar+1,c
  1404  00FC62  EC84  F074         	call	_validar_comando	;wreg free
  1405                           
  1406                           ;main.c: 180: if(validacion){
  1407  00FC66  5051               	movf	main@validacion,w,c
  1408  00FC68  1052               	iorwf	main@validacion+1,w,c
  1409  00FC6A  B4D8               	btfsc	status,2,c
  1410  00FC6C  D007               	goto	l3938
  1411                           
  1412                           ;main.c: 181: caratula("Welcome");
  1413  00FC6E  0ECB               	movlw	low STR_12
  1414  00FC70  6E24               	movwf	caratula@titulo,c
  1415  00FC72  0EFF               	movlw	high STR_12
  1416  00FC74  6E25               	movwf	caratula@titulo+1,c
  1417  00FC76  EC2C  F078         	call	_caratula	;wreg free
  1418  00FC7A  D000               	goto	l3938
  1419  00FC7C                     l3938:
  1420                           
  1421                           ;main.c: 182: }
  1422                           ;main.c: 184: validar_comando("01",&validacion);
  1423  00FC7C  0EDF               	movlw	low STR_13
  1424  00FC7E  6E01               	movwf	validar_comando@candidato,c
  1425  00FC80  0EFF               	movlw	high STR_13
  1426  00FC82  6E02               	movwf	validar_comando@candidato+1,c
  1427  00FC84  0E51               	movlw	low main@validacion
  1428  00FC86  6E03               	movwf	validar_comando@validar,c
  1429  00FC88  0E00               	movlw	high main@validacion
  1430  00FC8A  6E04               	movwf	validar_comando@validar+1,c
  1431  00FC8C  EC84  F074         	call	_validar_comando	;wreg free
  1432                           
  1433                           ;main.c: 185: if(validacion){
  1434  00FC90  5051               	movf	main@validacion,w,c
  1435  00FC92  1052               	iorwf	main@validacion+1,w,c
  1436  00FC94  B4D8               	btfsc	status,2,c
  1437  00FC96  D03B               	goto	l3964
  1438                           
  1439                           ;main.c: 187: lcd_gotoxy(3,2);
  1440  00FC98  0E02               	movlw	2
  1441  00FC9A  6E05               	movwf	lcd_gotoxy@y,c
  1442  00FC9C  0E03               	movlw	3
  1443  00FC9E  ECCA  F070         	call	_lcd_gotoxy
  1444                           
  1445                           ;main.c: 188: lcd_putrs("                 ");
  1446  00FCA2  0EF4               	movlw	low (STR_24+8)
  1447  00FCA4  6E09               	movwf	lcd_putrs@ptr,c
  1448  00FCA6  0EFE               	movlw	high (STR_24+8)
  1449  00FCA8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1450  00FCAA  EC92  F072         	call	_lcd_putrs	;wreg free
  1451                           
  1452                           ;main.c: 190: if (tamanio_anio != 2){
  1453  00FCAE  0E02               	movlw	2
  1454  00FCB0  0100               	movlb	0	; () banked
  1455  00FCB2  19D2               	xorwf	_tamanio_anio& (0+255),w,b
  1456  00FCB4  0100               	movlb	0	; () banked
  1457  00FCB6  11D3               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  1458  00FCB8  B4D8               	btfsc	status,2,c
  1459  00FCBA  D00A               	goto	l3952
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;main.c: 191: mostrar_menu("Inserte anio:     ");
  1463  00FCBC  0E5A               	movlw	low STR_15
  1464  00FCBE  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1465  00FCC0  0EFF               	movlw	high STR_15
  1466  00FCC2  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1467  00FCC4  EC64  F070         	call	_mostrar_menu	;wreg free
  1468                           
  1469                           ;main.c: 192: puntero_funcion = cambiar_anio;
  1470  00FCC8  0EEE               	movlw	low _cambiar_anio
  1471  00FCCA  6E4F               	movwf	main@puntero_funcion,c
  1472  00FCCC  0EED               	movlw	high _cambiar_anio
  1473  00FCCE  D01D               	goto	L2
  1474  00FCD0                     l3952:
  1475  00FCD0  0E02               	movlw	2
  1476  00FCD2  185C               	xorwf	_tamanio_mes,w,c
  1477  00FCD4  105D               	iorwf	_tamanio_mes+1,w,c
  1478  00FCD6  B4D8               	btfsc	status,2,c
  1479  00FCD8  D00A               	goto	l3958
  1480                           
  1481                           ;main.c: 195: mostrar_menu("Inserte mes:     ");
  1482  00FCDA  0E7F               	movlw	low STR_16
  1483  00FCDC  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1484  00FCDE  0EFF               	movlw	high STR_16
  1485  00FCE0  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1486  00FCE2  EC64  F070         	call	_mostrar_menu	;wreg free
  1487                           
  1488                           ;main.c: 196: puntero_funcion = cambiar_mes;
  1489  00FCE6  0ECC               	movlw	low _cambiar_mes
  1490  00FCE8  6E4F               	movwf	main@puntero_funcion,c
  1491  00FCEA  0EEB               	movlw	high _cambiar_mes
  1492  00FCEC  D00E               	goto	L2
  1493  00FCEE                     l3958:
  1494  00FCEE  0E02               	movlw	2
  1495  00FCF0  1858               	xorwf	_tamanio_dia,w,c
  1496  00FCF2  1059               	iorwf	_tamanio_dia+1,w,c
  1497  00FCF4  B4D8               	btfsc	status,2,c
  1498  00FCF6  D00B               	goto	l3964
  1499                           
  1500                           ;main.c: 199: mostrar_menu("Inserte dia:     ");
  1501  00FCF8  0E6D               	movlw	low STR_17
  1502  00FCFA  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1503  00FCFC  0EFF               	movlw	high STR_17
  1504  00FCFE  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1505  00FD00  EC64  F070         	call	_mostrar_menu	;wreg free
  1506                           
  1507                           ;main.c: 200: puntero_funcion = cambiar_dia;
  1508  00FD04  0E82               	movlw	low _cambiar_dia
  1509  00FD06  6E4F               	movwf	main@puntero_funcion,c
  1510  00FD08  0EEC               	movlw	high _cambiar_dia
  1511  00FD0A                     L2:
  1512  00FD0A  6E50               	movwf	main@puntero_funcion+1,c
  1513  00FD0C  D000               	goto	l3964
  1514  00FD0E                     l3964:
  1515                           
  1516                           ;main.c: 202: }
  1517                           ;main.c: 203: }
  1518                           ;main.c: 205: validar_comando("02",&validacion);
  1519  00FD0E  0EE2               	movlw	low STR_18
  1520  00FD10  6E01               	movwf	validar_comando@candidato,c
  1521  00FD12  0EFF               	movlw	high STR_18
  1522  00FD14  6E02               	movwf	validar_comando@candidato+1,c
  1523  00FD16  0E51               	movlw	low main@validacion
  1524  00FD18  6E03               	movwf	validar_comando@validar,c
  1525  00FD1A  0E00               	movlw	high main@validacion
  1526  00FD1C  6E04               	movwf	validar_comando@validar+1,c
  1527  00FD1E  EC84  F074         	call	_validar_comando	;wreg free
  1528                           
  1529                           ;main.c: 206: if(validacion){
  1530  00FD22  5051               	movf	main@validacion,w,c
  1531  00FD24  1052               	iorwf	main@validacion+1,w,c
  1532  00FD26  B4D8               	btfsc	status,2,c
  1533  00FD28  D02C               	goto	l3984
  1534                           
  1535                           ;main.c: 208: lcd_gotoxy(3,2);
  1536  00FD2A  0E02               	movlw	2
  1537  00FD2C  6E05               	movwf	lcd_gotoxy@y,c
  1538  00FD2E  0E03               	movlw	3
  1539  00FD30  ECCA  F070         	call	_lcd_gotoxy
  1540                           
  1541                           ;main.c: 209: lcd_putrs("                    ");
  1542  00FD34  0EF1               	movlw	low (STR_24+5)
  1543  00FD36  6E09               	movwf	lcd_putrs@ptr,c
  1544  00FD38  0EFE               	movlw	high (STR_24+5)
  1545  00FD3A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1546  00FD3C  EC92  F072         	call	_lcd_putrs	;wreg free
  1547                           
  1548                           ;main.c: 211: if (tamanio_minutos != 2){
  1549  00FD40  0E02               	movlw	2
  1550  00FD42  0100               	movlb	0	; () banked
  1551  00FD44  19D4               	xorwf	_tamanio_minutos& (0+255),w,b
  1552  00FD46  0100               	movlb	0	; () banked
  1553  00FD48  11D5               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  1554  00FD4A  B4D8               	btfsc	status,2,c
  1555  00FD4C  D00A               	goto	l3978
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;main.c: 212: mostrar_menu("Inserte minutos:     ");
  1559  00FD4E  0E1D               	movlw	low STR_20
  1560  00FD50  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1561  00FD52  0EFF               	movlw	high STR_20
  1562  00FD54  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1563  00FD56  EC64  F070         	call	_mostrar_menu	;wreg free
  1564                           
  1565                           ;main.c: 213: puntero_funcion = cambiar_minutos;
  1566  00FD5A  0EB8               	movlw	low _cambiar_minutos
  1567  00FD5C  6E4F               	movwf	main@puntero_funcion,c
  1568  00FD5E  0EEE               	movlw	high _cambiar_minutos
  1569  00FD60  D00E               	goto	L3
  1570  00FD62                     l3978:
  1571  00FD62  0E02               	movlw	2
  1572  00FD64  185A               	xorwf	_tamanio_hora,w,c
  1573  00FD66  105B               	iorwf	_tamanio_hora+1,w,c
  1574  00FD68  B4D8               	btfsc	status,2,c
  1575  00FD6A  D00B               	goto	l3984
  1576                           
  1577                           ;main.c: 216: mostrar_menu("Inserte hora:     ");
  1578  00FD6C  0E47               	movlw	low STR_21
  1579  00FD6E  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1580  00FD70  0EFF               	movlw	high STR_21
  1581  00FD72  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1582  00FD74  EC64  F070         	call	_mostrar_menu	;wreg free
  1583                           
  1584                           ;main.c: 217: puntero_funcion = cambiar_hora;
  1585  00FD78  0E38               	movlw	low _cambiar_hora
  1586  00FD7A  6E4F               	movwf	main@puntero_funcion,c
  1587  00FD7C  0EED               	movlw	high _cambiar_hora
  1588  00FD7E                     L3:
  1589  00FD7E  6E50               	movwf	main@puntero_funcion+1,c
  1590  00FD80  D000               	goto	l3984
  1591  00FD82                     l3984:
  1592                           
  1593                           ;main.c: 219: }
  1594                           ;main.c: 220: }
  1595                           ;main.c: 222: validar_comando("00",&validacion);
  1596  00FD82  0EDC               	movlw	low STR_22
  1597  00FD84  6E01               	movwf	validar_comando@candidato,c
  1598  00FD86  0EFF               	movlw	high STR_22
  1599  00FD88  6E02               	movwf	validar_comando@candidato+1,c
  1600  00FD8A  0E51               	movlw	low main@validacion
  1601  00FD8C  6E03               	movwf	validar_comando@validar,c
  1602  00FD8E  0E00               	movlw	high main@validacion
  1603  00FD90  6E04               	movwf	validar_comando@validar+1,c
  1604  00FD92  EC84  F074         	call	_validar_comando	;wreg free
  1605                           
  1606                           ;main.c: 223: if(validacion){
  1607  00FD96  5051               	movf	main@validacion,w,c
  1608  00FD98  1052               	iorwf	main@validacion+1,w,c
  1609  00FD9A  B4D8               	btfsc	status,2,c
  1610  00FD9C  D085               	goto	l4030
  1611                           
  1612                           ;main.c: 224: ocultar_teclas = 1;
  1613  00FD9E  0E00               	movlw	0
  1614  00FDA0  6E4C               	movwf	main@ocultar_teclas+1,c
  1615  00FDA2  0E01               	movlw	1
  1616  00FDA4  6E4B               	movwf	main@ocultar_teclas,c
  1617                           
  1618                           ;main.c: 225: puntero_funcion = mostrar_guardar_temporal_password;
  1619  00FDA6  0E04               	movlw	low _mostrar_guardar_temporal_password
  1620  00FDA8  6E4F               	movwf	main@puntero_funcion,c
  1621  00FDAA  0EE2               	movlw	high _mostrar_guardar_temporal_password
  1622  00FDAC  6E50               	movwf	main@puntero_funcion+1,c
  1623                           
  1624                           ;main.c: 227: verficar_password(&verifica);
  1625  00FDAE  0E4D               	movlw	low main@verifica
  1626  00FDB0  6E01               	movwf	verficar_password@verifica,c
  1627  00FDB2  0E00               	movlw	high main@verifica
  1628  00FDB4  6E02               	movwf	verficar_password@verifica+1,c
  1629  00FDB6  EC08  F074         	call	_verficar_password	;wreg free
  1630                           
  1631                           ;main.c: 228: if(!verifica){
  1632  00FDBA  504D               	movf	main@verifica,w,c
  1633  00FDBC  104E               	iorwf	main@verifica+1,w,c
  1634  00FDBE  A4D8               	btfss	status,2,c
  1635  00FDC0  D017               	goto	l4002
  1636                           
  1637                           ;main.c: 229: mostrar_menu("Password actual:          ");
  1638  00FDC2  0ED1               	movlw	low STR_23
  1639  00FDC4  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1640  00FDC6  0EFE               	movlw	high STR_23
  1641  00FDC8  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1642  00FDCA  EC64  F070         	call	_mostrar_menu	;wreg free
  1643                           
  1644                           ;main.c: 230: lcd_gotoxy(tamanio_password+1,2);
  1645  00FDCE  0E02               	movlw	2
  1646  00FDD0  6E05               	movwf	lcd_gotoxy@y,c
  1647  00FDD2  2855               	incf	_tamanio_password,w,c
  1648  00FDD4  ECCA  F070         	call	_lcd_gotoxy
  1649                           
  1650                           ;main.c: 231: lcd_putrs("                         ");
  1651  00FDD8  0EEC               	movlw	low STR_24
  1652  00FDDA  6E09               	movwf	lcd_putrs@ptr,c
  1653  00FDDC  0EFE               	movlw	high STR_24
  1654  00FDDE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1655  00FDE0  EC92  F072         	call	_lcd_putrs	;wreg free
  1656                           
  1657                           ;main.c: 232: lcd_gotoxy(tamanio_password+1,2);
  1658  00FDE4  0E02               	movlw	2
  1659  00FDE6  6E05               	movwf	lcd_gotoxy@y,c
  1660  00FDE8  2855               	incf	_tamanio_password,w,c
  1661  00FDEA  ECCA  F070         	call	_lcd_gotoxy
  1662                           
  1663                           ;main.c: 234: }else {
  1664  00FDEE  D05C               	goto	l4030
  1665  00FDF0                     l4002:
  1666                           
  1667                           ;main.c: 235: if (tamanio_new_password <= 6){
  1668  00FDF0  BE54               	btfsc	_tamanio_new_password+1,7,c
  1669  00FDF2  D006               	goto	l4004
  1670  00FDF4  5054               	movf	_tamanio_new_password+1,w,c
  1671  00FDF6  E126               	bnz	l4016
  1672  00FDF8  0E07               	movlw	7
  1673  00FDFA  5C53               	subwf	_tamanio_new_password,w,c
  1674  00FDFC  B0D8               	btfsc	status,0,c
  1675  00FDFE  D022               	goto	l4016
  1676  00FE00                     l4004:
  1677                           
  1678                           ;main.c: 236: puntero_funcion = mostrar_guardar_nuevo_password;
  1679  00FE00  0E5C               	movlw	low _mostrar_guardar_nuevo_password
  1680  00FE02  6E4F               	movwf	main@puntero_funcion,c
  1681  00FE04  0EE2               	movlw	high _mostrar_guardar_nuevo_password
  1682  00FE06  6E50               	movwf	main@puntero_funcion+1,c
  1683                           
  1684                           ;main.c: 238: mostrar_menu("Nuevo pass:        ");
  1685  00FE08  0E33               	movlw	low STR_25
  1686  00FE0A  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1687  00FE0C  0EFF               	movlw	high STR_25
  1688  00FE0E  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1689  00FE10  EC64  F070         	call	_mostrar_menu	;wreg free
  1690                           
  1691                           ;main.c: 239: lcd_gotoxy(tamanio_new_password+1,2);
  1692  00FE14  0E02               	movlw	2
  1693  00FE16  6E05               	movwf	lcd_gotoxy@y,c
  1694  00FE18  2853               	incf	_tamanio_new_password,w,c
  1695  00FE1A  ECCA  F070         	call	_lcd_gotoxy
  1696                           
  1697                           ;main.c: 240: lcd_putrs("                         ");
  1698  00FE1E  0EEC               	movlw	low STR_24
  1699  00FE20  6E09               	movwf	lcd_putrs@ptr,c
  1700  00FE22  0EFE               	movlw	high STR_24
  1701  00FE24  6E0A               	movwf	lcd_putrs@ptr+1,c
  1702  00FE26  EC92  F072         	call	_lcd_putrs	;wreg free
  1703                           
  1704                           ;main.c: 241: lcd_gotoxy(tamanio_new_password+1,2);
  1705  00FE2A  0E02               	movlw	2
  1706  00FE2C  6E05               	movwf	lcd_gotoxy@y,c
  1707  00FE2E  2853               	incf	_tamanio_new_password,w,c
  1708  00FE30  ECCA  F070         	call	_lcd_gotoxy
  1709                           
  1710                           ;main.c: 243: if (tamanio_new_password == 6) tamanio_new_password++;
  1711  00FE34  0E06               	movlw	6
  1712  00FE36  1853               	xorwf	_tamanio_new_password,w,c
  1713  00FE38  1054               	iorwf	_tamanio_new_password+1,w,c
  1714  00FE3A  A4D8               	btfss	status,2,c
  1715  00FE3C  D035               	goto	l4030
  1716  00FE3E  4A53               	infsnz	_tamanio_new_password,f,c
  1717  00FE40  2A54               	incf	_tamanio_new_password+1,f,c
  1718                           
  1719                           ;main.c: 245: }else{
  1720  00FE42  D032               	goto	l4030
  1721  00FE44                     l4016:
  1722                           
  1723                           ;main.c: 246: puntero_funcion = confirmar_actualizar_password;
  1724  00FE44  0EB8               	movlw	low _confirmar_actualizar_password
  1725  00FE46  6E4F               	movwf	main@puntero_funcion,c
  1726  00FE48  0EE1               	movlw	high _confirmar_actualizar_password
  1727  00FE4A  6E50               	movwf	main@puntero_funcion+1,c
  1728                           
  1729                           ;main.c: 248: sprintf(buffer2,"%01u",key);
  1730  00FE4C  0EA7               	movlw	low _buffer2
  1731  00FE4E  6E0D               	movwf	sprintf@sp,c
  1732  00FE50  0E00               	movlw	high _buffer2
  1733  00FE52  6E0E               	movwf	sprintf@sp+1,c
  1734  00FE54  0ED3               	movlw	low STR_7
  1735  00FE56  6E0F               	movwf	sprintf@f,c
  1736  00FE58  0EFF               	movlw	high STR_7
  1737  00FE5A  6E10               	movwf	sprintf@f+1,c
  1738  00FE5C  C057  F011         	movff	_key,?_sprintf+4
  1739  00FE60  6A12               	clrf	?_sprintf+5,c
  1740  00FE62  ECC6  F07C         	call	_sprintf	;wreg free
  1741                           
  1742                           ;main.c: 249: actualizar_password(&confirmar,buffer2[0]);
  1743  00FE66  0E49               	movlw	low main@confirmar
  1744  00FE68  6E01               	movwf	actualizar_password@confirmar,c
  1745  00FE6A  0E00               	movlw	high main@confirmar
  1746  00FE6C  6E02               	movwf	actualizar_password@confirmar+1,c
  1747  00FE6E  C0A7  F003         	movff	_buffer2,actualizar_password@valor
  1748  00FE72  EC1F  F07A         	call	_actualizar_password	;wreg free
  1749                           
  1750                           ;main.c: 251: mostrar_menu("Confirme pass:        ");
  1751  00FE76  0E06               	movlw	low STR_28
  1752  00FE78  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1753  00FE7A  0EFF               	movlw	high STR_28
  1754  00FE7C  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1755  00FE7E  EC64  F070         	call	_mostrar_menu	;wreg free
  1756                           
  1757                           ;main.c: 252: lcd_gotoxy(tamanio_new_password - 6,2);
  1758  00FE82  0E02               	movlw	2
  1759  00FE84  6E05               	movwf	lcd_gotoxy@y,c
  1760  00FE86  5053               	movf	_tamanio_new_password,w,c
  1761  00FE88  0FFA               	addlw	250
  1762  00FE8A  ECCA  F070         	call	_lcd_gotoxy
  1763                           
  1764                           ;main.c: 253: lcd_putrs("                         ");
  1765  00FE8E  0EEC               	movlw	low STR_24
  1766  00FE90  6E09               	movwf	lcd_putrs@ptr,c
  1767  00FE92  0EFE               	movlw	high STR_24
  1768  00FE94  6E0A               	movwf	lcd_putrs@ptr+1,c
  1769  00FE96  EC92  F072         	call	_lcd_putrs	;wreg free
  1770                           
  1771                           ;main.c: 254: lcd_gotoxy(tamanio_new_password - 6,2);
  1772  00FE9A  0E02               	movlw	2
  1773  00FE9C  6E05               	movwf	lcd_gotoxy@y,c
  1774  00FE9E  5053               	movf	_tamanio_new_password,w,c
  1775  00FEA0  0FFA               	addlw	250
  1776  00FEA2  ECCA  F070         	call	_lcd_gotoxy
  1777  00FEA6  D000               	goto	l4030
  1778  00FEA8                     l4030:
  1779                           
  1780                           ;main.c: 256: }
  1781                           ;main.c: 257: }
  1782                           ;main.c: 258: }
  1783                           ;main.c: 260: leer_teclado(ocultar_teclas,puntero_funcion);
  1784  00FEA8  C04B  F042         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1785  00FEAC  C04C  F043         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1786  00FEB0  C04F  F044         	movff	main@puntero_funcion,leer_teclado@doit
  1787  00FEB4  C050  F045         	movff	main@puntero_funcion+1,leer_teclado@doit+1
  1788  00FEB8  EC90  F079         	call	_leer_teclado	;wreg free
  1789  00FEBC  D6A2               	goto	l3916
  1790                           
  1791                           ;main.c: 261: }
  1792                           ;main.c: 262: }
  1793                           ;main.c: 263: return 0;
  1794                           ;	Return value of _main is never used
  1795  00FEBE  EF00  F000         	goto	start
  1796  00FEC2                     __end_of_main:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _verficar_password *****************
  1809 ;; Defined at:
  1810 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  verifica        2    0[COMRAM] PTR int 
  1813 ;;		 -> main@verifica(2), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  i               2    4[COMRAM] int 
  1816 ;; Return value:  Size  Location     Type
  1817 ;;		None               void
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1826 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1828 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1829 ;;Total ram usage:        6 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text1
  1839  00E810                     __ptext1:
  1840                           	opt stack 0
  1841  00E810                     _verficar_password:
  1842                           	opt stack 30
  1843                           
  1844                           ;alarma.c: 55: *verifica=1;
  1845                           
  1846                           ;incstack = 0
  1847  00E810  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1848  00E814  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1849  00E818  0E01               	movlw	1
  1850  00E81A  6EDE               	movwf	postinc2,c
  1851  00E81C  0E00               	movlw	0
  1852  00E81E  6EDD               	movwf	postdec2,c
  1853                           
  1854                           ;alarma.c: 56: int i = 0;
  1855  00E820  0E00               	movlw	0
  1856  00E822  6E06               	movwf	verficar_password@i+1,c
  1857  00E824  0E00               	movlw	0
  1858  00E826  6E05               	movwf	verficar_password@i,c
  1859                           
  1860                           ;alarma.c: 57: while (i < 6 && *verifica == 1){
  1861  00E828  D01C               	goto	l3872
  1862  00E82A                     l3866:
  1863                           
  1864                           ;alarma.c: 58: if (password[i] != *(temporal+i))
  1865  00E82A  0E86               	movlw	low _temporal
  1866  00E82C  2405               	addwf	verficar_password@i,w,c
  1867  00E82E  6ED9               	movwf	fsr2l,c
  1868  00E830  0E00               	movlw	high _temporal
  1869  00E832  2006               	addwfc	verficar_password@i+1,w,c
  1870  00E834  6EDA               	movwf	fsr2h,c
  1871  00E836  0EE7               	movlw	low _password
  1872  00E838  2405               	addwf	verficar_password@i,w,c
  1873  00E83A  6EE1               	movwf	fsr1l,c
  1874  00E83C  0E00               	movlw	high _password
  1875  00E83E  2006               	addwfc	verficar_password@i+1,w,c
  1876  00E840  6EE2               	movwf	fsr1h,c
  1877  00E842  50DE               	movf	postinc2,w,c
  1878  00E844  18E6               	xorwf	postinc1,w,c
  1879  00E846  B4D8               	btfsc	status,2,c
  1880  00E848  D009               	goto	l3870
  1881                           
  1882                           ;alarma.c: 59: *verifica = 0;
  1883  00E84A  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1884  00E84E  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1885  00E852  0E00               	movlw	0
  1886  00E854  6EDE               	movwf	postinc2,c
  1887  00E856  0E00               	movlw	0
  1888  00E858  6EDD               	movwf	postdec2,c
  1889  00E85A  D000               	goto	l3870
  1890  00E85C                     l3870:
  1891                           
  1892                           ;alarma.c: 61: i++;
  1893  00E85C  4A05               	infsnz	verficar_password@i,f,c
  1894  00E85E  2A06               	incf	verficar_password@i+1,f,c
  1895  00E860  D000               	goto	l3872
  1896  00E862                     l3872:
  1897  00E862  BE06               	btfsc	verficar_password@i+1,7,c
  1898  00E864  D006               	goto	l3874
  1899  00E866  5006               	movf	verficar_password@i+1,w,c
  1900  00E868  E10E               	bnz	l791
  1901  00E86A  0E06               	movlw	6
  1902  00E86C  5C05               	subwf	verficar_password@i,w,c
  1903  00E86E  B0D8               	btfsc	status,0,c
  1904  00E870  0012               	return	
  1905  00E872                     l3874:
  1906  00E872  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  1907  00E876  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  1908  00E87A  04DE               	decf	postinc2,w,c
  1909  00E87C  10DE               	iorwf	postinc2,w,c
  1910  00E87E  A4D8               	btfss	status,2,c
  1911  00E880  0012               	return	
  1912  00E882  D7D3               	goto	l3866
  1913  00E884  0012               	return	
  1914  00E886                     l791:
  1915  00E886  0012               	return		;funcret
  1916  00E888                     __end_of_verficar_password:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postinc1	equ	0xFE6
  1925                           postdec1	equ	0xFE5
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           postinc2	equ	0xFDE
  1929                           postdec2	equ	0xFDD
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _validar_comando *****************
  1935 ;; Defined at:
  1936 ;;		line 29 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1939 ;;		 -> STR_22(3), STR_18(3), STR_13(3), STR_11(3), 
  1940 ;;  validar         2    2[COMRAM] PTR int 
  1941 ;;		 -> main@validacion(2), 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  i               2    7[COMRAM] int 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;		None               void
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;Total ram usage:        9 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text2
  1967  00E908                     __ptext2:
  1968                           	opt stack 0
  1969  00E908                     _validar_comando:
  1970                           	opt stack 30
  1971                           
  1972                           ;teclado.c: 31: *validar=1;
  1973                           
  1974                           ;incstack = 0
  1975  00E908  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1976  00E90C  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1977  00E910  0E01               	movlw	1
  1978  00E912  6EDE               	movwf	postinc2,c
  1979  00E914  0E00               	movlw	0
  1980  00E916  6EDD               	movwf	postdec2,c
  1981                           
  1982                           ;teclado.c: 32: int i = 0;
  1983  00E918  0E00               	movlw	0
  1984  00E91A  6E09               	movwf	validar_comando@i+1,c
  1985  00E91C  0E00               	movlw	0
  1986  00E91E  6E08               	movwf	validar_comando@i,c
  1987                           
  1988                           ;teclado.c: 33: while (i < 2 && *validar == 1){
  1989  00E920  D023               	goto	l3858
  1990  00E922                     l3852:
  1991                           
  1992                           ;teclado.c: 34: if (comando[i] != *(candidato+i))
  1993  00E922  0ED6               	movlw	low _comando
  1994  00E924  2408               	addwf	validar_comando@i,w,c
  1995  00E926  6ED9               	movwf	fsr2l,c
  1996  00E928  0E00               	movlw	high _comando
  1997  00E92A  2009               	addwfc	validar_comando@i+1,w,c
  1998  00E92C  6EDA               	movwf	fsr2h,c
  1999  00E92E  50DF               	movf	indf2,w,c
  2000  00E930  6E05               	movwf	??_validar_comando& (0+255),c
  2001  00E932  5008               	movf	validar_comando@i,w,c
  2002  00E934  2401               	addwf	validar_comando@candidato,w,c
  2003  00E936  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  2004  00E938  5009               	movf	validar_comando@i+1,w,c
  2005  00E93A  2002               	addwfc	validar_comando@candidato+1,w,c
  2006  00E93C  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  2007  00E93E  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  2008  00E942  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  2009  00E946                     	if	0	;tblptru may be non-zero
  2010  00E946                     	endif
  2011  00E946                     	if	0	;tblptru may be non-zero
  2012  00E946                     	endif
  2013  00E946  0008               	tblrd		*
  2014  00E948  50F5               	movf	tablat,w,c
  2015  00E94A  1805               	xorwf	??_validar_comando,w,c
  2016  00E94C  B4D8               	btfsc	status,2,c
  2017  00E94E  D009               	goto	l3856
  2018                           
  2019                           ;teclado.c: 35: *validar = 0;
  2020  00E950  C003  FFD9         	movff	validar_comando@validar,fsr2l
  2021  00E954  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  2022  00E958  0E00               	movlw	0
  2023  00E95A  6EDE               	movwf	postinc2,c
  2024  00E95C  0E00               	movlw	0
  2025  00E95E  6EDD               	movwf	postdec2,c
  2026  00E960  D000               	goto	l3856
  2027  00E962                     l3856:
  2028                           
  2029                           ;teclado.c: 37: i++;
  2030  00E962  4A08               	infsnz	validar_comando@i,f,c
  2031  00E964  2A09               	incf	validar_comando@i+1,f,c
  2032  00E966  D000               	goto	l3858
  2033  00E968                     l3858:
  2034  00E968  BE09               	btfsc	validar_comando@i+1,7,c
  2035  00E96A  D006               	goto	l3860
  2036  00E96C  5009               	movf	validar_comando@i+1,w,c
  2037  00E96E  E10E               	bnz	l342
  2038  00E970  0E02               	movlw	2
  2039  00E972  5C08               	subwf	validar_comando@i,w,c
  2040  00E974  B0D8               	btfsc	status,0,c
  2041  00E976  0012               	return	
  2042  00E978                     l3860:
  2043  00E978  C003  FFD9         	movff	validar_comando@validar,fsr2l
  2044  00E97C  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  2045  00E980  04DE               	decf	postinc2,w,c
  2046  00E982  10DE               	iorwf	postinc2,w,c
  2047  00E984  A4D8               	btfss	status,2,c
  2048  00E986  0012               	return	
  2049  00E988  D7CC               	goto	l3852
  2050  00E98A  0012               	return	
  2051  00E98C                     l342:
  2052  00E98C  0012               	return		;funcret
  2053  00E98E                     __end_of_validar_comando:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postinc1	equ	0xFE6
  2062                           postdec1	equ	0xFE5
  2063                           fsr1h	equ	0xFE2
  2064                           fsr1l	equ	0xFE1
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _mostrar_menu *****************
  2073 ;; Defined at:
  2074 ;;		line 109 in file "main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  titulo_menu     2   10[COMRAM] PTR unsigned char 
  2077 ;;		 -> STR_28(23), STR_25(20), STR_23(27), STR_21(19), 
  2078 ;;		 -> STR_20(22), STR_17(18), STR_16(18), STR_15(19), 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  2   10[COMRAM] int 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;Total ram usage:        2 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    5
  2097 ;; This function calls:
  2098 ;;		_lcd_gotoxy
  2099 ;;		_lcd_putrs
  2100 ;; This function is called by:
  2101 ;;		_main
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text3
  2106  00E0C8                     __ptext3:
  2107                           	opt stack 0
  2108  00E0C8                     _mostrar_menu:
  2109                           	opt stack 25
  2110                           
  2111                           ;main.c: 110: lcd_gotoxy(1,1);
  2112                           
  2113                           ;incstack = 0
  2114  00E0C8  0E01               	movlw	1
  2115  00E0CA  6E05               	movwf	lcd_gotoxy@y,c
  2116  00E0CC  0E01               	movlw	1
  2117  00E0CE  ECCA  F070         	call	_lcd_gotoxy
  2118                           
  2119                           ;main.c: 111: lcd_putrs(titulo_menu);
  2120  00E0D2  C00B  F009         	movff	mostrar_menu@titulo_menu,lcd_putrs@ptr
  2121  00E0D6  C00C  F00A         	movff	mostrar_menu@titulo_menu+1,lcd_putrs@ptr+1
  2122  00E0DA  EC92  F072         	call	_lcd_putrs	;wreg free
  2123  00E0DE  0012               	return		;funcret
  2124  00E0E0                     __end_of_mostrar_menu:
  2125                           	opt stack 0
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           postinc1	equ	0xFE6
  2133                           postdec1	equ	0xFE5
  2134                           fsr1h	equ	0xFE2
  2135                           fsr1l	equ	0xFE1
  2136                           indf2	equ	0xFDF
  2137                           postinc2	equ	0xFDE
  2138                           postdec2	equ	0xFDD
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _leer_teclado *****************
  2144 ;; Defined at:
  2145 ;;		line 67 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  ocultar         2   65[COMRAM] int 
  2148 ;;  doit            2   67[COMRAM] PTR FTN()PTR unsigned ch
  2149 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  2150 ;;		 -> cambiar_anio(0), ingresar_comando(2), confirmar_actualizar_password(2), mostrar_guardar_nuevo_password(2), 
  2151 ;;		 -> mostrar_guardar_temporal_password(2), mostrar_guardar_password(2), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  i               2   70[COMRAM] int 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;		None               void
  2156 ;; Registers used:
  2157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;Total ram usage:        7 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    8
  2170 ;; This function calls:
  2171 ;;		_cambiar_anio
  2172 ;;		_cambiar_dia
  2173 ;;		_cambiar_hora
  2174 ;;		_cambiar_mes
  2175 ;;		_cambiar_minutos
  2176 ;;		_confirmar_actualizar_password
  2177 ;;		_guardar_tecla_presionada
  2178 ;;		_ingresar_comando
  2179 ;;		_lcd_putrs
  2180 ;;		_mostrar_guardar_nuevo_password
  2181 ;;		_mostrar_guardar_password
  2182 ;;		_mostrar_guardar_temporal_password
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text4
  2189  00F320                     __ptext4:
  2190                           	opt stack 0
  2191  00F320                     _leer_teclado:
  2192                           	opt stack 22
  2193                           
  2194                           ;teclado.c: 68: int i;
  2195                           ;teclado.c: 69: ocultar_teclas = ocultar;
  2196                           
  2197                           ;incstack = 0
  2198  00F320  C042  F0A1         	movff	leer_teclado@ocultar,_ocultar_teclas
  2199  00F324  C043  F0A2         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  2200                           
  2201                           ;teclado.c: 71: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  2202  00F328  8089               	bsf	3977,0,c	;volatile
  2203  00F32A  9289               	bcf	3977,1,c	;volatile
  2204  00F32C  9489               	bcf	3977,2,c	;volatile
  2205  00F32E  9689               	bcf	3977,3,c	;volatile
  2206  00F330  0E00               	movlw	0
  2207  00F332  6E48               	movwf	leer_teclado@i+1,c
  2208  00F334  0E01               	movlw	1
  2209  00F336  6E47               	movwf	leer_teclado@i,c
  2210                           
  2211                           ;teclado.c: 72: guardar_tecla_presionada("A",i,doit);
  2212  00F338  0EEF               	movlw	low STR_33
  2213  00F33A  6E3C               	movwf	guardar_tecla_presionada@letra,c
  2214  00F33C  0EFF               	movlw	high STR_33
  2215  00F33E  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  2216  00F340  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2217  00F344  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2218  00F348  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  2219  00F34C  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  2220  00F350  EC53  F075         	call	_guardar_tecla_presionada	;wreg free
  2221                           
  2222                           ;teclado.c: 74: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  2223  00F354  9089               	bcf	3977,0,c	;volatile
  2224  00F356  8289               	bsf	3977,1,c	;volatile
  2225  00F358  9489               	bcf	3977,2,c	;volatile
  2226  00F35A  9689               	bcf	3977,3,c	;volatile
  2227  00F35C  0E00               	movlw	0
  2228  00F35E  6E48               	movwf	leer_teclado@i+1,c
  2229  00F360  0E04               	movlw	4
  2230  00F362  6E47               	movwf	leer_teclado@i,c
  2231                           
  2232                           ;teclado.c: 75: guardar_tecla_presionada("B",i,doit);
  2233  00F364  0EF1               	movlw	low STR_34
  2234  00F366  6E3C               	movwf	guardar_tecla_presionada@letra,c
  2235  00F368  0EFF               	movlw	high STR_34
  2236  00F36A  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  2237  00F36C  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2238  00F370  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2239  00F374  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  2240  00F378  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  2241  00F37C  EC53  F075         	call	_guardar_tecla_presionada	;wreg free
  2242                           
  2243                           ;teclado.c: 77: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  2244  00F380  9089               	bcf	3977,0,c	;volatile
  2245  00F382  9289               	bcf	3977,1,c	;volatile
  2246  00F384  8489               	bsf	3977,2,c	;volatile
  2247  00F386  9689               	bcf	3977,3,c	;volatile
  2248  00F388  0E00               	movlw	0
  2249  00F38A  6E48               	movwf	leer_teclado@i+1,c
  2250  00F38C  0E07               	movlw	7
  2251  00F38E  6E47               	movwf	leer_teclado@i,c
  2252                           
  2253                           ;teclado.c: 78: guardar_tecla_presionada("C",i,doit);
  2254  00F390  0EF3               	movlw	low STR_35
  2255  00F392  6E3C               	movwf	guardar_tecla_presionada@letra,c
  2256  00F394  0EFF               	movlw	high STR_35
  2257  00F396  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  2258  00F398  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2259  00F39C  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2260  00F3A0  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  2261  00F3A4  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  2262  00F3A8  EC53  F075         	call	_guardar_tecla_presionada	;wreg free
  2263                           
  2264                           ;teclado.c: 80: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2265  00F3AC  9089               	bcf	3977,0,c	;volatile
  2266  00F3AE  9289               	bcf	3977,1,c	;volatile
  2267  00F3B0  9489               	bcf	3977,2,c	;volatile
  2268  00F3B2  8689               	bsf	3977,3,c	;volatile
  2269                           
  2270                           ;teclado.c: 81: {
  2271                           ;teclado.c: 82: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  2272  00F3B4  AA80               	btfss	3968,5,c	;volatile
  2273  00F3B6  D00B               	goto	l369
  2274  00F3B8  0E2A               	movlw	42
  2275  00F3BA  6E57               	movwf	_key,c
  2276  00F3BC  0EED               	movlw	low STR_32
  2277  00F3BE  6E09               	movwf	lcd_putrs@ptr,c
  2278  00F3C0  0EFF               	movlw	high STR_32
  2279  00F3C2  6E0A               	movwf	lcd_putrs@ptr+1,c
  2280  00F3C4  EC92  F072         	call	_lcd_putrs	;wreg free
  2281  00F3C8  D000               	goto	l370
  2282  00F3CA                     l370:
  2283  00F3CA  BA80               	btfsc	3968,5,c	;volatile
  2284  00F3CC  D7FE               	goto	l370
  2285  00F3CE                     l369:
  2286                           
  2287                           ;teclado.c: 83: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};}
  2288  00F3CE  AE80               	btfss	3968,7,c	;volatile
  2289  00F3D0  D011               	goto	l373
  2290  00F3D2  0E00               	movlw	0
  2291  00F3D4  6E57               	movwf	_key,c
  2292  00F3D6  D801               	call	u2948
  2293  00F3D8  D00B               	goto	l374
  2294  00F3DA                     u2948:
  2295  00F3DA  0005               	push	
  2296  00F3DC  6EFA               	movwf	pclath,c
  2297  00F3DE  5044               	movf	leer_teclado@doit,w,c
  2298  00F3E0  6EFD               	movwf	tosl,c
  2299  00F3E2  5045               	movf	leer_teclado@doit+1,w,c
  2300  00F3E4  6EFE               	movwf	tosh,c
  2301  00F3E6  50F8               	movf	tblptru,w,c
  2302  00F3E8  6EFF               	movwf	tosu,c
  2303  00F3EA  50FA               	movf	pclath,w,c
  2304  00F3EC  5057               	movf	_key,w,c
  2305  00F3EE  0012               	return		;indir
  2306  00F3F0                     l374:
  2307  00F3F0  BE80               	btfsc	3968,7,c	;volatile
  2308  00F3F2  D7FE               	goto	l374
  2309  00F3F4                     l373:
  2310                           
  2311                           ;teclado.c: 84: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  2312  00F3F4  AC80               	btfss	3968,6,c	;volatile
  2313  00F3F6  D00B               	goto	l377
  2314  00F3F8  0E23               	movlw	35
  2315  00F3FA  6E57               	movwf	_key,c
  2316  00F3FC  0EEB               	movlw	low STR_37
  2317  00F3FE  6E09               	movwf	lcd_putrs@ptr,c
  2318  00F400  0EFF               	movlw	high STR_37
  2319  00F402  6E0A               	movwf	lcd_putrs@ptr+1,c
  2320  00F404  EC92  F072         	call	_lcd_putrs
  2321  00F408  D000               	goto	l378
  2322  00F40A                     l378:
  2323  00F40A  BC80               	btfsc	3968,6,c	;volatile
  2324  00F40C  D7FE               	goto	l378
  2325  00F40E                     l377:
  2326                           
  2327                           ;teclado.c: 85: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2==1){};}
  2328  00F40E  A482               	btfss	3970,2,c	;volatile
  2329  00F410  D00D               	goto	l3846
  2330  00F412  0E44               	movlw	68
  2331  00F414  6E57               	movwf	_key,c
  2332  00F416  0EF5               	movlw	low STR_38
  2333  00F418  6E09               	movwf	lcd_putrs@ptr,c
  2334  00F41A  0EFF               	movlw	high STR_38
  2335  00F41C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2336  00F41E  EC92  F072         	call	_lcd_putrs	;wreg free
  2337  00F422  D000               	goto	l382
  2338  00F424                     l382:
  2339  00F424  A482               	btfss	3970,2,c	;volatile
  2340  00F426  D002               	goto	l3846
  2341  00F428  D7FD               	goto	l382
  2342  00F42A  D000               	goto	l3846
  2343  00F42C                     l3846:
  2344                           
  2345                           ;teclado.c: 86: }
  2346                           ;teclado.c: 87: _delay((unsigned long)((98)*(8000000/4000.0)));
  2347  00F42C  0EFF               	movlw	255
  2348  00F42E  6E46               	movwf	??_leer_teclado& (0+255),c
  2349  00F430  0E8A               	movlw	138
  2350  00F432                     u3277:
  2351  00F432  2EE8               	decfsz	wreg,f,c
  2352  00F434  D7FE               	goto	u3277
  2353  00F436  2E46               	decfsz	??_leer_teclado& (0+255),f,c
  2354  00F438  D7FC               	goto	u3277
  2355  00F43A  D000               	nop2	
  2356  00F43C  0012               	return		;funcret
  2357  00F43E                     __end_of_leer_teclado:
  2358                           	opt stack 0
  2359                           tosu	equ	0xFFF
  2360                           tosh	equ	0xFFE
  2361                           tosl	equ	0xFFD
  2362                           pclath	equ	0xFFA
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postinc1	equ	0xFE6
  2370                           postdec1	equ	0xFE5
  2371                           fsr1h	equ	0xFE2
  2372                           fsr1l	equ	0xFE1
  2373                           indf2	equ	0xFDF
  2374                           postinc2	equ	0xFDE
  2375                           postdec2	equ	0xFDD
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _guardar_tecla_presionada *****************
  2381 ;; Defined at:
  2382 ;;		line 60 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  letra           2   59[COMRAM] PTR unsigned char 
  2385 ;;		 -> STR_35(2), STR_34(2), STR_33(2), 
  2386 ;;  i               2   61[COMRAM] int 
  2387 ;;  doit            2   63[COMRAM] PTR FTN(PTR unsigned cha
  2388 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  2389 ;;		 -> cambiar_anio(0), ingresar_comando(2), confirmar_actualizar_password(2), mostrar_guardar_nuevo_password(2), 
  2390 ;;		 -> mostrar_guardar_temporal_password(2), mostrar_guardar_password(2), 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;		None               void
  2395 ;; Registers used:
  2396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2402 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;Total ram usage:        6 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    7
  2409 ;; This function calls:
  2410 ;;		_cambiar_anio
  2411 ;;		_cambiar_dia
  2412 ;;		_cambiar_hora
  2413 ;;		_cambiar_mes
  2414 ;;		_cambiar_minutos
  2415 ;;		_confirmar_actualizar_password
  2416 ;;		_ingresar_comando
  2417 ;;		_mostrar_guardar_nuevo_password
  2418 ;;		_mostrar_guardar_password
  2419 ;;		_mostrar_guardar_temporal_password
  2420 ;; This function is called by:
  2421 ;;		_leer_teclado
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text5
  2426  00EAA6                     __ptext5:
  2427                           	opt stack 0
  2428  00EAA6                     _guardar_tecla_presionada:
  2429                           	opt stack 22
  2430                           
  2431                           ;teclado.c: 61: if (PORTAbits.RA5==1){key=i;doit(key);while(PORTAbits.RA5==1){};}
  2432                           
  2433                           ;incstack = 0
  2434  00EAA6  AA80               	btfss	3968,5,c	;volatile
  2435  00EAA8  D012               	goto	l353
  2436  00EAAA  C03E  F057         	movff	guardar_tecla_presionada@i,_key
  2437  00EAAE  C057  FFE8         	movff	_key,wreg
  2438  00EAB2  D801               	call	u2738
  2439  00EAB4  D00A               	goto	l354
  2440  00EAB6                     u2738:
  2441  00EAB6  0005               	push	
  2442  00EAB8  6EFA               	movwf	pclath,c
  2443  00EABA  5040               	movf	guardar_tecla_presionada@doit,w,c
  2444  00EABC  6EFD               	movwf	tosl,c
  2445  00EABE  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2446  00EAC0  6EFE               	movwf	tosh,c
  2447  00EAC2  50F8               	movf	tblptru,w,c
  2448  00EAC4  6EFF               	movwf	tosu,c
  2449  00EAC6  50FA               	movf	pclath,w,c
  2450  00EAC8  0012               	return		;indir
  2451  00EACA                     l354:
  2452  00EACA  BA80               	btfsc	3968,5,c	;volatile
  2453  00EACC  D7FE               	goto	l354
  2454  00EACE                     l353:
  2455                           
  2456                           ;teclado.c: 62: if (PORTAbits.RA7==1){key=(i)+1;doit(key);while(PORTAbits.RA7==1){};}
  2457  00EACE  AE80               	btfss	3968,7,c	;volatile
  2458  00EAD0  D012               	goto	l357
  2459  00EAD2  283E               	incf	guardar_tecla_presionada@i,w,c
  2460  00EAD4  6E57               	movwf	_key,c
  2461  00EAD6  C057  FFE8         	movff	_key,wreg
  2462  00EADA  D801               	call	u2768
  2463  00EADC  D00A               	goto	l358
  2464  00EADE                     u2768:
  2465  00EADE  0005               	push	
  2466  00EAE0  6EFA               	movwf	pclath,c
  2467  00EAE2  5040               	movf	guardar_tecla_presionada@doit,w,c
  2468  00EAE4  6EFD               	movwf	tosl,c
  2469  00EAE6  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2470  00EAE8  6EFE               	movwf	tosh,c
  2471  00EAEA  50F8               	movf	tblptru,w,c
  2472  00EAEC  6EFF               	movwf	tosu,c
  2473  00EAEE  50FA               	movf	pclath,w,c
  2474  00EAF0  0012               	return		;indir
  2475  00EAF2                     l358:
  2476  00EAF2  BE80               	btfsc	3968,7,c	;volatile
  2477  00EAF4  D7FE               	goto	l358
  2478  00EAF6                     l357:
  2479                           
  2480                           ;teclado.c: 63: if (PORTAbits.RA6==1){key=(i)+2;doit(key);while(PORTAbits.RA6==1){};}
  2481  00EAF6  AC80               	btfss	3968,6,c	;volatile
  2482  00EAF8  D013               	goto	l361
  2483  00EAFA  503E               	movf	guardar_tecla_presionada@i,w,c
  2484  00EAFC  0F02               	addlw	2
  2485  00EAFE  6E57               	movwf	_key,c
  2486  00EB00  C057  FFE8         	movff	_key,wreg
  2487  00EB04  D801               	call	u2798
  2488  00EB06  D00A               	goto	l362
  2489  00EB08                     u2798:
  2490  00EB08  0005               	push	
  2491  00EB0A  6EFA               	movwf	pclath,c
  2492  00EB0C  5040               	movf	guardar_tecla_presionada@doit,w,c
  2493  00EB0E  6EFD               	movwf	tosl,c
  2494  00EB10  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2495  00EB12  6EFE               	movwf	tosh,c
  2496  00EB14  50F8               	movf	tblptru,w,c
  2497  00EB16  6EFF               	movwf	tosu,c
  2498  00EB18  50FA               	movf	pclath,w,c
  2499  00EB1A  0012               	return		;indir
  2500  00EB1C                     l362:
  2501  00EB1C  BC80               	btfsc	3968,6,c	;volatile
  2502  00EB1E  D7FE               	goto	l362
  2503  00EB20                     l361:
  2504                           
  2505                           ;teclado.c: 64: if (PORTCbits.RC2==1){key=letra[0]; }
  2506  00EB20  A482               	btfss	3970,2,c	;volatile
  2507  00EB22  0012               	return	
  2508  00EB24  C03C  FFF6         	movff	guardar_tecla_presionada@letra,tblptrl
  2509  00EB28  C03D  FFF7         	movff	guardar_tecla_presionada@letra+1,tblptrh
  2510  00EB2C                     	if	0	;tblptru may be non-zero
  2511  00EB2C                     	endif
  2512  00EB2C                     	if	0	;tblptru may be non-zero
  2513  00EB2C                     	endif
  2514  00EB2C  0008               	tblrd		*
  2515  00EB2E  CFF5 F057          	movff	tablat,_key
  2516  00EB32  0012               	return	
  2517  00EB34  0012               	return		;funcret
  2518  00EB36                     __end_of_guardar_tecla_presionada:
  2519                           	opt stack 0
  2520                           tosu	equ	0xFFF
  2521                           tosh	equ	0xFFE
  2522                           tosl	equ	0xFFD
  2523                           pclath	equ	0xFFA
  2524                           tblptru	equ	0xFF8
  2525                           tblptrh	equ	0xFF7
  2526                           tblptrl	equ	0xFF6
  2527                           tablat	equ	0xFF5
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postinc1	equ	0xFE6
  2531                           postdec1	equ	0xFE5
  2532                           fsr1h	equ	0xFE2
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _ingresar_comando *****************
  2542 ;; Defined at:
  2543 ;;		line 144 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  key             1    wreg     unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  key             1   58[COMRAM] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  2  221[None  ] int 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    3
  2564 ;; This function calls:
  2565 ;;		_guardar_comando
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;;		_guardar_tecla_presionada
  2569 ;;		_leer_teclado
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text6
  2574  00E07A                     __ptext6:
  2575                           	opt stack 0
  2576  00E07A                     _ingresar_comando:
  2577                           	opt stack 26
  2578                           
  2579                           ;incstack = 0
  2580                           ;ingresar_comando@key stored from wreg
  2581  00E07A  6E3B               	movwf	ingresar_comando@key,c
  2582                           
  2583                           ;main.c: 145: guardar_comando(key);
  2584  00E07C  503B               	movf	ingresar_comando@key,w,c
  2585  00E07E  EC21  F073         	call	_guardar_comando
  2586  00E082  0012               	return		;funcret
  2587  00E084                     __end_of_ingresar_comando:
  2588                           	opt stack 0
  2589                           tosu	equ	0xFFF
  2590                           tosh	equ	0xFFE
  2591                           tosl	equ	0xFFD
  2592                           pclath	equ	0xFFA
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postinc1	equ	0xFE6
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           indf2	equ	0xFDF
  2604                           postinc2	equ	0xFDE
  2605                           postdec2	equ	0xFDD
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _confirmar_actualizar_password *****************
  2611 ;; Defined at:
  2612 ;;		line 138 in file "main.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  tecla           1    wreg     unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  tecla           1   56[COMRAM] unsigned char 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  2  218[None  ] int 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2630 ;;Total ram usage:        1 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    6
  2633 ;; This function calls:
  2634 ;;		_imprimir_tecla
  2635 ;;		_sprintf
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;;		_guardar_tecla_presionada
  2639 ;;		_leer_teclado
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text7
  2644  00E1B8                     __ptext7:
  2645                           	opt stack 0
  2646  00E1B8                     _confirmar_actualizar_password:
  2647                           	opt stack 22
  2648                           
  2649                           ;incstack = 0
  2650                           ;confirmar_actualizar_password@tecla stored from wreg
  2651  00E1B8  6E39               	movwf	confirmar_actualizar_password@tecla,c
  2652                           
  2653                           ;main.c: 140: imprimir_tecla(tecla);
  2654  00E1BA  5039               	movf	confirmar_actualizar_password@tecla,w,c
  2655  00E1BC  EC96  F071         	call	_imprimir_tecla
  2656                           
  2657                           ;main.c: 141: sprintf(buffer2,"%01u",tecla);
  2658  00E1C0  0EA7               	movlw	low _buffer2
  2659  00E1C2  6E0D               	movwf	sprintf@sp,c
  2660  00E1C4  0E00               	movlw	high _buffer2
  2661  00E1C6  6E0E               	movwf	sprintf@sp+1,c
  2662  00E1C8  0ED3               	movlw	low STR_7
  2663  00E1CA  6E0F               	movwf	sprintf@f,c
  2664  00E1CC  0EFF               	movlw	high STR_7
  2665  00E1CE  6E10               	movwf	sprintf@f+1,c
  2666  00E1D0  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  2667  00E1D4  6A12               	clrf	?_sprintf+5,c
  2668  00E1D6  ECC6  F07C         	call	_sprintf	;wreg free
  2669  00E1DA  0012               	return		;funcret
  2670  00E1DC                     __end_of_confirmar_actualizar_password:
  2671                           	opt stack 0
  2672                           tosu	equ	0xFFF
  2673                           tosh	equ	0xFFE
  2674                           tosl	equ	0xFFD
  2675                           pclath	equ	0xFFA
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           postinc1	equ	0xFE6
  2683                           postdec1	equ	0xFE5
  2684                           fsr1h	equ	0xFE2
  2685                           fsr1l	equ	0xFE1
  2686                           indf2	equ	0xFDF
  2687                           postinc2	equ	0xFDE
  2688                           postdec2	equ	0xFDD
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _mostrar_guardar_nuevo_password *****************
  2694 ;; Defined at:
  2695 ;;		line 130 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  tecla           1    wreg     unsigned char 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  tecla           1   56[COMRAM] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  2  215[None  ] int 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2713 ;;Total ram usage:        1 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    6
  2716 ;; This function calls:
  2717 ;;		_guardar_nuevo_password
  2718 ;;		_imprimir_tecla
  2719 ;;		_sprintf
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;;		_guardar_tecla_presionada
  2723 ;;		_leer_teclado
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text8
  2728  00E25C                     __ptext8:
  2729                           	opt stack 0
  2730  00E25C                     _mostrar_guardar_nuevo_password:
  2731                           	opt stack 23
  2732                           
  2733                           ;incstack = 0
  2734                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  2735  00E25C  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  2736                           
  2737                           ;main.c: 132: imprimir_tecla(tecla);
  2738  00E25E  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  2739  00E260  EC96  F071         	call	_imprimir_tecla
  2740                           
  2741                           ;main.c: 133: sprintf(buffer2,"%01u",tecla);
  2742  00E264  0EA7               	movlw	low _buffer2
  2743  00E266  6E0D               	movwf	sprintf@sp,c
  2744  00E268  0E00               	movlw	high _buffer2
  2745  00E26A  6E0E               	movwf	sprintf@sp+1,c
  2746  00E26C  0ED3               	movlw	low STR_7
  2747  00E26E  6E0F               	movwf	sprintf@f,c
  2748  00E270  0EFF               	movlw	high STR_7
  2749  00E272  6E10               	movwf	sprintf@f+1,c
  2750  00E274  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  2751  00E278  6A12               	clrf	?_sprintf+5,c
  2752  00E27A  ECC6  F07C         	call	_sprintf	;wreg free
  2753                           
  2754                           ;main.c: 134: guardar_nuevo_password(*buffer2);
  2755  00E27E  0100               	movlb	0	; () banked
  2756  00E280  51A7               	movf	_buffer2& (0+255),w,b
  2757  00E282  ECB9  F071         	call	_guardar_nuevo_password
  2758  00E286  0012               	return		;funcret
  2759  00E288                     __end_of_mostrar_guardar_nuevo_password:
  2760                           	opt stack 0
  2761                           tosu	equ	0xFFF
  2762                           tosh	equ	0xFFE
  2763                           tosl	equ	0xFFD
  2764                           pclath	equ	0xFFA
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postinc1	equ	0xFE6
  2772                           postdec1	equ	0xFE5
  2773                           fsr1h	equ	0xFE2
  2774                           fsr1l	equ	0xFE1
  2775                           indf2	equ	0xFDF
  2776                           postinc2	equ	0xFDE
  2777                           postdec2	equ	0xFDD
  2778                           fsr2h	equ	0xFDA
  2779                           fsr2l	equ	0xFD9
  2780                           status	equ	0xFD8
  2781                           
  2782 ;; *************** function _mostrar_guardar_password *****************
  2783 ;; Defined at:
  2784 ;;		line 114 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  tecla           1    wreg     unsigned char 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  tecla           1   56[COMRAM] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  2  209[None  ] int 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2802 ;;Total ram usage:        1 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		_guardar_current_password
  2807 ;;		_imprimir_tecla
  2808 ;;		_sprintf
  2809 ;; This function is called by:
  2810 ;;		_main
  2811 ;;		_guardar_tecla_presionada
  2812 ;;		_leer_teclado
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text9
  2817  00E230                     __ptext9:
  2818                           	opt stack 0
  2819  00E230                     _mostrar_guardar_password:
  2820                           	opt stack 23
  2821                           
  2822                           ;incstack = 0
  2823                           ;mostrar_guardar_password@tecla stored from wreg
  2824  00E230  6E39               	movwf	mostrar_guardar_password@tecla,c
  2825                           
  2826                           ;main.c: 116: imprimir_tecla(tecla);
  2827  00E232  5039               	movf	mostrar_guardar_password@tecla,w,c
  2828  00E234  EC96  F071         	call	_imprimir_tecla
  2829                           
  2830                           ;main.c: 117: sprintf(buffer2,"%01u",tecla);
  2831  00E238  0EA7               	movlw	low _buffer2
  2832  00E23A  6E0D               	movwf	sprintf@sp,c
  2833  00E23C  0E00               	movlw	high _buffer2
  2834  00E23E  6E0E               	movwf	sprintf@sp+1,c
  2835  00E240  0ED3               	movlw	low STR_7
  2836  00E242  6E0F               	movwf	sprintf@f,c
  2837  00E244  0EFF               	movlw	high STR_7
  2838  00E246  6E10               	movwf	sprintf@f+1,c
  2839  00E248  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2840  00E24C  6A12               	clrf	?_sprintf+5,c
  2841  00E24E  ECC6  F07C         	call	_sprintf	;wreg free
  2842                           
  2843                           ;main.c: 118: guardar_current_password(*buffer2);
  2844  00E252  0100               	movlb	0	; () banked
  2845  00E254  51A7               	movf	_buffer2& (0+255),w,b
  2846  00E256  ECDC  F071         	call	_guardar_current_password
  2847  00E25A  0012               	return		;funcret
  2848  00E25C                     __end_of_mostrar_guardar_password:
  2849                           	opt stack 0
  2850                           tosu	equ	0xFFF
  2851                           tosh	equ	0xFFE
  2852                           tosl	equ	0xFFD
  2853                           pclath	equ	0xFFA
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postinc1	equ	0xFE6
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _cambiar_hora *****************
  2872 ;; Defined at:
  2873 ;;		line 30 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  tecla           1    wreg     unsigned char 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  tecla           1   43[COMRAM] unsigned char 
  2878 ;;  i               2   44[COMRAM] int 
  2879 ;;  valor           2   46[COMRAM] int 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;		None               void
  2882 ;; Registers used:
  2883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2892 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2893 ;;Total ram usage:        6 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    5
  2896 ;; This function calls:
  2897 ;;		_Write_RTC
  2898 ;;		_convertir_a_int_hora
  2899 ;;		_guardar_elemento_hora
  2900 ;;		_inicializar_hora
  2901 ;;		_lcd_gotoxy
  2902 ;;		_lcd_putrs
  2903 ;;		_restaurar_comando
  2904 ;; This function is called by:
  2905 ;;		_main
  2906 ;;		_guardar_tecla_presionada
  2907 ;;		_leer_teclado
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text10
  2912  00ED38                     __ptext10:
  2913                           	opt stack 0
  2914  00ED38                     _cambiar_hora:
  2915                           	opt stack 23
  2916                           
  2917                           ;incstack = 0
  2918                           ;cambiar_hora@tecla stored from wreg
  2919  00ED38  6E2C               	movwf	cambiar_hora@tecla,c
  2920                           
  2921                           ;hora.c: 31: int valor = 0;
  2922  00ED3A  0E00               	movlw	0
  2923  00ED3C  6E30               	movwf	cambiar_hora@valor+1,c
  2924  00ED3E  0E00               	movlw	0
  2925  00ED40  6E2F               	movwf	cambiar_hora@valor,c
  2926                           
  2927                           ;hora.c: 33: if (tamanio_hora < 3 - 1){
  2928  00ED42  BE5B               	btfsc	_tamanio_hora+1,7,c
  2929  00ED44  D006               	goto	l3472
  2930  00ED46  505B               	movf	_tamanio_hora+1,w,c
  2931  00ED48  E11B               	bnz	l3478
  2932  00ED4A  0E02               	movlw	2
  2933  00ED4C  5C5A               	subwf	_tamanio_hora,w,c
  2934  00ED4E  B0D8               	btfsc	status,0,c
  2935  00ED50  D017               	goto	l3478
  2936  00ED52                     l3472:
  2937                           
  2938                           ;hora.c: 34: guardar_elemento_hora(tecla,hour,&tamanio_hora);
  2939  00ED52  0EC6               	movlw	low _hour
  2940  00ED54  6E24               	movwf	guardar_elemento_hora@array,c
  2941  00ED56  0E00               	movlw	high _hour
  2942  00ED58  6E25               	movwf	guardar_elemento_hora@array+1,c
  2943  00ED5A  0E5A               	movlw	low _tamanio_hora
  2944  00ED5C  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  2945  00ED5E  0E00               	movlw	high _tamanio_hora
  2946  00ED60  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  2947  00ED62  502C               	movf	cambiar_hora@tecla,w,c
  2948  00ED64  EC93  F073         	call	_guardar_elemento_hora
  2949                           
  2950                           ;hora.c: 35: lcd_gotoxy(1,2);
  2951  00ED68  0E02               	movlw	2
  2952  00ED6A  6E05               	movwf	lcd_gotoxy@y,c
  2953  00ED6C  0E01               	movlw	1
  2954  00ED6E  ECCA  F070         	call	_lcd_gotoxy
  2955                           
  2956                           ;hora.c: 36: lcd_putrs(hour);
  2957  00ED72  0EC6               	movlw	low _hour
  2958  00ED74  6E09               	movwf	lcd_putrs@ptr,c
  2959  00ED76  0E00               	movlw	high _hour
  2960  00ED78  6E0A               	movwf	lcd_putrs@ptr+1,c
  2961  00ED7A  EC92  F072         	call	_lcd_putrs	;wreg free
  2962  00ED7E  D000               	goto	l3478
  2963  00ED80                     l3478:
  2964                           
  2965                           ;hora.c: 37: }
  2966                           ;hora.c: 39: if (tamanio_hora >= 3 - 1){
  2967  00ED80  BE5B               	btfsc	_tamanio_hora+1,7,c
  2968  00ED82  0012               	return	
  2969  00ED84  505B               	movf	_tamanio_hora+1,w,c
  2970  00ED86  E104               	bnz	u2560
  2971  00ED88  0E02               	movlw	2
  2972  00ED8A  5C5A               	subwf	_tamanio_hora,w,c
  2973  00ED8C  A0D8               	btfss	status,0,c
  2974  00ED8E  0012               	return	
  2975  00ED90                     u2560:
  2976                           
  2977                           ;hora.c: 40: convertir_a_int_hora(hour,&valor);
  2978  00ED90  0EC6               	movlw	low _hour
  2979  00ED92  6E0E               	movwf	convertir_a_int_hora@array,c
  2980  00ED94  0E00               	movlw	high _hour
  2981  00ED96  6E0F               	movwf	convertir_a_int_hora@array+1,c
  2982  00ED98  0E2F               	movlw	low cambiar_hora@valor
  2983  00ED9A  6E10               	movwf	convertir_a_int_hora@valor,c
  2984  00ED9C  0E00               	movlw	high cambiar_hora@valor
  2985  00ED9E  6E11               	movwf	convertir_a_int_hora@valor+1,c
  2986  00EDA0  EC9A  F070         	call	_convertir_a_int_hora	;wreg free
  2987                           
  2988                           ;hora.c: 41: hora = valor;
  2989  00EDA4  C02F  F0E1         	movff	cambiar_hora@valor,_hora
  2990  00EDA8  C030  F0E2         	movff	cambiar_hora@valor+1,_hora+1
  2991                           
  2992                           ;hora.c: 42: Write_RTC();
  2993  00EDAC  ECFB  F07B         	call	_Write_RTC	;wreg free
  2994                           
  2995                           ;hora.c: 44: restaurar_comando();
  2996  00EDB0  EC7C  F070         	call	_restaurar_comando	;wreg free
  2997                           
  2998                           ;hora.c: 45: inicializar_hora();
  2999  00EDB4  ECA9  F070         	call	_inicializar_hora	;wreg free
  3000                           
  3001                           ;hora.c: 46: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3002  00EDB8  0E00               	movlw	0
  3003  00EDBA  6E2E               	movwf	cambiar_hora@i+1,c
  3004  00EDBC  0E00               	movlw	0
  3005  00EDBE  6E2D               	movwf	cambiar_hora@i,c
  3006  00EDC0                     l3490:
  3007  00EDC0  BE2E               	btfsc	cambiar_hora@i+1,7,c
  3008  00EDC2  D008               	goto	l3494
  3009  00EDC4  502E               	movf	cambiar_hora@i+1,w,c
  3010  00EDC6  E112               	bnz	l729
  3011  00EDC8  0E04               	movlw	4
  3012  00EDCA  5C2D               	subwf	cambiar_hora@i,w,c
  3013  00EDCC  B0D8               	btfsc	status,0,c
  3014  00EDCE  0012               	return	
  3015  00EDD0  D001               	goto	l3494
  3016  00EDD2  0012               	return	
  3017  00EDD4                     l3494:
  3018  00EDD4  0EFF               	movlw	255
  3019  00EDD6  6E2B               	movwf	??_cambiar_hora& (0+255),c
  3020  00EDD8  0E8A               	movlw	138
  3021  00EDDA                     u3287:
  3022  00EDDA  2EE8               	decfsz	wreg,f,c
  3023  00EDDC  D7FE               	goto	u3287
  3024  00EDDE  2E2B               	decfsz	??_cambiar_hora& (0+255),f,c
  3025  00EDE0  D7FC               	goto	u3287
  3026  00EDE2  D000               	nop2	
  3027  00EDE4  4A2D               	infsnz	cambiar_hora@i,f,c
  3028  00EDE6  2A2E               	incf	cambiar_hora@i+1,f,c
  3029  00EDE8  D7EB               	goto	l3490
  3030  00EDEA  0012               	return	
  3031  00EDEC                     l729:
  3032  00EDEC  0012               	return		;funcret
  3033  00EDEE                     __end_of_cambiar_hora:
  3034                           	opt stack 0
  3035                           tosu	equ	0xFFF
  3036                           tosh	equ	0xFFE
  3037                           tosl	equ	0xFFD
  3038                           pclath	equ	0xFFA
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postinc1	equ	0xFE6
  3046                           postdec1	equ	0xFE5
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           indf2	equ	0xFDF
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _cambiar_minutos *****************
  3057 ;; Defined at:
  3058 ;;		line 50 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  tecla           1    wreg     unsigned char 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  tecla           1   43[COMRAM] unsigned char 
  3063 ;;  i               2   44[COMRAM] int 
  3064 ;;  valor           2   46[COMRAM] int 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;		None               void
  3067 ;; Registers used:
  3068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3075 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3077 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3078 ;;Total ram usage:        6 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    5
  3081 ;; This function calls:
  3082 ;;		_Write_RTC
  3083 ;;		_convertir_a_int_hora
  3084 ;;		_guardar_elemento_hora
  3085 ;;		_lcd_gotoxy
  3086 ;;		_lcd_putrs
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;;		_guardar_tecla_presionada
  3090 ;;		_leer_teclado
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text11
  3095  00EEB8                     __ptext11:
  3096                           	opt stack 0
  3097  00EEB8                     _cambiar_minutos:
  3098                           	opt stack 23
  3099                           
  3100                           ;incstack = 0
  3101                           ;cambiar_minutos@tecla stored from wreg
  3102  00EEB8  6E2C               	movwf	cambiar_minutos@tecla,c
  3103                           
  3104                           ;hora.c: 52: int valor = 0;
  3105  00EEBA  0E00               	movlw	0
  3106  00EEBC  6E30               	movwf	cambiar_minutos@valor+1,c
  3107  00EEBE  0E00               	movlw	0
  3108  00EEC0  6E2F               	movwf	cambiar_minutos@valor,c
  3109                           
  3110                           ;hora.c: 54: if (tamanio_minutos < 3 - 1 && tamanio_hora == 0){
  3111  00EEC2  0100               	movlb	0	; () banked
  3112  00EEC4  BFD5               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  3113  00EEC6  D008               	goto	l3502
  3114  00EEC8  0100               	movlb	0	; () banked
  3115  00EECA  51D5               	movf	(_tamanio_minutos+1)& (0+255),w,b
  3116  00EECC  E120               	bnz	l3510
  3117  00EECE  0E02               	movlw	2
  3118  00EED0  0100               	movlb	0	; () banked
  3119  00EED2  5DD4               	subwf	_tamanio_minutos& (0+255),w,b
  3120  00EED4  B0D8               	btfsc	status,0,c
  3121  00EED6  D01B               	goto	l3510
  3122  00EED8                     l3502:
  3123                           
  3124                           ; BSR set to: 0
  3125  00EED8  505A               	movf	_tamanio_hora,w,c
  3126  00EEDA  105B               	iorwf	_tamanio_hora+1,w,c
  3127  00EEDC  A4D8               	btfss	status,2,c
  3128  00EEDE  D017               	goto	l3510
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;hora.c: 55: guardar_elemento_hora(tecla,minutes,&tamanio_minutos);
  3132  00EEE0  0EC9               	movlw	low _minutes
  3133  00EEE2  6E24               	movwf	guardar_elemento_hora@array,c
  3134  00EEE4  0E00               	movlw	high _minutes
  3135  00EEE6  6E25               	movwf	guardar_elemento_hora@array+1,c
  3136  00EEE8  0ED4               	movlw	low _tamanio_minutos
  3137  00EEEA  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  3138  00EEEC  0E00               	movlw	high _tamanio_minutos
  3139  00EEEE  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  3140  00EEF0  502C               	movf	cambiar_minutos@tecla,w,c
  3141  00EEF2  EC93  F073         	call	_guardar_elemento_hora
  3142                           
  3143                           ;hora.c: 56: lcd_gotoxy(1,2);
  3144  00EEF6  0E02               	movlw	2
  3145  00EEF8  6E05               	movwf	lcd_gotoxy@y,c
  3146  00EEFA  0E01               	movlw	1
  3147  00EEFC  ECCA  F070         	call	_lcd_gotoxy
  3148                           
  3149                           ;hora.c: 57: lcd_putrs(minutes);
  3150  00EF00  0EC9               	movlw	low _minutes
  3151  00EF02  6E09               	movwf	lcd_putrs@ptr,c
  3152  00EF04  0E00               	movlw	high _minutes
  3153  00EF06  6E0A               	movwf	lcd_putrs@ptr+1,c
  3154  00EF08  EC92  F072         	call	_lcd_putrs	;wreg free
  3155  00EF0C  D000               	goto	l3510
  3156  00EF0E                     l3510:
  3157                           
  3158                           ;hora.c: 58: }
  3159                           ;hora.c: 60: if (tamanio_minutos >= 3 - 1){
  3160  00EF0E  0100               	movlb	0	; () banked
  3161  00EF10  BFD5               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  3162  00EF12  0012               	return	
  3163  00EF14  0100               	movlb	0	; () banked
  3164  00EF16  51D5               	movf	(_tamanio_minutos+1)& (0+255),w,b
  3165  00EF18  E105               	bnz	u2610
  3166  00EF1A  0E02               	movlw	2
  3167  00EF1C  0100               	movlb	0	; () banked
  3168  00EF1E  5DD4               	subwf	_tamanio_minutos& (0+255),w,b
  3169  00EF20  A0D8               	btfss	status,0,c
  3170  00EF22  0012               	return	
  3171  00EF24                     u2610:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;hora.c: 62: convertir_a_int_hora(minutes,&valor);
  3175  00EF24  0EC9               	movlw	low _minutes
  3176  00EF26  6E0E               	movwf	convertir_a_int_hora@array,c
  3177  00EF28  0E00               	movlw	high _minutes
  3178  00EF2A  6E0F               	movwf	convertir_a_int_hora@array+1,c
  3179  00EF2C  0E2F               	movlw	low cambiar_minutos@valor
  3180  00EF2E  6E10               	movwf	convertir_a_int_hora@valor,c
  3181  00EF30  0E00               	movlw	high cambiar_minutos@valor
  3182  00EF32  6E11               	movwf	convertir_a_int_hora@valor+1,c
  3183  00EF34  EC9A  F070         	call	_convertir_a_int_hora	;wreg free
  3184                           
  3185                           ;hora.c: 63: minuto = valor;
  3186  00EF38  C02F  F0E5         	movff	cambiar_minutos@valor,_minuto
  3187  00EF3C  C030  F0E6         	movff	cambiar_minutos@valor+1,_minuto+1
  3188                           
  3189                           ;hora.c: 64: segundo = 00;
  3190  00EF40  0E00               	movlw	0
  3191  00EF42  0100               	movlb	0	; () banked
  3192  00EF44  6FA4               	movwf	(_segundo+1)& (0+255),b
  3193  00EF46  0E00               	movlw	0
  3194  00EF48  6FA3               	movwf	_segundo& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;hora.c: 65: Write_RTC();
  3198  00EF4A  ECFB  F07B         	call	_Write_RTC	;wreg free
  3199                           
  3200                           ;hora.c: 66: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3201  00EF4E  0E00               	movlw	0
  3202  00EF50  6E2E               	movwf	cambiar_minutos@i+1,c
  3203  00EF52  0E00               	movlw	0
  3204  00EF54  6E2D               	movwf	cambiar_minutos@i,c
  3205  00EF56                     l3520:
  3206  00EF56  BE2E               	btfsc	cambiar_minutos@i+1,7,c
  3207  00EF58  D008               	goto	l3524
  3208  00EF5A  502E               	movf	cambiar_minutos@i+1,w,c
  3209  00EF5C  E112               	bnz	l736
  3210  00EF5E  0E04               	movlw	4
  3211  00EF60  5C2D               	subwf	cambiar_minutos@i,w,c
  3212  00EF62  B0D8               	btfsc	status,0,c
  3213  00EF64  0012               	return	
  3214  00EF66  D001               	goto	l3524
  3215  00EF68  0012               	return	
  3216  00EF6A                     l3524:
  3217  00EF6A  0EFF               	movlw	255
  3218  00EF6C  6E2B               	movwf	??_cambiar_minutos& (0+255),c
  3219  00EF6E  0E8A               	movlw	138
  3220  00EF70                     u3297:
  3221  00EF70  2EE8               	decfsz	wreg,f,c
  3222  00EF72  D7FE               	goto	u3297
  3223  00EF74  2E2B               	decfsz	??_cambiar_minutos& (0+255),f,c
  3224  00EF76  D7FC               	goto	u3297
  3225  00EF78  D000               	nop2	
  3226  00EF7A  4A2D               	infsnz	cambiar_minutos@i,f,c
  3227  00EF7C  2A2E               	incf	cambiar_minutos@i+1,f,c
  3228  00EF7E  D7EB               	goto	l3520
  3229  00EF80  0012               	return	
  3230  00EF82                     l736:
  3231  00EF82  0012               	return		;funcret
  3232  00EF84                     __end_of_cambiar_minutos:
  3233                           	opt stack 0
  3234                           tosu	equ	0xFFF
  3235                           tosh	equ	0xFFE
  3236                           tosl	equ	0xFFD
  3237                           pclath	equ	0xFFA
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           postinc1	equ	0xFE6
  3245                           postdec1	equ	0xFE5
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           postdec2	equ	0xFDD
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _cambiar_dia *****************
  3256 ;; Defined at:
  3257 ;;		line 31 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  tecla           1    wreg     unsigned char 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  tecla           1   43[COMRAM] unsigned char 
  3262 ;;  i               2   44[COMRAM] int 
  3263 ;;  valor           2   46[COMRAM] int 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;		None               void
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3274 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3277 ;;Total ram usage:        6 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    5
  3280 ;; This function calls:
  3281 ;;		_Write_RTC
  3282 ;;		_convertir_a_int_fecha
  3283 ;;		_guardar_elemento_fecha
  3284 ;;		_inicializar_fecha
  3285 ;;		_lcd_gotoxy
  3286 ;;		_lcd_putrs
  3287 ;;		_restaurar_comando
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;;		_guardar_tecla_presionada
  3291 ;;		_leer_teclado
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text12
  3296  00EC82                     __ptext12:
  3297                           	opt stack 0
  3298  00EC82                     _cambiar_dia:
  3299                           	opt stack 23
  3300                           
  3301                           ;incstack = 0
  3302                           ;cambiar_dia@tecla stored from wreg
  3303  00EC82  6E2C               	movwf	cambiar_dia@tecla,c
  3304                           
  3305                           ;fecha.c: 32: int valor = 0;
  3306  00EC84  0E00               	movlw	0
  3307  00EC86  6E30               	movwf	cambiar_dia@valor+1,c
  3308  00EC88  0E00               	movlw	0
  3309  00EC8A  6E2F               	movwf	cambiar_dia@valor,c
  3310                           
  3311                           ;fecha.c: 34: if (tamanio_dia < 3 - 1){
  3312  00EC8C  BE59               	btfsc	_tamanio_dia+1,7,c
  3313  00EC8E  D006               	goto	l3384
  3314  00EC90  5059               	movf	_tamanio_dia+1,w,c
  3315  00EC92  E11B               	bnz	l3390
  3316  00EC94  0E02               	movlw	2
  3317  00EC96  5C58               	subwf	_tamanio_dia,w,c
  3318  00EC98  B0D8               	btfsc	status,0,c
  3319  00EC9A  D017               	goto	l3390
  3320  00EC9C                     l3384:
  3321                           
  3322                           ;fecha.c: 35: guardar_elemento_fecha(tecla,day,&tamanio_dia);
  3323  00EC9C  0EC3               	movlw	low _day
  3324  00EC9E  6E24               	movwf	guardar_elemento_fecha@array,c
  3325  00ECA0  0E00               	movlw	high _day
  3326  00ECA2  6E25               	movwf	guardar_elemento_fecha@array+1,c
  3327  00ECA4  0E58               	movlw	low _tamanio_dia
  3328  00ECA6  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  3329  00ECA8  0E00               	movlw	high _tamanio_dia
  3330  00ECAA  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  3331  00ECAC  502C               	movf	cambiar_dia@tecla,w,c
  3332  00ECAE  EC59  F073         	call	_guardar_elemento_fecha
  3333                           
  3334                           ;fecha.c: 36: lcd_gotoxy(1,2);
  3335  00ECB2  0E02               	movlw	2
  3336  00ECB4  6E05               	movwf	lcd_gotoxy@y,c
  3337  00ECB6  0E01               	movlw	1
  3338  00ECB8  ECCA  F070         	call	_lcd_gotoxy
  3339                           
  3340                           ;fecha.c: 37: lcd_putrs(day);
  3341  00ECBC  0EC3               	movlw	low _day
  3342  00ECBE  6E09               	movwf	lcd_putrs@ptr,c
  3343  00ECC0  0E00               	movlw	high _day
  3344  00ECC2  6E0A               	movwf	lcd_putrs@ptr+1,c
  3345  00ECC4  EC92  F072         	call	_lcd_putrs	;wreg free
  3346  00ECC8  D000               	goto	l3390
  3347  00ECCA                     l3390:
  3348                           
  3349                           ;fecha.c: 38: }
  3350                           ;fecha.c: 40: if (tamanio_dia >= 3 - 1){
  3351  00ECCA  BE59               	btfsc	_tamanio_dia+1,7,c
  3352  00ECCC  0012               	return	
  3353  00ECCE  5059               	movf	_tamanio_dia+1,w,c
  3354  00ECD0  E104               	bnz	u2410
  3355  00ECD2  0E02               	movlw	2
  3356  00ECD4  5C58               	subwf	_tamanio_dia,w,c
  3357  00ECD6  A0D8               	btfss	status,0,c
  3358  00ECD8  0012               	return	
  3359  00ECDA                     u2410:
  3360                           
  3361                           ;fecha.c: 41: convertir_a_int_fecha(day,&valor);
  3362  00ECDA  0EC3               	movlw	low _day
  3363  00ECDC  6E0E               	movwf	convertir_a_int_fecha@array,c
  3364  00ECDE  0E00               	movlw	high _day
  3365  00ECE0  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  3366  00ECE2  0E2F               	movlw	low cambiar_dia@valor
  3367  00ECE4  6E10               	movwf	convertir_a_int_fecha@valor,c
  3368  00ECE6  0E00               	movlw	high cambiar_dia@valor
  3369  00ECE8  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  3370  00ECEA  EC8B  F070         	call	_convertir_a_int_fecha	;wreg free
  3371                           
  3372                           ;fecha.c: 42: dia = valor;
  3373  00ECEE  C02F  F0DD         	movff	cambiar_dia@valor,_dia
  3374  00ECF2  C030  F0DE         	movff	cambiar_dia@valor+1,_dia+1
  3375                           
  3376                           ;fecha.c: 43: Write_RTC();
  3377  00ECF6  ECFB  F07B         	call	_Write_RTC	;wreg free
  3378                           
  3379                           ;fecha.c: 45: restaurar_comando();
  3380  00ECFA  EC7C  F070         	call	_restaurar_comando	;wreg free
  3381                           
  3382                           ;fecha.c: 46: inicializar_fecha();
  3383  00ECFE  EC44  F071         	call	_inicializar_fecha	;wreg free
  3384                           
  3385                           ;fecha.c: 47: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3386  00ED02  0E00               	movlw	0
  3387  00ED04  6E2E               	movwf	cambiar_dia@i+1,c
  3388  00ED06  0E00               	movlw	0
  3389  00ED08  6E2D               	movwf	cambiar_dia@i,c
  3390  00ED0A                     l3402:
  3391  00ED0A  BE2E               	btfsc	cambiar_dia@i+1,7,c
  3392  00ED0C  D008               	goto	l3406
  3393  00ED0E  502E               	movf	cambiar_dia@i+1,w,c
  3394  00ED10  E112               	bnz	l503
  3395  00ED12  0E04               	movlw	4
  3396  00ED14  5C2D               	subwf	cambiar_dia@i,w,c
  3397  00ED16  B0D8               	btfsc	status,0,c
  3398  00ED18  0012               	return	
  3399  00ED1A  D001               	goto	l3406
  3400  00ED1C  0012               	return	
  3401  00ED1E                     l3406:
  3402  00ED1E  0EFF               	movlw	255
  3403  00ED20  6E2B               	movwf	??_cambiar_dia& (0+255),c
  3404  00ED22  0E8A               	movlw	138
  3405  00ED24                     u3307:
  3406  00ED24  2EE8               	decfsz	wreg,f,c
  3407  00ED26  D7FE               	goto	u3307
  3408  00ED28  2E2B               	decfsz	??_cambiar_dia& (0+255),f,c
  3409  00ED2A  D7FC               	goto	u3307
  3410  00ED2C  D000               	nop2	
  3411  00ED2E  4A2D               	infsnz	cambiar_dia@i,f,c
  3412  00ED30  2A2E               	incf	cambiar_dia@i+1,f,c
  3413  00ED32  D7EB               	goto	l3402
  3414  00ED34  0012               	return	
  3415  00ED36                     l503:
  3416  00ED36  0012               	return		;funcret
  3417  00ED38                     __end_of_cambiar_dia:
  3418                           	opt stack 0
  3419                           tosu	equ	0xFFF
  3420                           tosh	equ	0xFFE
  3421                           tosl	equ	0xFFD
  3422                           pclath	equ	0xFFA
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postinc1	equ	0xFE6
  3430                           postdec1	equ	0xFE5
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _cambiar_mes *****************
  3441 ;; Defined at:
  3442 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  tecla           1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  tecla           1   43[COMRAM] unsigned char 
  3447 ;;  i               2   44[COMRAM] int 
  3448 ;;  valor           2   46[COMRAM] int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;		None               void
  3451 ;; Registers used:
  3452 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3459 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3462 ;;Total ram usage:        6 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    5
  3465 ;; This function calls:
  3466 ;;		_Write_RTC
  3467 ;;		_convertir_a_int_fecha
  3468 ;;		_guardar_elemento_fecha
  3469 ;;		_lcd_gotoxy
  3470 ;;		_lcd_putrs
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;;		_guardar_tecla_presionada
  3474 ;;		_leer_teclado
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text13
  3479  00EBCC                     __ptext13:
  3480                           	opt stack 0
  3481  00EBCC                     _cambiar_mes:
  3482                           	opt stack 23
  3483                           
  3484                           ;incstack = 0
  3485                           ;cambiar_mes@tecla stored from wreg
  3486  00EBCC  6E2C               	movwf	cambiar_mes@tecla,c
  3487                           
  3488                           ;fecha.c: 53: int valor = 0;
  3489  00EBCE  0E00               	movlw	0
  3490  00EBD0  6E30               	movwf	cambiar_mes@valor+1,c
  3491  00EBD2  0E00               	movlw	0
  3492  00EBD4  6E2F               	movwf	cambiar_mes@valor,c
  3493                           
  3494                           ;fecha.c: 55: if (tamanio_mes < 3 - 1 && tamanio_dia == 0){
  3495  00EBD6  BE5D               	btfsc	_tamanio_mes+1,7,c
  3496  00EBD8  D006               	goto	l3414
  3497  00EBDA  505D               	movf	_tamanio_mes+1,w,c
  3498  00EBDC  E11F               	bnz	l3422
  3499  00EBDE  0E02               	movlw	2
  3500  00EBE0  5C5C               	subwf	_tamanio_mes,w,c
  3501  00EBE2  B0D8               	btfsc	status,0,c
  3502  00EBE4  D01B               	goto	l3422
  3503  00EBE6                     l3414:
  3504  00EBE6  5058               	movf	_tamanio_dia,w,c
  3505  00EBE8  1059               	iorwf	_tamanio_dia+1,w,c
  3506  00EBEA  A4D8               	btfss	status,2,c
  3507  00EBEC  D017               	goto	l3422
  3508                           
  3509                           ;fecha.c: 56: guardar_elemento_fecha(tecla,month,&tamanio_mes);
  3510  00EBEE  0ECC               	movlw	low _month
  3511  00EBF0  6E24               	movwf	guardar_elemento_fecha@array,c
  3512  00EBF2  0E00               	movlw	high _month
  3513  00EBF4  6E25               	movwf	guardar_elemento_fecha@array+1,c
  3514  00EBF6  0E5C               	movlw	low _tamanio_mes
  3515  00EBF8  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  3516  00EBFA  0E00               	movlw	high _tamanio_mes
  3517  00EBFC  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  3518  00EBFE  502C               	movf	cambiar_mes@tecla,w,c
  3519  00EC00  EC59  F073         	call	_guardar_elemento_fecha
  3520                           
  3521                           ;fecha.c: 57: lcd_gotoxy(1,2);
  3522  00EC04  0E02               	movlw	2
  3523  00EC06  6E05               	movwf	lcd_gotoxy@y,c
  3524  00EC08  0E01               	movlw	1
  3525  00EC0A  ECCA  F070         	call	_lcd_gotoxy
  3526                           
  3527                           ;fecha.c: 58: lcd_putrs(month);
  3528  00EC0E  0ECC               	movlw	low _month
  3529  00EC10  6E09               	movwf	lcd_putrs@ptr,c
  3530  00EC12  0E00               	movlw	high _month
  3531  00EC14  6E0A               	movwf	lcd_putrs@ptr+1,c
  3532  00EC16  EC92  F072         	call	_lcd_putrs	;wreg free
  3533  00EC1A  D000               	goto	l3422
  3534  00EC1C                     l3422:
  3535                           
  3536                           ;fecha.c: 59: }
  3537                           ;fecha.c: 61: if (tamanio_mes >= 3 - 1){
  3538  00EC1C  BE5D               	btfsc	_tamanio_mes+1,7,c
  3539  00EC1E  0012               	return	
  3540  00EC20  505D               	movf	_tamanio_mes+1,w,c
  3541  00EC22  E104               	bnz	u2460
  3542  00EC24  0E02               	movlw	2
  3543  00EC26  5C5C               	subwf	_tamanio_mes,w,c
  3544  00EC28  A0D8               	btfss	status,0,c
  3545  00EC2A  0012               	return	
  3546  00EC2C                     u2460:
  3547                           
  3548                           ;fecha.c: 63: convertir_a_int_fecha(month,&valor);
  3549  00EC2C  0ECC               	movlw	low _month
  3550  00EC2E  6E0E               	movwf	convertir_a_int_fecha@array,c
  3551  00EC30  0E00               	movlw	high _month
  3552  00EC32  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  3553  00EC34  0E2F               	movlw	low cambiar_mes@valor
  3554  00EC36  6E10               	movwf	convertir_a_int_fecha@valor,c
  3555  00EC38  0E00               	movlw	high cambiar_mes@valor
  3556  00EC3A  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  3557  00EC3C  EC8B  F070         	call	_convertir_a_int_fecha	;wreg free
  3558                           
  3559                           ;fecha.c: 64: mes = valor;
  3560  00EC40  C02F  F0E3         	movff	cambiar_mes@valor,_mes
  3561  00EC44  C030  F0E4         	movff	cambiar_mes@valor+1,_mes+1
  3562                           
  3563                           ;fecha.c: 65: Write_RTC();
  3564  00EC48  ECFB  F07B         	call	_Write_RTC	;wreg free
  3565                           
  3566                           ;fecha.c: 66: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3567  00EC4C  0E00               	movlw	0
  3568  00EC4E  6E2E               	movwf	cambiar_mes@i+1,c
  3569  00EC50  0E00               	movlw	0
  3570  00EC52  6E2D               	movwf	cambiar_mes@i,c
  3571  00EC54                     l3430:
  3572  00EC54  BE2E               	btfsc	cambiar_mes@i+1,7,c
  3573  00EC56  D008               	goto	l3434
  3574  00EC58  502E               	movf	cambiar_mes@i+1,w,c
  3575  00EC5A  E112               	bnz	l510
  3576  00EC5C  0E04               	movlw	4
  3577  00EC5E  5C2D               	subwf	cambiar_mes@i,w,c
  3578  00EC60  B0D8               	btfsc	status,0,c
  3579  00EC62  0012               	return	
  3580  00EC64  D001               	goto	l3434
  3581  00EC66  0012               	return	
  3582  00EC68                     l3434:
  3583  00EC68  0EFF               	movlw	255
  3584  00EC6A  6E2B               	movwf	??_cambiar_mes& (0+255),c
  3585  00EC6C  0E8A               	movlw	138
  3586  00EC6E                     u3317:
  3587  00EC6E  2EE8               	decfsz	wreg,f,c
  3588  00EC70  D7FE               	goto	u3317
  3589  00EC72  2E2B               	decfsz	??_cambiar_mes& (0+255),f,c
  3590  00EC74  D7FC               	goto	u3317
  3591  00EC76  D000               	nop2	
  3592  00EC78  4A2D               	infsnz	cambiar_mes@i,f,c
  3593  00EC7A  2A2E               	incf	cambiar_mes@i+1,f,c
  3594  00EC7C  D7EB               	goto	l3430
  3595  00EC7E  0012               	return	
  3596  00EC80                     l510:
  3597  00EC80  0012               	return		;funcret
  3598  00EC82                     __end_of_cambiar_mes:
  3599                           	opt stack 0
  3600                           tosu	equ	0xFFF
  3601                           tosh	equ	0xFFE
  3602                           tosl	equ	0xFFD
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           postinc0	equ	0xFEE
  3609                           wreg	equ	0xFE8
  3610                           postinc1	equ	0xFE6
  3611                           postdec1	equ	0xFE5
  3612                           fsr1h	equ	0xFE2
  3613                           fsr1l	equ	0xFE1
  3614                           indf2	equ	0xFDF
  3615                           postinc2	equ	0xFDE
  3616                           postdec2	equ	0xFDD
  3617                           fsr2h	equ	0xFDA
  3618                           fsr2l	equ	0xFD9
  3619                           status	equ	0xFD8
  3620                           
  3621 ;; *************** function _cambiar_anio *****************
  3622 ;; Defined at:
  3623 ;;		line 70 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  tecla           1    wreg     unsigned char 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  tecla           1   43[COMRAM] unsigned char 
  3628 ;;  i               2   44[COMRAM] int 
  3629 ;;  valor           2   46[COMRAM] int 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;		None               void
  3632 ;; Registers used:
  3633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3640 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3643 ;;Total ram usage:        6 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; Hardware stack levels required when called:    5
  3646 ;; This function calls:
  3647 ;;		_Write_RTC
  3648 ;;		_convertir_a_int_fecha
  3649 ;;		_guardar_elemento_fecha
  3650 ;;		_lcd_gotoxy
  3651 ;;		_lcd_putrs
  3652 ;; This function is called by:
  3653 ;;		_main
  3654 ;;		_guardar_tecla_presionada
  3655 ;;		_leer_teclado
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text14
  3660  00EDEE                     __ptext14:
  3661                           	opt stack 0
  3662  00EDEE                     _cambiar_anio:
  3663                           	opt stack 23
  3664                           
  3665                           ;incstack = 0
  3666                           ;cambiar_anio@tecla stored from wreg
  3667  00EDEE  6E2C               	movwf	cambiar_anio@tecla,c
  3668                           
  3669                           ;fecha.c: 71: int valor = 0;
  3670  00EDF0  0E00               	movlw	0
  3671  00EDF2  6E30               	movwf	cambiar_anio@valor+1,c
  3672  00EDF4  0E00               	movlw	0
  3673  00EDF6  6E2F               	movwf	cambiar_anio@valor,c
  3674                           
  3675                           ;fecha.c: 73: if (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia == 0){
  3676  00EDF8  0100               	movlb	0	; () banked
  3677  00EDFA  BFD3               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  3678  00EDFC  D008               	goto	l3442
  3679  00EDFE  0100               	movlb	0	; () banked
  3680  00EE00  51D3               	movf	(_tamanio_anio+1)& (0+255),w,b
  3681  00EE02  E124               	bnz	l3452
  3682  00EE04  0E02               	movlw	2
  3683  00EE06  0100               	movlb	0	; () banked
  3684  00EE08  5DD2               	subwf	_tamanio_anio& (0+255),w,b
  3685  00EE0A  B0D8               	btfsc	status,0,c
  3686  00EE0C  D01F               	goto	l3452
  3687  00EE0E                     l3442:
  3688                           
  3689                           ; BSR set to: 0
  3690  00EE0E  505C               	movf	_tamanio_mes,w,c
  3691  00EE10  105D               	iorwf	_tamanio_mes+1,w,c
  3692  00EE12  A4D8               	btfss	status,2,c
  3693  00EE14  D01B               	goto	l3452
  3694                           
  3695                           ; BSR set to: 0
  3696  00EE16  5058               	movf	_tamanio_dia,w,c
  3697  00EE18  1059               	iorwf	_tamanio_dia+1,w,c
  3698  00EE1A  A4D8               	btfss	status,2,c
  3699  00EE1C  D017               	goto	l3452
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;fecha.c: 74: guardar_elemento_fecha(tecla,year,&tamanio_anio);
  3703  00EE1E  0ECF               	movlw	low _year
  3704  00EE20  6E24               	movwf	guardar_elemento_fecha@array,c
  3705  00EE22  0E00               	movlw	high _year
  3706  00EE24  6E25               	movwf	guardar_elemento_fecha@array+1,c
  3707  00EE26  0ED2               	movlw	low _tamanio_anio
  3708  00EE28  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  3709  00EE2A  0E00               	movlw	high _tamanio_anio
  3710  00EE2C  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  3711  00EE2E  502C               	movf	cambiar_anio@tecla,w,c
  3712  00EE30  EC59  F073         	call	_guardar_elemento_fecha
  3713                           
  3714                           ;fecha.c: 75: lcd_gotoxy(1,2);
  3715  00EE34  0E02               	movlw	2
  3716  00EE36  6E05               	movwf	lcd_gotoxy@y,c
  3717  00EE38  0E01               	movlw	1
  3718  00EE3A  ECCA  F070         	call	_lcd_gotoxy
  3719                           
  3720                           ;fecha.c: 76: lcd_putrs(year);
  3721  00EE3E  0ECF               	movlw	low _year
  3722  00EE40  6E09               	movwf	lcd_putrs@ptr,c
  3723  00EE42  0E00               	movlw	high _year
  3724  00EE44  6E0A               	movwf	lcd_putrs@ptr+1,c
  3725  00EE46  EC92  F072         	call	_lcd_putrs	;wreg free
  3726  00EE4A  D000               	goto	l3452
  3727  00EE4C                     l3452:
  3728                           
  3729                           ;fecha.c: 77: }
  3730                           ;fecha.c: 79: if (tamanio_anio >= 3 - 1){
  3731  00EE4C  0100               	movlb	0	; () banked
  3732  00EE4E  BFD3               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  3733  00EE50  0012               	return	
  3734  00EE52  0100               	movlb	0	; () banked
  3735  00EE54  51D3               	movf	(_tamanio_anio+1)& (0+255),w,b
  3736  00EE56  E105               	bnz	u2520
  3737  00EE58  0E02               	movlw	2
  3738  00EE5A  0100               	movlb	0	; () banked
  3739  00EE5C  5DD2               	subwf	_tamanio_anio& (0+255),w,b
  3740  00EE5E  A0D8               	btfss	status,0,c
  3741  00EE60  0012               	return	
  3742  00EE62                     u2520:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;fecha.c: 81: convertir_a_int_fecha(year,&valor);
  3746  00EE62  0ECF               	movlw	low _year
  3747  00EE64  6E0E               	movwf	convertir_a_int_fecha@array,c
  3748  00EE66  0E00               	movlw	high _year
  3749  00EE68  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  3750  00EE6A  0E2F               	movlw	low cambiar_anio@valor
  3751  00EE6C  6E10               	movwf	convertir_a_int_fecha@valor,c
  3752  00EE6E  0E00               	movlw	high cambiar_anio@valor
  3753  00EE70  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  3754  00EE72  EC8B  F070         	call	_convertir_a_int_fecha	;wreg free
  3755                           
  3756                           ;fecha.c: 82: anio = valor;
  3757  00EE76  C02F  F0DB         	movff	cambiar_anio@valor,_anio
  3758  00EE7A  C030  F0DC         	movff	cambiar_anio@valor+1,_anio+1
  3759                           
  3760                           ;fecha.c: 83: Write_RTC();
  3761  00EE7E  ECFB  F07B         	call	_Write_RTC	;wreg free
  3762                           
  3763                           ;fecha.c: 85: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3764  00EE82  0E00               	movlw	0
  3765  00EE84  6E2E               	movwf	cambiar_anio@i+1,c
  3766  00EE86  0E00               	movlw	0
  3767  00EE88  6E2D               	movwf	cambiar_anio@i,c
  3768  00EE8A                     l3460:
  3769  00EE8A  BE2E               	btfsc	cambiar_anio@i+1,7,c
  3770  00EE8C  D008               	goto	l3464
  3771  00EE8E  502E               	movf	cambiar_anio@i+1,w,c
  3772  00EE90  E112               	bnz	l517
  3773  00EE92  0E04               	movlw	4
  3774  00EE94  5C2D               	subwf	cambiar_anio@i,w,c
  3775  00EE96  B0D8               	btfsc	status,0,c
  3776  00EE98  0012               	return	
  3777  00EE9A  D001               	goto	l3464
  3778  00EE9C  0012               	return	
  3779  00EE9E                     l3464:
  3780  00EE9E  0EFF               	movlw	255
  3781  00EEA0  6E2B               	movwf	??_cambiar_anio& (0+255),c
  3782  00EEA2  0E8A               	movlw	138
  3783  00EEA4                     u3327:
  3784  00EEA4  2EE8               	decfsz	wreg,f,c
  3785  00EEA6  D7FE               	goto	u3327
  3786  00EEA8  2E2B               	decfsz	??_cambiar_anio& (0+255),f,c
  3787  00EEAA  D7FC               	goto	u3327
  3788  00EEAC  D000               	nop2	
  3789  00EEAE  4A2D               	infsnz	cambiar_anio@i,f,c
  3790  00EEB0  2A2E               	incf	cambiar_anio@i+1,f,c
  3791  00EEB2  D7EB               	goto	l3460
  3792  00EEB4  0012               	return	
  3793  00EEB6                     l517:
  3794  00EEB6  0012               	return		;funcret
  3795  00EEB8                     __end_of_cambiar_anio:
  3796                           	opt stack 0
  3797                           tosu	equ	0xFFF
  3798                           tosh	equ	0xFFE
  3799                           tosl	equ	0xFFD
  3800                           pclath	equ	0xFFA
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postinc1	equ	0xFE6
  3808                           postdec1	equ	0xFE5
  3809                           fsr1h	equ	0xFE2
  3810                           fsr1l	equ	0xFE1
  3811                           indf2	equ	0xFDF
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _mostrar_guardar_temporal_password *****************
  3819 ;; Defined at:
  3820 ;;		line 122 in file "main.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  tecla           1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  tecla           1   56[COMRAM] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  2  212[None  ] int 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3837 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3838 ;;Total ram usage:        1 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    6
  3841 ;; This function calls:
  3842 ;;		_guardar_password_temporal
  3843 ;;		_imprimir_tecla
  3844 ;;		_sprintf
  3845 ;; This function is called by:
  3846 ;;		_main
  3847 ;;		_guardar_tecla_presionada
  3848 ;;		_leer_teclado
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text15
  3853  00E204                     __ptext15:
  3854                           	opt stack 0
  3855  00E204                     _mostrar_guardar_temporal_password:
  3856                           	opt stack 23
  3857                           
  3858                           ;incstack = 0
  3859                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  3860  00E204  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  3861                           
  3862                           ;main.c: 124: imprimir_tecla(tecla);
  3863  00E206  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  3864  00E208  EC96  F071         	call	_imprimir_tecla
  3865                           
  3866                           ;main.c: 125: sprintf(buffer2,"%01u",tecla);
  3867  00E20C  0EA7               	movlw	low _buffer2
  3868  00E20E  6E0D               	movwf	sprintf@sp,c
  3869  00E210  0E00               	movlw	high _buffer2
  3870  00E212  6E0E               	movwf	sprintf@sp+1,c
  3871  00E214  0ED3               	movlw	low STR_7
  3872  00E216  6E0F               	movwf	sprintf@f,c
  3873  00E218  0EFF               	movlw	high STR_7
  3874  00E21A  6E10               	movwf	sprintf@f+1,c
  3875  00E21C  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  3876  00E220  6A12               	clrf	?_sprintf+5,c
  3877  00E222  ECC6  F07C         	call	_sprintf	;wreg free
  3878                           
  3879                           ;main.c: 126: guardar_password_temporal(*buffer2);
  3880  00E226  0100               	movlb	0	; () banked
  3881  00E228  51A7               	movf	_buffer2& (0+255),w,b
  3882  00E22A  ECFF  F071         	call	_guardar_password_temporal
  3883  00E22E  0012               	return		;funcret
  3884  00E230                     __end_of_mostrar_guardar_temporal_password:
  3885                           	opt stack 0
  3886                           tosu	equ	0xFFF
  3887                           tosh	equ	0xFFE
  3888                           tosl	equ	0xFFD
  3889                           pclath	equ	0xFFA
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           postinc1	equ	0xFE6
  3897                           postdec1	equ	0xFE5
  3898                           fsr1h	equ	0xFE2
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _guardar_password_temporal *****************
  3908 ;; Defined at:
  3909 ;;		line 16 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  valor           1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  valor           1    2[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3926 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3927 ;;Total ram usage:        3 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_mostrar_guardar_temporal_password
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text16
  3937  00E3FE                     __ptext16:
  3938                           	opt stack 0
  3939  00E3FE                     _guardar_password_temporal:
  3940                           	opt stack 28
  3941                           
  3942                           ;incstack = 0
  3943                           ;guardar_password_temporal@valor stored from wreg
  3944  00E3FE  6E03               	movwf	guardar_password_temporal@valor,c
  3945                           
  3946                           ;alarma.c: 18: if (tamanio_password < 6){
  3947  00E400  BE56               	btfsc	_tamanio_password+1,7,c
  3948  00E402  D006               	goto	l3308
  3949  00E404  5056               	movf	_tamanio_password+1,w,c
  3950  00E406  E11D               	bnz	l768
  3951  00E408  0E06               	movlw	6
  3952  00E40A  5C55               	subwf	_tamanio_password,w,c
  3953  00E40C  B0D8               	btfsc	status,0,c
  3954  00E40E  0012               	return	
  3955  00E410                     l3308:
  3956                           
  3957                           ;alarma.c: 19: temporal[tamanio_password] = valor;
  3958  00E410  0E86               	movlw	low _temporal
  3959  00E412  2455               	addwf	_tamanio_password,w,c
  3960  00E414  6ED9               	movwf	fsr2l,c
  3961  00E416  0E00               	movlw	high _temporal
  3962  00E418  2056               	addwfc	_tamanio_password+1,w,c
  3963  00E41A  6EDA               	movwf	fsr2h,c
  3964  00E41C  C003  FFDF         	movff	guardar_password_temporal@valor,indf2
  3965                           
  3966                           ;alarma.c: 20: temporal [tamanio_password+1] = '\0';
  3967  00E420  0E01               	movlw	1
  3968  00E422  2455               	addwf	_tamanio_password,w,c
  3969  00E424  6E01               	movwf	??_guardar_password_temporal& (0+255),c
  3970  00E426  0E00               	movlw	0
  3971  00E428  2056               	addwfc	_tamanio_password+1,w,c
  3972  00E42A  6E02               	movwf	(??_guardar_password_temporal+1)& (0+255),c
  3973  00E42C  0E86               	movlw	low _temporal
  3974  00E42E  2401               	addwf	??_guardar_password_temporal,w,c
  3975  00E430  6ED9               	movwf	fsr2l,c
  3976  00E432  0E00               	movlw	high _temporal
  3977  00E434  2002               	addwfc	??_guardar_password_temporal+1,w,c
  3978  00E436  6EDA               	movwf	fsr2h,c
  3979  00E438  0E00               	movlw	0
  3980  00E43A  6EDF               	movwf	indf2,c
  3981                           
  3982                           ;alarma.c: 21: tamanio_password++;
  3983  00E43C  4A55               	infsnz	_tamanio_password,f,c
  3984  00E43E  2A56               	incf	_tamanio_password+1,f,c
  3985  00E440  0012               	return	
  3986  00E442                     l768:
  3987  00E442  0012               	return		;funcret
  3988  00E444                     __end_of_guardar_password_temporal:
  3989                           	opt stack 0
  3990                           tosu	equ	0xFFF
  3991                           tosh	equ	0xFFE
  3992                           tosl	equ	0xFFD
  3993                           pclath	equ	0xFFA
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           postinc0	equ	0xFEE
  3999                           wreg	equ	0xFE8
  4000                           postinc1	equ	0xFE6
  4001                           postdec1	equ	0xFE5
  4002                           fsr1h	equ	0xFE2
  4003                           fsr1l	equ	0xFE1
  4004                           indf2	equ	0xFDF
  4005                           postinc2	equ	0xFDE
  4006                           postdec2	equ	0xFDD
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function _guardar_current_password *****************
  4012 ;; Defined at:
  4013 ;;		line 6 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  valor           1    wreg     unsigned char 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  valor           1    2[COMRAM] unsigned char 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;		None               void
  4020 ;; Registers used:
  4021 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4029 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4030 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4031 ;;Total ram usage:        3 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_mostrar_guardar_password
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text17
  4041  00E3B8                     __ptext17:
  4042                           	opt stack 0
  4043  00E3B8                     _guardar_current_password:
  4044                           	opt stack 28
  4045                           
  4046                           ;incstack = 0
  4047                           ;guardar_current_password@valor stored from wreg
  4048  00E3B8  6E03               	movwf	guardar_current_password@valor,c
  4049                           
  4050                           ;alarma.c: 9: if (tamanio_password < 6){
  4051  00E3BA  BE56               	btfsc	_tamanio_password+1,7,c
  4052  00E3BC  D006               	goto	l3302
  4053  00E3BE  5056               	movf	_tamanio_password+1,w,c
  4054  00E3C0  E11D               	bnz	l764
  4055  00E3C2  0E06               	movlw	6
  4056  00E3C4  5C55               	subwf	_tamanio_password,w,c
  4057  00E3C6  B0D8               	btfsc	status,0,c
  4058  00E3C8  0012               	return	
  4059  00E3CA                     l3302:
  4060                           
  4061                           ;alarma.c: 10: current_password[tamanio_password] = valor;
  4062  00E3CA  0E78               	movlw	low _current_password
  4063  00E3CC  2455               	addwf	_tamanio_password,w,c
  4064  00E3CE  6ED9               	movwf	fsr2l,c
  4065  00E3D0  0E00               	movlw	high _current_password
  4066  00E3D2  2056               	addwfc	_tamanio_password+1,w,c
  4067  00E3D4  6EDA               	movwf	fsr2h,c
  4068  00E3D6  C003  FFDF         	movff	guardar_current_password@valor,indf2
  4069                           
  4070                           ;alarma.c: 11: current_password [tamanio_password+1] = '\0';
  4071  00E3DA  0E01               	movlw	1
  4072  00E3DC  2455               	addwf	_tamanio_password,w,c
  4073  00E3DE  6E01               	movwf	??_guardar_current_password& (0+255),c
  4074  00E3E0  0E00               	movlw	0
  4075  00E3E2  2056               	addwfc	_tamanio_password+1,w,c
  4076  00E3E4  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  4077  00E3E6  0E78               	movlw	low _current_password
  4078  00E3E8  2401               	addwf	??_guardar_current_password,w,c
  4079  00E3EA  6ED9               	movwf	fsr2l,c
  4080  00E3EC  0E00               	movlw	high _current_password
  4081  00E3EE  2002               	addwfc	??_guardar_current_password+1,w,c
  4082  00E3F0  6EDA               	movwf	fsr2h,c
  4083  00E3F2  0E00               	movlw	0
  4084  00E3F4  6EDF               	movwf	indf2,c
  4085                           
  4086                           ;alarma.c: 12: tamanio_password++;
  4087  00E3F6  4A55               	infsnz	_tamanio_password,f,c
  4088  00E3F8  2A56               	incf	_tamanio_password+1,f,c
  4089  00E3FA  0012               	return	
  4090  00E3FC                     l764:
  4091  00E3FC  0012               	return		;funcret
  4092  00E3FE                     __end_of_guardar_current_password:
  4093                           	opt stack 0
  4094                           tosu	equ	0xFFF
  4095                           tosh	equ	0xFFE
  4096                           tosl	equ	0xFFD
  4097                           pclath	equ	0xFFA
  4098                           tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           postinc0	equ	0xFEE
  4103                           wreg	equ	0xFE8
  4104                           postinc1	equ	0xFE6
  4105                           postdec1	equ	0xFE5
  4106                           fsr1h	equ	0xFE2
  4107                           fsr1l	equ	0xFE1
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function _guardar_nuevo_password *****************
  4116 ;; Defined at:
  4117 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  valor           1    wreg     unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  valor           1    2[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;		None               void
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4133 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4134 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4135 ;;Total ram usage:        3 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_mostrar_guardar_nuevo_password
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text18
  4145  00E372                     __ptext18:
  4146                           	opt stack 0
  4147  00E372                     _guardar_nuevo_password:
  4148                           	opt stack 28
  4149                           
  4150                           ;incstack = 0
  4151                           ;guardar_nuevo_password@valor stored from wreg
  4152  00E372  6E03               	movwf	guardar_nuevo_password@valor,c
  4153                           
  4154                           ;alarma.c: 27: if (tamanio_new_password < 6){
  4155  00E374  BE54               	btfsc	_tamanio_new_password+1,7,c
  4156  00E376  D006               	goto	l3314
  4157  00E378  5054               	movf	_tamanio_new_password+1,w,c
  4158  00E37A  E11D               	bnz	l772
  4159  00E37C  0E06               	movlw	6
  4160  00E37E  5C53               	subwf	_tamanio_new_password,w,c
  4161  00E380  B0D8               	btfsc	status,0,c
  4162  00E382  0012               	return	
  4163  00E384                     l3314:
  4164                           
  4165                           ;alarma.c: 28: new_password[tamanio_new_password] = valor;
  4166  00E384  0E7F               	movlw	low _new_password
  4167  00E386  2453               	addwf	_tamanio_new_password,w,c
  4168  00E388  6ED9               	movwf	fsr2l,c
  4169  00E38A  0E00               	movlw	high _new_password
  4170  00E38C  2054               	addwfc	_tamanio_new_password+1,w,c
  4171  00E38E  6EDA               	movwf	fsr2h,c
  4172  00E390  C003  FFDF         	movff	guardar_nuevo_password@valor,indf2
  4173                           
  4174                           ;alarma.c: 29: new_password [tamanio_new_password+1] = 0;
  4175  00E394  0E01               	movlw	1
  4176  00E396  2453               	addwf	_tamanio_new_password,w,c
  4177  00E398  6E01               	movwf	??_guardar_nuevo_password& (0+255),c
  4178  00E39A  0E00               	movlw	0
  4179  00E39C  2054               	addwfc	_tamanio_new_password+1,w,c
  4180  00E39E  6E02               	movwf	(??_guardar_nuevo_password+1)& (0+255),c
  4181  00E3A0  0E7F               	movlw	low _new_password
  4182  00E3A2  2401               	addwf	??_guardar_nuevo_password,w,c
  4183  00E3A4  6ED9               	movwf	fsr2l,c
  4184  00E3A6  0E00               	movlw	high _new_password
  4185  00E3A8  2002               	addwfc	??_guardar_nuevo_password+1,w,c
  4186  00E3AA  6EDA               	movwf	fsr2h,c
  4187  00E3AC  0E00               	movlw	0
  4188  00E3AE  6EDF               	movwf	indf2,c
  4189                           
  4190                           ;alarma.c: 30: tamanio_new_password++;
  4191  00E3B0  4A53               	infsnz	_tamanio_new_password,f,c
  4192  00E3B2  2A54               	incf	_tamanio_new_password+1,f,c
  4193  00E3B4  0012               	return	
  4194  00E3B6                     l772:
  4195  00E3B6  0012               	return		;funcret
  4196  00E3B8                     __end_of_guardar_nuevo_password:
  4197                           	opt stack 0
  4198                           tosu	equ	0xFFF
  4199                           tosh	equ	0xFFE
  4200                           tosl	equ	0xFFD
  4201                           pclath	equ	0xFFA
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           postinc1	equ	0xFE6
  4209                           postdec1	equ	0xFE5
  4210                           fsr1h	equ	0xFE2
  4211                           fsr1l	equ	0xFE1
  4212                           indf2	equ	0xFDF
  4213                           postinc2	equ	0xFDE
  4214                           postdec2	equ	0xFDD
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8
  4218                           
  4219 ;; *************** function _guardar_comando *****************
  4220 ;; Defined at:
  4221 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  tecla           1    wreg     unsigned char 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  tecla           1   57[COMRAM] unsigned char 
  4226 ;;  aux            20   37[COMRAM] unsigned char [20]
  4227 ;; Return value:  Size  Location     Type
  4228 ;;		None               void
  4229 ;; Registers used:
  4230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4237 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4239 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4240 ;;Total ram usage:       23 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    2
  4243 ;; This function calls:
  4244 ;;		_sprintf
  4245 ;; This function is called by:
  4246 ;;		_ingresar_comando
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text19
  4251  00E642                     __ptext19:
  4252                           	opt stack 0
  4253  00E642                     _guardar_comando:
  4254                           	opt stack 26
  4255                           
  4256                           ;incstack = 0
  4257                           ;guardar_comando@tecla stored from wreg
  4258  00E642  6E3A               	movwf	guardar_comando@tecla,c
  4259                           
  4260                           ;teclado.c: 12: unsigned char aux[20];
  4261                           ;teclado.c: 13: sprintf(aux,"%01u",tecla);
  4262  00E644  0E26               	movlw	low guardar_comando@aux
  4263  00E646  6E0D               	movwf	sprintf@sp,c
  4264  00E648  0E00               	movlw	high guardar_comando@aux
  4265  00E64A  6E0E               	movwf	sprintf@sp+1,c
  4266  00E64C  0ED3               	movlw	low STR_7
  4267  00E64E  6E0F               	movwf	sprintf@f,c
  4268  00E650  0EFF               	movlw	high STR_7
  4269  00E652  6E10               	movwf	sprintf@f+1,c
  4270  00E654  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  4271  00E658  6A12               	clrf	?_sprintf+5,c
  4272  00E65A  ECC6  F07C         	call	_sprintf	;wreg free
  4273                           
  4274                           ;teclado.c: 14: if (tamanio_comando < 2){
  4275  00E65E  0100               	movlb	0	; () banked
  4276  00E660  BFA6               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  4277  00E662  D008               	goto	l3322
  4278  00E664  0100               	movlb	0	; () banked
  4279  00E666  51A6               	movf	(_tamanio_comando+1)& (0+255),w,b
  4280  00E668  E123               	bnz	l330
  4281  00E66A  0E02               	movlw	2
  4282  00E66C  0100               	movlb	0	; () banked
  4283  00E66E  5DA5               	subwf	_tamanio_comando& (0+255),w,b
  4284  00E670  B0D8               	btfsc	status,0,c
  4285  00E672  0012               	return	
  4286  00E674                     l3322:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;teclado.c: 15: comando[tamanio_comando] = *aux;
  4290  00E674  0ED6               	movlw	low _comando
  4291  00E676  0100               	movlb	0	; () banked
  4292  00E678  25A5               	addwf	_tamanio_comando& (0+255),w,b
  4293  00E67A  6ED9               	movwf	fsr2l,c
  4294  00E67C  0E00               	movlw	high _comando
  4295  00E67E  0100               	movlb	0	; () banked
  4296  00E680  21A6               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  4297  00E682  6EDA               	movwf	fsr2h,c
  4298  00E684  C026  FFDF         	movff	guardar_comando@aux,indf2
  4299                           
  4300                           ;teclado.c: 16: comando [tamanio_comando+1] = 0;
  4301  00E688  0E01               	movlw	1
  4302  00E68A  0100               	movlb	0	; () banked
  4303  00E68C  25A5               	addwf	_tamanio_comando& (0+255),w,b
  4304  00E68E  6E24               	movwf	??_guardar_comando& (0+255),c
  4305  00E690  0E00               	movlw	0
  4306  00E692  0100               	movlb	0	; () banked
  4307  00E694  21A6               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  4308  00E696  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  4309  00E698  0ED6               	movlw	low _comando
  4310  00E69A  2424               	addwf	??_guardar_comando,w,c
  4311  00E69C  6ED9               	movwf	fsr2l,c
  4312  00E69E  0E00               	movlw	high _comando
  4313  00E6A0  2025               	addwfc	??_guardar_comando+1,w,c
  4314  00E6A2  6EDA               	movwf	fsr2h,c
  4315  00E6A4  0E00               	movlw	0
  4316  00E6A6  6EDF               	movwf	indf2,c
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;teclado.c: 17: tamanio_comando++;
  4320  00E6A8  0100               	movlb	0	; () banked
  4321  00E6AA  4BA5               	infsnz	_tamanio_comando& (0+255),f,b
  4322  00E6AC  2BA6               	incf	(_tamanio_comando+1)& (0+255),f,b
  4323  00E6AE  0012               	return	
  4324  00E6B0                     l330:
  4325                           
  4326                           ; BSR set to: 0
  4327  00E6B0  0012               	return		;funcret
  4328  00E6B2                     __end_of_guardar_comando:
  4329                           	opt stack 0
  4330                           tosu	equ	0xFFF
  4331                           tosh	equ	0xFFE
  4332                           tosl	equ	0xFFD
  4333                           pclath	equ	0xFFA
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postinc1	equ	0xFE6
  4341                           postdec1	equ	0xFE5
  4342                           fsr1h	equ	0xFE2
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _imprimir_tecla *****************
  4352 ;; Defined at:
  4353 ;;		line 41 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  tecla           1    wreg     unsigned char 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  tecla           1   55[COMRAM] unsigned char 
  4358 ;;  aux            20   35[COMRAM] unsigned char [20]
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4369 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4371 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4372 ;;Total ram usage:       21 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    5
  4375 ;; This function calls:
  4376 ;;		_lcd_putrs
  4377 ;;		_sprintf
  4378 ;; This function is called by:
  4379 ;;		_mostrar_guardar_password
  4380 ;;		_mostrar_guardar_temporal_password
  4381 ;;		_mostrar_guardar_nuevo_password
  4382 ;;		_confirmar_actualizar_password
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text20
  4387  00E32C                     __ptext20:
  4388                           	opt stack 0
  4389  00E32C                     _imprimir_tecla:
  4390                           	opt stack 23
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;incstack = 0
  4394                           ;imprimir_tecla@tecla stored from wreg
  4395  00E32C  6E38               	movwf	imprimir_tecla@tecla,c
  4396                           
  4397                           ;teclado.c: 43: unsigned char aux[20];
  4398                           ;teclado.c: 44: sprintf(aux,"%01u",tecla);
  4399  00E32E  0E24               	movlw	low imprimir_tecla@aux
  4400  00E330  6E0D               	movwf	sprintf@sp,c
  4401  00E332  0E00               	movlw	high imprimir_tecla@aux
  4402  00E334  6E0E               	movwf	sprintf@sp+1,c
  4403  00E336  0ED3               	movlw	low STR_7
  4404  00E338  6E0F               	movwf	sprintf@f,c
  4405  00E33A  0EFF               	movlw	high STR_7
  4406  00E33C  6E10               	movwf	sprintf@f+1,c
  4407  00E33E  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  4408  00E342  6A12               	clrf	?_sprintf+5,c
  4409  00E344  ECC6  F07C         	call	_sprintf	;wreg free
  4410                           
  4411                           ;teclado.c: 45: if (ocultar_teclas == 1){
  4412  00E348  0100               	movlb	0	; () banked
  4413  00E34A  05A1               	decf	_ocultar_teclas& (0+255),w,b
  4414  00E34C  0100               	movlb	0	; () banked
  4415  00E34E  11A2               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  4416  00E350  A4D8               	btfss	status,2,c
  4417  00E352  D007               	goto	l3298
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;teclado.c: 46: lcd_putrs("*");
  4421  00E354  0EED               	movlw	low STR_32
  4422  00E356  6E09               	movwf	lcd_putrs@ptr,c
  4423  00E358  0EFF               	movlw	high STR_32
  4424  00E35A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4425  00E35C  EC92  F072         	call	_lcd_putrs	;wreg free
  4426                           
  4427                           ;teclado.c: 47: }else{
  4428  00E360  0012               	return	
  4429  00E362                     l3298:
  4430                           
  4431                           ;teclado.c: 48: lcd_putrs(aux);
  4432  00E362  0E24               	movlw	low imprimir_tecla@aux
  4433  00E364  6E09               	movwf	lcd_putrs@ptr,c
  4434  00E366  0E00               	movlw	high imprimir_tecla@aux
  4435  00E368  6E0A               	movwf	lcd_putrs@ptr+1,c
  4436  00E36A  EC92  F072         	call	_lcd_putrs	;wreg free
  4437  00E36E  0012               	return	
  4438  00E370  0012               	return		;funcret
  4439  00E372                     __end_of_imprimir_tecla:
  4440                           	opt stack 0
  4441                           tosu	equ	0xFFF
  4442                           tosh	equ	0xFFE
  4443                           tosl	equ	0xFFD
  4444                           pclath	equ	0xFFA
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           postinc1	equ	0xFE6
  4452                           postdec1	equ	0xFE5
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _inicializar_hora *****************
  4463 ;; Defined at:
  4464 ;;		line 9 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;		None               void
  4471 ;; Registers used:
  4472 ;;		wreg, status,2
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_cambiar_hora
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text21
  4492  00E152                     __ptext21:
  4493                           	opt stack 0
  4494  00E152                     _inicializar_hora:
  4495                           	opt stack 27
  4496                           
  4497                           ;hora.c: 10: *hour = 0;
  4498                           
  4499                           ;incstack = 0
  4500  00E152  0E00               	movlw	0
  4501  00E154  0100               	movlb	0	; () banked
  4502  00E156  6FC6               	movwf	_hour& (0+255),b
  4503                           
  4504                           ;hora.c: 11: *minutes = 0;
  4505  00E158  0E00               	movlw	0
  4506  00E15A  0100               	movlb	0	; () banked
  4507  00E15C  6FC9               	movwf	_minutes& (0+255),b
  4508                           
  4509                           ;hora.c: 13: tamanio_hora = 0;
  4510  00E15E  0E00               	movlw	0
  4511  00E160  6E5B               	movwf	_tamanio_hora+1,c
  4512  00E162  0E00               	movlw	0
  4513  00E164  6E5A               	movwf	_tamanio_hora,c
  4514                           
  4515                           ;hora.c: 14: tamanio_minutos = 0;
  4516  00E166  0E00               	movlw	0
  4517  00E168  0100               	movlb	0	; () banked
  4518  00E16A  6FD5               	movwf	(_tamanio_minutos+1)& (0+255),b
  4519  00E16C  0E00               	movlw	0
  4520  00E16E  6FD4               	movwf	_tamanio_minutos& (0+255),b
  4521                           
  4522                           ; BSR set to: 0
  4523  00E170  0012               	return		;funcret
  4524  00E172                     __end_of_inicializar_hora:
  4525                           	opt stack 0
  4526                           tosu	equ	0xFFF
  4527                           tosh	equ	0xFFE
  4528                           tosl	equ	0xFFD
  4529                           pclath	equ	0xFFA
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           postinc1	equ	0xFE6
  4537                           postdec1	equ	0xFE5
  4538                           fsr1h	equ	0xFE2
  4539                           fsr1l	equ	0xFE1
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _guardar_elemento_hora *****************
  4548 ;; Defined at:
  4549 ;;		line 17 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  tecla           1    wreg     unsigned char 
  4552 ;;  array           2   35[COMRAM] PTR unsigned char 
  4553 ;;		 -> minutes(3), hour(3), 
  4554 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  4555 ;;		 -> tamanio_hora(2), tamanio_minutos(2), 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  tecla           1   41[COMRAM] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4567 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4570 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4571 ;;Total ram usage:        7 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    2
  4574 ;; This function calls:
  4575 ;;		_sprintf
  4576 ;; This function is called by:
  4577 ;;		_cambiar_hora
  4578 ;;		_cambiar_minutos
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text22
  4583  00E726                     __ptext22:
  4584                           	opt stack 0
  4585  00E726                     _guardar_elemento_hora:
  4586                           	opt stack 25
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;incstack = 0
  4590                           ;guardar_elemento_hora@tecla stored from wreg
  4591  00E726  6E2A               	movwf	guardar_elemento_hora@tecla,c
  4592                           
  4593                           ;hora.c: 19: sprintf(buffer2,"%01u",tecla);
  4594  00E728  0EA7               	movlw	low _buffer2
  4595  00E72A  6E0D               	movwf	sprintf@sp,c
  4596  00E72C  0E00               	movlw	high _buffer2
  4597  00E72E  6E0E               	movwf	sprintf@sp+1,c
  4598  00E730  0ED3               	movlw	low STR_7
  4599  00E732  6E0F               	movwf	sprintf@f,c
  4600  00E734  0EFF               	movlw	high STR_7
  4601  00E736  6E10               	movwf	sprintf@f+1,c
  4602  00E738  C02A  F011         	movff	guardar_elemento_hora@tecla,?_sprintf+4
  4603  00E73C  6A12               	clrf	?_sprintf+5,c
  4604  00E73E  ECC6  F07C         	call	_sprintf	;wreg free
  4605                           
  4606                           ;hora.c: 20: array[*tamanio_array] = *buffer2;
  4607  00E742  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4608  00E746  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4609  00E74A  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  4610  00E74E  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  4611  00E752  5028               	movf	??_guardar_elemento_hora,w,c
  4612  00E754  2424               	addwf	guardar_elemento_hora@array,w,c
  4613  00E756  6ED9               	movwf	fsr2l,c
  4614  00E758  5029               	movf	??_guardar_elemento_hora+1,w,c
  4615  00E75A  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  4616  00E75C  6EDA               	movwf	fsr2h,c
  4617  00E75E  C0A7  FFDF         	movff	_buffer2,indf2
  4618                           
  4619                           ;hora.c: 21: array [(*tamanio_array)+1] = 0;
  4620  00E762  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4621  00E766  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4622  00E76A  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  4623  00E76E  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  4624  00E772  0E01               	movlw	1
  4625  00E774  2628               	addwf	??_guardar_elemento_hora,f,c
  4626  00E776  0E00               	movlw	0
  4627  00E778  2229               	addwfc	??_guardar_elemento_hora+1,f,c
  4628  00E77A  5028               	movf	??_guardar_elemento_hora,w,c
  4629  00E77C  2424               	addwf	guardar_elemento_hora@array,w,c
  4630  00E77E  6ED9               	movwf	fsr2l,c
  4631  00E780  5029               	movf	??_guardar_elemento_hora+1,w,c
  4632  00E782  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  4633  00E784  6EDA               	movwf	fsr2h,c
  4634  00E786  0E00               	movlw	0
  4635  00E788  6EDF               	movwf	indf2,c
  4636                           
  4637                           ;hora.c: 22: (*tamanio_array)++;
  4638  00E78A  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4639  00E78E  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4640  00E792  2ADE               	incf	postinc2,f,c
  4641  00E794  0E00               	movlw	0
  4642  00E796  22DD               	addwfc	postdec2,f,c
  4643  00E798  0012               	return		;funcret
  4644  00E79A                     __end_of_guardar_elemento_hora:
  4645                           	opt stack 0
  4646                           tosu	equ	0xFFF
  4647                           tosh	equ	0xFFE
  4648                           tosl	equ	0xFFD
  4649                           pclath	equ	0xFFA
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           postinc1	equ	0xFE6
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _convertir_a_int_hora *****************
  4668 ;; Defined at:
  4669 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  array           2   13[COMRAM] PTR unsigned char 
  4672 ;;		 -> minutes(3), hour(3), 
  4673 ;;  valor           2   15[COMRAM] PTR int 
  4674 ;;		 -> cambiar_minutos@valor(2), cambiar_hora@valor(2), 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;		None               void
  4679 ;; Registers used:
  4680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4689 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;Total ram usage:        4 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    2
  4693 ;; This function calls:
  4694 ;;		_atoi
  4695 ;; This function is called by:
  4696 ;;		_cambiar_hora
  4697 ;;		_cambiar_minutos
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text23
  4702  00E134                     __ptext23:
  4703                           	opt stack 0
  4704  00E134                     _convertir_a_int_hora:
  4705                           	opt stack 25
  4706                           
  4707                           ;hora.c: 26: *valor = atoi(array);
  4708                           
  4709                           ;incstack = 0
  4710  00E134  C00E  F007         	movff	convertir_a_int_hora@array,atoi@s
  4711  00E138  C00F  F008         	movff	convertir_a_int_hora@array+1,atoi@s+1
  4712  00E13C  ECC2  F077         	call	_atoi	;wreg free
  4713  00E140  C010  FFD9         	movff	convertir_a_int_hora@valor,fsr2l
  4714  00E144  C011  FFDA         	movff	convertir_a_int_hora@valor+1,fsr2h
  4715  00E148  C007  FFDE         	movff	?_atoi,postinc2
  4716  00E14C  C008  FFDD         	movff	?_atoi+1,postdec2
  4717  00E150  0012               	return		;funcret
  4718  00E152                     __end_of_convertir_a_int_hora:
  4719                           	opt stack 0
  4720                           tosu	equ	0xFFF
  4721                           tosh	equ	0xFFE
  4722                           tosl	equ	0xFFD
  4723                           pclath	equ	0xFFA
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postinc1	equ	0xFE6
  4731                           postdec1	equ	0xFE5
  4732                           fsr1h	equ	0xFE2
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function _inicializar_fecha *****************
  4742 ;; Defined at:
  4743 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;		None               void
  4750 ;; Registers used:
  4751 ;;		wreg, status,2
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;Total ram usage:        0 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_cambiar_dia
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text24
  4771  00E288                     __ptext24:
  4772                           	opt stack 0
  4773  00E288                     _inicializar_fecha:
  4774                           	opt stack 27
  4775                           
  4776                           ;fecha.c: 9: *day = 0;
  4777                           
  4778                           ;incstack = 0
  4779  00E288  0E00               	movlw	0
  4780  00E28A  0100               	movlb	0	; () banked
  4781  00E28C  6FC3               	movwf	_day& (0+255),b
  4782                           
  4783                           ;fecha.c: 10: *month = 0;
  4784  00E28E  0E00               	movlw	0
  4785  00E290  0100               	movlb	0	; () banked
  4786  00E292  6FCC               	movwf	_month& (0+255),b
  4787                           
  4788                           ;fecha.c: 11: *year = 0;
  4789  00E294  0E00               	movlw	0
  4790  00E296  0100               	movlb	0	; () banked
  4791  00E298  6FCF               	movwf	_year& (0+255),b
  4792                           
  4793                           ;fecha.c: 13: tamanio_dia = 0;
  4794  00E29A  0E00               	movlw	0
  4795  00E29C  6E59               	movwf	_tamanio_dia+1,c
  4796  00E29E  0E00               	movlw	0
  4797  00E2A0  6E58               	movwf	_tamanio_dia,c
  4798                           
  4799                           ;fecha.c: 14: tamanio_mes = 0;
  4800  00E2A2  0E00               	movlw	0
  4801  00E2A4  6E5D               	movwf	_tamanio_mes+1,c
  4802  00E2A6  0E00               	movlw	0
  4803  00E2A8  6E5C               	movwf	_tamanio_mes,c
  4804                           
  4805                           ;fecha.c: 15: tamanio_anio = 0;
  4806  00E2AA  0E00               	movlw	0
  4807  00E2AC  0100               	movlb	0	; () banked
  4808  00E2AE  6FD3               	movwf	(_tamanio_anio+1)& (0+255),b
  4809  00E2B0  0E00               	movlw	0
  4810  00E2B2  6FD2               	movwf	_tamanio_anio& (0+255),b
  4811                           
  4812                           ; BSR set to: 0
  4813  00E2B4  0012               	return		;funcret
  4814  00E2B6                     __end_of_inicializar_fecha:
  4815                           	opt stack 0
  4816                           tosu	equ	0xFFF
  4817                           tosh	equ	0xFFE
  4818                           tosl	equ	0xFFD
  4819                           pclath	equ	0xFFA
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postinc1	equ	0xFE6
  4827                           postdec1	equ	0xFE5
  4828                           fsr1h	equ	0xFE2
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           fsr2h	equ	0xFDA
  4834                           fsr2l	equ	0xFD9
  4835                           status	equ	0xFD8
  4836                           
  4837 ;; *************** function _guardar_elemento_fecha *****************
  4838 ;; Defined at:
  4839 ;;		line 18 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  tecla           1    wreg     unsigned char 
  4842 ;;  array           2   35[COMRAM] PTR unsigned char 
  4843 ;;		 -> year(3), month(3), day(3), 
  4844 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  4845 ;;		 -> tamanio_dia(2), tamanio_mes(2), tamanio_anio(2), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  tecla           1   41[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;		None               void
  4850 ;; Registers used:
  4851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4858 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4860 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4861 ;;Total ram usage:        7 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    2
  4864 ;; This function calls:
  4865 ;;		_sprintf
  4866 ;; This function is called by:
  4867 ;;		_cambiar_dia
  4868 ;;		_cambiar_mes
  4869 ;;		_cambiar_anio
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text25
  4874  00E6B2                     __ptext25:
  4875                           	opt stack 0
  4876  00E6B2                     _guardar_elemento_fecha:
  4877                           	opt stack 25
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;incstack = 0
  4881                           ;guardar_elemento_fecha@tecla stored from wreg
  4882  00E6B2  6E2A               	movwf	guardar_elemento_fecha@tecla,c
  4883                           
  4884                           ;fecha.c: 20: sprintf(buffer2,"%01u",tecla);
  4885  00E6B4  0EA7               	movlw	low _buffer2
  4886  00E6B6  6E0D               	movwf	sprintf@sp,c
  4887  00E6B8  0E00               	movlw	high _buffer2
  4888  00E6BA  6E0E               	movwf	sprintf@sp+1,c
  4889  00E6BC  0ED3               	movlw	low STR_7
  4890  00E6BE  6E0F               	movwf	sprintf@f,c
  4891  00E6C0  0EFF               	movlw	high STR_7
  4892  00E6C2  6E10               	movwf	sprintf@f+1,c
  4893  00E6C4  C02A  F011         	movff	guardar_elemento_fecha@tecla,?_sprintf+4
  4894  00E6C8  6A12               	clrf	?_sprintf+5,c
  4895  00E6CA  ECC6  F07C         	call	_sprintf	;wreg free
  4896                           
  4897                           ;fecha.c: 21: array[*tamanio_array] = *buffer2;
  4898  00E6CE  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4899  00E6D2  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4900  00E6D6  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4901  00E6DA  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4902  00E6DE  5028               	movf	??_guardar_elemento_fecha,w,c
  4903  00E6E0  2424               	addwf	guardar_elemento_fecha@array,w,c
  4904  00E6E2  6ED9               	movwf	fsr2l,c
  4905  00E6E4  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4906  00E6E6  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4907  00E6E8  6EDA               	movwf	fsr2h,c
  4908  00E6EA  C0A7  FFDF         	movff	_buffer2,indf2
  4909                           
  4910                           ;fecha.c: 22: array [(*tamanio_array)+1] = 0;
  4911  00E6EE  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4912  00E6F2  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4913  00E6F6  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4914  00E6FA  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4915  00E6FE  0E01               	movlw	1
  4916  00E700  2628               	addwf	??_guardar_elemento_fecha,f,c
  4917  00E702  0E00               	movlw	0
  4918  00E704  2229               	addwfc	??_guardar_elemento_fecha+1,f,c
  4919  00E706  5028               	movf	??_guardar_elemento_fecha,w,c
  4920  00E708  2424               	addwf	guardar_elemento_fecha@array,w,c
  4921  00E70A  6ED9               	movwf	fsr2l,c
  4922  00E70C  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4923  00E70E  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4924  00E710  6EDA               	movwf	fsr2h,c
  4925  00E712  0E00               	movlw	0
  4926  00E714  6EDF               	movwf	indf2,c
  4927                           
  4928                           ;fecha.c: 23: (*tamanio_array)++;
  4929  00E716  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4930  00E71A  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4931  00E71E  2ADE               	incf	postinc2,f,c
  4932  00E720  0E00               	movlw	0
  4933  00E722  22DD               	addwfc	postdec2,f,c
  4934  00E724  0012               	return		;funcret
  4935  00E726                     __end_of_guardar_elemento_fecha:
  4936                           	opt stack 0
  4937                           tosu	equ	0xFFF
  4938                           tosh	equ	0xFFE
  4939                           tosl	equ	0xFFD
  4940                           pclath	equ	0xFFA
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           postinc0	equ	0xFEE
  4946                           wreg	equ	0xFE8
  4947                           postinc1	equ	0xFE6
  4948                           postdec1	equ	0xFE5
  4949                           fsr1h	equ	0xFE2
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function _convertir_a_int_fecha *****************
  4959 ;; Defined at:
  4960 ;;		line 26 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  array           2   13[COMRAM] PTR unsigned char 
  4963 ;;		 -> year(3), month(3), day(3), 
  4964 ;;  valor           2   15[COMRAM] PTR int 
  4965 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4980 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4981 ;;Total ram usage:        4 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    2
  4984 ;; This function calls:
  4985 ;;		_atoi
  4986 ;; This function is called by:
  4987 ;;		_cambiar_dia
  4988 ;;		_cambiar_mes
  4989 ;;		_cambiar_anio
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text26
  4994  00E116                     __ptext26:
  4995                           	opt stack 0
  4996  00E116                     _convertir_a_int_fecha:
  4997                           	opt stack 25
  4998                           
  4999                           ;fecha.c: 27: *valor = atoi(array);
  5000                           
  5001                           ;incstack = 0
  5002  00E116  C00E  F007         	movff	convertir_a_int_fecha@array,atoi@s
  5003  00E11A  C00F  F008         	movff	convertir_a_int_fecha@array+1,atoi@s+1
  5004  00E11E  ECC2  F077         	call	_atoi	;wreg free
  5005  00E122  C010  FFD9         	movff	convertir_a_int_fecha@valor,fsr2l
  5006  00E126  C011  FFDA         	movff	convertir_a_int_fecha@valor+1,fsr2h
  5007  00E12A  C007  FFDE         	movff	?_atoi,postinc2
  5008  00E12E  C008  FFDD         	movff	?_atoi+1,postdec2
  5009  00E132  0012               	return		;funcret
  5010  00E134                     __end_of_convertir_a_int_fecha:
  5011                           	opt stack 0
  5012                           tosu	equ	0xFFF
  5013                           tosh	equ	0xFFE
  5014                           tosl	equ	0xFFD
  5015                           pclath	equ	0xFFA
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postinc1	equ	0xFE6
  5023                           postdec1	equ	0xFE5
  5024                           fsr1h	equ	0xFE2
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _atoi *****************
  5034 ;; Defined at:
  5035 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  s               2    6[COMRAM] PTR const unsigned char 
  5038 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  5039 ;;		 -> day(3), 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  a               2   11[COMRAM] int 
  5042 ;;  sign            1   10[COMRAM] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  2    6[COMRAM] int 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5053 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5055 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5056 ;;Total ram usage:        7 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    1
  5059 ;; This function calls:
  5060 ;;		___wmul
  5061 ;;		_isdigit
  5062 ;; This function is called by:
  5063 ;;		_convertir_a_int_fecha
  5064 ;;		_convertir_a_int_hora
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text27
  5069  00EF84                     __ptext27:
  5070                           	opt stack 0
  5071  00EF84                     _atoi:
  5072                           	opt stack 25
  5073                           
  5074                           ;incstack = 0
  5075  00EF84  D003               	goto	l3038
  5076  00EF86                     l3036:
  5077  00EF86  4A07               	infsnz	atoi@s,f,c
  5078  00EF88  2A08               	incf	atoi@s+1,f,c
  5079  00EF8A  D000               	goto	l3038
  5080  00EF8C                     l3038:
  5081  00EF8C  C007  FFD9         	movff	atoi@s,fsr2l
  5082  00EF90  C008  FFDA         	movff	atoi@s+1,fsr2h
  5083  00EF94  0E20               	movlw	32
  5084  00EF96  18DE               	xorwf	postinc2,w,c
  5085  00EF98  B4D8               	btfsc	status,2,c
  5086  00EF9A  D7F5               	goto	l3036
  5087  00EF9C  C007  FFD9         	movff	atoi@s,fsr2l
  5088  00EFA0  C008  FFDA         	movff	atoi@s+1,fsr2h
  5089  00EFA4  0E09               	movlw	9
  5090  00EFA6  18DE               	xorwf	postinc2,w,c
  5091  00EFA8  B4D8               	btfsc	status,2,c
  5092  00EFAA  D7ED               	goto	l3036
  5093  00EFAC  0E00               	movlw	0
  5094  00EFAE  6E0D               	movwf	atoi@a+1,c
  5095  00EFB0  0E00               	movlw	0
  5096  00EFB2  6E0C               	movwf	atoi@a,c
  5097  00EFB4  0E00               	movlw	0
  5098  00EFB6  6E0B               	movwf	atoi@sign,c
  5099  00EFB8  C007  FFD9         	movff	atoi@s,fsr2l
  5100  00EFBC  C008  FFDA         	movff	atoi@s+1,fsr2h
  5101  00EFC0  0E2D               	movlw	45
  5102  00EFC2  18DE               	xorwf	postinc2,w,c
  5103  00EFC4  A4D8               	btfss	status,2,c
  5104  00EFC6  D002               	goto	l3048
  5105  00EFC8  2A0B               	incf	atoi@sign,f,c
  5106  00EFCA  D025               	goto	l3054
  5107  00EFCC                     l3048:
  5108  00EFCC  C007  FFD9         	movff	atoi@s,fsr2l
  5109  00EFD0  C008  FFDA         	movff	atoi@s+1,fsr2h
  5110  00EFD4  0E2B               	movlw	43
  5111  00EFD6  18DE               	xorwf	postinc2,w,c
  5112  00EFD8  A4D8               	btfss	status,2,c
  5113  00EFDA  D020               	goto	l3056
  5114  00EFDC  D01C               	goto	l3054
  5115  00EFDE  D01E               	goto	l3056
  5116  00EFE0                     l3052:
  5117  00EFE0  C00C  F001         	movff	atoi@a,___wmul@multiplier
  5118  00EFE4  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  5119  00EFE8  0E00               	movlw	0
  5120  00EFEA  6E04               	movwf	___wmul@multiplicand+1,c
  5121  00EFEC  0E0A               	movlw	10
  5122  00EFEE  6E03               	movwf	___wmul@multiplicand,c
  5123  00EFF0  ECEE  F070         	call	___wmul	;wreg free
  5124  00EFF4  C007  FFD9         	movff	atoi@s,fsr2l
  5125  00EFF8  C008  FFDA         	movff	atoi@s+1,fsr2h
  5126  00EFFC  50DF               	movf	indf2,w,c
  5127  00EFFE  6E09               	movwf	??_atoi& (0+255),c
  5128  00F000  6A0A               	clrf	(??_atoi+1)& (0+255),c
  5129  00F002  5001               	movf	?___wmul,w,c
  5130  00F004  2609               	addwf	??_atoi,f,c
  5131  00F006  5002               	movf	?___wmul+1,w,c
  5132  00F008  220A               	addwfc	??_atoi+1,f,c
  5133  00F00A  0ED0               	movlw	208
  5134  00F00C  2409               	addwf	??_atoi,w,c
  5135  00F00E  6E0C               	movwf	atoi@a,c
  5136  00F010  0EFF               	movlw	255
  5137  00F012  200A               	addwfc	??_atoi+1,w,c
  5138  00F014  6E0D               	movwf	atoi@a+1,c
  5139  00F016                     l3054:
  5140  00F016  4A07               	infsnz	atoi@s,f,c
  5141  00F018  2A08               	incf	atoi@s+1,f,c
  5142  00F01A  D000               	goto	l3056
  5143  00F01C                     l3056:
  5144  00F01C  C007  FFD9         	movff	atoi@s,fsr2l
  5145  00F020  C008  FFDA         	movff	atoi@s+1,fsr2h
  5146  00F024  50DF               	movf	indf2,w,c
  5147  00F026  ECB9  F070         	call	_isdigit
  5148  00F02A  B0D8               	btfsc	status,0,c
  5149  00F02C  D7D9               	goto	l3052
  5150  00F02E  500B               	movf	atoi@sign,w,c
  5151  00F030  B4D8               	btfsc	status,2,c
  5152  00F032  D00D               	goto	l1120
  5153  00F034  C00C  F009         	movff	atoi@a,??_atoi
  5154  00F038  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  5155  00F03C  1E09               	comf	??_atoi,f,c
  5156  00F03E  1E0A               	comf	??_atoi+1,f,c
  5157  00F040  4A09               	infsnz	??_atoi,f,c
  5158  00F042  2A0A               	incf	??_atoi+1,f,c
  5159  00F044  C009  F007         	movff	??_atoi,?_atoi
  5160  00F048  C00A  F008         	movff	??_atoi+1,?_atoi+1
  5161  00F04C  0012               	return	
  5162  00F04E                     l1120:
  5163  00F04E  C00C  F007         	movff	atoi@a,?_atoi
  5164  00F052  C00D  F008         	movff	atoi@a+1,?_atoi+1
  5165  00F056  0012               	return		;funcret
  5166  00F058                     __end_of_atoi:
  5167                           	opt stack 0
  5168                           tosu	equ	0xFFF
  5169                           tosh	equ	0xFFE
  5170                           tosl	equ	0xFFD
  5171                           pclath	equ	0xFFA
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           postinc1	equ	0xFE6
  5179                           postdec1	equ	0xFE5
  5180                           fsr1h	equ	0xFE2
  5181                           fsr1l	equ	0xFE1
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function _ingresar_password *****************
  5190 ;; Defined at:
  5191 ;;		line 89 in file "main.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  i               2   27[COMRAM] int 
  5196 ;;  i               2   29[COMRAM] int 
  5197 ;;  clear          16   11[COMRAM] unsigned char [16]
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  2  198[None  ] int 
  5200 ;; Registers used:
  5201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5208 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5210 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5211 ;;Total ram usage:       21 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    5
  5214 ;; This function calls:
  5215 ;;		_lcd_comand
  5216 ;;		_lcd_gotoxy
  5217 ;;		_lcd_putrs
  5218 ;;		_validar_password
  5219 ;; This function is called by:
  5220 ;;		_main
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text28
  5225  00F12E                     __ptext28:
  5226                           	opt stack 0
  5227  00F12E                     _ingresar_password:
  5228                           	opt stack 25
  5229                           
  5230                           ;main.c: 90: char clear[16];
  5231                           ;main.c: 91: for (int i=0;i<16;i++) clear[i]=' ';
  5232                           
  5233                           ;incstack = 0
  5234  00F12E  0E00               	movlw	0
  5235  00F130  6E1F               	movwf	ingresar_password@i+1,c
  5236  00F132  0E00               	movlw	0
  5237  00F134  6E1E               	movwf	ingresar_password@i,c
  5238  00F136                     l3704:
  5239  00F136  BE1F               	btfsc	ingresar_password@i+1,7,c
  5240  00F138  D008               	goto	l3708
  5241  00F13A  501F               	movf	ingresar_password@i+1,w,c
  5242  00F13C  E112               	bnz	l3714
  5243  00F13E  0E10               	movlw	16
  5244  00F140  5C1E               	subwf	ingresar_password@i,w,c
  5245  00F142  B0D8               	btfsc	status,0,c
  5246  00F144  D00E               	goto	l3714
  5247  00F146  D001               	goto	l3708
  5248  00F148  D00C               	goto	l3714
  5249  00F14A                     l3708:
  5250  00F14A  0E0C               	movlw	low ingresar_password@clear
  5251  00F14C  241E               	addwf	ingresar_password@i,w,c
  5252  00F14E  6ED9               	movwf	fsr2l,c
  5253  00F150  0E00               	movlw	high ingresar_password@clear
  5254  00F152  201F               	addwfc	ingresar_password@i+1,w,c
  5255  00F154  6EDA               	movwf	fsr2h,c
  5256  00F156  0E20               	movlw	32
  5257  00F158  6EDF               	movwf	indf2,c
  5258  00F15A  4A1E               	infsnz	ingresar_password@i,f,c
  5259  00F15C  2A1F               	incf	ingresar_password@i+1,f,c
  5260  00F15E  D7EB               	goto	l3704
  5261  00F160  D000               	goto	l3714
  5262  00F162                     l3714:
  5263                           
  5264                           ;main.c: 93: lcd_comand(0b00001100);
  5265  00F162  0E0C               	movlw	12
  5266  00F164  EC42  F070         	call	_lcd_comand
  5267                           
  5268                           ;main.c: 94: lcd_gotoxy(1,1);
  5269  00F168  0E01               	movlw	1
  5270  00F16A  6E05               	movwf	lcd_gotoxy@y,c
  5271  00F16C  0E01               	movlw	1
  5272  00F16E  ECCA  F070         	call	_lcd_gotoxy
  5273                           
  5274                           ;main.c: 95: lcd_putrs("Inserte password");
  5275  00F172  0E91               	movlw	low STR_5
  5276  00F174  6E09               	movwf	lcd_putrs@ptr,c
  5277  00F176  0EFF               	movlw	high STR_5
  5278  00F178  6E0A               	movwf	lcd_putrs@ptr+1,c
  5279  00F17A  EC92  F072         	call	_lcd_putrs	;wreg free
  5280                           
  5281                           ;main.c: 96: lcd_gotoxy(tamanio_password+1,2);
  5282  00F17E  0E02               	movlw	2
  5283  00F180  6E05               	movwf	lcd_gotoxy@y,c
  5284  00F182  2855               	incf	_tamanio_password,w,c
  5285  00F184  ECCA  F070         	call	_lcd_gotoxy
  5286                           
  5287                           ;main.c: 98: validar_password();
  5288  00F188  ECC7  F074         	call	_validar_password	;wreg free
  5289                           
  5290                           ;main.c: 99: if (tamanio_password >= 6 && !autorizado){
  5291  00F18C  BE56               	btfsc	_tamanio_password+1,7,c
  5292  00F18E  0012               	return	
  5293  00F190  5056               	movf	_tamanio_password+1,w,c
  5294  00F192  E104               	bnz	u2870
  5295  00F194  0E06               	movlw	6
  5296  00F196  5C55               	subwf	_tamanio_password,w,c
  5297  00F198  A0D8               	btfss	status,0,c
  5298  00F19A  0012               	return	
  5299  00F19C                     u2870:
  5300  00F19C  0100               	movlb	0	; () banked
  5301  00F19E  5193               	movf	_autorizado& (0+255),w,b
  5302  00F1A0  0100               	movlb	0	; () banked
  5303  00F1A2  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  5304  00F1A4  A4D8               	btfss	status,2,c
  5305  00F1A6  0012               	return	
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;main.c: 100: tamanio_password = 0;
  5309  00F1A8  0E00               	movlw	0
  5310  00F1AA  6E56               	movwf	_tamanio_password+1,c
  5311  00F1AC  0E00               	movlw	0
  5312  00F1AE  6E55               	movwf	_tamanio_password,c
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;main.c: 101: lcd_gotoxy(1,2);
  5316  00F1B0  0E02               	movlw	2
  5317  00F1B2  6E05               	movwf	lcd_gotoxy@y,c
  5318  00F1B4  0E01               	movlw	1
  5319  00F1B6  ECCA  F070         	call	_lcd_gotoxy
  5320                           
  5321                           ;main.c: 102: lcd_putrs("ERROR pass");
  5322  00F1BA  0EC0               	movlw	low STR_6
  5323  00F1BC  6E09               	movwf	lcd_putrs@ptr,c
  5324  00F1BE  0EFF               	movlw	high STR_6
  5325  00F1C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  5326  00F1C2  EC92  F072         	call	_lcd_putrs	;wreg free
  5327                           
  5328                           ;main.c: 103: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  5329  00F1C6  0E00               	movlw	0
  5330  00F1C8  6E1D               	movwf	ingresar_password@i_561+1,c
  5331  00F1CA  0E00               	movlw	0
  5332  00F1CC  6E1C               	movwf	ingresar_password@i_561,c
  5333  00F1CE                     l3734:
  5334  00F1CE  BE1D               	btfsc	ingresar_password@i_561+1,7,c
  5335  00F1D0  D008               	goto	l3738
  5336  00F1D2  501D               	movf	ingresar_password@i_561+1,w,c
  5337  00F1D4  E112               	bnz	l3742
  5338  00F1D6  0E04               	movlw	4
  5339  00F1D8  5C1C               	subwf	ingresar_password@i_561,w,c
  5340  00F1DA  B0D8               	btfsc	status,0,c
  5341  00F1DC  D00E               	goto	l3742
  5342  00F1DE  D001               	goto	l3738
  5343  00F1E0  D00C               	goto	l3742
  5344  00F1E2                     l3738:
  5345  00F1E2  0EFF               	movlw	255
  5346  00F1E4  6E0B               	movwf	??_ingresar_password& (0+255),c
  5347  00F1E6  0E8A               	movlw	138
  5348  00F1E8                     u3337:
  5349  00F1E8  2EE8               	decfsz	wreg,f,c
  5350  00F1EA  D7FE               	goto	u3337
  5351  00F1EC  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  5352  00F1EE  D7FC               	goto	u3337
  5353  00F1F0  D000               	nop2	
  5354  00F1F2  4A1C               	infsnz	ingresar_password@i_561,f,c
  5355  00F1F4  2A1D               	incf	ingresar_password@i_561+1,f,c
  5356  00F1F6  D7EB               	goto	l3734
  5357  00F1F8  D000               	goto	l3742
  5358  00F1FA                     l3742:
  5359                           
  5360                           ;main.c: 104: lcd_gotoxy(1,2);
  5361  00F1FA  0E02               	movlw	2
  5362  00F1FC  6E05               	movwf	lcd_gotoxy@y,c
  5363  00F1FE  0E01               	movlw	1
  5364  00F200  ECCA  F070         	call	_lcd_gotoxy
  5365                           
  5366                           ;main.c: 105: lcd_putrs(clear);
  5367  00F204  0E0C               	movlw	low ingresar_password@clear
  5368  00F206  6E09               	movwf	lcd_putrs@ptr,c
  5369  00F208  0E00               	movlw	high ingresar_password@clear
  5370  00F20A  6E0A               	movwf	lcd_putrs@ptr+1,c
  5371  00F20C  EC92  F072         	call	_lcd_putrs	;wreg free
  5372  00F210  0012               	return	
  5373  00F212  0012               	return		;funcret
  5374  00F214                     __end_of_ingresar_password:
  5375                           	opt stack 0
  5376                           tosu	equ	0xFFF
  5377                           tosh	equ	0xFFE
  5378                           tosl	equ	0xFFD
  5379                           pclath	equ	0xFFA
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           postinc0	equ	0xFEE
  5385                           wreg	equ	0xFE8
  5386                           postinc1	equ	0xFE6
  5387                           postdec1	equ	0xFE5
  5388                           fsr1h	equ	0xFE2
  5389                           fsr1l	equ	0xFE1
  5390                           indf2	equ	0xFDF
  5391                           postinc2	equ	0xFDE
  5392                           postdec2	equ	0xFDD
  5393                           fsr2h	equ	0xFDA
  5394                           fsr2l	equ	0xFD9
  5395                           status	equ	0xFD8
  5396                           
  5397 ;; *************** function _validar_password *****************
  5398 ;; Defined at:
  5399 ;;		line 34 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  i               2    2[COMRAM] int 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;		None               void
  5406 ;; Registers used:
  5407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5417 ;;Total ram usage:        4 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; This function calls:
  5420 ;;		Nothing
  5421 ;; This function is called by:
  5422 ;;		_ingresar_password
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           	psect	text29
  5427  00E98E                     __ptext29:
  5428                           	opt stack 0
  5429  00E98E                     _validar_password:
  5430                           	opt stack 29
  5431                           
  5432                           ;alarma.c: 36: autorizado = 1;
  5433                           
  5434                           ;incstack = 0
  5435  00E98E  0E00               	movlw	0
  5436  00E990  0100               	movlb	0	; () banked
  5437  00E992  6F94               	movwf	(_autorizado+1)& (0+255),b
  5438  00E994  0E01               	movlw	1
  5439  00E996  6F93               	movwf	_autorizado& (0+255),b
  5440                           
  5441                           ;alarma.c: 37: int i = 0;
  5442  00E998  0E00               	movlw	0
  5443  00E99A  6E04               	movwf	validar_password@i+1,c
  5444  00E99C  0E00               	movlw	0
  5445  00E99E  6E03               	movwf	validar_password@i,c
  5446                           
  5447                           ;alarma.c: 38: while (i < 6 && autorizado==1){
  5448  00E9A0  D019               	goto	l3570
  5449  00E9A2                     l3564:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;alarma.c: 40: if (current_password[i] != password[i])
  5453  00E9A2  0EE7               	movlw	low _password
  5454  00E9A4  2403               	addwf	validar_password@i,w,c
  5455  00E9A6  6ED9               	movwf	fsr2l,c
  5456  00E9A8  0E00               	movlw	high _password
  5457  00E9AA  2004               	addwfc	validar_password@i+1,w,c
  5458  00E9AC  6EDA               	movwf	fsr2h,c
  5459  00E9AE  0E78               	movlw	low _current_password
  5460  00E9B0  2403               	addwf	validar_password@i,w,c
  5461  00E9B2  6EE1               	movwf	fsr1l,c
  5462  00E9B4  0E00               	movlw	high _current_password
  5463  00E9B6  2004               	addwfc	validar_password@i+1,w,c
  5464  00E9B8  6EE2               	movwf	fsr1h,c
  5465  00E9BA  50DE               	movf	postinc2,w,c
  5466  00E9BC  18E6               	xorwf	postinc1,w,c
  5467  00E9BE  B4D8               	btfsc	status,2,c
  5468  00E9C0  D006               	goto	l3568
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;alarma.c: 41: autorizado = 0;
  5472  00E9C2  0E00               	movlw	0
  5473  00E9C4  0100               	movlb	0	; () banked
  5474  00E9C6  6F94               	movwf	(_autorizado+1)& (0+255),b
  5475  00E9C8  0E00               	movlw	0
  5476  00E9CA  6F93               	movwf	_autorizado& (0+255),b
  5477  00E9CC  D000               	goto	l3568
  5478  00E9CE                     l3568:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;alarma.c: 43: i++;
  5482  00E9CE  4A03               	infsnz	validar_password@i,f,c
  5483  00E9D0  2A04               	incf	validar_password@i+1,f,c
  5484  00E9D2  D000               	goto	l3570
  5485  00E9D4                     l3570:
  5486                           
  5487                           ; BSR set to: 0
  5488  00E9D4  BE04               	btfsc	validar_password@i+1,7,c
  5489  00E9D6  D006               	goto	l3572
  5490  00E9D8  5004               	movf	validar_password@i+1,w,c
  5491  00E9DA  E10C               	bnz	l3574
  5492  00E9DC  0E06               	movlw	6
  5493  00E9DE  5C03               	subwf	validar_password@i,w,c
  5494  00E9E0  B0D8               	btfsc	status,0,c
  5495  00E9E2  D008               	goto	l3574
  5496  00E9E4                     l3572:
  5497                           
  5498                           ; BSR set to: 0
  5499  00E9E4  0100               	movlb	0	; () banked
  5500  00E9E6  0593               	decf	_autorizado& (0+255),w,b
  5501  00E9E8  0100               	movlb	0	; () banked
  5502  00E9EA  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  5503  00E9EC  A4D8               	btfss	status,2,c
  5504  00E9EE  D002               	goto	l3574
  5505  00E9F0  D7D8               	goto	l3564
  5506                           
  5507                           ; BSR set to: 0
  5508  00E9F2  D000               	goto	l3574
  5509  00E9F4                     l3574:
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;alarma.c: 44: }
  5513                           ;alarma.c: 46: if (autorizado == 1){
  5514  00E9F4  0100               	movlb	0	; () banked
  5515  00E9F6  0593               	decf	_autorizado& (0+255),w,b
  5516  00E9F8  0100               	movlb	0	; () banked
  5517  00E9FA  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  5518  00E9FC  A4D8               	btfss	status,2,c
  5519  00E9FE  0012               	return	
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;alarma.c: 47: tamanio_password = 0;
  5523  00EA00  0E00               	movlw	0
  5524  00EA02  6E56               	movwf	_tamanio_password+1,c
  5525  00EA04  0E00               	movlw	0
  5526  00EA06  6E55               	movwf	_tamanio_password,c
  5527                           
  5528                           ;alarma.c: 48: encendida = 1;
  5529  00EA08  0E00               	movlw	0
  5530  00EA0A  0100               	movlb	0	; () banked
  5531  00EA0C  6F9A               	movwf	(_encendida+1)& (0+255),b
  5532  00EA0E  0E01               	movlw	1
  5533  00EA10  6F99               	movwf	_encendida& (0+255),b
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;alarma.c: 49: LATBbits.LATB1 = 1;;
  5537  00EA12  828A               	bsf	3978,1,c	;volatile
  5538  00EA14  0012               	return	
  5539                           
  5540                           ; BSR set to: 0
  5541                           
  5542                           ; BSR set to: 0
  5543  00EA16  0012               	return		;funcret
  5544  00EA18                     __end_of_validar_password:
  5545                           	opt stack 0
  5546                           tosu	equ	0xFFF
  5547                           tosh	equ	0xFFE
  5548                           tosl	equ	0xFFD
  5549                           pclath	equ	0xFFA
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postinc1	equ	0xFE6
  5557                           postdec1	equ	0xFE5
  5558                           fsr1h	equ	0xFE2
  5559                           fsr1l	equ	0xFE1
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _caratula *****************
  5568 ;; Defined at:
  5569 ;;		line 35 in file "main.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  5572 ;;		 -> STR_12(8), 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;		None
  5575 ;; Return value:  Size  Location     Type
  5576 ;;		None               void
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5587 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5588 ;;Total ram usage:        4 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    5
  5591 ;; This function calls:
  5592 ;;		_lcd_comand
  5593 ;;		_lcd_gotoxy
  5594 ;;		_lcd_putrs
  5595 ;;		_sprintf
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text30
  5602  00F058                     __ptext30:
  5603                           	opt stack 0
  5604  00F058                     _caratula:
  5605                           	opt stack 25
  5606                           
  5607                           ;main.c: 37: lcd_comand(0b00001100);
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  00F058  0E0C               	movlw	12
  5612  00F05A  EC42  F070         	call	_lcd_comand
  5613                           
  5614                           ;main.c: 38: lcd_gotoxy(1,1);
  5615  00F05E  0E01               	movlw	1
  5616  00F060  6E05               	movwf	lcd_gotoxy@y,c
  5617  00F062  0E01               	movlw	1
  5618  00F064  ECCA  F070         	call	_lcd_gotoxy
  5619                           
  5620                           ;main.c: 39: lcd_putrs(titulo);
  5621  00F068  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  5622  00F06C  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  5623  00F070  EC92  F072         	call	_lcd_putrs	;wreg free
  5624                           
  5625                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  5626  00F074  0EA7               	movlw	low _buffer2
  5627  00F076  6E0D               	movwf	sprintf@sp,c
  5628  00F078  0E00               	movlw	high _buffer2
  5629  00F07A  6E0E               	movwf	sprintf@sp+1,c
  5630  00F07C  0EA2               	movlw	low STR_1
  5631  00F07E  6E0F               	movwf	sprintf@f,c
  5632  00F080  0EFF               	movlw	high STR_1
  5633  00F082  6E10               	movwf	sprintf@f+1,c
  5634  00F084  C0DD  F011         	movff	_dia,?_sprintf+4
  5635  00F088  C0DE  F012         	movff	_dia+1,?_sprintf+5
  5636  00F08C  C0E3  F013         	movff	_mes,?_sprintf+6
  5637  00F090  C0E4  F014         	movff	_mes+1,?_sprintf+7
  5638  00F094  C0DB  F015         	movff	_anio,?_sprintf+8
  5639  00F098  C0DC  F016         	movff	_anio+1,?_sprintf+9
  5640  00F09C  ECC6  F07C         	call	_sprintf	;wreg free
  5641                           
  5642                           ;main.c: 42: lcd_gotoxy(9,1);
  5643  00F0A0  0E01               	movlw	1
  5644  00F0A2  6E05               	movwf	lcd_gotoxy@y,c
  5645  00F0A4  0E09               	movlw	9
  5646  00F0A6  ECCA  F070         	call	_lcd_gotoxy
  5647                           
  5648                           ;main.c: 43: lcd_putrs(buffer2);
  5649  00F0AA  0EA7               	movlw	low _buffer2
  5650  00F0AC  6E09               	movwf	lcd_putrs@ptr,c
  5651  00F0AE  0E00               	movlw	high _buffer2
  5652  00F0B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  5653  00F0B2  EC92  F072         	call	_lcd_putrs	;wreg free
  5654                           
  5655                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  5656  00F0B6  0EA7               	movlw	low _buffer2
  5657  00F0B8  6E0D               	movwf	sprintf@sp,c
  5658  00F0BA  0E00               	movlw	high _buffer2
  5659  00F0BC  6E0E               	movwf	sprintf@sp+1,c
  5660  00F0BE  0EB1               	movlw	low STR_2
  5661  00F0C0  6E0F               	movwf	sprintf@f,c
  5662  00F0C2  0EFF               	movlw	high STR_2
  5663  00F0C4  6E10               	movwf	sprintf@f+1,c
  5664  00F0C6  C0E1  F011         	movff	_hora,?_sprintf+4
  5665  00F0CA  C0E2  F012         	movff	_hora+1,?_sprintf+5
  5666  00F0CE  C0E5  F013         	movff	_minuto,?_sprintf+6
  5667  00F0D2  C0E6  F014         	movff	_minuto+1,?_sprintf+7
  5668  00F0D6  C0A3  F015         	movff	_segundo,?_sprintf+8
  5669  00F0DA  C0A4  F016         	movff	_segundo+1,?_sprintf+9
  5670  00F0DE  ECC6  F07C         	call	_sprintf	;wreg free
  5671                           
  5672                           ;main.c: 46: lcd_gotoxy(1,2);
  5673  00F0E2  0E02               	movlw	2
  5674  00F0E4  6E05               	movwf	lcd_gotoxy@y,c
  5675  00F0E6  0E01               	movlw	1
  5676  00F0E8  ECCA  F070         	call	_lcd_gotoxy
  5677                           
  5678                           ;main.c: 47: lcd_putrs(buffer2);
  5679  00F0EC  0EA7               	movlw	low _buffer2
  5680  00F0EE  6E09               	movwf	lcd_putrs@ptr,c
  5681  00F0F0  0E00               	movlw	high _buffer2
  5682  00F0F2  6E0A               	movwf	lcd_putrs@ptr+1,c
  5683  00F0F4  EC92  F072         	call	_lcd_putrs	;wreg free
  5684                           
  5685                           ;main.c: 49: lcd_gotoxy(13,2);
  5686  00F0F8  0E02               	movlw	2
  5687  00F0FA  6E05               	movwf	lcd_gotoxy@y,c
  5688  00F0FC  0E0D               	movlw	13
  5689  00F0FE  ECCA  F070         	call	_lcd_gotoxy
  5690                           
  5691                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  5692  00F102  0100               	movlb	0	; () banked
  5693  00F104  5199               	movf	_encendida& (0+255),w,b
  5694  00F106  0100               	movlb	0	; () banked
  5695  00F108  119A               	iorwf	(_encendida+1)& (0+255),w,b
  5696  00F10A  A4D8               	btfss	status,2,c
  5697  00F10C  D004               	goto	l3674
  5698                           
  5699                           ; BSR set to: 0
  5700  00F10E  0ED8               	movlw	low STR_4
  5701  00F110  6E26               	movwf	_caratula$523,c
  5702  00F112  0EFF               	movlw	high STR_4
  5703  00F114  D003               	goto	L4
  5704  00F116                     l3674:
  5705                           
  5706                           ; BSR set to: 0
  5707  00F116  0EE5               	movlw	low STR_3
  5708  00F118  6E26               	movwf	_caratula$523,c
  5709  00F11A  0EFF               	movlw	high STR_3
  5710  00F11C                     L4:
  5711  00F11C  6E27               	movwf	_caratula$523+1,c
  5712  00F11E  D000               	goto	l3676
  5713  00F120                     l3676:
  5714                           
  5715                           ; BSR set to: 0
  5716  00F120  C026  F009         	movff	_caratula$523,lcd_putrs@ptr
  5717  00F124  C027  F00A         	movff	_caratula$523+1,lcd_putrs@ptr+1
  5718  00F128  EC92  F072         	call	_lcd_putrs	;wreg free
  5719  00F12C  0012               	return		;funcret
  5720  00F12E                     __end_of_caratula:
  5721                           	opt stack 0
  5722                           tosu	equ	0xFFF
  5723                           tosh	equ	0xFFE
  5724                           tosl	equ	0xFFD
  5725                           pclath	equ	0xFFA
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           postinc1	equ	0xFE6
  5733                           postdec1	equ	0xFE5
  5734                           fsr1h	equ	0xFE2
  5735                           fsr1l	equ	0xFE1
  5736                           indf2	equ	0xFDF
  5737                           postinc2	equ	0xFDE
  5738                           postdec2	equ	0xFDD
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _sprintf *****************
  5744 ;; Defined at:
  5745 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  sp              2   12[COMRAM] PTR unsigned char 
  5748 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  5749 ;;  f               2   14[COMRAM] PTR const unsigned char 
  5750 ;;		 -> STR_40(5), STR_39(5), STR_31(5), STR_30(5), 
  5751 ;;		 -> STR_27(5), STR_10(5), STR_9(5), STR_8(5), 
  5752 ;;		 -> STR_7(5), STR_2(15), STR_1(15), 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  tmpval          4    0        struct .
  5755 ;;  cp              3    0        PTR const unsigned char 
  5756 ;;  width           2   32[COMRAM] int 
  5757 ;;  val             2   29[COMRAM] unsigned int 
  5758 ;;  ap              2   26[COMRAM] PTR void [1]
  5759 ;;		 -> ?_sprintf(2), 
  5760 ;;  len             2    0        unsigned int 
  5761 ;;  c               1   34[COMRAM] char 
  5762 ;;  prec            1   31[COMRAM] char 
  5763 ;;  flag            1   28[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  2   12[COMRAM] int 
  5766 ;; Registers used:
  5767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5773 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5774 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5775 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5776 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5777 ;;Total ram usage:       23 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    1
  5780 ;; This function calls:
  5781 ;;		___lwdiv
  5782 ;;		___lwmod
  5783 ;;		___wmul
  5784 ;;		_isdigit
  5785 ;; This function is called by:
  5786 ;;		_caratula
  5787 ;;		_mostrar_guardar_password
  5788 ;;		_mostrar_guardar_temporal_password
  5789 ;;		_mostrar_guardar_nuevo_password
  5790 ;;		_confirmar_actualizar_password
  5791 ;;		_main
  5792 ;;		_guardar_comando
  5793 ;;		_imprimir_tecla
  5794 ;;		_guardar_elemento_fecha
  5795 ;;		_guardar_elemento_hora
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text31
  5800  00F98C                     __ptext31:
  5801                           	opt stack 0
  5802  00F98C                     _sprintf:
  5803                           	opt stack 29
  5804                           
  5805                           ;doprnt.c: 494: va_list ap;
  5806                           ;doprnt.c: 499: signed char c;
  5807                           ;doprnt.c: 501: int width;
  5808                           ;doprnt.c: 506: signed char prec;
  5809                           ;doprnt.c: 508: unsigned char flag;
  5810                           ;doprnt.c: 523: union {
  5811                           ;doprnt.c: 524: unsigned long vd;
  5812                           ;doprnt.c: 525: double integ;
  5813                           ;doprnt.c: 526: } tmpval;
  5814                           ;doprnt.c: 528: unsigned int val;
  5815                           ;doprnt.c: 529: unsigned len;
  5816                           ;doprnt.c: 530: const char * cp;
  5817                           ;doprnt.c: 533: *ap = __va_start();
  5818                           
  5819                           ;incstack = 0
  5820  00F98C  0E11               	movlw	low (?_sprintf+4)
  5821  00F98E  6E1B               	movwf	sprintf@ap,c
  5822  00F990  0E00               	movlw	high (?_sprintf+4)
  5823  00F992  6E1C               	movwf	sprintf@ap+1,c
  5824                           
  5825                           ;doprnt.c: 536: while(c = *f++) {
  5826  00F994  D117               	goto	l3028
  5827  00F996                     l2946:
  5828                           
  5829                           ;doprnt.c: 538: if(c != '%')
  5830  00F996  0E25               	movlw	37
  5831  00F998  1823               	xorwf	sprintf@c,w,c
  5832  00F99A  B4D8               	btfsc	status,2,c
  5833  00F99C  D009               	goto	l2952
  5834                           
  5835                           ;doprnt.c: 540: {
  5836                           ;doprnt.c: 541: ((*sp++ = (c)));
  5837  00F99E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5838  00F9A2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5839  00F9A6  C023  FFDF         	movff	sprintf@c,indf2
  5840  00F9AA  4A0D               	infsnz	sprintf@sp,f,c
  5841  00F9AC  2A0E               	incf	sprintf@sp+1,f,c
  5842                           
  5843                           ;doprnt.c: 542: continue;
  5844  00F9AE  D10A               	goto	l3028
  5845  00F9B0                     l2952:
  5846                           
  5847                           ;doprnt.c: 543: }
  5848                           ;doprnt.c: 546: width = 0;
  5849  00F9B0  0E00               	movlw	0
  5850  00F9B2  6E22               	movwf	sprintf@width+1,c
  5851  00F9B4  0E00               	movlw	0
  5852  00F9B6  6E21               	movwf	sprintf@width,c
  5853                           
  5854                           ;doprnt.c: 548: flag = 0;
  5855  00F9B8  0E00               	movlw	0
  5856  00F9BA  6E1D               	movwf	sprintf@flag,c
  5857                           
  5858                           ;doprnt.c: 551: switch(*f) {
  5859                           
  5860                           ;doprnt.c: 550: for(;;) {
  5861  00F9BC  D005               	goto	l2958
  5862  00F9BE                     l2954:
  5863                           
  5864                           ;doprnt.c: 580: flag |= 0x04;
  5865  00F9BE  841D               	bsf	sprintf@flag,2,c
  5866                           
  5867                           ;doprnt.c: 581: f++;
  5868  00F9C0  4A0F               	infsnz	sprintf@f,f,c
  5869  00F9C2  2A10               	incf	sprintf@f+1,f,c
  5870                           
  5871                           ;doprnt.c: 582: continue;
  5872  00F9C4  D001               	goto	l2958
  5873                           
  5874                           ;doprnt.c: 584: }
  5875  00F9C6  D00B               	goto	l2960
  5876  00F9C8                     l2958:
  5877  00F9C8  C00F  FFF6         	movff	sprintf@f,tblptrl
  5878  00F9CC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5879  00F9D0                     	if	0	;tblptru may be non-zero
  5880  00F9D0                     	endif
  5881  00F9D0                     	if	0	;tblptru may be non-zero
  5882  00F9D0                     	endif
  5883  00F9D0  0008               	tblrd		*
  5884  00F9D2  50F5               	movf	tablat,w,c
  5885                           
  5886                           ; Switch size 1, requested type "space"
  5887                           ; Number of cases is 1, Range of values is 48 to 48
  5888                           ; switch strategies available:
  5889                           ; Name         Instructions Cycles
  5890                           ; simple_byte            4     3 (average)
  5891                           ;	Chosen strategy is simple_byte
  5892  00F9D4  0A30               	xorlw	48	; case 48
  5893  00F9D6  B4D8               	btfsc	status,2,c
  5894  00F9D8  D7F2               	goto	l2954
  5895                           
  5896                           ;doprnt.c: 585: break;
  5897  00F9DA  D001               	goto	l2960
  5898                           
  5899                           ;doprnt.c: 586: }
  5900  00F9DC  D7F5               	goto	l2958
  5901  00F9DE                     l2960:
  5902                           
  5903                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5904  00F9DE  C00F  FFF6         	movff	sprintf@f,tblptrl
  5905  00F9E2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5906  00F9E6                     	if	0	;tblptru may be non-zero
  5907  00F9E6                     	endif
  5908  00F9E6                     	if	0	;tblptru may be non-zero
  5909  00F9E6                     	endif
  5910  00F9E6  0008               	tblrd		*
  5911  00F9E8  50F5               	movf	tablat,w,c
  5912  00F9EA  ECB9  F070         	call	_isdigit
  5913  00F9EE  A0D8               	btfss	status,0,c
  5914  00F9F0  D03A               	goto	l2976
  5915                           
  5916                           ;doprnt.c: 598: width = 0;
  5917  00F9F2  0E00               	movlw	0
  5918  00F9F4  6E22               	movwf	sprintf@width+1,c
  5919  00F9F6  0E00               	movlw	0
  5920  00F9F8  6E21               	movwf	sprintf@width,c
  5921  00F9FA  D000               	goto	l2964
  5922  00F9FC                     l2964:
  5923                           
  5924                           ;doprnt.c: 600: width *= 10;
  5925  00F9FC  C021  F001         	movff	sprintf@width,___wmul@multiplier
  5926  00FA00  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  5927  00FA04  0E00               	movlw	0
  5928  00FA06  6E04               	movwf	___wmul@multiplicand+1,c
  5929  00FA08  0E0A               	movlw	10
  5930  00FA0A  6E03               	movwf	___wmul@multiplicand,c
  5931  00FA0C  ECEE  F070         	call	___wmul	;wreg free
  5932  00FA10  C001  F021         	movff	?___wmul,sprintf@width
  5933  00FA14  C002  F022         	movff	?___wmul+1,sprintf@width+1
  5934                           
  5935                           ;doprnt.c: 601: width += *f++ - '0';
  5936  00FA18  0ED0               	movlw	208
  5937  00FA1A  6E17               	movwf	??_sprintf& (0+255),c
  5938  00FA1C  0EFF               	movlw	255
  5939  00FA1E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  5940  00FA20  C00F  FFF6         	movff	sprintf@f,tblptrl
  5941  00FA24  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5942  00FA28                     	if	0	;tblptru may be non-zero
  5943  00FA28                     	endif
  5944  00FA28                     	if	0	;tblptru may be non-zero
  5945  00FA28                     	endif
  5946  00FA28  0008               	tblrd		*
  5947  00FA2A  50F5               	movf	tablat,w,c
  5948  00FA2C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  5949  00FA2E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  5950  00FA30  5017               	movf	??_sprintf,w,c
  5951  00FA32  2619               	addwf	??_sprintf+2,f,c
  5952  00FA34  5018               	movf	??_sprintf+1,w,c
  5953  00FA36  221A               	addwfc	??_sprintf+3,f,c
  5954  00FA38  5019               	movf	??_sprintf+2,w,c
  5955  00FA3A  2621               	addwf	sprintf@width,f,c
  5956  00FA3C  501A               	movf	??_sprintf+3,w,c
  5957  00FA3E  2222               	addwfc	sprintf@width+1,f,c
  5958  00FA40  4A0F               	infsnz	sprintf@f,f,c
  5959  00FA42  2A10               	incf	sprintf@f+1,f,c
  5960                           
  5961                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5962  00FA44  C00F  FFF6         	movff	sprintf@f,tblptrl
  5963  00FA48  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5964  00FA4C                     	if	0	;tblptru may be non-zero
  5965  00FA4C                     	endif
  5966  00FA4C                     	if	0	;tblptru may be non-zero
  5967  00FA4C                     	endif
  5968  00FA4C  0008               	tblrd		*
  5969  00FA4E  50F5               	movf	tablat,w,c
  5970  00FA50  ECB9  F070         	call	_isdigit
  5971  00FA54  A0D8               	btfss	status,0,c
  5972  00FA56  D007               	goto	l2976
  5973  00FA58  D7D1               	goto	l2964
  5974                           
  5975                           ;doprnt.c: 608: }
  5976                           ;doprnt.c: 635: switch(c = *f++) {
  5977  00FA5A  D005               	goto	l2976
  5978                           
  5979                           ;doprnt.c: 638: goto alldone;
  5980                           
  5981                           ;doprnt.c: 637: case 0:
  5982  00FA5C  D0C1               	goto	l3030
  5983                           
  5984                           ;doprnt.c: 813: continue;
  5985                           
  5986                           ;doprnt.c: 802: default:
  5987  00FA5E  D0B2               	goto	l3028
  5988  00FA60                     l2972:
  5989                           
  5990                           ;doprnt.c: 818: flag |= 0xC0;
  5991  00FA60  0EC0               	movlw	192
  5992  00FA62  121D               	iorwf	sprintf@flag,f,c
  5993                           
  5994                           ;doprnt.c: 822: }
  5995                           
  5996                           ;doprnt.c: 819: break;
  5997  00FA64  D011               	goto	l2978
  5998  00FA66                     l2976:
  5999  00FA66  C00F  FFF6         	movff	sprintf@f,tblptrl
  6000  00FA6A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  6001  00FA6E  4A0F               	infsnz	sprintf@f,f,c
  6002  00FA70  2A10               	incf	sprintf@f+1,f,c
  6003  00FA72                     	if	0	;tblptru may be non-zero
  6004  00FA72                     	endif
  6005  00FA72                     	if	0	;tblptru may be non-zero
  6006  00FA72                     	endif
  6007  00FA72  0008               	tblrd		*
  6008  00FA74  CFF5 F023          	movff	tablat,sprintf@c
  6009  00FA78  5023               	movf	sprintf@c,w,c
  6010                           
  6011                           ; Switch size 1, requested type "space"
  6012                           ; Number of cases is 2, Range of values is 0 to 117
  6013                           ; switch strategies available:
  6014                           ; Name         Instructions Cycles
  6015                           ; simple_byte            7     4 (average)
  6016                           ;	Chosen strategy is simple_byte
  6017  00FA7A  0A00               	xorlw	0	; case 0
  6018  00FA7C  B4D8               	btfsc	status,2,c
  6019  00FA7E  D0B0               	goto	l3030
  6020  00FA80  0A75               	xorlw	117	; case 117
  6021  00FA82  B4D8               	btfsc	status,2,c
  6022  00FA84  D7ED               	goto	l2972
  6023  00FA86  D09E               	goto	l3028
  6024  00FA88                     l2978:
  6025                           
  6026                           ;doprnt.c: 1273: {
  6027                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6028  00FA88  C01B  FFD9         	movff	sprintf@ap,fsr2l
  6029  00FA8C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  6030  00FA90  CFDE F01E          	movff	postinc2,sprintf@val
  6031  00FA94  CFDD F01F          	movff	postdec2,sprintf@val+1
  6032  00FA98  0E02               	movlw	2
  6033  00FA9A  261B               	addwf	sprintf@ap,f,c
  6034  00FA9C  0E00               	movlw	0
  6035  00FA9E  221C               	addwfc	sprintf@ap+1,f,c
  6036                           
  6037                           ;doprnt.c: 1287: }
  6038                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6039  00FAA0  0E01               	movlw	1
  6040  00FAA2  6E23               	movwf	sprintf@c,c
  6041  00FAA4                     l2984:
  6042  00FAA4  0E05               	movlw	5
  6043  00FAA6  1823               	xorwf	sprintf@c,w,c
  6044  00FAA8  B4D8               	btfsc	status,2,c
  6045  00FAAA  D016               	goto	l2996
  6046  00FAAC  D001               	goto	l2988
  6047  00FAAE  D014               	goto	l2996
  6048  00FAB0                     l2988:
  6049                           
  6050                           ;doprnt.c: 1306: if(val < dpowers[c])
  6051  00FAB0  5023               	movf	sprintf@c,w,c
  6052  00FAB2  0D02               	mullw	2
  6053  00FAB4  0EC3               	movlw	low _dpowers
  6054  00FAB6  24F3               	addwf	prodl,w,c
  6055  00FAB8  6EF6               	movwf	tblptrl,c
  6056  00FABA  0EFE               	movlw	high _dpowers
  6057  00FABC  20F4               	addwfc	prodh,w,c
  6058  00FABE  6EF7               	movwf	tblptrh,c
  6059  00FAC0                     	if	0	;There are less than 3 active tblptr bytes
  6060  00FAC0                     	endif
  6061  00FAC0  0009               	tblrd		*+
  6062  00FAC2  50F5               	movf	tablat,w,c
  6063  00FAC4  5C1E               	subwf	sprintf@val,w,c
  6064  00FAC6  0009               	tblrd		*+
  6065  00FAC8  50F5               	movf	tablat,w,c
  6066  00FACA  581F               	subwfb	sprintf@val+1,w,c
  6067  00FACC  A0D8               	btfss	status,0,c
  6068  00FACE  D004               	goto	l2996
  6069  00FAD0  D001               	goto	l2992
  6070                           
  6071                           ;doprnt.c: 1307: break;
  6072  00FAD2  D002               	goto	l2996
  6073  00FAD4                     l2992:
  6074  00FAD4  2A23               	incf	sprintf@c,f,c
  6075  00FAD6  D7E6               	goto	l2984
  6076  00FAD8                     l2996:
  6077                           
  6078                           ;doprnt.c: 1381: if(width > c)
  6079  00FAD8  0E80               	movlw	128
  6080  00FADA  BE23               	btfsc	sprintf@c,7,c
  6081  00FADC  0E7F               	movlw	127
  6082  00FADE  6E17               	movwf	??_sprintf& (0+255),c
  6083  00FAE0  5021               	movf	sprintf@width,w,c
  6084  00FAE2  5C23               	subwf	sprintf@c,w,c
  6085  00FAE4  5022               	movf	sprintf@width+1,w,c
  6086  00FAE6  0A80               	xorlw	128
  6087  00FAE8  5817               	subwfb	??_sprintf& (0+255),w,c
  6088  00FAEA  B0D8               	btfsc	status,0,c
  6089  00FAEC  D007               	goto	l3000
  6090                           
  6091                           ;doprnt.c: 1382: width -= c;
  6092  00FAEE  5023               	movf	sprintf@c,w,c
  6093  00FAF0  5E21               	subwf	sprintf@width,f,c
  6094  00FAF2  0E00               	movlw	0
  6095  00FAF4  BE23               	btfsc	sprintf@c,7,c
  6096  00FAF6  0EFF               	movlw	255
  6097  00FAF8  5A22               	subwfb	sprintf@width+1,f,c
  6098  00FAFA  D005               	goto	l3002
  6099  00FAFC                     l3000:
  6100                           
  6101                           ;doprnt.c: 1383: else
  6102                           ;doprnt.c: 1384: width = 0;
  6103  00FAFC  0E00               	movlw	0
  6104  00FAFE  6E22               	movwf	sprintf@width+1,c
  6105  00FB00  0E00               	movlw	0
  6106  00FB02  6E21               	movwf	sprintf@width,c
  6107  00FB04  D000               	goto	l3002
  6108  00FB06                     l3002:
  6109                           
  6110                           ;doprnt.c: 1387: if(flag & 0x04) {
  6111  00FB06  A41D               	btfss	sprintf@flag,2,c
  6112  00FB08  D015               	goto	l3012
  6113                           
  6114                           ;doprnt.c: 1415: if(width)
  6115  00FB0A  5021               	movf	sprintf@width,w,c
  6116  00FB0C  1022               	iorwf	sprintf@width+1,w,c
  6117  00FB0E  B4D8               	btfsc	status,2,c
  6118  00FB10  D026               	goto	l838
  6119  00FB12                     l3006:
  6120                           
  6121                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6122  00FB12  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6123  00FB16  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6124  00FB1A  0E30               	movlw	48
  6125  00FB1C  6EDF               	movwf	indf2,c
  6126  00FB1E  4A0D               	infsnz	sprintf@sp,f,c
  6127  00FB20  2A0E               	incf	sprintf@sp+1,f,c
  6128                           
  6129                           ;doprnt.c: 1418: while(--width);
  6130  00FB22  0621               	decf	sprintf@width,f,c
  6131  00FB24  A0D8               	btfss	status,0,c
  6132  00FB26  0622               	decf	sprintf@width+1,f,c
  6133  00FB28  5021               	movf	sprintf@width,w,c
  6134  00FB2A  1022               	iorwf	sprintf@width+1,w,c
  6135  00FB2C  B4D8               	btfsc	status,2,c
  6136  00FB2E  D017               	goto	l838
  6137  00FB30  D7F0               	goto	l3006
  6138                           
  6139                           ;doprnt.c: 1420: } else
  6140  00FB32  D015               	goto	l838
  6141  00FB34                     l3012:
  6142                           
  6143                           ;doprnt.c: 1422: {
  6144                           ;doprnt.c: 1424: if(width
  6145                           ;doprnt.c: 1428: )
  6146  00FB34  5021               	movf	sprintf@width,w,c
  6147  00FB36  1022               	iorwf	sprintf@width+1,w,c
  6148  00FB38  B4D8               	btfsc	status,2,c
  6149  00FB3A  D011               	goto	l838
  6150  00FB3C                     l3014:
  6151                           
  6152                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6153  00FB3C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6154  00FB40  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6155  00FB44  0E20               	movlw	32
  6156  00FB46  6EDF               	movwf	indf2,c
  6157  00FB48  4A0D               	infsnz	sprintf@sp,f,c
  6158  00FB4A  2A0E               	incf	sprintf@sp+1,f,c
  6159                           
  6160                           ;doprnt.c: 1431: while(--width);
  6161  00FB4C  0621               	decf	sprintf@width,f,c
  6162  00FB4E  A0D8               	btfss	status,0,c
  6163  00FB50  0622               	decf	sprintf@width+1,f,c
  6164  00FB52  5021               	movf	sprintf@width,w,c
  6165  00FB54  1022               	iorwf	sprintf@width+1,w,c
  6166  00FB56  B4D8               	btfsc	status,2,c
  6167  00FB58  D002               	goto	l838
  6168  00FB5A  D7F0               	goto	l3014
  6169  00FB5C  D000               	goto	l838
  6170  00FB5E                     l838:
  6171                           
  6172                           ;doprnt.c: 1469: }
  6173                           ;doprnt.c: 1472: prec = c;
  6174  00FB5E  C023  F020         	movff	sprintf@c,sprintf@prec
  6175                           
  6176                           ;doprnt.c: 1474: while(prec--) {
  6177  00FB62  D02A               	goto	l3026
  6178  00FB64                     l3020:
  6179                           
  6180                           ;doprnt.c: 1478: {
  6181                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6182  00FB64  5020               	movf	sprintf@prec,w,c
  6183  00FB66  0D02               	mullw	2
  6184  00FB68  0EC3               	movlw	low _dpowers
  6185  00FB6A  24F3               	addwf	prodl,w,c
  6186  00FB6C  6EF6               	movwf	tblptrl,c
  6187  00FB6E  0EFE               	movlw	high _dpowers
  6188  00FB70  20F4               	addwfc	prodh,w,c
  6189  00FB72  6EF7               	movwf	tblptrh,c
  6190  00FB74                     	if	0	;There are less than 3 active tblptr bytes
  6191  00FB74                     	endif
  6192  00FB74  0009               	tblrd		*+
  6193  00FB76  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6194  00FB7A  000A               	tblrd		*-
  6195  00FB7C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6196  00FB80  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  6197  00FB84  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  6198  00FB88  ECBC  F072         	call	___lwdiv	;wreg free
  6199  00FB8C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6200  00FB90  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6201  00FB94  0E00               	movlw	0
  6202  00FB96  6E0B               	movwf	___lwmod@divisor+1,c
  6203  00FB98  0E0A               	movlw	10
  6204  00FB9A  6E0A               	movwf	___lwmod@divisor,c
  6205  00FB9C  EC6C  F072         	call	___lwmod	;wreg free
  6206  00FBA0  5008               	movf	?___lwmod,w,c
  6207  00FBA2  0F30               	addlw	48
  6208  00FBA4  6E23               	movwf	sprintf@c,c
  6209                           
  6210                           ;doprnt.c: 1523: }
  6211                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6212  00FBA6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6213  00FBAA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6214  00FBAE  C023  FFDF         	movff	sprintf@c,indf2
  6215  00FBB2  4A0D               	infsnz	sprintf@sp,f,c
  6216  00FBB4  2A0E               	incf	sprintf@sp+1,f,c
  6217  00FBB6  D000               	goto	l3026
  6218  00FBB8                     l3026:
  6219  00FBB8  0620               	decf	sprintf@prec,f,c
  6220  00FBBA  2820               	incf	sprintf@prec,w,c
  6221  00FBBC  B4D8               	btfsc	status,2,c
  6222  00FBBE  D002               	goto	l3028
  6223  00FBC0  D7D1               	goto	l3020
  6224  00FBC2  D000               	goto	l3028
  6225  00FBC4                     l3028:
  6226  00FBC4  C00F  FFF6         	movff	sprintf@f,tblptrl
  6227  00FBC8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  6228  00FBCC  4A0F               	infsnz	sprintf@f,f,c
  6229  00FBCE  2A10               	incf	sprintf@f+1,f,c
  6230  00FBD0                     	if	0	;tblptru may be non-zero
  6231  00FBD0                     	endif
  6232  00FBD0                     	if	0	;tblptru may be non-zero
  6233  00FBD0                     	endif
  6234  00FBD0  0008               	tblrd		*
  6235  00FBD2  CFF5 F023          	movff	tablat,sprintf@c
  6236  00FBD6  5023               	movf	sprintf@c,w,c
  6237  00FBD8  B4D8               	btfsc	status,2,c
  6238  00FBDA  D002               	goto	l3030
  6239  00FBDC  D6DC               	goto	l2946
  6240  00FBDE  D000               	goto	l3030
  6241  00FBE0                     l3030:
  6242                           
  6243                           ;doprnt.c: 1538: *sp = 0;
  6244  00FBE0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6245  00FBE4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6246  00FBE8  0E00               	movlw	0
  6247  00FBEA  6EDF               	movwf	indf2,c
  6248  00FBEC  0012               	return	
  6249                           
  6250                           ;doprnt.c: 1540: return 0;
  6251                           ;	Return value of _sprintf is never used
  6252  00FBEE  0012               	return		;funcret
  6253  00FBF0                     __end_of_sprintf:
  6254                           	opt stack 0
  6255                           tosu	equ	0xFFF
  6256                           tosh	equ	0xFFE
  6257                           tosl	equ	0xFFD
  6258                           pclath	equ	0xFFA
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           postinc1	equ	0xFE6
  6268                           postdec1	equ	0xFE5
  6269                           fsr1h	equ	0xFE2
  6270                           fsr1l	equ	0xFE1
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           postdec2	equ	0xFDD
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _isdigit *****************
  6279 ;; Defined at:
  6280 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  c               1    wreg     unsigned char 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  c               1    2[COMRAM] unsigned char 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;		None               void
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6297 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6298 ;;Total ram usage:        3 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; This function calls:
  6301 ;;		Nothing
  6302 ;; This function is called by:
  6303 ;;		_sprintf
  6304 ;;		_atoi
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text32
  6309  00E172                     __ptext32:
  6310                           	opt stack 0
  6311  00E172                     _isdigit:
  6312                           	opt stack 29
  6313                           
  6314                           ;incstack = 0
  6315                           ;isdigit@c stored from wreg
  6316  00E172  6E03               	movwf	isdigit@c,c
  6317  00E174  0E00               	movlw	0
  6318  00E176  6E02               	movwf	_isdigit$2610,c
  6319  00E178  0E3A               	movlw	58
  6320  00E17A  6003               	cpfslt	isdigit@c,c
  6321  00E17C  D006               	goto	l2888
  6322  00E17E  0E2F               	movlw	47
  6323  00E180  6403               	cpfsgt	isdigit@c,c
  6324  00E182  D003               	goto	l2888
  6325  00E184  0E01               	movlw	1
  6326  00E186  6E02               	movwf	_isdigit$2610,c
  6327  00E188  D000               	goto	l2888
  6328  00E18A                     l2888:
  6329  00E18A  C002  F001         	movff	_isdigit$2610,??_isdigit
  6330  00E18E  3001               	rrcf	??_isdigit,w,c
  6331  00E190  0012               	return	
  6332  00E192  0012               	return		;funcret
  6333  00E194                     __end_of_isdigit:
  6334                           	opt stack 0
  6335                           tosu	equ	0xFFF
  6336                           tosh	equ	0xFFE
  6337                           tosl	equ	0xFFD
  6338                           pclath	equ	0xFFA
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           postinc1	equ	0xFE6
  6348                           postdec1	equ	0xFE5
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function ___wmul *****************
  6359 ;; Defined at:
  6360 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  multiplier      2    0[COMRAM] unsigned int 
  6363 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  product         2    4[COMRAM] unsigned int 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  2    0[COMRAM] unsigned int 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0, prodl, prodh
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6378 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6379 ;;Total ram usage:        6 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_sprintf
  6385 ;;		_atoi
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text33
  6390  00E1DC                     __ptext33:
  6391                           	opt stack 0
  6392  00E1DC                     ___wmul:
  6393                           	opt stack 29
  6394                           
  6395                           ;incstack = 0
  6396  00E1DC  5001               	movf	___wmul@multiplier,w,c
  6397  00E1DE  0203               	mulwf	___wmul@multiplicand,c
  6398  00E1E0  CFF3 F005          	movff	prodl,___wmul@product
  6399  00E1E4  CFF4 F006          	movff	prodh,___wmul@product+1
  6400  00E1E8  5001               	movf	___wmul@multiplier,w,c
  6401  00E1EA  0204               	mulwf	___wmul@multiplicand+1,c
  6402  00E1EC  50F3               	movf	prodl,w,c
  6403  00E1EE  2606               	addwf	___wmul@product+1,f,c
  6404  00E1F0  5002               	movf	___wmul@multiplier+1,w,c
  6405  00E1F2  0203               	mulwf	___wmul@multiplicand,c
  6406  00E1F4  50F3               	movf	prodl,w,c
  6407  00E1F6  2606               	addwf	___wmul@product+1,f,c
  6408  00E1F8  C005  F001         	movff	___wmul@product,?___wmul
  6409  00E1FC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6410  00E200  0012               	return	
  6411  00E202  0012               	return		;funcret
  6412  00E204                     __end_of___wmul:
  6413                           	opt stack 0
  6414                           tosu	equ	0xFFF
  6415                           tosh	equ	0xFFE
  6416                           tosl	equ	0xFFD
  6417                           pclath	equ	0xFFA
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           postinc1	equ	0xFE6
  6427                           postdec1	equ	0xFE5
  6428                           fsr1h	equ	0xFE2
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function ___lwmod *****************
  6438 ;; Defined at:
  6439 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  dividend        2    7[COMRAM] unsigned int 
  6442 ;;  divisor         2    9[COMRAM] unsigned int 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  counter         1   11[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  2    7[COMRAM] unsigned int 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6454 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6458 ;;Total ram usage:        5 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; This function calls:
  6461 ;;		Nothing
  6462 ;; This function is called by:
  6463 ;;		_sprintf
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text34
  6468  00E4D8                     __ptext34:
  6469                           	opt stack 0
  6470  00E4D8                     ___lwmod:
  6471                           	opt stack 29
  6472                           
  6473                           ;incstack = 0
  6474  00E4D8  500A               	movf	___lwmod@divisor,w,c
  6475  00E4DA  100B               	iorwf	___lwmod@divisor+1,w,c
  6476  00E4DC  B4D8               	btfsc	status,2,c
  6477  00E4DE  D01D               	goto	l1507
  6478  00E4E0  0E01               	movlw	1
  6479  00E4E2  6E0C               	movwf	___lwmod@counter,c
  6480  00E4E4  D005               	goto	l2926
  6481  00E4E6                     l2924:
  6482  00E4E6  90D8               	bcf	status,0,c
  6483  00E4E8  360A               	rlcf	___lwmod@divisor,f,c
  6484  00E4EA  360B               	rlcf	___lwmod@divisor+1,f,c
  6485  00E4EC  2A0C               	incf	___lwmod@counter,f,c
  6486  00E4EE  D000               	goto	l2926
  6487  00E4F0                     l2926:
  6488  00E4F0  BE0B               	btfsc	___lwmod@divisor+1,7,c
  6489  00E4F2  D002               	goto	l2928
  6490  00E4F4  D7F8               	goto	l2924
  6491  00E4F6  D000               	goto	l2928
  6492  00E4F8                     l2928:
  6493  00E4F8  500A               	movf	___lwmod@divisor,w,c
  6494  00E4FA  5C08               	subwf	___lwmod@dividend,w,c
  6495  00E4FC  500B               	movf	___lwmod@divisor+1,w,c
  6496  00E4FE  5809               	subwfb	___lwmod@dividend+1,w,c
  6497  00E500  A0D8               	btfss	status,0,c
  6498  00E502  D005               	goto	l2932
  6499  00E504  500A               	movf	___lwmod@divisor,w,c
  6500  00E506  5E08               	subwf	___lwmod@dividend,f,c
  6501  00E508  500B               	movf	___lwmod@divisor+1,w,c
  6502  00E50A  5A09               	subwfb	___lwmod@dividend+1,f,c
  6503  00E50C  D000               	goto	l2932
  6504  00E50E                     l2932:
  6505  00E50E  90D8               	bcf	status,0,c
  6506  00E510  320B               	rrcf	___lwmod@divisor+1,f,c
  6507  00E512  320A               	rrcf	___lwmod@divisor,f,c
  6508  00E514  2E0C               	decfsz	___lwmod@counter,f,c
  6509  00E516  D7F0               	goto	l2928
  6510  00E518  D000               	goto	l1507
  6511  00E51A                     l1507:
  6512  00E51A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6513  00E51E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6514  00E522  0012               	return		;funcret
  6515  00E524                     __end_of___lwmod:
  6516                           	opt stack 0
  6517                           tosu	equ	0xFFF
  6518                           tosh	equ	0xFFE
  6519                           tosl	equ	0xFFD
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           postinc0	equ	0xFEE
  6528                           wreg	equ	0xFE8
  6529                           postinc1	equ	0xFE6
  6530                           postdec1	equ	0xFE5
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function ___lwdiv *****************
  6541 ;; Defined at:
  6542 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  dividend        2    0[COMRAM] unsigned int 
  6545 ;;  divisor         2    2[COMRAM] unsigned int 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  quotient        2    4[COMRAM] unsigned int 
  6548 ;;  counter         1    6[COMRAM] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  2    0[COMRAM] unsigned int 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6559 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6561 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6562 ;;Total ram usage:        7 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_sprintf
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text35
  6572  00E578                     __ptext35:
  6573                           	opt stack 0
  6574  00E578                     ___lwdiv:
  6575                           	opt stack 29
  6576                           
  6577                           ;incstack = 0
  6578  00E578  0E00               	movlw	0
  6579  00E57A  6E06               	movwf	___lwdiv@quotient+1,c
  6580  00E57C  0E00               	movlw	0
  6581  00E57E  6E05               	movwf	___lwdiv@quotient,c
  6582  00E580  5003               	movf	___lwdiv@divisor,w,c
  6583  00E582  1004               	iorwf	___lwdiv@divisor+1,w,c
  6584  00E584  B4D8               	btfsc	status,2,c
  6585  00E586  D021               	goto	l1497
  6586  00E588  0E01               	movlw	1
  6587  00E58A  6E07               	movwf	___lwdiv@counter,c
  6588  00E58C  D005               	goto	l2906
  6589  00E58E                     l2904:
  6590  00E58E  90D8               	bcf	status,0,c
  6591  00E590  3603               	rlcf	___lwdiv@divisor,f,c
  6592  00E592  3604               	rlcf	___lwdiv@divisor+1,f,c
  6593  00E594  2A07               	incf	___lwdiv@counter,f,c
  6594  00E596  D000               	goto	l2906
  6595  00E598                     l2906:
  6596  00E598  BE04               	btfsc	___lwdiv@divisor+1,7,c
  6597  00E59A  D002               	goto	l2908
  6598  00E59C  D7F8               	goto	l2904
  6599  00E59E  D000               	goto	l2908
  6600  00E5A0                     l2908:
  6601  00E5A0  90D8               	bcf	status,0,c
  6602  00E5A2  3605               	rlcf	___lwdiv@quotient,f,c
  6603  00E5A4  3606               	rlcf	___lwdiv@quotient+1,f,c
  6604  00E5A6  5003               	movf	___lwdiv@divisor,w,c
  6605  00E5A8  5C01               	subwf	___lwdiv@dividend,w,c
  6606  00E5AA  5004               	movf	___lwdiv@divisor+1,w,c
  6607  00E5AC  5802               	subwfb	___lwdiv@dividend+1,w,c
  6608  00E5AE  A0D8               	btfss	status,0,c
  6609  00E5B0  D006               	goto	l2916
  6610  00E5B2  5003               	movf	___lwdiv@divisor,w,c
  6611  00E5B4  5E01               	subwf	___lwdiv@dividend,f,c
  6612  00E5B6  5004               	movf	___lwdiv@divisor+1,w,c
  6613  00E5B8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6614  00E5BA  8005               	bsf	___lwdiv@quotient,0,c
  6615  00E5BC  D000               	goto	l2916
  6616  00E5BE                     l2916:
  6617  00E5BE  90D8               	bcf	status,0,c
  6618  00E5C0  3204               	rrcf	___lwdiv@divisor+1,f,c
  6619  00E5C2  3203               	rrcf	___lwdiv@divisor,f,c
  6620  00E5C4  2E07               	decfsz	___lwdiv@counter,f,c
  6621  00E5C6  D7EC               	goto	l2908
  6622  00E5C8  D000               	goto	l1497
  6623  00E5CA                     l1497:
  6624  00E5CA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6625  00E5CE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6626  00E5D2  0012               	return		;funcret
  6627  00E5D4                     __end_of___lwdiv:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           postinc0	equ	0xFEE
  6640                           wreg	equ	0xFE8
  6641                           postinc1	equ	0xFE6
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _lcd_putrs *****************
  6653 ;; Defined at:
  6654 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  6657 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  6658 ;;		 -> day(3), STR_38(2), STR_37(2), STR_36(2), 
  6659 ;;		 -> STR_32(2), imprimir_tecla@aux(20), STR_29(26), STR_28(23), 
  6660 ;;		 -> STR_26(26), STR_25(20), STR_24(26), STR_23(27), 
  6661 ;;		 -> STR_21(19), STR_20(22), STR_19(21), STR_17(18), 
  6662 ;;		 -> STR_16(18), STR_15(19), STR_14(18), STR_12(8), 
  6663 ;;		 -> password(7), STR_6(11), STR_5(17), ingresar_password@clear(16), 
  6664 ;;		 -> STR_4(4), STR_3(3), buffer2(20), 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;		None               void
  6669 ;; Registers used:
  6670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6680 ;;Total ram usage:        2 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    4
  6683 ;; This function calls:
  6684 ;;		_lcd_putc
  6685 ;; This function is called by:
  6686 ;;		_caratula
  6687 ;;		_ingresar_password
  6688 ;;		_mostrar_menu
  6689 ;;		_main
  6690 ;;		_imprimir_tecla
  6691 ;;		_leer_teclado
  6692 ;;		_cambiar_dia
  6693 ;;		_cambiar_mes
  6694 ;;		_cambiar_anio
  6695 ;;		_cambiar_hora
  6696 ;;		_cambiar_minutos
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text36
  6701  00E524                     __ptext36:
  6702                           	opt stack 0
  6703  00E524                     _lcd_putrs:
  6704                           	opt stack 25
  6705                           
  6706                           ;unmc_lcd_216.c: 223: while(*ptr){
  6707                           
  6708                           ;incstack = 0
  6709  00E524  D015               	goto	l2942
  6710  00E526                     l2938:
  6711                           
  6712                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  6713  00E526  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  6714  00E52A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  6715  00E52E  6AF8               	clrf	tblptru,c
  6716  00E530  0E0E               	movlw	(high __ramtop+-1)
  6717  00E532  64F7               	cpfsgt	tblptrh,c
  6718  00E534  D003               	bra	u1827
  6719  00E536  0008               	tblrd		*
  6720  00E538  50F5               	movf	tablat,w,c
  6721  00E53A  D005               	bra	u1820
  6722  00E53C                     u1827:
  6723  00E53C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6724  00E540  CFF7 FFEA          	movff	tblptrh,fsr0h
  6725  00E544  50EF               	movf	indf0,w,c
  6726  00E546                     u1820:
  6727  00E546  EC46  F072         	call	_lcd_putc
  6728  00E54A  4A09               	infsnz	lcd_putrs@ptr,f,c
  6729  00E54C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  6730  00E54E  D000               	goto	l2942
  6731  00E550                     l2942:
  6732  00E550  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  6733  00E554  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  6734  00E558  6AF8               	clrf	tblptru,c
  6735  00E55A  0E0E               	movlw	(high __ramtop+-1)
  6736  00E55C  64F7               	cpfsgt	tblptrh,c
  6737  00E55E  D003               	bra	u1837
  6738  00E560  0008               	tblrd		*
  6739  00E562  50F5               	movf	tablat,w,c
  6740  00E564  D005               	bra	u1830
  6741  00E566                     u1837:
  6742  00E566  CFF6 FFE9          	movff	tblptrl,fsr0l
  6743  00E56A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6744  00E56E  50EF               	movf	indf0,w,c
  6745  00E570                     u1830:
  6746  00E570  0900               	iorlw	0
  6747  00E572  A4D8               	btfss	status,2,c
  6748  00E574  D7D8               	goto	l2938
  6749  00E576  0012               	return		;funcret
  6750  00E578                     __end_of_lcd_putrs:
  6751                           	opt stack 0
  6752                           tosu	equ	0xFFF
  6753                           tosh	equ	0xFFE
  6754                           tosl	equ	0xFFD
  6755                           pclath	equ	0xFFA
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           indf0	equ	0xFEF
  6763                           postinc0	equ	0xFEE
  6764                           fsr0h	equ	0xFEA
  6765                           fsr0l	equ	0xFE9
  6766                           wreg	equ	0xFE8
  6767                           postinc1	equ	0xFE6
  6768                           postdec1	equ	0xFE5
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _lcd_putc *****************
  6779 ;; Defined at:
  6780 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  c               1    wreg     unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  c               1    7[COMRAM] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    3
  6801 ;; This function calls:
  6802 ;;		_lcd_gotoxy
  6803 ;;		_lcd_send_byte
  6804 ;; This function is called by:
  6805 ;;		_lcd_putrs
  6806 ;;		_lcd_puts
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text37
  6811  00E48C                     __ptext37:
  6812                           	opt stack 0
  6813  00E48C                     _lcd_putc:
  6814                           	opt stack 25
  6815                           
  6816                           ;incstack = 0
  6817                           ;lcd_putc@c stored from wreg
  6818  00E48C  6E08               	movwf	lcd_putc@c,c
  6819                           
  6820                           ;unmc_lcd_216.c: 173: switch(c){
  6821  00E48E  D018               	goto	l2870
  6822  00E490                     l2860:
  6823                           
  6824                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  6825  00E490  0E01               	movlw	1
  6826  00E492  6E03               	movwf	lcd_send_byte@n,c
  6827  00E494  0E00               	movlw	0
  6828  00E496  EC5B  F071         	call	_lcd_send_byte
  6829                           
  6830                           ;unmc_lcd_216.c: 176: break;
  6831  00E49A  0012               	return	
  6832  00E49C                     l2862:
  6833                           
  6834                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  6835  00E49C  0E02               	movlw	2
  6836  00E49E  6E05               	movwf	lcd_gotoxy@y,c
  6837  00E4A0  0E01               	movlw	1
  6838  00E4A2  ECCA  F070         	call	_lcd_gotoxy
  6839                           
  6840                           ;unmc_lcd_216.c: 179: break;
  6841  00E4A6  0012               	return	
  6842  00E4A8                     l2864:
  6843                           
  6844                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  6845  00E4A8  0E10               	movlw	16
  6846  00E4AA  6E03               	movwf	lcd_send_byte@n,c
  6847  00E4AC  0E00               	movlw	0
  6848  00E4AE  EC5B  F071         	call	_lcd_send_byte
  6849                           
  6850                           ;unmc_lcd_216.c: 182: break;
  6851  00E4B2  0012               	return	
  6852  00E4B4                     l2866:
  6853                           
  6854                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  6855  00E4B4  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  6856  00E4B8  0E01               	movlw	1
  6857  00E4BA  EC5B  F071         	call	_lcd_send_byte
  6858                           
  6859                           ;unmc_lcd_216.c: 186: }
  6860                           
  6861                           ;unmc_lcd_216.c: 185: break;
  6862  00E4BE  0012               	return	
  6863  00E4C0                     l2870:
  6864  00E4C0  5008               	movf	lcd_putc@c,w,c
  6865                           
  6866                           ; Switch size 1, requested type "space"
  6867                           ; Number of cases is 3, Range of values is 8 to 12
  6868                           ; switch strategies available:
  6869                           ; Name         Instructions Cycles
  6870                           ; simple_byte           10     6 (average)
  6871                           ;	Chosen strategy is simple_byte
  6872  00E4C2  0A08               	xorlw	8	; case 8
  6873  00E4C4  B4D8               	btfsc	status,2,c
  6874  00E4C6  D7F0               	goto	l2864
  6875  00E4C8  0A02               	xorlw	2	; case 10
  6876  00E4CA  B4D8               	btfsc	status,2,c
  6877  00E4CC  D7E7               	goto	l2862
  6878  00E4CE  0A06               	xorlw	6	; case 12
  6879  00E4D0  B4D8               	btfsc	status,2,c
  6880  00E4D2  D7DE               	goto	l2860
  6881  00E4D4  D7EF               	goto	l2866
  6882  00E4D6  0012               	return		;funcret
  6883  00E4D8                     __end_of_lcd_putc:
  6884                           	opt stack 0
  6885                           tosu	equ	0xFFF
  6886                           tosh	equ	0xFFE
  6887                           tosl	equ	0xFFD
  6888                           pclath	equ	0xFFA
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           indf0	equ	0xFEF
  6896                           postinc0	equ	0xFEE
  6897                           fsr0h	equ	0xFEA
  6898                           fsr0l	equ	0xFE9
  6899                           wreg	equ	0xFE8
  6900                           postinc1	equ	0xFE6
  6901                           postdec1	equ	0xFE5
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _lcd_gotoxy *****************
  6912 ;; Defined at:
  6913 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  x               1    wreg     unsigned char 
  6916 ;;  y               1    4[COMRAM] unsigned char 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  x               1    5[COMRAM] unsigned char 
  6919 ;;  address         1    6[COMRAM] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6929 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6933 ;;Total ram usage:        3 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    2
  6936 ;; This function calls:
  6937 ;;		_lcd_send_byte
  6938 ;; This function is called by:
  6939 ;;		_caratula
  6940 ;;		_ingresar_password
  6941 ;;		_mostrar_menu
  6942 ;;		_main
  6943 ;;		_lcd_putc
  6944 ;;		_cambiar_dia
  6945 ;;		_cambiar_mes
  6946 ;;		_cambiar_anio
  6947 ;;		_cambiar_hora
  6948 ;;		_cambiar_minutos
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text38
  6953  00E194                     __ptext38:
  6954                           	opt stack 0
  6955  00E194                     _lcd_gotoxy:
  6956                           	opt stack 25
  6957                           
  6958                           ;incstack = 0
  6959                           ;lcd_gotoxy@x stored from wreg
  6960  00E194  6E06               	movwf	lcd_gotoxy@x,c
  6961                           
  6962                           ;unmc_lcd_216.c: 159: int8 address;
  6963                           ;unmc_lcd_216.c: 161: if(y != 1)
  6964  00E196  0405               	decf	lcd_gotoxy@y,w,c
  6965  00E198  B4D8               	btfsc	status,2,c
  6966  00E19A  D002               	goto	l2852
  6967                           
  6968                           ;unmc_lcd_216.c: 162: address = 0x40;
  6969  00E19C  0E40               	movlw	64
  6970  00E19E  D001               	goto	L5
  6971  00E1A0                     l2852:
  6972                           
  6973                           ;unmc_lcd_216.c: 163: else
  6974                           ;unmc_lcd_216.c: 164: address=0;
  6975  00E1A0  0E00               	movlw	0
  6976  00E1A2                     L5:
  6977  00E1A2  6E07               	movwf	lcd_gotoxy@address,c
  6978  00E1A4  D000               	goto	l2854
  6979  00E1A6                     l2854:
  6980                           
  6981                           ;unmc_lcd_216.c: 166: address += x-1;
  6982  00E1A6  0406               	decf	lcd_gotoxy@x,w,c
  6983  00E1A8  2607               	addwf	lcd_gotoxy@address,f,c
  6984                           
  6985                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  6986  00E1AA  5007               	movf	lcd_gotoxy@address,w,c
  6987  00E1AC  0980               	iorlw	128
  6988  00E1AE  6E03               	movwf	lcd_send_byte@n,c
  6989  00E1B0  0E00               	movlw	0
  6990  00E1B2  EC5B  F071         	call	_lcd_send_byte
  6991  00E1B6  0012               	return		;funcret
  6992  00E1B8                     __end_of_lcd_gotoxy:
  6993                           	opt stack 0
  6994                           tosu	equ	0xFFF
  6995                           tosh	equ	0xFFE
  6996                           tosl	equ	0xFFD
  6997                           pclath	equ	0xFFA
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           indf0	equ	0xFEF
  7005                           postinc0	equ	0xFEE
  7006                           fsr0h	equ	0xFEA
  7007                           fsr0l	equ	0xFE9
  7008                           wreg	equ	0xFE8
  7009                           postinc1	equ	0xFE6
  7010                           postdec1	equ	0xFE5
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           fsr2h	equ	0xFDA
  7017                           fsr2l	equ	0xFD9
  7018                           status	equ	0xFD8
  7019                           
  7020 ;; *************** function _actualizar_password *****************
  7021 ;; Defined at:
  7022 ;;		line 65 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;  confirmar       2    0[COMRAM] PTR int 
  7025 ;;		 -> main@confirmar(2), 
  7026 ;;  valor           1    2[COMRAM] unsigned char 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  j               2   10[COMRAM] int 
  7029 ;;  j               2    8[COMRAM] int 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;		None               void
  7032 ;; Registers used:
  7033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7039 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7043 ;;Total ram usage:       12 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    1
  7046 ;; This function calls:
  7047 ;;		_restaurar_comando
  7048 ;; This function is called by:
  7049 ;;		_main
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text39
  7054  00F43E                     __ptext39:
  7055                           	opt stack 0
  7056  00F43E                     _actualizar_password:
  7057                           	opt stack 29
  7058                           
  7059                           ;alarma.c: 67: *confirmar=1;
  7060                           
  7061                           ;incstack = 0
  7062  00F43E  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  7063  00F442  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  7064  00F446  0E01               	movlw	1
  7065  00F448  6EDE               	movwf	postinc2,c
  7066  00F44A  0E00               	movlw	0
  7067  00F44C  6EDD               	movwf	postdec2,c
  7068                           
  7069                           ;alarma.c: 68: int j=0;
  7070  00F44E  0E00               	movlw	0
  7071  00F450  6E0A               	movwf	actualizar_password@j+1,c
  7072  00F452  0E00               	movlw	0
  7073  00F454  6E09               	movwf	actualizar_password@j,c
  7074                           
  7075                           ;alarma.c: 70: if ( *confirmar == 1 && tamanio_new_password - 6 - 1 < 6){
  7076  00F456  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  7077  00F45A  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  7078  00F45E  04DE               	decf	postinc2,w,c
  7079  00F460  10DE               	iorwf	postinc2,w,c
  7080  00F462  A4D8               	btfss	status,2,c
  7081  00F464  D036               	goto	l3890
  7082  00F466  0EF9               	movlw	249
  7083  00F468  6E04               	movwf	??_actualizar_password& (0+255),c
  7084  00F46A  0EFF               	movlw	255
  7085  00F46C  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  7086  00F46E  C053  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  7087  00F472  C054  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  7088  00F476  5004               	movf	??_actualizar_password,w,c
  7089  00F478  2606               	addwf	??_actualizar_password+2,f,c
  7090  00F47A  5005               	movf	??_actualizar_password+1,w,c
  7091  00F47C  2207               	addwfc	??_actualizar_password+3,f,c
  7092  00F47E  BE07               	btfsc	??_actualizar_password+3,7,c
  7093  00F480  D006               	goto	l3884
  7094  00F482  5007               	movf	??_actualizar_password+3,w,c
  7095  00F484  E126               	bnz	l3890
  7096  00F486  0E06               	movlw	6
  7097  00F488  5C06               	subwf	??_actualizar_password+2,w,c
  7098  00F48A  B0D8               	btfsc	status,0,c
  7099  00F48C  D022               	goto	l3890
  7100  00F48E                     l3884:
  7101                           
  7102                           ;alarma.c: 71: if (new_password[tamanio_new_password - 6 - 1] != valor)
  7103  00F48E  0EF9               	movlw	249
  7104  00F490  6E04               	movwf	??_actualizar_password& (0+255),c
  7105  00F492  0EFF               	movlw	255
  7106  00F494  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  7107  00F496  C053  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  7108  00F49A  C054  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  7109  00F49E  5004               	movf	??_actualizar_password,w,c
  7110  00F4A0  2606               	addwf	??_actualizar_password+2,f,c
  7111  00F4A2  5005               	movf	??_actualizar_password+1,w,c
  7112  00F4A4  2207               	addwfc	??_actualizar_password+3,f,c
  7113  00F4A6  0E7F               	movlw	low _new_password
  7114  00F4A8  2406               	addwf	??_actualizar_password+2,w,c
  7115  00F4AA  6ED9               	movwf	fsr2l,c
  7116  00F4AC  0E00               	movlw	high _new_password
  7117  00F4AE  2007               	addwfc	??_actualizar_password+3,w,c
  7118  00F4B0  6EDA               	movwf	fsr2h,c
  7119  00F4B2  5003               	movf	actualizar_password@valor,w,c
  7120  00F4B4  18DE               	xorwf	postinc2,w,c
  7121  00F4B6  B4D8               	btfsc	status,2,c
  7122  00F4B8  D009               	goto	l3888
  7123                           
  7124                           ;alarma.c: 72: *confirmar = 0;
  7125  00F4BA  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  7126  00F4BE  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  7127  00F4C2  0E00               	movlw	0
  7128  00F4C4  6EDE               	movwf	postinc2,c
  7129  00F4C6  0E00               	movlw	0
  7130  00F4C8  6EDD               	movwf	postdec2,c
  7131  00F4CA  D003               	goto	l3890
  7132  00F4CC                     l3888:
  7133                           
  7134                           ;alarma.c: 74: else
  7135                           ;alarma.c: 75: tamanio_new_password++;
  7136  00F4CC  4A53               	infsnz	_tamanio_new_password,f,c
  7137  00F4CE  2A54               	incf	_tamanio_new_password+1,f,c
  7138  00F4D0  D000               	goto	l3890
  7139  00F4D2                     l3890:
  7140                           
  7141                           ;alarma.c: 76: }
  7142                           ;alarma.c: 78: if (*confirmar && tamanio_new_password - 6 - 1 >= 6){
  7143  00F4D2  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  7144  00F4D6  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  7145  00F4DA  50DE               	movf	postinc2,w,c
  7146  00F4DC  10DE               	iorwf	postinc2,w,c
  7147  00F4DE  B4D8               	btfsc	status,2,c
  7148  00F4E0  0012               	return	
  7149  00F4E2  0EF9               	movlw	249
  7150  00F4E4  6E04               	movwf	??_actualizar_password& (0+255),c
  7151  00F4E6  0EFF               	movlw	255
  7152  00F4E8  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  7153  00F4EA  C053  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  7154  00F4EE  C054  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  7155  00F4F2  5004               	movf	??_actualizar_password,w,c
  7156  00F4F4  2606               	addwf	??_actualizar_password+2,f,c
  7157  00F4F6  5005               	movf	??_actualizar_password+1,w,c
  7158  00F4F8  2207               	addwfc	??_actualizar_password+3,f,c
  7159  00F4FA  BE07               	btfsc	??_actualizar_password+3,7,c
  7160  00F4FC  0012               	return	
  7161  00F4FE  5007               	movf	??_actualizar_password+3,w,c
  7162  00F500  E104               	bnz	u3100
  7163  00F502  0E06               	movlw	6
  7164  00F504  5C06               	subwf	??_actualizar_password+2,w,c
  7165  00F506  A0D8               	btfss	status,0,c
  7166  00F508  0012               	return	
  7167  00F50A                     u3100:
  7168                           
  7169                           ;alarma.c: 79: restaurar_comando();
  7170  00F50A  EC7C  F070         	call	_restaurar_comando	;wreg free
  7171                           
  7172                           ;alarma.c: 81: for (int j=0; j < 6; j++ )
  7173  00F50E  0E00               	movlw	0
  7174  00F510  6E0C               	movwf	actualizar_password@j_1605+1,c
  7175  00F512  0E00               	movlw	0
  7176  00F514  6E0B               	movwf	actualizar_password@j_1605,c
  7177  00F516                     l3898:
  7178  00F516  BE0C               	btfsc	actualizar_password@j_1605+1,7,c
  7179  00F518  D008               	goto	l3902
  7180  00F51A  500C               	movf	actualizar_password@j_1605+1,w,c
  7181  00F51C  E118               	bnz	l3908
  7182  00F51E  0E06               	movlw	6
  7183  00F520  5C0B               	subwf	actualizar_password@j_1605,w,c
  7184  00F522  B0D8               	btfsc	status,0,c
  7185  00F524  D014               	goto	l3908
  7186  00F526  D001               	goto	l3902
  7187  00F528  D012               	goto	l3908
  7188  00F52A                     l3902:
  7189                           
  7190                           ;alarma.c: 82: password[j] = new_password[j];
  7191  00F52A  0E7F               	movlw	low _new_password
  7192  00F52C  240B               	addwf	actualizar_password@j_1605,w,c
  7193  00F52E  6ED9               	movwf	fsr2l,c
  7194  00F530  0E00               	movlw	high _new_password
  7195  00F532  200C               	addwfc	actualizar_password@j_1605+1,w,c
  7196  00F534  6EDA               	movwf	fsr2h,c
  7197  00F536  0EE7               	movlw	low _password
  7198  00F538  240B               	addwf	actualizar_password@j_1605,w,c
  7199  00F53A  6EE1               	movwf	fsr1l,c
  7200  00F53C  0E00               	movlw	high _password
  7201  00F53E  200C               	addwfc	actualizar_password@j_1605+1,w,c
  7202  00F540  6EE2               	movwf	fsr1h,c
  7203  00F542  CFDF FFE7          	movff	indf2,indf1
  7204  00F546  4A0B               	infsnz	actualizar_password@j_1605,f,c
  7205  00F548  2A0C               	incf	actualizar_password@j_1605+1,f,c
  7206  00F54A  D7E5               	goto	l3898
  7207  00F54C  D000               	goto	l3908
  7208  00F54E                     l3908:
  7209                           
  7210                           ;alarma.c: 84: new_password[0] = 0;
  7211  00F54E  0E00               	movlw	0
  7212  00F550  0100               	movlb	0	; () banked
  7213  00F552  6F7F               	movwf	_new_password& (0+255),b
  7214                           
  7215                           ;alarma.c: 85: temporal[0] = 0;
  7216  00F554  0E00               	movlw	0
  7217  00F556  0100               	movlb	0	; () banked
  7218  00F558  6F86               	movwf	_temporal& (0+255),b
  7219                           
  7220                           ;alarma.c: 87: tamanio_new_password = 0;
  7221  00F55A  0E00               	movlw	0
  7222  00F55C  6E54               	movwf	_tamanio_new_password+1,c
  7223  00F55E  0E00               	movlw	0
  7224  00F560  6E53               	movwf	_tamanio_new_password,c
  7225                           
  7226                           ;alarma.c: 88: tamanio_password = 0;
  7227  00F562  0E00               	movlw	0
  7228  00F564  6E56               	movwf	_tamanio_password+1,c
  7229  00F566  0E00               	movlw	0
  7230  00F568  6E55               	movwf	_tamanio_password,c
  7231  00F56A  0012               	return	
  7232                           
  7233                           ; BSR set to: 0
  7234  00F56C  0012               	return		;funcret
  7235  00F56E                     __end_of_actualizar_password:
  7236                           	opt stack 0
  7237                           tosu	equ	0xFFF
  7238                           tosh	equ	0xFFE
  7239                           tosl	equ	0xFFD
  7240                           pclath	equ	0xFFA
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           indf0	equ	0xFEF
  7248                           postinc0	equ	0xFEE
  7249                           fsr0h	equ	0xFEA
  7250                           fsr0l	equ	0xFE9
  7251                           wreg	equ	0xFE8
  7252                           indf1	equ	0xFE7
  7253                           postinc1	equ	0xFE6
  7254                           postdec1	equ	0xFE5
  7255                           fsr1h	equ	0xFE2
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _restaurar_comando *****************
  7265 ;; Defined at:
  7266 ;;		line 52 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;		None
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;		None               void
  7273 ;; Registers used:
  7274 ;;		wreg, status,2
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7284 ;;Total ram usage:        0 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_main
  7290 ;;		_cambiar_dia
  7291 ;;		_cambiar_hora
  7292 ;;		_actualizar_password
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text40
  7297  00E0F8                     __ptext40:
  7298                           	opt stack 0
  7299  00E0F8                     _restaurar_comando:
  7300                           	opt stack 30
  7301                           
  7302                           ;teclado.c: 53: tamanio_comando = 0;
  7303                           
  7304                           ;incstack = 0
  7305  00E0F8  0E00               	movlw	0
  7306  00E0FA  0100               	movlb	0	; () banked
  7307  00E0FC  6FA6               	movwf	(_tamanio_comando+1)& (0+255),b
  7308  00E0FE  0E00               	movlw	0
  7309  00E100  6FA5               	movwf	_tamanio_comando& (0+255),b
  7310                           
  7311                           ;teclado.c: 55: comando[0]='x';
  7312  00E102  0E78               	movlw	120
  7313  00E104  0100               	movlb	0	; () banked
  7314  00E106  6FD6               	movwf	_comando& (0+255),b
  7315                           
  7316                           ;teclado.c: 56: comando[1]='x';
  7317  00E108  0E78               	movlw	120
  7318  00E10A  0100               	movlb	0	; () banked
  7319  00E10C  6FD7               	movwf	(_comando+1)& (0+255),b
  7320                           
  7321                           ;teclado.c: 57: comando[2]=0;
  7322  00E10E  0E00               	movlw	0
  7323  00E110  0100               	movlb	0	; () banked
  7324  00E112  6FD8               	movwf	(_comando+2)& (0+255),b
  7325                           
  7326                           ; BSR set to: 0
  7327  00E114  0012               	return		;funcret
  7328  00E116                     __end_of_restaurar_comando:
  7329                           	opt stack 0
  7330                           tosu	equ	0xFFF
  7331                           tosh	equ	0xFFE
  7332                           tosl	equ	0xFFD
  7333                           pclath	equ	0xFFA
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           indf0	equ	0xFEF
  7341                           postinc0	equ	0xFEE
  7342                           fsr0h	equ	0xFEA
  7343                           fsr0l	equ	0xFE9
  7344                           wreg	equ	0xFE8
  7345                           indf1	equ	0xFE7
  7346                           postinc1	equ	0xFE6
  7347                           postdec1	equ	0xFE5
  7348                           fsr1h	equ	0xFE2
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _Setup *****************
  7358 ;; Defined at:
  7359 ;;		line 59 in file "main.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;		None               void
  7366 ;; Registers used:
  7367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7377 ;;Total ram usage:        0 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    3
  7380 ;; This function calls:
  7381 ;;		_Write_RTC
  7382 ;;		_lcd_comand
  7383 ;;		_lcd_init
  7384 ;; This function is called by:
  7385 ;;		_main
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text41
  7390  00E444                     __ptext41:
  7391                           	opt stack 0
  7392  00E444                     _Setup:
  7393                           	opt stack 27
  7394                           
  7395                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;incstack = 0
  7399  00E444  8E9B               	bsf	3995,7,c	;volatile
  7400                           
  7401                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  7402  00E446  9C9B               	bcf	3995,6,c	;volatile
  7403                           
  7404                           ;main.c: 63: OSCCONbits.IRCF0=1;
  7405  00E448  88D3               	bsf	4051,4,c	;volatile
  7406                           
  7407                           ;main.c: 64: OSCCONbits.IRCF1=1;
  7408  00E44A  8AD3               	bsf	4051,5,c	;volatile
  7409                           
  7410                           ;main.c: 65: OSCCONbits.IRCF2=1;
  7411  00E44C  8CD3               	bsf	4051,6,c	;volatile
  7412                           
  7413                           ;main.c: 66: OSCCONbits.SCS0=0;
  7414  00E44E  90D3               	bcf	4051,0,c	;volatile
  7415                           
  7416                           ;main.c: 67: OSCCONbits.SCS1=0;
  7417  00E450  92D3               	bcf	4051,1,c	;volatile
  7418                           
  7419                           ;main.c: 68: TRISA = 0b11110000;
  7420  00E452  0EF0               	movlw	240
  7421  00E454  6E92               	movwf	3986,c	;volatile
  7422                           
  7423                           ;main.c: 69: TRISB = 0;
  7424  00E456  0E00               	movlw	0
  7425  00E458  6E93               	movwf	3987,c	;volatile
  7426                           
  7427                           ;main.c: 70: TRISC = 0b00000111;
  7428  00E45A  0E07               	movlw	7
  7429  00E45C  6E94               	movwf	3988,c	;volatile
  7430                           
  7431                           ;main.c: 74: ANCON0=0b11111111;
  7432  00E45E  010F               	movlb	15	; () banked
  7433  00E460  6948               	setf	72,b	;volatile
  7434                           
  7435                           ; BSR set to: 15
  7436                           ;main.c: 76: ANCON1=0b11111111;
  7437  00E462  010F               	movlb	15	; () banked
  7438  00E464  6949               	setf	73,b	;volatile
  7439                           
  7440                           ;main.c: 77: ADCON0=0b00101101;
  7441  00E466  0E2D               	movlw	45
  7442  00E468  6EC2               	movwf	4034,c	;volatile
  7443                           
  7444                           ;main.c: 78: ADCON1=0b00010000;
  7445  00E46A  0E10               	movlw	16
  7446  00E46C  6EC1               	movwf	4033,c	;volatile
  7447                           
  7448                           ; BSR set to: 15
  7449                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  7450  00E46E  010F               	movlb	15	; () banked
  7451  00E470  8F3F               	bsf	63,7,b	;volatile
  7452                           
  7453                           ; BSR set to: 15
  7454                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  7455  00E472  010F               	movlb	15	; () banked
  7456  00E474  8B3F               	bsf	63,5,b	;volatile
  7457                           
  7458                           ; BSR set to: 15
  7459                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  7460  00E476  86CD               	bsf	4045,3,c	;volatile
  7461                           
  7462                           ; BSR set to: 15
  7463                           ;main.c: 82: Write_RTC();
  7464  00E478  ECFB  F07B         	call	_Write_RTC	;wreg free
  7465                           
  7466                           ;main.c: 83: lcd_init();
  7467  00E47C  EC44  F074         	call	_lcd_init	;wreg free
  7468                           
  7469                           ;main.c: 84: lcd_comand(0b00001100);
  7470  00E480  0E0C               	movlw	12
  7471  00E482  EC42  F070         	call	_lcd_comand
  7472                           
  7473                           ;main.c: 85: LATBbits.LATB1 = 0;;
  7474  00E486  928A               	bcf	3978,1,c	;volatile
  7475                           
  7476                           ;main.c: 86: LATBbits.LATB0 = 0;;
  7477  00E488  908A               	bcf	3978,0,c	;volatile
  7478  00E48A  0012               	return		;funcret
  7479  00E48C                     __end_of_Setup:
  7480                           	opt stack 0
  7481                           tosu	equ	0xFFF
  7482                           tosh	equ	0xFFE
  7483                           tosl	equ	0xFFD
  7484                           pclath	equ	0xFFA
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           indf0	equ	0xFEF
  7492                           postinc0	equ	0xFEE
  7493                           fsr0h	equ	0xFEA
  7494                           fsr0l	equ	0xFE9
  7495                           wreg	equ	0xFE8
  7496                           indf1	equ	0xFE7
  7497                           postinc1	equ	0xFE6
  7498                           postdec1	equ	0xFE5
  7499                           fsr1h	equ	0xFE2
  7500                           fsr1l	equ	0xFE1
  7501                           indf2	equ	0xFDF
  7502                           postinc2	equ	0xFDE
  7503                           postdec2	equ	0xFDD
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           
  7508 ;; *************** function _lcd_init *****************
  7509 ;; Defined at:
  7510 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  i               1    4[COMRAM] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;		None               void
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7528 ;;Total ram usage:        1 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    2
  7531 ;; This function calls:
  7532 ;;		_Delay1KTCYx
  7533 ;;		_lcd_send_byte
  7534 ;;		_lcd_send_nibble
  7535 ;; This function is called by:
  7536 ;;		_Setup
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text42
  7541  00E888                     __ptext42:
  7542                           	opt stack 0
  7543  00E888                     _lcd_init:
  7544                           	opt stack 27
  7545                           
  7546                           ;unmc_lcd_216.c: 120: int8 i;
  7547                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7548                           
  7549                           ;incstack = 0
  7550  00E888  9693               	bcf	3987,3,c	;volatile
  7551                           
  7552                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7553  00E88A  9493               	bcf	3987,2,c	;volatile
  7554                           
  7555                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7556  00E88C  968A               	bcf	3978,3,c	;volatile
  7557                           
  7558                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7559  00E88E  948A               	bcf	3978,2,c	;volatile
  7560                           
  7561                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7562  00E890  9893               	bcf	3987,4,c	;volatile
  7563                           
  7564                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7565  00E892  9A93               	bcf	3987,5,c	;volatile
  7566                           
  7567                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7568  00E894  9C93               	bcf	3987,6,c	;volatile
  7569                           
  7570                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7571  00E896  9E93               	bcf	3987,7,c	;volatile
  7572                           
  7573                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7574  00E898  0E0A               	movlw	10
  7575  00E89A  EC5B  F070         	call	_Delay1KTCYx
  7576                           
  7577                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7578  00E89E  0E0A               	movlw	10
  7579  00E8A0  EC5B  F070         	call	_Delay1KTCYx
  7580                           
  7581                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7582  00E8A4  0E0A               	movlw	10
  7583  00E8A6  EC5B  F070         	call	_Delay1KTCYx
  7584                           
  7585                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7586  00E8AA  0E00               	movlw	0
  7587  00E8AC  6E05               	movwf	lcd_init@i,c
  7588  00E8AE                     l3536:
  7589  00E8AE  0E02               	movlw	2
  7590  00E8B0  6405               	cpfsgt	lcd_init@i,c
  7591  00E8B2  D001               	goto	l3540
  7592  00E8B4  D008               	goto	l3546
  7593  00E8B6                     l3540:
  7594                           
  7595                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7596  00E8B6  0E03               	movlw	3
  7597  00E8B8  ECCD  F073         	call	_lcd_send_nibble
  7598                           
  7599                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7600  00E8BC  0E0A               	movlw	10
  7601  00E8BE  EC5B  F070         	call	_Delay1KTCYx
  7602  00E8C2  2A05               	incf	lcd_init@i,f,c
  7603  00E8C4  D7F4               	goto	l3536
  7604  00E8C6                     l3546:
  7605                           
  7606                           ;unmc_lcd_216.c: 146: }
  7607                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7608  00E8C6  0E02               	movlw	2
  7609  00E8C8  ECCD  F073         	call	_lcd_send_nibble
  7610                           
  7611                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7612  00E8CC  0E00               	movlw	0
  7613  00E8CE  6E05               	movwf	lcd_init@i,c
  7614  00E8D0  0E03               	movlw	3
  7615  00E8D2  6405               	cpfsgt	lcd_init@i,c
  7616  00E8D4  D002               	goto	l3554
  7617  00E8D6  0012               	return	
  7618  00E8D8  0012               	return	
  7619  00E8DA                     l3554:
  7620                           
  7621                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7622  00E8DA  5005               	movf	lcd_init@i,w,c
  7623  00E8DC  0D01               	mullw	1
  7624  00E8DE  0ECD               	movlw	low _LCD_INIT_STRING
  7625  00E8E0  24F3               	addwf	prodl,w,c
  7626  00E8E2  6EF6               	movwf	tblptrl,c
  7627  00E8E4  0EFE               	movlw	high _LCD_INIT_STRING
  7628  00E8E6  20F4               	addwfc	prodh,w,c
  7629  00E8E8  6EF7               	movwf	tblptrh,c
  7630  00E8EA                     	if	0	;There are less than 3 active tblptr bytes
  7631  00E8EA                     	endif
  7632  00E8EA  0008               	tblrd		*
  7633  00E8EC  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7634  00E8F0  0E00               	movlw	0
  7635  00E8F2  EC5B  F071         	call	_lcd_send_byte
  7636                           
  7637                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7638  00E8F6  0E0A               	movlw	10
  7639  00E8F8  EC5B  F070         	call	_Delay1KTCYx
  7640  00E8FC  2A05               	incf	lcd_init@i,f,c
  7641  00E8FE  0E03               	movlw	3
  7642  00E900  6405               	cpfsgt	lcd_init@i,c
  7643  00E902  D7EB               	goto	l3554
  7644  00E904  0012               	return	
  7645  00E906  0012               	return		;funcret
  7646  00E908                     __end_of_lcd_init:
  7647                           	opt stack 0
  7648                           tosu	equ	0xFFF
  7649                           tosh	equ	0xFFE
  7650                           tosl	equ	0xFFD
  7651                           pclath	equ	0xFFA
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           indf0	equ	0xFEF
  7659                           postinc0	equ	0xFEE
  7660                           fsr0h	equ	0xFEA
  7661                           fsr0l	equ	0xFE9
  7662                           wreg	equ	0xFE8
  7663                           indf1	equ	0xFE7
  7664                           postinc1	equ	0xFE6
  7665                           postdec1	equ	0xFE5
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675 ;; *************** function _Delay1KTCYx *****************
  7676 ;; Defined at:
  7677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;  unit            1    wreg     unsigned char 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  unit            1    0[COMRAM] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;		None               void
  7684 ;; Registers used:
  7685 ;;		wreg
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7695 ;;Total ram usage:        1 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; This function calls:
  7698 ;;		Nothing
  7699 ;; This function is called by:
  7700 ;;		_lcd_init
  7701 ;;		_DelayPORXLCD
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           	psect	text43
  7706  00E0B6                     __ptext43:
  7707                           	opt stack 0
  7708  00E0B6                     _Delay1KTCYx:
  7709                           	opt stack 28
  7710                           
  7711                           ;incstack = 0
  7712                           ;Delay1KTCYx@unit stored from wreg
  7713  00E0B6  6E01               	movwf	Delay1KTCYx@unit,c
  7714  00E0B8  0EFA               	movlw	250
  7715  00E0BA                     u3347:
  7716  00E0BA  F000               	nop	
  7717  00E0BC  2EE8               	decfsz	wreg,f,c
  7718  00E0BE  D7FD               	goto	u3347
  7719  00E0C0  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7720  00E0C2  D7FA               	goto	l3376
  7721  00E0C4  0012               	return	
  7722  00E0C6  0012               	return		;funcret
  7723  00E0C8                     __end_of_Delay1KTCYx:
  7724                           	opt stack 0
  7725                           tosu	equ	0xFFF
  7726                           tosh	equ	0xFFE
  7727                           tosl	equ	0xFFD
  7728                           pclath	equ	0xFFA
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           indf0	equ	0xFEF
  7736                           postinc0	equ	0xFEE
  7737                           fsr0h	equ	0xFEA
  7738                           fsr0l	equ	0xFE9
  7739                           wreg	equ	0xFE8
  7740                           indf1	equ	0xFE7
  7741                           postinc1	equ	0xFE6
  7742                           postdec1	equ	0xFE5
  7743                           fsr1h	equ	0xFE2
  7744                           fsr1l	equ	0xFE1
  7745                           indf2	equ	0xFDF
  7746                           postinc2	equ	0xFDE
  7747                           postdec2	equ	0xFDD
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function _lcd_comand *****************
  7753 ;; Defined at:
  7754 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  d               1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  d               1    4[COMRAM] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7771 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;Total ram usage:        1 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    2
  7775 ;; This function calls:
  7776 ;;		_lcd_send_byte
  7777 ;; This function is called by:
  7778 ;;		_caratula
  7779 ;;		_Setup
  7780 ;;		_ingresar_password
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text44
  7785  00E084                     __ptext44:
  7786                           	opt stack 0
  7787  00E084                     _lcd_comand:
  7788                           	opt stack 27
  7789                           
  7790                           ;incstack = 0
  7791                           ;lcd_comand@d stored from wreg
  7792  00E084  6E05               	movwf	lcd_comand@d,c
  7793                           
  7794                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7795  00E086  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7796  00E08A  0E00               	movlw	0
  7797  00E08C  EC5B  F071         	call	_lcd_send_byte
  7798  00E090  0012               	return		;funcret
  7799  00E092                     __end_of_lcd_comand:
  7800                           	opt stack 0
  7801                           tosu	equ	0xFFF
  7802                           tosh	equ	0xFFE
  7803                           tosl	equ	0xFFD
  7804                           pclath	equ	0xFFA
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           indf0	equ	0xFEF
  7812                           postinc0	equ	0xFEE
  7813                           fsr0h	equ	0xFEA
  7814                           fsr0l	equ	0xFE9
  7815                           wreg	equ	0xFE8
  7816                           indf1	equ	0xFE7
  7817                           postinc1	equ	0xFE6
  7818                           postdec1	equ	0xFE5
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _lcd_send_byte *****************
  7829 ;; Defined at:
  7830 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  address         1    wreg     unsigned char 
  7833 ;;  n               1    2[COMRAM] unsigned char 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  address         1    3[COMRAM] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;		None               void
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7845 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;Total ram usage:        2 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    1
  7852 ;; This function calls:
  7853 ;;		_Delay100TCYx
  7854 ;;		_lcd_send_nibble
  7855 ;; This function is called by:
  7856 ;;		_lcd_init
  7857 ;;		_lcd_gotoxy
  7858 ;;		_lcd_putc
  7859 ;;		_lcd_comand
  7860 ;;		_lcd_setcursor_vb
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text45
  7865  00E2B6                     __ptext45:
  7866                           	opt stack 0
  7867  00E2B6                     _lcd_send_byte:
  7868                           	opt stack 26
  7869                           
  7870                           ;incstack = 0
  7871                           ;lcd_send_byte@address stored from wreg
  7872  00E2B6  6E04               	movwf	lcd_send_byte@address,c
  7873                           
  7874                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  7875  00E2B8  968A               	bcf	3978,3,c	;volatile
  7876                           
  7877                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  7878  00E2BA  0E02               	movlw	2
  7879  00E2BC  EC52  F070         	call	_Delay100TCYx
  7880                           
  7881                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  7882  00E2C0  9893               	bcf	3987,4,c	;volatile
  7883                           
  7884                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  7885  00E2C2  9A93               	bcf	3987,5,c	;volatile
  7886                           
  7887                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  7888  00E2C4  9C93               	bcf	3987,6,c	;volatile
  7889                           
  7890                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  7891  00E2C6  9E93               	bcf	3987,7,c	;volatile
  7892                           
  7893                           ;unmc_lcd_216.c: 101: if(address)
  7894  00E2C8  5004               	movf	lcd_send_byte@address,w,c
  7895  00E2CA  B4D8               	btfsc	status,2,c
  7896  00E2CC  D002               	goto	l265
  7897                           
  7898                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  7899  00E2CE  868A               	bsf	3978,3,c	;volatile
  7900  00E2D0  D001               	goto	l266
  7901  00E2D2                     l265:
  7902                           
  7903                           ;unmc_lcd_216.c: 103: else
  7904                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  7905  00E2D2  968A               	bcf	3978,3,c	;volatile
  7906  00E2D4                     l266:
  7907                           
  7908                           ;unmc_lcd_216.c: 106: __nop();
  7909  00E2D4  F000               	nop	
  7910                           
  7911                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  7912  00E2D6  3803               	swapf	lcd_send_byte@n,w,c
  7913  00E2D8  0B0F               	andlw	15
  7914  00E2DA  ECCD  F073         	call	_lcd_send_nibble
  7915                           
  7916                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  7917  00E2DE  5003               	movf	lcd_send_byte@n,w,c
  7918  00E2E0  0B0F               	andlw	15
  7919  00E2E2  ECCD  F073         	call	_lcd_send_nibble
  7920  00E2E6  0012               	return		;funcret
  7921  00E2E8                     __end_of_lcd_send_byte:
  7922                           	opt stack 0
  7923                           tosu	equ	0xFFF
  7924                           tosh	equ	0xFFE
  7925                           tosl	equ	0xFFD
  7926                           pclath	equ	0xFFA
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           indf0	equ	0xFEF
  7934                           postinc0	equ	0xFEE
  7935                           fsr0h	equ	0xFEA
  7936                           fsr0l	equ	0xFE9
  7937                           wreg	equ	0xFE8
  7938                           indf1	equ	0xFE7
  7939                           postinc1	equ	0xFE6
  7940                           postdec1	equ	0xFE5
  7941                           fsr1h	equ	0xFE2
  7942                           fsr1l	equ	0xFE1
  7943                           indf2	equ	0xFDF
  7944                           postinc2	equ	0xFDE
  7945                           postdec2	equ	0xFDD
  7946                           fsr2h	equ	0xFDA
  7947                           fsr2l	equ	0xFD9
  7948                           status	equ	0xFD8
  7949                           
  7950 ;; *************** function _lcd_send_nibble *****************
  7951 ;; Defined at:
  7952 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  nibble          1    wreg     unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  nibble          1    1[COMRAM] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7968 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7969 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7970 ;;Total ram usage:        2 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; This function calls:
  7973 ;;		Nothing
  7974 ;; This function is called by:
  7975 ;;		_lcd_send_byte
  7976 ;;		_lcd_init
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text46
  7981  00E79A                     __ptext46:
  7982                           	opt stack 0
  7983  00E79A                     _lcd_send_nibble:
  7984                           	opt stack 26
  7985                           
  7986                           ;incstack = 0
  7987                           ;lcd_send_nibble@nibble stored from wreg
  7988  00E79A  6E02               	movwf	lcd_send_nibble@nibble,c
  7989                           
  7990                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  7991  00E79C  A002               	btfss	lcd_send_nibble@nibble,0,c
  7992  00E79E  D003               	goto	u1640
  7993  00E7A0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7994  00E7A2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7995  00E7A4  D001               	goto	u1658
  7996  00E7A6                     u1640:
  7997  00E7A6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7998  00E7A8                     u1658:
  7999  00E7A8  3A01               	swapf	??_lcd_send_nibble,f,c
  8000  00E7AA  508A               	movf	3978,w,c	;volatile
  8001  00E7AC  1801               	xorwf	??_lcd_send_nibble,w,c
  8002  00E7AE  0BEF               	andlw	-17
  8003  00E7B0  1801               	xorwf	??_lcd_send_nibble,w,c
  8004  00E7B2  6E8A               	movwf	3978,c	;volatile
  8005                           
  8006                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  8007  00E7B4  A202               	btfss	lcd_send_nibble@nibble,1,c
  8008  00E7B6  D003               	goto	u1660
  8009  00E7B8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8010  00E7BA  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8011  00E7BC  D001               	goto	u1678
  8012  00E7BE                     u1660:
  8013  00E7BE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8014  00E7C0                     u1678:
  8015  00E7C0  3A01               	swapf	??_lcd_send_nibble,f,c
  8016  00E7C2  4601               	rlncf	??_lcd_send_nibble,f,c
  8017  00E7C4  508A               	movf	3978,w,c	;volatile
  8018  00E7C6  1801               	xorwf	??_lcd_send_nibble,w,c
  8019  00E7C8  0BDF               	andlw	-33
  8020  00E7CA  1801               	xorwf	??_lcd_send_nibble,w,c
  8021  00E7CC  6E8A               	movwf	3978,c	;volatile
  8022                           
  8023                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  8024  00E7CE  A402               	btfss	lcd_send_nibble@nibble,2,c
  8025  00E7D0  D003               	goto	u1680
  8026  00E7D2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8027  00E7D4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8028  00E7D6  D001               	goto	u1698
  8029  00E7D8                     u1680:
  8030  00E7D8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8031  00E7DA                     u1698:
  8032  00E7DA  3A01               	swapf	??_lcd_send_nibble,f,c
  8033  00E7DC  4601               	rlncf	??_lcd_send_nibble,f,c
  8034  00E7DE  4601               	rlncf	??_lcd_send_nibble,f,c
  8035  00E7E0  508A               	movf	3978,w,c	;volatile
  8036  00E7E2  1801               	xorwf	??_lcd_send_nibble,w,c
  8037  00E7E4  0BBF               	andlw	-65
  8038  00E7E6  1801               	xorwf	??_lcd_send_nibble,w,c
  8039  00E7E8  6E8A               	movwf	3978,c	;volatile
  8040                           
  8041                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  8042  00E7EA  A602               	btfss	lcd_send_nibble@nibble,3,c
  8043  00E7EC  D003               	goto	u1700
  8044  00E7EE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8045  00E7F0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8046  00E7F2  D001               	goto	u1718
  8047  00E7F4                     u1700:
  8048  00E7F4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8049  00E7F6                     u1718:
  8050  00E7F6  3201               	rrcf	??_lcd_send_nibble,f,c
  8051  00E7F8  3201               	rrcf	??_lcd_send_nibble,f,c
  8052  00E7FA  508A               	movf	3978,w,c	;volatile
  8053  00E7FC  1801               	xorwf	??_lcd_send_nibble,w,c
  8054  00E7FE  0B7F               	andlw	-129
  8055  00E800  1801               	xorwf	??_lcd_send_nibble,w,c
  8056  00E802  6E8A               	movwf	3978,c	;volatile
  8057                           
  8058                           ;unmc_lcd_216.c: 32: __nop();
  8059  00E804  F000               	nop	
  8060                           
  8061                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  8062  00E806  848A               	bsf	3978,2,c	;volatile
  8063                           
  8064                           ;unmc_lcd_216.c: 34: __nop();__nop();
  8065  00E808  F000               	nop	
  8066  00E80A  F000               	nop	
  8067                           
  8068                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  8069  00E80C  948A               	bcf	3978,2,c	;volatile
  8070  00E80E  0012               	return		;funcret
  8071  00E810                     __end_of_lcd_send_nibble:
  8072                           	opt stack 0
  8073                           tosu	equ	0xFFF
  8074                           tosh	equ	0xFFE
  8075                           tosl	equ	0xFFD
  8076                           pclath	equ	0xFFA
  8077                           tblptru	equ	0xFF8
  8078                           tblptrh	equ	0xFF7
  8079                           tblptrl	equ	0xFF6
  8080                           tablat	equ	0xFF5
  8081                           prodh	equ	0xFF4
  8082                           prodl	equ	0xFF3
  8083                           indf0	equ	0xFEF
  8084                           postinc0	equ	0xFEE
  8085                           fsr0h	equ	0xFEA
  8086                           fsr0l	equ	0xFE9
  8087                           wreg	equ	0xFE8
  8088                           indf1	equ	0xFE7
  8089                           postinc1	equ	0xFE6
  8090                           postdec1	equ	0xFE5
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _Delay100TCYx *****************
  8101 ;; Defined at:
  8102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  unit            1    wreg     unsigned char 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  unit            1    0[COMRAM] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;		None               void
  8109 ;; Registers used:
  8110 ;;		wreg
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8120 ;;Total ram usage:        1 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; This function calls:
  8123 ;;		Nothing
  8124 ;; This function is called by:
  8125 ;;		_lcd_send_byte
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           	psect	text47
  8130  00E0A4                     __ptext47:
  8131                           	opt stack 0
  8132  00E0A4                     _Delay100TCYx:
  8133                           	opt stack 26
  8134                           
  8135                           ;incstack = 0
  8136                           ;Delay100TCYx@unit stored from wreg
  8137  00E0A4  6E01               	movwf	Delay100TCYx@unit,c
  8138  00E0A6  0E21               	movlw	33
  8139  00E0A8                     u3357:
  8140  00E0A8  2EE8               	decfsz	wreg,f,c
  8141  00E0AA  D7FE               	goto	u3357
  8142  00E0AC  F000               	nop	
  8143  00E0AE  2E01               	decfsz	Delay100TCYx@unit,f,c
  8144  00E0B0  D7FA               	goto	l2826
  8145  00E0B2  0012               	return	
  8146  00E0B4  0012               	return		;funcret
  8147  00E0B6                     __end_of_Delay100TCYx:
  8148                           	opt stack 0
  8149                           tosu	equ	0xFFF
  8150                           tosh	equ	0xFFE
  8151                           tosl	equ	0xFFD
  8152                           pclath	equ	0xFFA
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           indf0	equ	0xFEF
  8160                           postinc0	equ	0xFEE
  8161                           fsr0h	equ	0xFEA
  8162                           fsr0l	equ	0xFE9
  8163                           wreg	equ	0xFE8
  8164                           indf1	equ	0xFE7
  8165                           postinc1	equ	0xFE6
  8166                           postdec1	equ	0xFE5
  8167                           fsr1h	equ	0xFE2
  8168                           fsr1l	equ	0xFE1
  8169                           indf2	equ	0xFDF
  8170                           postinc2	equ	0xFDE
  8171                           postdec2	equ	0xFDD
  8172                           fsr2h	equ	0xFDA
  8173                           fsr2l	equ	0xFD9
  8174                           status	equ	0xFD8
  8175                           
  8176 ;; *************** function _Write_RTC *****************
  8177 ;; Defined at:
  8178 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;		None
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;		None
  8183 ;; Return value:  Size  Location     Type
  8184 ;;		None               void
  8185 ;; Registers used:
  8186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8196 ;;Total ram usage:        0 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; Hardware stack levels required when called:    2
  8199 ;; This function calls:
  8200 ;;		_RtccWrOn
  8201 ;;		_RtccWriteDate
  8202 ;;		_RtccWriteTime
  8203 ;;		___awdiv
  8204 ;; This function is called by:
  8205 ;;		_Setup
  8206 ;;		_cambiar_dia
  8207 ;;		_cambiar_mes
  8208 ;;		_cambiar_anio
  8209 ;;		_cambiar_hora
  8210 ;;		_cambiar_minutos
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214                           	psect	text48
  8215  00F7F6                     __ptext48:
  8216                           	opt stack 0
  8217  00F7F6                     _Write_RTC:
  8218                           	opt stack 25
  8219                           
  8220                           ;unmc_rtcc_02.c: 37: RtccWrOn();
  8221                           
  8222                           ;incstack = 0
  8223  00F7F6  EC49  F070         	call	_RtccWrOn	;wreg free
  8224                           
  8225                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
  8226  00F7FA  80A3               	bsf	4003,0,c	;volatile
  8227                           
  8228                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
  8229  00F7FC  C0A3  F001         	movff	_segundo,___awdiv@dividend
  8230  00F800  C0A4  F002         	movff	_segundo+1,___awdiv@dividend+1
  8231  00F804  0E00               	movlw	0
  8232  00F806  6E04               	movwf	___awdiv@divisor+1,c
  8233  00F808  0E0A               	movlw	10
  8234  00F80A  6E03               	movwf	___awdiv@divisor,c
  8235  00F80C  EC9B  F075         	call	___awdiv	;wreg free
  8236  00F810  5001               	movf	?___awdiv,w,c
  8237  00F812  6E5E               	movwf	_segundo_d,c
  8238                           
  8239                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
  8240  00F814  505E               	movf	_segundo_d,w,c
  8241  00F816  0D0A               	mullw	10
  8242  00F818  50F3               	movf	prodl,w,c
  8243  00F81A  0800               	sublw	0
  8244  00F81C  0100               	movlb	0	; () banked
  8245  00F81E  25A3               	addwf	_segundo& (0+255),w,b
  8246  00F820  0100               	movlb	0	; () banked
  8247  00F822  6FF9               	movwf	_segundo_u& (0+255),b
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
  8251  00F824  505E               	movf	_segundo_d,w,c
  8252  00F826  0D10               	mullw	16
  8253  00F828  50F3               	movf	prodl,w,c
  8254  00F82A  0100               	movlb	0	; () banked
  8255  00F82C  25F9               	addwf	_segundo_u& (0+255),w,b
  8256  00F82E  0100               	movlb	0	; () banked
  8257  00F830  6FC0               	movwf	(_RtccTime+1)& (0+255),b
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
  8261  00F832  C0E5  F001         	movff	_minuto,___awdiv@dividend
  8262  00F836  C0E6  F002         	movff	_minuto+1,___awdiv@dividend+1
  8263  00F83A  0E00               	movlw	0
  8264  00F83C  6E04               	movwf	___awdiv@divisor+1,c
  8265  00F83E  0E0A               	movlw	10
  8266  00F840  6E03               	movwf	___awdiv@divisor,c
  8267  00F842  EC9B  F075         	call	___awdiv	;wreg free
  8268  00F846  5001               	movf	?___awdiv,w,c
  8269  00F848  0100               	movlb	0	; () banked
  8270  00F84A  6FF7               	movwf	_minuto_d& (0+255),b
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
  8274  00F84C  0100               	movlb	0	; () banked
  8275  00F84E  51F7               	movf	_minuto_d& (0+255),w,b
  8276  00F850  0D0A               	mullw	10
  8277  00F852  50F3               	movf	prodl,w,c
  8278  00F854  0800               	sublw	0
  8279  00F856  0100               	movlb	0	; () banked
  8280  00F858  25E5               	addwf	_minuto& (0+255),w,b
  8281  00F85A  0100               	movlb	0	; () banked
  8282  00F85C  6FF8               	movwf	_minuto_u& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
  8286  00F85E  0100               	movlb	0	; () banked
  8287  00F860  51F7               	movf	_minuto_d& (0+255),w,b
  8288  00F862  0D10               	mullw	16
  8289  00F864  50F3               	movf	prodl,w,c
  8290  00F866  0100               	movlb	0	; () banked
  8291  00F868  25F8               	addwf	_minuto_u& (0+255),w,b
  8292  00F86A  0100               	movlb	0	; () banked
  8293  00F86C  6FC1               	movwf	(_RtccTime+2)& (0+255),b
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
  8297  00F86E  C0E1  F001         	movff	_hora,___awdiv@dividend
  8298  00F872  C0E2  F002         	movff	_hora+1,___awdiv@dividend+1
  8299  00F876  0E00               	movlw	0
  8300  00F878  6E04               	movwf	___awdiv@divisor+1,c
  8301  00F87A  0E0A               	movlw	10
  8302  00F87C  6E03               	movwf	___awdiv@divisor,c
  8303  00F87E  EC9B  F075         	call	___awdiv	;wreg free
  8304  00F882  5001               	movf	?___awdiv,w,c
  8305  00F884  0100               	movlb	0	; () banked
  8306  00F886  6FF3               	movwf	_hora_d& (0+255),b
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
  8310  00F888  0100               	movlb	0	; () banked
  8311  00F88A  51F3               	movf	_hora_d& (0+255),w,b
  8312  00F88C  0D0A               	mullw	10
  8313  00F88E  50F3               	movf	prodl,w,c
  8314  00F890  0800               	sublw	0
  8315  00F892  0100               	movlb	0	; () banked
  8316  00F894  25E1               	addwf	_hora& (0+255),w,b
  8317  00F896  0100               	movlb	0	; () banked
  8318  00F898  6FF4               	movwf	_hora_u& (0+255),b
  8319                           
  8320                           ; BSR set to: 0
  8321                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
  8322  00F89A  0100               	movlb	0	; () banked
  8323  00F89C  51F3               	movf	_hora_d& (0+255),w,b
  8324  00F89E  0D10               	mullw	16
  8325  00F8A0  50F3               	movf	prodl,w,c
  8326  00F8A2  0100               	movlb	0	; () banked
  8327  00F8A4  25F4               	addwf	_hora_u& (0+255),w,b
  8328  00F8A6  0100               	movlb	0	; () banked
  8329  00F8A8  6FC2               	movwf	(_RtccTime+3)& (0+255),b
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
  8333  00F8AA  C0DB  F001         	movff	_anio,___awdiv@dividend
  8334  00F8AE  C0DC  F002         	movff	_anio+1,___awdiv@dividend+1
  8335  00F8B2  0E00               	movlw	0
  8336  00F8B4  6E04               	movwf	___awdiv@divisor+1,c
  8337  00F8B6  0E0A               	movlw	10
  8338  00F8B8  6E03               	movwf	___awdiv@divisor,c
  8339  00F8BA  EC9B  F075         	call	___awdiv	;wreg free
  8340  00F8BE  5001               	movf	?___awdiv,w,c
  8341  00F8C0  0100               	movlb	0	; () banked
  8342  00F8C2  6FEE               	movwf	_anio_d& (0+255),b
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
  8346  00F8C4  0100               	movlb	0	; () banked
  8347  00F8C6  51EE               	movf	_anio_d& (0+255),w,b
  8348  00F8C8  0D0A               	mullw	10
  8349  00F8CA  50F3               	movf	prodl,w,c
  8350  00F8CC  0800               	sublw	0
  8351  00F8CE  0100               	movlb	0	; () banked
  8352  00F8D0  25DB               	addwf	_anio& (0+255),w,b
  8353  00F8D2  0100               	movlb	0	; () banked
  8354  00F8D4  6FEF               	movwf	_anio_u& (0+255),b
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
  8358  00F8D6  0100               	movlb	0	; () banked
  8359  00F8D8  51EE               	movf	_anio_d& (0+255),w,b
  8360  00F8DA  0D10               	mullw	16
  8361  00F8DC  50F3               	movf	prodl,w,c
  8362  00F8DE  0100               	movlb	0	; () banked
  8363  00F8E0  25EF               	addwf	_anio_u& (0+255),w,b
  8364  00F8E2  0100               	movlb	0	; () banked
  8365  00F8E4  6FBE               	movwf	(_RtccDate+3)& (0+255),b
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
  8369  00F8E6  C0E3  F001         	movff	_mes,___awdiv@dividend
  8370  00F8EA  C0E4  F002         	movff	_mes+1,___awdiv@dividend+1
  8371  00F8EE  0E00               	movlw	0
  8372  00F8F0  6E04               	movwf	___awdiv@divisor+1,c
  8373  00F8F2  0E0A               	movlw	10
  8374  00F8F4  6E03               	movwf	___awdiv@divisor,c
  8375  00F8F6  EC9B  F075         	call	___awdiv	;wreg free
  8376  00F8FA  5001               	movf	?___awdiv,w,c
  8377  00F8FC  0100               	movlb	0	; () banked
  8378  00F8FE  6FF5               	movwf	_mes_d& (0+255),b
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
  8382  00F900  0100               	movlb	0	; () banked
  8383  00F902  51F5               	movf	_mes_d& (0+255),w,b
  8384  00F904  0D0A               	mullw	10
  8385  00F906  50F3               	movf	prodl,w,c
  8386  00F908  0800               	sublw	0
  8387  00F90A  0100               	movlb	0	; () banked
  8388  00F90C  25E3               	addwf	_mes& (0+255),w,b
  8389  00F90E  0100               	movlb	0	; () banked
  8390  00F910  6FF6               	movwf	_mes_u& (0+255),b
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
  8394  00F912  0100               	movlb	0	; () banked
  8395  00F914  51F5               	movf	_mes_d& (0+255),w,b
  8396  00F916  0D10               	mullw	16
  8397  00F918  50F3               	movf	prodl,w,c
  8398  00F91A  0100               	movlb	0	; () banked
  8399  00F91C  25F6               	addwf	_mes_u& (0+255),w,b
  8400  00F91E  0100               	movlb	0	; () banked
  8401  00F920  6FBD               	movwf	(_RtccDate+2)& (0+255),b
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
  8405  00F922  C0DD  F001         	movff	_dia,___awdiv@dividend
  8406  00F926  C0DE  F002         	movff	_dia+1,___awdiv@dividend+1
  8407  00F92A  0E00               	movlw	0
  8408  00F92C  6E04               	movwf	___awdiv@divisor+1,c
  8409  00F92E  0E0A               	movlw	10
  8410  00F930  6E03               	movwf	___awdiv@divisor,c
  8411  00F932  EC9B  F075         	call	___awdiv	;wreg free
  8412  00F936  5001               	movf	?___awdiv,w,c
  8413  00F938  0100               	movlb	0	; () banked
  8414  00F93A  6FF1               	movwf	_fecha_d& (0+255),b
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
  8418  00F93C  0100               	movlb	0	; () banked
  8419  00F93E  51F1               	movf	_fecha_d& (0+255),w,b
  8420  00F940  0D0A               	mullw	10
  8421  00F942  50F3               	movf	prodl,w,c
  8422  00F944  0800               	sublw	0
  8423  00F946  0100               	movlb	0	; () banked
  8424  00F948  25DD               	addwf	_dia& (0+255),w,b
  8425  00F94A  0100               	movlb	0	; () banked
  8426  00F94C  6FF2               	movwf	_fecha_u& (0+255),b
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
  8430  00F94E  0100               	movlb	0	; () banked
  8431  00F950  51F1               	movf	_fecha_d& (0+255),w,b
  8432  00F952  0D10               	mullw	16
  8433  00F954  50F3               	movf	prodl,w,c
  8434  00F956  0100               	movlb	0	; () banked
  8435  00F958  25F2               	addwf	_fecha_u& (0+255),w,b
  8436  00F95A  0100               	movlb	0	; () banked
  8437  00F95C  6FBC               	movwf	(_RtccDate+1)& (0+255),b
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
  8441  00F95E  C0DF  F0F0         	movff	_diasem,_dia_semana
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
  8445  00F962  C0DF  F0BB         	movff	_diasem,_RtccDate
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
  8449  00F966  0EBF               	movlw	low _RtccTime
  8450  00F968  6E01               	movwf	RtccWriteTime@pTm,c
  8451  00F96A  0E00               	movlw	high _RtccTime
  8452  00F96C  6E02               	movwf	RtccWriteTime@pTm+1,c
  8453  00F96E  0E01               	movlw	1
  8454  00F970  6E03               	movwf	RtccWriteTime@di,c
  8455  00F972  EC0A  F079         	call	_RtccWriteTime	;wreg free
  8456                           
  8457                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
  8458  00F976  0EBB               	movlw	low _RtccDate
  8459  00F978  6E01               	movwf	RtccWriteDate@pDt,c
  8460  00F97A  0E00               	movlw	high _RtccDate
  8461  00F97C  6E02               	movwf	RtccWriteDate@pDt+1,c
  8462  00F97E  0E01               	movlw	1
  8463  00F980  6E03               	movwf	RtccWriteDate@di,c
  8464  00F982  EC58  F07B         	call	_RtccWriteDate	;wreg free
  8465                           
  8466                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
  8467  00F986  010F               	movlb	15	; () banked
  8468  00F988  8F3F               	bsf	63,7,b	;volatile
  8469                           
  8470                           ; BSR set to: 15
  8471  00F98A  0012               	return		;funcret
  8472  00F98C                     __end_of_Write_RTC:
  8473                           	opt stack 0
  8474                           tosu	equ	0xFFF
  8475                           tosh	equ	0xFFE
  8476                           tosl	equ	0xFFD
  8477                           pclath	equ	0xFFA
  8478                           tblptru	equ	0xFF8
  8479                           tblptrh	equ	0xFF7
  8480                           tblptrl	equ	0xFF6
  8481                           tablat	equ	0xFF5
  8482                           prodh	equ	0xFF4
  8483                           prodl	equ	0xFF3
  8484                           indf0	equ	0xFEF
  8485                           postinc0	equ	0xFEE
  8486                           fsr0h	equ	0xFEA
  8487                           fsr0l	equ	0xFE9
  8488                           wreg	equ	0xFE8
  8489                           indf1	equ	0xFE7
  8490                           postinc1	equ	0xFE6
  8491                           postdec1	equ	0xFE5
  8492                           fsr1h	equ	0xFE2
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function ___awdiv *****************
  8502 ;; Defined at:
  8503 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  dividend        2    0[COMRAM] int 
  8506 ;;  divisor         2    2[COMRAM] int 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  quotient        2    6[COMRAM] int 
  8509 ;;  sign            1    5[COMRAM] unsigned char 
  8510 ;;  counter         1    4[COMRAM] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  2    0[COMRAM] int 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8521 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8523 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8524 ;;Total ram usage:        8 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_Write_RTC
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text49
  8534  00EB36                     __ptext49:
  8535                           	opt stack 0
  8536  00EB36                     ___awdiv:
  8537                           	opt stack 26
  8538                           
  8539                           ; BSR set to: 15
  8540                           ;incstack = 0
  8541  00EB36  0E00               	movlw	0
  8542  00EB38  6E06               	movwf	___awdiv@sign,c
  8543  00EB3A  AE04               	btfss	___awdiv@divisor+1,7,c
  8544  00EB3C  D007               	goto	l3206
  8545  00EB3E  6C03               	negf	___awdiv@divisor,c
  8546  00EB40  1E04               	comf	___awdiv@divisor+1,f,c
  8547  00EB42  B0D8               	btfsc	status,0,c
  8548  00EB44  2A04               	incf	___awdiv@divisor+1,f,c
  8549  00EB46  0E01               	movlw	1
  8550  00EB48  6E06               	movwf	___awdiv@sign,c
  8551  00EB4A  D000               	goto	l3206
  8552  00EB4C                     l3206:
  8553  00EB4C  AE02               	btfss	___awdiv@dividend+1,7,c
  8554  00EB4E  D007               	goto	l3212
  8555  00EB50  6C01               	negf	___awdiv@dividend,c
  8556  00EB52  1E02               	comf	___awdiv@dividend+1,f,c
  8557  00EB54  B0D8               	btfsc	status,0,c
  8558  00EB56  2A02               	incf	___awdiv@dividend+1,f,c
  8559  00EB58  0E01               	movlw	1
  8560  00EB5A  1A06               	xorwf	___awdiv@sign,f,c
  8561  00EB5C  D000               	goto	l3212
  8562  00EB5E                     l3212:
  8563  00EB5E  0E00               	movlw	0
  8564  00EB60  6E08               	movwf	___awdiv@quotient+1,c
  8565  00EB62  0E00               	movlw	0
  8566  00EB64  6E07               	movwf	___awdiv@quotient,c
  8567  00EB66  5003               	movf	___awdiv@divisor,w,c
  8568  00EB68  1004               	iorwf	___awdiv@divisor+1,w,c
  8569  00EB6A  B4D8               	btfsc	status,2,c
  8570  00EB6C  D021               	goto	l3234
  8571  00EB6E  0E01               	movlw	1
  8572  00EB70  6E05               	movwf	___awdiv@counter,c
  8573  00EB72  D005               	goto	l3220
  8574  00EB74                     l3218:
  8575  00EB74  90D8               	bcf	status,0,c
  8576  00EB76  3603               	rlcf	___awdiv@divisor,f,c
  8577  00EB78  3604               	rlcf	___awdiv@divisor+1,f,c
  8578  00EB7A  2A05               	incf	___awdiv@counter,f,c
  8579  00EB7C  D000               	goto	l3220
  8580  00EB7E                     l3220:
  8581  00EB7E  BE04               	btfsc	___awdiv@divisor+1,7,c
  8582  00EB80  D002               	goto	l3222
  8583  00EB82  D7F8               	goto	l3218
  8584  00EB84  D000               	goto	l3222
  8585  00EB86                     l3222:
  8586  00EB86  90D8               	bcf	status,0,c
  8587  00EB88  3607               	rlcf	___awdiv@quotient,f,c
  8588  00EB8A  3608               	rlcf	___awdiv@quotient+1,f,c
  8589  00EB8C  5003               	movf	___awdiv@divisor,w,c
  8590  00EB8E  5C01               	subwf	___awdiv@dividend,w,c
  8591  00EB90  5004               	movf	___awdiv@divisor+1,w,c
  8592  00EB92  5802               	subwfb	___awdiv@dividend+1,w,c
  8593  00EB94  A0D8               	btfss	status,0,c
  8594  00EB96  D006               	goto	l3230
  8595  00EB98  5003               	movf	___awdiv@divisor,w,c
  8596  00EB9A  5E01               	subwf	___awdiv@dividend,f,c
  8597  00EB9C  5004               	movf	___awdiv@divisor+1,w,c
  8598  00EB9E  5A02               	subwfb	___awdiv@dividend+1,f,c
  8599  00EBA0  8007               	bsf	___awdiv@quotient,0,c
  8600  00EBA2  D000               	goto	l3230
  8601  00EBA4                     l3230:
  8602  00EBA4  90D8               	bcf	status,0,c
  8603  00EBA6  3204               	rrcf	___awdiv@divisor+1,f,c
  8604  00EBA8  3203               	rrcf	___awdiv@divisor,f,c
  8605  00EBAA  2E05               	decfsz	___awdiv@counter,f,c
  8606  00EBAC  D7EC               	goto	l3222
  8607  00EBAE  D000               	goto	l3234
  8608  00EBB0                     l3234:
  8609  00EBB0  5006               	movf	___awdiv@sign,w,c
  8610  00EBB2  B4D8               	btfsc	status,2,c
  8611  00EBB4  D005               	goto	l3238
  8612  00EBB6  6C07               	negf	___awdiv@quotient,c
  8613  00EBB8  1E08               	comf	___awdiv@quotient+1,f,c
  8614  00EBBA  B0D8               	btfsc	status,0,c
  8615  00EBBC  2A08               	incf	___awdiv@quotient+1,f,c
  8616  00EBBE  D000               	goto	l3238
  8617  00EBC0                     l3238:
  8618  00EBC0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8619  00EBC4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8620  00EBC8  0012               	return	
  8621  00EBCA  0012               	return		;funcret
  8622  00EBCC                     __end_of___awdiv:
  8623                           	opt stack 0
  8624                           tosu	equ	0xFFF
  8625                           tosh	equ	0xFFE
  8626                           tosl	equ	0xFFD
  8627                           pclath	equ	0xFFA
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           indf0	equ	0xFEF
  8635                           postinc0	equ	0xFEE
  8636                           fsr0h	equ	0xFEA
  8637                           fsr0l	equ	0xFE9
  8638                           wreg	equ	0xFE8
  8639                           indf1	equ	0xFE7
  8640                           postinc1	equ	0xFE6
  8641                           postdec1	equ	0xFE5
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function _RtccWriteTime *****************
  8652 ;; Defined at:
  8653 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  pTm             2    0[COMRAM] PTR const struct .
  8656 ;;		 -> RtccTime(4), 
  8657 ;;  di              1    2[COMRAM] enum E7121
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  tempHourWDay    2    9[COMRAM] struct .
  8660 ;;  tempMinSec      2    7[COMRAM] struct .
  8661 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8662 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8663 ;;  wasOn           1    4[COMRAM] enum E7121
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      enum E7121
  8666 ;; Registers used:
  8667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8673 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8674 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8676 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8677 ;;Total ram usage:       11 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    1
  8680 ;; This function calls:
  8681 ;;		_RtccWrOn
  8682 ;; This function is called by:
  8683 ;;		_Write_RTC
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text50
  8688  00F214                     __ptext50:
  8689                           	opt stack 0
  8690  00F214                     _RtccWriteTime:
  8691                           	opt stack 25
  8692                           
  8693                           ;incstack = 0
  8694  00F214  0E00               	movlw	0
  8695  00F216  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8696  00F218  EE20 F002          	lfsr	2,2
  8697  00F21C  5001               	movf	RtccWriteTime@pTm,w,c
  8698  00F21E  26D9               	addwf	fsr2l,f,c
  8699  00F220  5002               	movf	RtccWriteTime@pTm+1,w,c
  8700  00F222  22DA               	addwfc	fsr2h,f,c
  8701  00F224  0E5A               	movlw	90
  8702  00F226  60DF               	cpfslt	indf2,c
  8703  00F228  0012               	return	
  8704  00F22A  EE20 F001          	lfsr	2,1
  8705  00F22E  5001               	movf	RtccWriteTime@pTm,w,c
  8706  00F230  26D9               	addwf	fsr2l,f,c
  8707  00F232  5002               	movf	RtccWriteTime@pTm+1,w,c
  8708  00F234  22DA               	addwfc	fsr2h,f,c
  8709  00F236  0E5A               	movlw	90
  8710  00F238  60DF               	cpfslt	indf2,c
  8711  00F23A  0012               	return	
  8712  00F23C  EE20 F003          	lfsr	2,3
  8713  00F240  5001               	movf	RtccWriteTime@pTm,w,c
  8714  00F242  26D9               	addwf	fsr2l,f,c
  8715  00F244  5002               	movf	RtccWriteTime@pTm+1,w,c
  8716  00F246  22DA               	addwfc	fsr2h,f,c
  8717  00F248  0E24               	movlw	36
  8718  00F24A  64DF               	cpfsgt	indf2,c
  8719  00F24C  D002               	goto	l3070
  8720  00F24E  0012               	return	
  8721                           
  8722                           ;	Return value of _RtccWriteTime is never used
  8723  00F250  0012               	return	
  8724  00F252                     l3070:
  8725  00F252  EE20 F002          	lfsr	2,2
  8726  00F256  5001               	movf	RtccWriteTime@pTm,w,c
  8727  00F258  26D9               	addwf	fsr2l,f,c
  8728  00F25A  5002               	movf	RtccWriteTime@pTm+1,w,c
  8729  00F25C  22DA               	addwfc	fsr2h,f,c
  8730  00F25E  50DF               	movf	indf2,w,c
  8731  00F260  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8732  00F262  EE20 F001          	lfsr	2,1
  8733  00F266  5001               	movf	RtccWriteTime@pTm,w,c
  8734  00F268  26D9               	addwf	fsr2l,f,c
  8735  00F26A  5002               	movf	RtccWriteTime@pTm+1,w,c
  8736  00F26C  22DA               	addwfc	fsr2h,f,c
  8737  00F26E  50DF               	movf	indf2,w,c
  8738  00F270  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8739  00F272  5003               	movf	RtccWriteTime@di,w,c
  8740  00F274  B4D8               	btfsc	status,2,c
  8741  00F276  D002               	goto	l3076
  8742  00F278  9CF2               	bcf	intcon,6,c	;volatile
  8743  00F27A  D000               	goto	l3076
  8744  00F27C                     l3076:
  8745  00F27C  0E00               	movlw	0
  8746  00F27E  BB3F               	btfsc	63,5,b	;volatile
  8747  00F280  0E01               	movlw	1
  8748  00F282  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8749  00F284  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8750  00F286  A4D8               	btfss	status,2,c
  8751  00F288  D003               	goto	l3080
  8752  00F28A  EC49  F070         	call	_RtccWrOn	;wreg free
  8753  00F28E  D000               	goto	l3080
  8754  00F290                     l3080:
  8755  00F290  0E00               	movlw	0
  8756  00F292  BF3F               	btfsc	63,7,b	;volatile
  8757  00F294  0E01               	movlw	1
  8758  00F296  6E05               	movwf	RtccWriteTime@wasOn,c
  8759  00F298  5005               	movf	RtccWriteTime@wasOn,w,c
  8760  00F29A  B4D8               	btfsc	status,2,c
  8761  00F29C  D007               	goto	l3086
  8762  00F29E  0E00               	movlw	0
  8763  00F2A0  BE91               	btfsc	3985,7,c	;volatile
  8764  00F2A2  0E01               	movlw	1
  8765  00F2A4  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8766  00F2A6  010F               	movlb	15	; () banked
  8767  00F2A8  9F3F               	bcf	63,7,b	;volatile
  8768  00F2AA  D000               	goto	l3086
  8769  00F2AC                     l3086:
  8770  00F2AC  0EFC               	movlw	252
  8771  00F2AE  010F               	movlb	15	; () banked
  8772  00F2B0  173F               	andwf	63,f,b	;volatile
  8773  00F2B2  010F               	movlb	15	; () banked
  8774  00F2B4  813F               	bsf	63,0,b	;volatile
  8775                           
  8776                           ; BSR set to: 15
  8777  00F2B6  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8778                           
  8779                           ; BSR set to: 15
  8780  00F2BA  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8781                           
  8782                           ; BSR set to: 15
  8783  00F2BE  EE20 F003          	lfsr	2,3
  8784  00F2C2  5001               	movf	RtccWriteTime@pTm,w,c
  8785  00F2C4  26D9               	addwf	fsr2l,f,c
  8786  00F2C6  5002               	movf	RtccWriteTime@pTm+1,w,c
  8787  00F2C8  22DA               	addwfc	fsr2h,f,c
  8788  00F2CA  50DF               	movf	indf2,w,c
  8789  00F2CC  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8790                           
  8791                           ; BSR set to: 15
  8792  00F2CE  0EFC               	movlw	252
  8793  00F2D0  010F               	movlb	15	; () banked
  8794  00F2D2  173F               	andwf	63,f,b	;volatile
  8795                           
  8796                           ; BSR set to: 15
  8797  00F2D4  010F               	movlb	15	; () banked
  8798  00F2D6  813F               	bsf	63,0,b	;volatile
  8799                           
  8800                           ; BSR set to: 15
  8801  00F2D8  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8802                           
  8803                           ; BSR set to: 15
  8804  00F2DC  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8805                           
  8806                           ; BSR set to: 15
  8807  00F2E0  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8808                           
  8809                           ; BSR set to: 15
  8810  00F2E4  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8811                           
  8812                           ; BSR set to: 15
  8813  00F2E8  5005               	movf	RtccWriteTime@wasOn,w,c
  8814  00F2EA  B4D8               	btfsc	status,2,c
  8815  00F2EC  D00D               	goto	l3118
  8816                           
  8817                           ; BSR set to: 15
  8818  00F2EE  010F               	movlb	15	; () banked
  8819  00F2F0  8F3F               	bsf	63,7,b	;volatile
  8820                           
  8821                           ; BSR set to: 15
  8822  00F2F2  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8823  00F2F4  B4D8               	btfsc	status,2,c
  8824  00F2F6  D002               	goto	l3114
  8825                           
  8826                           ; BSR set to: 15
  8827  00F2F8  8E91               	bsf	3985,7,c	;volatile
  8828  00F2FA  D000               	goto	l3114
  8829  00F2FC                     l3114:
  8830                           
  8831                           ; BSR set to: 15
  8832  00F2FC  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8833  00F2FE  B4D8               	btfsc	status,2,c
  8834  00F300  D009               	goto	l3122
  8835                           
  8836                           ; BSR set to: 15
  8837  00F302  EC49  F070         	call	_RtccWrOn	;wreg free
  8838  00F306  D006               	goto	l3122
  8839  00F308                     l3118:
  8840  00F308  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8841  00F30A  A4D8               	btfss	status,2,c
  8842  00F30C  D003               	goto	l3122
  8843  00F30E  010F               	movlb	15	; () banked
  8844  00F310  9B3F               	bcf	63,5,b	;volatile
  8845                           
  8846                           ; BSR set to: 15
  8847  00F312  D000               	goto	l3122
  8848  00F314                     l3122:
  8849  00F314  5003               	movf	RtccWriteTime@di,w,c
  8850  00F316  B4D8               	btfsc	status,2,c
  8851  00F318  0012               	return	
  8852  00F31A  8CF2               	bsf	intcon,6,c	;volatile
  8853  00F31C  0012               	return	
  8854                           
  8855                           ;	Return value of _RtccWriteTime is never used
  8856  00F31E  0012               	return		;funcret
  8857  00F320                     __end_of_RtccWriteTime:
  8858                           	opt stack 0
  8859                           tosu	equ	0xFFF
  8860                           tosh	equ	0xFFE
  8861                           tosl	equ	0xFFD
  8862                           pclath	equ	0xFFA
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           prodh	equ	0xFF4
  8868                           prodl	equ	0xFF3
  8869                           intcon	equ	0xFF2
  8870                           indf0	equ	0xFEF
  8871                           postinc0	equ	0xFEE
  8872                           fsr0h	equ	0xFEA
  8873                           fsr0l	equ	0xFE9
  8874                           wreg	equ	0xFE8
  8875                           indf1	equ	0xFE7
  8876                           postinc1	equ	0xFE6
  8877                           postdec1	equ	0xFE5
  8878                           fsr1h	equ	0xFE2
  8879                           fsr1l	equ	0xFE1
  8880                           indf2	equ	0xFDF
  8881                           postinc2	equ	0xFDE
  8882                           postdec2	equ	0xFDD
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function _RtccWriteDate *****************
  8888 ;; Defined at:
  8889 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;  pDt             2    0[COMRAM] PTR const struct .
  8892 ;;		 -> RtccDate(4), 
  8893 ;;  di              1    2[COMRAM] enum E7121
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  tempHourWDay    2   11[COMRAM] struct .
  8896 ;;  tempDayMonth    2    9[COMRAM] struct .
  8897 ;;  tempYear        2    6[COMRAM] struct .
  8898 ;;  wasWrEn         1    8[COMRAM] enum E7121
  8899 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8900 ;;  wasOn           1    4[COMRAM] enum E7121
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      enum E7121
  8903 ;; Registers used:
  8904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8911 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8913 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8914 ;;Total ram usage:       13 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    1
  8917 ;; This function calls:
  8918 ;;		_RtccWrOn
  8919 ;; This function is called by:
  8920 ;;		_Write_RTC
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text51
  8925  00F6B0                     __ptext51:
  8926                           	opt stack 0
  8927  00F6B0                     _RtccWriteDate:
  8928                           	opt stack 25
  8929                           
  8930                           ;incstack = 0
  8931  00F6B0  0E00               	movlw	0
  8932  00F6B2  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8933  00F6B4  EE20 F002          	lfsr	2,2
  8934  00F6B8  5001               	movf	RtccWriteDate@pDt,w,c
  8935  00F6BA  26D9               	addwf	fsr2l,f,c
  8936  00F6BC  5002               	movf	RtccWriteDate@pDt+1,w,c
  8937  00F6BE  22DA               	addwfc	fsr2h,f,c
  8938  00F6C0  0E13               	movlw	19
  8939  00F6C2  60DF               	cpfslt	indf2,c
  8940  00F6C4  0012               	return	
  8941  00F6C6  EE20 F002          	lfsr	2,2
  8942  00F6CA  5001               	movf	RtccWriteDate@pDt,w,c
  8943  00F6CC  26D9               	addwf	fsr2l,f,c
  8944  00F6CE  5002               	movf	RtccWriteDate@pDt+1,w,c
  8945  00F6D0  22DA               	addwfc	fsr2h,f,c
  8946  00F6D2  50DF               	movf	indf2,w,c
  8947  00F6D4  B4D8               	btfsc	status,2,c
  8948  00F6D6  0012               	return	
  8949  00F6D8  EE20 F001          	lfsr	2,1
  8950  00F6DC  5001               	movf	RtccWriteDate@pDt,w,c
  8951  00F6DE  26D9               	addwf	fsr2l,f,c
  8952  00F6E0  5002               	movf	RtccWriteDate@pDt+1,w,c
  8953  00F6E2  22DA               	addwfc	fsr2h,f,c
  8954  00F6E4  0E32               	movlw	50
  8955  00F6E6  60DF               	cpfslt	indf2,c
  8956  00F6E8  0012               	return	
  8957  00F6EA  EE20 F001          	lfsr	2,1
  8958  00F6EE  5001               	movf	RtccWriteDate@pDt,w,c
  8959  00F6F0  26D9               	addwf	fsr2l,f,c
  8960  00F6F2  5002               	movf	RtccWriteDate@pDt+1,w,c
  8961  00F6F4  22DA               	addwfc	fsr2h,f,c
  8962  00F6F6  50DF               	movf	indf2,w,c
  8963  00F6F8  B4D8               	btfsc	status,2,c
  8964  00F6FA  0012               	return	
  8965  00F6FC  EE20 F003          	lfsr	2,3
  8966  00F700  5001               	movf	RtccWriteDate@pDt,w,c
  8967  00F702  26D9               	addwf	fsr2l,f,c
  8968  00F704  5002               	movf	RtccWriteDate@pDt+1,w,c
  8969  00F706  22DA               	addwfc	fsr2h,f,c
  8970  00F708  0E99               	movlw	153
  8971  00F70A  64DF               	cpfsgt	indf2,c
  8972  00F70C  D002               	goto	l3138
  8973  00F70E  0012               	return	
  8974                           
  8975                           ;	Return value of _RtccWriteDate is never used
  8976  00F710  0012               	return	
  8977  00F712                     l3138:
  8978  00F712  EE20 F003          	lfsr	2,3
  8979  00F716  5001               	movf	RtccWriteDate@pDt,w,c
  8980  00F718  26D9               	addwf	fsr2l,f,c
  8981  00F71A  5002               	movf	RtccWriteDate@pDt+1,w,c
  8982  00F71C  22DA               	addwfc	fsr2h,f,c
  8983  00F71E  50DF               	movf	indf2,w,c
  8984  00F720  6E07               	movwf	RtccWriteDate@tempYear,c
  8985  00F722  EE20 F001          	lfsr	2,1
  8986  00F726  5001               	movf	RtccWriteDate@pDt,w,c
  8987  00F728  26D9               	addwf	fsr2l,f,c
  8988  00F72A  5002               	movf	RtccWriteDate@pDt+1,w,c
  8989  00F72C  22DA               	addwfc	fsr2h,f,c
  8990  00F72E  50DF               	movf	indf2,w,c
  8991  00F730  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  8992  00F732  EE20 F002          	lfsr	2,2
  8993  00F736  5001               	movf	RtccWriteDate@pDt,w,c
  8994  00F738  26D9               	addwf	fsr2l,f,c
  8995  00F73A  5002               	movf	RtccWriteDate@pDt+1,w,c
  8996  00F73C  22DA               	addwfc	fsr2h,f,c
  8997  00F73E  50DF               	movf	indf2,w,c
  8998  00F740  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  8999  00F742  5003               	movf	RtccWriteDate@di,w,c
  9000  00F744  B4D8               	btfsc	status,2,c
  9001  00F746  D002               	goto	l3144
  9002  00F748  9CF2               	bcf	intcon,6,c	;volatile
  9003  00F74A  D000               	goto	l3144
  9004  00F74C                     l3144:
  9005  00F74C  0E00               	movlw	0
  9006  00F74E  BB3F               	btfsc	63,5,b	;volatile
  9007  00F750  0E01               	movlw	1
  9008  00F752  6E09               	movwf	RtccWriteDate@wasWrEn,c
  9009  00F754  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9010  00F756  A4D8               	btfss	status,2,c
  9011  00F758  D003               	goto	l3148
  9012  00F75A  EC49  F070         	call	_RtccWrOn	;wreg free
  9013  00F75E  D000               	goto	l3148
  9014  00F760                     l3148:
  9015  00F760  0E00               	movlw	0
  9016  00F762  BF3F               	btfsc	63,7,b	;volatile
  9017  00F764  0E01               	movlw	1
  9018  00F766  6E05               	movwf	RtccWriteDate@wasOn,c
  9019  00F768  5005               	movf	RtccWriteDate@wasOn,w,c
  9020  00F76A  B4D8               	btfsc	status,2,c
  9021  00F76C  D007               	goto	l3154
  9022  00F76E  0E00               	movlw	0
  9023  00F770  BE91               	btfsc	3985,7,c	;volatile
  9024  00F772  0E01               	movlw	1
  9025  00F774  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9026  00F776  010F               	movlb	15	; () banked
  9027  00F778  9F3F               	bcf	63,7,b	;volatile
  9028  00F77A  D000               	goto	l3154
  9029  00F77C                     l3154:
  9030  00F77C  0EFC               	movlw	252
  9031  00F77E  010F               	movlb	15	; () banked
  9032  00F780  173F               	andwf	63,f,b	;volatile
  9033  00F782  010F               	movlb	15	; () banked
  9034  00F784  813F               	bsf	63,0,b	;volatile
  9035                           
  9036                           ; BSR set to: 15
  9037  00F786  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  9038                           
  9039                           ; BSR set to: 15
  9040  00F78A  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  9041                           
  9042                           ; BSR set to: 15
  9043  00F78E  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  9044  00F792  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  9045  00F796  50DF               	movf	indf2,w,c
  9046  00F798  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  9047                           
  9048                           ; BSR set to: 15
  9049  00F79A  0EFC               	movlw	252
  9050  00F79C  010F               	movlb	15	; () banked
  9051  00F79E  173F               	andwf	63,f,b	;volatile
  9052                           
  9053                           ; BSR set to: 15
  9054  00F7A0  0E03               	movlw	3
  9055  00F7A2  010F               	movlb	15	; () banked
  9056  00F7A4  133F               	iorwf	63,f,b	;volatile
  9057                           
  9058                           ; BSR set to: 15
  9059  00F7A6  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  9060                           
  9061                           ; BSR set to: 15
  9062  00F7AA  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  9063                           
  9064                           ; BSR set to: 15
  9065  00F7AE  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  9066                           
  9067                           ; BSR set to: 15
  9068  00F7B2  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  9069                           
  9070                           ; BSR set to: 15
  9071  00F7B6  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  9072                           
  9073                           ; BSR set to: 15
  9074  00F7BA  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  9075                           
  9076                           ; BSR set to: 15
  9077  00F7BE  5005               	movf	RtccWriteDate@wasOn,w,c
  9078  00F7C0  B4D8               	btfsc	status,2,c
  9079  00F7C2  D00D               	goto	l3190
  9080                           
  9081                           ; BSR set to: 15
  9082  00F7C4  010F               	movlb	15	; () banked
  9083  00F7C6  8F3F               	bsf	63,7,b	;volatile
  9084                           
  9085                           ; BSR set to: 15
  9086  00F7C8  5006               	movf	RtccWriteDate@wasAlrm,w,c
  9087  00F7CA  B4D8               	btfsc	status,2,c
  9088  00F7CC  D002               	goto	l3186
  9089                           
  9090                           ; BSR set to: 15
  9091  00F7CE  8E91               	bsf	3985,7,c	;volatile
  9092  00F7D0  D000               	goto	l3186
  9093  00F7D2                     l3186:
  9094                           
  9095                           ; BSR set to: 15
  9096  00F7D2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9097  00F7D4  B4D8               	btfsc	status,2,c
  9098  00F7D6  D009               	goto	l3194
  9099                           
  9100                           ; BSR set to: 15
  9101  00F7D8  EC49  F070         	call	_RtccWrOn	;wreg free
  9102  00F7DC  D006               	goto	l3194
  9103  00F7DE                     l3190:
  9104  00F7DE  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9105  00F7E0  A4D8               	btfss	status,2,c
  9106  00F7E2  D003               	goto	l3194
  9107  00F7E4  010F               	movlb	15	; () banked
  9108  00F7E6  9B3F               	bcf	63,5,b	;volatile
  9109                           
  9110                           ; BSR set to: 15
  9111  00F7E8  D000               	goto	l3194
  9112  00F7EA                     l3194:
  9113  00F7EA  5003               	movf	RtccWriteDate@di,w,c
  9114  00F7EC  B4D8               	btfsc	status,2,c
  9115  00F7EE  0012               	return	
  9116  00F7F0  9CF2               	bcf	intcon,6,c	;volatile
  9117  00F7F2  0012               	return	
  9118                           
  9119                           ;	Return value of _RtccWriteDate is never used
  9120  00F7F4  0012               	return		;funcret
  9121  00F7F6                     __end_of_RtccWriteDate:
  9122                           	opt stack 0
  9123                           tosu	equ	0xFFF
  9124                           tosh	equ	0xFFE
  9125                           tosl	equ	0xFFD
  9126                           pclath	equ	0xFFA
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           indf0	equ	0xFEF
  9135                           postinc0	equ	0xFEE
  9136                           fsr0h	equ	0xFEA
  9137                           fsr0l	equ	0xFE9
  9138                           wreg	equ	0xFE8
  9139                           indf1	equ	0xFE7
  9140                           postinc1	equ	0xFE6
  9141                           postdec1	equ	0xFE5
  9142                           fsr1h	equ	0xFE2
  9143                           fsr1l	equ	0xFE1
  9144                           indf2	equ	0xFDF
  9145                           postinc2	equ	0xFDE
  9146                           postdec2	equ	0xFDD
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151 ;; *************** function _RtccWrOn *****************
  9152 ;; Defined at:
  9153 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;		None
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  data            2    0        unsigned int 
  9158 ;; Return value:  Size  Location     Type
  9159 ;;		None               void
  9160 ;; Registers used:
  9161 ;;		wreg, status,2
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9171 ;;Total ram usage:        0 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; This function calls:
  9174 ;;		Nothing
  9175 ;; This function is called by:
  9176 ;;		_Write_RTC
  9177 ;;		_RtccWriteDate
  9178 ;;		_RtccWriteTime
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           	psect	text52
  9183  00E092                     __ptext52:
  9184                           	opt stack 0
  9185  00E092                     _RtccWrOn:
  9186                           	opt stack 25
  9187                           
  9188                           ;incstack = 0
  9189  00E092  9CF2               	bcf	intcon,6,c	;volatile
  9190  00E094  0E55               	movlw	85
  9191  00E096  6EA7               	movwf	4007,c	;volatile
  9192  00E098  0EAA               	movlw	170
  9193  00E09A  6EA7               	movwf	4007,c	;volatile
  9194  00E09C  010F               	movlb	15	; () banked
  9195  00E09E  8B3F               	bsf	63,5,b	;volatile
  9196                           
  9197                           ; BSR set to: 15
  9198  00E0A0  8CF2               	bsf	intcon,6,c	;volatile
  9199                           
  9200                           ; BSR set to: 15
  9201  00E0A2  0012               	return		;funcret
  9202  00E0A4                     __end_of_RtccWrOn:
  9203                           	opt stack 0
  9204                           tosu	equ	0xFFF
  9205                           tosh	equ	0xFFE
  9206                           tosl	equ	0xFFD
  9207                           pclath	equ	0xFFA
  9208                           tblptru	equ	0xFF8
  9209                           tblptrh	equ	0xFF7
  9210                           tblptrl	equ	0xFF6
  9211                           tablat	equ	0xFF5
  9212                           prodh	equ	0xFF4
  9213                           prodl	equ	0xFF3
  9214                           intcon	equ	0xFF2
  9215                           indf0	equ	0xFEF
  9216                           postinc0	equ	0xFEE
  9217                           fsr0h	equ	0xFEA
  9218                           fsr0l	equ	0xFE9
  9219                           wreg	equ	0xFE8
  9220                           indf1	equ	0xFE7
  9221                           postinc1	equ	0xFE6
  9222                           postdec1	equ	0xFE5
  9223                           fsr1h	equ	0xFE2
  9224                           fsr1l	equ	0xFE1
  9225                           indf2	equ	0xFDF
  9226                           postinc2	equ	0xFDE
  9227                           postdec2	equ	0xFDD
  9228                           fsr2h	equ	0xFDA
  9229                           fsr2l	equ	0xFD9
  9230                           status	equ	0xFD8
  9231                           
  9232 ;; *************** function _Read_RTC *****************
  9233 ;; Defined at:
  9234 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;		None
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;		None
  9239 ;; Return value:  Size  Location     Type
  9240 ;;		None               void
  9241 ;; Registers used:
  9242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9252 ;;Total ram usage:        0 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; Hardware stack levels required when called:    1
  9255 ;; This function calls:
  9256 ;;		_RtccReadDate
  9257 ;;		_RtccReadTime
  9258 ;; This function is called by:
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text53
  9264  00F56E                     __ptext53:
  9265                           	opt stack 0
  9266  00F56E                     _Read_RTC:
  9267                           	opt stack 29
  9268                           
  9269                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
  9270                           
  9271                           ; BSR set to: 15
  9272                           ;incstack = 0
  9273  00F56E  0EBF               	movlw	low _RtccTime
  9274  00F570  6E01               	movwf	RtccReadTime@pTm,c
  9275  00F572  0E00               	movlw	high _RtccTime
  9276  00F574  6E02               	movwf	RtccReadTime@pTm+1,c
  9277  00F576  ECEA  F072         	call	_RtccReadTime	;wreg free
  9278                           
  9279                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
  9280  00F57A  0100               	movlb	0	; () banked
  9281  00F57C  51C0               	movf	(_RtccTime+1)& (0+255),w,b
  9282  00F57E  0B0F               	andlw	15
  9283  00F580  0100               	movlb	0	; () banked
  9284  00F582  6FF9               	movwf	_segundo_u& (0+255),b
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9288  00F584  0100               	movlb	0	; () banked
  9289  00F586  39C0               	swapf	(_RtccTime+1)& (0+255),w,b
  9290  00F588  0B0F               	andlw	15
  9291  00F58A  0B0F               	andlw	15
  9292  00F58C  6E5E               	movwf	_segundo_d,c
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
  9296  00F58E  0100               	movlb	0	; () banked
  9297  00F590  51C1               	movf	(_RtccTime+2)& (0+255),w,b
  9298  00F592  0B0F               	andlw	15
  9299  00F594  0100               	movlb	0	; () banked
  9300  00F596  6FF8               	movwf	_minuto_u& (0+255),b
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9304  00F598  0100               	movlb	0	; () banked
  9305  00F59A  39C1               	swapf	(_RtccTime+2)& (0+255),w,b
  9306  00F59C  0B0F               	andlw	15
  9307  00F59E  0B0F               	andlw	15
  9308  00F5A0  0100               	movlb	0	; () banked
  9309  00F5A2  6FF7               	movwf	_minuto_d& (0+255),b
  9310                           
  9311                           ; BSR set to: 0
  9312                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
  9313  00F5A4  0100               	movlb	0	; () banked
  9314  00F5A6  51C2               	movf	(_RtccTime+3)& (0+255),w,b
  9315  00F5A8  0B0F               	andlw	15
  9316  00F5AA  0100               	movlb	0	; () banked
  9317  00F5AC  6FF4               	movwf	_hora_u& (0+255),b
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9321  00F5AE  0100               	movlb	0	; () banked
  9322  00F5B0  39C2               	swapf	(_RtccTime+3)& (0+255),w,b
  9323  00F5B2  0B0F               	andlw	15
  9324  00F5B4  0B0F               	andlw	15
  9325  00F5B6  0100               	movlb	0	; () banked
  9326  00F5B8  6FF3               	movwf	_hora_d& (0+255),b
  9327                           
  9328                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
  9329  00F5BA  0EBB               	movlw	low _RtccDate
  9330  00F5BC  6E01               	movwf	RtccReadDate@pDt,c
  9331  00F5BE  0E00               	movlw	high _RtccDate
  9332  00F5C0  6E02               	movwf	RtccReadDate@pDt+1,c
  9333  00F5C2  EC0C  F075         	call	_RtccReadDate	;wreg free
  9334                           
  9335                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
  9336  00F5C6  0100               	movlb	0	; () banked
  9337  00F5C8  51BC               	movf	(_RtccDate+1)& (0+255),w,b
  9338  00F5CA  0B0F               	andlw	15
  9339  00F5CC  0100               	movlb	0	; () banked
  9340  00F5CE  6FF2               	movwf	_fecha_u& (0+255),b
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9344  00F5D0  0100               	movlb	0	; () banked
  9345  00F5D2  39BC               	swapf	(_RtccDate+1)& (0+255),w,b
  9346  00F5D4  0B0F               	andlw	15
  9347  00F5D6  0B0F               	andlw	15
  9348  00F5D8  0100               	movlb	0	; () banked
  9349  00F5DA  6FF1               	movwf	_fecha_d& (0+255),b
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
  9353  00F5DC  0100               	movlb	0	; () banked
  9354  00F5DE  51BD               	movf	(_RtccDate+2)& (0+255),w,b
  9355  00F5E0  0B0F               	andlw	15
  9356  00F5E2  0100               	movlb	0	; () banked
  9357  00F5E4  6FF6               	movwf	_mes_u& (0+255),b
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9361  00F5E6  0100               	movlb	0	; () banked
  9362  00F5E8  39BD               	swapf	(_RtccDate+2)& (0+255),w,b
  9363  00F5EA  0B0F               	andlw	15
  9364  00F5EC  0B0F               	andlw	15
  9365  00F5EE  0100               	movlb	0	; () banked
  9366  00F5F0  6FF5               	movwf	_mes_d& (0+255),b
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
  9370  00F5F2  C0BB  F0F0         	movff	_RtccDate,_dia_semana
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
  9374  00F5F6  0100               	movlb	0	; () banked
  9375  00F5F8  51BE               	movf	(_RtccDate+3)& (0+255),w,b
  9376  00F5FA  0B0F               	andlw	15
  9377  00F5FC  0100               	movlb	0	; () banked
  9378  00F5FE  6FEF               	movwf	_anio_u& (0+255),b
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9382  00F600  0100               	movlb	0	; () banked
  9383  00F602  39BE               	swapf	(_RtccDate+3)& (0+255),w,b
  9384  00F604  0B0F               	andlw	15
  9385  00F606  0B0F               	andlw	15
  9386  00F608  0100               	movlb	0	; () banked
  9387  00F60A  6FEE               	movwf	_anio_d& (0+255),b
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
  9391  00F60C  505E               	movf	_segundo_d,w,c
  9392  00F60E  0D0A               	mullw	10
  9393  00F610  0100               	movlb	0	; () banked
  9394  00F612  51F9               	movf	_segundo_u& (0+255),w,b
  9395  00F614  24F3               	addwf	prodl,w,c
  9396  00F616  0100               	movlb	0	; () banked
  9397  00F618  6FA3               	movwf	_segundo& (0+255),b
  9398  00F61A  0100               	movlb	0	; () banked
  9399  00F61C  0E00               	movlw	0
  9400  00F61E  20F4               	addwfc	prodh,w,c
  9401  00F620  0100               	movlb	0	; () banked
  9402  00F622  6FA4               	movwf	(_segundo+1)& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
  9406  00F624  0100               	movlb	0	; () banked
  9407  00F626  51F7               	movf	_minuto_d& (0+255),w,b
  9408  00F628  0D0A               	mullw	10
  9409  00F62A  0100               	movlb	0	; () banked
  9410  00F62C  51F8               	movf	_minuto_u& (0+255),w,b
  9411  00F62E  24F3               	addwf	prodl,w,c
  9412  00F630  0100               	movlb	0	; () banked
  9413  00F632  6FE5               	movwf	_minuto& (0+255),b
  9414  00F634  0100               	movlb	0	; () banked
  9415  00F636  0E00               	movlw	0
  9416  00F638  20F4               	addwfc	prodh,w,c
  9417  00F63A  0100               	movlb	0	; () banked
  9418  00F63C  6FE6               	movwf	(_minuto+1)& (0+255),b
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
  9422  00F63E  0100               	movlb	0	; () banked
  9423  00F640  51F3               	movf	_hora_d& (0+255),w,b
  9424  00F642  0D0A               	mullw	10
  9425  00F644  0100               	movlb	0	; () banked
  9426  00F646  51F4               	movf	_hora_u& (0+255),w,b
  9427  00F648  24F3               	addwf	prodl,w,c
  9428  00F64A  0100               	movlb	0	; () banked
  9429  00F64C  6FE1               	movwf	_hora& (0+255),b
  9430  00F64E  0100               	movlb	0	; () banked
  9431  00F650  0E00               	movlw	0
  9432  00F652  20F4               	addwfc	prodh,w,c
  9433  00F654  0100               	movlb	0	; () banked
  9434  00F656  6FE2               	movwf	(_hora+1)& (0+255),b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
  9438  00F658  0100               	movlb	0	; () banked
  9439  00F65A  51F1               	movf	_fecha_d& (0+255),w,b
  9440  00F65C  0D0A               	mullw	10
  9441  00F65E  0100               	movlb	0	; () banked
  9442  00F660  51F2               	movf	_fecha_u& (0+255),w,b
  9443  00F662  24F3               	addwf	prodl,w,c
  9444  00F664  0100               	movlb	0	; () banked
  9445  00F666  6FDD               	movwf	_dia& (0+255),b
  9446  00F668  0100               	movlb	0	; () banked
  9447  00F66A  0E00               	movlw	0
  9448  00F66C  20F4               	addwfc	prodh,w,c
  9449  00F66E  0100               	movlb	0	; () banked
  9450  00F670  6FDE               	movwf	(_dia+1)& (0+255),b
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
  9454  00F672  C0F0  F0DF         	movff	_dia_semana,_diasem
  9455  00F676  0100               	movlb	0	; () banked
  9456  00F678  6BE0               	clrf	(_diasem+1)& (0+255),b
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
  9460  00F67A  0100               	movlb	0	; () banked
  9461  00F67C  51F5               	movf	_mes_d& (0+255),w,b
  9462  00F67E  0D0A               	mullw	10
  9463  00F680  0100               	movlb	0	; () banked
  9464  00F682  51F6               	movf	_mes_u& (0+255),w,b
  9465  00F684  24F3               	addwf	prodl,w,c
  9466  00F686  0100               	movlb	0	; () banked
  9467  00F688  6FE3               	movwf	_mes& (0+255),b
  9468  00F68A  0100               	movlb	0	; () banked
  9469  00F68C  0E00               	movlw	0
  9470  00F68E  20F4               	addwfc	prodh,w,c
  9471  00F690  0100               	movlb	0	; () banked
  9472  00F692  6FE4               	movwf	(_mes+1)& (0+255),b
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
  9476  00F694  0100               	movlb	0	; () banked
  9477  00F696  51EE               	movf	_anio_d& (0+255),w,b
  9478  00F698  0D0A               	mullw	10
  9479  00F69A  0100               	movlb	0	; () banked
  9480  00F69C  51EF               	movf	_anio_u& (0+255),w,b
  9481  00F69E  24F3               	addwf	prodl,w,c
  9482  00F6A0  0100               	movlb	0	; () banked
  9483  00F6A2  6FDB               	movwf	_anio& (0+255),b
  9484  00F6A4  0100               	movlb	0	; () banked
  9485  00F6A6  0E00               	movlw	0
  9486  00F6A8  20F4               	addwfc	prodh,w,c
  9487  00F6AA  0100               	movlb	0	; () banked
  9488  00F6AC  6FDC               	movwf	(_anio+1)& (0+255),b
  9489                           
  9490                           ; BSR set to: 0
  9491  00F6AE  0012               	return		;funcret
  9492  00F6B0                     __end_of_Read_RTC:
  9493                           	opt stack 0
  9494                           tosu	equ	0xFFF
  9495                           tosh	equ	0xFFE
  9496                           tosl	equ	0xFFD
  9497                           pclath	equ	0xFFA
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           indf0	equ	0xFEF
  9506                           postinc0	equ	0xFEE
  9507                           fsr0h	equ	0xFEA
  9508                           fsr0l	equ	0xFE9
  9509                           wreg	equ	0xFE8
  9510                           indf1	equ	0xFE7
  9511                           postinc1	equ	0xFE6
  9512                           postdec1	equ	0xFE5
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           fsr2h	equ	0xFDA
  9519                           fsr2l	equ	0xFD9
  9520                           status	equ	0xFD8
  9521                           
  9522 ;; *************** function _RtccReadTime *****************
  9523 ;; Defined at:
  9524 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;  pTm             2    0[COMRAM] PTR struct .
  9527 ;;		 -> RtccTime(4), 
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;  rTD0            8   10[COMRAM] struct .
  9530 ;;  rTD1            8    2[COMRAM] struct .
  9531 ;; Return value:  Size  Location     Type
  9532 ;;		None               void
  9533 ;; Registers used:
  9534 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9541 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9543 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9544 ;;Total ram usage:       18 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; This function calls:
  9547 ;;		Nothing
  9548 ;; This function is called by:
  9549 ;;		_Read_RTC
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           	psect	text54
  9554  00E5D4                     __ptext54:
  9555                           	opt stack 0
  9556  00E5D4                     _RtccReadTime:
  9557                           	opt stack 29
  9558  00E5D4  0EFC               	movlw	252
  9559  00E5D6  010F               	movlb	15	; () banked
  9560  00E5D8  173F               	andwf	63,f,b	;volatile
  9561                           
  9562                           ; BSR set to: 15
  9563  00E5DA  010F               	movlb	15	; () banked
  9564  00E5DC  813F               	bsf	63,0,b	;volatile
  9565                           
  9566                           ; BSR set to: 15
  9567  00E5DE  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9568                           
  9569                           ; BSR set to: 15
  9570  00E5E2  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9571                           
  9572                           ; BSR set to: 15
  9573  00E5E6  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9574                           
  9575                           ; BSR set to: 15
  9576  00E5EA  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9577                           
  9578                           ; BSR set to: 15
  9579  00E5EE  0EFC               	movlw	252
  9580  00E5F0  010F               	movlb	15	; () banked
  9581  00E5F2  173F               	andwf	63,f,b	;volatile
  9582  00E5F4  010F               	movlb	15	; () banked
  9583  00E5F6  813F               	bsf	63,0,b	;volatile
  9584                           
  9585                           ; BSR set to: 15
  9586  00E5F8  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9587                           
  9588                           ; BSR set to: 15
  9589  00E5FC  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9590                           
  9591                           ; BSR set to: 15
  9592  00E600  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9593                           
  9594                           ; BSR set to: 15
  9595  00E604  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9596                           
  9597                           ; BSR set to: 15
  9598  00E608  5009               	movf	RtccReadTime@rTD1+6,w,c
  9599  00E60A  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9600  00E60C  A4D8               	btfss	status,2,c
  9601  00E60E  D7E2               	goto	l3596
  9602                           
  9603                           ; BSR set to: 15
  9604                           
  9605                           ; BSR set to: 15
  9606  00E610  EE20 F003          	lfsr	2,3
  9607  00E614  5001               	movf	RtccReadTime@pTm,w,c
  9608  00E616  26D9               	addwf	fsr2l,f,c
  9609  00E618  5002               	movf	RtccReadTime@pTm+1,w,c
  9610  00E61A  22DA               	addwfc	fsr2h,f,c
  9611  00E61C  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9612  00E620  EE20 F002          	lfsr	2,2
  9613  00E624  5001               	movf	RtccReadTime@pTm,w,c
  9614  00E626  26D9               	addwf	fsr2l,f,c
  9615  00E628  5002               	movf	RtccReadTime@pTm+1,w,c
  9616  00E62A  22DA               	addwfc	fsr2h,f,c
  9617  00E62C  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9618  00E630  EE20 F001          	lfsr	2,1
  9619  00E634  5001               	movf	RtccReadTime@pTm,w,c
  9620  00E636  26D9               	addwf	fsr2l,f,c
  9621  00E638  5002               	movf	RtccReadTime@pTm+1,w,c
  9622  00E63A  22DA               	addwfc	fsr2h,f,c
  9623  00E63C  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9624                           
  9625                           ; BSR set to: 15
  9626  00E640  0012               	return		;funcret
  9627  00E642                     __end_of_RtccReadTime:
  9628                           	opt stack 0
  9629                           tosu	equ	0xFFF
  9630                           tosh	equ	0xFFE
  9631                           tosl	equ	0xFFD
  9632                           pclath	equ	0xFFA
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           indf0	equ	0xFEF
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _RtccReadDate *****************
  9658 ;; Defined at:
  9659 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  pDt             2    0[COMRAM] PTR struct .
  9662 ;;		 -> RtccDate(4), 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  rTD0            8   10[COMRAM] struct .
  9665 ;;  rTD1            8    2[COMRAM] struct .
  9666 ;; Return value:  Size  Location     Type
  9667 ;;		None               void
  9668 ;; Registers used:
  9669 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9676 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9678 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9679 ;;Total ram usage:       18 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_Read_RTC
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text55
  9689  00EA18                     __ptext55:
  9690                           	opt stack 0
  9691  00EA18                     _RtccReadDate:
  9692                           	opt stack 29
  9693  00EA18  0EFC               	movlw	252
  9694  00EA1A  010F               	movlb	15	; () banked
  9695  00EA1C  173F               	andwf	63,f,b	;volatile
  9696  00EA1E  0E03               	movlw	3
  9697  00EA20  010F               	movlb	15	; () banked
  9698  00EA22  133F               	iorwf	63,f,b	;volatile
  9699                           
  9700                           ; BSR set to: 15
  9701  00EA24  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  9702                           
  9703                           ; BSR set to: 15
  9704  00EA28  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  9705                           
  9706                           ; BSR set to: 15
  9707  00EA2C  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  9708                           
  9709                           ; BSR set to: 15
  9710  00EA30  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  9711                           
  9712                           ; BSR set to: 15
  9713  00EA34  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  9714                           
  9715                           ; BSR set to: 15
  9716  00EA38  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  9717  00EA3C  0EFC               	movlw	252
  9718  00EA3E  010F               	movlb	15	; () banked
  9719  00EA40  173F               	andwf	63,f,b	;volatile
  9720  00EA42  0E03               	movlw	3
  9721  00EA44  010F               	movlb	15	; () banked
  9722  00EA46  133F               	iorwf	63,f,b	;volatile
  9723                           
  9724                           ; BSR set to: 15
  9725  00EA48  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  9726                           
  9727                           ; BSR set to: 15
  9728  00EA4C  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  9729                           
  9730                           ; BSR set to: 15
  9731  00EA50  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  9732                           
  9733                           ; BSR set to: 15
  9734  00EA54  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  9735                           
  9736                           ; BSR set to: 15
  9737  00EA58  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  9738                           
  9739                           ; BSR set to: 15
  9740  00EA5C  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  9741  00EA60  5005               	movf	RtccReadDate@rTD1+2,w,c
  9742  00EA62  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  9743  00EA64  A4D8               	btfss	status,2,c
  9744  00EA66  D7D8               	goto	l3622
  9745                           
  9746                           ; BSR set to: 15
  9747                           
  9748                           ; BSR set to: 15
  9749  00EA68  EE20 F001          	lfsr	2,1
  9750  00EA6C  5001               	movf	RtccReadDate@pDt,w,c
  9751  00EA6E  26D9               	addwf	fsr2l,f,c
  9752  00EA70  5002               	movf	RtccReadDate@pDt+1,w,c
  9753  00EA72  22DA               	addwfc	fsr2h,f,c
  9754  00EA74  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  9755  00EA78  EE20 F002          	lfsr	2,2
  9756  00EA7C  5001               	movf	RtccReadDate@pDt,w,c
  9757  00EA7E  26D9               	addwf	fsr2l,f,c
  9758  00EA80  5002               	movf	RtccReadDate@pDt+1,w,c
  9759  00EA82  22DA               	addwfc	fsr2h,f,c
  9760  00EA84  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  9761                           
  9762                           ; BSR set to: 15
  9763  00EA88  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  9764  00EA8C  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  9765  00EA90  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  9766                           
  9767                           ; BSR set to: 15
  9768  00EA94  EE20 F003          	lfsr	2,3
  9769  00EA98  5001               	movf	RtccReadDate@pDt,w,c
  9770  00EA9A  26D9               	addwf	fsr2l,f,c
  9771  00EA9C  5002               	movf	RtccReadDate@pDt+1,w,c
  9772  00EA9E  22DA               	addwfc	fsr2h,f,c
  9773  00EAA0  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  9774                           
  9775                           ; BSR set to: 15
  9776  00EAA4  0012               	return		;funcret
  9777  00EAA6                     __end_of_RtccReadDate:
  9778                           	opt stack 0
  9779                           tosu	equ	0xFFF
  9780                           tosh	equ	0xFFE
  9781                           tosl	equ	0xFFD
  9782                           pclath	equ	0xFFA
  9783                           tblptru	equ	0xFF8
  9784                           tblptrh	equ	0xFF7
  9785                           tblptrl	equ	0xFF6
  9786                           tablat	equ	0xFF5
  9787                           prodh	equ	0xFF4
  9788                           prodl	equ	0xFF3
  9789                           intcon	equ	0xFF2
  9790                           indf0	equ	0xFEF
  9791                           postinc0	equ	0xFEE
  9792                           fsr0h	equ	0xFEA
  9793                           fsr0l	equ	0xFE9
  9794                           wreg	equ	0xFE8
  9795                           indf1	equ	0xFE7
  9796                           postinc1	equ	0xFE6
  9797                           postdec1	equ	0xFE5
  9798                           fsr1h	equ	0xFE2
  9799                           fsr1l	equ	0xFE1
  9800                           indf2	equ	0xFDF
  9801                           postinc2	equ	0xFDE
  9802                           postdec2	equ	0xFDD
  9803                           fsr2h	equ	0xFDA
  9804                           fsr2l	equ	0xFD9
  9805                           status	equ	0xFD8
  9806                           tosu	equ	0xFFF
  9807                           tosh	equ	0xFFE
  9808                           tosl	equ	0xFFD
  9809                           pclath	equ	0xFFA
  9810                           tblptru	equ	0xFF8
  9811                           tblptrh	equ	0xFF7
  9812                           tblptrl	equ	0xFF6
  9813                           tablat	equ	0xFF5
  9814                           prodh	equ	0xFF4
  9815                           prodl	equ	0xFF3
  9816                           intcon	equ	0xFF2
  9817                           indf0	equ	0xFEF
  9818                           postinc0	equ	0xFEE
  9819                           fsr0h	equ	0xFEA
  9820                           fsr0l	equ	0xFE9
  9821                           wreg	equ	0xFE8
  9822                           indf1	equ	0xFE7
  9823                           postinc1	equ	0xFE6
  9824                           postdec1	equ	0xFE5
  9825                           fsr1h	equ	0xFE2
  9826                           fsr1l	equ	0xFE1
  9827                           indf2	equ	0xFDF
  9828                           postinc2	equ	0xFDE
  9829                           postdec2	equ	0xFDD
  9830                           fsr2h	equ	0xFDA
  9831                           fsr2l	equ	0xFD9
  9832                           status	equ	0xFD8
  9833                           
  9834                           	psect	text56
  9835  000000                     __ptext56:
  9836                           	opt stack 0
  9837                           tosu	equ	0xFFF
  9838                           tosh	equ	0xFFE
  9839                           tosl	equ	0xFFD
  9840                           pclath	equ	0xFFA
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           intcon	equ	0xFF2
  9848                           indf0	equ	0xFEF
  9849                           postinc0	equ	0xFEE
  9850                           fsr0h	equ	0xFEA
  9851                           fsr0l	equ	0xFE9
  9852                           wreg	equ	0xFE8
  9853                           indf1	equ	0xFE7
  9854                           postinc1	equ	0xFE6
  9855                           postdec1	equ	0xFE5
  9856                           fsr1h	equ	0xFE2
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865                           	psect	rparam
  9866  0000                     tosu	equ	0xFFF
  9867                           tosh	equ	0xFFE
  9868                           tosl	equ	0xFFD
  9869                           pclath	equ	0xFFA
  9870                           tblptru	equ	0xFF8
  9871                           tblptrh	equ	0xFF7
  9872                           tblptrl	equ	0xFF6
  9873                           tablat	equ	0xFF5
  9874                           prodh	equ	0xFF4
  9875                           prodl	equ	0xFF3
  9876                           intcon	equ	0xFF2
  9877                           indf0	equ	0xFEF
  9878                           postinc0	equ	0xFEE
  9879                           fsr0h	equ	0xFEA
  9880                           fsr0l	equ	0xFE9
  9881                           wreg	equ	0xFE8
  9882                           indf1	equ	0xFE7
  9883                           postinc1	equ	0xFE6
  9884                           postdec1	equ	0xFE5
  9885                           fsr1h	equ	0xFE2
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           fsr2h	equ	0xFDA
  9891                           fsr2l	equ	0xFD9
  9892                           status	equ	0xFD8


Data Sizes:
    Strings     294
    Constant    14
    Data        24
    BSS         129
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      95
    BANK0           160      0     154
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_31(CODE[5]), STR_30(CODE[5]), 
		 -> STR_27(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    actualizar_password@confirmar	PTR int  size(2) Largest target is 2
		 -> main@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> main@verifica(COMRAM[2]), 

    convertir_a_int_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_hora@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_minutos@valor(COMRAM[2]), cambiar_hora@valor(COMRAM[2]), 

    guardar_elemento_hora@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), 

    guardar_elemento_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    convertir_a_int_fecha@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento_fecha@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), tamanio_anio(BANK0[2]), 

    guardar_elemento_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), mostrar_guardar_nuevo_password(), 
		 -> mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), mostrar_guardar_nuevo_password(), 
		 -> mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 3
		 -> STR_22(CODE[3]), STR_18(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), STR_38(CODE[2]), STR_37(CODE[2]), STR_36(CODE[2]), 
		 -> STR_32(CODE[2]), imprimir_tecla@aux(COMRAM[20]), STR_29(CODE[26]), STR_28(CODE[23]), 
		 -> STR_26(CODE[26]), STR_25(CODE[20]), STR_24(CODE[26]), STR_23(CODE[27]), 
		 -> STR_21(CODE[19]), STR_20(CODE[22]), STR_19(CODE[21]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[19]), STR_14(CODE[18]), STR_12(CODE[8]), 
		 -> password(BANK0[7]), STR_6(CODE[11]), STR_5(CODE[17]), ingresar_password@clear(COMRAM[16]), 
		 -> STR_4(CODE[4]), STR_3(CODE[3]), buffer2(BANK0[20]), 

    main@puntero_funcion	PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), mostrar_guardar_nuevo_password(), 
		 -> mostrar_guardar_temporal_password(), 

    mostrar_menu@titulo_menu	PTR unsigned char  size(2) Largest target is 27
		 -> STR_28(CODE[23]), STR_25(CODE[20]), STR_23(CODE[27]), STR_21(CODE[19]), 
		 -> STR_20(CODE[22]), STR_17(CODE[18]), STR_16(CODE[18]), STR_15(CODE[19]), 

    caratula$523	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 8
		 -> STR_12(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _mostrar_menu->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _cambiar_minutos->_guardar_elemento_hora
    _cambiar_mes->_guardar_elemento_fecha
    _cambiar_hora->_guardar_elemento_hora
    _guardar_elemento_hora->_sprintf
    _convertir_a_int_hora->_atoi
    _cambiar_dia->_guardar_elemento_fecha
    _cambiar_anio->_guardar_elemento_fecha
    _guardar_elemento_fecha->_sprintf
    _convertir_a_int_fecha->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  281711
                                             72 COMRAM    10    10      0
                           _Read_RTC
                              _Setup
                _actualizar_password
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                       _mostrar_menu
                  _restaurar_comando
                            _sprintf
                    _validar_comando
                  _verficar_password
 ---------------------------------------------------------------------------------
 (1) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     668
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _mostrar_menu                                         2     0      2    7241
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4  240055
                                             65 COMRAM     7     3      4
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6  117936
                                             59 COMRAM     6     0      6
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   11014
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   11014
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   11014
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3294
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3272
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   10992
                                             56 COMRAM     1     1      0
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    7752
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      6     6      0   13822
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          6     6      0   14078
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         6     6      0   13822
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                   _inicializar_hora
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (4) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_hora                                7     3      4    3584
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_hora                                 4     0      4    1139
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          6     6      0   14078
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                  _inicializar_fecha
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (4) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         6     6      0   14078
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_fecha                               7     3      4    3712
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_fecha                                4     0      4    1267
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    7583
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2   10659
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    4478
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2897
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    2229
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _actualizar_password                                 12     9      3     329
                                              0 COMRAM    12     9      3
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _actualizar_password
     _restaurar_comando
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _cambiar_anio *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_dia *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_fecha
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_hora *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_hora
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_mes *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_minutos *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _confirmar_actualizar_password *
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _guardar_tecla_presionada *
       _cambiar_anio *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_dia *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_fecha
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_hora *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_hora
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_mes *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_minutos *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _confirmar_actualizar_password *
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _mostrar_menu
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _restaurar_comando
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _validar_comando
   _verficar_password

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9A       5       96.3%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     52      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9       6        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 11 20:20:26 2016

                         _verficar_password E810                                           _a 0091  
                                         _b 0095                                           _c 0097  
                                         _i 009B                                           _j 009D  
                                         _k 009F                              ?_lcd_send_byte 0003  
             __size_of_convertir_a_int_hora 001E                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                ??_mostrar_guardar_password 0039                                         l330 E6B0  
                                       l510 EC80                                         l342 E98C  
                                       l503 ED36                                         l265 E2D2  
                                       l361 EB20                                         l353 EACE  
                                       l266 E2D4                                         l362 EB1C  
                                       l354 EACA                                         l370 F3CA  
                                       l517 EEB6                                         l357 EAF6  
                                       l373 F3F4                                         l358 EAF2  
                                       l382 F424                                         l374 F3F0  
                                       l377 F40E                                         l369 F3CE  
                                       l378 F40A                                         l736 EF82  
                                       l729 EDEC                                         l772 E3B6  
                                       l764 E3FC                                         l838 FB5E  
                                       l791 E886                                         l768 E442  
                      actualizar_password@j 0009                                         _dia 00DD  
                                       _day 00C3                                         _key 0057  
                                       _mes 00E3                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                                 lcd_gotoxy@x 0006  
                               lcd_gotoxy@y 0005           __end_of_guardar_password_temporal E444  
                                      l1120 F04E                                        l3000 FAFC  
                                      l3002 FB06                                        l3020 FB64  
                                      l3012 FB34                                        l3014 FB3C  
                                      l3006 FB12                                        l3030 FBE0  
                                      l3122 F314                                        l3114 F2FC  
                                      l3026 FBB8                                        l4002 FDF0  
                                      l1507 E51A                                        l3220 EB7E  
                                      l3212 EB5E                                        l3028 FBC4  
                                      l3052 EFE0                                        l3036 EF86  
                                      l4004 FE00                                        l3118 F308  
                                      l3070 F252                                        l3230 EBA4  
                                      l3222 EB86                                        l3206 EB4C  
                                      l3054 F016                                        l3038 EF8C  
                                      l3302 E3CA                                        l4030 FEA8  
                                      l3144 F74C                                        l3080 F290  
                                      l3056 F01C                                        l3048 EFCC  
                                      l4016 FE44                                        l3154 F77C  
                                      l3138 F712                                        l3218 EB74  
                                      l3234 EBB0                                        l3322 E674  
                                      l3314 E384                                        l3402 ED0A  
                                      l3148 F760                                        l3076 F27C  
                                      l3308 E410                                        l3190 F7DE  
                                      l3086 F2AC                                        l3238 EBC0  
                                      l3430 EC54                                        l3414 EBE6  
                                      l3422 EC1C                                        l3406 ED1E  
                                      l3502 EED8                                        l3510 EF0E  
                                      l3520 EF56                                        l1497 E5CA  
                                      l3194 F7EA                                        l3186 F7D2  
                                      l3442 EE0E                                        l3434 EC68  
                                      l3540 E8B6                                        l3460 EE8A  
                                      l3452 EE4C                                        l3524 EF6A  
                                      l3622 EA18                                        l3390 ECCA  
                                      l3376 E0B8                                        l3536 E8AE  
                                      l2904 E58E                                        l3704 F136  
                                      l3464 EE9E                                        l3384 EC9C  
                                      l3472 ED52                                        l2826 E0A6  
                                      l3554 E8DA                                        l3546 E8C6  
                                      l2906 E598                                        l3570 E9D4  
                                      l3714 F162                                        l3298 E362  
                                      l3490 EDC0                                        l2852 E1A0  
                                      l2860 E490                                        l2916 E5BE  
                                      l2908 E5A0                                        l2932 E50E  
                                      l2924 E4E6                                        l3572 E9E4  
                                      l3564 E9A2                                        l3708 F14A  
                                      l3902 F52A                                        l2854 E1A6  
                                      l2862 E49C                                        l2870 E4C0  
                                      l2942 E550                                        l2926 E4F0  
                                      l3574 E9F4                                        l3742 F1FA  
                                      l3734 F1CE                                        l3494 EDD4  
                                      l3478 ED80                                        l2864 E4A8  
                                      l2928 E4F8                                        l2960 F9DE  
                                      l2952 F9B0                                        l3568 E9CE  
                                      l2866 E4B4                                        l2938 E526  
                                      l2954 F9BE                                        l2946 F996  
                                      l3674 F116                                        l3738 F1E2  
                                      l3596 E5D4                                        l3908 F54E  
                                      l2972 FA60                                        l2964 F9FC  
                                      l3676 F120                                        l3860 E978  
                                      l3852 E922                                        l3924 FC2C  
                                      l3916 FC02                                        l2958 F9C8  
                                      l3846 F42C                                        l3870 E85C  
                                      l2888 E18A                                        l2992 FAD4  
                                      l2984 FAA4                                        l2976 FA66  
                                      l3856 E962                                        l3872 E862  
                                      l3952 FCD0                                        l3890 F4D2  
                                      l2978 FA88                                        l3858 E968  
                                      l3874 E872                                        l3866 E82A  
                                      l3938 FC7C                                        l3884 F48E  
                                      l2996 FAD8                                        l2988 FAB0  
                                      l3964 FD0E                                        l3958 FCEE  
                                      l3888 F4CC                                        l3984 FD82  
                                      l3898 F516                                        l3978 FD62  
                                      STR_1 FFA2                                        STR_2 FFB1  
                                      STR_3 FFE5                                        STR_4 FFD8  
                                      STR_5 FF91                                        STR_6 FFC0  
                                      STR_7 FFD3                                        STR_8 FFD3  
                                      STR_9 FFD3                             _guardar_comando E642  
                         ?_inicializar_hora 0001                                        u3100 F50A  
                                      u2410 ECDA                                        u1700 E7F4  
                                      u1640 E7A6                                        u2520 EE62  
                                      u2610 EF24                                        u3307 ED24  
                                      u1660 E7BE                                        u1820 E546  
                                      u2460 EC2C                                        u3317 EC6E  
                                      u1718 E7F6                                        u1830 E570  
                                      u3327 EEA4                                        u1680 E7D8  
                                      u2560 ED90                                        u3337 F1E8  
                                      u1658 E7A8                                        u3347 E0BA  
                                      u1827 E53C                                        u3357 E0A8  
                                      u1837 E566                                        u3277 F432  
                                      u1678 E7C0                                        u3287 EDDA  
                                      u3297 EF70                                        u1698 E7DA  
                                      u2738 EAB6                                        u2870 F19C  
                                      u2768 EADE                                        u2948 F3DA  
                                      u2798 EB08                  guardar_elemento_hora@array 0024  
                          ?_lcd_send_nibble 0001                  guardar_elemento_hora@tecla 002A  
                                      _anio 00DB                                        _flag 02F8  
                                      _atoi EF84                          ??_inicializar_hora 0001  
                                      _main FBF0                                        _hora 00E1  
                                      _hour 00C6                                        _year 00CF  
                                      fsr0h 000FEA                                        indf0 000FEF  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      indf1 000FE7                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                             __CFG_T1DIG$ON 000000                                        prodh 000FF4  
                                      prodl 000FF3                                        start 0000  
                             __CFG_IESO$OFF 000000                            RtccReadDate@rTD0 000B  
                          RtccReadDate@rTD1 0003                   __end_of_verficar_password E888  
                              ___param_bank 000010                             RtccReadTime@pTm 0001  
                             cambiar_anio@i 002D                        __size_of_cambiar_dia 00B6  
                             cambiar_hora@i 002D                        __size_of_cambiar_mes 00B6  
                         _inicializar_fecha E288                                 _Delay1KTCYx E0B6  
                             __CFG_PLLDIV$1 000000                      ?_convertir_a_int_fecha 000E  
                                     ?_atoi 0007                                       ?_main 0001  
                           __end_of___awdiv EBCC                          ?_inicializar_fecha 0001  
                                     STR_10 FFD3                                       STR_11 FFE8  
                                     STR_12 FFCB                                       STR_20 FF1D  
                                     STR_13 FFDF                                       STR_21 FF47  
                                     STR_14 FEF4                                       STR_30 FFD3  
                                     STR_22 FFDC                                       STR_31 FFD3  
                                     STR_15 FF5A                                       STR_23 FED1  
                                     STR_40 FFD3                                       STR_32 FFED  
                                     STR_16 FF7F                                       STR_24 FEEC  
                                     STR_33 FFEF                                       STR_17 FF6D  
                                     STR_25 FF33                                       STR_26 FEEC  
                                     STR_34 FFF1                                       STR_18 FFE2  
                                     STR_19 FEF1                                       STR_27 FFD3  
                                     STR_35 FFF3                                       STR_36 FFED  
                                     STR_28 FF06                                       STR_29 FEEC  
                                     STR_37 FFEB                                       STR_38 FFF5  
                                     STR_39 FFD3                       __size_of_Delay100TCYx 0012  
                           ___awdiv@divisor 0003                             __end_of___lwdiv E5D4  
                           __end_of___lwmod E524                           _restaurar_comando E0F8  
                          ?_validar_comando 0001                             ___awdiv@counter 0005  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94             ??_confirmar_actualizar_password 0039  
                             ?_leer_teclado 0042                          ?_restaurar_comando 0001  
                            __CFG_FCMEN$OFF 000000                                       _Setup E444  
                       ??_inicializar_fecha 0001                              _ocultar_teclas 00A1  
                           __end_of_dpowers FECD                                       _mes_d 00F5  
                                     _mes_u 00F6                             __end_of_isdigit E194  
                                     _month 00CC                                       atoi@a 000C  
                                     atoi@s 0007                              __pbitbssCOMRAM 02F8  
    __end_of_mostrar_guardar_nuevo_password E288     __size_of_mostrar_guardar_nuevo_password 002C  
            _mostrar_guardar_nuevo_password E25C                                       pclath 000FFA  
                                     tablat 000FF5                         ??_restaurar_comando 0001  
                              main@verifica 004D                                lcd_putrs@ptr 0009  
                                     status 000FD8                             __end_of_sprintf FBF0  
                         validar_password@i 0003                     __CFG_DSWDTOSC$INTOSCREF 000000  
                           __initialization E2E8                                _Delay100TCYx E0A4  
                 __end_of_inicializar_fecha E2B6                                __end_of_atoi F058  
                              __end_of_main FEC2                             ??_lcd_send_byte 0004  
                          RtccReadTime@rTD0 000B                            RtccReadTime@rTD1 0003  
                          __end_of_Read_RTC F6B0                    _guardar_current_password E3B8  
                 __size_of_ingresar_comando 000A                   __end_of_restaurar_comando E116  
                         cambiar_anio@tecla 002C                       __size_of_cambiar_anio 00CA  
                         cambiar_anio@valor 002F                       __size_of_cambiar_hora 00B6  
                                    ??_atoi 0009                                      ??_main 0049  
                             __activetblptr 000002                              ??_leer_teclado 0046  
                   __end_of_guardar_comando E6B2                            __end_of_RtccWrOn E0A4  
                                    ?_Setup 0001                               main@confirmar 0049  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _EECON2 000FA7                                      _ANCON0 000F48  
                                    _ANCON1 000F49                            ___awdiv@dividend 0001  
                            __CFG_WDTEN$OFF 000000                            RtccWriteDate@pDt 0001  
                                    _RTCCFG 000F3F                              __CFG_WPCFG$OFF 000000  
    mostrar_guardar_temporal_password@tecla 0039                            __end_of_caratula F12E  
                      cambiar_minutos@tecla 002C                              __CFG_WPDIS$OFF 000000  
                      cambiar_minutos@valor 002F                              __CFG_XINST$OFF 000000  
                __size_of_verficar_password 0078                                _cambiar_anio EDEE  
                              _cambiar_hora ED38                            __end_of_lcd_init E908  
            guardar_password_temporal@valor 0003                            __end_of_lcd_putc E4D8  
                         ?_validar_password 0001                                      ___wmul E1DC  
                                 ??___awdiv 0005                              __CFG_STVREN$ON 000000  
                                    _diasem 00DF                                      _anio_d 00EE  
                                    _anio_u 00EF                                   ??___lwdiv 0005  
                                 ??___lwmod 000C                          ??_validar_password 0001  
                                    _hora_d 00F3                                      _hora_u 00F4  
                                    clear_0 E2EE                                      clear_1 E2FC  
                          ___awdiv@quotient 0007                                      _minuto 00E5  
          __end_of_mostrar_guardar_password E25C                           cambiar_hora@tecla 002C  
                     __end_of_RtccWriteDate F7F6                           cambiar_hora@valor 002F  
                     __end_of_RtccWriteTime F320                            RtccWriteTime@pTm 0001  
                   ??_guardar_elemento_hora 0028                    __size_of_cambiar_minutos 00CC  
                  _guardar_tecla_presionada EAA6                                   ??_isdigit 0001  
                          ??_imprimir_tecla 0024   __end_of_mostrar_guardar_temporal_password E230  
__size_of_mostrar_guardar_temporal_password 002C         ??_mostrar_guardar_temporal_password 0039  
        ?_mostrar_guardar_temporal_password 0001           _mostrar_guardar_temporal_password E204  
                              __mediumconst FEC2                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                                 ??_sprintf 0017                                  __accesstop 0060  
                   __end_of__initialization E322                          __size_of_Write_RTC 0196  
                             ___rparam_used 000001                                _caratula$523 0026  
                            __pcstackCOMRAM 0001                               __end_of_Setup E48C  
                __size_of_inicializar_fecha 002E                                __pidataBANK0 E0E0  
               __end_of_actualizar_password F56E                             __CFG_DSWDTPS$G2 000000  
                __size_of_restaurar_comando 001E                            leer_teclado@doit 0044  
                       leer_teclado@ocultar 0042                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                   actualizar_password@j_1605 000B  
                                   ??_Setup 000E                           lcd_gotoxy@address 0007  
                        __size_of_lcd_putrs 0054                __end_of_convertir_a_int_hora E152  
                              sprintf@width 0021                                  __pbssBANK0 0060  
                                 ?_Read_RTC 0001                             _tamanio_comando 00A5  
                                _dia_semana 00F0                   RtccWriteTime@tempHourWDay 000A  
                                __pnvCOMRAM 005E                             _tamanio_minutos 00D4  
                      __end_of_leer_teclado F43E                                   ?_RtccWrOn 0001  
                            lcd_send_byte@n 0003                     ??_convertir_a_int_fecha 0012  
                                   ?___wmul 0001                               ?_RtccReadDate 0001  
                 __size_of_inicializar_hora 0020                               ?_RtccReadTime 0001  
                   mostrar_menu@titulo_menu 000B                            _ingresar_comando E07A  
                              ?_Delay1KTCYx 0001                          guardar_comando@aux 0026  
                         __end_of_Write_RTC F98C                                  _lcd_comand E084  
                                 ?_caratula 0024                    actualizar_password@valor 0003  
                                _lcd_gotoxy E194                                     _RTCVALH 000F99  
                                   _RTCVALL 000F98                                   ?_lcd_init 0001  
                         ??_cambiar_minutos 002B                                   ?_lcd_putc 0001  
                ?_guardar_password_temporal 0001                                  ??_Read_RTC 0013  
         __size_of_mostrar_guardar_password 002C                   ?_mostrar_guardar_password 0001  
                ??_guardar_current_password 0001                                     __Hparam 0000  
                             ??_cambiar_dia 002B                               ??_cambiar_mes 002B  
                                   __Lparam 0000                    __size_of_lcd_send_nibble 0076  
                                ??_RtccWrOn 0001                        guardar_comando@tecla 003A  
                            ??_RtccReadDate 0003                                  _autorizado 0093  
                            ??_RtccReadTime 0003                                     ___awdiv EB36  
                         __end_of_lcd_putrs E578                             __size_of___wmul 0028  
                                   ___lwdiv E578                                     ___lwmod E4D8  
                               _RtccTimeVal 008D                                     __pcinit E2E8  
                                   _fecha_d 00F1                                     _fecha_u 00F2  
                                   __ramtop 0F00               mostrar_guardar_password@tecla 0039  
                                   __ptext0 FBF0                                     __ptext1 E810  
                                   __ptext2 E908                                     __ptext3 E0C8  
                                   __ptext4 F320                                     __ptext5 EAA6  
                                   __ptext6 E07A                                     __ptext7 E1B8  
                                   __ptext8 E25C                                     __ptext9 E230  
                                   _buffer2 00A7                                     _comando 00D6  
                                 _T1CONbits 000FCD                                     _dpowers FEC3  
                                   _isdigit E172                              main@validacion 0051  
                                ??_caratula 0026                                     _minutes 00C9  
                                   _segundo 00A3                                     _sprintf F98C  
                  ??_guardar_nuevo_password 0001                                  ??_lcd_init 0005  
                                ??_lcd_putc 0008                        end_of_initialization E322  
                convertir_a_int_fecha@array 000E                    __size_of_validar_comando 0086  
                  ??_guardar_elemento_fecha 0028                  convertir_a_int_fecha@valor 0010  
                      lcd_send_byte@address 0004                               __Lmediumconst FEC2  
                             ?_mostrar_menu 000B                                     postdec1 000FE5  
                                   postdec2 000FDD                  ??_guardar_tecla_presionada 0042  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                        _tamanio_new_password 0053  
                     __end_of_lcd_send_byte E2E8                        _convertir_a_int_hora E134  
                       __end_of_cambiar_dia ED38                         __end_of_cambiar_mes EC82  
                                 _PORTAbits 000F80                                   _PORTCbits 000F82  
                          __CFG_DSBOREN$OFF 000000                                 ?_lcd_comand 0001  
            __size_of_guardar_elemento_hora 0074                            __CFG_CPUDIV$OSC1 000000  
             __end_of_guardar_elemento_hora E79A                          ingresar_password@i 001E  
                                 _TRISBbits 000F93                                 ?_lcd_gotoxy 0005  
                 __size_of_validar_password 008A                   convertir_a_int_hora@array 000E  
                 convertir_a_int_hora@valor 0010                             _LCD_INIT_STRING FECD  
                       main@puntero_funcion 004F                            validar_comando@i 0008  
       mostrar_guardar_nuevo_password@tecla 0039                       __size_of_leer_teclado 011E  
                          _current_password 0078                              ??_mostrar_menu 000D  
                          __CFG_IOL1WAY$OFF 000000                   RtccWriteDate@tempDayMonth 000A  
                       __CFG_MSSP7B_EN$MSK7 000000                                cambiar_dia@i 002D  
                             leer_teclado@i 0047                                cambiar_mes@i 002D  
                          Delay100TCYx@unit 0001                            _inicializar_hora E152  
                     ?_convertir_a_int_hora 000E                              __end_of___wmul E204  
                 RtccWriteDate@tempHourWDay 000C                           ??_lcd_send_nibble 0001  
                      __size_of_Delay1KTCYx 0012                            __CFG_DSWDTEN$OFF 000000  
                          cambiar_dia@tecla 002C                            cambiar_dia@valor 002F  
                       start_initialization E2E8                          main@ocultar_teclas 004B  
                              _leer_teclado F320                        __end_of_RtccReadDate EAA6  
                      __end_of_RtccReadTime E642             __size_of_guardar_nuevo_password 0046  
                  __end_of_ingresar_comando E084             __size_of_guardar_elemento_fecha 0074  
                      RtccWriteTime@wasAlrm 0006                        RtccWriteTime@wasWrEn 0007  
          __end_of_guardar_current_password E3FE               guardar_current_password@valor 0003  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                    __size_of_RtccWriteTime 010C                           __size_of_Read_RTC 0142  
                         ??_validar_comando 0005                                 _cambiar_dia EC82  
                       __size_of_lcd_comand 000E                                 _cambiar_mes EBCC  
                          cambiar_mes@tecla 002C                         __size_of_lcd_gotoxy 0024  
                          cambiar_mes@valor 002F                                    ??___wmul 0005  
                               __pdataBANK0 00D6                           __size_of_RtccWrOn 0012  
                           RtccWriteTime@di 0003                            __CFG_LPT1OSC$OFF 000000  
            __size_of_convertir_a_int_fecha 001E               __end_of_convertir_a_int_fecha E134  
                           _cambiar_minutos EEB8                                 _ALRMCFGbits 000F91  
                   __end_of_LCD_INIT_STRING FED1                                 __pbssCOMRAM 0053  
              __size_of_actualizar_password 0130                                   _Write_RTC F7F6  
                          cambiar_minutos@i 002D                                _isdigit$2610 0002  
                         __size_of_caratula 00D6                             Delay1KTCYx@unit 0001  
               ??_guardar_password_temporal 0001                    __size_of_guardar_comando 0070  
                         __size_of_lcd_init 0080       __end_of_confirmar_actualizar_password E1DC  
    __size_of_confirmar_actualizar_password 0024               _confirmar_actualizar_password E1B8  
                               sprintf@flag 001D                           __size_of_lcd_putc 004C  
                               sprintf@prec 0020                     __size_of_imprimir_tecla 0046  
                                 __pnvBANK0 00EE                            _tamanio_password 0055  
                          ___lwdiv@dividend 0001                          verficar_password@i 0005  
                             ?_Delay100TCYx 0001            __end_of_guardar_tecla_presionada EB36  
                    ??_convertir_a_int_hora 0012                               __pmediumconst FEC2  
                                  ?___awdiv 0001                      _guardar_nuevo_password E372  
                                  ?___lwdiv 0001                                    ?___lwmod 0008  
                                 _encendida 0099                      _guardar_elemento_fecha E6B2  
                   RtccWriteTime@tempMinSec 0008                 guardar_nuevo_password@valor 0003  
                                 _lcd_putrs E524                        __end_of_mostrar_menu E0E0  
                             _RtccWriteDate F6B0                               _RtccWriteTime F214  
                                  ?_isdigit 0001                        __CFG_RTCOSC$T1OSCREF 000000  
                          _validar_password E98E                              __size_of_Setup 0048  
                                ?_Write_RTC 0001                            ___lwdiv@quotient 0005  
                                  ?_sprintf 000D                           _ingresar_password F12E  
                          _RtccAlrmTimeDate 0060                              ___wmul@product 0005  
                                  _LATAbits 000F89                                    _LATBbits 000F8A  
                        ?_ingresar_password 0001                                    _PIE3bits 000FA3  
                                 _segundo_d 005E                              ??_Delay100TCYx 0001  
                                 _segundo_u 00F9                               ?_cambiar_anio 0001  
                             ?_cambiar_hora 0001                     __end_of_cambiar_minutos EF84  
                              _new_password 007F                            __CFG_WDTPS$32768 000000  
                       ??_ingresar_password 000B                          RtccWriteDate@wasOn 0005  
                 guardar_tecla_presionada@i 003E                   _guardar_password_temporal E3FE  
                  validar_comando@candidato 0001                          _Rtcc_read_TimeDate 0070  
                            ?_RtccWriteDate 0001                                  ?_lcd_putrs 0009  
                         ___wmul@multiplier 0001                              ?_RtccWriteTime 0001  
         __size_of_guardar_current_password 0046                              caratula@titulo 0024  
        confirmar_actualizar_password@tecla 0039                   ?_guardar_current_password 0001  
                                 lcd_init@i 0005                       __size_of_RtccReadDate 008E  
                              ??_lcd_comand 0005                                   lcd_putc@c 0008  
                     __size_of_RtccReadTime 006E                         imprimir_tecla@tecla 0038  
                              ??_lcd_gotoxy 0006                   __end_of_ingresar_password F214  
                  _mostrar_guardar_password E230                    __end_of_inicializar_hora E172  
                                 copy_data0 E316                                    _Read_RTC F56E  
                              _tamanio_anio 00D2                                _tamanio_hora 005A  
                            ??_cambiar_anio 002B                             _lcd_send_nibble E79A  
                                  __Hrparam 0000                              ??_cambiar_hora 002B  
                                  _RtccDate 00BB              ?_confirmar_actualizar_password 0001  
                                  __Lrparam 0000                           ??_guardar_comando 0024  
                                  _RtccTime 00BF                                    _RtccWrOn E092  
                        __end_of_lcd_comand E092                          __end_of_lcd_gotoxy E1B8  
             guardar_tecla_presionada@letra 003C                                _RtccReadDate EA18  
                          __size_of___awdiv 0096                                _RtccReadTime E5D4  
                          __size_of___lwdiv 005C                         ingresar_comando@key 003B  
                          __size_of___lwmod 004C            ??_mostrar_guardar_nuevo_password 0039  
           ?_mostrar_guardar_nuevo_password 0001                                _RtccTimeDate 0068  
                                sprintf@val 001E                                    _activada 00D9  
                                  _caratula F058                            __size_of_isdigit 0022  
                           ___lwdiv@divisor 0003                                 ??_Write_RTC 000E  
                           ___lwdiv@counter 0007           __size_of_guardar_tecla_presionada 0090  
                                  __ptext10 ED38                                    __ptext11 EEB8  
                                  __ptext20 E32C                                    __ptext12 EC82  
                                  __ptext21 E152                                    __ptext13 EBCC  
                                  __ptext30 F058                                    __ptext22 E726  
                                  __ptext14 EDEE                                    __ptext31 F98C  
                                  __ptext23 E134                                    __ptext15 E204  
                                  __ptext40 E0F8                                    __ptext32 E172  
                                  __ptext24 E288                                    __ptext16 E3FE  
                                  __ptext41 E444                                    __ptext33 E1DC  
                                  __ptext25 E6B2                                    __ptext17 E3B8  
                                  __ptext50 F214                                    __ptext42 E888  
                                  __ptext34 E4D8                                    __ptext26 E116  
                                  __ptext18 E372                                    __ptext51 F6B0  
                                  __ptext43 E0B6                                    __ptext35 E578  
                                  __ptext27 EF84                                    __ptext19 E642  
                                  __ptext52 E092                                    __ptext44 E084  
                                  __ptext36 E524                                    __ptext28 F12E  
                                  __ptext53 F56E                                    __ptext45 E2B6  
                                  __ptext37 E48C                                    __ptext29 E98E  
                                  __ptext54 E5D4                                    __ptext46 E79A  
                                  __ptext38 E194                                    __ptext55 EA18  
                                  __ptext47 E0A4                                    __ptext39 F43E  
                                  __ptext56 0000                                    __ptext48 F7F6  
                                  __ptext49 EB36                   ?_guardar_tecla_presionada 003C  
                           _validar_comando E908                       _guardar_elemento_hora E726  
                                  _lcd_init E888                                    _lcd_putc E48C  
                          __size_of_sprintf 0264                           ?_ingresar_comando 0001  
                    __size_of_lcd_send_byte 0032                              _imprimir_tecla E32C  
                             __size_of_atoi 00D4                               __size_of_main 02D2  
                        ??_ingresar_comando 003B                                    _minuto_d 00F7  
                                  _minuto_u 00F8                                    _password 00E7  
                       _actualizar_password F43E                                ?_cambiar_dia 0001  
                              ?_cambiar_mes 0001                                    _temporal 0086  
                          ?_cambiar_minutos 0001                       __size_of_mostrar_menu 0018  
                                  atoi@sign 000B                               ??_Delay1KTCYx 0001  
                           ??_RtccWriteDate 0004                             ??_RtccWriteTime 0004  
              actualizar_password@confirmar 0001                                 ??_lcd_putrs 000B  
                               _OSCTUNEbits 000F9B                                  _INTCONbits 000FF2  
                               _tamanio_dia 0058                        ?_actualizar_password 0001  
                               _tamanio_mes 005C                          RtccWriteTime@wasOn 0005  
                      __end_of_Delay100TCYx E0B6                                    isdigit@c 0003  
              guardar_tecla_presionada@doit 0040                  __size_of_ingresar_password 00E6  
                    __end_of_imprimir_tecla E372                                   sprintf@ap 001B  
                   __end_of_lcd_send_nibble E810                                   sprintf@sp 000D  
                          ___lwmod@dividend 0008                                _mostrar_menu E0C8  
        guardar_elemento_hora@tamanio_array 0026                     ?_guardar_nuevo_password 0001  
                                _OSCCONbits 000FD3                     ?_guardar_elemento_fecha 0024  
                  __end_of_validar_password EA18                       RtccWriteDate@tempYear 0007  
               guardar_elemento_fecha@array 0024                           imprimir_tecla@aux 0024  
               guardar_elemento_fecha@tecla 002A                               _lcd_send_byte E2B6  
                                _RTCCFGbits 000F3F         guardar_elemento_fecha@tamanio_array 0026  
                   __end_of_validar_comando E98E                       _convertir_a_int_fecha E116  
                    validar_comando@validar 0003                                    sprintf@c 0023  
                                  sprintf@f 000F                       ??_actualizar_password 0004  
                           ___lwmod@divisor 000A                   verficar_password@verifica 0001  
                       __end_of_Delay1KTCYx E0C8                             ___lwmod@counter 000C  
                      __end_of_cambiar_anio EEB8          __size_of_guardar_password_temporal 0046  
                      RtccWriteDate@wasAlrm 0006                        __end_of_cambiar_hora EDEE  
                      RtccWriteDate@wasWrEn 0009                      ?_guardar_elemento_hora 0024  
                    ingresar_password@i_561 001C                             ?_imprimir_tecla 0001  
                    ingresar_password@clear 000C              __end_of_guardar_nuevo_password E3B8  
            __end_of_guardar_elemento_fecha E726                       lcd_send_nibble@nibble 0002  
