

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 13 22:28:25 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           	psect	idataBANK0
    80  00E132                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _password
    84  00E132  31                 	db	49
    85  00E133  32                 	db	50
    86  00E134  33                 	db	51
    87  00E135  34                 	db	52
    88  00E136  35                 	db	53
    89  00E137  36                 	db	54
    90  00E138  00                 	db	0
    91                           
    92                           ;initializer for _comando
    93  00E139  78                 	db	120
    94  00E13A  78                 	db	120
    95  00E13B  00                 	db	0
    96                           
    97                           ;initializer for _activada
    98  00E13C  0001               	dw	1
    99                           
   100                           ;initializer for _anio
   101  00E13E  000F               	dw	15
   102                           
   103                           ;initializer for _dia
   104  00E140  0008               	dw	8
   105                           
   106                           ;initializer for _diasem
   107  00E142  0003               	dw	3
   108                           
   109                           ;initializer for _hora
   110  00E144  0012               	dw	18
   111                           
   112                           ;initializer for _mes
   113  00E146  0009               	dw	9
   114                           
   115                           ;initializer for _minuto
   116  00E148  001E               	dw	30
   117                           
   118                           	psect	mediumconst
   119  00FEC2                     __pmediumconst:
   120                           	opt stack 0
   121  00FEC2  00                 	db	0
   122  00FEC3                     _dpowers:
   123                           	opt stack 0
   124  00FEC3  0001               	dw	1
   125  00FEC5  000A               	dw	10
   126  00FEC7  0064               	dw	100
   127  00FEC9  03E8               	dw	1000
   128  00FECB  2710               	dw	10000
   129  00FECD                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FECD                     _LCD_INIT_STRING:
   132                           	opt stack 0
   133  00FECD  28                 	db	40
   134  00FECE  0C                 	db	12
   135  00FECF  01                 	db	1
   136  00FED0  06                 	db	6
   137  00FED1                     __end_of_LCD_INIT_STRING:
   138                           	opt stack 0
   139  00FED1                     STR_19:
   140                           
   141                           ; BSR set to: 15
   142  00FED1  50                 	db	80	;'P'
   143  00FED2  61                 	db	97	;'a'
   144  00FED3  73                 	db	115	;'s'
   145  00FED4  73                 	db	115	;'s'
   146  00FED5  77                 	db	119	;'w'
   147  00FED6  6F                 	db	111	;'o'
   148  00FED7  72                 	db	114	;'r'
   149  00FED8  64                 	db	100	;'d'
   150  00FED9  20                 	db	32
   151  00FEDA  61                 	db	97	;'a'
   152  00FEDB  63                 	db	99	;'c'
   153  00FEDC  74                 	db	116	;'t'
   154  00FEDD  75                 	db	117	;'u'
   155  00FEDE  61                 	db	97	;'a'
   156  00FEDF  6C                 	db	108	;'l'
   157  00FEE0  3A                 	db	58	;':'
   158  00FEE1  20                 	db	32
   159  00FEE2  20                 	db	32
   160  00FEE3  20                 	db	32
   161  00FEE4  20                 	db	32
   162  00FEE5  20                 	db	32
   163  00FEE6  20                 	db	32
   164  00FEE7  20                 	db	32
   165  00FEE8  20                 	db	32
   166  00FEE9  20                 	db	32
   167  00FEEA  20                 	db	32
   168  00FEEB  00                 	db	0
   169  00FEEC                     STR_13:
   170                           
   171                           ; BSR set to: 15
   172  00FEEC  20                 	db	32
   173  00FEED  20                 	db	32
   174  00FEEE  20                 	db	32
   175  00FEEF  20                 	db	32
   176  00FEF0  20                 	db	32
   177  00FEF1  20                 	db	32
   178  00FEF2  20                 	db	32
   179  00FEF3  20                 	db	32
   180  00FEF4  20                 	db	32
   181  00FEF5  20                 	db	32
   182  00FEF6  20                 	db	32
   183  00FEF7  20                 	db	32
   184  00FEF8  20                 	db	32
   185  00FEF9  20                 	db	32
   186  00FEFA  20                 	db	32
   187  00FEFB  20                 	db	32
   188  00FEFC  20                 	db	32
   189  00FEFD  20                 	db	32
   190  00FEFE  20                 	db	32
   191  00FEFF  20                 	db	32
   192  00FF00  20                 	db	32
   193  00FF01  20                 	db	32
   194  00FF02  20                 	db	32
   195  00FF03  20                 	db	32
   196  00FF04  20                 	db	32
   197  00FF05  00                 	db	0
   198  00FF06                     STR_22:
   199                           
   200                           ; BSR set to: 15
   201  00FF06  43                 	db	67	;'C'
   202  00FF07  6F                 	db	111	;'o'
   203  00FF08  6E                 	db	110	;'n'
   204  00FF09  66                 	db	102	;'f'
   205  00FF0A  69                 	db	105	;'i'
   206  00FF0B  72                 	db	114	;'r'
   207  00FF0C  6D                 	db	109	;'m'
   208  00FF0D  65                 	db	101	;'e'
   209  00FF0E  20                 	db	32
   210  00FF0F  70                 	db	112	;'p'
   211  00FF10  61                 	db	97	;'a'
   212  00FF11  73                 	db	115	;'s'
   213  00FF12  73                 	db	115	;'s'
   214  00FF13  3A                 	db	58	;':'
   215  00FF14  20                 	db	32
   216  00FF15  20                 	db	32
   217  00FF16  20                 	db	32
   218  00FF17  20                 	db	32
   219  00FF18  20                 	db	32
   220  00FF19  20                 	db	32
   221  00FF1A  20                 	db	32
   222  00FF1B  20                 	db	32
   223  00FF1C  00                 	db	0
   224  00FF1D                     STR_17:
   225                           
   226                           ; BSR set to: 15
   227  00FF1D  49                 	db	73	;'I'
   228  00FF1E  6E                 	db	110	;'n'
   229  00FF1F  73                 	db	115	;'s'
   230  00FF20  65                 	db	101	;'e'
   231  00FF21  72                 	db	114	;'r'
   232  00FF22  74                 	db	116	;'t'
   233  00FF23  65                 	db	101	;'e'
   234  00FF24  20                 	db	32
   235  00FF25  6D                 	db	109	;'m'
   236  00FF26  69                 	db	105	;'i'
   237  00FF27  6E                 	db	110	;'n'
   238  00FF28  75                 	db	117	;'u'
   239  00FF29  74                 	db	116	;'t'
   240  00FF2A  6F                 	db	111	;'o'
   241  00FF2B  73                 	db	115	;'s'
   242  00FF2C  3A                 	db	58	;':'
   243  00FF2D  20                 	db	32
   244  00FF2E  20                 	db	32
   245  00FF2F  20                 	db	32
   246  00FF30  20                 	db	32
   247  00FF31  20                 	db	32
   248  00FF32  00                 	db	0
   249  00FF33                     STR_20:
   250                           
   251                           ; BSR set to: 15
   252  00FF33  4E                 	db	78	;'N'
   253  00FF34  75                 	db	117	;'u'
   254  00FF35  65                 	db	101	;'e'
   255  00FF36  76                 	db	118	;'v'
   256  00FF37  6F                 	db	111	;'o'
   257  00FF38  20                 	db	32
   258  00FF39  70                 	db	112	;'p'
   259  00FF3A  61                 	db	97	;'a'
   260  00FF3B  73                 	db	115	;'s'
   261  00FF3C  73                 	db	115	;'s'
   262  00FF3D  3A                 	db	58	;':'
   263  00FF3E  20                 	db	32
   264  00FF3F  20                 	db	32
   265  00FF40  20                 	db	32
   266  00FF41  20                 	db	32
   267  00FF42  20                 	db	32
   268  00FF43  20                 	db	32
   269  00FF44  20                 	db	32
   270  00FF45  20                 	db	32
   271  00FF46  00                 	db	0
   272  00FF47                     STR_18:
   273                           
   274                           ; BSR set to: 15
   275  00FF47  49                 	db	73	;'I'
   276  00FF48  6E                 	db	110	;'n'
   277  00FF49  73                 	db	115	;'s'
   278  00FF4A  65                 	db	101	;'e'
   279  00FF4B  72                 	db	114	;'r'
   280  00FF4C  74                 	db	116	;'t'
   281  00FF4D  65                 	db	101	;'e'
   282  00FF4E  20                 	db	32
   283  00FF4F  68                 	db	104	;'h'
   284  00FF50  6F                 	db	111	;'o'
   285  00FF51  72                 	db	114	;'r'
   286  00FF52  61                 	db	97	;'a'
   287  00FF53  3A                 	db	58	;':'
   288  00FF54  20                 	db	32
   289  00FF55  20                 	db	32
   290  00FF56  20                 	db	32
   291  00FF57  20                 	db	32
   292  00FF58  20                 	db	32
   293  00FF59  00                 	db	0
   294  00FF5A                     STR_14:
   295                           
   296                           ; BSR set to: 15
   297  00FF5A  49                 	db	73	;'I'
   298  00FF5B  6E                 	db	110	;'n'
   299  00FF5C  73                 	db	115	;'s'
   300  00FF5D  65                 	db	101	;'e'
   301  00FF5E  72                 	db	114	;'r'
   302  00FF5F  74                 	db	116	;'t'
   303  00FF60  65                 	db	101	;'e'
   304  00FF61  20                 	db	32
   305  00FF62  61                 	db	97	;'a'
   306  00FF63  6E                 	db	110	;'n'
   307  00FF64  69                 	db	105	;'i'
   308  00FF65  6F                 	db	111	;'o'
   309  00FF66  3A                 	db	58	;':'
   310  00FF67  20                 	db	32
   311  00FF68  20                 	db	32
   312  00FF69  20                 	db	32
   313  00FF6A  20                 	db	32
   314  00FF6B  20                 	db	32
   315  00FF6C  00                 	db	0
   316  00FF6D                     STR_16:
   317                           
   318                           ; BSR set to: 15
   319  00FF6D  49                 	db	73	;'I'
   320  00FF6E  6E                 	db	110	;'n'
   321  00FF6F  73                 	db	115	;'s'
   322  00FF70  65                 	db	101	;'e'
   323  00FF71  72                 	db	114	;'r'
   324  00FF72  74                 	db	116	;'t'
   325  00FF73  65                 	db	101	;'e'
   326  00FF74  20                 	db	32
   327  00FF75  64                 	db	100	;'d'
   328  00FF76  69                 	db	105	;'i'
   329  00FF77  61                 	db	97	;'a'
   330  00FF78  3A                 	db	58	;':'
   331  00FF79  20                 	db	32
   332  00FF7A  20                 	db	32
   333  00FF7B  20                 	db	32
   334  00FF7C  20                 	db	32
   335  00FF7D  20                 	db	32
   336  00FF7E  00                 	db	0
   337  00FF7F                     STR_15:
   338                           
   339                           ; BSR set to: 15
   340  00FF7F  49                 	db	73	;'I'
   341  00FF80  6E                 	db	110	;'n'
   342  00FF81  73                 	db	115	;'s'
   343  00FF82  65                 	db	101	;'e'
   344  00FF83  72                 	db	114	;'r'
   345  00FF84  74                 	db	116	;'t'
   346  00FF85  65                 	db	101	;'e'
   347  00FF86  20                 	db	32
   348  00FF87  6D                 	db	109	;'m'
   349  00FF88  65                 	db	101	;'e'
   350  00FF89  73                 	db	115	;'s'
   351  00FF8A  3A                 	db	58	;':'
   352  00FF8B  20                 	db	32
   353  00FF8C  20                 	db	32
   354  00FF8D  20                 	db	32
   355  00FF8E  20                 	db	32
   356  00FF8F  20                 	db	32
   357  00FF90  00                 	db	0
   358  00FF91                     STR_5:
   359                           
   360                           ; BSR set to: 15
   361  00FF91  49                 	db	73	;'I'
   362  00FF92  6E                 	db	110	;'n'
   363  00FF93  73                 	db	115	;'s'
   364  00FF94  65                 	db	101	;'e'
   365  00FF95  72                 	db	114	;'r'
   366  00FF96  74                 	db	116	;'t'
   367  00FF97  65                 	db	101	;'e'
   368  00FF98  20                 	db	32
   369  00FF99  70                 	db	112	;'p'
   370  00FF9A  61                 	db	97	;'a'
   371  00FF9B  73                 	db	115	;'s'
   372  00FF9C  73                 	db	115	;'s'
   373  00FF9D  77                 	db	119	;'w'
   374  00FF9E  6F                 	db	111	;'o'
   375  00FF9F  72                 	db	114	;'r'
   376  00FFA0  64                 	db	100	;'d'
   377  00FFA1  00                 	db	0
   378  00FFA2                     STR_1:
   379                           
   380                           ; BSR set to: 15
   381  00FFA2  25                 	db	37
   382  00FFA3  30                 	db	48	;'0'
   383  00FFA4  32                 	db	50	;'2'
   384  00FFA5  75                 	db	117	;'u'
   385  00FFA6  2F                 	db	47
   386  00FFA7  25                 	db	37
   387  00FFA8  30                 	db	48	;'0'
   388  00FFA9  32                 	db	50	;'2'
   389  00FFAA  75                 	db	117	;'u'
   390  00FFAB  2F                 	db	47
   391  00FFAC  25                 	db	37
   392  00FFAD  30                 	db	48	;'0'
   393  00FFAE  32                 	db	50	;'2'
   394  00FFAF  75                 	db	117	;'u'
   395  00FFB0  00                 	db	0
   396  00FFB1                     STR_2:
   397                           
   398                           ; BSR set to: 15
   399  00FFB1  25                 	db	37
   400  00FFB2  30                 	db	48	;'0'
   401  00FFB3  32                 	db	50	;'2'
   402  00FFB4  75                 	db	117	;'u'
   403  00FFB5  3A                 	db	58	;':'
   404  00FFB6  25                 	db	37
   405  00FFB7  30                 	db	48	;'0'
   406  00FFB8  32                 	db	50	;'2'
   407  00FFB9  75                 	db	117	;'u'
   408  00FFBA  3A                 	db	58	;':'
   409  00FFBB  25                 	db	37
   410  00FFBC  30                 	db	48	;'0'
   411  00FFBD  32                 	db	50	;'2'
   412  00FFBE  75                 	db	117	;'u'
   413  00FFBF  00                 	db	0
   414  00FFC0                     STR_6:
   415                           
   416                           ; BSR set to: 15
   417  00FFC0  45                 	db	69	;'E'
   418  00FFC1  52                 	db	82	;'R'
   419  00FFC2  52                 	db	82	;'R'
   420  00FFC3  4F                 	db	79	;'O'
   421  00FFC4  52                 	db	82	;'R'
   422  00FFC5  20                 	db	32
   423  00FFC6  70                 	db	112	;'p'
   424  00FFC7  61                 	db	97	;'a'
   425  00FFC8  73                 	db	115	;'s'
   426  00FFC9  73                 	db	115	;'s'
   427  00FFCA  00                 	db	0
   428  00FFCB                     STR_12:
   429                           
   430                           ; BSR set to: 15
   431  00FFCB  57                 	db	87	;'W'
   432  00FFCC  65                 	db	101	;'e'
   433  00FFCD  6C                 	db	108	;'l'
   434  00FFCE  63                 	db	99	;'c'
   435  00FFCF  6F                 	db	111	;'o'
   436  00FFD0  6D                 	db	109	;'m'
   437  00FFD1  65                 	db	101	;'e'
   438  00FFD2  00                 	db	0
   439  00FFD3                     STR_7:
   440                           
   441                           ; BSR set to: 15
   442  00FFD3  25                 	db	37
   443  00FFD4  30                 	db	48	;'0'
   444  00FFD5  31                 	db	49	;'1'
   445  00FFD6  75                 	db	117	;'u'
   446  00FFD7  00                 	db	0
   447  00FFD8                     STR_4:
   448                           
   449                           ; BSR set to: 15
   450  00FFD8  4F                 	db	79	;'O'
   451  00FFD9  46                 	db	70	;'F'
   452  00FFDA  46                 	db	70	;'F'
   453  00FFDB  00                 	db	0
   454  00FFDC                     STR_23:
   455                           
   456                           ; BSR set to: 15
   457  00FFDC  30                 	db	48	;'0'
   458  00FFDD  30                 	db	48	;'0'
   459  00FFDE  00                 	db	0
   460  00FFDF                     STR_26:
   461                           
   462                           ; BSR set to: 15
   463  00FFDF  30                 	db	48	;'0'
   464  00FFE0  31                 	db	49	;'1'
   465  00FFE1  00                 	db	0
   466  00FFE2                     STR_27:
   467                           
   468                           ; BSR set to: 15
   469  00FFE2  30                 	db	48	;'0'
   470  00FFE3  32                 	db	50	;'2'
   471  00FFE4  00                 	db	0
   472  00FFE5                     STR_3:
   473                           
   474                           ; BSR set to: 15
   475  00FFE5  4F                 	db	79	;'O'
   476  00FFE6  4E                 	db	78	;'N'
   477  00FFE7  00                 	db	0
   478  00FFE8                     STR_11:
   479                           
   480                           ; BSR set to: 15
   481  00FFE8  78                 	db	120	;'x'
   482  00FFE9  78                 	db	120	;'x'
   483  00FFEA  00                 	db	0
   484  00FFEB                     STR_35:
   485                           
   486                           ; BSR set to: 15
   487  00FFEB  23                 	db	35
   488  00FFEC  00                 	db	0
   489  00FFED                     STR_30:
   490                           
   491                           ; BSR set to: 15
   492  00FFED  2A                 	db	42
   493  00FFEE  00                 	db	0
   494  00FFEF                     STR_31:
   495                           
   496                           ; BSR set to: 15
   497  00FFEF  41                 	db	65	;'A'
   498  00FFF0  00                 	db	0
   499  00FFF1                     STR_32:
   500                           
   501                           ; BSR set to: 15
   502  00FFF1  42                 	db	66	;'B'
   503  00FFF2  00                 	db	0
   504  00FFF3                     STR_33:
   505                           
   506                           ; BSR set to: 15
   507  00FFF3  43                 	db	67	;'C'
   508  00FFF4  00                 	db	0
   509  00FFF5                     STR_36:
   510                           
   511                           ; BSR set to: 15
   512  00FFF5  44                 	db	68	;'D'
   513  00FFF6  00                 	db	0
   514  0000                     
   515                           ; #config settings
   516  00FFF7  00                 	db	0	; dummy byte at the end
   517  0000                     
   518                           	psect	nvCOMRAM
   519  00005E                     __pnvCOMRAM:
   520                           	opt stack 0
   521  00005E                     _segundo_d:
   522                           	opt stack 0
   523  00005E                     	ds	1
   524                           
   525                           	psect	nvBANK0
   526  0000E6                     __pnvBANK0:
   527                           	opt stack 0
   528  0000E6                     _anio_d:
   529                           	opt stack 0
   530  0000E6                     	ds	1
   531  0000E7                     _anio_u:
   532                           	opt stack 0
   533  0000E7                     	ds	1
   534  0000E8                     _dia_semana:
   535                           	opt stack 0
   536  0000E8                     	ds	1
   537  0000E9                     _fecha_d:
   538                           	opt stack 0
   539  0000E9                     	ds	1
   540  0000EA                     _fecha_u:
   541                           	opt stack 0
   542  0000EA                     	ds	1
   543  0000EB                     _hora_d:
   544                           	opt stack 0
   545  0000EB                     	ds	1
   546  0000EC                     _hora_u:
   547                           	opt stack 0
   548  0000EC                     	ds	1
   549  0000ED                     _mes_d:
   550                           	opt stack 0
   551  0000ED                     	ds	1
   552  0000EE                     _mes_u:
   553                           	opt stack 0
   554  0000EE                     	ds	1
   555  0000EF                     _minuto_d:
   556                           	opt stack 0
   557  0000EF                     	ds	1
   558  0000F0                     _minuto_u:
   559                           	opt stack 0
   560  0000F0                     	ds	1
   561  0000F1                     _segundo_u:
   562                           	opt stack 0
   563  0000F1                     	ds	1
   564  0000                     _ANCON0	set	3912
   565  0000                     _ANCON1	set	3913
   566  0000                     _RTCCFG	set	3903
   567  0000                     _RTCCFGbits	set	3903
   568  0000                     _ADCON0	set	4034
   569  0000                     _ADCON1	set	4033
   570  0000                     _ALRMCFGbits	set	3985
   571  0000                     _EECON2	set	4007
   572  0000                     _INTCONbits	set	4082
   573  0000                     _LATAbits	set	3977
   574  0000                     _LATBbits	set	3978
   575  0000                     _OSCCONbits	set	4051
   576  0000                     _OSCTUNEbits	set	3995
   577  0000                     _PIE3bits	set	4003
   578  0000                     _PORTAbits	set	3968
   579  0000                     _PORTCbits	set	3970
   580  0000                     _RTCVALH	set	3993
   581  0000                     _RTCVALL	set	3992
   582  0000                     _T1CONbits	set	4045
   583  0000                     _TRISA	set	3986
   584  0000                     _TRISB	set	3987
   585  0000                     _TRISBbits	set	3987
   586  0000                     _TRISC	set	3988
   587                           
   588                           	psect	cinit
   589  00E358                     __pcinit:
   590                           	opt stack 0
   591  00E358                     start_initialization:
   592                           	opt stack 0
   593  00E358                     __initialization:
   594                           	opt stack 0
   595                           
   596                           ; Clear objects allocated to BANK0 (110 bytes)
   597  00E358  EE00  F060         	lfsr	0,__pbssBANK0
   598  00E35C  0E6E               	movlw	110
   599  00E35E                     clear_0:
   600  00E35E  6AEE               	clrf	postinc0,c
   601  00E360  06E8               	decf	wreg,f,c
   602  00E362  E1FD               	bnz	clear_0
   603                           
   604                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   605  00E364  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   606                           
   607                           ; Clear objects allocated to COMRAM (21 bytes)
   608  00E366  EE00  F049         	lfsr	0,__pbssCOMRAM
   609  00E36A  0E15               	movlw	21
   610  00E36C                     clear_1:
   611  00E36C  6AEE               	clrf	postinc0,c
   612  00E36E  06E8               	decf	wreg,f,c
   613  00E370  E1FD               	bnz	clear_1
   614                           
   615                           ; Initialize objects allocated to BANK0 (24 bytes)
   616                           ; load TBLPTR registers with __pidataBANK0
   617  00E372  0E32               	movlw	low __pidataBANK0
   618  00E374  6EF6               	movwf	tblptrl,c
   619  00E376  0EE1               	movlw	high __pidataBANK0
   620  00E378  6EF7               	movwf	tblptrh,c
   621  00E37A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   622  00E37C  6EF8               	movwf	tblptru,c
   623  00E37E  EE00  F0CE         	lfsr	0,__pdataBANK0
   624  00E382  EE10 F018          	lfsr	1,24
   625  00E386                     copy_data0:
   626  00E386  0009               	tblrd		*+
   627  00E388  CFF5 FFEE          	movff	tablat,postinc0
   628  00E38C  50E5               	movf	postdec1,w,c
   629  00E38E  50E1               	movf	fsr1l,w,c
   630  00E390  E1FA               	bnz	copy_data0
   631  00E392                     end_of_initialization:
   632                           	opt stack 0
   633  00E392                     __end_of__initialization:
   634                           	opt stack 0
   635  00E392  0E00               	movlw	low (__Lmediumconst shr (0+16))
   636  00E394  6EF8               	movwf	tblptru,c
   637  00E396  0100               	movlb	0
   638  00E398  EF15  F07A         	goto	_main	;jump to C main() function
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           
   648                           	psect	bitbssCOMRAM
   649  0002F8                     __pbitbssCOMRAM:
   650                           	opt stack 0
   651  0002F8                     _flag:
   652                           	opt stack 0
   653  0002F8                     	ds	1
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           postdec1	equ	0xFE5
   661                           fsr1l	equ	0xFE1
   662                           
   663                           	psect	bssCOMRAM
   664  000049                     __pbssCOMRAM:
   665                           	opt stack 0
   666  000049                     _puntero_funcion:
   667                           	opt stack 0
   668  000049                     	ds	2
   669  00004B                     _tamanio_new_password:
   670                           	opt stack 0
   671  00004B                     	ds	2
   672  00004D                     _tamanio_password:
   673                           	opt stack 0
   674  00004D                     	ds	2
   675  00004F                     _key:
   676                           	opt stack 0
   677  00004F                     	ds	1
   678  000050                     _RtccDate:
   679                           	opt stack 0
   680  000050                     	ds	4
   681  000054                     _tamanio_anio:
   682                           	opt stack 0
   683  000054                     	ds	2
   684  000056                     _tamanio_dia:
   685                           	opt stack 0
   686  000056                     	ds	2
   687  000058                     _tamanio_hora:
   688                           	opt stack 0
   689  000058                     	ds	2
   690  00005A                     _tamanio_mes:
   691                           	opt stack 0
   692  00005A                     	ds	2
   693  00005C                     _tamanio_minutos:
   694                           	opt stack 0
   695  00005C                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	bssBANK0
   706  000060                     __pbssBANK0:
   707                           	opt stack 0
   708  000060                     _RtccAlrmTimeDate:
   709                           	opt stack 0
   710  000060                     	ds	8
   711  000068                     _RtccTimeDate:
   712                           	opt stack 0
   713  000068                     	ds	8
   714  000070                     _Rtcc_read_TimeDate:
   715                           	opt stack 0
   716  000070                     	ds	8
   717  000078                     _current_password:
   718                           	opt stack 0
   719  000078                     	ds	7
   720  00007F                     _new_password:
   721                           	opt stack 0
   722  00007F                     	ds	7
   723  000086                     _temporal:
   724                           	opt stack 0
   725  000086                     	ds	7
   726  00008D                     _RtccTimeVal:
   727                           	opt stack 0
   728  00008D                     	ds	4
   729  000091                     _a:
   730                           	opt stack 0
   731  000091                     	ds	2
   732  000093                     _autorizado:
   733                           	opt stack 0
   734  000093                     	ds	2
   735  000095                     _b:
   736                           	opt stack 0
   737  000095                     	ds	2
   738  000097                     _c:
   739                           	opt stack 0
   740  000097                     	ds	2
   741  000099                     _encendida:
   742                           	opt stack 0
   743  000099                     	ds	2
   744  00009B                     _i:
   745                           	opt stack 0
   746  00009B                     	ds	2
   747  00009D                     _j:
   748                           	opt stack 0
   749  00009D                     	ds	2
   750  00009F                     _k:
   751                           	opt stack 0
   752  00009F                     	ds	2
   753  0000A1                     _ocultar_teclas:
   754                           	opt stack 0
   755  0000A1                     	ds	2
   756  0000A3                     _segundo:
   757                           	opt stack 0
   758  0000A3                     	ds	2
   759  0000A5                     _tamanio_comando:
   760                           	opt stack 0
   761  0000A5                     	ds	2
   762  0000A7                     _buffer2:
   763                           	opt stack 0
   764  0000A7                     	ds	20
   765  0000BB                     _RtccTime:
   766                           	opt stack 0
   767  0000BB                     	ds	4
   768  0000BF                     _day:
   769                           	opt stack 0
   770  0000BF                     	ds	3
   771  0000C2                     _hour:
   772                           	opt stack 0
   773  0000C2                     	ds	3
   774  0000C5                     _minutes:
   775                           	opt stack 0
   776  0000C5                     	ds	3
   777  0000C8                     _month:
   778                           	opt stack 0
   779  0000C8                     	ds	3
   780  0000CB                     _year:
   781                           	opt stack 0
   782  0000CB                     	ds	3
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           postdec1	equ	0xFE5
   790                           fsr1l	equ	0xFE1
   791                           
   792                           	psect	dataBANK0
   793  0000CE                     __pdataBANK0:
   794                           	opt stack 0
   795  0000CE                     _password:
   796                           	opt stack 0
   797  0000CE                     	ds	7
   798  0000D5                     _comando:
   799                           	opt stack 0
   800  0000D5                     	ds	3
   801  0000D8                     _activada:
   802                           	opt stack 0
   803  0000D8                     	ds	2
   804  0000DA                     _anio:
   805                           	opt stack 0
   806  0000DA                     	ds	2
   807  0000DC                     _dia:
   808                           	opt stack 0
   809  0000DC                     	ds	2
   810  0000DE                     _diasem:
   811                           	opt stack 0
   812  0000DE                     	ds	2
   813  0000E0                     _hora:
   814                           	opt stack 0
   815  0000E0                     	ds	2
   816  0000E2                     _mes:
   817                           	opt stack 0
   818  0000E2                     	ds	2
   819  0000E4                     _minuto:
   820                           	opt stack 0
   821  0000E4                     	ds	2
   822                           tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           tblptrl	equ	0xFF6
   825                           tablat	equ	0xFF5
   826                           postinc0	equ	0xFEE
   827                           wreg	equ	0xFE8
   828                           postdec1	equ	0xFE5
   829                           fsr1l	equ	0xFE1
   830                           
   831                           	psect	cstackCOMRAM
   832  000001                     __pcstackCOMRAM:
   833                           	opt stack 0
   834  000001                     ??_guardar_current_password:
   835  000001                     ??_guardar_password_temporal:
   836  000001                     ??_guardar_nuevo_password:
   837  000001                     ??_isdigit:
   838  000001                     ??_lcd_send_nibble:
   839  000001                     ?___wmul:
   840                           	opt stack 0
   841  000001                     ?___awdiv:
   842                           	opt stack 0
   843  000001                     ?___lwdiv:
   844                           	opt stack 0
   845  000001                     Delay100TCYx@unit:
   846                           	opt stack 0
   847  000001                     Delay1KTCYx@unit:
   848                           	opt stack 0
   849  000001                     validar_comando@candidato:
   850                           	opt stack 0
   851  000001                     verficar_password@verifica:
   852                           	opt stack 0
   853  000001                     actualizar_password@confirmar:
   854                           	opt stack 0
   855  000001                     RtccReadDate@pDt:
   856                           	opt stack 0
   857  000001                     RtccReadTime@pTm:
   858                           	opt stack 0
   859  000001                     RtccWriteDate@pDt:
   860                           	opt stack 0
   861  000001                     RtccWriteTime@pTm:
   862                           	opt stack 0
   863  000001                     ___wmul@multiplier:
   864                           	opt stack 0
   865  000001                     ___awdiv@dividend:
   866                           	opt stack 0
   867  000001                     ___lwdiv@dividend:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x0
   871  000001                     	ds	1
   872  000002                     lcd_send_nibble@nibble:
   873                           	opt stack 0
   874  000002                     _isdigit$2628:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1
   878  000002                     	ds	1
   879  000003                     lcd_send_byte@n:
   880                           	opt stack 0
   881  000003                     guardar_current_password@valor:
   882                           	opt stack 0
   883  000003                     guardar_password_temporal@valor:
   884                           	opt stack 0
   885  000003                     guardar_nuevo_password@valor:
   886                           	opt stack 0
   887  000003                     actualizar_password@valor:
   888                           	opt stack 0
   889  000003                     RtccWriteDate@di:
   890                           	opt stack 0
   891  000003                     RtccWriteTime@di:
   892                           	opt stack 0
   893  000003                     isdigit@c:
   894                           	opt stack 0
   895  000003                     validar_comando@validar:
   896                           	opt stack 0
   897  000003                     validar_password@i:
   898                           	opt stack 0
   899  000003                     ___wmul@multiplicand:
   900                           	opt stack 0
   901  000003                     ___awdiv@divisor:
   902                           	opt stack 0
   903  000003                     ___lwdiv@divisor:
   904                           	opt stack 0
   905  000003                     RtccReadDate@rTD1:
   906                           	opt stack 0
   907  000003                     RtccReadTime@rTD1:
   908                           	opt stack 0
   909                           
   910                           ; 8 bytes @ 0x2
   911  000003                     	ds	1
   912  000004                     ??_actualizar_password:
   913  000004                     lcd_send_byte@address:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x3
   917  000004                     	ds	1
   918  000005                     ??_validar_comando:
   919  000005                     lcd_init@i:
   920                           	opt stack 0
   921  000005                     lcd_gotoxy@y:
   922                           	opt stack 0
   923  000005                     lcd_comand@d:
   924                           	opt stack 0
   925  000005                     RtccWriteDate@wasOn:
   926                           	opt stack 0
   927  000005                     RtccWriteTime@wasOn:
   928                           	opt stack 0
   929  000005                     ___awdiv@counter:
   930                           	opt stack 0
   931  000005                     verficar_password@i:
   932                           	opt stack 0
   933  000005                     ___wmul@product:
   934                           	opt stack 0
   935  000005                     ___lwdiv@quotient:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x4
   939  000005                     	ds	1
   940  000006                     lcd_gotoxy@x:
   941                           	opt stack 0
   942  000006                     RtccWriteDate@wasAlrm:
   943                           	opt stack 0
   944  000006                     RtccWriteTime@wasAlrm:
   945                           	opt stack 0
   946  000006                     ___awdiv@sign:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x5
   950  000006                     	ds	1
   951  000007                     ?_atoi:
   952                           	opt stack 0
   953  000007                     lcd_gotoxy@address:
   954                           	opt stack 0
   955  000007                     RtccWriteTime@wasWrEn:
   956                           	opt stack 0
   957  000007                     ___lwdiv@counter:
   958                           	opt stack 0
   959  000007                     RtccWriteDate@tempYear:
   960                           	opt stack 0
   961  000007                     atoi@s:
   962                           	opt stack 0
   963  000007                     ___awdiv@quotient:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x6
   967  000007                     	ds	1
   968  000008                     ?___lwmod:
   969                           	opt stack 0
   970  000008                     lcd_putc@c:
   971                           	opt stack 0
   972  000008                     validar_comando@i:
   973                           	opt stack 0
   974  000008                     RtccWriteTime@tempMinSec:
   975                           	opt stack 0
   976  000008                     ___lwmod@dividend:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x7
   980  000008                     	ds	1
   981  000009                     ??_atoi:
   982  000009                     RtccWriteDate@wasWrEn:
   983                           	opt stack 0
   984  000009                     lcd_putrs@ptr:
   985                           	opt stack 0
   986  000009                     actualizar_password@j:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x8
   990  000009                     	ds	1
   991  00000A                     RtccWriteDate@tempDayMonth:
   992                           	opt stack 0
   993  00000A                     RtccWriteTime@tempHourWDay:
   994                           	opt stack 0
   995  00000A                     ___lwmod@divisor:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x9
   999  00000A                     	ds	1
  1000  00000B                     ??_ingresar_password:
  1001  00000B                     atoi@sign:
  1002                           	opt stack 0
  1003  00000B                     mostrar_titulo_menu@titulo_menu:
  1004                           	opt stack 0
  1005  00000B                     clear_display@pos:
  1006                           	opt stack 0
  1007  00000B                     actualizar_password@j_1623:
  1008                           	opt stack 0
  1009  00000B                     RtccReadDate@rTD0:
  1010                           	opt stack 0
  1011  00000B                     RtccReadTime@rTD0:
  1012                           	opt stack 0
  1013                           
  1014                           ; 8 bytes @ 0xA
  1015  00000B                     	ds	1
  1016  00000C                     ___lwmod@counter:
  1017                           	opt stack 0
  1018  00000C                     RtccWriteDate@tempHourWDay:
  1019                           	opt stack 0
  1020  00000C                     atoi@a:
  1021                           	opt stack 0
  1022  00000C                     ingresar_password@clear:
  1023                           	opt stack 0
  1024                           
  1025                           ; 16 bytes @ 0xB
  1026  00000C                     	ds	1
  1027  00000D                     ?_sprintf:
  1028                           	opt stack 0
  1029  00000D                     sprintf@sp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0xC
  1033  00000D                     	ds	1
  1034  00000E                     convertir_a_int_fecha@array:
  1035                           	opt stack 0
  1036  00000E                     convertir_a_int_hora@array:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0xD
  1040  00000E                     	ds	1
  1041  00000F                     sprintf@f:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0xE
  1045  00000F                     	ds	1
  1046  000010                     convertir_a_int_fecha@valor:
  1047                           	opt stack 0
  1048  000010                     convertir_a_int_hora@valor:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0xF
  1052  000010                     	ds	2
  1053  000012                     
  1054                           ; 0 bytes @ 0x11
  1055  000012                     	ds	1
  1056  000013                     
  1057                           ; 0 bytes @ 0x12
  1058  000013                     	ds	4
  1059  000017                     ??_sprintf:
  1060                           
  1061                           ; 0 bytes @ 0x16
  1062  000017                     	ds	4
  1063  00001B                     sprintf@ap:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x1A
  1067  00001B                     	ds	1
  1068  00001C                     ingresar_password@i_565:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x1B
  1072  00001C                     	ds	1
  1073  00001D                     sprintf@flag:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x1C
  1077  00001D                     	ds	1
  1078  00001E                     ingresar_password@i:
  1079                           	opt stack 0
  1080  00001E                     sprintf@val:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x1D
  1084  00001E                     	ds	2
  1085  000020                     sprintf@prec:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x1F
  1089  000020                     	ds	1
  1090  000021                     sprintf@width:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x20
  1094  000021                     	ds	2
  1095  000023                     sprintf@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x22
  1099  000023                     	ds	1
  1100  000024                     ??_guardar_comando:
  1101  000024                     caratula@titulo:
  1102                           	opt stack 0
  1103  000024                     cambiar_password@confirmar:
  1104                           	opt stack 0
  1105  000024                     guardar_elemento_fecha@array:
  1106                           	opt stack 0
  1107  000024                     guardar_elemento_hora@array:
  1108                           	opt stack 0
  1109  000024                     imprimir_tecla@aux:
  1110                           	opt stack 0
  1111                           
  1112                           ; 20 bytes @ 0x23
  1113  000024                     	ds	2
  1114  000026                     _caratula$527:
  1115                           	opt stack 0
  1116  000026                     cambiar_password@verifica:
  1117                           	opt stack 0
  1118  000026                     guardar_elemento_fecha@tamanio_array:
  1119                           	opt stack 0
  1120  000026                     guardar_elemento_hora@tamanio_array:
  1121                           	opt stack 0
  1122  000026                     guardar_comando@aux:
  1123                           	opt stack 0
  1124                           
  1125                           ; 20 bytes @ 0x25
  1126  000026                     	ds	2
  1127  000028                     ??_guardar_elemento_fecha:
  1128  000028                     ??_guardar_elemento_hora:
  1129                           
  1130                           ; 0 bytes @ 0x27
  1131  000028                     	ds	2
  1132  00002A                     guardar_elemento_fecha@tecla:
  1133                           	opt stack 0
  1134  00002A                     guardar_elemento_hora@tecla:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x29
  1138  00002A                     	ds	1
  1139  00002B                     ??_cambiar_anio:
  1140  00002B                     ??_cambiar_mes:
  1141  00002B                     ??_cambiar_dia:
  1142  00002B                     ??_cambiar_minutos:
  1143  00002B                     ??_cambiar_hora:
  1144                           
  1145                           ; 0 bytes @ 0x2A
  1146  00002B                     	ds	1
  1147  00002C                     cambiar_dia@tecla:
  1148                           	opt stack 0
  1149  00002C                     cambiar_mes@tecla:
  1150                           	opt stack 0
  1151  00002C                     cambiar_anio@tecla:
  1152                           	opt stack 0
  1153  00002C                     cambiar_hora@tecla:
  1154                           	opt stack 0
  1155  00002C                     cambiar_minutos@tecla:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x2B
  1159  00002C                     	ds	1
  1160  00002D                     cambiar_dia@i:
  1161                           	opt stack 0
  1162  00002D                     cambiar_mes@i:
  1163                           	opt stack 0
  1164  00002D                     cambiar_anio@i:
  1165                           	opt stack 0
  1166  00002D                     cambiar_hora@i:
  1167                           	opt stack 0
  1168  00002D                     cambiar_minutos@i:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x2C
  1172  00002D                     	ds	2
  1173  00002F                     cambiar_dia@valor:
  1174                           	opt stack 0
  1175  00002F                     cambiar_mes@valor:
  1176                           	opt stack 0
  1177  00002F                     cambiar_anio@valor:
  1178                           	opt stack 0
  1179  00002F                     cambiar_hora@valor:
  1180                           	opt stack 0
  1181  00002F                     cambiar_minutos@valor:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x2E
  1185  00002F                     	ds	9
  1186  000038                     imprimir_tecla@tecla:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x37
  1190  000038                     	ds	1
  1191  000039                     mostrar_guardar_password@tecla:
  1192                           	opt stack 0
  1193  000039                     mostrar_guardar_temporal_password@tecla:
  1194                           	opt stack 0
  1195  000039                     mostrar_guardar_nuevo_password@tecla:
  1196                           	opt stack 0
  1197  000039                     confirmar_actualizar_password@tecla:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x38
  1201  000039                     	ds	1
  1202  00003A                     guardar_comando@tecla:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x39
  1206  00003A                     	ds	1
  1207  00003B                     ingresar_comando@key:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x3A
  1211  00003B                     	ds	1
  1212  00003C                     guardar_tecla_presionada@letra:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x3B
  1216  00003C                     	ds	2
  1217  00003E                     guardar_tecla_presionada@i:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x3D
  1221  00003E                     	ds	2
  1222  000040                     leer_teclado@ocultar:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x3F
  1226  000040                     	ds	2
  1227  000042                     ??_leer_teclado:
  1228                           
  1229                           ; 0 bytes @ 0x41
  1230  000042                     	ds	1
  1231  000043                     leer_teclado@i:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x42
  1235  000043                     	ds	2
  1236  000045                     main@ocultar_teclas:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x44
  1240  000045                     	ds	2
  1241  000047                     main@validacion:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x46
  1245  000047                     	ds	2
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           
  1255 ;;
  1256 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1257 ;;
  1258 ;; *************** function _main *****************
  1259 ;; Defined at:
  1260 ;;		line 234 in file "main.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  validacion      2   70[COMRAM] int 
  1265 ;;  ocultar_tecl    2   68[COMRAM] int 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  2  255[None  ] int 
  1268 ;; Registers used:
  1269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1276 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1278 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1279 ;;Total ram usage:        4 bytes
  1280 ;; Hardware stack levels required when called:    9
  1281 ;; This function calls:
  1282 ;;		_Read_RTC
  1283 ;;		_Setup
  1284 ;;		_cambiar_fecha
  1285 ;;		_cambiar_horario
  1286 ;;		_cambiar_password
  1287 ;;		_caratula
  1288 ;;		_ingresar_password
  1289 ;;		_leer_teclado
  1290 ;;		_restaurar_comando
  1291 ;;		_validar_comando
  1292 ;; This function is called by:
  1293 ;;		Startup code after reset
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text0
  1298  00F42A                     __ptext0:
  1299                           	opt stack 0
  1300  00F42A                     _main:
  1301                           	opt stack 22
  1302                           
  1303                           ;main.c: 236: Setup();
  1304                           
  1305                           ; BSR set to: 15
  1306                           ;incstack = 0
  1307  00F42A  EC5A  F072         	call	_Setup	;wreg free
  1308                           
  1309                           ;main.c: 237: restaurar_comando();
  1310  00F42E  ECA5  F070         	call	_restaurar_comando	;wreg free
  1311                           
  1312                           ;main.c: 239: int ocultar_teclas = 1;
  1313  00F432  0E00               	movlw	0
  1314  00F434  6E46               	movwf	main@ocultar_teclas+1,c
  1315  00F436  0E01               	movlw	1
  1316  00F438  6E45               	movwf	main@ocultar_teclas,c
  1317  00F43A  D000               	goto	l4022
  1318  00F43C                     l4022:
  1319                           
  1320                           ;main.c: 243: {
  1321                           ;main.c: 244: Read_RTC();
  1322  00F43C  EC29  F07C         	call	_Read_RTC	;wreg free
  1323                           
  1324                           ;main.c: 246: if (!autorizado){
  1325  00F440  0100               	movlb	0	; () banked
  1326  00F442  5193               	movf	_autorizado& (0+255),w,b
  1327  00F444  0100               	movlb	0	; () banked
  1328  00F446  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  1329  00F448  A4D8               	btfss	status,2,c
  1330  00F44A  D00D               	goto	l4032
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;main.c: 247: puntero_funcion = mostrar_guardar_password;
  1334  00F44C  0ECE               	movlw	low _mostrar_guardar_password
  1335  00F44E  6E49               	movwf	_puntero_funcion,c
  1336  00F450  0EE2               	movlw	high _mostrar_guardar_password
  1337  00F452  6E4A               	movwf	_puntero_funcion+1,c
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 248: leer_teclado(ocultar_teclas);
  1341  00F454  C045  F040         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1342  00F458  C046  F041         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1343  00F45C  EC88  F07A         	call	_leer_teclado	;wreg free
  1344                           
  1345                           ;main.c: 249: ingresar_password();
  1346  00F460  ECA2  F079         	call	_ingresar_password	;wreg free
  1347                           
  1348                           ;main.c: 251: }else{
  1349  00F464  D7EB               	goto	l4022
  1350  00F466                     l4032:
  1351                           
  1352                           ;main.c: 252: puntero_funcion = &ingresar_comando;
  1353  00F466  0ECC               	movlw	low _ingresar_comando
  1354  00F468  6E49               	movwf	_puntero_funcion,c
  1355  00F46A  0EE0               	movlw	high _ingresar_comando
  1356  00F46C  6E4A               	movwf	_puntero_funcion+1,c
  1357                           
  1358                           ;main.c: 254: validar_comando("00",&validacion);
  1359  00F46E  0EDC               	movlw	low STR_23
  1360  00F470  6E01               	movwf	validar_comando@candidato,c
  1361  00F472  0EFF               	movlw	high STR_23
  1362  00F474  6E02               	movwf	validar_comando@candidato+1,c
  1363  00F476  0E47               	movlw	low main@validacion
  1364  00F478  6E03               	movwf	validar_comando@validar,c
  1365  00F47A  0E00               	movlw	high main@validacion
  1366  00F47C  6E04               	movwf	validar_comando@validar+1,c
  1367  00F47E  ECED  F074         	call	_validar_comando	;wreg free
  1368                           
  1369                           ;main.c: 255: if(validacion)
  1370  00F482  5047               	movf	main@validacion,w,c
  1371  00F484  1048               	iorwf	main@validacion+1,w,c
  1372  00F486  B4D8               	btfsc	status,2,c
  1373  00F488  D003               	goto	l4040
  1374                           
  1375                           ;main.c: 256: cambiar_password();
  1376  00F48A  EC65  F078         	call	_cambiar_password	;wreg free
  1377  00F48E  D000               	goto	l4040
  1378  00F490                     l4040:
  1379                           
  1380                           ;main.c: 258: validar_comando("xx",&validacion);
  1381  00F490  0EE8               	movlw	low STR_11
  1382  00F492  6E01               	movwf	validar_comando@candidato,c
  1383  00F494  0EFF               	movlw	high STR_11
  1384  00F496  6E02               	movwf	validar_comando@candidato+1,c
  1385  00F498  0E47               	movlw	low main@validacion
  1386  00F49A  6E03               	movwf	validar_comando@validar,c
  1387  00F49C  0E00               	movlw	high main@validacion
  1388  00F49E  6E04               	movwf	validar_comando@validar+1,c
  1389  00F4A0  ECED  F074         	call	_validar_comando	;wreg free
  1390                           
  1391                           ;main.c: 259: if(validacion)
  1392  00F4A4  5047               	movf	main@validacion,w,c
  1393  00F4A6  1048               	iorwf	main@validacion+1,w,c
  1394  00F4A8  B4D8               	btfsc	status,2,c
  1395  00F4AA  D007               	goto	l4046
  1396                           
  1397                           ;main.c: 260: caratula("Welcome");
  1398  00F4AC  0ECB               	movlw	low STR_12
  1399  00F4AE  6E24               	movwf	caratula@titulo,c
  1400  00F4B0  0EFF               	movlw	high STR_12
  1401  00F4B2  6E25               	movwf	caratula@titulo+1,c
  1402  00F4B4  EC37  F079         	call	_caratula	;wreg free
  1403  00F4B8  D000               	goto	l4046
  1404  00F4BA                     l4046:
  1405                           
  1406                           ;main.c: 262: validar_comando("01",&validacion);
  1407  00F4BA  0EDF               	movlw	low STR_26
  1408  00F4BC  6E01               	movwf	validar_comando@candidato,c
  1409  00F4BE  0EFF               	movlw	high STR_26
  1410  00F4C0  6E02               	movwf	validar_comando@candidato+1,c
  1411  00F4C2  0E47               	movlw	low main@validacion
  1412  00F4C4  6E03               	movwf	validar_comando@validar,c
  1413  00F4C6  0E00               	movlw	high main@validacion
  1414  00F4C8  6E04               	movwf	validar_comando@validar+1,c
  1415  00F4CA  ECED  F074         	call	_validar_comando	;wreg free
  1416                           
  1417                           ;main.c: 263: if(validacion)
  1418  00F4CE  5047               	movf	main@validacion,w,c
  1419  00F4D0  1048               	iorwf	main@validacion+1,w,c
  1420  00F4D2  B4D8               	btfsc	status,2,c
  1421  00F4D4  D003               	goto	l4052
  1422                           
  1423                           ;main.c: 264: cambiar_fecha();
  1424  00F4D6  EC01  F076         	call	_cambiar_fecha	;wreg free
  1425  00F4DA  D000               	goto	l4052
  1426  00F4DC                     l4052:
  1427                           
  1428                           ;main.c: 266: validar_comando("02",&validacion);
  1429  00F4DC  0EE2               	movlw	low STR_27
  1430  00F4DE  6E01               	movwf	validar_comando@candidato,c
  1431  00F4E0  0EFF               	movlw	high STR_27
  1432  00F4E2  6E02               	movwf	validar_comando@candidato+1,c
  1433  00F4E4  0E47               	movlw	low main@validacion
  1434  00F4E6  6E03               	movwf	validar_comando@validar,c
  1435  00F4E8  0E00               	movlw	high main@validacion
  1436  00F4EA  6E04               	movwf	validar_comando@validar+1,c
  1437  00F4EC  ECED  F074         	call	_validar_comando	;wreg free
  1438                           
  1439                           ;main.c: 267: if(validacion)
  1440  00F4F0  5047               	movf	main@validacion,w,c
  1441  00F4F2  1048               	iorwf	main@validacion+1,w,c
  1442  00F4F4  B4D8               	btfsc	status,2,c
  1443  00F4F6  D003               	goto	l4058
  1444                           
  1445                           ;main.c: 268: cambiar_horario();
  1446  00F4F8  EC22  F073         	call	_cambiar_horario	;wreg free
  1447  00F4FC  D000               	goto	l4058
  1448  00F4FE                     l4058:
  1449                           
  1450                           ;main.c: 270: leer_teclado(ocultar_teclas);
  1451  00F4FE  C045  F040         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1452  00F502  C046  F041         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1453  00F506  EC88  F07A         	call	_leer_teclado	;wreg free
  1454  00F50A  D798               	goto	l4022
  1455                           
  1456                           ;main.c: 271: }
  1457                           ;main.c: 272: }
  1458                           ;main.c: 273: return 0;
  1459                           ;	Return value of _main is never used
  1460  00F50C  EF00  F000         	goto	start
  1461  00F510                     __end_of_main:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           postdec1	equ	0xFE5
  1470                           fsr1l	equ	0xFE1
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function _validar_comando *****************
  1474 ;; Defined at:
  1475 ;;		line 29 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1478 ;;		 -> STR_27(3), STR_26(3), STR_24(3), STR_23(3), 
  1479 ;;		 -> STR_11(3), 
  1480 ;;  validar         2    2[COMRAM] PTR int 
  1481 ;;		 -> main@validacion(2), 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  i               2    7[COMRAM] int 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;		None               void
  1486 ;; Registers used:
  1487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1495 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1496 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1497 ;;Total ram usage:        9 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; This function calls:
  1500 ;;		Nothing
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;;		_mostrar_caratula
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text1
  1508  00E9DA                     __ptext1:
  1509                           	opt stack 0
  1510  00E9DA                     _validar_comando:
  1511                           	opt stack 30
  1512                           
  1513                           ;teclado.c: 31: *validar=1;
  1514                           
  1515                           ;incstack = 0
  1516  00E9DA  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1517  00E9DE  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1518  00E9E2  0E01               	movlw	1
  1519  00E9E4  6EDE               	movwf	postinc2,c
  1520  00E9E6  0E00               	movlw	0
  1521  00E9E8  6EDD               	movwf	postdec2,c
  1522                           
  1523                           ;teclado.c: 32: int i = 0;
  1524  00E9EA  0E00               	movlw	0
  1525  00E9EC  6E09               	movwf	validar_comando@i+1,c
  1526  00E9EE  0E00               	movlw	0
  1527  00E9F0  6E08               	movwf	validar_comando@i,c
  1528                           
  1529                           ;teclado.c: 33: while (i < 2 && *validar == 1){
  1530  00E9F2  D023               	goto	l3840
  1531  00E9F4                     l3834:
  1532                           
  1533                           ;teclado.c: 34: if (comando[i] != *(candidato+i))
  1534  00E9F4  0ED5               	movlw	low _comando
  1535  00E9F6  2408               	addwf	validar_comando@i,w,c
  1536  00E9F8  6ED9               	movwf	fsr2l,c
  1537  00E9FA  0E00               	movlw	high _comando
  1538  00E9FC  2009               	addwfc	validar_comando@i+1,w,c
  1539  00E9FE  6EDA               	movwf	fsr2h,c
  1540  00EA00  50DF               	movf	indf2,w,c
  1541  00EA02  6E05               	movwf	??_validar_comando& (0+255),c
  1542  00EA04  5008               	movf	validar_comando@i,w,c
  1543  00EA06  2401               	addwf	validar_comando@candidato,w,c
  1544  00EA08  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1545  00EA0A  5009               	movf	validar_comando@i+1,w,c
  1546  00EA0C  2002               	addwfc	validar_comando@candidato+1,w,c
  1547  00EA0E  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1548  00EA10  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1549  00EA14  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1550  00EA18                     	if	0	;tblptru may be non-zero
  1551  00EA18                     	endif
  1552  00EA18                     	if	0	;tblptru may be non-zero
  1553  00EA18                     	endif
  1554  00EA18  0008               	tblrd		*
  1555  00EA1A  50F5               	movf	tablat,w,c
  1556  00EA1C  1805               	xorwf	??_validar_comando,w,c
  1557  00EA1E  B4D8               	btfsc	status,2,c
  1558  00EA20  D009               	goto	l3838
  1559                           
  1560                           ;teclado.c: 35: *validar = 0;
  1561  00EA22  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1562  00EA26  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1563  00EA2A  0E00               	movlw	0
  1564  00EA2C  6EDE               	movwf	postinc2,c
  1565  00EA2E  0E00               	movlw	0
  1566  00EA30  6EDD               	movwf	postdec2,c
  1567  00EA32  D000               	goto	l3838
  1568  00EA34                     l3838:
  1569                           
  1570                           ;teclado.c: 37: i++;
  1571  00EA34  4A08               	infsnz	validar_comando@i,f,c
  1572  00EA36  2A09               	incf	validar_comando@i+1,f,c
  1573  00EA38  D000               	goto	l3840
  1574  00EA3A                     l3840:
  1575  00EA3A  BE09               	btfsc	validar_comando@i+1,7,c
  1576  00EA3C  D006               	goto	l3842
  1577  00EA3E  5009               	movf	validar_comando@i+1,w,c
  1578  00EA40  E10E               	bnz	l362
  1579  00EA42  0E02               	movlw	2
  1580  00EA44  5C08               	subwf	validar_comando@i,w,c
  1581  00EA46  B0D8               	btfsc	status,0,c
  1582  00EA48  0012               	return	
  1583  00EA4A                     l3842:
  1584  00EA4A  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1585  00EA4E  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1586  00EA52  04DE               	decf	postinc2,w,c
  1587  00EA54  10DE               	iorwf	postinc2,w,c
  1588  00EA56  A4D8               	btfss	status,2,c
  1589  00EA58  0012               	return	
  1590  00EA5A  D7CC               	goto	l3834
  1591  00EA5C  0012               	return	
  1592  00EA5E                     l362:
  1593  00EA5E  0012               	return		;funcret
  1594  00EA60                     __end_of_validar_comando:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1l	equ	0xFE1
  1604                           indf2	equ	0xFDF
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _leer_teclado *****************
  1612 ;; Defined at:
  1613 ;;		line 67 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  ocultar         2   63[COMRAM] int 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  i               2   66[COMRAM] int 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1630 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1631 ;;Total ram usage:        5 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    8
  1634 ;; This function calls:
  1635 ;;		Absolute function
  1636 ;;		_cambiar_anio
  1637 ;;		_cambiar_dia
  1638 ;;		_cambiar_hora
  1639 ;;		_cambiar_mes
  1640 ;;		_cambiar_minutos
  1641 ;;		_confirmar_actualizar_password
  1642 ;;		_guardar_tecla_presionada
  1643 ;;		_ingresar_comando
  1644 ;;		_lcd_putrs
  1645 ;;		_mostrar_guardar_nuevo_password
  1646 ;;		_mostrar_guardar_password
  1647 ;;		_mostrar_guardar_temporal_password
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text2
  1654  00F510                     __ptext2:
  1655                           	opt stack 0
  1656  00F510                     _leer_teclado:
  1657                           	opt stack 22
  1658                           
  1659                           ;teclado.c: 68: int i;
  1660                           ;teclado.c: 69: ocultar_teclas = ocultar;
  1661                           
  1662                           ;incstack = 0
  1663  00F510  C040  F0A1         	movff	leer_teclado@ocultar,_ocultar_teclas
  1664  00F514  C041  F0A2         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1665                           
  1666                           ;teclado.c: 71: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  1667  00F518  8089               	bsf	3977,0,c	;volatile
  1668  00F51A  9289               	bcf	3977,1,c	;volatile
  1669  00F51C  9489               	bcf	3977,2,c	;volatile
  1670  00F51E  9689               	bcf	3977,3,c	;volatile
  1671  00F520  0E00               	movlw	0
  1672  00F522  6E44               	movwf	leer_teclado@i+1,c
  1673  00F524  0E01               	movlw	1
  1674  00F526  6E43               	movwf	leer_teclado@i,c
  1675                           
  1676                           ;teclado.c: 72: guardar_tecla_presionada("A",i);
  1677  00F528  0EEF               	movlw	low STR_31
  1678  00F52A  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1679  00F52C  0EFF               	movlw	high STR_31
  1680  00F52E  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1681  00F530  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1682  00F534  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1683  00F538  EC75  F075         	call	_guardar_tecla_presionada	;wreg free
  1684                           
  1685                           ;teclado.c: 74: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  1686  00F53C  9089               	bcf	3977,0,c	;volatile
  1687  00F53E  8289               	bsf	3977,1,c	;volatile
  1688  00F540  9489               	bcf	3977,2,c	;volatile
  1689  00F542  9689               	bcf	3977,3,c	;volatile
  1690  00F544  0E00               	movlw	0
  1691  00F546  6E44               	movwf	leer_teclado@i+1,c
  1692  00F548  0E04               	movlw	4
  1693  00F54A  6E43               	movwf	leer_teclado@i,c
  1694                           
  1695                           ;teclado.c: 75: guardar_tecla_presionada("B",i);
  1696  00F54C  0EF1               	movlw	low STR_32
  1697  00F54E  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1698  00F550  0EFF               	movlw	high STR_32
  1699  00F552  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1700  00F554  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1701  00F558  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1702  00F55C  EC75  F075         	call	_guardar_tecla_presionada	;wreg free
  1703                           
  1704                           ;teclado.c: 77: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  1705  00F560  9089               	bcf	3977,0,c	;volatile
  1706  00F562  9289               	bcf	3977,1,c	;volatile
  1707  00F564  8489               	bsf	3977,2,c	;volatile
  1708  00F566  9689               	bcf	3977,3,c	;volatile
  1709  00F568  0E00               	movlw	0
  1710  00F56A  6E44               	movwf	leer_teclado@i+1,c
  1711  00F56C  0E07               	movlw	7
  1712  00F56E  6E43               	movwf	leer_teclado@i,c
  1713                           
  1714                           ;teclado.c: 78: guardar_tecla_presionada("C",i);
  1715  00F570  0EF3               	movlw	low STR_33
  1716  00F572  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1717  00F574  0EFF               	movlw	high STR_33
  1718  00F576  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1719  00F578  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1720  00F57C  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1721  00F580  EC75  F075         	call	_guardar_tecla_presionada	;wreg free
  1722                           
  1723                           ;teclado.c: 80: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1724  00F584  9089               	bcf	3977,0,c	;volatile
  1725  00F586  9289               	bcf	3977,1,c	;volatile
  1726  00F588  9489               	bcf	3977,2,c	;volatile
  1727  00F58A  8689               	bsf	3977,3,c	;volatile
  1728                           
  1729                           ;teclado.c: 81: {
  1730                           ;teclado.c: 82: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1731  00F58C  AA80               	btfss	3968,5,c	;volatile
  1732  00F58E  D00B               	goto	l389
  1733  00F590  0E2A               	movlw	42
  1734  00F592  6E4F               	movwf	_key,c
  1735  00F594  0EED               	movlw	low STR_30
  1736  00F596  6E09               	movwf	lcd_putrs@ptr,c
  1737  00F598  0EFF               	movlw	high STR_30
  1738  00F59A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1739  00F59C  ECCA  F072         	call	_lcd_putrs	;wreg free
  1740  00F5A0  D000               	goto	l390
  1741  00F5A2                     l390:
  1742  00F5A2  BA80               	btfsc	3968,5,c	;volatile
  1743  00F5A4  D7FE               	goto	l390
  1744  00F5A6                     l389:
  1745                           
  1746                           ;teclado.c: 83: if (PORTAbits.RA7==1){key=0;puntero_funcion(key);while(PORTAbits.RA7==1)
      +                          {};}
  1747  00F5A6  AE80               	btfss	3968,7,c	;volatile
  1748  00F5A8  D011               	goto	l393
  1749  00F5AA  0E00               	movlw	0
  1750  00F5AC  6E4F               	movwf	_key,c
  1751  00F5AE  D801               	call	u3168
  1752  00F5B0  D00B               	goto	l394
  1753  00F5B2                     u3168:
  1754  00F5B2  0005               	push	
  1755  00F5B4  6EFA               	movwf	pclath,c
  1756  00F5B6  5049               	movf	_puntero_funcion,w,c
  1757  00F5B8  6EFD               	movwf	tosl,c
  1758  00F5BA  504A               	movf	_puntero_funcion+1,w,c
  1759  00F5BC  6EFE               	movwf	tosh,c
  1760  00F5BE  50F8               	movf	tblptru,w,c
  1761  00F5C0  6EFF               	movwf	tosu,c
  1762  00F5C2  50FA               	movf	pclath,w,c
  1763  00F5C4  504F               	movf	_key,w,c
  1764  00F5C6  0012               	return		;indir
  1765  00F5C8                     l394:
  1766  00F5C8  BE80               	btfsc	3968,7,c	;volatile
  1767  00F5CA  D7FE               	goto	l394
  1768  00F5CC                     l393:
  1769                           
  1770                           ;teclado.c: 84: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1771  00F5CC  AC80               	btfss	3968,6,c	;volatile
  1772  00F5CE  D00B               	goto	l397
  1773  00F5D0  0E23               	movlw	35
  1774  00F5D2  6E4F               	movwf	_key,c
  1775  00F5D4  0EEB               	movlw	low STR_35
  1776  00F5D6  6E09               	movwf	lcd_putrs@ptr,c
  1777  00F5D8  0EFF               	movlw	high STR_35
  1778  00F5DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1779  00F5DC  ECCA  F072         	call	_lcd_putrs
  1780  00F5E0  D000               	goto	l398
  1781  00F5E2                     l398:
  1782  00F5E2  BC80               	btfsc	3968,6,c	;volatile
  1783  00F5E4  D7FE               	goto	l398
  1784  00F5E6                     l397:
  1785                           
  1786                           ;teclado.c: 85: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1787  00F5E6  A482               	btfss	3970,2,c	;volatile
  1788  00F5E8  D00D               	goto	l4008
  1789  00F5EA  0E44               	movlw	68
  1790  00F5EC  6E4F               	movwf	_key,c
  1791  00F5EE  0EF5               	movlw	low STR_36
  1792  00F5F0  6E09               	movwf	lcd_putrs@ptr,c
  1793  00F5F2  0EFF               	movlw	high STR_36
  1794  00F5F4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1795  00F5F6  ECCA  F072         	call	_lcd_putrs	;wreg free
  1796  00F5FA  D000               	goto	l402
  1797  00F5FC                     l402:
  1798  00F5FC  A482               	btfss	3970,2,c	;volatile
  1799  00F5FE  D002               	goto	l4008
  1800  00F600  D7FD               	goto	l402
  1801  00F602  D000               	goto	l4008
  1802  00F604                     l4008:
  1803                           
  1804                           ;teclado.c: 86: }
  1805                           ;teclado.c: 87: _delay((unsigned long)((98)*(8000000/4000.0)));
  1806  00F604  0EFF               	movlw	255
  1807  00F606  6E42               	movwf	??_leer_teclado& (0+255),c
  1808  00F608  0E8A               	movlw	138
  1809  00F60A                     u3297:
  1810  00F60A  2EE8               	decfsz	wreg,f,c
  1811  00F60C  D7FE               	goto	u3297
  1812  00F60E  2E42               	decfsz	??_leer_teclado& (0+255),f,c
  1813  00F610  D7FC               	goto	u3297
  1814  00F612  D000               	nop2	
  1815  00F614  0012               	return		;funcret
  1816  00F616                     __end_of_leer_teclado:
  1817                           	opt stack 0
  1818                           tosu	equ	0xFFF
  1819                           tosh	equ	0xFFE
  1820                           tosl	equ	0xFFD
  1821                           pclath	equ	0xFFA
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _guardar_tecla_presionada *****************
  1838 ;; Defined at:
  1839 ;;		line 60 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  letra           2   59[COMRAM] PTR unsigned char 
  1842 ;;		 -> STR_33(2), STR_32(2), STR_31(2), 
  1843 ;;  i               2   61[COMRAM] int 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;		None
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1855 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1859 ;;Total ram usage:        4 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    7
  1862 ;; This function calls:
  1863 ;;		Absolute function
  1864 ;;		_cambiar_anio
  1865 ;;		_cambiar_dia
  1866 ;;		_cambiar_hora
  1867 ;;		_cambiar_mes
  1868 ;;		_cambiar_minutos
  1869 ;;		_confirmar_actualizar_password
  1870 ;;		_ingresar_comando
  1871 ;;		_mostrar_guardar_nuevo_password
  1872 ;;		_mostrar_guardar_password
  1873 ;;		_mostrar_guardar_temporal_password
  1874 ;; This function is called by:
  1875 ;;		_leer_teclado
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text3
  1880  00EAEA                     __ptext3:
  1881                           	opt stack 0
  1882  00EAEA                     _guardar_tecla_presionada:
  1883                           	opt stack 22
  1884                           
  1885                           ;teclado.c: 61: if (PORTAbits.RA5==1){key=i;puntero_funcion(key);while(PORTAbits.RA5==1)
      +                          {};}
  1886                           
  1887                           ;incstack = 0
  1888  00EAEA  AA80               	btfss	3968,5,c	;volatile
  1889  00EAEC  D011               	goto	l373
  1890  00EAEE  C03E  F04F         	movff	guardar_tecla_presionada@i,_key
  1891  00EAF2  D801               	call	u2848
  1892  00EAF4  D00B               	goto	l374
  1893  00EAF6                     u2848:
  1894  00EAF6  0005               	push	
  1895  00EAF8  6EFA               	movwf	pclath,c
  1896  00EAFA  5049               	movf	_puntero_funcion,w,c
  1897  00EAFC  6EFD               	movwf	tosl,c
  1898  00EAFE  504A               	movf	_puntero_funcion+1,w,c
  1899  00EB00  6EFE               	movwf	tosh,c
  1900  00EB02  50F8               	movf	tblptru,w,c
  1901  00EB04  6EFF               	movwf	tosu,c
  1902  00EB06  50FA               	movf	pclath,w,c
  1903  00EB08  504F               	movf	_key,w,c
  1904  00EB0A  0012               	return		;indir
  1905  00EB0C                     l374:
  1906  00EB0C  BA80               	btfsc	3968,5,c	;volatile
  1907  00EB0E  D7FE               	goto	l374
  1908  00EB10                     l373:
  1909                           
  1910                           ;teclado.c: 62: if (PORTAbits.RA7==1){key=(i)+1;puntero_funcion(key);while(PORTAbits.RA7
      +                          ==1){};}
  1911  00EB10  AE80               	btfss	3968,7,c	;volatile
  1912  00EB12  D011               	goto	l377
  1913  00EB14  283E               	incf	guardar_tecla_presionada@i,w,c
  1914  00EB16  6E4F               	movwf	_key,c
  1915  00EB18  D801               	call	u2878
  1916  00EB1A  D00B               	goto	l378
  1917  00EB1C                     u2878:
  1918  00EB1C  0005               	push	
  1919  00EB1E  6EFA               	movwf	pclath,c
  1920  00EB20  5049               	movf	_puntero_funcion,w,c
  1921  00EB22  6EFD               	movwf	tosl,c
  1922  00EB24  504A               	movf	_puntero_funcion+1,w,c
  1923  00EB26  6EFE               	movwf	tosh,c
  1924  00EB28  50F8               	movf	tblptru,w,c
  1925  00EB2A  6EFF               	movwf	tosu,c
  1926  00EB2C  50FA               	movf	pclath,w,c
  1927  00EB2E  504F               	movf	_key,w,c
  1928  00EB30  0012               	return		;indir
  1929  00EB32                     l378:
  1930  00EB32  BE80               	btfsc	3968,7,c	;volatile
  1931  00EB34  D7FE               	goto	l378
  1932  00EB36                     l377:
  1933                           
  1934                           ;teclado.c: 63: if (PORTAbits.RA6==1){key=(i)+2;puntero_funcion(key);while(PORTAbits.RA6
      +                          ==1){};}
  1935  00EB36  AC80               	btfss	3968,6,c	;volatile
  1936  00EB38  D012               	goto	l381
  1937  00EB3A  503E               	movf	guardar_tecla_presionada@i,w,c
  1938  00EB3C  0F02               	addlw	2
  1939  00EB3E  6E4F               	movwf	_key,c
  1940  00EB40  D801               	call	u2908
  1941  00EB42  D00B               	goto	l382
  1942  00EB44                     u2908:
  1943  00EB44  0005               	push	
  1944  00EB46  6EFA               	movwf	pclath,c
  1945  00EB48  5049               	movf	_puntero_funcion,w,c
  1946  00EB4A  6EFD               	movwf	tosl,c
  1947  00EB4C  504A               	movf	_puntero_funcion+1,w,c
  1948  00EB4E  6EFE               	movwf	tosh,c
  1949  00EB50  50F8               	movf	tblptru,w,c
  1950  00EB52  6EFF               	movwf	tosu,c
  1951  00EB54  50FA               	movf	pclath,w,c
  1952  00EB56  504F               	movf	_key,w,c
  1953  00EB58  0012               	return		;indir
  1954  00EB5A                     l382:
  1955  00EB5A  BC80               	btfsc	3968,6,c	;volatile
  1956  00EB5C  D7FE               	goto	l382
  1957  00EB5E                     l381:
  1958                           
  1959                           ;teclado.c: 64: if (PORTCbits.RC2==1){key=letra[0]; }
  1960  00EB5E  A482               	btfss	3970,2,c	;volatile
  1961  00EB60  0012               	return	
  1962  00EB62  C03C  FFF6         	movff	guardar_tecla_presionada@letra,tblptrl
  1963  00EB66  C03D  FFF7         	movff	guardar_tecla_presionada@letra+1,tblptrh
  1964  00EB6A                     	if	0	;tblptru may be non-zero
  1965  00EB6A                     	endif
  1966  00EB6A                     	if	0	;tblptru may be non-zero
  1967  00EB6A                     	endif
  1968  00EB6A  0008               	tblrd		*
  1969  00EB6C  CFF5 F04F          	movff	tablat,_key
  1970  00EB70  0012               	return	
  1971  00EB72  0012               	return		;funcret
  1972  00EB74                     __end_of_guardar_tecla_presionada:
  1973                           	opt stack 0
  1974                           tosu	equ	0xFFF
  1975                           tosh	equ	0xFFE
  1976                           tosl	equ	0xFFD
  1977                           pclath	equ	0xFFA
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postdec1	equ	0xFE5
  1985                           fsr1l	equ	0xFE1
  1986                           indf2	equ	0xFDF
  1987                           postinc2	equ	0xFDE
  1988                           postdec2	equ	0xFDD
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _ingresar_comando *****************
  1994 ;; Defined at:
  1995 ;;		line 144 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  key             1    wreg     unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  key             1   58[COMRAM] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;		None               void
  2002 ;; Registers used:
  2003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2013 ;;Total ram usage:        1 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    3
  2016 ;; This function calls:
  2017 ;;		_guardar_comando
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;;		_guardar_tecla_presionada
  2021 ;;		_leer_teclado
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text4
  2026  00E0CC                     __ptext4:
  2027                           	opt stack 0
  2028  00E0CC                     _ingresar_comando:
  2029                           	opt stack 26
  2030                           
  2031                           ;incstack = 0
  2032                           ;ingresar_comando@key stored from wreg
  2033  00E0CC  6E3B               	movwf	ingresar_comando@key,c
  2034                           
  2035                           ;main.c: 145: guardar_comando(key);
  2036  00E0CE  503B               	movf	ingresar_comando@key,w,c
  2037  00E0D0  EC8A  F073         	call	_guardar_comando
  2038  00E0D4  0012               	return		;funcret
  2039  00E0D6                     __end_of_ingresar_comando:
  2040                           	opt stack 0
  2041                           tosu	equ	0xFFF
  2042                           tosh	equ	0xFFE
  2043                           tosl	equ	0xFFD
  2044                           pclath	equ	0xFFA
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           postinc0	equ	0xFEE
  2050                           wreg	equ	0xFE8
  2051                           postdec1	equ	0xFE5
  2052                           fsr1l	equ	0xFE1
  2053                           indf2	equ	0xFDF
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _confirmar_actualizar_password *****************
  2061 ;; Defined at:
  2062 ;;		line 138 in file "main.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  tecla           1    wreg     unsigned char 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  tecla           1   56[COMRAM] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;		None               void
  2069 ;; Registers used:
  2070 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2080 ;;Total ram usage:        1 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    6
  2083 ;; This function calls:
  2084 ;;		_imprimir_tecla
  2085 ;;		_sprintf
  2086 ;; This function is called by:
  2087 ;;		_cambiar_password
  2088 ;;		_guardar_tecla_presionada
  2089 ;;		_leer_teclado
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text5
  2094  00E22A                     __ptext5:
  2095                           	opt stack 0
  2096  00E22A                     _confirmar_actualizar_password:
  2097                           	opt stack 22
  2098                           
  2099                           ;incstack = 0
  2100                           ;confirmar_actualizar_password@tecla stored from wreg
  2101  00E22A  6E39               	movwf	confirmar_actualizar_password@tecla,c
  2102                           
  2103                           ;main.c: 140: imprimir_tecla(tecla);
  2104  00E22C  5039               	movf	confirmar_actualizar_password@tecla,w,c
  2105  00E22E  ECCE  F071         	call	_imprimir_tecla
  2106                           
  2107                           ;main.c: 141: sprintf(buffer2,"%01u",tecla);
  2108  00E232  0EA7               	movlw	low _buffer2
  2109  00E234  6E0D               	movwf	sprintf@sp,c
  2110  00E236  0E00               	movlw	high _buffer2
  2111  00E238  6E0E               	movwf	sprintf@sp+1,c
  2112  00E23A  0ED3               	movlw	low STR_7
  2113  00E23C  6E0F               	movwf	sprintf@f,c
  2114  00E23E  0EFF               	movlw	high STR_7
  2115  00E240  6E10               	movwf	sprintf@f+1,c
  2116  00E242  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  2117  00E246  6A12               	clrf	?_sprintf+5,c
  2118  00E248  EC2F  F07E         	call	_sprintf	;wreg free
  2119  00E24C  0012               	return		;funcret
  2120  00E24E                     __end_of_confirmar_actualizar_password:
  2121                           	opt stack 0
  2122                           tosu	equ	0xFFF
  2123                           tosh	equ	0xFFE
  2124                           tosl	equ	0xFFD
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           indf2	equ	0xFDF
  2135                           postinc2	equ	0xFDE
  2136                           postdec2	equ	0xFDD
  2137                           fsr2h	equ	0xFDA
  2138                           fsr2l	equ	0xFD9
  2139                           status	equ	0xFD8
  2140                           
  2141 ;; *************** function _mostrar_guardar_nuevo_password *****************
  2142 ;; Defined at:
  2143 ;;		line 130 in file "main.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;  tecla           1    wreg     unsigned char 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  tecla           1   56[COMRAM] unsigned char 
  2148 ;; Return value:  Size  Location     Type
  2149 ;;		None               void
  2150 ;; Registers used:
  2151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2161 ;;Total ram usage:        1 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    6
  2164 ;; This function calls:
  2165 ;;		_guardar_nuevo_password
  2166 ;;		_imprimir_tecla
  2167 ;;		_sprintf
  2168 ;; This function is called by:
  2169 ;;		_cambiar_password
  2170 ;;		_guardar_tecla_presionada
  2171 ;;		_leer_teclado
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           	psect	text6
  2176  00E2FA                     __ptext6:
  2177                           	opt stack 0
  2178  00E2FA                     _mostrar_guardar_nuevo_password:
  2179                           	opt stack 23
  2180                           
  2181                           ;incstack = 0
  2182                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  2183  00E2FA  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  2184                           
  2185                           ;main.c: 132: imprimir_tecla(tecla);
  2186  00E2FC  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  2187  00E2FE  ECCE  F071         	call	_imprimir_tecla
  2188                           
  2189                           ;main.c: 133: sprintf(buffer2,"%01u",tecla);
  2190  00E302  0EA7               	movlw	low _buffer2
  2191  00E304  6E0D               	movwf	sprintf@sp,c
  2192  00E306  0E00               	movlw	high _buffer2
  2193  00E308  6E0E               	movwf	sprintf@sp+1,c
  2194  00E30A  0ED3               	movlw	low STR_7
  2195  00E30C  6E0F               	movwf	sprintf@f,c
  2196  00E30E  0EFF               	movlw	high STR_7
  2197  00E310  6E10               	movwf	sprintf@f+1,c
  2198  00E312  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  2199  00E316  6A12               	clrf	?_sprintf+5,c
  2200  00E318  EC2F  F07E         	call	_sprintf	;wreg free
  2201                           
  2202                           ;main.c: 134: guardar_nuevo_password(*buffer2);
  2203  00E31C  0100               	movlb	0	; () banked
  2204  00E31E  51A7               	movf	_buffer2& (0+255),w,b
  2205  00E320  ECF1  F071         	call	_guardar_nuevo_password
  2206  00E324  0012               	return		;funcret
  2207  00E326                     __end_of_mostrar_guardar_nuevo_password:
  2208                           	opt stack 0
  2209                           tosu	equ	0xFFF
  2210                           tosh	equ	0xFFE
  2211                           tosl	equ	0xFFD
  2212                           pclath	equ	0xFFA
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postdec1	equ	0xFE5
  2220                           fsr1l	equ	0xFE1
  2221                           indf2	equ	0xFDF
  2222                           postinc2	equ	0xFDE
  2223                           postdec2	equ	0xFDD
  2224                           fsr2h	equ	0xFDA
  2225                           fsr2l	equ	0xFD9
  2226                           status	equ	0xFD8
  2227                           
  2228 ;; *************** function _mostrar_guardar_password *****************
  2229 ;; Defined at:
  2230 ;;		line 114 in file "main.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  tecla           1    wreg     unsigned char 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  tecla           1   56[COMRAM] unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2248 ;;Total ram usage:        1 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    6
  2251 ;; This function calls:
  2252 ;;		_guardar_current_password
  2253 ;;		_imprimir_tecla
  2254 ;;		_sprintf
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;;		_guardar_tecla_presionada
  2258 ;;		_leer_teclado
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text7
  2263  00E2CE                     __ptext7:
  2264                           	opt stack 0
  2265  00E2CE                     _mostrar_guardar_password:
  2266                           	opt stack 23
  2267                           
  2268                           ;incstack = 0
  2269                           ;mostrar_guardar_password@tecla stored from wreg
  2270  00E2CE  6E39               	movwf	mostrar_guardar_password@tecla,c
  2271                           
  2272                           ;main.c: 116: imprimir_tecla(tecla);
  2273  00E2D0  5039               	movf	mostrar_guardar_password@tecla,w,c
  2274  00E2D2  ECCE  F071         	call	_imprimir_tecla
  2275                           
  2276                           ;main.c: 117: sprintf(buffer2,"%01u",tecla);
  2277  00E2D6  0EA7               	movlw	low _buffer2
  2278  00E2D8  6E0D               	movwf	sprintf@sp,c
  2279  00E2DA  0E00               	movlw	high _buffer2
  2280  00E2DC  6E0E               	movwf	sprintf@sp+1,c
  2281  00E2DE  0ED3               	movlw	low STR_7
  2282  00E2E0  6E0F               	movwf	sprintf@f,c
  2283  00E2E2  0EFF               	movlw	high STR_7
  2284  00E2E4  6E10               	movwf	sprintf@f+1,c
  2285  00E2E6  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2286  00E2EA  6A12               	clrf	?_sprintf+5,c
  2287  00E2EC  EC2F  F07E         	call	_sprintf	;wreg free
  2288                           
  2289                           ;main.c: 118: guardar_current_password(*buffer2);
  2290  00E2F0  0100               	movlb	0	; () banked
  2291  00E2F2  51A7               	movf	_buffer2& (0+255),w,b
  2292  00E2F4  EC14  F072         	call	_guardar_current_password
  2293  00E2F8  0012               	return		;funcret
  2294  00E2FA                     __end_of_mostrar_guardar_password:
  2295                           	opt stack 0
  2296                           tosu	equ	0xFFF
  2297                           tosh	equ	0xFFE
  2298                           tosl	equ	0xFFD
  2299                           pclath	equ	0xFFA
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           postinc0	equ	0xFEE
  2305                           wreg	equ	0xFE8
  2306                           postdec1	equ	0xFE5
  2307                           fsr1l	equ	0xFE1
  2308                           indf2	equ	0xFDF
  2309                           postinc2	equ	0xFDE
  2310                           postdec2	equ	0xFDD
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _cambiar_hora *****************
  2316 ;; Defined at:
  2317 ;;		line 30 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  tecla           1    wreg     unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  tecla           1   43[COMRAM] unsigned char 
  2322 ;;  i               2   44[COMRAM] int 
  2323 ;;  valor           2   46[COMRAM] int 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;Total ram usage:        6 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		_Write_RTC
  2342 ;;		_convertir_a_int_hora
  2343 ;;		_guardar_elemento_hora
  2344 ;;		_inicializar_hora
  2345 ;;		_lcd_gotoxy
  2346 ;;		_lcd_putrs
  2347 ;;		_restaurar_comando
  2348 ;; This function is called by:
  2349 ;;		_cambiar_horario
  2350 ;;		_guardar_tecla_presionada
  2351 ;;		_leer_teclado
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text8
  2356  00EE96                     __ptext8:
  2357                           	opt stack 0
  2358  00EE96                     _cambiar_hora:
  2359                           	opt stack 23
  2360                           
  2361                           ;incstack = 0
  2362                           ;cambiar_hora@tecla stored from wreg
  2363  00EE96  6E2C               	movwf	cambiar_hora@tecla,c
  2364                           
  2365                           ;hora.c: 31: int valor = 0;
  2366  00EE98  0E00               	movlw	0
  2367  00EE9A  6E30               	movwf	cambiar_hora@valor+1,c
  2368  00EE9C  0E00               	movlw	0
  2369  00EE9E  6E2F               	movwf	cambiar_hora@valor,c
  2370                           
  2371                           ;hora.c: 33: if (tamanio_hora < 3 - 1){
  2372  00EEA0  BE59               	btfsc	_tamanio_hora+1,7,c
  2373  00EEA2  D006               	goto	l3498
  2374  00EEA4  5059               	movf	_tamanio_hora+1,w,c
  2375  00EEA6  E11B               	bnz	l3504
  2376  00EEA8  0E02               	movlw	2
  2377  00EEAA  5C58               	subwf	_tamanio_hora,w,c
  2378  00EEAC  B0D8               	btfsc	status,0,c
  2379  00EEAE  D017               	goto	l3504
  2380  00EEB0                     l3498:
  2381                           
  2382                           ;hora.c: 34: guardar_elemento_hora(tecla,hour,&tamanio_hora);
  2383  00EEB0  0EC2               	movlw	low _hour
  2384  00EEB2  6E24               	movwf	guardar_elemento_hora@array,c
  2385  00EEB4  0E00               	movlw	high _hour
  2386  00EEB6  6E25               	movwf	guardar_elemento_hora@array+1,c
  2387  00EEB8  0E58               	movlw	low _tamanio_hora
  2388  00EEBA  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  2389  00EEBC  0E00               	movlw	high _tamanio_hora
  2390  00EEBE  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  2391  00EEC0  502C               	movf	cambiar_hora@tecla,w,c
  2392  00EEC2  ECFC  F073         	call	_guardar_elemento_hora
  2393                           
  2394                           ;hora.c: 35: lcd_gotoxy(1,2);
  2395  00EEC6  0E02               	movlw	2
  2396  00EEC8  6E05               	movwf	lcd_gotoxy@y,c
  2397  00EECA  0E01               	movlw	1
  2398  00EECC  EC03  F071         	call	_lcd_gotoxy
  2399                           
  2400                           ;hora.c: 36: lcd_putrs(hour);
  2401  00EED0  0EC2               	movlw	low _hour
  2402  00EED2  6E09               	movwf	lcd_putrs@ptr,c
  2403  00EED4  0E00               	movlw	high _hour
  2404  00EED6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2405  00EED8  ECCA  F072         	call	_lcd_putrs	;wreg free
  2406  00EEDC  D000               	goto	l3504
  2407  00EEDE                     l3504:
  2408                           
  2409                           ;hora.c: 37: }
  2410                           ;hora.c: 39: if (tamanio_hora >= 3 - 1){
  2411  00EEDE  BE59               	btfsc	_tamanio_hora+1,7,c
  2412  00EEE0  0012               	return	
  2413  00EEE2  5059               	movf	_tamanio_hora+1,w,c
  2414  00EEE4  E104               	bnz	u2570
  2415  00EEE6  0E02               	movlw	2
  2416  00EEE8  5C58               	subwf	_tamanio_hora,w,c
  2417  00EEEA  A0D8               	btfss	status,0,c
  2418  00EEEC  0012               	return	
  2419  00EEEE                     u2570:
  2420                           
  2421                           ;hora.c: 40: convertir_a_int_hora(hour,&valor);
  2422  00EEEE  0EC2               	movlw	low _hour
  2423  00EEF0  6E0E               	movwf	convertir_a_int_hora@array,c
  2424  00EEF2  0E00               	movlw	high _hour
  2425  00EEF4  6E0F               	movwf	convertir_a_int_hora@array+1,c
  2426  00EEF6  0E2F               	movlw	low cambiar_hora@valor
  2427  00EEF8  6E10               	movwf	convertir_a_int_hora@valor,c
  2428  00EEFA  0E00               	movlw	high cambiar_hora@valor
  2429  00EEFC  6E11               	movwf	convertir_a_int_hora@valor+1,c
  2430  00EEFE  ECC3  F070         	call	_convertir_a_int_hora	;wreg free
  2431                           
  2432                           ;hora.c: 41: hora = valor;
  2433  00EF02  C02F  F0E0         	movff	cambiar_hora@valor,_hora
  2434  00EF06  C030  F0E1         	movff	cambiar_hora@valor+1,_hora+1
  2435                           
  2436                           ;hora.c: 42: Write_RTC();
  2437  00EF0A  EC67  F07D         	call	_Write_RTC	;wreg free
  2438                           
  2439                           ;hora.c: 44: restaurar_comando();
  2440  00EF0E  ECA5  F070         	call	_restaurar_comando	;wreg free
  2441                           
  2442                           ;hora.c: 45: inicializar_hora();
  2443  00EF12  ECD2  F070         	call	_inicializar_hora	;wreg free
  2444                           
  2445                           ;hora.c: 46: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2446  00EF16  0E00               	movlw	0
  2447  00EF18  6E2E               	movwf	cambiar_hora@i+1,c
  2448  00EF1A  0E00               	movlw	0
  2449  00EF1C  6E2D               	movwf	cambiar_hora@i,c
  2450  00EF1E                     l3516:
  2451  00EF1E  BE2E               	btfsc	cambiar_hora@i+1,7,c
  2452  00EF20  D008               	goto	l3520
  2453  00EF22  502E               	movf	cambiar_hora@i+1,w,c
  2454  00EF24  E112               	bnz	l753
  2455  00EF26  0E04               	movlw	4
  2456  00EF28  5C2D               	subwf	cambiar_hora@i,w,c
  2457  00EF2A  B0D8               	btfsc	status,0,c
  2458  00EF2C  0012               	return	
  2459  00EF2E  D001               	goto	l3520
  2460  00EF30  0012               	return	
  2461  00EF32                     l3520:
  2462  00EF32  0EFF               	movlw	255
  2463  00EF34  6E2B               	movwf	??_cambiar_hora& (0+255),c
  2464  00EF36  0E8A               	movlw	138
  2465  00EF38                     u3307:
  2466  00EF38  2EE8               	decfsz	wreg,f,c
  2467  00EF3A  D7FE               	goto	u3307
  2468  00EF3C  2E2B               	decfsz	??_cambiar_hora& (0+255),f,c
  2469  00EF3E  D7FC               	goto	u3307
  2470  00EF40  D000               	nop2	
  2471  00EF42  4A2D               	infsnz	cambiar_hora@i,f,c
  2472  00EF44  2A2E               	incf	cambiar_hora@i+1,f,c
  2473  00EF46  D7EB               	goto	l3516
  2474  00EF48  0012               	return	
  2475  00EF4A                     l753:
  2476  00EF4A  0012               	return		;funcret
  2477  00EF4C                     __end_of_cambiar_hora:
  2478                           	opt stack 0
  2479                           tosu	equ	0xFFF
  2480                           tosh	equ	0xFFE
  2481                           tosl	equ	0xFFD
  2482                           pclath	equ	0xFFA
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           postdec1	equ	0xFE5
  2490                           fsr1l	equ	0xFE1
  2491                           indf2	equ	0xFDF
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _cambiar_minutos *****************
  2499 ;; Defined at:
  2500 ;;		line 50 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  tecla           1    wreg     unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  tecla           1   43[COMRAM] unsigned char 
  2505 ;;  i               2   44[COMRAM] int 
  2506 ;;  valor           2   46[COMRAM] int 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;		None               void
  2509 ;; Registers used:
  2510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2517 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2519 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2520 ;;Total ram usage:        6 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    5
  2523 ;; This function calls:
  2524 ;;		_Write_RTC
  2525 ;;		_convertir_a_int_hora
  2526 ;;		_guardar_elemento_hora
  2527 ;;		_lcd_gotoxy
  2528 ;;		_lcd_putrs
  2529 ;; This function is called by:
  2530 ;;		_cambiar_horario
  2531 ;;		_guardar_tecla_presionada
  2532 ;;		_leer_teclado
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text9
  2537  00F00A                     __ptext9:
  2538                           	opt stack 0
  2539  00F00A                     _cambiar_minutos:
  2540                           	opt stack 23
  2541                           
  2542                           ;incstack = 0
  2543                           ;cambiar_minutos@tecla stored from wreg
  2544  00F00A  6E2C               	movwf	cambiar_minutos@tecla,c
  2545                           
  2546                           ;hora.c: 52: int valor = 0;
  2547  00F00C  0E00               	movlw	0
  2548  00F00E  6E30               	movwf	cambiar_minutos@valor+1,c
  2549  00F010  0E00               	movlw	0
  2550  00F012  6E2F               	movwf	cambiar_minutos@valor,c
  2551                           
  2552                           ;hora.c: 54: if (tamanio_minutos < 3 - 1 && tamanio_hora == 0){
  2553  00F014  BE5D               	btfsc	_tamanio_minutos+1,7,c
  2554  00F016  D006               	goto	l3528
  2555  00F018  505D               	movf	_tamanio_minutos+1,w,c
  2556  00F01A  E11F               	bnz	l3536
  2557  00F01C  0E02               	movlw	2
  2558  00F01E  5C5C               	subwf	_tamanio_minutos,w,c
  2559  00F020  B0D8               	btfsc	status,0,c
  2560  00F022  D01B               	goto	l3536
  2561  00F024                     l3528:
  2562  00F024  5058               	movf	_tamanio_hora,w,c
  2563  00F026  1059               	iorwf	_tamanio_hora+1,w,c
  2564  00F028  A4D8               	btfss	status,2,c
  2565  00F02A  D017               	goto	l3536
  2566                           
  2567                           ;hora.c: 55: guardar_elemento_hora(tecla,minutes,&tamanio_minutos);
  2568  00F02C  0EC5               	movlw	low _minutes
  2569  00F02E  6E24               	movwf	guardar_elemento_hora@array,c
  2570  00F030  0E00               	movlw	high _minutes
  2571  00F032  6E25               	movwf	guardar_elemento_hora@array+1,c
  2572  00F034  0E5C               	movlw	low _tamanio_minutos
  2573  00F036  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  2574  00F038  0E00               	movlw	high _tamanio_minutos
  2575  00F03A  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  2576  00F03C  502C               	movf	cambiar_minutos@tecla,w,c
  2577  00F03E  ECFC  F073         	call	_guardar_elemento_hora
  2578                           
  2579                           ;hora.c: 56: lcd_gotoxy(1,2);
  2580  00F042  0E02               	movlw	2
  2581  00F044  6E05               	movwf	lcd_gotoxy@y,c
  2582  00F046  0E01               	movlw	1
  2583  00F048  EC03  F071         	call	_lcd_gotoxy
  2584                           
  2585                           ;hora.c: 57: lcd_putrs(minutes);
  2586  00F04C  0EC5               	movlw	low _minutes
  2587  00F04E  6E09               	movwf	lcd_putrs@ptr,c
  2588  00F050  0E00               	movlw	high _minutes
  2589  00F052  6E0A               	movwf	lcd_putrs@ptr+1,c
  2590  00F054  ECCA  F072         	call	_lcd_putrs	;wreg free
  2591  00F058  D000               	goto	l3536
  2592  00F05A                     l3536:
  2593                           
  2594                           ;hora.c: 58: }
  2595                           ;hora.c: 60: if (tamanio_minutos >= 3 - 1){
  2596  00F05A  BE5D               	btfsc	_tamanio_minutos+1,7,c
  2597  00F05C  0012               	return	
  2598  00F05E  505D               	movf	_tamanio_minutos+1,w,c
  2599  00F060  E104               	bnz	u2620
  2600  00F062  0E02               	movlw	2
  2601  00F064  5C5C               	subwf	_tamanio_minutos,w,c
  2602  00F066  A0D8               	btfss	status,0,c
  2603  00F068  0012               	return	
  2604  00F06A                     u2620:
  2605                           
  2606                           ;hora.c: 62: convertir_a_int_hora(minutes,&valor);
  2607  00F06A  0EC5               	movlw	low _minutes
  2608  00F06C  6E0E               	movwf	convertir_a_int_hora@array,c
  2609  00F06E  0E00               	movlw	high _minutes
  2610  00F070  6E0F               	movwf	convertir_a_int_hora@array+1,c
  2611  00F072  0E2F               	movlw	low cambiar_minutos@valor
  2612  00F074  6E10               	movwf	convertir_a_int_hora@valor,c
  2613  00F076  0E00               	movlw	high cambiar_minutos@valor
  2614  00F078  6E11               	movwf	convertir_a_int_hora@valor+1,c
  2615  00F07A  ECC3  F070         	call	_convertir_a_int_hora	;wreg free
  2616                           
  2617                           ;hora.c: 63: minuto = valor;
  2618  00F07E  C02F  F0E4         	movff	cambiar_minutos@valor,_minuto
  2619  00F082  C030  F0E5         	movff	cambiar_minutos@valor+1,_minuto+1
  2620                           
  2621                           ;hora.c: 64: segundo = 00;
  2622  00F086  0E00               	movlw	0
  2623  00F088  0100               	movlb	0	; () banked
  2624  00F08A  6FA4               	movwf	(_segundo+1)& (0+255),b
  2625  00F08C  0E00               	movlw	0
  2626  00F08E  6FA3               	movwf	_segundo& (0+255),b
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;hora.c: 65: Write_RTC();
  2630  00F090  EC67  F07D         	call	_Write_RTC	;wreg free
  2631                           
  2632                           ;hora.c: 66: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2633  00F094  0E00               	movlw	0
  2634  00F096  6E2E               	movwf	cambiar_minutos@i+1,c
  2635  00F098  0E00               	movlw	0
  2636  00F09A  6E2D               	movwf	cambiar_minutos@i,c
  2637  00F09C                     l3546:
  2638  00F09C  BE2E               	btfsc	cambiar_minutos@i+1,7,c
  2639  00F09E  D008               	goto	l3550
  2640  00F0A0  502E               	movf	cambiar_minutos@i+1,w,c
  2641  00F0A2  E112               	bnz	l760
  2642  00F0A4  0E04               	movlw	4
  2643  00F0A6  5C2D               	subwf	cambiar_minutos@i,w,c
  2644  00F0A8  B0D8               	btfsc	status,0,c
  2645  00F0AA  0012               	return	
  2646  00F0AC  D001               	goto	l3550
  2647  00F0AE  0012               	return	
  2648  00F0B0                     l3550:
  2649  00F0B0  0EFF               	movlw	255
  2650  00F0B2  6E2B               	movwf	??_cambiar_minutos& (0+255),c
  2651  00F0B4  0E8A               	movlw	138
  2652  00F0B6                     u3317:
  2653  00F0B6  2EE8               	decfsz	wreg,f,c
  2654  00F0B8  D7FE               	goto	u3317
  2655  00F0BA  2E2B               	decfsz	??_cambiar_minutos& (0+255),f,c
  2656  00F0BC  D7FC               	goto	u3317
  2657  00F0BE  D000               	nop2	
  2658  00F0C0  4A2D               	infsnz	cambiar_minutos@i,f,c
  2659  00F0C2  2A2E               	incf	cambiar_minutos@i+1,f,c
  2660  00F0C4  D7EB               	goto	l3546
  2661  00F0C6  0012               	return	
  2662  00F0C8                     l760:
  2663  00F0C8  0012               	return		;funcret
  2664  00F0CA                     __end_of_cambiar_minutos:
  2665                           	opt stack 0
  2666                           tosu	equ	0xFFF
  2667                           tosh	equ	0xFFE
  2668                           tosl	equ	0xFFD
  2669                           pclath	equ	0xFFA
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           indf2	equ	0xFDF
  2679                           postinc2	equ	0xFDE
  2680                           postdec2	equ	0xFDD
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _cambiar_dia *****************
  2686 ;; Defined at:
  2687 ;;		line 31 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  tecla           1    wreg     unsigned char 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  tecla           1   43[COMRAM] unsigned char 
  2692 ;;  i               2   44[COMRAM] int 
  2693 ;;  valor           2   46[COMRAM] int 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;Total ram usage:        6 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    5
  2710 ;; This function calls:
  2711 ;;		_Write_RTC
  2712 ;;		_convertir_a_int_fecha
  2713 ;;		_guardar_elemento_fecha
  2714 ;;		_inicializar_fecha
  2715 ;;		_lcd_gotoxy
  2716 ;;		_lcd_putrs
  2717 ;;		_restaurar_comando
  2718 ;; This function is called by:
  2719 ;;		_cambiar_fecha
  2720 ;;		_guardar_tecla_presionada
  2721 ;;		_leer_teclado
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text10
  2726  00EDE0                     __ptext10:
  2727                           	opt stack 0
  2728  00EDE0                     _cambiar_dia:
  2729                           	opt stack 23
  2730                           
  2731                           ;incstack = 0
  2732                           ;cambiar_dia@tecla stored from wreg
  2733  00EDE0  6E2C               	movwf	cambiar_dia@tecla,c
  2734                           
  2735                           ;fecha.c: 32: int valor = 0;
  2736  00EDE2  0E00               	movlw	0
  2737  00EDE4  6E30               	movwf	cambiar_dia@valor+1,c
  2738  00EDE6  0E00               	movlw	0
  2739  00EDE8  6E2F               	movwf	cambiar_dia@valor,c
  2740                           
  2741                           ;fecha.c: 34: if (tamanio_dia < 3 - 1){
  2742  00EDEA  BE57               	btfsc	_tamanio_dia+1,7,c
  2743  00EDEC  D006               	goto	l3410
  2744  00EDEE  5057               	movf	_tamanio_dia+1,w,c
  2745  00EDF0  E11B               	bnz	l3416
  2746  00EDF2  0E02               	movlw	2
  2747  00EDF4  5C56               	subwf	_tamanio_dia,w,c
  2748  00EDF6  B0D8               	btfsc	status,0,c
  2749  00EDF8  D017               	goto	l3416
  2750  00EDFA                     l3410:
  2751                           
  2752                           ;fecha.c: 35: guardar_elemento_fecha(tecla,day,&tamanio_dia);
  2753  00EDFA  0EBF               	movlw	low _day
  2754  00EDFC  6E24               	movwf	guardar_elemento_fecha@array,c
  2755  00EDFE  0E00               	movlw	high _day
  2756  00EE00  6E25               	movwf	guardar_elemento_fecha@array+1,c
  2757  00EE02  0E56               	movlw	low _tamanio_dia
  2758  00EE04  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  2759  00EE06  0E00               	movlw	high _tamanio_dia
  2760  00EE08  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  2761  00EE0A  502C               	movf	cambiar_dia@tecla,w,c
  2762  00EE0C  ECC2  F073         	call	_guardar_elemento_fecha
  2763                           
  2764                           ;fecha.c: 36: lcd_gotoxy(1,2);
  2765  00EE10  0E02               	movlw	2
  2766  00EE12  6E05               	movwf	lcd_gotoxy@y,c
  2767  00EE14  0E01               	movlw	1
  2768  00EE16  EC03  F071         	call	_lcd_gotoxy
  2769                           
  2770                           ;fecha.c: 37: lcd_putrs(day);
  2771  00EE1A  0EBF               	movlw	low _day
  2772  00EE1C  6E09               	movwf	lcd_putrs@ptr,c
  2773  00EE1E  0E00               	movlw	high _day
  2774  00EE20  6E0A               	movwf	lcd_putrs@ptr+1,c
  2775  00EE22  ECCA  F072         	call	_lcd_putrs	;wreg free
  2776  00EE26  D000               	goto	l3416
  2777  00EE28                     l3416:
  2778                           
  2779                           ;fecha.c: 38: }
  2780                           ;fecha.c: 40: if (tamanio_dia >= 3 - 1){
  2781  00EE28  BE57               	btfsc	_tamanio_dia+1,7,c
  2782  00EE2A  0012               	return	
  2783  00EE2C  5057               	movf	_tamanio_dia+1,w,c
  2784  00EE2E  E104               	bnz	u2420
  2785  00EE30  0E02               	movlw	2
  2786  00EE32  5C56               	subwf	_tamanio_dia,w,c
  2787  00EE34  A0D8               	btfss	status,0,c
  2788  00EE36  0012               	return	
  2789  00EE38                     u2420:
  2790                           
  2791                           ;fecha.c: 41: convertir_a_int_fecha(day,&valor);
  2792  00EE38  0EBF               	movlw	low _day
  2793  00EE3A  6E0E               	movwf	convertir_a_int_fecha@array,c
  2794  00EE3C  0E00               	movlw	high _day
  2795  00EE3E  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  2796  00EE40  0E2F               	movlw	low cambiar_dia@valor
  2797  00EE42  6E10               	movwf	convertir_a_int_fecha@valor,c
  2798  00EE44  0E00               	movlw	high cambiar_dia@valor
  2799  00EE46  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  2800  00EE48  ECB4  F070         	call	_convertir_a_int_fecha	;wreg free
  2801                           
  2802                           ;fecha.c: 42: dia = valor;
  2803  00EE4C  C02F  F0DC         	movff	cambiar_dia@valor,_dia
  2804  00EE50  C030  F0DD         	movff	cambiar_dia@valor+1,_dia+1
  2805                           
  2806                           ;fecha.c: 43: Write_RTC();
  2807  00EE54  EC67  F07D         	call	_Write_RTC	;wreg free
  2808                           
  2809                           ;fecha.c: 45: restaurar_comando();
  2810  00EE58  ECA5  F070         	call	_restaurar_comando	;wreg free
  2811                           
  2812                           ;fecha.c: 46: inicializar_fecha();
  2813  00EE5C  EC3B  F071         	call	_inicializar_fecha	;wreg free
  2814                           
  2815                           ;fecha.c: 47: for (int i=0;i<2;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2816  00EE60  0E00               	movlw	0
  2817  00EE62  6E2E               	movwf	cambiar_dia@i+1,c
  2818  00EE64  0E00               	movlw	0
  2819  00EE66  6E2D               	movwf	cambiar_dia@i,c
  2820  00EE68                     l3428:
  2821  00EE68  BE2E               	btfsc	cambiar_dia@i+1,7,c
  2822  00EE6A  D008               	goto	l3432
  2823  00EE6C  502E               	movf	cambiar_dia@i+1,w,c
  2824  00EE6E  E112               	bnz	l525
  2825  00EE70  0E02               	movlw	2
  2826  00EE72  5C2D               	subwf	cambiar_dia@i,w,c
  2827  00EE74  B0D8               	btfsc	status,0,c
  2828  00EE76  0012               	return	
  2829  00EE78  D001               	goto	l3432
  2830  00EE7A  0012               	return	
  2831  00EE7C                     l3432:
  2832  00EE7C  0EFF               	movlw	255
  2833  00EE7E  6E2B               	movwf	??_cambiar_dia& (0+255),c
  2834  00EE80  0E8A               	movlw	138
  2835  00EE82                     u3327:
  2836  00EE82  2EE8               	decfsz	wreg,f,c
  2837  00EE84  D7FE               	goto	u3327
  2838  00EE86  2E2B               	decfsz	??_cambiar_dia& (0+255),f,c
  2839  00EE88  D7FC               	goto	u3327
  2840  00EE8A  D000               	nop2	
  2841  00EE8C  4A2D               	infsnz	cambiar_dia@i,f,c
  2842  00EE8E  2A2E               	incf	cambiar_dia@i+1,f,c
  2843  00EE90  D7EB               	goto	l3428
  2844  00EE92  0012               	return	
  2845  00EE94                     l525:
  2846  00EE94  0012               	return		;funcret
  2847  00EE96                     __end_of_cambiar_dia:
  2848                           	opt stack 0
  2849                           tosu	equ	0xFFF
  2850                           tosh	equ	0xFFE
  2851                           tosl	equ	0xFFD
  2852                           pclath	equ	0xFFA
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1l	equ	0xFE1
  2861                           indf2	equ	0xFDF
  2862                           postinc2	equ	0xFDE
  2863                           postdec2	equ	0xFDD
  2864                           fsr2h	equ	0xFDA
  2865                           fsr2l	equ	0xFD9
  2866                           status	equ	0xFD8
  2867                           
  2868 ;; *************** function _cambiar_mes *****************
  2869 ;; Defined at:
  2870 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;  tecla           1    wreg     unsigned char 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  tecla           1   43[COMRAM] unsigned char 
  2875 ;;  i               2   44[COMRAM] int 
  2876 ;;  valor           2   46[COMRAM] int 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;		None               void
  2879 ;; Registers used:
  2880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2887 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2889 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;Total ram usage:        6 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    5
  2893 ;; This function calls:
  2894 ;;		_Write_RTC
  2895 ;;		_convertir_a_int_fecha
  2896 ;;		_guardar_elemento_fecha
  2897 ;;		_lcd_gotoxy
  2898 ;;		_lcd_putrs
  2899 ;; This function is called by:
  2900 ;;		_cambiar_fecha
  2901 ;;		_guardar_tecla_presionada
  2902 ;;		_leer_teclado
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text11
  2907  00ED2A                     __ptext11:
  2908                           	opt stack 0
  2909  00ED2A                     _cambiar_mes:
  2910                           	opt stack 23
  2911                           
  2912                           ;incstack = 0
  2913                           ;cambiar_mes@tecla stored from wreg
  2914  00ED2A  6E2C               	movwf	cambiar_mes@tecla,c
  2915                           
  2916                           ;fecha.c: 53: int valor = 0;
  2917  00ED2C  0E00               	movlw	0
  2918  00ED2E  6E30               	movwf	cambiar_mes@valor+1,c
  2919  00ED30  0E00               	movlw	0
  2920  00ED32  6E2F               	movwf	cambiar_mes@valor,c
  2921                           
  2922                           ;fecha.c: 55: if (tamanio_mes < 3 - 1 && tamanio_dia == 0){
  2923  00ED34  BE5B               	btfsc	_tamanio_mes+1,7,c
  2924  00ED36  D006               	goto	l3440
  2925  00ED38  505B               	movf	_tamanio_mes+1,w,c
  2926  00ED3A  E11F               	bnz	l3448
  2927  00ED3C  0E02               	movlw	2
  2928  00ED3E  5C5A               	subwf	_tamanio_mes,w,c
  2929  00ED40  B0D8               	btfsc	status,0,c
  2930  00ED42  D01B               	goto	l3448
  2931  00ED44                     l3440:
  2932  00ED44  5056               	movf	_tamanio_dia,w,c
  2933  00ED46  1057               	iorwf	_tamanio_dia+1,w,c
  2934  00ED48  A4D8               	btfss	status,2,c
  2935  00ED4A  D017               	goto	l3448
  2936                           
  2937                           ;fecha.c: 56: guardar_elemento_fecha(tecla,month,&tamanio_mes);
  2938  00ED4C  0EC8               	movlw	low _month
  2939  00ED4E  6E24               	movwf	guardar_elemento_fecha@array,c
  2940  00ED50  0E00               	movlw	high _month
  2941  00ED52  6E25               	movwf	guardar_elemento_fecha@array+1,c
  2942  00ED54  0E5A               	movlw	low _tamanio_mes
  2943  00ED56  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  2944  00ED58  0E00               	movlw	high _tamanio_mes
  2945  00ED5A  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  2946  00ED5C  502C               	movf	cambiar_mes@tecla,w,c
  2947  00ED5E  ECC2  F073         	call	_guardar_elemento_fecha
  2948                           
  2949                           ;fecha.c: 57: lcd_gotoxy(1,2);
  2950  00ED62  0E02               	movlw	2
  2951  00ED64  6E05               	movwf	lcd_gotoxy@y,c
  2952  00ED66  0E01               	movlw	1
  2953  00ED68  EC03  F071         	call	_lcd_gotoxy
  2954                           
  2955                           ;fecha.c: 58: lcd_putrs(month);
  2956  00ED6C  0EC8               	movlw	low _month
  2957  00ED6E  6E09               	movwf	lcd_putrs@ptr,c
  2958  00ED70  0E00               	movlw	high _month
  2959  00ED72  6E0A               	movwf	lcd_putrs@ptr+1,c
  2960  00ED74  ECCA  F072         	call	_lcd_putrs	;wreg free
  2961  00ED78  D000               	goto	l3448
  2962  00ED7A                     l3448:
  2963                           
  2964                           ;fecha.c: 59: }
  2965                           ;fecha.c: 61: if (tamanio_mes >= 3 - 1){
  2966  00ED7A  BE5B               	btfsc	_tamanio_mes+1,7,c
  2967  00ED7C  0012               	return	
  2968  00ED7E  505B               	movf	_tamanio_mes+1,w,c
  2969  00ED80  E104               	bnz	u2470
  2970  00ED82  0E02               	movlw	2
  2971  00ED84  5C5A               	subwf	_tamanio_mes,w,c
  2972  00ED86  A0D8               	btfss	status,0,c
  2973  00ED88  0012               	return	
  2974  00ED8A                     u2470:
  2975                           
  2976                           ;fecha.c: 63: convertir_a_int_fecha(month,&valor);
  2977  00ED8A  0EC8               	movlw	low _month
  2978  00ED8C  6E0E               	movwf	convertir_a_int_fecha@array,c
  2979  00ED8E  0E00               	movlw	high _month
  2980  00ED90  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  2981  00ED92  0E2F               	movlw	low cambiar_mes@valor
  2982  00ED94  6E10               	movwf	convertir_a_int_fecha@valor,c
  2983  00ED96  0E00               	movlw	high cambiar_mes@valor
  2984  00ED98  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  2985  00ED9A  ECB4  F070         	call	_convertir_a_int_fecha	;wreg free
  2986                           
  2987                           ;fecha.c: 64: mes = valor;
  2988  00ED9E  C02F  F0E2         	movff	cambiar_mes@valor,_mes
  2989  00EDA2  C030  F0E3         	movff	cambiar_mes@valor+1,_mes+1
  2990                           
  2991                           ;fecha.c: 65: Write_RTC();
  2992  00EDA6  EC67  F07D         	call	_Write_RTC	;wreg free
  2993                           
  2994                           ;fecha.c: 66: for (int i=0;i<2;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2995  00EDAA  0E00               	movlw	0
  2996  00EDAC  6E2E               	movwf	cambiar_mes@i+1,c
  2997  00EDAE  0E00               	movlw	0
  2998  00EDB0  6E2D               	movwf	cambiar_mes@i,c
  2999  00EDB2                     l3456:
  3000  00EDB2  BE2E               	btfsc	cambiar_mes@i+1,7,c
  3001  00EDB4  D008               	goto	l3460
  3002  00EDB6  502E               	movf	cambiar_mes@i+1,w,c
  3003  00EDB8  E112               	bnz	l532
  3004  00EDBA  0E02               	movlw	2
  3005  00EDBC  5C2D               	subwf	cambiar_mes@i,w,c
  3006  00EDBE  B0D8               	btfsc	status,0,c
  3007  00EDC0  0012               	return	
  3008  00EDC2  D001               	goto	l3460
  3009  00EDC4  0012               	return	
  3010  00EDC6                     l3460:
  3011  00EDC6  0EFF               	movlw	255
  3012  00EDC8  6E2B               	movwf	??_cambiar_mes& (0+255),c
  3013  00EDCA  0E8A               	movlw	138
  3014  00EDCC                     u3337:
  3015  00EDCC  2EE8               	decfsz	wreg,f,c
  3016  00EDCE  D7FE               	goto	u3337
  3017  00EDD0  2E2B               	decfsz	??_cambiar_mes& (0+255),f,c
  3018  00EDD2  D7FC               	goto	u3337
  3019  00EDD4  D000               	nop2	
  3020  00EDD6  4A2D               	infsnz	cambiar_mes@i,f,c
  3021  00EDD8  2A2E               	incf	cambiar_mes@i+1,f,c
  3022  00EDDA  D7EB               	goto	l3456
  3023  00EDDC  0012               	return	
  3024  00EDDE                     l532:
  3025  00EDDE  0012               	return		;funcret
  3026  00EDE0                     __end_of_cambiar_mes:
  3027                           	opt stack 0
  3028                           tosu	equ	0xFFF
  3029                           tosh	equ	0xFFE
  3030                           tosl	equ	0xFFD
  3031                           pclath	equ	0xFFA
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           postdec1	equ	0xFE5
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _cambiar_anio *****************
  3048 ;; Defined at:
  3049 ;;		line 70 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  tecla           1    wreg     unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  tecla           1   43[COMRAM] unsigned char 
  3054 ;;  i               2   44[COMRAM] int 
  3055 ;;  valor           2   46[COMRAM] int 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;		None               void
  3058 ;; Registers used:
  3059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3066 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3068 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3069 ;;Total ram usage:        6 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    5
  3072 ;; This function calls:
  3073 ;;		_Write_RTC
  3074 ;;		_convertir_a_int_fecha
  3075 ;;		_guardar_elemento_fecha
  3076 ;;		_lcd_gotoxy
  3077 ;;		_lcd_putrs
  3078 ;; This function is called by:
  3079 ;;		_cambiar_fecha
  3080 ;;		_guardar_tecla_presionada
  3081 ;;		_leer_teclado
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text12
  3086  00EF4C                     __ptext12:
  3087                           	opt stack 0
  3088  00EF4C                     _cambiar_anio:
  3089                           	opt stack 23
  3090                           
  3091                           ;incstack = 0
  3092                           ;cambiar_anio@tecla stored from wreg
  3093  00EF4C  6E2C               	movwf	cambiar_anio@tecla,c
  3094                           
  3095                           ;fecha.c: 71: int valor = 0;
  3096  00EF4E  0E00               	movlw	0
  3097  00EF50  6E30               	movwf	cambiar_anio@valor+1,c
  3098  00EF52  0E00               	movlw	0
  3099  00EF54  6E2F               	movwf	cambiar_anio@valor,c
  3100                           
  3101                           ;fecha.c: 73: if (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia == 0){
  3102  00EF56  BE55               	btfsc	_tamanio_anio+1,7,c
  3103  00EF58  D006               	goto	l3468
  3104  00EF5A  5055               	movf	_tamanio_anio+1,w,c
  3105  00EF5C  E123               	bnz	l3478
  3106  00EF5E  0E02               	movlw	2
  3107  00EF60  5C54               	subwf	_tamanio_anio,w,c
  3108  00EF62  B0D8               	btfsc	status,0,c
  3109  00EF64  D01F               	goto	l3478
  3110  00EF66                     l3468:
  3111  00EF66  505A               	movf	_tamanio_mes,w,c
  3112  00EF68  105B               	iorwf	_tamanio_mes+1,w,c
  3113  00EF6A  A4D8               	btfss	status,2,c
  3114  00EF6C  D01B               	goto	l3478
  3115  00EF6E  5056               	movf	_tamanio_dia,w,c
  3116  00EF70  1057               	iorwf	_tamanio_dia+1,w,c
  3117  00EF72  A4D8               	btfss	status,2,c
  3118  00EF74  D017               	goto	l3478
  3119                           
  3120                           ;fecha.c: 74: guardar_elemento_fecha(tecla,year,&tamanio_anio);
  3121  00EF76  0ECB               	movlw	low _year
  3122  00EF78  6E24               	movwf	guardar_elemento_fecha@array,c
  3123  00EF7A  0E00               	movlw	high _year
  3124  00EF7C  6E25               	movwf	guardar_elemento_fecha@array+1,c
  3125  00EF7E  0E54               	movlw	low _tamanio_anio
  3126  00EF80  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  3127  00EF82  0E00               	movlw	high _tamanio_anio
  3128  00EF84  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  3129  00EF86  502C               	movf	cambiar_anio@tecla,w,c
  3130  00EF88  ECC2  F073         	call	_guardar_elemento_fecha
  3131                           
  3132                           ;fecha.c: 75: lcd_gotoxy(1,2);
  3133  00EF8C  0E02               	movlw	2
  3134  00EF8E  6E05               	movwf	lcd_gotoxy@y,c
  3135  00EF90  0E01               	movlw	1
  3136  00EF92  EC03  F071         	call	_lcd_gotoxy
  3137                           
  3138                           ;fecha.c: 76: lcd_putrs(year);
  3139  00EF96  0ECB               	movlw	low _year
  3140  00EF98  6E09               	movwf	lcd_putrs@ptr,c
  3141  00EF9A  0E00               	movlw	high _year
  3142  00EF9C  6E0A               	movwf	lcd_putrs@ptr+1,c
  3143  00EF9E  ECCA  F072         	call	_lcd_putrs	;wreg free
  3144  00EFA2  D000               	goto	l3478
  3145  00EFA4                     l3478:
  3146                           
  3147                           ;fecha.c: 77: }
  3148                           ;fecha.c: 79: if (tamanio_anio >= 3 - 1){
  3149  00EFA4  BE55               	btfsc	_tamanio_anio+1,7,c
  3150  00EFA6  0012               	return	
  3151  00EFA8  5055               	movf	_tamanio_anio+1,w,c
  3152  00EFAA  E104               	bnz	u2530
  3153  00EFAC  0E02               	movlw	2
  3154  00EFAE  5C54               	subwf	_tamanio_anio,w,c
  3155  00EFB0  A0D8               	btfss	status,0,c
  3156  00EFB2  0012               	return	
  3157  00EFB4                     u2530:
  3158                           
  3159                           ;fecha.c: 81: convertir_a_int_fecha(year,&valor);
  3160  00EFB4  0ECB               	movlw	low _year
  3161  00EFB6  6E0E               	movwf	convertir_a_int_fecha@array,c
  3162  00EFB8  0E00               	movlw	high _year
  3163  00EFBA  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  3164  00EFBC  0E2F               	movlw	low cambiar_anio@valor
  3165  00EFBE  6E10               	movwf	convertir_a_int_fecha@valor,c
  3166  00EFC0  0E00               	movlw	high cambiar_anio@valor
  3167  00EFC2  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  3168  00EFC4  ECB4  F070         	call	_convertir_a_int_fecha	;wreg free
  3169                           
  3170                           ;fecha.c: 82: anio = valor;
  3171  00EFC8  C02F  F0DA         	movff	cambiar_anio@valor,_anio
  3172  00EFCC  C030  F0DB         	movff	cambiar_anio@valor+1,_anio+1
  3173                           
  3174                           ;fecha.c: 83: Write_RTC();
  3175  00EFD0  EC67  F07D         	call	_Write_RTC	;wreg free
  3176                           
  3177                           ;fecha.c: 85: for (int i=0;i<2;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3178  00EFD4  0E00               	movlw	0
  3179  00EFD6  6E2E               	movwf	cambiar_anio@i+1,c
  3180  00EFD8  0E00               	movlw	0
  3181  00EFDA  6E2D               	movwf	cambiar_anio@i,c
  3182  00EFDC                     l3486:
  3183  00EFDC  BE2E               	btfsc	cambiar_anio@i+1,7,c
  3184  00EFDE  D008               	goto	l3490
  3185  00EFE0  502E               	movf	cambiar_anio@i+1,w,c
  3186  00EFE2  E112               	bnz	l539
  3187  00EFE4  0E02               	movlw	2
  3188  00EFE6  5C2D               	subwf	cambiar_anio@i,w,c
  3189  00EFE8  B0D8               	btfsc	status,0,c
  3190  00EFEA  0012               	return	
  3191  00EFEC  D001               	goto	l3490
  3192  00EFEE  0012               	return	
  3193  00EFF0                     l3490:
  3194  00EFF0  0EFF               	movlw	255
  3195  00EFF2  6E2B               	movwf	??_cambiar_anio& (0+255),c
  3196  00EFF4  0E8A               	movlw	138
  3197  00EFF6                     u3347:
  3198  00EFF6  2EE8               	decfsz	wreg,f,c
  3199  00EFF8  D7FE               	goto	u3347
  3200  00EFFA  2E2B               	decfsz	??_cambiar_anio& (0+255),f,c
  3201  00EFFC  D7FC               	goto	u3347
  3202  00EFFE  D000               	nop2	
  3203  00F000  4A2D               	infsnz	cambiar_anio@i,f,c
  3204  00F002  2A2E               	incf	cambiar_anio@i+1,f,c
  3205  00F004  D7EB               	goto	l3486
  3206  00F006  0012               	return	
  3207  00F008                     l539:
  3208  00F008  0012               	return		;funcret
  3209  00F00A                     __end_of_cambiar_anio:
  3210                           	opt stack 0
  3211                           tosu	equ	0xFFF
  3212                           tosh	equ	0xFFE
  3213                           tosl	equ	0xFFD
  3214                           pclath	equ	0xFFA
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           postinc2	equ	0xFDE
  3225                           postdec2	equ	0xFDD
  3226                           fsr2h	equ	0xFDA
  3227                           fsr2l	equ	0xFD9
  3228                           status	equ	0xFD8
  3229                           
  3230 ;; *************** function _mostrar_guardar_temporal_password *****************
  3231 ;; Defined at:
  3232 ;;		line 122 in file "main.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  tecla           1    wreg     unsigned char 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  tecla           1   56[COMRAM] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;		None               void
  3239 ;; Registers used:
  3240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3250 ;;Total ram usage:        1 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    6
  3253 ;; This function calls:
  3254 ;;		_guardar_password_temporal
  3255 ;;		_imprimir_tecla
  3256 ;;		_sprintf
  3257 ;; This function is called by:
  3258 ;;		_cambiar_password
  3259 ;;		_guardar_tecla_presionada
  3260 ;;		_leer_teclado
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text13
  3265  00E2A2                     __ptext13:
  3266                           	opt stack 0
  3267  00E2A2                     _mostrar_guardar_temporal_password:
  3268                           	opt stack 23
  3269                           
  3270                           ;incstack = 0
  3271                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  3272  00E2A2  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  3273                           
  3274                           ;main.c: 124: imprimir_tecla(tecla);
  3275  00E2A4  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  3276  00E2A6  ECCE  F071         	call	_imprimir_tecla
  3277                           
  3278                           ;main.c: 125: sprintf(buffer2,"%01u",tecla);
  3279  00E2AA  0EA7               	movlw	low _buffer2
  3280  00E2AC  6E0D               	movwf	sprintf@sp,c
  3281  00E2AE  0E00               	movlw	high _buffer2
  3282  00E2B0  6E0E               	movwf	sprintf@sp+1,c
  3283  00E2B2  0ED3               	movlw	low STR_7
  3284  00E2B4  6E0F               	movwf	sprintf@f,c
  3285  00E2B6  0EFF               	movlw	high STR_7
  3286  00E2B8  6E10               	movwf	sprintf@f+1,c
  3287  00E2BA  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  3288  00E2BE  6A12               	clrf	?_sprintf+5,c
  3289  00E2C0  EC2F  F07E         	call	_sprintf	;wreg free
  3290                           
  3291                           ;main.c: 126: guardar_password_temporal(*buffer2);
  3292  00E2C4  0100               	movlb	0	; () banked
  3293  00E2C6  51A7               	movf	_buffer2& (0+255),w,b
  3294  00E2C8  EC37  F072         	call	_guardar_password_temporal
  3295  00E2CC  0012               	return		;funcret
  3296  00E2CE                     __end_of_mostrar_guardar_temporal_password:
  3297                           	opt stack 0
  3298                           tosu	equ	0xFFF
  3299                           tosh	equ	0xFFE
  3300                           tosl	equ	0xFFD
  3301                           pclath	equ	0xFFA
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           postdec1	equ	0xFE5
  3309                           fsr1l	equ	0xFE1
  3310                           indf2	equ	0xFDF
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _guardar_password_temporal *****************
  3318 ;; Defined at:
  3319 ;;		line 16 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  valor           1    wreg     unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  valor           1    2[COMRAM] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3336 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;Total ram usage:        3 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_mostrar_guardar_temporal_password
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text14
  3347  00E46E                     __ptext14:
  3348                           	opt stack 0
  3349  00E46E                     _guardar_password_temporal:
  3350                           	opt stack 28
  3351                           
  3352                           ;incstack = 0
  3353                           ;guardar_password_temporal@valor stored from wreg
  3354  00E46E  6E03               	movwf	guardar_password_temporal@valor,c
  3355                           
  3356                           ;alarma.c: 18: if (tamanio_password < 6){
  3357  00E470  BE4E               	btfsc	_tamanio_password+1,7,c
  3358  00E472  D006               	goto	l3334
  3359  00E474  504E               	movf	_tamanio_password+1,w,c
  3360  00E476  E11D               	bnz	l792
  3361  00E478  0E06               	movlw	6
  3362  00E47A  5C4D               	subwf	_tamanio_password,w,c
  3363  00E47C  B0D8               	btfsc	status,0,c
  3364  00E47E  0012               	return	
  3365  00E480                     l3334:
  3366                           
  3367                           ;alarma.c: 19: temporal[tamanio_password] = valor;
  3368  00E480  0E86               	movlw	low _temporal
  3369  00E482  244D               	addwf	_tamanio_password,w,c
  3370  00E484  6ED9               	movwf	fsr2l,c
  3371  00E486  0E00               	movlw	high _temporal
  3372  00E488  204E               	addwfc	_tamanio_password+1,w,c
  3373  00E48A  6EDA               	movwf	fsr2h,c
  3374  00E48C  C003  FFDF         	movff	guardar_password_temporal@valor,indf2
  3375                           
  3376                           ;alarma.c: 20: temporal [tamanio_password+1] = '\0';
  3377  00E490  0E01               	movlw	1
  3378  00E492  244D               	addwf	_tamanio_password,w,c
  3379  00E494  6E01               	movwf	??_guardar_password_temporal& (0+255),c
  3380  00E496  0E00               	movlw	0
  3381  00E498  204E               	addwfc	_tamanio_password+1,w,c
  3382  00E49A  6E02               	movwf	(??_guardar_password_temporal+1)& (0+255),c
  3383  00E49C  0E86               	movlw	low _temporal
  3384  00E49E  2401               	addwf	??_guardar_password_temporal,w,c
  3385  00E4A0  6ED9               	movwf	fsr2l,c
  3386  00E4A2  0E00               	movlw	high _temporal
  3387  00E4A4  2002               	addwfc	??_guardar_password_temporal+1,w,c
  3388  00E4A6  6EDA               	movwf	fsr2h,c
  3389  00E4A8  0E00               	movlw	0
  3390  00E4AA  6EDF               	movwf	indf2,c
  3391                           
  3392                           ;alarma.c: 21: tamanio_password++;
  3393  00E4AC  4A4D               	infsnz	_tamanio_password,f,c
  3394  00E4AE  2A4E               	incf	_tamanio_password+1,f,c
  3395  00E4B0  0012               	return	
  3396  00E4B2                     l792:
  3397  00E4B2  0012               	return		;funcret
  3398  00E4B4                     __end_of_guardar_password_temporal:
  3399                           	opt stack 0
  3400                           tosu	equ	0xFFF
  3401                           tosh	equ	0xFFE
  3402                           tosl	equ	0xFFD
  3403                           pclath	equ	0xFFA
  3404                           tblptru	equ	0xFF8
  3405                           tblptrh	equ	0xFF7
  3406                           tblptrl	equ	0xFF6
  3407                           tablat	equ	0xFF5
  3408                           postinc0	equ	0xFEE
  3409                           wreg	equ	0xFE8
  3410                           postdec1	equ	0xFE5
  3411                           fsr1l	equ	0xFE1
  3412                           indf2	equ	0xFDF
  3413                           postinc2	equ	0xFDE
  3414                           postdec2	equ	0xFDD
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _guardar_current_password *****************
  3420 ;; Defined at:
  3421 ;;		line 6 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  valor           1    wreg     unsigned char 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  valor           1    2[COMRAM] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;		None               void
  3428 ;; Registers used:
  3429 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3438 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;Total ram usage:        3 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_mostrar_guardar_password
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text15
  3449  00E428                     __ptext15:
  3450                           	opt stack 0
  3451  00E428                     _guardar_current_password:
  3452                           	opt stack 28
  3453                           
  3454                           ;incstack = 0
  3455                           ;guardar_current_password@valor stored from wreg
  3456  00E428  6E03               	movwf	guardar_current_password@valor,c
  3457                           
  3458                           ;alarma.c: 9: if (tamanio_password < 6){
  3459  00E42A  BE4E               	btfsc	_tamanio_password+1,7,c
  3460  00E42C  D006               	goto	l3328
  3461  00E42E  504E               	movf	_tamanio_password+1,w,c
  3462  00E430  E11D               	bnz	l788
  3463  00E432  0E06               	movlw	6
  3464  00E434  5C4D               	subwf	_tamanio_password,w,c
  3465  00E436  B0D8               	btfsc	status,0,c
  3466  00E438  0012               	return	
  3467  00E43A                     l3328:
  3468                           
  3469                           ;alarma.c: 10: current_password[tamanio_password] = valor;
  3470  00E43A  0E78               	movlw	low _current_password
  3471  00E43C  244D               	addwf	_tamanio_password,w,c
  3472  00E43E  6ED9               	movwf	fsr2l,c
  3473  00E440  0E00               	movlw	high _current_password
  3474  00E442  204E               	addwfc	_tamanio_password+1,w,c
  3475  00E444  6EDA               	movwf	fsr2h,c
  3476  00E446  C003  FFDF         	movff	guardar_current_password@valor,indf2
  3477                           
  3478                           ;alarma.c: 11: current_password [tamanio_password+1] = '\0';
  3479  00E44A  0E01               	movlw	1
  3480  00E44C  244D               	addwf	_tamanio_password,w,c
  3481  00E44E  6E01               	movwf	??_guardar_current_password& (0+255),c
  3482  00E450  0E00               	movlw	0
  3483  00E452  204E               	addwfc	_tamanio_password+1,w,c
  3484  00E454  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  3485  00E456  0E78               	movlw	low _current_password
  3486  00E458  2401               	addwf	??_guardar_current_password,w,c
  3487  00E45A  6ED9               	movwf	fsr2l,c
  3488  00E45C  0E00               	movlw	high _current_password
  3489  00E45E  2002               	addwfc	??_guardar_current_password+1,w,c
  3490  00E460  6EDA               	movwf	fsr2h,c
  3491  00E462  0E00               	movlw	0
  3492  00E464  6EDF               	movwf	indf2,c
  3493                           
  3494                           ;alarma.c: 12: tamanio_password++;
  3495  00E466  4A4D               	infsnz	_tamanio_password,f,c
  3496  00E468  2A4E               	incf	_tamanio_password+1,f,c
  3497  00E46A  0012               	return	
  3498  00E46C                     l788:
  3499  00E46C  0012               	return		;funcret
  3500  00E46E                     __end_of_guardar_current_password:
  3501                           	opt stack 0
  3502                           tosu	equ	0xFFF
  3503                           tosh	equ	0xFFE
  3504                           tosl	equ	0xFFD
  3505                           pclath	equ	0xFFA
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _guardar_nuevo_password *****************
  3522 ;; Defined at:
  3523 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  valor           1    wreg     unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  valor           1    2[COMRAM] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;		None               void
  3530 ;; Registers used:
  3531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3540 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3541 ;;Total ram usage:        3 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_mostrar_guardar_nuevo_password
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text16
  3551  00E3E2                     __ptext16:
  3552                           	opt stack 0
  3553  00E3E2                     _guardar_nuevo_password:
  3554                           	opt stack 28
  3555                           
  3556                           ;incstack = 0
  3557                           ;guardar_nuevo_password@valor stored from wreg
  3558  00E3E2  6E03               	movwf	guardar_nuevo_password@valor,c
  3559                           
  3560                           ;alarma.c: 27: if (tamanio_new_password < 6){
  3561  00E3E4  BE4C               	btfsc	_tamanio_new_password+1,7,c
  3562  00E3E6  D006               	goto	l3340
  3563  00E3E8  504C               	movf	_tamanio_new_password+1,w,c
  3564  00E3EA  E11D               	bnz	l796
  3565  00E3EC  0E06               	movlw	6
  3566  00E3EE  5C4B               	subwf	_tamanio_new_password,w,c
  3567  00E3F0  B0D8               	btfsc	status,0,c
  3568  00E3F2  0012               	return	
  3569  00E3F4                     l3340:
  3570                           
  3571                           ;alarma.c: 28: new_password[tamanio_new_password] = valor;
  3572  00E3F4  0E7F               	movlw	low _new_password
  3573  00E3F6  244B               	addwf	_tamanio_new_password,w,c
  3574  00E3F8  6ED9               	movwf	fsr2l,c
  3575  00E3FA  0E00               	movlw	high _new_password
  3576  00E3FC  204C               	addwfc	_tamanio_new_password+1,w,c
  3577  00E3FE  6EDA               	movwf	fsr2h,c
  3578  00E400  C003  FFDF         	movff	guardar_nuevo_password@valor,indf2
  3579                           
  3580                           ;alarma.c: 29: new_password [tamanio_new_password+1] = 0;
  3581  00E404  0E01               	movlw	1
  3582  00E406  244B               	addwf	_tamanio_new_password,w,c
  3583  00E408  6E01               	movwf	??_guardar_nuevo_password& (0+255),c
  3584  00E40A  0E00               	movlw	0
  3585  00E40C  204C               	addwfc	_tamanio_new_password+1,w,c
  3586  00E40E  6E02               	movwf	(??_guardar_nuevo_password+1)& (0+255),c
  3587  00E410  0E7F               	movlw	low _new_password
  3588  00E412  2401               	addwf	??_guardar_nuevo_password,w,c
  3589  00E414  6ED9               	movwf	fsr2l,c
  3590  00E416  0E00               	movlw	high _new_password
  3591  00E418  2002               	addwfc	??_guardar_nuevo_password+1,w,c
  3592  00E41A  6EDA               	movwf	fsr2h,c
  3593  00E41C  0E00               	movlw	0
  3594  00E41E  6EDF               	movwf	indf2,c
  3595                           
  3596                           ;alarma.c: 30: tamanio_new_password++;
  3597  00E420  4A4B               	infsnz	_tamanio_new_password,f,c
  3598  00E422  2A4C               	incf	_tamanio_new_password+1,f,c
  3599  00E424  0012               	return	
  3600  00E426                     l796:
  3601  00E426  0012               	return		;funcret
  3602  00E428                     __end_of_guardar_nuevo_password:
  3603                           	opt stack 0
  3604                           tosu	equ	0xFFF
  3605                           tosh	equ	0xFFE
  3606                           tosl	equ	0xFFD
  3607                           pclath	equ	0xFFA
  3608                           tblptru	equ	0xFF8
  3609                           tblptrh	equ	0xFF7
  3610                           tblptrl	equ	0xFF6
  3611                           tablat	equ	0xFF5
  3612                           postinc0	equ	0xFEE
  3613                           wreg	equ	0xFE8
  3614                           postdec1	equ	0xFE5
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _guardar_comando *****************
  3624 ;; Defined at:
  3625 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  tecla           1    wreg     unsigned char 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  tecla           1   57[COMRAM] unsigned char 
  3630 ;;  aux            20   37[COMRAM] unsigned char [20]
  3631 ;; Return value:  Size  Location     Type
  3632 ;;		None               void
  3633 ;; Registers used:
  3634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3641 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3643 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3644 ;;Total ram usage:       23 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    2
  3647 ;; This function calls:
  3648 ;;		_sprintf
  3649 ;; This function is called by:
  3650 ;;		_ingresar_comando
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text17
  3655  00E714                     __ptext17:
  3656                           	opt stack 0
  3657  00E714                     _guardar_comando:
  3658                           	opt stack 26
  3659                           
  3660                           ;incstack = 0
  3661                           ;guardar_comando@tecla stored from wreg
  3662  00E714  6E3A               	movwf	guardar_comando@tecla,c
  3663                           
  3664                           ;teclado.c: 12: unsigned char aux[20];
  3665                           ;teclado.c: 13: sprintf(aux,"%01u",tecla);
  3666  00E716  0E26               	movlw	low guardar_comando@aux
  3667  00E718  6E0D               	movwf	sprintf@sp,c
  3668  00E71A  0E00               	movlw	high guardar_comando@aux
  3669  00E71C  6E0E               	movwf	sprintf@sp+1,c
  3670  00E71E  0ED3               	movlw	low STR_7
  3671  00E720  6E0F               	movwf	sprintf@f,c
  3672  00E722  0EFF               	movlw	high STR_7
  3673  00E724  6E10               	movwf	sprintf@f+1,c
  3674  00E726  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  3675  00E72A  6A12               	clrf	?_sprintf+5,c
  3676  00E72C  EC2F  F07E         	call	_sprintf	;wreg free
  3677                           
  3678                           ;teclado.c: 14: if (tamanio_comando < 2){
  3679  00E730  0100               	movlb	0	; () banked
  3680  00E732  BFA6               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  3681  00E734  D008               	goto	l3348
  3682  00E736  0100               	movlb	0	; () banked
  3683  00E738  51A6               	movf	(_tamanio_comando+1)& (0+255),w,b
  3684  00E73A  E123               	bnz	l350
  3685  00E73C  0E02               	movlw	2
  3686  00E73E  0100               	movlb	0	; () banked
  3687  00E740  5DA5               	subwf	_tamanio_comando& (0+255),w,b
  3688  00E742  B0D8               	btfsc	status,0,c
  3689  00E744  0012               	return	
  3690  00E746                     l3348:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;teclado.c: 15: comando[tamanio_comando] = *aux;
  3694  00E746  0ED5               	movlw	low _comando
  3695  00E748  0100               	movlb	0	; () banked
  3696  00E74A  25A5               	addwf	_tamanio_comando& (0+255),w,b
  3697  00E74C  6ED9               	movwf	fsr2l,c
  3698  00E74E  0E00               	movlw	high _comando
  3699  00E750  0100               	movlb	0	; () banked
  3700  00E752  21A6               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3701  00E754  6EDA               	movwf	fsr2h,c
  3702  00E756  C026  FFDF         	movff	guardar_comando@aux,indf2
  3703                           
  3704                           ;teclado.c: 16: comando [tamanio_comando+1] = 0;
  3705  00E75A  0E01               	movlw	1
  3706  00E75C  0100               	movlb	0	; () banked
  3707  00E75E  25A5               	addwf	_tamanio_comando& (0+255),w,b
  3708  00E760  6E24               	movwf	??_guardar_comando& (0+255),c
  3709  00E762  0E00               	movlw	0
  3710  00E764  0100               	movlb	0	; () banked
  3711  00E766  21A6               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3712  00E768  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  3713  00E76A  0ED5               	movlw	low _comando
  3714  00E76C  2424               	addwf	??_guardar_comando,w,c
  3715  00E76E  6ED9               	movwf	fsr2l,c
  3716  00E770  0E00               	movlw	high _comando
  3717  00E772  2025               	addwfc	??_guardar_comando+1,w,c
  3718  00E774  6EDA               	movwf	fsr2h,c
  3719  00E776  0E00               	movlw	0
  3720  00E778  6EDF               	movwf	indf2,c
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;teclado.c: 17: tamanio_comando++;
  3724  00E77A  0100               	movlb	0	; () banked
  3725  00E77C  4BA5               	infsnz	_tamanio_comando& (0+255),f,b
  3726  00E77E  2BA6               	incf	(_tamanio_comando+1)& (0+255),f,b
  3727  00E780  0012               	return	
  3728  00E782                     l350:
  3729                           
  3730                           ; BSR set to: 0
  3731  00E782  0012               	return		;funcret
  3732  00E784                     __end_of_guardar_comando:
  3733                           	opt stack 0
  3734                           tosu	equ	0xFFF
  3735                           tosh	equ	0xFFE
  3736                           tosl	equ	0xFFD
  3737                           pclath	equ	0xFFA
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           postdec1	equ	0xFE5
  3745                           fsr1l	equ	0xFE1
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           fsr2h	equ	0xFDA
  3750                           fsr2l	equ	0xFD9
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function _imprimir_tecla *****************
  3754 ;; Defined at:
  3755 ;;		line 41 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  tecla           1    wreg     unsigned char 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  tecla           1   55[COMRAM] unsigned char 
  3760 ;;  aux            20   35[COMRAM] unsigned char [20]
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3771 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3773 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3774 ;;Total ram usage:       21 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    5
  3777 ;; This function calls:
  3778 ;;		_lcd_putrs
  3779 ;;		_sprintf
  3780 ;; This function is called by:
  3781 ;;		_mostrar_guardar_password
  3782 ;;		_mostrar_guardar_temporal_password
  3783 ;;		_mostrar_guardar_nuevo_password
  3784 ;;		_confirmar_actualizar_password
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text18
  3789  00E39C                     __ptext18:
  3790                           	opt stack 0
  3791  00E39C                     _imprimir_tecla:
  3792                           	opt stack 23
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;incstack = 0
  3796                           ;imprimir_tecla@tecla stored from wreg
  3797  00E39C  6E38               	movwf	imprimir_tecla@tecla,c
  3798                           
  3799                           ;teclado.c: 43: unsigned char aux[20];
  3800                           ;teclado.c: 44: sprintf(aux,"%01u",tecla);
  3801  00E39E  0E24               	movlw	low imprimir_tecla@aux
  3802  00E3A0  6E0D               	movwf	sprintf@sp,c
  3803  00E3A2  0E00               	movlw	high imprimir_tecla@aux
  3804  00E3A4  6E0E               	movwf	sprintf@sp+1,c
  3805  00E3A6  0ED3               	movlw	low STR_7
  3806  00E3A8  6E0F               	movwf	sprintf@f,c
  3807  00E3AA  0EFF               	movlw	high STR_7
  3808  00E3AC  6E10               	movwf	sprintf@f+1,c
  3809  00E3AE  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  3810  00E3B2  6A12               	clrf	?_sprintf+5,c
  3811  00E3B4  EC2F  F07E         	call	_sprintf	;wreg free
  3812                           
  3813                           ;teclado.c: 45: if (ocultar_teclas == 1){
  3814  00E3B8  0100               	movlb	0	; () banked
  3815  00E3BA  05A1               	decf	_ocultar_teclas& (0+255),w,b
  3816  00E3BC  0100               	movlb	0	; () banked
  3817  00E3BE  11A2               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  3818  00E3C0  A4D8               	btfss	status,2,c
  3819  00E3C2  D007               	goto	l3324
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;teclado.c: 46: lcd_putrs("*");
  3823  00E3C4  0EED               	movlw	low STR_30
  3824  00E3C6  6E09               	movwf	lcd_putrs@ptr,c
  3825  00E3C8  0EFF               	movlw	high STR_30
  3826  00E3CA  6E0A               	movwf	lcd_putrs@ptr+1,c
  3827  00E3CC  ECCA  F072         	call	_lcd_putrs	;wreg free
  3828                           
  3829                           ;teclado.c: 47: }else{
  3830  00E3D0  0012               	return	
  3831  00E3D2                     l3324:
  3832                           
  3833                           ;teclado.c: 48: lcd_putrs(aux);
  3834  00E3D2  0E24               	movlw	low imprimir_tecla@aux
  3835  00E3D4  6E09               	movwf	lcd_putrs@ptr,c
  3836  00E3D6  0E00               	movlw	high imprimir_tecla@aux
  3837  00E3D8  6E0A               	movwf	lcd_putrs@ptr+1,c
  3838  00E3DA  ECCA  F072         	call	_lcd_putrs	;wreg free
  3839  00E3DE  0012               	return	
  3840  00E3E0  0012               	return		;funcret
  3841  00E3E2                     __end_of_imprimir_tecla:
  3842                           	opt stack 0
  3843                           tosu	equ	0xFFF
  3844                           tosh	equ	0xFFE
  3845                           tosl	equ	0xFFD
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1l	equ	0xFE1
  3855                           indf2	equ	0xFDF
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _inicializar_hora *****************
  3863 ;; Defined at:
  3864 ;;		line 9 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;		None               void
  3871 ;; Registers used:
  3872 ;;		wreg, status,2
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;Total ram usage:        0 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_cambiar_hora
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text19
  3892  00E1A4                     __ptext19:
  3893                           	opt stack 0
  3894  00E1A4                     _inicializar_hora:
  3895                           	opt stack 27
  3896                           
  3897                           ;hora.c: 10: *hour = 0;
  3898                           
  3899                           ;incstack = 0
  3900  00E1A4  0E00               	movlw	0
  3901  00E1A6  0100               	movlb	0	; () banked
  3902  00E1A8  6FC2               	movwf	_hour& (0+255),b
  3903                           
  3904                           ;hora.c: 11: *minutes = 0;
  3905  00E1AA  0E00               	movlw	0
  3906  00E1AC  0100               	movlb	0	; () banked
  3907  00E1AE  6FC5               	movwf	_minutes& (0+255),b
  3908                           
  3909                           ;hora.c: 13: tamanio_hora = 0;
  3910  00E1B0  0E00               	movlw	0
  3911  00E1B2  6E59               	movwf	_tamanio_hora+1,c
  3912  00E1B4  0E00               	movlw	0
  3913  00E1B6  6E58               	movwf	_tamanio_hora,c
  3914                           
  3915                           ;hora.c: 14: tamanio_minutos = 0;
  3916  00E1B8  0E00               	movlw	0
  3917  00E1BA  6E5D               	movwf	_tamanio_minutos+1,c
  3918  00E1BC  0E00               	movlw	0
  3919  00E1BE  6E5C               	movwf	_tamanio_minutos,c
  3920                           
  3921                           ; BSR set to: 0
  3922  00E1C0  0012               	return		;funcret
  3923  00E1C2                     __end_of_inicializar_hora:
  3924                           	opt stack 0
  3925                           tosu	equ	0xFFF
  3926                           tosh	equ	0xFFE
  3927                           tosl	equ	0xFFD
  3928                           pclath	equ	0xFFA
  3929                           tblptru	equ	0xFF8
  3930                           tblptrh	equ	0xFF7
  3931                           tblptrl	equ	0xFF6
  3932                           tablat	equ	0xFF5
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _guardar_elemento_hora *****************
  3945 ;; Defined at:
  3946 ;;		line 17 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  tecla           1    wreg     unsigned char 
  3949 ;;  array           2   35[COMRAM] PTR unsigned char 
  3950 ;;		 -> minutes(3), hour(3), 
  3951 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  3952 ;;		 -> tamanio_hora(2), tamanio_minutos(2), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  tecla           1   41[COMRAM] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3967 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3968 ;;Total ram usage:        7 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    2
  3971 ;; This function calls:
  3972 ;;		_sprintf
  3973 ;; This function is called by:
  3974 ;;		_cambiar_hora
  3975 ;;		_cambiar_minutos
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text20
  3980  00E7F8                     __ptext20:
  3981                           	opt stack 0
  3982  00E7F8                     _guardar_elemento_hora:
  3983                           	opt stack 25
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;incstack = 0
  3987                           ;guardar_elemento_hora@tecla stored from wreg
  3988  00E7F8  6E2A               	movwf	guardar_elemento_hora@tecla,c
  3989                           
  3990                           ;hora.c: 19: sprintf(buffer2,"%01u",tecla);
  3991  00E7FA  0EA7               	movlw	low _buffer2
  3992  00E7FC  6E0D               	movwf	sprintf@sp,c
  3993  00E7FE  0E00               	movlw	high _buffer2
  3994  00E800  6E0E               	movwf	sprintf@sp+1,c
  3995  00E802  0ED3               	movlw	low STR_7
  3996  00E804  6E0F               	movwf	sprintf@f,c
  3997  00E806  0EFF               	movlw	high STR_7
  3998  00E808  6E10               	movwf	sprintf@f+1,c
  3999  00E80A  C02A  F011         	movff	guardar_elemento_hora@tecla,?_sprintf+4
  4000  00E80E  6A12               	clrf	?_sprintf+5,c
  4001  00E810  EC2F  F07E         	call	_sprintf	;wreg free
  4002                           
  4003                           ;hora.c: 20: array[*tamanio_array] = *buffer2;
  4004  00E814  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4005  00E818  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4006  00E81C  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  4007  00E820  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  4008  00E824  5028               	movf	??_guardar_elemento_hora,w,c
  4009  00E826  2424               	addwf	guardar_elemento_hora@array,w,c
  4010  00E828  6ED9               	movwf	fsr2l,c
  4011  00E82A  5029               	movf	??_guardar_elemento_hora+1,w,c
  4012  00E82C  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  4013  00E82E  6EDA               	movwf	fsr2h,c
  4014  00E830  C0A7  FFDF         	movff	_buffer2,indf2
  4015                           
  4016                           ;hora.c: 21: array [(*tamanio_array)+1] = 0;
  4017  00E834  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4018  00E838  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4019  00E83C  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  4020  00E840  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  4021  00E844  0E01               	movlw	1
  4022  00E846  2628               	addwf	??_guardar_elemento_hora,f,c
  4023  00E848  0E00               	movlw	0
  4024  00E84A  2229               	addwfc	??_guardar_elemento_hora+1,f,c
  4025  00E84C  5028               	movf	??_guardar_elemento_hora,w,c
  4026  00E84E  2424               	addwf	guardar_elemento_hora@array,w,c
  4027  00E850  6ED9               	movwf	fsr2l,c
  4028  00E852  5029               	movf	??_guardar_elemento_hora+1,w,c
  4029  00E854  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  4030  00E856  6EDA               	movwf	fsr2h,c
  4031  00E858  0E00               	movlw	0
  4032  00E85A  6EDF               	movwf	indf2,c
  4033                           
  4034                           ;hora.c: 22: (*tamanio_array)++;
  4035  00E85C  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  4036  00E860  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  4037  00E864  2ADE               	incf	postinc2,f,c
  4038  00E866  0E00               	movlw	0
  4039  00E868  22DD               	addwfc	postdec2,f,c
  4040  00E86A  0012               	return		;funcret
  4041  00E86C                     __end_of_guardar_elemento_hora:
  4042                           	opt stack 0
  4043                           tosu	equ	0xFFF
  4044                           tosh	equ	0xFFE
  4045                           tosl	equ	0xFFD
  4046                           pclath	equ	0xFFA
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _convertir_a_int_hora *****************
  4063 ;; Defined at:
  4064 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  array           2   13[COMRAM] PTR unsigned char 
  4067 ;;		 -> minutes(3), hour(3), 
  4068 ;;  valor           2   15[COMRAM] PTR int 
  4069 ;;		 -> cambiar_minutos@valor(2), cambiar_hora@valor(2), 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;		None               void
  4074 ;; Registers used:
  4075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4081 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4085 ;;Total ram usage:        4 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    2
  4088 ;; This function calls:
  4089 ;;		_atoi
  4090 ;; This function is called by:
  4091 ;;		_cambiar_hora
  4092 ;;		_cambiar_minutos
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text21
  4097  00E186                     __ptext21:
  4098                           	opt stack 0
  4099  00E186                     _convertir_a_int_hora:
  4100                           	opt stack 25
  4101                           
  4102                           ;hora.c: 26: *valor = atoi(array);
  4103                           
  4104                           ;incstack = 0
  4105  00E186  C00E  F007         	movff	convertir_a_int_hora@array,atoi@s
  4106  00E18A  C00F  F008         	movff	convertir_a_int_hora@array+1,atoi@s+1
  4107  00E18E  ECCD  F078         	call	_atoi	;wreg free
  4108  00E192  C010  FFD9         	movff	convertir_a_int_hora@valor,fsr2l
  4109  00E196  C011  FFDA         	movff	convertir_a_int_hora@valor+1,fsr2h
  4110  00E19A  C007  FFDE         	movff	?_atoi,postinc2
  4111  00E19E  C008  FFDD         	movff	?_atoi+1,postdec2
  4112  00E1A2  0012               	return		;funcret
  4113  00E1A4                     __end_of_convertir_a_int_hora:
  4114                           	opt stack 0
  4115                           tosu	equ	0xFFF
  4116                           tosh	equ	0xFFE
  4117                           tosl	equ	0xFFD
  4118                           pclath	equ	0xFFA
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _inicializar_fecha *****************
  4135 ;; Defined at:
  4136 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		wreg, status,2
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; This function calls:
  4157 ;;		Nothing
  4158 ;; This function is called by:
  4159 ;;		_cambiar_dia
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           	psect	text22
  4164  00E276                     __ptext22:
  4165                           	opt stack 0
  4166  00E276                     _inicializar_fecha:
  4167                           	opt stack 27
  4168                           
  4169                           ;fecha.c: 9: *day = 0;
  4170                           
  4171                           ;incstack = 0
  4172  00E276  0E00               	movlw	0
  4173  00E278  0100               	movlb	0	; () banked
  4174  00E27A  6FBF               	movwf	_day& (0+255),b
  4175                           
  4176                           ;fecha.c: 10: *month = 0;
  4177  00E27C  0E00               	movlw	0
  4178  00E27E  0100               	movlb	0	; () banked
  4179  00E280  6FC8               	movwf	_month& (0+255),b
  4180                           
  4181                           ;fecha.c: 11: *year = 0;
  4182  00E282  0E00               	movlw	0
  4183  00E284  0100               	movlb	0	; () banked
  4184  00E286  6FCB               	movwf	_year& (0+255),b
  4185                           
  4186                           ;fecha.c: 13: tamanio_dia = 0;
  4187  00E288  0E00               	movlw	0
  4188  00E28A  6E57               	movwf	_tamanio_dia+1,c
  4189  00E28C  0E00               	movlw	0
  4190  00E28E  6E56               	movwf	_tamanio_dia,c
  4191                           
  4192                           ;fecha.c: 14: tamanio_mes = 0;
  4193  00E290  0E00               	movlw	0
  4194  00E292  6E5B               	movwf	_tamanio_mes+1,c
  4195  00E294  0E00               	movlw	0
  4196  00E296  6E5A               	movwf	_tamanio_mes,c
  4197                           
  4198                           ;fecha.c: 15: tamanio_anio = 0;
  4199  00E298  0E00               	movlw	0
  4200  00E29A  6E55               	movwf	_tamanio_anio+1,c
  4201  00E29C  0E00               	movlw	0
  4202  00E29E  6E54               	movwf	_tamanio_anio,c
  4203                           
  4204                           ; BSR set to: 0
  4205  00E2A0  0012               	return		;funcret
  4206  00E2A2                     __end_of_inicializar_fecha:
  4207                           	opt stack 0
  4208                           tosu	equ	0xFFF
  4209                           tosh	equ	0xFFE
  4210                           tosl	equ	0xFFD
  4211                           pclath	equ	0xFFA
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           postinc0	equ	0xFEE
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _guardar_elemento_fecha *****************
  4228 ;; Defined at:
  4229 ;;		line 18 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  tecla           1    wreg     unsigned char 
  4232 ;;  array           2   35[COMRAM] PTR unsigned char 
  4233 ;;		 -> year(3), month(3), day(3), 
  4234 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  4235 ;;		 -> tamanio_dia(2), tamanio_mes(2), tamanio_anio(2), 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  tecla           1   41[COMRAM] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4249 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4250 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4251 ;;Total ram usage:        7 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    2
  4254 ;; This function calls:
  4255 ;;		_sprintf
  4256 ;; This function is called by:
  4257 ;;		_cambiar_dia
  4258 ;;		_cambiar_mes
  4259 ;;		_cambiar_anio
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text23
  4264  00E784                     __ptext23:
  4265                           	opt stack 0
  4266  00E784                     _guardar_elemento_fecha:
  4267                           	opt stack 25
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;incstack = 0
  4271                           ;guardar_elemento_fecha@tecla stored from wreg
  4272  00E784  6E2A               	movwf	guardar_elemento_fecha@tecla,c
  4273                           
  4274                           ;fecha.c: 20: sprintf(buffer2,"%01u",tecla);
  4275  00E786  0EA7               	movlw	low _buffer2
  4276  00E788  6E0D               	movwf	sprintf@sp,c
  4277  00E78A  0E00               	movlw	high _buffer2
  4278  00E78C  6E0E               	movwf	sprintf@sp+1,c
  4279  00E78E  0ED3               	movlw	low STR_7
  4280  00E790  6E0F               	movwf	sprintf@f,c
  4281  00E792  0EFF               	movlw	high STR_7
  4282  00E794  6E10               	movwf	sprintf@f+1,c
  4283  00E796  C02A  F011         	movff	guardar_elemento_fecha@tecla,?_sprintf+4
  4284  00E79A  6A12               	clrf	?_sprintf+5,c
  4285  00E79C  EC2F  F07E         	call	_sprintf	;wreg free
  4286                           
  4287                           ;fecha.c: 21: array[*tamanio_array] = *buffer2;
  4288  00E7A0  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4289  00E7A4  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4290  00E7A8  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4291  00E7AC  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4292  00E7B0  5028               	movf	??_guardar_elemento_fecha,w,c
  4293  00E7B2  2424               	addwf	guardar_elemento_fecha@array,w,c
  4294  00E7B4  6ED9               	movwf	fsr2l,c
  4295  00E7B6  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4296  00E7B8  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4297  00E7BA  6EDA               	movwf	fsr2h,c
  4298  00E7BC  C0A7  FFDF         	movff	_buffer2,indf2
  4299                           
  4300                           ;fecha.c: 22: array [(*tamanio_array)+1] = 0;
  4301  00E7C0  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4302  00E7C4  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4303  00E7C8  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4304  00E7CC  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4305  00E7D0  0E01               	movlw	1
  4306  00E7D2  2628               	addwf	??_guardar_elemento_fecha,f,c
  4307  00E7D4  0E00               	movlw	0
  4308  00E7D6  2229               	addwfc	??_guardar_elemento_fecha+1,f,c
  4309  00E7D8  5028               	movf	??_guardar_elemento_fecha,w,c
  4310  00E7DA  2424               	addwf	guardar_elemento_fecha@array,w,c
  4311  00E7DC  6ED9               	movwf	fsr2l,c
  4312  00E7DE  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4313  00E7E0  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4314  00E7E2  6EDA               	movwf	fsr2h,c
  4315  00E7E4  0E00               	movlw	0
  4316  00E7E6  6EDF               	movwf	indf2,c
  4317                           
  4318                           ;fecha.c: 23: (*tamanio_array)++;
  4319  00E7E8  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4320  00E7EC  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4321  00E7F0  2ADE               	incf	postinc2,f,c
  4322  00E7F2  0E00               	movlw	0
  4323  00E7F4  22DD               	addwfc	postdec2,f,c
  4324  00E7F6  0012               	return		;funcret
  4325  00E7F8                     __end_of_guardar_elemento_fecha:
  4326                           	opt stack 0
  4327                           tosu	equ	0xFFF
  4328                           tosh	equ	0xFFE
  4329                           tosl	equ	0xFFD
  4330                           pclath	equ	0xFFA
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _convertir_a_int_fecha *****************
  4347 ;; Defined at:
  4348 ;;		line 26 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  array           2   13[COMRAM] PTR unsigned char 
  4351 ;;		 -> year(3), month(3), day(3), 
  4352 ;;  valor           2   15[COMRAM] PTR int 
  4353 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;		None               void
  4358 ;; Registers used:
  4359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4368 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4369 ;;Total ram usage:        4 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    2
  4372 ;; This function calls:
  4373 ;;		_atoi
  4374 ;; This function is called by:
  4375 ;;		_cambiar_dia
  4376 ;;		_cambiar_mes
  4377 ;;		_cambiar_anio
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text24
  4382  00E168                     __ptext24:
  4383                           	opt stack 0
  4384  00E168                     _convertir_a_int_fecha:
  4385                           	opt stack 25
  4386                           
  4387                           ;fecha.c: 27: *valor = atoi(array);
  4388                           
  4389                           ;incstack = 0
  4390  00E168  C00E  F007         	movff	convertir_a_int_fecha@array,atoi@s
  4391  00E16C  C00F  F008         	movff	convertir_a_int_fecha@array+1,atoi@s+1
  4392  00E170  ECCD  F078         	call	_atoi	;wreg free
  4393  00E174  C010  FFD9         	movff	convertir_a_int_fecha@valor,fsr2l
  4394  00E178  C011  FFDA         	movff	convertir_a_int_fecha@valor+1,fsr2h
  4395  00E17C  C007  FFDE         	movff	?_atoi,postinc2
  4396  00E180  C008  FFDD         	movff	?_atoi+1,postdec2
  4397  00E184  0012               	return		;funcret
  4398  00E186                     __end_of_convertir_a_int_fecha:
  4399                           	opt stack 0
  4400                           tosu	equ	0xFFF
  4401                           tosh	equ	0xFFE
  4402                           tosl	equ	0xFFD
  4403                           pclath	equ	0xFFA
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           postdec2	equ	0xFDD
  4415                           fsr2h	equ	0xFDA
  4416                           fsr2l	equ	0xFD9
  4417                           status	equ	0xFD8
  4418                           
  4419 ;; *************** function _atoi *****************
  4420 ;; Defined at:
  4421 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  s               2    6[COMRAM] PTR const unsigned char 
  4424 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  4425 ;;		 -> day(3), 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;  a               2   11[COMRAM] int 
  4428 ;;  sign            1   10[COMRAM] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  2    6[COMRAM] int 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4439 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4441 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4442 ;;Total ram usage:        7 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    1
  4445 ;; This function calls:
  4446 ;;		___wmul
  4447 ;;		_isdigit
  4448 ;; This function is called by:
  4449 ;;		_convertir_a_int_fecha
  4450 ;;		_convertir_a_int_hora
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text25
  4455  00F19A                     __ptext25:
  4456                           	opt stack 0
  4457  00F19A                     _atoi:
  4458                           	opt stack 25
  4459                           
  4460                           ;incstack = 0
  4461  00F19A  D003               	goto	l3064
  4462  00F19C                     l3062:
  4463  00F19C  4A07               	infsnz	atoi@s,f,c
  4464  00F19E  2A08               	incf	atoi@s+1,f,c
  4465  00F1A0  D000               	goto	l3064
  4466  00F1A2                     l3064:
  4467  00F1A2  C007  FFD9         	movff	atoi@s,fsr2l
  4468  00F1A6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4469  00F1AA  0E20               	movlw	32
  4470  00F1AC  18DE               	xorwf	postinc2,w,c
  4471  00F1AE  B4D8               	btfsc	status,2,c
  4472  00F1B0  D7F5               	goto	l3062
  4473  00F1B2  C007  FFD9         	movff	atoi@s,fsr2l
  4474  00F1B6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4475  00F1BA  0E09               	movlw	9
  4476  00F1BC  18DE               	xorwf	postinc2,w,c
  4477  00F1BE  B4D8               	btfsc	status,2,c
  4478  00F1C0  D7ED               	goto	l3062
  4479  00F1C2  0E00               	movlw	0
  4480  00F1C4  6E0D               	movwf	atoi@a+1,c
  4481  00F1C6  0E00               	movlw	0
  4482  00F1C8  6E0C               	movwf	atoi@a,c
  4483  00F1CA  0E00               	movlw	0
  4484  00F1CC  6E0B               	movwf	atoi@sign,c
  4485  00F1CE  C007  FFD9         	movff	atoi@s,fsr2l
  4486  00F1D2  C008  FFDA         	movff	atoi@s+1,fsr2h
  4487  00F1D6  0E2D               	movlw	45
  4488  00F1D8  18DE               	xorwf	postinc2,w,c
  4489  00F1DA  A4D8               	btfss	status,2,c
  4490  00F1DC  D002               	goto	l3074
  4491  00F1DE  2A0B               	incf	atoi@sign,f,c
  4492  00F1E0  D025               	goto	l3080
  4493  00F1E2                     l3074:
  4494  00F1E2  C007  FFD9         	movff	atoi@s,fsr2l
  4495  00F1E6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4496  00F1EA  0E2B               	movlw	43
  4497  00F1EC  18DE               	xorwf	postinc2,w,c
  4498  00F1EE  A4D8               	btfss	status,2,c
  4499  00F1F0  D020               	goto	l3082
  4500  00F1F2  D01C               	goto	l3080
  4501  00F1F4  D01E               	goto	l3082
  4502  00F1F6                     l3078:
  4503  00F1F6  C00C  F001         	movff	atoi@a,___wmul@multiplier
  4504  00F1FA  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  4505  00F1FE  0E00               	movlw	0
  4506  00F200  6E04               	movwf	___wmul@multiplicand+1,c
  4507  00F202  0E0A               	movlw	10
  4508  00F204  6E03               	movwf	___wmul@multiplicand,c
  4509  00F206  EC27  F071         	call	___wmul	;wreg free
  4510  00F20A  C007  FFD9         	movff	atoi@s,fsr2l
  4511  00F20E  C008  FFDA         	movff	atoi@s+1,fsr2h
  4512  00F212  50DF               	movf	indf2,w,c
  4513  00F214  6E09               	movwf	??_atoi& (0+255),c
  4514  00F216  6A0A               	clrf	(??_atoi+1)& (0+255),c
  4515  00F218  5001               	movf	?___wmul,w,c
  4516  00F21A  2609               	addwf	??_atoi,f,c
  4517  00F21C  5002               	movf	?___wmul+1,w,c
  4518  00F21E  220A               	addwfc	??_atoi+1,f,c
  4519  00F220  0ED0               	movlw	208
  4520  00F222  2409               	addwf	??_atoi,w,c
  4521  00F224  6E0C               	movwf	atoi@a,c
  4522  00F226  0EFF               	movlw	255
  4523  00F228  200A               	addwfc	??_atoi+1,w,c
  4524  00F22A  6E0D               	movwf	atoi@a+1,c
  4525  00F22C                     l3080:
  4526  00F22C  4A07               	infsnz	atoi@s,f,c
  4527  00F22E  2A08               	incf	atoi@s+1,f,c
  4528  00F230  D000               	goto	l3082
  4529  00F232                     l3082:
  4530  00F232  C007  FFD9         	movff	atoi@s,fsr2l
  4531  00F236  C008  FFDA         	movff	atoi@s+1,fsr2h
  4532  00F23A  50DF               	movf	indf2,w,c
  4533  00F23C  ECF2  F070         	call	_isdigit
  4534  00F240  B0D8               	btfsc	status,0,c
  4535  00F242  D7D9               	goto	l3078
  4536  00F244  500B               	movf	atoi@sign,w,c
  4537  00F246  B4D8               	btfsc	status,2,c
  4538  00F248  D00D               	goto	l1144
  4539  00F24A  C00C  F009         	movff	atoi@a,??_atoi
  4540  00F24E  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  4541  00F252  1E09               	comf	??_atoi,f,c
  4542  00F254  1E0A               	comf	??_atoi+1,f,c
  4543  00F256  4A09               	infsnz	??_atoi,f,c
  4544  00F258  2A0A               	incf	??_atoi+1,f,c
  4545  00F25A  C009  F007         	movff	??_atoi,?_atoi
  4546  00F25E  C00A  F008         	movff	??_atoi+1,?_atoi+1
  4547  00F262  0012               	return	
  4548  00F264                     l1144:
  4549  00F264  C00C  F007         	movff	atoi@a,?_atoi
  4550  00F268  C00D  F008         	movff	atoi@a+1,?_atoi+1
  4551  00F26C  0012               	return		;funcret
  4552  00F26E                     __end_of_atoi:
  4553                           	opt stack 0
  4554                           tosu	equ	0xFFF
  4555                           tosh	equ	0xFFE
  4556                           tosl	equ	0xFFD
  4557                           pclath	equ	0xFFA
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           postdec1	equ	0xFE5
  4565                           fsr1l	equ	0xFE1
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _ingresar_password *****************
  4574 ;; Defined at:
  4575 ;;		line 89 in file "main.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  i               2   27[COMRAM] int 
  4580 ;;  i               2   29[COMRAM] int 
  4581 ;;  clear          16   11[COMRAM] unsigned char [16]
  4582 ;; Return value:  Size  Location     Type
  4583 ;;		None               void
  4584 ;; Registers used:
  4585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4592 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4594 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4595 ;;Total ram usage:       21 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    5
  4598 ;; This function calls:
  4599 ;;		_lcd_comand
  4600 ;;		_lcd_gotoxy
  4601 ;;		_lcd_putrs
  4602 ;;		_validar_password
  4603 ;; This function is called by:
  4604 ;;		_main
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text26
  4609  00F344                     __ptext26:
  4610                           	opt stack 0
  4611  00F344                     _ingresar_password:
  4612                           	opt stack 25
  4613                           
  4614                           ;main.c: 90: char clear[16];
  4615                           ;main.c: 91: for (int i=0;i<16;i++) clear[i]=' ';
  4616                           
  4617                           ;incstack = 0
  4618  00F344  0E00               	movlw	0
  4619  00F346  6E1F               	movwf	ingresar_password@i+1,c
  4620  00F348  0E00               	movlw	0
  4621  00F34A  6E1E               	movwf	ingresar_password@i,c
  4622  00F34C                     l3788:
  4623  00F34C  BE1F               	btfsc	ingresar_password@i+1,7,c
  4624  00F34E  D008               	goto	l3792
  4625  00F350  501F               	movf	ingresar_password@i+1,w,c
  4626  00F352  E112               	bnz	l3798
  4627  00F354  0E10               	movlw	16
  4628  00F356  5C1E               	subwf	ingresar_password@i,w,c
  4629  00F358  B0D8               	btfsc	status,0,c
  4630  00F35A  D00E               	goto	l3798
  4631  00F35C  D001               	goto	l3792
  4632  00F35E  D00C               	goto	l3798
  4633  00F360                     l3792:
  4634  00F360  0E0C               	movlw	low ingresar_password@clear
  4635  00F362  241E               	addwf	ingresar_password@i,w,c
  4636  00F364  6ED9               	movwf	fsr2l,c
  4637  00F366  0E00               	movlw	high ingresar_password@clear
  4638  00F368  201F               	addwfc	ingresar_password@i+1,w,c
  4639  00F36A  6EDA               	movwf	fsr2h,c
  4640  00F36C  0E20               	movlw	32
  4641  00F36E  6EDF               	movwf	indf2,c
  4642  00F370  4A1E               	infsnz	ingresar_password@i,f,c
  4643  00F372  2A1F               	incf	ingresar_password@i+1,f,c
  4644  00F374  D7EB               	goto	l3788
  4645  00F376  D000               	goto	l3798
  4646  00F378                     l3798:
  4647                           
  4648                           ;main.c: 93: lcd_comand(0b00001100);
  4649  00F378  0E0C               	movlw	12
  4650  00F37A  EC6B  F070         	call	_lcd_comand
  4651                           
  4652                           ;main.c: 94: lcd_gotoxy(1,1);
  4653  00F37E  0E01               	movlw	1
  4654  00F380  6E05               	movwf	lcd_gotoxy@y,c
  4655  00F382  0E01               	movlw	1
  4656  00F384  EC03  F071         	call	_lcd_gotoxy
  4657                           
  4658                           ;main.c: 95: lcd_putrs("Inserte password");
  4659  00F388  0E91               	movlw	low STR_5
  4660  00F38A  6E09               	movwf	lcd_putrs@ptr,c
  4661  00F38C  0EFF               	movlw	high STR_5
  4662  00F38E  6E0A               	movwf	lcd_putrs@ptr+1,c
  4663  00F390  ECCA  F072         	call	_lcd_putrs	;wreg free
  4664                           
  4665                           ;main.c: 96: lcd_gotoxy(tamanio_password+1,2);
  4666  00F394  0E02               	movlw	2
  4667  00F396  6E05               	movwf	lcd_gotoxy@y,c
  4668  00F398  284D               	incf	_tamanio_password,w,c
  4669  00F39A  EC03  F071         	call	_lcd_gotoxy
  4670                           
  4671                           ;main.c: 98: validar_password();
  4672  00F39E  EC30  F075         	call	_validar_password	;wreg free
  4673                           
  4674                           ;main.c: 99: if (tamanio_password >= 6 && !autorizado){
  4675  00F3A2  BE4E               	btfsc	_tamanio_password+1,7,c
  4676  00F3A4  0012               	return	
  4677  00F3A6  504E               	movf	_tamanio_password+1,w,c
  4678  00F3A8  E104               	bnz	u2980
  4679  00F3AA  0E06               	movlw	6
  4680  00F3AC  5C4D               	subwf	_tamanio_password,w,c
  4681  00F3AE  A0D8               	btfss	status,0,c
  4682  00F3B0  0012               	return	
  4683  00F3B2                     u2980:
  4684  00F3B2  0100               	movlb	0	; () banked
  4685  00F3B4  5193               	movf	_autorizado& (0+255),w,b
  4686  00F3B6  0100               	movlb	0	; () banked
  4687  00F3B8  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  4688  00F3BA  A4D8               	btfss	status,2,c
  4689  00F3BC  0012               	return	
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;main.c: 100: tamanio_password = 0;
  4693  00F3BE  0E00               	movlw	0
  4694  00F3C0  6E4E               	movwf	_tamanio_password+1,c
  4695  00F3C2  0E00               	movlw	0
  4696  00F3C4  6E4D               	movwf	_tamanio_password,c
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;main.c: 101: lcd_gotoxy(1,2);
  4700  00F3C6  0E02               	movlw	2
  4701  00F3C8  6E05               	movwf	lcd_gotoxy@y,c
  4702  00F3CA  0E01               	movlw	1
  4703  00F3CC  EC03  F071         	call	_lcd_gotoxy
  4704                           
  4705                           ;main.c: 102: lcd_putrs("ERROR pass");
  4706  00F3D0  0EC0               	movlw	low STR_6
  4707  00F3D2  6E09               	movwf	lcd_putrs@ptr,c
  4708  00F3D4  0EFF               	movlw	high STR_6
  4709  00F3D6  6E0A               	movwf	lcd_putrs@ptr+1,c
  4710  00F3D8  ECCA  F072         	call	_lcd_putrs	;wreg free
  4711                           
  4712                           ;main.c: 103: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  4713  00F3DC  0E00               	movlw	0
  4714  00F3DE  6E1D               	movwf	ingresar_password@i_565+1,c
  4715  00F3E0  0E00               	movlw	0
  4716  00F3E2  6E1C               	movwf	ingresar_password@i_565,c
  4717  00F3E4                     l3818:
  4718  00F3E4  BE1D               	btfsc	ingresar_password@i_565+1,7,c
  4719  00F3E6  D008               	goto	l3822
  4720  00F3E8  501D               	movf	ingresar_password@i_565+1,w,c
  4721  00F3EA  E112               	bnz	l3826
  4722  00F3EC  0E04               	movlw	4
  4723  00F3EE  5C1C               	subwf	ingresar_password@i_565,w,c
  4724  00F3F0  B0D8               	btfsc	status,0,c
  4725  00F3F2  D00E               	goto	l3826
  4726  00F3F4  D001               	goto	l3822
  4727  00F3F6  D00C               	goto	l3826
  4728  00F3F8                     l3822:
  4729  00F3F8  0EFF               	movlw	255
  4730  00F3FA  6E0B               	movwf	??_ingresar_password& (0+255),c
  4731  00F3FC  0E8A               	movlw	138
  4732  00F3FE                     u3357:
  4733  00F3FE  2EE8               	decfsz	wreg,f,c
  4734  00F400  D7FE               	goto	u3357
  4735  00F402  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  4736  00F404  D7FC               	goto	u3357
  4737  00F406  D000               	nop2	
  4738  00F408  4A1C               	infsnz	ingresar_password@i_565,f,c
  4739  00F40A  2A1D               	incf	ingresar_password@i_565+1,f,c
  4740  00F40C  D7EB               	goto	l3818
  4741  00F40E  D000               	goto	l3826
  4742  00F410                     l3826:
  4743                           
  4744                           ;main.c: 104: lcd_gotoxy(1,2);
  4745  00F410  0E02               	movlw	2
  4746  00F412  6E05               	movwf	lcd_gotoxy@y,c
  4747  00F414  0E01               	movlw	1
  4748  00F416  EC03  F071         	call	_lcd_gotoxy
  4749                           
  4750                           ;main.c: 105: lcd_putrs(clear);
  4751  00F41A  0E0C               	movlw	low ingresar_password@clear
  4752  00F41C  6E09               	movwf	lcd_putrs@ptr,c
  4753  00F41E  0E00               	movlw	high ingresar_password@clear
  4754  00F420  6E0A               	movwf	lcd_putrs@ptr+1,c
  4755  00F422  ECCA  F072         	call	_lcd_putrs	;wreg free
  4756  00F426  0012               	return	
  4757  00F428  0012               	return		;funcret
  4758  00F42A                     __end_of_ingresar_password:
  4759                           	opt stack 0
  4760                           tosu	equ	0xFFF
  4761                           tosh	equ	0xFFE
  4762                           tosl	equ	0xFFD
  4763                           pclath	equ	0xFFA
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           postdec1	equ	0xFE5
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _validar_password *****************
  4780 ;; Defined at:
  4781 ;;		line 34 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  i               2    2[COMRAM] int 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4798 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4799 ;;Total ram usage:        4 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_ingresar_password
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text27
  4809  00EA60                     __ptext27:
  4810                           	opt stack 0
  4811  00EA60                     _validar_password:
  4812                           	opt stack 29
  4813                           
  4814                           ;alarma.c: 36: autorizado = 1;
  4815                           
  4816                           ;incstack = 0
  4817  00EA60  0E00               	movlw	0
  4818  00EA62  0100               	movlb	0	; () banked
  4819  00EA64  6F94               	movwf	(_autorizado+1)& (0+255),b
  4820  00EA66  0E01               	movlw	1
  4821  00EA68  6F93               	movwf	_autorizado& (0+255),b
  4822                           
  4823                           ;alarma.c: 37: int i = 0;
  4824  00EA6A  0E00               	movlw	0
  4825  00EA6C  6E04               	movwf	validar_password@i+1,c
  4826  00EA6E  0E00               	movlw	0
  4827  00EA70  6E03               	movwf	validar_password@i,c
  4828                           
  4829                           ;alarma.c: 38: while (i < 6 && autorizado==1){
  4830  00EA72  D019               	goto	l3596
  4831  00EA74                     l3590:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;alarma.c: 40: if (current_password[i] != password[i])
  4835  00EA74  0ECE               	movlw	low _password
  4836  00EA76  2403               	addwf	validar_password@i,w,c
  4837  00EA78  6ED9               	movwf	fsr2l,c
  4838  00EA7A  0E00               	movlw	high _password
  4839  00EA7C  2004               	addwfc	validar_password@i+1,w,c
  4840  00EA7E  6EDA               	movwf	fsr2h,c
  4841  00EA80  0E78               	movlw	low _current_password
  4842  00EA82  2403               	addwf	validar_password@i,w,c
  4843  00EA84  6EE1               	movwf	fsr1l,c
  4844  00EA86  0E00               	movlw	high _current_password
  4845  00EA88  2004               	addwfc	validar_password@i+1,w,c
  4846  00EA8A  6EE2               	movwf	fsr1h,c
  4847  00EA8C  50DE               	movf	postinc2,w,c
  4848  00EA8E  18E6               	xorwf	postinc1,w,c
  4849  00EA90  B4D8               	btfsc	status,2,c
  4850  00EA92  D006               	goto	l3594
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;alarma.c: 41: autorizado = 0;
  4854  00EA94  0E00               	movlw	0
  4855  00EA96  0100               	movlb	0	; () banked
  4856  00EA98  6F94               	movwf	(_autorizado+1)& (0+255),b
  4857  00EA9A  0E00               	movlw	0
  4858  00EA9C  6F93               	movwf	_autorizado& (0+255),b
  4859  00EA9E  D000               	goto	l3594
  4860  00EAA0                     l3594:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;alarma.c: 43: i++;
  4864  00EAA0  4A03               	infsnz	validar_password@i,f,c
  4865  00EAA2  2A04               	incf	validar_password@i+1,f,c
  4866  00EAA4  D000               	goto	l3596
  4867  00EAA6                     l3596:
  4868                           
  4869                           ; BSR set to: 0
  4870  00EAA6  BE04               	btfsc	validar_password@i+1,7,c
  4871  00EAA8  D006               	goto	l3598
  4872  00EAAA  5004               	movf	validar_password@i+1,w,c
  4873  00EAAC  E10C               	bnz	l3600
  4874  00EAAE  0E06               	movlw	6
  4875  00EAB0  5C03               	subwf	validar_password@i,w,c
  4876  00EAB2  B0D8               	btfsc	status,0,c
  4877  00EAB4  D008               	goto	l3600
  4878  00EAB6                     l3598:
  4879                           
  4880                           ; BSR set to: 0
  4881  00EAB6  0100               	movlb	0	; () banked
  4882  00EAB8  0593               	decf	_autorizado& (0+255),w,b
  4883  00EABA  0100               	movlb	0	; () banked
  4884  00EABC  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  4885  00EABE  A4D8               	btfss	status,2,c
  4886  00EAC0  D002               	goto	l3600
  4887  00EAC2  D7D8               	goto	l3590
  4888                           
  4889                           ; BSR set to: 0
  4890  00EAC4  D000               	goto	l3600
  4891  00EAC6                     l3600:
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;alarma.c: 44: }
  4895                           ;alarma.c: 46: if (autorizado == 1){
  4896  00EAC6  0100               	movlb	0	; () banked
  4897  00EAC8  0593               	decf	_autorizado& (0+255),w,b
  4898  00EACA  0100               	movlb	0	; () banked
  4899  00EACC  1194               	iorwf	(_autorizado+1)& (0+255),w,b
  4900  00EACE  A4D8               	btfss	status,2,c
  4901  00EAD0  0012               	return	
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;alarma.c: 47: tamanio_password = 0;
  4905  00EAD2  0E00               	movlw	0
  4906  00EAD4  6E4E               	movwf	_tamanio_password+1,c
  4907  00EAD6  0E00               	movlw	0
  4908  00EAD8  6E4D               	movwf	_tamanio_password,c
  4909                           
  4910                           ;alarma.c: 48: encendida = 1;
  4911  00EADA  0E00               	movlw	0
  4912  00EADC  0100               	movlb	0	; () banked
  4913  00EADE  6F9A               	movwf	(_encendida+1)& (0+255),b
  4914  00EAE0  0E01               	movlw	1
  4915  00EAE2  6F99               	movwf	_encendida& (0+255),b
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;alarma.c: 49: LATBbits.LATB1 = 1;;
  4919  00EAE4  828A               	bsf	3978,1,c	;volatile
  4920  00EAE6  0012               	return	
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  00EAE8  0012               	return		;funcret
  4926  00EAEA                     __end_of_validar_password:
  4927                           	opt stack 0
  4928                           tosu	equ	0xFFF
  4929                           tosh	equ	0xFFE
  4930                           tosl	equ	0xFFD
  4931                           pclath	equ	0xFFA
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           postinc1	equ	0xFE6
  4939                           postdec1	equ	0xFE5
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           postdec2	equ	0xFDD
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _caratula *****************
  4950 ;; Defined at:
  4951 ;;		line 35 in file "main.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  titulo          2   35[COMRAM] PTR const unsigned char 
  4954 ;;		 -> STR_25(8), STR_12(8), 
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4969 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4970 ;;Total ram usage:        4 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    5
  4973 ;; This function calls:
  4974 ;;		_lcd_comand
  4975 ;;		_lcd_gotoxy
  4976 ;;		_lcd_putrs
  4977 ;;		_sprintf
  4978 ;; This function is called by:
  4979 ;;		_main
  4980 ;;		_mostrar_caratula
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text28
  4985  00F26E                     __ptext28:
  4986                           	opt stack 0
  4987  00F26E                     _caratula:
  4988                           	opt stack 25
  4989                           
  4990                           ;main.c: 37: lcd_comand(0b00001100);
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;incstack = 0
  4994  00F26E  0E0C               	movlw	12
  4995  00F270  EC6B  F070         	call	_lcd_comand
  4996                           
  4997                           ;main.c: 38: lcd_gotoxy(1,1);
  4998  00F274  0E01               	movlw	1
  4999  00F276  6E05               	movwf	lcd_gotoxy@y,c
  5000  00F278  0E01               	movlw	1
  5001  00F27A  EC03  F071         	call	_lcd_gotoxy
  5002                           
  5003                           ;main.c: 39: lcd_putrs(titulo);
  5004  00F27E  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  5005  00F282  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  5006  00F286  ECCA  F072         	call	_lcd_putrs	;wreg free
  5007                           
  5008                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  5009  00F28A  0EA7               	movlw	low _buffer2
  5010  00F28C  6E0D               	movwf	sprintf@sp,c
  5011  00F28E  0E00               	movlw	high _buffer2
  5012  00F290  6E0E               	movwf	sprintf@sp+1,c
  5013  00F292  0EA2               	movlw	low STR_1
  5014  00F294  6E0F               	movwf	sprintf@f,c
  5015  00F296  0EFF               	movlw	high STR_1
  5016  00F298  6E10               	movwf	sprintf@f+1,c
  5017  00F29A  C0DC  F011         	movff	_dia,?_sprintf+4
  5018  00F29E  C0DD  F012         	movff	_dia+1,?_sprintf+5
  5019  00F2A2  C0E2  F013         	movff	_mes,?_sprintf+6
  5020  00F2A6  C0E3  F014         	movff	_mes+1,?_sprintf+7
  5021  00F2AA  C0DA  F015         	movff	_anio,?_sprintf+8
  5022  00F2AE  C0DB  F016         	movff	_anio+1,?_sprintf+9
  5023  00F2B2  EC2F  F07E         	call	_sprintf	;wreg free
  5024                           
  5025                           ;main.c: 42: lcd_gotoxy(9,1);
  5026  00F2B6  0E01               	movlw	1
  5027  00F2B8  6E05               	movwf	lcd_gotoxy@y,c
  5028  00F2BA  0E09               	movlw	9
  5029  00F2BC  EC03  F071         	call	_lcd_gotoxy
  5030                           
  5031                           ;main.c: 43: lcd_putrs(buffer2);
  5032  00F2C0  0EA7               	movlw	low _buffer2
  5033  00F2C2  6E09               	movwf	lcd_putrs@ptr,c
  5034  00F2C4  0E00               	movlw	high _buffer2
  5035  00F2C6  6E0A               	movwf	lcd_putrs@ptr+1,c
  5036  00F2C8  ECCA  F072         	call	_lcd_putrs	;wreg free
  5037                           
  5038                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  5039  00F2CC  0EA7               	movlw	low _buffer2
  5040  00F2CE  6E0D               	movwf	sprintf@sp,c
  5041  00F2D0  0E00               	movlw	high _buffer2
  5042  00F2D2  6E0E               	movwf	sprintf@sp+1,c
  5043  00F2D4  0EB1               	movlw	low STR_2
  5044  00F2D6  6E0F               	movwf	sprintf@f,c
  5045  00F2D8  0EFF               	movlw	high STR_2
  5046  00F2DA  6E10               	movwf	sprintf@f+1,c
  5047  00F2DC  C0E0  F011         	movff	_hora,?_sprintf+4
  5048  00F2E0  C0E1  F012         	movff	_hora+1,?_sprintf+5
  5049  00F2E4  C0E4  F013         	movff	_minuto,?_sprintf+6
  5050  00F2E8  C0E5  F014         	movff	_minuto+1,?_sprintf+7
  5051  00F2EC  C0A3  F015         	movff	_segundo,?_sprintf+8
  5052  00F2F0  C0A4  F016         	movff	_segundo+1,?_sprintf+9
  5053  00F2F4  EC2F  F07E         	call	_sprintf	;wreg free
  5054                           
  5055                           ;main.c: 46: lcd_gotoxy(1,2);
  5056  00F2F8  0E02               	movlw	2
  5057  00F2FA  6E05               	movwf	lcd_gotoxy@y,c
  5058  00F2FC  0E01               	movlw	1
  5059  00F2FE  EC03  F071         	call	_lcd_gotoxy
  5060                           
  5061                           ;main.c: 47: lcd_putrs(buffer2);
  5062  00F302  0EA7               	movlw	low _buffer2
  5063  00F304  6E09               	movwf	lcd_putrs@ptr,c
  5064  00F306  0E00               	movlw	high _buffer2
  5065  00F308  6E0A               	movwf	lcd_putrs@ptr+1,c
  5066  00F30A  ECCA  F072         	call	_lcd_putrs	;wreg free
  5067                           
  5068                           ;main.c: 49: lcd_gotoxy(13,2);
  5069  00F30E  0E02               	movlw	2
  5070  00F310  6E05               	movwf	lcd_gotoxy@y,c
  5071  00F312  0E0D               	movlw	13
  5072  00F314  EC03  F071         	call	_lcd_gotoxy
  5073                           
  5074                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  5075  00F318  0100               	movlb	0	; () banked
  5076  00F31A  5199               	movf	_encendida& (0+255),w,b
  5077  00F31C  0100               	movlb	0	; () banked
  5078  00F31E  119A               	iorwf	(_encendida+1)& (0+255),w,b
  5079  00F320  A4D8               	btfss	status,2,c
  5080  00F322  D004               	goto	l3758
  5081                           
  5082                           ; BSR set to: 0
  5083  00F324  0ED8               	movlw	low STR_4
  5084  00F326  6E26               	movwf	_caratula$527,c
  5085  00F328  0EFF               	movlw	high STR_4
  5086  00F32A  D003               	goto	L1
  5087  00F32C                     l3758:
  5088                           
  5089                           ; BSR set to: 0
  5090  00F32C  0EE5               	movlw	low STR_3
  5091  00F32E  6E26               	movwf	_caratula$527,c
  5092  00F330  0EFF               	movlw	high STR_3
  5093  00F332                     L1:
  5094  00F332  6E27               	movwf	_caratula$527+1,c
  5095  00F334  D000               	goto	l3760
  5096  00F336                     l3760:
  5097                           
  5098                           ; BSR set to: 0
  5099  00F336  C026  F009         	movff	_caratula$527,lcd_putrs@ptr
  5100  00F33A  C027  F00A         	movff	_caratula$527+1,lcd_putrs@ptr+1
  5101  00F33E  ECCA  F072         	call	_lcd_putrs	;wreg free
  5102  00F342  0012               	return		;funcret
  5103  00F344                     __end_of_caratula:
  5104                           	opt stack 0
  5105                           tosu	equ	0xFFF
  5106                           tosh	equ	0xFFE
  5107                           tosl	equ	0xFFD
  5108                           pclath	equ	0xFFA
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           postinc1	equ	0xFE6
  5116                           postdec1	equ	0xFE5
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _cambiar_password *****************
  5127 ;; Defined at:
  5128 ;;		line 196 in file "main.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  verifica        2   37[COMRAM] int 
  5133 ;;  confirmar       2   35[COMRAM] int 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5144 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5146 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5147 ;;Total ram usage:        4 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    6
  5150 ;; This function calls:
  5151 ;;		_actualizar_password
  5152 ;;		_clear_display
  5153 ;;		_mostrar_titulo_menu
  5154 ;;		_sprintf
  5155 ;;		_verficar_password
  5156 ;; This function is called by:
  5157 ;;		_main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text29
  5162  00F0CA                     __ptext29:
  5163                           	opt stack 0
  5164  00F0CA                     _cambiar_password:
  5165                           	opt stack 24
  5166                           
  5167                           ;main.c: 198: int verifica, confirmar;
  5168                           ;main.c: 200: puntero_funcion = &mostrar_guardar_temporal_password;
  5169                           
  5170                           ;incstack = 0
  5171  00F0CA  0EA2               	movlw	low _mostrar_guardar_temporal_password
  5172  00F0CC  6E49               	movwf	_puntero_funcion,c
  5173  00F0CE  0EE2               	movlw	high _mostrar_guardar_temporal_password
  5174  00F0D0  6E4A               	movwf	_puntero_funcion+1,c
  5175                           
  5176                           ;main.c: 202: verficar_password(&verifica);
  5177  00F0D2  0E26               	movlw	low cambiar_password@verifica
  5178  00F0D4  6E01               	movwf	verficar_password@verifica,c
  5179  00F0D6  0E00               	movlw	high cambiar_password@verifica
  5180  00F0D8  6E02               	movwf	verficar_password@verifica+1,c
  5181  00F0DA  EC71  F074         	call	_verficar_password	;wreg free
  5182                           
  5183                           ;main.c: 203: if(!verifica){
  5184  00F0DE  5026               	movf	cambiar_password@verifica,w,c
  5185  00F0E0  1027               	iorwf	cambiar_password@verifica+1,w,c
  5186  00F0E2  A4D8               	btfss	status,2,c
  5187  00F0E4  D00F               	goto	l3892
  5188                           
  5189                           ;main.c: 204: mostrar_titulo_menu("Password actual:          ");
  5190  00F0E6  0ED1               	movlw	low STR_19
  5191  00F0E8  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5192  00F0EA  0EFE               	movlw	high STR_19
  5193  00F0EC  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5194  00F0EE  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  5195                           
  5196                           ;main.c: 205: clear_display(tamanio_password+1);
  5197  00F0F2  0E01               	movlw	1
  5198  00F0F4  244D               	addwf	_tamanio_password,w,c
  5199  00F0F6  6E0B               	movwf	clear_display@pos,c
  5200  00F0F8  0E00               	movlw	0
  5201  00F0FA  204E               	addwfc	_tamanio_password+1,w,c
  5202  00F0FC  6E0C               	movwf	clear_display@pos+1,c
  5203  00F0FE  ECE1  F070         	call	_clear_display	;wreg free
  5204                           
  5205                           ;main.c: 207: }else {
  5206  00F102  0012               	return	
  5207  00F104                     l3892:
  5208                           
  5209                           ;main.c: 208: if (tamanio_new_password <= 6){
  5210  00F104  BE4C               	btfsc	_tamanio_new_password+1,7,c
  5211  00F106  D006               	goto	l3894
  5212  00F108  504C               	movf	_tamanio_new_password+1,w,c
  5213  00F10A  E11E               	bnz	l3902
  5214  00F10C  0E07               	movlw	7
  5215  00F10E  5C4B               	subwf	_tamanio_new_password,w,c
  5216  00F110  B0D8               	btfsc	status,0,c
  5217  00F112  D01A               	goto	l3902
  5218  00F114                     l3894:
  5219                           
  5220                           ;main.c: 209: puntero_funcion = &mostrar_guardar_nuevo_password;
  5221  00F114  0EFA               	movlw	low _mostrar_guardar_nuevo_password
  5222  00F116  6E49               	movwf	_puntero_funcion,c
  5223  00F118  0EE2               	movlw	high _mostrar_guardar_nuevo_password
  5224  00F11A  6E4A               	movwf	_puntero_funcion+1,c
  5225                           
  5226                           ;main.c: 211: mostrar_titulo_menu("Nuevo pass:        ");
  5227  00F11C  0E33               	movlw	low STR_20
  5228  00F11E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5229  00F120  0EFF               	movlw	high STR_20
  5230  00F122  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5231  00F124  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  5232                           
  5233                           ;main.c: 212: clear_display(tamanio_new_password+1);
  5234  00F128  0E01               	movlw	1
  5235  00F12A  244B               	addwf	_tamanio_new_password,w,c
  5236  00F12C  6E0B               	movwf	clear_display@pos,c
  5237  00F12E  0E00               	movlw	0
  5238  00F130  204C               	addwfc	_tamanio_new_password+1,w,c
  5239  00F132  6E0C               	movwf	clear_display@pos+1,c
  5240  00F134  ECE1  F070         	call	_clear_display	;wreg free
  5241                           
  5242                           ;main.c: 214: if (tamanio_new_password == 6) tamanio_new_password++;
  5243  00F138  0E06               	movlw	6
  5244  00F13A  184B               	xorwf	_tamanio_new_password,w,c
  5245  00F13C  104C               	iorwf	_tamanio_new_password+1,w,c
  5246  00F13E  A4D8               	btfss	status,2,c
  5247  00F140  0012               	return	
  5248  00F142  4A4B               	infsnz	_tamanio_new_password,f,c
  5249  00F144  2A4C               	incf	_tamanio_new_password+1,f,c
  5250                           
  5251                           ;main.c: 216: }else{
  5252  00F146  0012               	return	
  5253  00F148                     l3902:
  5254                           
  5255                           ;main.c: 217: puntero_funcion = &confirmar_actualizar_password;
  5256  00F148  0E2A               	movlw	low _confirmar_actualizar_password
  5257  00F14A  6E49               	movwf	_puntero_funcion,c
  5258  00F14C  0EE2               	movlw	high _confirmar_actualizar_password
  5259  00F14E  6E4A               	movwf	_puntero_funcion+1,c
  5260                           
  5261                           ;main.c: 219: sprintf(buffer2,"%01u",key);
  5262  00F150  0EA7               	movlw	low _buffer2
  5263  00F152  6E0D               	movwf	sprintf@sp,c
  5264  00F154  0E00               	movlw	high _buffer2
  5265  00F156  6E0E               	movwf	sprintf@sp+1,c
  5266  00F158  0ED3               	movlw	low STR_7
  5267  00F15A  6E0F               	movwf	sprintf@f,c
  5268  00F15C  0EFF               	movlw	high STR_7
  5269  00F15E  6E10               	movwf	sprintf@f+1,c
  5270  00F160  C04F  F011         	movff	_key,?_sprintf+4
  5271  00F164  6A12               	clrf	?_sprintf+5,c
  5272  00F166  EC2F  F07E         	call	_sprintf	;wreg free
  5273                           
  5274                           ;main.c: 220: actualizar_password(&confirmar,buffer2[0]);
  5275  00F16A  0E24               	movlw	low cambiar_password@confirmar
  5276  00F16C  6E01               	movwf	actualizar_password@confirmar,c
  5277  00F16E  0E00               	movlw	high cambiar_password@confirmar
  5278  00F170  6E02               	movwf	actualizar_password@confirmar+1,c
  5279  00F172  C0A7  F003         	movff	_buffer2,actualizar_password@valor
  5280  00F176  EC91  F07B         	call	_actualizar_password	;wreg free
  5281                           
  5282                           ;main.c: 222: mostrar_titulo_menu("Confirme pass:        ");
  5283  00F17A  0E06               	movlw	low STR_22
  5284  00F17C  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5285  00F17E  0EFF               	movlw	high STR_22
  5286  00F180  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5287  00F182  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  5288                           
  5289                           ;main.c: 223: clear_display(tamanio_new_password - 6);
  5290  00F186  0EFA               	movlw	250
  5291  00F188  244B               	addwf	_tamanio_new_password,w,c
  5292  00F18A  6E0B               	movwf	clear_display@pos,c
  5293  00F18C  0EFF               	movlw	255
  5294  00F18E  204C               	addwfc	_tamanio_new_password+1,w,c
  5295  00F190  6E0C               	movwf	clear_display@pos+1,c
  5296  00F192  ECE1  F070         	call	_clear_display	;wreg free
  5297  00F196  0012               	return	
  5298  00F198  0012               	return		;funcret
  5299  00F19A                     __end_of_cambiar_password:
  5300                           	opt stack 0
  5301                           tosu	equ	0xFFF
  5302                           tosh	equ	0xFFE
  5303                           tosl	equ	0xFFD
  5304                           pclath	equ	0xFFA
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postinc1	equ	0xFE6
  5312                           postdec1	equ	0xFE5
  5313                           fsr1h	equ	0xFE2
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _verficar_password *****************
  5323 ;; Defined at:
  5324 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;  verifica        2    0[COMRAM] PTR int 
  5327 ;;		 -> cambiar_password@verifica(2), 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  i               2    4[COMRAM] int 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;		None               void
  5332 ;; Registers used:
  5333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5343 ;;Total ram usage:        6 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_cambiar_password
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text30
  5353  00E8E2                     __ptext30:
  5354                           	opt stack 0
  5355  00E8E2                     _verficar_password:
  5356                           	opt stack 29
  5357                           
  5358                           ;alarma.c: 55: *verifica=1;
  5359                           
  5360                           ;incstack = 0
  5361  00E8E2  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5362  00E8E6  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5363  00E8EA  0E01               	movlw	1
  5364  00E8EC  6EDE               	movwf	postinc2,c
  5365  00E8EE  0E00               	movlw	0
  5366  00E8F0  6EDD               	movwf	postdec2,c
  5367                           
  5368                           ;alarma.c: 56: int i = 0;
  5369  00E8F2  0E00               	movlw	0
  5370  00E8F4  6E06               	movwf	verficar_password@i+1,c
  5371  00E8F6  0E00               	movlw	0
  5372  00E8F8  6E05               	movwf	verficar_password@i,c
  5373                           
  5374                           ;alarma.c: 57: while (i < 6 && *verifica == 1){
  5375  00E8FA  D01C               	goto	l3626
  5376  00E8FC                     l3620:
  5377                           
  5378                           ;alarma.c: 58: if (password[i] != *(temporal+i))
  5379  00E8FC  0E86               	movlw	low _temporal
  5380  00E8FE  2405               	addwf	verficar_password@i,w,c
  5381  00E900  6ED9               	movwf	fsr2l,c
  5382  00E902  0E00               	movlw	high _temporal
  5383  00E904  2006               	addwfc	verficar_password@i+1,w,c
  5384  00E906  6EDA               	movwf	fsr2h,c
  5385  00E908  0ECE               	movlw	low _password
  5386  00E90A  2405               	addwf	verficar_password@i,w,c
  5387  00E90C  6EE1               	movwf	fsr1l,c
  5388  00E90E  0E00               	movlw	high _password
  5389  00E910  2006               	addwfc	verficar_password@i+1,w,c
  5390  00E912  6EE2               	movwf	fsr1h,c
  5391  00E914  50DE               	movf	postinc2,w,c
  5392  00E916  18E6               	xorwf	postinc1,w,c
  5393  00E918  B4D8               	btfsc	status,2,c
  5394  00E91A  D009               	goto	l3624
  5395                           
  5396                           ;alarma.c: 59: *verifica = 0;
  5397  00E91C  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5398  00E920  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5399  00E924  0E00               	movlw	0
  5400  00E926  6EDE               	movwf	postinc2,c
  5401  00E928  0E00               	movlw	0
  5402  00E92A  6EDD               	movwf	postdec2,c
  5403  00E92C  D000               	goto	l3624
  5404  00E92E                     l3624:
  5405                           
  5406                           ;alarma.c: 61: i++;
  5407  00E92E  4A05               	infsnz	verficar_password@i,f,c
  5408  00E930  2A06               	incf	verficar_password@i+1,f,c
  5409  00E932  D000               	goto	l3626
  5410  00E934                     l3626:
  5411  00E934  BE06               	btfsc	verficar_password@i+1,7,c
  5412  00E936  D006               	goto	l3628
  5413  00E938  5006               	movf	verficar_password@i+1,w,c
  5414  00E93A  E10E               	bnz	l815
  5415  00E93C  0E06               	movlw	6
  5416  00E93E  5C05               	subwf	verficar_password@i,w,c
  5417  00E940  B0D8               	btfsc	status,0,c
  5418  00E942  0012               	return	
  5419  00E944                     l3628:
  5420  00E944  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5421  00E948  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5422  00E94C  04DE               	decf	postinc2,w,c
  5423  00E94E  10DE               	iorwf	postinc2,w,c
  5424  00E950  A4D8               	btfss	status,2,c
  5425  00E952  0012               	return	
  5426  00E954  D7D3               	goto	l3620
  5427  00E956  0012               	return	
  5428  00E958                     l815:
  5429  00E958  0012               	return		;funcret
  5430  00E95A                     __end_of_verficar_password:
  5431                           	opt stack 0
  5432                           tosu	equ	0xFFF
  5433                           tosh	equ	0xFFE
  5434                           tosl	equ	0xFFD
  5435                           pclath	equ	0xFFA
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postinc1	equ	0xFE6
  5443                           postdec1	equ	0xFE5
  5444                           fsr1h	equ	0xFE2
  5445                           fsr1l	equ	0xFE1
  5446                           indf2	equ	0xFDF
  5447                           postinc2	equ	0xFDE
  5448                           postdec2	equ	0xFDD
  5449                           fsr2h	equ	0xFDA
  5450                           fsr2l	equ	0xFD9
  5451                           status	equ	0xFD8
  5452                           
  5453 ;; *************** function _sprintf *****************
  5454 ;; Defined at:
  5455 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  sp              2   12[COMRAM] PTR unsigned char 
  5458 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  5459 ;;  f               2   14[COMRAM] PTR const unsigned char 
  5460 ;;		 -> STR_38(5), STR_37(5), STR_29(5), STR_28(5), 
  5461 ;;		 -> STR_21(5), STR_10(5), STR_9(5), STR_8(5), 
  5462 ;;		 -> STR_7(5), STR_2(15), STR_1(15), 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  tmpval          4    0        struct .
  5465 ;;  cp              3    0        PTR const unsigned char 
  5466 ;;  width           2   32[COMRAM] int 
  5467 ;;  val             2   29[COMRAM] unsigned int 
  5468 ;;  ap              2   26[COMRAM] PTR void [1]
  5469 ;;		 -> ?_sprintf(2), 
  5470 ;;  len             2    0        unsigned int 
  5471 ;;  c               1   34[COMRAM] char 
  5472 ;;  prec            1   31[COMRAM] char 
  5473 ;;  flag            1   28[COMRAM] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  2   12[COMRAM] int 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5483 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5484 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5485 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5486 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5487 ;;Total ram usage:       23 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    1
  5490 ;; This function calls:
  5491 ;;		___lwdiv
  5492 ;;		___lwmod
  5493 ;;		___wmul
  5494 ;;		_isdigit
  5495 ;; This function is called by:
  5496 ;;		_caratula
  5497 ;;		_mostrar_guardar_password
  5498 ;;		_mostrar_guardar_temporal_password
  5499 ;;		_mostrar_guardar_nuevo_password
  5500 ;;		_confirmar_actualizar_password
  5501 ;;		_cambiar_password
  5502 ;;		_guardar_comando
  5503 ;;		_imprimir_tecla
  5504 ;;		_guardar_elemento_fecha
  5505 ;;		_guardar_elemento_hora
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text31
  5510  00FC5E                     __ptext31:
  5511                           	opt stack 0
  5512  00FC5E                     _sprintf:
  5513                           	opt stack 27
  5514                           
  5515                           ;doprnt.c: 494: va_list ap;
  5516                           ;doprnt.c: 499: signed char c;
  5517                           ;doprnt.c: 501: int width;
  5518                           ;doprnt.c: 506: signed char prec;
  5519                           ;doprnt.c: 508: unsigned char flag;
  5520                           ;doprnt.c: 523: union {
  5521                           ;doprnt.c: 524: unsigned long vd;
  5522                           ;doprnt.c: 525: double integ;
  5523                           ;doprnt.c: 526: } tmpval;
  5524                           ;doprnt.c: 528: unsigned int val;
  5525                           ;doprnt.c: 529: unsigned len;
  5526                           ;doprnt.c: 530: const char * cp;
  5527                           ;doprnt.c: 533: *ap = __va_start();
  5528                           
  5529                           ;incstack = 0
  5530  00FC5E  0E11               	movlw	low (?_sprintf+4)
  5531  00FC60  6E1B               	movwf	sprintf@ap,c
  5532  00FC62  0E00               	movlw	high (?_sprintf+4)
  5533  00FC64  6E1C               	movwf	sprintf@ap+1,c
  5534                           
  5535                           ;doprnt.c: 536: while(c = *f++) {
  5536  00FC66  D117               	goto	l3054
  5537  00FC68                     l2972:
  5538                           
  5539                           ;doprnt.c: 538: if(c != '%')
  5540  00FC68  0E25               	movlw	37
  5541  00FC6A  1823               	xorwf	sprintf@c,w,c
  5542  00FC6C  B4D8               	btfsc	status,2,c
  5543  00FC6E  D009               	goto	l2978
  5544                           
  5545                           ;doprnt.c: 540: {
  5546                           ;doprnt.c: 541: ((*sp++ = (c)));
  5547  00FC70  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5548  00FC74  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5549  00FC78  C023  FFDF         	movff	sprintf@c,indf2
  5550  00FC7C  4A0D               	infsnz	sprintf@sp,f,c
  5551  00FC7E  2A0E               	incf	sprintf@sp+1,f,c
  5552                           
  5553                           ;doprnt.c: 542: continue;
  5554  00FC80  D10A               	goto	l3054
  5555  00FC82                     l2978:
  5556                           
  5557                           ;doprnt.c: 543: }
  5558                           ;doprnt.c: 546: width = 0;
  5559  00FC82  0E00               	movlw	0
  5560  00FC84  6E22               	movwf	sprintf@width+1,c
  5561  00FC86  0E00               	movlw	0
  5562  00FC88  6E21               	movwf	sprintf@width,c
  5563                           
  5564                           ;doprnt.c: 548: flag = 0;
  5565  00FC8A  0E00               	movlw	0
  5566  00FC8C  6E1D               	movwf	sprintf@flag,c
  5567                           
  5568                           ;doprnt.c: 551: switch(*f) {
  5569                           
  5570                           ;doprnt.c: 550: for(;;) {
  5571  00FC8E  D005               	goto	l2984
  5572  00FC90                     l2980:
  5573                           
  5574                           ;doprnt.c: 580: flag |= 0x04;
  5575  00FC90  841D               	bsf	sprintf@flag,2,c
  5576                           
  5577                           ;doprnt.c: 581: f++;
  5578  00FC92  4A0F               	infsnz	sprintf@f,f,c
  5579  00FC94  2A10               	incf	sprintf@f+1,f,c
  5580                           
  5581                           ;doprnt.c: 582: continue;
  5582  00FC96  D001               	goto	l2984
  5583                           
  5584                           ;doprnt.c: 584: }
  5585  00FC98  D00B               	goto	l2986
  5586  00FC9A                     l2984:
  5587  00FC9A  C00F  FFF6         	movff	sprintf@f,tblptrl
  5588  00FC9E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5589  00FCA2                     	if	0	;tblptru may be non-zero
  5590  00FCA2                     	endif
  5591  00FCA2                     	if	0	;tblptru may be non-zero
  5592  00FCA2                     	endif
  5593  00FCA2  0008               	tblrd		*
  5594  00FCA4  50F5               	movf	tablat,w,c
  5595                           
  5596                           ; Switch size 1, requested type "space"
  5597                           ; Number of cases is 1, Range of values is 48 to 48
  5598                           ; switch strategies available:
  5599                           ; Name         Instructions Cycles
  5600                           ; simple_byte            4     3 (average)
  5601                           ;	Chosen strategy is simple_byte
  5602  00FCA6  0A30               	xorlw	48	; case 48
  5603  00FCA8  B4D8               	btfsc	status,2,c
  5604  00FCAA  D7F2               	goto	l2980
  5605                           
  5606                           ;doprnt.c: 585: break;
  5607  00FCAC  D001               	goto	l2986
  5608                           
  5609                           ;doprnt.c: 586: }
  5610  00FCAE  D7F5               	goto	l2984
  5611  00FCB0                     l2986:
  5612                           
  5613                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5614  00FCB0  C00F  FFF6         	movff	sprintf@f,tblptrl
  5615  00FCB4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5616  00FCB8                     	if	0	;tblptru may be non-zero
  5617  00FCB8                     	endif
  5618  00FCB8                     	if	0	;tblptru may be non-zero
  5619  00FCB8                     	endif
  5620  00FCB8  0008               	tblrd		*
  5621  00FCBA  50F5               	movf	tablat,w,c
  5622  00FCBC  ECF2  F070         	call	_isdigit
  5623  00FCC0  A0D8               	btfss	status,0,c
  5624  00FCC2  D03A               	goto	l3002
  5625                           
  5626                           ;doprnt.c: 598: width = 0;
  5627  00FCC4  0E00               	movlw	0
  5628  00FCC6  6E22               	movwf	sprintf@width+1,c
  5629  00FCC8  0E00               	movlw	0
  5630  00FCCA  6E21               	movwf	sprintf@width,c
  5631  00FCCC  D000               	goto	l2990
  5632  00FCCE                     l2990:
  5633                           
  5634                           ;doprnt.c: 600: width *= 10;
  5635  00FCCE  C021  F001         	movff	sprintf@width,___wmul@multiplier
  5636  00FCD2  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  5637  00FCD6  0E00               	movlw	0
  5638  00FCD8  6E04               	movwf	___wmul@multiplicand+1,c
  5639  00FCDA  0E0A               	movlw	10
  5640  00FCDC  6E03               	movwf	___wmul@multiplicand,c
  5641  00FCDE  EC27  F071         	call	___wmul	;wreg free
  5642  00FCE2  C001  F021         	movff	?___wmul,sprintf@width
  5643  00FCE6  C002  F022         	movff	?___wmul+1,sprintf@width+1
  5644                           
  5645                           ;doprnt.c: 601: width += *f++ - '0';
  5646  00FCEA  0ED0               	movlw	208
  5647  00FCEC  6E17               	movwf	??_sprintf& (0+255),c
  5648  00FCEE  0EFF               	movlw	255
  5649  00FCF0  6E18               	movwf	(??_sprintf+1)& (0+255),c
  5650  00FCF2  C00F  FFF6         	movff	sprintf@f,tblptrl
  5651  00FCF6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5652  00FCFA                     	if	0	;tblptru may be non-zero
  5653  00FCFA                     	endif
  5654  00FCFA                     	if	0	;tblptru may be non-zero
  5655  00FCFA                     	endif
  5656  00FCFA  0008               	tblrd		*
  5657  00FCFC  50F5               	movf	tablat,w,c
  5658  00FCFE  6E19               	movwf	(??_sprintf+2)& (0+255),c
  5659  00FD00  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  5660  00FD02  5017               	movf	??_sprintf,w,c
  5661  00FD04  2619               	addwf	??_sprintf+2,f,c
  5662  00FD06  5018               	movf	??_sprintf+1,w,c
  5663  00FD08  221A               	addwfc	??_sprintf+3,f,c
  5664  00FD0A  5019               	movf	??_sprintf+2,w,c
  5665  00FD0C  2621               	addwf	sprintf@width,f,c
  5666  00FD0E  501A               	movf	??_sprintf+3,w,c
  5667  00FD10  2222               	addwfc	sprintf@width+1,f,c
  5668  00FD12  4A0F               	infsnz	sprintf@f,f,c
  5669  00FD14  2A10               	incf	sprintf@f+1,f,c
  5670                           
  5671                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5672  00FD16  C00F  FFF6         	movff	sprintf@f,tblptrl
  5673  00FD1A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5674  00FD1E                     	if	0	;tblptru may be non-zero
  5675  00FD1E                     	endif
  5676  00FD1E                     	if	0	;tblptru may be non-zero
  5677  00FD1E                     	endif
  5678  00FD1E  0008               	tblrd		*
  5679  00FD20  50F5               	movf	tablat,w,c
  5680  00FD22  ECF2  F070         	call	_isdigit
  5681  00FD26  A0D8               	btfss	status,0,c
  5682  00FD28  D007               	goto	l3002
  5683  00FD2A  D7D1               	goto	l2990
  5684                           
  5685                           ;doprnt.c: 608: }
  5686                           ;doprnt.c: 635: switch(c = *f++) {
  5687  00FD2C  D005               	goto	l3002
  5688                           
  5689                           ;doprnt.c: 638: goto alldone;
  5690                           
  5691                           ;doprnt.c: 637: case 0:
  5692  00FD2E  D0C1               	goto	l3056
  5693                           
  5694                           ;doprnt.c: 813: continue;
  5695                           
  5696                           ;doprnt.c: 802: default:
  5697  00FD30  D0B2               	goto	l3054
  5698  00FD32                     l2998:
  5699                           
  5700                           ;doprnt.c: 818: flag |= 0xC0;
  5701  00FD32  0EC0               	movlw	192
  5702  00FD34  121D               	iorwf	sprintf@flag,f,c
  5703                           
  5704                           ;doprnt.c: 822: }
  5705                           
  5706                           ;doprnt.c: 819: break;
  5707  00FD36  D011               	goto	l3004
  5708  00FD38                     l3002:
  5709  00FD38  C00F  FFF6         	movff	sprintf@f,tblptrl
  5710  00FD3C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5711  00FD40  4A0F               	infsnz	sprintf@f,f,c
  5712  00FD42  2A10               	incf	sprintf@f+1,f,c
  5713  00FD44                     	if	0	;tblptru may be non-zero
  5714  00FD44                     	endif
  5715  00FD44                     	if	0	;tblptru may be non-zero
  5716  00FD44                     	endif
  5717  00FD44  0008               	tblrd		*
  5718  00FD46  CFF5 F023          	movff	tablat,sprintf@c
  5719  00FD4A  5023               	movf	sprintf@c,w,c
  5720                           
  5721                           ; Switch size 1, requested type "space"
  5722                           ; Number of cases is 2, Range of values is 0 to 117
  5723                           ; switch strategies available:
  5724                           ; Name         Instructions Cycles
  5725                           ; simple_byte            7     4 (average)
  5726                           ;	Chosen strategy is simple_byte
  5727  00FD4C  0A00               	xorlw	0	; case 0
  5728  00FD4E  B4D8               	btfsc	status,2,c
  5729  00FD50  D0B0               	goto	l3056
  5730  00FD52  0A75               	xorlw	117	; case 117
  5731  00FD54  B4D8               	btfsc	status,2,c
  5732  00FD56  D7ED               	goto	l2998
  5733  00FD58  D09E               	goto	l3054
  5734  00FD5A                     l3004:
  5735                           
  5736                           ;doprnt.c: 1273: {
  5737                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5738  00FD5A  C01B  FFD9         	movff	sprintf@ap,fsr2l
  5739  00FD5E  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  5740  00FD62  CFDE F01E          	movff	postinc2,sprintf@val
  5741  00FD66  CFDD F01F          	movff	postdec2,sprintf@val+1
  5742  00FD6A  0E02               	movlw	2
  5743  00FD6C  261B               	addwf	sprintf@ap,f,c
  5744  00FD6E  0E00               	movlw	0
  5745  00FD70  221C               	addwfc	sprintf@ap+1,f,c
  5746                           
  5747                           ;doprnt.c: 1287: }
  5748                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5749  00FD72  0E01               	movlw	1
  5750  00FD74  6E23               	movwf	sprintf@c,c
  5751  00FD76                     l3010:
  5752  00FD76  0E05               	movlw	5
  5753  00FD78  1823               	xorwf	sprintf@c,w,c
  5754  00FD7A  B4D8               	btfsc	status,2,c
  5755  00FD7C  D016               	goto	l3022
  5756  00FD7E  D001               	goto	l3014
  5757  00FD80  D014               	goto	l3022
  5758  00FD82                     l3014:
  5759                           
  5760                           ;doprnt.c: 1306: if(val < dpowers[c])
  5761  00FD82  5023               	movf	sprintf@c,w,c
  5762  00FD84  0D02               	mullw	2
  5763  00FD86  0EC3               	movlw	low _dpowers
  5764  00FD88  24F3               	addwf	prodl,w,c
  5765  00FD8A  6EF6               	movwf	tblptrl,c
  5766  00FD8C  0EFE               	movlw	high _dpowers
  5767  00FD8E  20F4               	addwfc	prodh,w,c
  5768  00FD90  6EF7               	movwf	tblptrh,c
  5769  00FD92                     	if	0	;There are less than 3 active tblptr bytes
  5770  00FD92                     	endif
  5771  00FD92  0009               	tblrd		*+
  5772  00FD94  50F5               	movf	tablat,w,c
  5773  00FD96  5C1E               	subwf	sprintf@val,w,c
  5774  00FD98  0009               	tblrd		*+
  5775  00FD9A  50F5               	movf	tablat,w,c
  5776  00FD9C  581F               	subwfb	sprintf@val+1,w,c
  5777  00FD9E  A0D8               	btfss	status,0,c
  5778  00FDA0  D004               	goto	l3022
  5779  00FDA2  D001               	goto	l3018
  5780                           
  5781                           ;doprnt.c: 1307: break;
  5782  00FDA4  D002               	goto	l3022
  5783  00FDA6                     l3018:
  5784  00FDA6  2A23               	incf	sprintf@c,f,c
  5785  00FDA8  D7E6               	goto	l3010
  5786  00FDAA                     l3022:
  5787                           
  5788                           ;doprnt.c: 1381: if(width > c)
  5789  00FDAA  0E80               	movlw	128
  5790  00FDAC  BE23               	btfsc	sprintf@c,7,c
  5791  00FDAE  0E7F               	movlw	127
  5792  00FDB0  6E17               	movwf	??_sprintf& (0+255),c
  5793  00FDB2  5021               	movf	sprintf@width,w,c
  5794  00FDB4  5C23               	subwf	sprintf@c,w,c
  5795  00FDB6  5022               	movf	sprintf@width+1,w,c
  5796  00FDB8  0A80               	xorlw	128
  5797  00FDBA  5817               	subwfb	??_sprintf& (0+255),w,c
  5798  00FDBC  B0D8               	btfsc	status,0,c
  5799  00FDBE  D007               	goto	l3026
  5800                           
  5801                           ;doprnt.c: 1382: width -= c;
  5802  00FDC0  5023               	movf	sprintf@c,w,c
  5803  00FDC2  5E21               	subwf	sprintf@width,f,c
  5804  00FDC4  0E00               	movlw	0
  5805  00FDC6  BE23               	btfsc	sprintf@c,7,c
  5806  00FDC8  0EFF               	movlw	255
  5807  00FDCA  5A22               	subwfb	sprintf@width+1,f,c
  5808  00FDCC  D005               	goto	l3028
  5809  00FDCE                     l3026:
  5810                           
  5811                           ;doprnt.c: 1383: else
  5812                           ;doprnt.c: 1384: width = 0;
  5813  00FDCE  0E00               	movlw	0
  5814  00FDD0  6E22               	movwf	sprintf@width+1,c
  5815  00FDD2  0E00               	movlw	0
  5816  00FDD4  6E21               	movwf	sprintf@width,c
  5817  00FDD6  D000               	goto	l3028
  5818  00FDD8                     l3028:
  5819                           
  5820                           ;doprnt.c: 1387: if(flag & 0x04) {
  5821  00FDD8  A41D               	btfss	sprintf@flag,2,c
  5822  00FDDA  D015               	goto	l3038
  5823                           
  5824                           ;doprnt.c: 1415: if(width)
  5825  00FDDC  5021               	movf	sprintf@width,w,c
  5826  00FDDE  1022               	iorwf	sprintf@width+1,w,c
  5827  00FDE0  B4D8               	btfsc	status,2,c
  5828  00FDE2  D026               	goto	l862
  5829  00FDE4                     l3032:
  5830                           
  5831                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5832  00FDE4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5833  00FDE8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5834  00FDEC  0E30               	movlw	48
  5835  00FDEE  6EDF               	movwf	indf2,c
  5836  00FDF0  4A0D               	infsnz	sprintf@sp,f,c
  5837  00FDF2  2A0E               	incf	sprintf@sp+1,f,c
  5838                           
  5839                           ;doprnt.c: 1418: while(--width);
  5840  00FDF4  0621               	decf	sprintf@width,f,c
  5841  00FDF6  A0D8               	btfss	status,0,c
  5842  00FDF8  0622               	decf	sprintf@width+1,f,c
  5843  00FDFA  5021               	movf	sprintf@width,w,c
  5844  00FDFC  1022               	iorwf	sprintf@width+1,w,c
  5845  00FDFE  B4D8               	btfsc	status,2,c
  5846  00FE00  D017               	goto	l862
  5847  00FE02  D7F0               	goto	l3032
  5848                           
  5849                           ;doprnt.c: 1420: } else
  5850  00FE04  D015               	goto	l862
  5851  00FE06                     l3038:
  5852                           
  5853                           ;doprnt.c: 1422: {
  5854                           ;doprnt.c: 1424: if(width
  5855                           ;doprnt.c: 1428: )
  5856  00FE06  5021               	movf	sprintf@width,w,c
  5857  00FE08  1022               	iorwf	sprintf@width+1,w,c
  5858  00FE0A  B4D8               	btfsc	status,2,c
  5859  00FE0C  D011               	goto	l862
  5860  00FE0E                     l3040:
  5861                           
  5862                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5863  00FE0E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5864  00FE12  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5865  00FE16  0E20               	movlw	32
  5866  00FE18  6EDF               	movwf	indf2,c
  5867  00FE1A  4A0D               	infsnz	sprintf@sp,f,c
  5868  00FE1C  2A0E               	incf	sprintf@sp+1,f,c
  5869                           
  5870                           ;doprnt.c: 1431: while(--width);
  5871  00FE1E  0621               	decf	sprintf@width,f,c
  5872  00FE20  A0D8               	btfss	status,0,c
  5873  00FE22  0622               	decf	sprintf@width+1,f,c
  5874  00FE24  5021               	movf	sprintf@width,w,c
  5875  00FE26  1022               	iorwf	sprintf@width+1,w,c
  5876  00FE28  B4D8               	btfsc	status,2,c
  5877  00FE2A  D002               	goto	l862
  5878  00FE2C  D7F0               	goto	l3040
  5879  00FE2E  D000               	goto	l862
  5880  00FE30                     l862:
  5881                           
  5882                           ;doprnt.c: 1469: }
  5883                           ;doprnt.c: 1472: prec = c;
  5884  00FE30  C023  F020         	movff	sprintf@c,sprintf@prec
  5885                           
  5886                           ;doprnt.c: 1474: while(prec--) {
  5887  00FE34  D02A               	goto	l3052
  5888  00FE36                     l3046:
  5889                           
  5890                           ;doprnt.c: 1478: {
  5891                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5892  00FE36  5020               	movf	sprintf@prec,w,c
  5893  00FE38  0D02               	mullw	2
  5894  00FE3A  0EC3               	movlw	low _dpowers
  5895  00FE3C  24F3               	addwf	prodl,w,c
  5896  00FE3E  6EF6               	movwf	tblptrl,c
  5897  00FE40  0EFE               	movlw	high _dpowers
  5898  00FE42  20F4               	addwfc	prodh,w,c
  5899  00FE44  6EF7               	movwf	tblptrh,c
  5900  00FE46                     	if	0	;There are less than 3 active tblptr bytes
  5901  00FE46                     	endif
  5902  00FE46  0009               	tblrd		*+
  5903  00FE48  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5904  00FE4C  000A               	tblrd		*-
  5905  00FE4E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5906  00FE52  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  5907  00FE56  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  5908  00FE5A  ECF4  F072         	call	___lwdiv	;wreg free
  5909  00FE5E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5910  00FE62  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5911  00FE66  0E00               	movlw	0
  5912  00FE68  6E0B               	movwf	___lwmod@divisor+1,c
  5913  00FE6A  0E0A               	movlw	10
  5914  00FE6C  6E0A               	movwf	___lwmod@divisor,c
  5915  00FE6E  ECA4  F072         	call	___lwmod	;wreg free
  5916  00FE72  5008               	movf	?___lwmod,w,c
  5917  00FE74  0F30               	addlw	48
  5918  00FE76  6E23               	movwf	sprintf@c,c
  5919                           
  5920                           ;doprnt.c: 1523: }
  5921                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5922  00FE78  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5923  00FE7C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5924  00FE80  C023  FFDF         	movff	sprintf@c,indf2
  5925  00FE84  4A0D               	infsnz	sprintf@sp,f,c
  5926  00FE86  2A0E               	incf	sprintf@sp+1,f,c
  5927  00FE88  D000               	goto	l3052
  5928  00FE8A                     l3052:
  5929  00FE8A  0620               	decf	sprintf@prec,f,c
  5930  00FE8C  2820               	incf	sprintf@prec,w,c
  5931  00FE8E  B4D8               	btfsc	status,2,c
  5932  00FE90  D002               	goto	l3054
  5933  00FE92  D7D1               	goto	l3046
  5934  00FE94  D000               	goto	l3054
  5935  00FE96                     l3054:
  5936  00FE96  C00F  FFF6         	movff	sprintf@f,tblptrl
  5937  00FE9A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5938  00FE9E  4A0F               	infsnz	sprintf@f,f,c
  5939  00FEA0  2A10               	incf	sprintf@f+1,f,c
  5940  00FEA2                     	if	0	;tblptru may be non-zero
  5941  00FEA2                     	endif
  5942  00FEA2                     	if	0	;tblptru may be non-zero
  5943  00FEA2                     	endif
  5944  00FEA2  0008               	tblrd		*
  5945  00FEA4  CFF5 F023          	movff	tablat,sprintf@c
  5946  00FEA8  5023               	movf	sprintf@c,w,c
  5947  00FEAA  B4D8               	btfsc	status,2,c
  5948  00FEAC  D002               	goto	l3056
  5949  00FEAE  D6DC               	goto	l2972
  5950  00FEB0  D000               	goto	l3056
  5951  00FEB2                     l3056:
  5952                           
  5953                           ;doprnt.c: 1538: *sp = 0;
  5954  00FEB2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5955  00FEB6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5956  00FEBA  0E00               	movlw	0
  5957  00FEBC  6EDF               	movwf	indf2,c
  5958  00FEBE  0012               	return	
  5959                           
  5960                           ;doprnt.c: 1540: return 0;
  5961                           ;	Return value of _sprintf is never used
  5962  00FEC0  0012               	return		;funcret
  5963  00FEC2                     __end_of_sprintf:
  5964                           	opt stack 0
  5965                           tosu	equ	0xFFF
  5966                           tosh	equ	0xFFE
  5967                           tosl	equ	0xFFD
  5968                           pclath	equ	0xFFA
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           postinc1	equ	0xFE6
  5978                           postdec1	equ	0xFE5
  5979                           fsr1h	equ	0xFE2
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _isdigit *****************
  5989 ;; Defined at:
  5990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  c               1    wreg     unsigned char 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  c               1    2[COMRAM] unsigned char 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;		None               void
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6007 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6008 ;;Total ram usage:        3 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_sprintf
  6014 ;;		_atoi
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text32
  6019  00E1E4                     __ptext32:
  6020                           	opt stack 0
  6021  00E1E4                     _isdigit:
  6022                           	opt stack 27
  6023                           
  6024                           ;incstack = 0
  6025                           ;isdigit@c stored from wreg
  6026  00E1E4  6E03               	movwf	isdigit@c,c
  6027  00E1E6  0E00               	movlw	0
  6028  00E1E8  6E02               	movwf	_isdigit$2628,c
  6029  00E1EA  0E3A               	movlw	58
  6030  00E1EC  6003               	cpfslt	isdigit@c,c
  6031  00E1EE  D006               	goto	l2914
  6032  00E1F0  0E2F               	movlw	47
  6033  00E1F2  6403               	cpfsgt	isdigit@c,c
  6034  00E1F4  D003               	goto	l2914
  6035  00E1F6  0E01               	movlw	1
  6036  00E1F8  6E02               	movwf	_isdigit$2628,c
  6037  00E1FA  D000               	goto	l2914
  6038  00E1FC                     l2914:
  6039  00E1FC  C002  F001         	movff	_isdigit$2628,??_isdigit
  6040  00E200  3001               	rrcf	??_isdigit,w,c
  6041  00E202  0012               	return	
  6042  00E204  0012               	return		;funcret
  6043  00E206                     __end_of_isdigit:
  6044                           	opt stack 0
  6045                           tosu	equ	0xFFF
  6046                           tosh	equ	0xFFE
  6047                           tosl	equ	0xFFD
  6048                           pclath	equ	0xFFA
  6049                           tblptru	equ	0xFF8
  6050                           tblptrh	equ	0xFF7
  6051                           tblptrl	equ	0xFF6
  6052                           tablat	equ	0xFF5
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           postinc1	equ	0xFE6
  6058                           postdec1	equ	0xFE5
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           fsr2h	equ	0xFDA
  6065                           fsr2l	equ	0xFD9
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function ___wmul *****************
  6069 ;; Defined at:
  6070 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  multiplier      2    0[COMRAM] unsigned int 
  6073 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  product         2    4[COMRAM] unsigned int 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  2    0[COMRAM] unsigned int 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0, prodl, prodh
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6085 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6088 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6089 ;;Total ram usage:        6 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_sprintf
  6095 ;;		_atoi
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text33
  6100  00E24E                     __ptext33:
  6101                           	opt stack 0
  6102  00E24E                     ___wmul:
  6103                           	opt stack 27
  6104                           
  6105                           ;incstack = 0
  6106  00E24E  5001               	movf	___wmul@multiplier,w,c
  6107  00E250  0203               	mulwf	___wmul@multiplicand,c
  6108  00E252  CFF3 F005          	movff	prodl,___wmul@product
  6109  00E256  CFF4 F006          	movff	prodh,___wmul@product+1
  6110  00E25A  5001               	movf	___wmul@multiplier,w,c
  6111  00E25C  0204               	mulwf	___wmul@multiplicand+1,c
  6112  00E25E  50F3               	movf	prodl,w,c
  6113  00E260  2606               	addwf	___wmul@product+1,f,c
  6114  00E262  5002               	movf	___wmul@multiplier+1,w,c
  6115  00E264  0203               	mulwf	___wmul@multiplicand,c
  6116  00E266  50F3               	movf	prodl,w,c
  6117  00E268  2606               	addwf	___wmul@product+1,f,c
  6118  00E26A  C005  F001         	movff	___wmul@product,?___wmul
  6119  00E26E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6120  00E272  0012               	return	
  6121  00E274  0012               	return		;funcret
  6122  00E276                     __end_of___wmul:
  6123                           	opt stack 0
  6124                           tosu	equ	0xFFF
  6125                           tosh	equ	0xFFE
  6126                           tosl	equ	0xFFD
  6127                           pclath	equ	0xFFA
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           postinc0	equ	0xFEE
  6135                           wreg	equ	0xFE8
  6136                           postinc1	equ	0xFE6
  6137                           postdec1	equ	0xFE5
  6138                           fsr1h	equ	0xFE2
  6139                           fsr1l	equ	0xFE1
  6140                           indf2	equ	0xFDF
  6141                           postinc2	equ	0xFDE
  6142                           postdec2	equ	0xFDD
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function ___lwmod *****************
  6148 ;; Defined at:
  6149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  dividend        2    7[COMRAM] unsigned int 
  6152 ;;  divisor         2    9[COMRAM] unsigned int 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  counter         1   11[COMRAM] unsigned char 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  2    7[COMRAM] unsigned int 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6167 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6168 ;;Total ram usage:        5 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_sprintf
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text34
  6178  00E548                     __ptext34:
  6179                           	opt stack 0
  6180  00E548                     ___lwmod:
  6181                           	opt stack 27
  6182                           
  6183                           ;incstack = 0
  6184  00E548  500A               	movf	___lwmod@divisor,w,c
  6185  00E54A  100B               	iorwf	___lwmod@divisor+1,w,c
  6186  00E54C  B4D8               	btfsc	status,2,c
  6187  00E54E  D01D               	goto	l1531
  6188  00E550  0E01               	movlw	1
  6189  00E552  6E0C               	movwf	___lwmod@counter,c
  6190  00E554  D005               	goto	l2952
  6191  00E556                     l2950:
  6192  00E556  90D8               	bcf	status,0,c
  6193  00E558  360A               	rlcf	___lwmod@divisor,f,c
  6194  00E55A  360B               	rlcf	___lwmod@divisor+1,f,c
  6195  00E55C  2A0C               	incf	___lwmod@counter,f,c
  6196  00E55E  D000               	goto	l2952
  6197  00E560                     l2952:
  6198  00E560  BE0B               	btfsc	___lwmod@divisor+1,7,c
  6199  00E562  D002               	goto	l2954
  6200  00E564  D7F8               	goto	l2950
  6201  00E566  D000               	goto	l2954
  6202  00E568                     l2954:
  6203  00E568  500A               	movf	___lwmod@divisor,w,c
  6204  00E56A  5C08               	subwf	___lwmod@dividend,w,c
  6205  00E56C  500B               	movf	___lwmod@divisor+1,w,c
  6206  00E56E  5809               	subwfb	___lwmod@dividend+1,w,c
  6207  00E570  A0D8               	btfss	status,0,c
  6208  00E572  D005               	goto	l2958
  6209  00E574  500A               	movf	___lwmod@divisor,w,c
  6210  00E576  5E08               	subwf	___lwmod@dividend,f,c
  6211  00E578  500B               	movf	___lwmod@divisor+1,w,c
  6212  00E57A  5A09               	subwfb	___lwmod@dividend+1,f,c
  6213  00E57C  D000               	goto	l2958
  6214  00E57E                     l2958:
  6215  00E57E  90D8               	bcf	status,0,c
  6216  00E580  320B               	rrcf	___lwmod@divisor+1,f,c
  6217  00E582  320A               	rrcf	___lwmod@divisor,f,c
  6218  00E584  2E0C               	decfsz	___lwmod@counter,f,c
  6219  00E586  D7F0               	goto	l2954
  6220  00E588  D000               	goto	l1531
  6221  00E58A                     l1531:
  6222  00E58A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6223  00E58E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6224  00E592  0012               	return		;funcret
  6225  00E594                     __end_of___lwmod:
  6226                           	opt stack 0
  6227                           tosu	equ	0xFFF
  6228                           tosh	equ	0xFFE
  6229                           tosl	equ	0xFFD
  6230                           pclath	equ	0xFFA
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           postinc1	equ	0xFE6
  6240                           postdec1	equ	0xFE5
  6241                           fsr1h	equ	0xFE2
  6242                           fsr1l	equ	0xFE1
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function ___lwdiv *****************
  6251 ;; Defined at:
  6252 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  dividend        2    0[COMRAM] unsigned int 
  6255 ;;  divisor         2    2[COMRAM] unsigned int 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  quotient        2    4[COMRAM] unsigned int 
  6258 ;;  counter         1    6[COMRAM] unsigned char 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  2    0[COMRAM] unsigned int 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2, status,0
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6269 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6271 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6272 ;;Total ram usage:        7 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_sprintf
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text35
  6282  00E5E8                     __ptext35:
  6283                           	opt stack 0
  6284  00E5E8                     ___lwdiv:
  6285                           	opt stack 27
  6286                           
  6287                           ;incstack = 0
  6288  00E5E8  0E00               	movlw	0
  6289  00E5EA  6E06               	movwf	___lwdiv@quotient+1,c
  6290  00E5EC  0E00               	movlw	0
  6291  00E5EE  6E05               	movwf	___lwdiv@quotient,c
  6292  00E5F0  5003               	movf	___lwdiv@divisor,w,c
  6293  00E5F2  1004               	iorwf	___lwdiv@divisor+1,w,c
  6294  00E5F4  B4D8               	btfsc	status,2,c
  6295  00E5F6  D021               	goto	l1521
  6296  00E5F8  0E01               	movlw	1
  6297  00E5FA  6E07               	movwf	___lwdiv@counter,c
  6298  00E5FC  D005               	goto	l2932
  6299  00E5FE                     l2930:
  6300  00E5FE  90D8               	bcf	status,0,c
  6301  00E600  3603               	rlcf	___lwdiv@divisor,f,c
  6302  00E602  3604               	rlcf	___lwdiv@divisor+1,f,c
  6303  00E604  2A07               	incf	___lwdiv@counter,f,c
  6304  00E606  D000               	goto	l2932
  6305  00E608                     l2932:
  6306  00E608  BE04               	btfsc	___lwdiv@divisor+1,7,c
  6307  00E60A  D002               	goto	l2934
  6308  00E60C  D7F8               	goto	l2930
  6309  00E60E  D000               	goto	l2934
  6310  00E610                     l2934:
  6311  00E610  90D8               	bcf	status,0,c
  6312  00E612  3605               	rlcf	___lwdiv@quotient,f,c
  6313  00E614  3606               	rlcf	___lwdiv@quotient+1,f,c
  6314  00E616  5003               	movf	___lwdiv@divisor,w,c
  6315  00E618  5C01               	subwf	___lwdiv@dividend,w,c
  6316  00E61A  5004               	movf	___lwdiv@divisor+1,w,c
  6317  00E61C  5802               	subwfb	___lwdiv@dividend+1,w,c
  6318  00E61E  A0D8               	btfss	status,0,c
  6319  00E620  D006               	goto	l2942
  6320  00E622  5003               	movf	___lwdiv@divisor,w,c
  6321  00E624  5E01               	subwf	___lwdiv@dividend,f,c
  6322  00E626  5004               	movf	___lwdiv@divisor+1,w,c
  6323  00E628  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6324  00E62A  8005               	bsf	___lwdiv@quotient,0,c
  6325  00E62C  D000               	goto	l2942
  6326  00E62E                     l2942:
  6327  00E62E  90D8               	bcf	status,0,c
  6328  00E630  3204               	rrcf	___lwdiv@divisor+1,f,c
  6329  00E632  3203               	rrcf	___lwdiv@divisor,f,c
  6330  00E634  2E07               	decfsz	___lwdiv@counter,f,c
  6331  00E636  D7EC               	goto	l2934
  6332  00E638  D000               	goto	l1521
  6333  00E63A                     l1521:
  6334  00E63A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6335  00E63E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6336  00E642  0012               	return		;funcret
  6337  00E644                     __end_of___lwdiv:
  6338                           	opt stack 0
  6339                           tosu	equ	0xFFF
  6340                           tosh	equ	0xFFE
  6341                           tosl	equ	0xFFD
  6342                           pclath	equ	0xFFA
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           postinc1	equ	0xFE6
  6352                           postdec1	equ	0xFE5
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _actualizar_password *****************
  6363 ;; Defined at:
  6364 ;;		line 65 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  confirmar       2    0[COMRAM] PTR int 
  6367 ;;		 -> cambiar_password@confirmar(2), 
  6368 ;;  valor           1    2[COMRAM] unsigned char 
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;  j               2   10[COMRAM] int 
  6371 ;;  j               2    8[COMRAM] int 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;		None               void
  6374 ;; Registers used:
  6375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6383 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6384 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6385 ;;Total ram usage:       12 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    1
  6388 ;; This function calls:
  6389 ;;		_restaurar_comando
  6390 ;; This function is called by:
  6391 ;;		_cambiar_password
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text36
  6396  00F722                     __ptext36:
  6397                           	opt stack 0
  6398  00F722                     _actualizar_password:
  6399                           	opt stack 28
  6400                           
  6401                           ;alarma.c: 67: *confirmar=1;
  6402                           
  6403                           ;incstack = 0
  6404  00F722  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6405  00F726  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6406  00F72A  0E01               	movlw	1
  6407  00F72C  6EDE               	movwf	postinc2,c
  6408  00F72E  0E00               	movlw	0
  6409  00F730  6EDD               	movwf	postdec2,c
  6410                           
  6411                           ;alarma.c: 68: int j=0;
  6412  00F732  0E00               	movlw	0
  6413  00F734  6E0A               	movwf	actualizar_password@j+1,c
  6414  00F736  0E00               	movlw	0
  6415  00F738  6E09               	movwf	actualizar_password@j,c
  6416                           
  6417                           ;alarma.c: 70: if ( *confirmar == 1 && tamanio_new_password - 6 - 1 < 6){
  6418  00F73A  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6419  00F73E  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6420  00F742  04DE               	decf	postinc2,w,c
  6421  00F744  10DE               	iorwf	postinc2,w,c
  6422  00F746  A4D8               	btfss	status,2,c
  6423  00F748  D036               	goto	l3644
  6424  00F74A  0EF9               	movlw	249
  6425  00F74C  6E04               	movwf	??_actualizar_password& (0+255),c
  6426  00F74E  0EFF               	movlw	255
  6427  00F750  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6428  00F752  C04B  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6429  00F756  C04C  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6430  00F75A  5004               	movf	??_actualizar_password,w,c
  6431  00F75C  2606               	addwf	??_actualizar_password+2,f,c
  6432  00F75E  5005               	movf	??_actualizar_password+1,w,c
  6433  00F760  2207               	addwfc	??_actualizar_password+3,f,c
  6434  00F762  BE07               	btfsc	??_actualizar_password+3,7,c
  6435  00F764  D006               	goto	l3638
  6436  00F766  5007               	movf	??_actualizar_password+3,w,c
  6437  00F768  E126               	bnz	l3644
  6438  00F76A  0E06               	movlw	6
  6439  00F76C  5C06               	subwf	??_actualizar_password+2,w,c
  6440  00F76E  B0D8               	btfsc	status,0,c
  6441  00F770  D022               	goto	l3644
  6442  00F772                     l3638:
  6443                           
  6444                           ;alarma.c: 71: if (new_password[tamanio_new_password - 6 - 1] != valor)
  6445  00F772  0EF9               	movlw	249
  6446  00F774  6E04               	movwf	??_actualizar_password& (0+255),c
  6447  00F776  0EFF               	movlw	255
  6448  00F778  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6449  00F77A  C04B  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6450  00F77E  C04C  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6451  00F782  5004               	movf	??_actualizar_password,w,c
  6452  00F784  2606               	addwf	??_actualizar_password+2,f,c
  6453  00F786  5005               	movf	??_actualizar_password+1,w,c
  6454  00F788  2207               	addwfc	??_actualizar_password+3,f,c
  6455  00F78A  0E7F               	movlw	low _new_password
  6456  00F78C  2406               	addwf	??_actualizar_password+2,w,c
  6457  00F78E  6ED9               	movwf	fsr2l,c
  6458  00F790  0E00               	movlw	high _new_password
  6459  00F792  2007               	addwfc	??_actualizar_password+3,w,c
  6460  00F794  6EDA               	movwf	fsr2h,c
  6461  00F796  5003               	movf	actualizar_password@valor,w,c
  6462  00F798  18DE               	xorwf	postinc2,w,c
  6463  00F79A  B4D8               	btfsc	status,2,c
  6464  00F79C  D009               	goto	l3642
  6465                           
  6466                           ;alarma.c: 72: *confirmar = 0;
  6467  00F79E  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6468  00F7A2  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6469  00F7A6  0E00               	movlw	0
  6470  00F7A8  6EDE               	movwf	postinc2,c
  6471  00F7AA  0E00               	movlw	0
  6472  00F7AC  6EDD               	movwf	postdec2,c
  6473  00F7AE  D003               	goto	l3644
  6474  00F7B0                     l3642:
  6475                           
  6476                           ;alarma.c: 74: else
  6477                           ;alarma.c: 75: tamanio_new_password++;
  6478  00F7B0  4A4B               	infsnz	_tamanio_new_password,f,c
  6479  00F7B2  2A4C               	incf	_tamanio_new_password+1,f,c
  6480  00F7B4  D000               	goto	l3644
  6481  00F7B6                     l3644:
  6482                           
  6483                           ;alarma.c: 76: }
  6484                           ;alarma.c: 78: if (*confirmar && tamanio_new_password - 6 - 1 >= 6){
  6485  00F7B6  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6486  00F7BA  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6487  00F7BE  50DE               	movf	postinc2,w,c
  6488  00F7C0  10DE               	iorwf	postinc2,w,c
  6489  00F7C2  B4D8               	btfsc	status,2,c
  6490  00F7C4  0012               	return	
  6491  00F7C6  0EF9               	movlw	249
  6492  00F7C8  6E04               	movwf	??_actualizar_password& (0+255),c
  6493  00F7CA  0EFF               	movlw	255
  6494  00F7CC  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6495  00F7CE  C04B  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6496  00F7D2  C04C  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6497  00F7D6  5004               	movf	??_actualizar_password,w,c
  6498  00F7D8  2606               	addwf	??_actualizar_password+2,f,c
  6499  00F7DA  5005               	movf	??_actualizar_password+1,w,c
  6500  00F7DC  2207               	addwfc	??_actualizar_password+3,f,c
  6501  00F7DE  BE07               	btfsc	??_actualizar_password+3,7,c
  6502  00F7E0  0012               	return	
  6503  00F7E2  5007               	movf	??_actualizar_password+3,w,c
  6504  00F7E4  E104               	bnz	u2800
  6505  00F7E6  0E06               	movlw	6
  6506  00F7E8  5C06               	subwf	??_actualizar_password+2,w,c
  6507  00F7EA  A0D8               	btfss	status,0,c
  6508  00F7EC  0012               	return	
  6509  00F7EE                     u2800:
  6510                           
  6511                           ;alarma.c: 79: restaurar_comando();
  6512  00F7EE  ECA5  F070         	call	_restaurar_comando	;wreg free
  6513                           
  6514                           ;alarma.c: 81: for (int j=0; j < 6; j++ )
  6515  00F7F2  0E00               	movlw	0
  6516  00F7F4  6E0C               	movwf	actualizar_password@j_1623+1,c
  6517  00F7F6  0E00               	movlw	0
  6518  00F7F8  6E0B               	movwf	actualizar_password@j_1623,c
  6519  00F7FA                     l3652:
  6520  00F7FA  BE0C               	btfsc	actualizar_password@j_1623+1,7,c
  6521  00F7FC  D008               	goto	l3656
  6522  00F7FE  500C               	movf	actualizar_password@j_1623+1,w,c
  6523  00F800  E118               	bnz	l3662
  6524  00F802  0E06               	movlw	6
  6525  00F804  5C0B               	subwf	actualizar_password@j_1623,w,c
  6526  00F806  B0D8               	btfsc	status,0,c
  6527  00F808  D014               	goto	l3662
  6528  00F80A  D001               	goto	l3656
  6529  00F80C  D012               	goto	l3662
  6530  00F80E                     l3656:
  6531                           
  6532                           ;alarma.c: 82: password[j] = new_password[j];
  6533  00F80E  0E7F               	movlw	low _new_password
  6534  00F810  240B               	addwf	actualizar_password@j_1623,w,c
  6535  00F812  6ED9               	movwf	fsr2l,c
  6536  00F814  0E00               	movlw	high _new_password
  6537  00F816  200C               	addwfc	actualizar_password@j_1623+1,w,c
  6538  00F818  6EDA               	movwf	fsr2h,c
  6539  00F81A  0ECE               	movlw	low _password
  6540  00F81C  240B               	addwf	actualizar_password@j_1623,w,c
  6541  00F81E  6EE1               	movwf	fsr1l,c
  6542  00F820  0E00               	movlw	high _password
  6543  00F822  200C               	addwfc	actualizar_password@j_1623+1,w,c
  6544  00F824  6EE2               	movwf	fsr1h,c
  6545  00F826  CFDF FFE7          	movff	indf2,indf1
  6546  00F82A  4A0B               	infsnz	actualizar_password@j_1623,f,c
  6547  00F82C  2A0C               	incf	actualizar_password@j_1623+1,f,c
  6548  00F82E  D7E5               	goto	l3652
  6549  00F830  D000               	goto	l3662
  6550  00F832                     l3662:
  6551                           
  6552                           ;alarma.c: 84: new_password[0] = 0;
  6553  00F832  0E00               	movlw	0
  6554  00F834  0100               	movlb	0	; () banked
  6555  00F836  6F7F               	movwf	_new_password& (0+255),b
  6556                           
  6557                           ;alarma.c: 85: temporal[0] = 0;
  6558  00F838  0E00               	movlw	0
  6559  00F83A  0100               	movlb	0	; () banked
  6560  00F83C  6F86               	movwf	_temporal& (0+255),b
  6561                           
  6562                           ;alarma.c: 87: tamanio_new_password = 0;
  6563  00F83E  0E00               	movlw	0
  6564  00F840  6E4C               	movwf	_tamanio_new_password+1,c
  6565  00F842  0E00               	movlw	0
  6566  00F844  6E4B               	movwf	_tamanio_new_password,c
  6567                           
  6568                           ;alarma.c: 88: tamanio_password = 0;
  6569  00F846  0E00               	movlw	0
  6570  00F848  6E4E               	movwf	_tamanio_password+1,c
  6571  00F84A  0E00               	movlw	0
  6572  00F84C  6E4D               	movwf	_tamanio_password,c
  6573  00F84E  0012               	return	
  6574                           
  6575                           ; BSR set to: 0
  6576  00F850  0012               	return		;funcret
  6577  00F852                     __end_of_actualizar_password:
  6578                           	opt stack 0
  6579                           tosu	equ	0xFFF
  6580                           tosh	equ	0xFFE
  6581                           tosl	equ	0xFFD
  6582                           pclath	equ	0xFFA
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           postinc0	equ	0xFEE
  6590                           wreg	equ	0xFE8
  6591                           indf1	equ	0xFE7
  6592                           postinc1	equ	0xFE6
  6593                           postdec1	equ	0xFE5
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _restaurar_comando *****************
  6604 ;; Defined at:
  6605 ;;		line 52 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, status,2
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6623 ;;Total ram usage:        0 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		_main
  6629 ;;		_cambiar_dia
  6630 ;;		_cambiar_hora
  6631 ;;		_actualizar_password
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text37
  6636  00E14A                     __ptext37:
  6637                           	opt stack 0
  6638  00E14A                     _restaurar_comando:
  6639                           	opt stack 30
  6640                           
  6641                           ;teclado.c: 53: tamanio_comando = 0;
  6642                           
  6643                           ;incstack = 0
  6644  00E14A  0E00               	movlw	0
  6645  00E14C  0100               	movlb	0	; () banked
  6646  00E14E  6FA6               	movwf	(_tamanio_comando+1)& (0+255),b
  6647  00E150  0E00               	movlw	0
  6648  00E152  6FA5               	movwf	_tamanio_comando& (0+255),b
  6649                           
  6650                           ;teclado.c: 55: comando[0]='x';
  6651  00E154  0E78               	movlw	120
  6652  00E156  0100               	movlb	0	; () banked
  6653  00E158  6FD5               	movwf	_comando& (0+255),b
  6654                           
  6655                           ;teclado.c: 56: comando[1]='x';
  6656  00E15A  0E78               	movlw	120
  6657  00E15C  0100               	movlb	0	; () banked
  6658  00E15E  6FD6               	movwf	(_comando+1)& (0+255),b
  6659                           
  6660                           ;teclado.c: 57: comando[2]=0;
  6661  00E160  0E00               	movlw	0
  6662  00E162  0100               	movlb	0	; () banked
  6663  00E164  6FD7               	movwf	(_comando+2)& (0+255),b
  6664                           
  6665                           ; BSR set to: 0
  6666  00E166  0012               	return		;funcret
  6667  00E168                     __end_of_restaurar_comando:
  6668                           	opt stack 0
  6669                           tosu	equ	0xFFF
  6670                           tosh	equ	0xFFE
  6671                           tosl	equ	0xFFD
  6672                           pclath	equ	0xFFA
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           postinc0	equ	0xFEE
  6680                           wreg	equ	0xFE8
  6681                           indf1	equ	0xFE7
  6682                           postinc1	equ	0xFE6
  6683                           postdec1	equ	0xFE5
  6684                           fsr1h	equ	0xFE2
  6685                           fsr1l	equ	0xFE1
  6686                           indf2	equ	0xFDF
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _cambiar_horario *****************
  6694 ;; Defined at:
  6695 ;;		line 181 in file "main.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;		None               void
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    6
  6716 ;; This function calls:
  6717 ;;		_clear_display
  6718 ;;		_mostrar_titulo_menu
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text38
  6725  00E644                     __ptext38:
  6726                           	opt stack 0
  6727  00E644                     _cambiar_horario:
  6728                           	opt stack 24
  6729                           
  6730                           ;main.c: 183: if (tamanio_minutos != 2){
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;incstack = 0
  6734  00E644  0E02               	movlw	2
  6735  00E646  185C               	xorwf	_tamanio_minutos,w,c
  6736  00E648  105D               	iorwf	_tamanio_minutos+1,w,c
  6737  00E64A  B4D8               	btfsc	status,2,c
  6738  00E64C  D013               	goto	l3876
  6739                           
  6740                           ;main.c: 184: mostrar_titulo_menu("Inserte minutos:     ");
  6741  00E64E  0E1D               	movlw	low STR_17
  6742  00E650  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  6743  00E652  0EFF               	movlw	high STR_17
  6744  00E654  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  6745  00E656  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  6746                           
  6747                           ;main.c: 185: puntero_funcion = cambiar_minutos;
  6748  00E65A  0E0A               	movlw	low _cambiar_minutos
  6749  00E65C  6E49               	movwf	_puntero_funcion,c
  6750  00E65E  0EF0               	movlw	high _cambiar_minutos
  6751  00E660  6E4A               	movwf	_puntero_funcion+1,c
  6752                           
  6753                           ;main.c: 186: clear_display(tamanio_minutos+1);
  6754  00E662  0E01               	movlw	1
  6755  00E664  245C               	addwf	_tamanio_minutos,w,c
  6756  00E666  6E0B               	movwf	clear_display@pos,c
  6757  00E668  0E00               	movlw	0
  6758  00E66A  205D               	addwfc	_tamanio_minutos+1,w,c
  6759  00E66C  6E0C               	movwf	clear_display@pos+1,c
  6760  00E66E  ECE1  F070         	call	_clear_display	;wreg free
  6761                           
  6762                           ;main.c: 188: }else if (tamanio_hora != 2){
  6763  00E672  0012               	return	
  6764  00E674                     l3876:
  6765  00E674  0E02               	movlw	2
  6766  00E676  1858               	xorwf	_tamanio_hora,w,c
  6767  00E678  1059               	iorwf	_tamanio_hora+1,w,c
  6768  00E67A  B4D8               	btfsc	status,2,c
  6769  00E67C  0012               	return	
  6770                           
  6771                           ;main.c: 189: mostrar_titulo_menu("Inserte hora:     ");
  6772  00E67E  0E47               	movlw	low STR_18
  6773  00E680  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  6774  00E682  0EFF               	movlw	high STR_18
  6775  00E684  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  6776  00E686  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  6777                           
  6778                           ;main.c: 190: puntero_funcion = cambiar_hora;
  6779  00E68A  0E96               	movlw	low _cambiar_hora
  6780  00E68C  6E49               	movwf	_puntero_funcion,c
  6781  00E68E  0EEE               	movlw	high _cambiar_hora
  6782  00E690  6E4A               	movwf	_puntero_funcion+1,c
  6783                           
  6784                           ;main.c: 191: clear_display(tamanio_hora+1);
  6785  00E692  0E01               	movlw	1
  6786  00E694  2458               	addwf	_tamanio_hora,w,c
  6787  00E696  6E0B               	movwf	clear_display@pos,c
  6788  00E698  0E00               	movlw	0
  6789  00E69A  2059               	addwfc	_tamanio_hora+1,w,c
  6790  00E69C  6E0C               	movwf	clear_display@pos+1,c
  6791  00E69E  ECE1  F070         	call	_clear_display	;wreg free
  6792  00E6A2  0012               	return	
  6793  00E6A4  0012               	return		;funcret
  6794  00E6A6                     __end_of_cambiar_horario:
  6795                           	opt stack 0
  6796                           tosu	equ	0xFFF
  6797                           tosh	equ	0xFFE
  6798                           tosl	equ	0xFFD
  6799                           pclath	equ	0xFFA
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           postinc0	equ	0xFEE
  6807                           wreg	equ	0xFE8
  6808                           indf1	equ	0xFE7
  6809                           postinc1	equ	0xFE6
  6810                           postdec1	equ	0xFE5
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function _cambiar_fecha *****************
  6821 ;; Defined at:
  6822 ;;		line 161 in file "main.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;		None               void
  6829 ;; Registers used:
  6830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6840 ;;Total ram usage:        0 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    6
  6843 ;; This function calls:
  6844 ;;		_clear_display
  6845 ;;		_mostrar_titulo_menu
  6846 ;; This function is called by:
  6847 ;;		_main
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text39
  6852  00EC02                     __ptext39:
  6853                           	opt stack 0
  6854  00EC02                     _cambiar_fecha:
  6855                           	opt stack 24
  6856                           
  6857                           ;main.c: 163: if (tamanio_anio != 2){
  6858                           
  6859                           ;incstack = 0
  6860  00EC02  0E02               	movlw	2
  6861  00EC04  1854               	xorwf	_tamanio_anio,w,c
  6862  00EC06  1055               	iorwf	_tamanio_anio+1,w,c
  6863  00EC08  B4D8               	btfsc	status,2,c
  6864  00EC0A  D013               	goto	l3852
  6865                           
  6866                           ;main.c: 164: mostrar_titulo_menu("Inserte anio:     ");
  6867  00EC0C  0E5A               	movlw	low STR_14
  6868  00EC0E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  6869  00EC10  0EFF               	movlw	high STR_14
  6870  00EC12  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  6871  00EC14  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  6872                           
  6873                           ;main.c: 165: puntero_funcion = &cambiar_anio;
  6874  00EC18  0E4C               	movlw	low _cambiar_anio
  6875  00EC1A  6E49               	movwf	_puntero_funcion,c
  6876  00EC1C  0EEF               	movlw	high _cambiar_anio
  6877  00EC1E  6E4A               	movwf	_puntero_funcion+1,c
  6878                           
  6879                           ;main.c: 166: clear_display(tamanio_anio+1);
  6880  00EC20  0E01               	movlw	1
  6881  00EC22  2454               	addwf	_tamanio_anio,w,c
  6882  00EC24  6E0B               	movwf	clear_display@pos,c
  6883  00EC26  0E00               	movlw	0
  6884  00EC28  2055               	addwfc	_tamanio_anio+1,w,c
  6885  00EC2A  6E0C               	movwf	clear_display@pos+1,c
  6886  00EC2C  ECE1  F070         	call	_clear_display	;wreg free
  6887                           
  6888                           ;main.c: 168: }else if (tamanio_mes != 2){
  6889  00EC30  0012               	return	
  6890  00EC32                     l3852:
  6891  00EC32  0E02               	movlw	2
  6892  00EC34  185A               	xorwf	_tamanio_mes,w,c
  6893  00EC36  105B               	iorwf	_tamanio_mes+1,w,c
  6894  00EC38  B4D8               	btfsc	status,2,c
  6895  00EC3A  D013               	goto	l3860
  6896                           
  6897                           ;main.c: 169: mostrar_titulo_menu("Inserte mes:     ");
  6898  00EC3C  0E7F               	movlw	low STR_15
  6899  00EC3E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  6900  00EC40  0EFF               	movlw	high STR_15
  6901  00EC42  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  6902  00EC44  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  6903                           
  6904                           ;main.c: 170: puntero_funcion = &cambiar_mes;
  6905  00EC48  0E2A               	movlw	low _cambiar_mes
  6906  00EC4A  6E49               	movwf	_puntero_funcion,c
  6907  00EC4C  0EED               	movlw	high _cambiar_mes
  6908  00EC4E  6E4A               	movwf	_puntero_funcion+1,c
  6909                           
  6910                           ;main.c: 171: clear_display(tamanio_mes+1);
  6911  00EC50  0E01               	movlw	1
  6912  00EC52  245A               	addwf	_tamanio_mes,w,c
  6913  00EC54  6E0B               	movwf	clear_display@pos,c
  6914  00EC56  0E00               	movlw	0
  6915  00EC58  205B               	addwfc	_tamanio_mes+1,w,c
  6916  00EC5A  6E0C               	movwf	clear_display@pos+1,c
  6917  00EC5C  ECE1  F070         	call	_clear_display	;wreg free
  6918                           
  6919                           ;main.c: 173: }else if (tamanio_dia != 2){
  6920  00EC60  0012               	return	
  6921  00EC62                     l3860:
  6922  00EC62  0E02               	movlw	2
  6923  00EC64  1856               	xorwf	_tamanio_dia,w,c
  6924  00EC66  1057               	iorwf	_tamanio_dia+1,w,c
  6925  00EC68  B4D8               	btfsc	status,2,c
  6926  00EC6A  0012               	return	
  6927                           
  6928                           ;main.c: 174: mostrar_titulo_menu("Inserte dia:     ");
  6929  00EC6C  0E6D               	movlw	low STR_16
  6930  00EC6E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  6931  00EC70  0EFF               	movlw	high STR_16
  6932  00EC72  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  6933  00EC74  EC8D  F070         	call	_mostrar_titulo_menu	;wreg free
  6934                           
  6935                           ;main.c: 175: puntero_funcion = &cambiar_dia;
  6936  00EC78  0EE0               	movlw	low _cambiar_dia
  6937  00EC7A  6E49               	movwf	_puntero_funcion,c
  6938  00EC7C  0EED               	movlw	high _cambiar_dia
  6939  00EC7E  6E4A               	movwf	_puntero_funcion+1,c
  6940                           
  6941                           ;main.c: 176: clear_display(tamanio_dia+1);
  6942  00EC80  0E01               	movlw	1
  6943  00EC82  2456               	addwf	_tamanio_dia,w,c
  6944  00EC84  6E0B               	movwf	clear_display@pos,c
  6945  00EC86  0E00               	movlw	0
  6946  00EC88  2057               	addwfc	_tamanio_dia+1,w,c
  6947  00EC8A  6E0C               	movwf	clear_display@pos+1,c
  6948  00EC8C  ECE1  F070         	call	_clear_display	;wreg free
  6949  00EC90  0012               	return	
  6950  00EC92  0012               	return		;funcret
  6951  00EC94                     __end_of_cambiar_fecha:
  6952                           	opt stack 0
  6953                           tosu	equ	0xFFF
  6954                           tosh	equ	0xFFE
  6955                           tosl	equ	0xFFD
  6956                           pclath	equ	0xFFA
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           postinc0	equ	0xFEE
  6964                           wreg	equ	0xFE8
  6965                           indf1	equ	0xFE7
  6966                           postinc1	equ	0xFE6
  6967                           postdec1	equ	0xFE5
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _mostrar_titulo_menu *****************
  6978 ;; Defined at:
  6979 ;;		line 109 in file "main.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;  titulo_menu     2   10[COMRAM] PTR const unsigned char 
  6982 ;;		 -> STR_22(23), STR_20(20), STR_19(27), STR_18(19), 
  6983 ;;		 -> STR_17(22), STR_16(18), STR_15(18), STR_14(19), 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;		None               void
  6988 ;; Registers used:
  6989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6999 ;;Total ram usage:        2 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    5
  7002 ;; This function calls:
  7003 ;;		_lcd_gotoxy
  7004 ;;		_lcd_putrs
  7005 ;; This function is called by:
  7006 ;;		_cambiar_fecha
  7007 ;;		_cambiar_horario
  7008 ;;		_cambiar_password
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text40
  7013  00E11A                     __ptext40:
  7014                           	opt stack 0
  7015  00E11A                     _mostrar_titulo_menu:
  7016                           	opt stack 24
  7017                           
  7018                           ;main.c: 110: lcd_gotoxy(1,1);
  7019                           
  7020                           ;incstack = 0
  7021  00E11A  0E01               	movlw	1
  7022  00E11C  6E05               	movwf	lcd_gotoxy@y,c
  7023  00E11E  0E01               	movlw	1
  7024  00E120  EC03  F071         	call	_lcd_gotoxy
  7025                           
  7026                           ;main.c: 111: lcd_putrs(titulo_menu);
  7027  00E124  C00B  F009         	movff	mostrar_titulo_menu@titulo_menu,lcd_putrs@ptr
  7028  00E128  C00C  F00A         	movff	mostrar_titulo_menu@titulo_menu+1,lcd_putrs@ptr+1
  7029  00E12C  ECCA  F072         	call	_lcd_putrs	;wreg free
  7030  00E130  0012               	return		;funcret
  7031  00E132                     __end_of_mostrar_titulo_menu:
  7032                           	opt stack 0
  7033                           tosu	equ	0xFFF
  7034                           tosh	equ	0xFFE
  7035                           tosl	equ	0xFFD
  7036                           pclath	equ	0xFFA
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           prodh	equ	0xFF4
  7042                           prodl	equ	0xFF3
  7043                           postinc0	equ	0xFEE
  7044                           wreg	equ	0xFE8
  7045                           indf1	equ	0xFE7
  7046                           postinc1	equ	0xFE6
  7047                           postdec1	equ	0xFE5
  7048                           fsr1h	equ	0xFE2
  7049                           fsr1l	equ	0xFE1
  7050                           indf2	equ	0xFDF
  7051                           postinc2	equ	0xFDE
  7052                           postdec2	equ	0xFDD
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function _clear_display *****************
  7058 ;; Defined at:
  7059 ;;		line 155 in file "main.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  pos             2   10[COMRAM] const int 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;		None               void
  7066 ;; Registers used:
  7067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7077 ;;Total ram usage:        2 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    5
  7080 ;; This function calls:
  7081 ;;		_lcd_gotoxy
  7082 ;;		_lcd_putrs
  7083 ;; This function is called by:
  7084 ;;		_cambiar_fecha
  7085 ;;		_cambiar_horario
  7086 ;;		_cambiar_password
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           	psect	text41
  7091  00E1C2                     __ptext41:
  7092                           	opt stack 0
  7093  00E1C2                     _clear_display:
  7094                           	opt stack 24
  7095                           
  7096                           ;main.c: 156: lcd_gotoxy(pos,2);
  7097                           
  7098                           ;incstack = 0
  7099  00E1C2  0E02               	movlw	2
  7100  00E1C4  6E05               	movwf	lcd_gotoxy@y,c
  7101  00E1C6  500B               	movf	clear_display@pos,w,c
  7102  00E1C8  EC03  F071         	call	_lcd_gotoxy
  7103                           
  7104                           ;main.c: 157: lcd_putrs("                         ");
  7105  00E1CC  0EEC               	movlw	low STR_13
  7106  00E1CE  6E09               	movwf	lcd_putrs@ptr,c
  7107  00E1D0  0EFE               	movlw	high STR_13
  7108  00E1D2  6E0A               	movwf	lcd_putrs@ptr+1,c
  7109  00E1D4  ECCA  F072         	call	_lcd_putrs	;wreg free
  7110                           
  7111                           ;main.c: 158: lcd_gotoxy(pos,2);
  7112  00E1D8  0E02               	movlw	2
  7113  00E1DA  6E05               	movwf	lcd_gotoxy@y,c
  7114  00E1DC  500B               	movf	clear_display@pos,w,c
  7115  00E1DE  EC03  F071         	call	_lcd_gotoxy
  7116  00E1E2  0012               	return		;funcret
  7117  00E1E4                     __end_of_clear_display:
  7118                           	opt stack 0
  7119                           tosu	equ	0xFFF
  7120                           tosh	equ	0xFFE
  7121                           tosl	equ	0xFFD
  7122                           pclath	equ	0xFFA
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           postinc0	equ	0xFEE
  7130                           wreg	equ	0xFE8
  7131                           indf1	equ	0xFE7
  7132                           postinc1	equ	0xFE6
  7133                           postdec1	equ	0xFE5
  7134                           fsr1h	equ	0xFE2
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _lcd_putrs *****************
  7144 ;; Defined at:
  7145 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  7148 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  7149 ;;		 -> day(3), STR_36(2), STR_35(2), STR_34(2), 
  7150 ;;		 -> STR_30(2), imprimir_tecla@aux(20), STR_25(8), STR_22(23), 
  7151 ;;		 -> STR_20(20), STR_19(27), STR_18(19), STR_17(22), 
  7152 ;;		 -> STR_16(18), STR_15(18), STR_14(19), STR_13(26), 
  7153 ;;		 -> STR_12(8), STR_6(11), STR_5(17), ingresar_password@clear(16), 
  7154 ;;		 -> STR_4(4), STR_3(3), buffer2(20), 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;		None               void
  7159 ;; Registers used:
  7160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7170 ;;Total ram usage:        2 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    4
  7173 ;; This function calls:
  7174 ;;		_lcd_putc
  7175 ;; This function is called by:
  7176 ;;		_caratula
  7177 ;;		_ingresar_password
  7178 ;;		_mostrar_titulo_menu
  7179 ;;		_clear_display
  7180 ;;		_imprimir_tecla
  7181 ;;		_leer_teclado
  7182 ;;		_cambiar_dia
  7183 ;;		_cambiar_mes
  7184 ;;		_cambiar_anio
  7185 ;;		_cambiar_hora
  7186 ;;		_cambiar_minutos
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text42
  7191  00E594                     __ptext42:
  7192                           	opt stack 0
  7193  00E594                     _lcd_putrs:
  7194                           	opt stack 23
  7195                           
  7196                           ;unmc_lcd_216.c: 223: while(*ptr){
  7197                           
  7198                           ;incstack = 0
  7199  00E594  D015               	goto	l2968
  7200  00E596                     l2964:
  7201                           
  7202                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  7203  00E596  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  7204  00E59A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  7205  00E59E  6AF8               	clrf	tblptru,c
  7206  00E5A0  0E0E               	movlw	(high __ramtop+-1)
  7207  00E5A2  64F7               	cpfsgt	tblptrh,c
  7208  00E5A4  D003               	bra	u1837
  7209  00E5A6  0008               	tblrd		*
  7210  00E5A8  50F5               	movf	tablat,w,c
  7211  00E5AA  D005               	bra	u1830
  7212  00E5AC                     u1837:
  7213  00E5AC  CFF6 FFE9          	movff	tblptrl,fsr0l
  7214  00E5B0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7215  00E5B4  50EF               	movf	indf0,w,c
  7216  00E5B6                     u1830:
  7217  00E5B6  EC7E  F072         	call	_lcd_putc
  7218  00E5BA  4A09               	infsnz	lcd_putrs@ptr,f,c
  7219  00E5BC  2A0A               	incf	lcd_putrs@ptr+1,f,c
  7220  00E5BE  D000               	goto	l2968
  7221  00E5C0                     l2968:
  7222  00E5C0  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  7223  00E5C4  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  7224  00E5C8  6AF8               	clrf	tblptru,c
  7225  00E5CA  0E0E               	movlw	(high __ramtop+-1)
  7226  00E5CC  64F7               	cpfsgt	tblptrh,c
  7227  00E5CE  D003               	bra	u1847
  7228  00E5D0  0008               	tblrd		*
  7229  00E5D2  50F5               	movf	tablat,w,c
  7230  00E5D4  D005               	bra	u1840
  7231  00E5D6                     u1847:
  7232  00E5D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7233  00E5DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7234  00E5DE  50EF               	movf	indf0,w,c
  7235  00E5E0                     u1840:
  7236  00E5E0  0900               	iorlw	0
  7237  00E5E2  A4D8               	btfss	status,2,c
  7238  00E5E4  D7D8               	goto	l2964
  7239  00E5E6  0012               	return		;funcret
  7240  00E5E8                     __end_of_lcd_putrs:
  7241                           	opt stack 0
  7242                           tosu	equ	0xFFF
  7243                           tosh	equ	0xFFE
  7244                           tosl	equ	0xFFD
  7245                           pclath	equ	0xFFA
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           indf0	equ	0xFEF
  7253                           postinc0	equ	0xFEE
  7254                           fsr0h	equ	0xFEA
  7255                           fsr0l	equ	0xFE9
  7256                           wreg	equ	0xFE8
  7257                           indf1	equ	0xFE7
  7258                           postinc1	equ	0xFE6
  7259                           postdec1	equ	0xFE5
  7260                           fsr1h	equ	0xFE2
  7261                           fsr1l	equ	0xFE1
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           postdec2	equ	0xFDD
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8
  7268                           
  7269 ;; *************** function _lcd_putc *****************
  7270 ;; Defined at:
  7271 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  c               1    wreg     unsigned char 
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;  c               1    7[COMRAM] unsigned char 
  7276 ;; Return value:  Size  Location     Type
  7277 ;;		None               void
  7278 ;; Registers used:
  7279 ;;		wreg, status,2, status,0, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7289 ;;Total ram usage:        1 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:    3
  7292 ;; This function calls:
  7293 ;;		_lcd_gotoxy
  7294 ;;		_lcd_send_byte
  7295 ;; This function is called by:
  7296 ;;		_lcd_putrs
  7297 ;;		_lcd_puts
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text43
  7302  00E4FC                     __ptext43:
  7303                           	opt stack 0
  7304  00E4FC                     _lcd_putc:
  7305                           	opt stack 23
  7306                           
  7307                           ;incstack = 0
  7308                           ;lcd_putc@c stored from wreg
  7309  00E4FC  6E08               	movwf	lcd_putc@c,c
  7310                           
  7311                           ;unmc_lcd_216.c: 173: switch(c){
  7312  00E4FE  D018               	goto	l2896
  7313  00E500                     l2886:
  7314                           
  7315                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  7316  00E500  0E01               	movlw	1
  7317  00E502  6E03               	movwf	lcd_send_byte@n,c
  7318  00E504  0E00               	movlw	0
  7319  00E506  EC93  F071         	call	_lcd_send_byte
  7320                           
  7321                           ;unmc_lcd_216.c: 176: break;
  7322  00E50A  0012               	return	
  7323  00E50C                     l2888:
  7324                           
  7325                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  7326  00E50C  0E02               	movlw	2
  7327  00E50E  6E05               	movwf	lcd_gotoxy@y,c
  7328  00E510  0E01               	movlw	1
  7329  00E512  EC03  F071         	call	_lcd_gotoxy
  7330                           
  7331                           ;unmc_lcd_216.c: 179: break;
  7332  00E516  0012               	return	
  7333  00E518                     l2890:
  7334                           
  7335                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  7336  00E518  0E10               	movlw	16
  7337  00E51A  6E03               	movwf	lcd_send_byte@n,c
  7338  00E51C  0E00               	movlw	0
  7339  00E51E  EC93  F071         	call	_lcd_send_byte
  7340                           
  7341                           ;unmc_lcd_216.c: 182: break;
  7342  00E522  0012               	return	
  7343  00E524                     l2892:
  7344                           
  7345                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  7346  00E524  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  7347  00E528  0E01               	movlw	1
  7348  00E52A  EC93  F071         	call	_lcd_send_byte
  7349                           
  7350                           ;unmc_lcd_216.c: 186: }
  7351                           
  7352                           ;unmc_lcd_216.c: 185: break;
  7353  00E52E  0012               	return	
  7354  00E530                     l2896:
  7355  00E530  5008               	movf	lcd_putc@c,w,c
  7356                           
  7357                           ; Switch size 1, requested type "space"
  7358                           ; Number of cases is 3, Range of values is 8 to 12
  7359                           ; switch strategies available:
  7360                           ; Name         Instructions Cycles
  7361                           ; simple_byte           10     6 (average)
  7362                           ;	Chosen strategy is simple_byte
  7363  00E532  0A08               	xorlw	8	; case 8
  7364  00E534  B4D8               	btfsc	status,2,c
  7365  00E536  D7F0               	goto	l2890
  7366  00E538  0A02               	xorlw	2	; case 10
  7367  00E53A  B4D8               	btfsc	status,2,c
  7368  00E53C  D7E7               	goto	l2888
  7369  00E53E  0A06               	xorlw	6	; case 12
  7370  00E540  B4D8               	btfsc	status,2,c
  7371  00E542  D7DE               	goto	l2886
  7372  00E544  D7EF               	goto	l2892
  7373  00E546  0012               	return		;funcret
  7374  00E548                     __end_of_lcd_putc:
  7375                           	opt stack 0
  7376                           tosu	equ	0xFFF
  7377                           tosh	equ	0xFFE
  7378                           tosl	equ	0xFFD
  7379                           pclath	equ	0xFFA
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           indf0	equ	0xFEF
  7387                           postinc0	equ	0xFEE
  7388                           fsr0h	equ	0xFEA
  7389                           fsr0l	equ	0xFE9
  7390                           wreg	equ	0xFE8
  7391                           indf1	equ	0xFE7
  7392                           postinc1	equ	0xFE6
  7393                           postdec1	equ	0xFE5
  7394                           fsr1h	equ	0xFE2
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _lcd_gotoxy *****************
  7404 ;; Defined at:
  7405 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  x               1    wreg     unsigned char 
  7408 ;;  y               1    4[COMRAM] unsigned char 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  x               1    5[COMRAM] unsigned char 
  7411 ;;  address         1    6[COMRAM] unsigned char 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;		None               void
  7414 ;; Registers used:
  7415 ;;		wreg, status,2, status,0, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7425 ;;Total ram usage:        3 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    2
  7428 ;; This function calls:
  7429 ;;		_lcd_send_byte
  7430 ;; This function is called by:
  7431 ;;		_caratula
  7432 ;;		_ingresar_password
  7433 ;;		_mostrar_titulo_menu
  7434 ;;		_clear_display
  7435 ;;		_lcd_putc
  7436 ;;		_cambiar_dia
  7437 ;;		_cambiar_mes
  7438 ;;		_cambiar_anio
  7439 ;;		_cambiar_hora
  7440 ;;		_cambiar_minutos
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text44
  7445  00E206                     __ptext44:
  7446                           	opt stack 0
  7447  00E206                     _lcd_gotoxy:
  7448                           	opt stack 23
  7449                           
  7450                           ;incstack = 0
  7451                           ;lcd_gotoxy@x stored from wreg
  7452  00E206  6E06               	movwf	lcd_gotoxy@x,c
  7453                           
  7454                           ;unmc_lcd_216.c: 159: int8 address;
  7455                           ;unmc_lcd_216.c: 161: if(y != 1)
  7456  00E208  0405               	decf	lcd_gotoxy@y,w,c
  7457  00E20A  B4D8               	btfsc	status,2,c
  7458  00E20C  D002               	goto	l2878
  7459                           
  7460                           ;unmc_lcd_216.c: 162: address = 0x40;
  7461  00E20E  0E40               	movlw	64
  7462  00E210  D001               	goto	L2
  7463  00E212                     l2878:
  7464                           
  7465                           ;unmc_lcd_216.c: 163: else
  7466                           ;unmc_lcd_216.c: 164: address=0;
  7467  00E212  0E00               	movlw	0
  7468  00E214                     L2:
  7469  00E214  6E07               	movwf	lcd_gotoxy@address,c
  7470  00E216  D000               	goto	l2880
  7471  00E218                     l2880:
  7472                           
  7473                           ;unmc_lcd_216.c: 166: address += x-1;
  7474  00E218  0406               	decf	lcd_gotoxy@x,w,c
  7475  00E21A  2607               	addwf	lcd_gotoxy@address,f,c
  7476                           
  7477                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  7478  00E21C  5007               	movf	lcd_gotoxy@address,w,c
  7479  00E21E  0980               	iorlw	128
  7480  00E220  6E03               	movwf	lcd_send_byte@n,c
  7481  00E222  0E00               	movlw	0
  7482  00E224  EC93  F071         	call	_lcd_send_byte
  7483  00E228  0012               	return		;funcret
  7484  00E22A                     __end_of_lcd_gotoxy:
  7485                           	opt stack 0
  7486                           tosu	equ	0xFFF
  7487                           tosh	equ	0xFFE
  7488                           tosl	equ	0xFFD
  7489                           pclath	equ	0xFFA
  7490                           tblptru	equ	0xFF8
  7491                           tblptrh	equ	0xFF7
  7492                           tblptrl	equ	0xFF6
  7493                           tablat	equ	0xFF5
  7494                           prodh	equ	0xFF4
  7495                           prodl	equ	0xFF3
  7496                           indf0	equ	0xFEF
  7497                           postinc0	equ	0xFEE
  7498                           fsr0h	equ	0xFEA
  7499                           fsr0l	equ	0xFE9
  7500                           wreg	equ	0xFE8
  7501                           indf1	equ	0xFE7
  7502                           postinc1	equ	0xFE6
  7503                           postdec1	equ	0xFE5
  7504                           fsr1h	equ	0xFE2
  7505                           fsr1l	equ	0xFE1
  7506                           indf2	equ	0xFDF
  7507                           postinc2	equ	0xFDE
  7508                           postdec2	equ	0xFDD
  7509                           fsr2h	equ	0xFDA
  7510                           fsr2l	equ	0xFD9
  7511                           status	equ	0xFD8
  7512                           
  7513 ;; *************** function _Setup *****************
  7514 ;; Defined at:
  7515 ;;		line 59 in file "main.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7533 ;;Total ram usage:        0 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    3
  7536 ;; This function calls:
  7537 ;;		_Write_RTC
  7538 ;;		_lcd_comand
  7539 ;;		_lcd_init
  7540 ;; This function is called by:
  7541 ;;		_main
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text45
  7546  00E4B4                     __ptext45:
  7547                           	opt stack 0
  7548  00E4B4                     _Setup:
  7549                           	opt stack 27
  7550                           
  7551                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  7552                           
  7553                           ;incstack = 0
  7554  00E4B4  8E9B               	bsf	3995,7,c	;volatile
  7555                           
  7556                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  7557  00E4B6  9C9B               	bcf	3995,6,c	;volatile
  7558                           
  7559                           ;main.c: 63: OSCCONbits.IRCF0=1;
  7560  00E4B8  88D3               	bsf	4051,4,c	;volatile
  7561                           
  7562                           ;main.c: 64: OSCCONbits.IRCF1=1;
  7563  00E4BA  8AD3               	bsf	4051,5,c	;volatile
  7564                           
  7565                           ;main.c: 65: OSCCONbits.IRCF2=1;
  7566  00E4BC  8CD3               	bsf	4051,6,c	;volatile
  7567                           
  7568                           ;main.c: 66: OSCCONbits.SCS0=0;
  7569  00E4BE  90D3               	bcf	4051,0,c	;volatile
  7570                           
  7571                           ;main.c: 67: OSCCONbits.SCS1=0;
  7572  00E4C0  92D3               	bcf	4051,1,c	;volatile
  7573                           
  7574                           ;main.c: 68: TRISA = 0b11110000;
  7575  00E4C2  0EF0               	movlw	240
  7576  00E4C4  6E92               	movwf	3986,c	;volatile
  7577                           
  7578                           ;main.c: 69: TRISB = 0;
  7579  00E4C6  0E00               	movlw	0
  7580  00E4C8  6E93               	movwf	3987,c	;volatile
  7581                           
  7582                           ;main.c: 70: TRISC = 0b00000111;
  7583  00E4CA  0E07               	movlw	7
  7584  00E4CC  6E94               	movwf	3988,c	;volatile
  7585                           
  7586                           ;main.c: 74: ANCON0=0b11111111;
  7587  00E4CE  010F               	movlb	15	; () banked
  7588  00E4D0  6948               	setf	72,b	;volatile
  7589                           
  7590                           ; BSR set to: 15
  7591                           ;main.c: 76: ANCON1=0b11111111;
  7592  00E4D2  010F               	movlb	15	; () banked
  7593  00E4D4  6949               	setf	73,b	;volatile
  7594                           
  7595                           ;main.c: 77: ADCON0=0b00101101;
  7596  00E4D6  0E2D               	movlw	45
  7597  00E4D8  6EC2               	movwf	4034,c	;volatile
  7598                           
  7599                           ;main.c: 78: ADCON1=0b00010000;
  7600  00E4DA  0E10               	movlw	16
  7601  00E4DC  6EC1               	movwf	4033,c	;volatile
  7602                           
  7603                           ; BSR set to: 15
  7604                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  7605  00E4DE  010F               	movlb	15	; () banked
  7606  00E4E0  8F3F               	bsf	63,7,b	;volatile
  7607                           
  7608                           ; BSR set to: 15
  7609                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  7610  00E4E2  010F               	movlb	15	; () banked
  7611  00E4E4  8B3F               	bsf	63,5,b	;volatile
  7612                           
  7613                           ; BSR set to: 15
  7614                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  7615  00E4E6  86CD               	bsf	4045,3,c	;volatile
  7616                           
  7617                           ; BSR set to: 15
  7618                           ;main.c: 82: Write_RTC();
  7619  00E4E8  EC67  F07D         	call	_Write_RTC	;wreg free
  7620                           
  7621                           ;main.c: 83: lcd_init();
  7622  00E4EC  ECAD  F074         	call	_lcd_init	;wreg free
  7623                           
  7624                           ;main.c: 84: lcd_comand(0b00001100);
  7625  00E4F0  0E0C               	movlw	12
  7626  00E4F2  EC6B  F070         	call	_lcd_comand
  7627                           
  7628                           ;main.c: 85: LATBbits.LATB1 = 0;;
  7629  00E4F6  928A               	bcf	3978,1,c	;volatile
  7630                           
  7631                           ;main.c: 86: LATBbits.LATB0 = 0;;
  7632  00E4F8  908A               	bcf	3978,0,c	;volatile
  7633  00E4FA  0012               	return		;funcret
  7634  00E4FC                     __end_of_Setup:
  7635                           	opt stack 0
  7636                           tosu	equ	0xFFF
  7637                           tosh	equ	0xFFE
  7638                           tosl	equ	0xFFD
  7639                           pclath	equ	0xFFA
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           indf0	equ	0xFEF
  7647                           postinc0	equ	0xFEE
  7648                           fsr0h	equ	0xFEA
  7649                           fsr0l	equ	0xFE9
  7650                           wreg	equ	0xFE8
  7651                           indf1	equ	0xFE7
  7652                           postinc1	equ	0xFE6
  7653                           postdec1	equ	0xFE5
  7654                           fsr1h	equ	0xFE2
  7655                           fsr1l	equ	0xFE1
  7656                           indf2	equ	0xFDF
  7657                           postinc2	equ	0xFDE
  7658                           postdec2	equ	0xFDD
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _lcd_init *****************
  7664 ;; Defined at:
  7665 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  i               1    4[COMRAM] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;		None               void
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7683 ;;Total ram usage:        1 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    2
  7686 ;; This function calls:
  7687 ;;		_Delay1KTCYx
  7688 ;;		_lcd_send_byte
  7689 ;;		_lcd_send_nibble
  7690 ;; This function is called by:
  7691 ;;		_Setup
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text46
  7696  00E95A                     __ptext46:
  7697                           	opt stack 0
  7698  00E95A                     _lcd_init:
  7699                           	opt stack 27
  7700                           
  7701                           ;unmc_lcd_216.c: 120: int8 i;
  7702                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7703                           
  7704                           ;incstack = 0
  7705  00E95A  9693               	bcf	3987,3,c	;volatile
  7706                           
  7707                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7708  00E95C  9493               	bcf	3987,2,c	;volatile
  7709                           
  7710                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7711  00E95E  968A               	bcf	3978,3,c	;volatile
  7712                           
  7713                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7714  00E960  948A               	bcf	3978,2,c	;volatile
  7715                           
  7716                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7717  00E962  9893               	bcf	3987,4,c	;volatile
  7718                           
  7719                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7720  00E964  9A93               	bcf	3987,5,c	;volatile
  7721                           
  7722                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7723  00E966  9C93               	bcf	3987,6,c	;volatile
  7724                           
  7725                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7726  00E968  9E93               	bcf	3987,7,c	;volatile
  7727                           
  7728                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7729  00E96A  0E0A               	movlw	10
  7730  00E96C  EC84  F070         	call	_Delay1KTCYx
  7731                           
  7732                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7733  00E970  0E0A               	movlw	10
  7734  00E972  EC84  F070         	call	_Delay1KTCYx
  7735                           
  7736                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7737  00E976  0E0A               	movlw	10
  7738  00E978  EC84  F070         	call	_Delay1KTCYx
  7739                           
  7740                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7741  00E97C  0E00               	movlw	0
  7742  00E97E  6E05               	movwf	lcd_init@i,c
  7743  00E980                     l3562:
  7744  00E980  0E02               	movlw	2
  7745  00E982  6405               	cpfsgt	lcd_init@i,c
  7746  00E984  D001               	goto	l3566
  7747  00E986  D008               	goto	l3572
  7748  00E988                     l3566:
  7749                           
  7750                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7751  00E988  0E03               	movlw	3
  7752  00E98A  EC36  F074         	call	_lcd_send_nibble
  7753                           
  7754                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7755  00E98E  0E0A               	movlw	10
  7756  00E990  EC84  F070         	call	_Delay1KTCYx
  7757  00E994  2A05               	incf	lcd_init@i,f,c
  7758  00E996  D7F4               	goto	l3562
  7759  00E998                     l3572:
  7760                           
  7761                           ;unmc_lcd_216.c: 146: }
  7762                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7763  00E998  0E02               	movlw	2
  7764  00E99A  EC36  F074         	call	_lcd_send_nibble
  7765                           
  7766                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7767  00E99E  0E00               	movlw	0
  7768  00E9A0  6E05               	movwf	lcd_init@i,c
  7769  00E9A2  0E03               	movlw	3
  7770  00E9A4  6405               	cpfsgt	lcd_init@i,c
  7771  00E9A6  D002               	goto	l3580
  7772  00E9A8  0012               	return	
  7773  00E9AA  0012               	return	
  7774  00E9AC                     l3580:
  7775                           
  7776                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7777  00E9AC  5005               	movf	lcd_init@i,w,c
  7778  00E9AE  0D01               	mullw	1
  7779  00E9B0  0ECD               	movlw	low _LCD_INIT_STRING
  7780  00E9B2  24F3               	addwf	prodl,w,c
  7781  00E9B4  6EF6               	movwf	tblptrl,c
  7782  00E9B6  0EFE               	movlw	high _LCD_INIT_STRING
  7783  00E9B8  20F4               	addwfc	prodh,w,c
  7784  00E9BA  6EF7               	movwf	tblptrh,c
  7785  00E9BC                     	if	0	;There are less than 3 active tblptr bytes
  7786  00E9BC                     	endif
  7787  00E9BC  0008               	tblrd		*
  7788  00E9BE  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7789  00E9C2  0E00               	movlw	0
  7790  00E9C4  EC93  F071         	call	_lcd_send_byte
  7791                           
  7792                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7793  00E9C8  0E0A               	movlw	10
  7794  00E9CA  EC84  F070         	call	_Delay1KTCYx
  7795  00E9CE  2A05               	incf	lcd_init@i,f,c
  7796  00E9D0  0E03               	movlw	3
  7797  00E9D2  6405               	cpfsgt	lcd_init@i,c
  7798  00E9D4  D7EB               	goto	l3580
  7799  00E9D6  0012               	return	
  7800  00E9D8  0012               	return		;funcret
  7801  00E9DA                     __end_of_lcd_init:
  7802                           	opt stack 0
  7803                           tosu	equ	0xFFF
  7804                           tosh	equ	0xFFE
  7805                           tosl	equ	0xFFD
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           indf0	equ	0xFEF
  7814                           postinc0	equ	0xFEE
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           indf1	equ	0xFE7
  7819                           postinc1	equ	0xFE6
  7820                           postdec1	equ	0xFE5
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _Delay1KTCYx *****************
  7831 ;; Defined at:
  7832 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  unit            1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  unit            1    0[COMRAM] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;		None               void
  7839 ;; Registers used:
  7840 ;;		wreg
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;Total ram usage:        1 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_lcd_init
  7856 ;;		_DelayPORXLCD
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text47
  7861  00E108                     __ptext47:
  7862                           	opt stack 0
  7863  00E108                     _Delay1KTCYx:
  7864                           	opt stack 28
  7865                           
  7866                           ;incstack = 0
  7867                           ;Delay1KTCYx@unit stored from wreg
  7868  00E108  6E01               	movwf	Delay1KTCYx@unit,c
  7869  00E10A  0EFA               	movlw	250
  7870  00E10C                     u3367:
  7871  00E10C  F000               	nop	
  7872  00E10E  2EE8               	decfsz	wreg,f,c
  7873  00E110  D7FD               	goto	u3367
  7874  00E112  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7875  00E114  D7FA               	goto	l3402
  7876  00E116  0012               	return	
  7877  00E118  0012               	return		;funcret
  7878  00E11A                     __end_of_Delay1KTCYx:
  7879                           	opt stack 0
  7880                           tosu	equ	0xFFF
  7881                           tosh	equ	0xFFE
  7882                           tosl	equ	0xFFD
  7883                           pclath	equ	0xFFA
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           indf0	equ	0xFEF
  7891                           postinc0	equ	0xFEE
  7892                           fsr0h	equ	0xFEA
  7893                           fsr0l	equ	0xFE9
  7894                           wreg	equ	0xFE8
  7895                           indf1	equ	0xFE7
  7896                           postinc1	equ	0xFE6
  7897                           postdec1	equ	0xFE5
  7898                           fsr1h	equ	0xFE2
  7899                           fsr1l	equ	0xFE1
  7900                           indf2	equ	0xFDF
  7901                           postinc2	equ	0xFDE
  7902                           postdec2	equ	0xFDD
  7903                           fsr2h	equ	0xFDA
  7904                           fsr2l	equ	0xFD9
  7905                           status	equ	0xFD8
  7906                           
  7907 ;; *************** function _lcd_comand *****************
  7908 ;; Defined at:
  7909 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  d               1    wreg     unsigned char 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  d               1    4[COMRAM] unsigned char 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;		None               void
  7916 ;; Registers used:
  7917 ;;		wreg, status,2, status,0, cstack
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7927 ;;Total ram usage:        1 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    2
  7930 ;; This function calls:
  7931 ;;		_lcd_send_byte
  7932 ;; This function is called by:
  7933 ;;		_caratula
  7934 ;;		_Setup
  7935 ;;		_ingresar_password
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text48
  7940  00E0D6                     __ptext48:
  7941                           	opt stack 0
  7942  00E0D6                     _lcd_comand:
  7943                           	opt stack 27
  7944                           
  7945                           ;incstack = 0
  7946                           ;lcd_comand@d stored from wreg
  7947  00E0D6  6E05               	movwf	lcd_comand@d,c
  7948                           
  7949                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7950  00E0D8  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7951  00E0DC  0E00               	movlw	0
  7952  00E0DE  EC93  F071         	call	_lcd_send_byte
  7953  00E0E2  0012               	return		;funcret
  7954  00E0E4                     __end_of_lcd_comand:
  7955                           	opt stack 0
  7956                           tosu	equ	0xFFF
  7957                           tosh	equ	0xFFE
  7958                           tosl	equ	0xFFD
  7959                           pclath	equ	0xFFA
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           indf0	equ	0xFEF
  7967                           postinc0	equ	0xFEE
  7968                           fsr0h	equ	0xFEA
  7969                           fsr0l	equ	0xFE9
  7970                           wreg	equ	0xFE8
  7971                           indf1	equ	0xFE7
  7972                           postinc1	equ	0xFE6
  7973                           postdec1	equ	0xFE5
  7974                           fsr1h	equ	0xFE2
  7975                           fsr1l	equ	0xFE1
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function _lcd_send_byte *****************
  7984 ;; Defined at:
  7985 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  address         1    wreg     unsigned char 
  7988 ;;  n               1    2[COMRAM] unsigned char 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  address         1    3[COMRAM] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;		None               void
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8000 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8004 ;;Total ram usage:        2 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    1
  8007 ;; This function calls:
  8008 ;;		_Delay100TCYx
  8009 ;;		_lcd_send_nibble
  8010 ;; This function is called by:
  8011 ;;		_lcd_init
  8012 ;;		_lcd_gotoxy
  8013 ;;		_lcd_putc
  8014 ;;		_lcd_comand
  8015 ;;		_lcd_setcursor_vb
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text49
  8020  00E326                     __ptext49:
  8021                           	opt stack 0
  8022  00E326                     _lcd_send_byte:
  8023                           	opt stack 24
  8024                           
  8025                           ;incstack = 0
  8026                           ;lcd_send_byte@address stored from wreg
  8027  00E326  6E04               	movwf	lcd_send_byte@address,c
  8028                           
  8029                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  8030  00E328  968A               	bcf	3978,3,c	;volatile
  8031                           
  8032                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  8033  00E32A  0E02               	movlw	2
  8034  00E32C  EC7B  F070         	call	_Delay100TCYx
  8035                           
  8036                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  8037  00E330  9893               	bcf	3987,4,c	;volatile
  8038                           
  8039                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  8040  00E332  9A93               	bcf	3987,5,c	;volatile
  8041                           
  8042                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  8043  00E334  9C93               	bcf	3987,6,c	;volatile
  8044                           
  8045                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  8046  00E336  9E93               	bcf	3987,7,c	;volatile
  8047                           
  8048                           ;unmc_lcd_216.c: 101: if(address)
  8049  00E338  5004               	movf	lcd_send_byte@address,w,c
  8050  00E33A  B4D8               	btfsc	status,2,c
  8051  00E33C  D002               	goto	l283
  8052                           
  8053                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  8054  00E33E  868A               	bsf	3978,3,c	;volatile
  8055  00E340  D001               	goto	l284
  8056  00E342                     l283:
  8057                           
  8058                           ;unmc_lcd_216.c: 103: else
  8059                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  8060  00E342  968A               	bcf	3978,3,c	;volatile
  8061  00E344                     l284:
  8062                           
  8063                           ;unmc_lcd_216.c: 106: __nop();
  8064  00E344  F000               	nop	
  8065                           
  8066                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  8067  00E346  3803               	swapf	lcd_send_byte@n,w,c
  8068  00E348  0B0F               	andlw	15
  8069  00E34A  EC36  F074         	call	_lcd_send_nibble
  8070                           
  8071                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  8072  00E34E  5003               	movf	lcd_send_byte@n,w,c
  8073  00E350  0B0F               	andlw	15
  8074  00E352  EC36  F074         	call	_lcd_send_nibble
  8075  00E356  0012               	return		;funcret
  8076  00E358                     __end_of_lcd_send_byte:
  8077                           	opt stack 0
  8078                           tosu	equ	0xFFF
  8079                           tosh	equ	0xFFE
  8080                           tosl	equ	0xFFD
  8081                           pclath	equ	0xFFA
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           indf0	equ	0xFEF
  8089                           postinc0	equ	0xFEE
  8090                           fsr0h	equ	0xFEA
  8091                           fsr0l	equ	0xFE9
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           postinc1	equ	0xFE6
  8095                           postdec1	equ	0xFE5
  8096                           fsr1h	equ	0xFE2
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           postdec2	equ	0xFDD
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _lcd_send_nibble *****************
  8106 ;; Defined at:
  8107 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;  nibble          1    wreg     unsigned char 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  nibble          1    1[COMRAM] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;		None               void
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8123 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8125 ;;Total ram usage:        2 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_lcd_send_byte
  8131 ;;		_lcd_init
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text50
  8136  00E86C                     __ptext50:
  8137                           	opt stack 0
  8138  00E86C                     _lcd_send_nibble:
  8139                           	opt stack 24
  8140                           
  8141                           ;incstack = 0
  8142                           ;lcd_send_nibble@nibble stored from wreg
  8143  00E86C  6E02               	movwf	lcd_send_nibble@nibble,c
  8144                           
  8145                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  8146  00E86E  A002               	btfss	lcd_send_nibble@nibble,0,c
  8147  00E870  D003               	goto	u1650
  8148  00E872  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8149  00E874  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8150  00E876  D001               	goto	u1668
  8151  00E878                     u1650:
  8152  00E878  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8153  00E87A                     u1668:
  8154  00E87A  3A01               	swapf	??_lcd_send_nibble,f,c
  8155  00E87C  508A               	movf	3978,w,c	;volatile
  8156  00E87E  1801               	xorwf	??_lcd_send_nibble,w,c
  8157  00E880  0BEF               	andlw	-17
  8158  00E882  1801               	xorwf	??_lcd_send_nibble,w,c
  8159  00E884  6E8A               	movwf	3978,c	;volatile
  8160                           
  8161                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  8162  00E886  A202               	btfss	lcd_send_nibble@nibble,1,c
  8163  00E888  D003               	goto	u1670
  8164  00E88A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8165  00E88C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8166  00E88E  D001               	goto	u1688
  8167  00E890                     u1670:
  8168  00E890  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8169  00E892                     u1688:
  8170  00E892  3A01               	swapf	??_lcd_send_nibble,f,c
  8171  00E894  4601               	rlncf	??_lcd_send_nibble,f,c
  8172  00E896  508A               	movf	3978,w,c	;volatile
  8173  00E898  1801               	xorwf	??_lcd_send_nibble,w,c
  8174  00E89A  0BDF               	andlw	-33
  8175  00E89C  1801               	xorwf	??_lcd_send_nibble,w,c
  8176  00E89E  6E8A               	movwf	3978,c	;volatile
  8177                           
  8178                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  8179  00E8A0  A402               	btfss	lcd_send_nibble@nibble,2,c
  8180  00E8A2  D003               	goto	u1690
  8181  00E8A4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8182  00E8A6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8183  00E8A8  D001               	goto	u1708
  8184  00E8AA                     u1690:
  8185  00E8AA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8186  00E8AC                     u1708:
  8187  00E8AC  3A01               	swapf	??_lcd_send_nibble,f,c
  8188  00E8AE  4601               	rlncf	??_lcd_send_nibble,f,c
  8189  00E8B0  4601               	rlncf	??_lcd_send_nibble,f,c
  8190  00E8B2  508A               	movf	3978,w,c	;volatile
  8191  00E8B4  1801               	xorwf	??_lcd_send_nibble,w,c
  8192  00E8B6  0BBF               	andlw	-65
  8193  00E8B8  1801               	xorwf	??_lcd_send_nibble,w,c
  8194  00E8BA  6E8A               	movwf	3978,c	;volatile
  8195                           
  8196                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  8197  00E8BC  A602               	btfss	lcd_send_nibble@nibble,3,c
  8198  00E8BE  D003               	goto	u1710
  8199  00E8C0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8200  00E8C2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8201  00E8C4  D001               	goto	u1728
  8202  00E8C6                     u1710:
  8203  00E8C6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8204  00E8C8                     u1728:
  8205  00E8C8  3201               	rrcf	??_lcd_send_nibble,f,c
  8206  00E8CA  3201               	rrcf	??_lcd_send_nibble,f,c
  8207  00E8CC  508A               	movf	3978,w,c	;volatile
  8208  00E8CE  1801               	xorwf	??_lcd_send_nibble,w,c
  8209  00E8D0  0B7F               	andlw	-129
  8210  00E8D2  1801               	xorwf	??_lcd_send_nibble,w,c
  8211  00E8D4  6E8A               	movwf	3978,c	;volatile
  8212                           
  8213                           ;unmc_lcd_216.c: 32: __nop();
  8214  00E8D6  F000               	nop	
  8215                           
  8216                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  8217  00E8D8  848A               	bsf	3978,2,c	;volatile
  8218                           
  8219                           ;unmc_lcd_216.c: 34: __nop();__nop();
  8220  00E8DA  F000               	nop	
  8221  00E8DC  F000               	nop	
  8222                           
  8223                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  8224  00E8DE  948A               	bcf	3978,2,c	;volatile
  8225  00E8E0  0012               	return		;funcret
  8226  00E8E2                     __end_of_lcd_send_nibble:
  8227                           	opt stack 0
  8228                           tosu	equ	0xFFF
  8229                           tosh	equ	0xFFE
  8230                           tosl	equ	0xFFD
  8231                           pclath	equ	0xFFA
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           indf0	equ	0xFEF
  8239                           postinc0	equ	0xFEE
  8240                           fsr0h	equ	0xFEA
  8241                           fsr0l	equ	0xFE9
  8242                           wreg	equ	0xFE8
  8243                           indf1	equ	0xFE7
  8244                           postinc1	equ	0xFE6
  8245                           postdec1	equ	0xFE5
  8246                           fsr1h	equ	0xFE2
  8247                           fsr1l	equ	0xFE1
  8248                           indf2	equ	0xFDF
  8249                           postinc2	equ	0xFDE
  8250                           postdec2	equ	0xFDD
  8251                           fsr2h	equ	0xFDA
  8252                           fsr2l	equ	0xFD9
  8253                           status	equ	0xFD8
  8254                           
  8255 ;; *************** function _Delay100TCYx *****************
  8256 ;; Defined at:
  8257 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  8258 ;; Parameters:    Size  Location     Type
  8259 ;;  unit            1    wreg     unsigned char 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  unit            1    0[COMRAM] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;		None               void
  8264 ;; Registers used:
  8265 ;;		wreg
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8275 ;;Total ram usage:        1 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_lcd_send_byte
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text51
  8285  00E0F6                     __ptext51:
  8286                           	opt stack 0
  8287  00E0F6                     _Delay100TCYx:
  8288                           	opt stack 24
  8289                           
  8290                           ;incstack = 0
  8291                           ;Delay100TCYx@unit stored from wreg
  8292  00E0F6  6E01               	movwf	Delay100TCYx@unit,c
  8293  00E0F8  0E21               	movlw	33
  8294  00E0FA                     u3377:
  8295  00E0FA  2EE8               	decfsz	wreg,f,c
  8296  00E0FC  D7FE               	goto	u3377
  8297  00E0FE  F000               	nop	
  8298  00E100  2E01               	decfsz	Delay100TCYx@unit,f,c
  8299  00E102  D7FA               	goto	l2852
  8300  00E104  0012               	return	
  8301  00E106  0012               	return		;funcret
  8302  00E108                     __end_of_Delay100TCYx:
  8303                           	opt stack 0
  8304                           tosu	equ	0xFFF
  8305                           tosh	equ	0xFFE
  8306                           tosl	equ	0xFFD
  8307                           pclath	equ	0xFFA
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           indf0	equ	0xFEF
  8315                           postinc0	equ	0xFEE
  8316                           fsr0h	equ	0xFEA
  8317                           fsr0l	equ	0xFE9
  8318                           wreg	equ	0xFE8
  8319                           indf1	equ	0xFE7
  8320                           postinc1	equ	0xFE6
  8321                           postdec1	equ	0xFE5
  8322                           fsr1h	equ	0xFE2
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           
  8331 ;; *************** function _Write_RTC *****************
  8332 ;; Defined at:
  8333 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;		None
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8351 ;;Total ram usage:        0 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    2
  8354 ;; This function calls:
  8355 ;;		_RtccWrOn
  8356 ;;		_RtccWriteDate
  8357 ;;		_RtccWriteTime
  8358 ;;		___awdiv
  8359 ;; This function is called by:
  8360 ;;		_Setup
  8361 ;;		_cambiar_dia
  8362 ;;		_cambiar_mes
  8363 ;;		_cambiar_anio
  8364 ;;		_cambiar_hora
  8365 ;;		_cambiar_minutos
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text52
  8370  00FACE                     __ptext52:
  8371                           	opt stack 0
  8372  00FACE                     _Write_RTC:
  8373                           	opt stack 25
  8374                           
  8375                           ;unmc_rtcc_02.c: 37: RtccWrOn();
  8376                           
  8377                           ;incstack = 0
  8378  00FACE  EC72  F070         	call	_RtccWrOn	;wreg free
  8379                           
  8380                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
  8381  00FAD2  80A3               	bsf	4003,0,c	;volatile
  8382                           
  8383                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
  8384  00FAD4  C0A3  F001         	movff	_segundo,___awdiv@dividend
  8385  00FAD8  C0A4  F002         	movff	_segundo+1,___awdiv@dividend+1
  8386  00FADC  0E00               	movlw	0
  8387  00FADE  6E04               	movwf	___awdiv@divisor+1,c
  8388  00FAE0  0E0A               	movlw	10
  8389  00FAE2  6E03               	movwf	___awdiv@divisor,c
  8390  00FAE4  EC4A  F076         	call	___awdiv	;wreg free
  8391  00FAE8  5001               	movf	?___awdiv,w,c
  8392  00FAEA  6E5E               	movwf	_segundo_d,c
  8393                           
  8394                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
  8395  00FAEC  505E               	movf	_segundo_d,w,c
  8396  00FAEE  0D0A               	mullw	10
  8397  00FAF0  50F3               	movf	prodl,w,c
  8398  00FAF2  0800               	sublw	0
  8399  00FAF4  0100               	movlb	0	; () banked
  8400  00FAF6  25A3               	addwf	_segundo& (0+255),w,b
  8401  00FAF8  0100               	movlb	0	; () banked
  8402  00FAFA  6FF1               	movwf	_segundo_u& (0+255),b
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
  8406  00FAFC  505E               	movf	_segundo_d,w,c
  8407  00FAFE  0D10               	mullw	16
  8408  00FB00  50F3               	movf	prodl,w,c
  8409  00FB02  0100               	movlb	0	; () banked
  8410  00FB04  25F1               	addwf	_segundo_u& (0+255),w,b
  8411  00FB06  0100               	movlb	0	; () banked
  8412  00FB08  6FBC               	movwf	(_RtccTime+1)& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
  8416  00FB0A  C0E4  F001         	movff	_minuto,___awdiv@dividend
  8417  00FB0E  C0E5  F002         	movff	_minuto+1,___awdiv@dividend+1
  8418  00FB12  0E00               	movlw	0
  8419  00FB14  6E04               	movwf	___awdiv@divisor+1,c
  8420  00FB16  0E0A               	movlw	10
  8421  00FB18  6E03               	movwf	___awdiv@divisor,c
  8422  00FB1A  EC4A  F076         	call	___awdiv	;wreg free
  8423  00FB1E  5001               	movf	?___awdiv,w,c
  8424  00FB20  0100               	movlb	0	; () banked
  8425  00FB22  6FEF               	movwf	_minuto_d& (0+255),b
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
  8429  00FB24  0100               	movlb	0	; () banked
  8430  00FB26  51EF               	movf	_minuto_d& (0+255),w,b
  8431  00FB28  0D0A               	mullw	10
  8432  00FB2A  50F3               	movf	prodl,w,c
  8433  00FB2C  0800               	sublw	0
  8434  00FB2E  0100               	movlb	0	; () banked
  8435  00FB30  25E4               	addwf	_minuto& (0+255),w,b
  8436  00FB32  0100               	movlb	0	; () banked
  8437  00FB34  6FF0               	movwf	_minuto_u& (0+255),b
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
  8441  00FB36  0100               	movlb	0	; () banked
  8442  00FB38  51EF               	movf	_minuto_d& (0+255),w,b
  8443  00FB3A  0D10               	mullw	16
  8444  00FB3C  50F3               	movf	prodl,w,c
  8445  00FB3E  0100               	movlb	0	; () banked
  8446  00FB40  25F0               	addwf	_minuto_u& (0+255),w,b
  8447  00FB42  0100               	movlb	0	; () banked
  8448  00FB44  6FBD               	movwf	(_RtccTime+2)& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
  8452  00FB46  C0E0  F001         	movff	_hora,___awdiv@dividend
  8453  00FB4A  C0E1  F002         	movff	_hora+1,___awdiv@dividend+1
  8454  00FB4E  0E00               	movlw	0
  8455  00FB50  6E04               	movwf	___awdiv@divisor+1,c
  8456  00FB52  0E0A               	movlw	10
  8457  00FB54  6E03               	movwf	___awdiv@divisor,c
  8458  00FB56  EC4A  F076         	call	___awdiv	;wreg free
  8459  00FB5A  5001               	movf	?___awdiv,w,c
  8460  00FB5C  0100               	movlb	0	; () banked
  8461  00FB5E  6FEB               	movwf	_hora_d& (0+255),b
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
  8465  00FB60  0100               	movlb	0	; () banked
  8466  00FB62  51EB               	movf	_hora_d& (0+255),w,b
  8467  00FB64  0D0A               	mullw	10
  8468  00FB66  50F3               	movf	prodl,w,c
  8469  00FB68  0800               	sublw	0
  8470  00FB6A  0100               	movlb	0	; () banked
  8471  00FB6C  25E0               	addwf	_hora& (0+255),w,b
  8472  00FB6E  0100               	movlb	0	; () banked
  8473  00FB70  6FEC               	movwf	_hora_u& (0+255),b
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
  8477  00FB72  0100               	movlb	0	; () banked
  8478  00FB74  51EB               	movf	_hora_d& (0+255),w,b
  8479  00FB76  0D10               	mullw	16
  8480  00FB78  50F3               	movf	prodl,w,c
  8481  00FB7A  0100               	movlb	0	; () banked
  8482  00FB7C  25EC               	addwf	_hora_u& (0+255),w,b
  8483  00FB7E  0100               	movlb	0	; () banked
  8484  00FB80  6FBE               	movwf	(_RtccTime+3)& (0+255),b
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
  8488  00FB82  C0DA  F001         	movff	_anio,___awdiv@dividend
  8489  00FB86  C0DB  F002         	movff	_anio+1,___awdiv@dividend+1
  8490  00FB8A  0E00               	movlw	0
  8491  00FB8C  6E04               	movwf	___awdiv@divisor+1,c
  8492  00FB8E  0E0A               	movlw	10
  8493  00FB90  6E03               	movwf	___awdiv@divisor,c
  8494  00FB92  EC4A  F076         	call	___awdiv	;wreg free
  8495  00FB96  5001               	movf	?___awdiv,w,c
  8496  00FB98  0100               	movlb	0	; () banked
  8497  00FB9A  6FE6               	movwf	_anio_d& (0+255),b
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
  8501  00FB9C  0100               	movlb	0	; () banked
  8502  00FB9E  51E6               	movf	_anio_d& (0+255),w,b
  8503  00FBA0  0D0A               	mullw	10
  8504  00FBA2  50F3               	movf	prodl,w,c
  8505  00FBA4  0800               	sublw	0
  8506  00FBA6  0100               	movlb	0	; () banked
  8507  00FBA8  25DA               	addwf	_anio& (0+255),w,b
  8508  00FBAA  0100               	movlb	0	; () banked
  8509  00FBAC  6FE7               	movwf	_anio_u& (0+255),b
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
  8513  00FBAE  0100               	movlb	0	; () banked
  8514  00FBB0  51E6               	movf	_anio_d& (0+255),w,b
  8515  00FBB2  0D10               	mullw	16
  8516  00FBB4  50F3               	movf	prodl,w,c
  8517  00FBB6  0100               	movlb	0	; () banked
  8518  00FBB8  25E7               	addwf	_anio_u& (0+255),w,b
  8519  00FBBA  6E53               	movwf	_RtccDate+3,c
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
  8523  00FBBC  C0E2  F001         	movff	_mes,___awdiv@dividend
  8524  00FBC0  C0E3  F002         	movff	_mes+1,___awdiv@dividend+1
  8525  00FBC4  0E00               	movlw	0
  8526  00FBC6  6E04               	movwf	___awdiv@divisor+1,c
  8527  00FBC8  0E0A               	movlw	10
  8528  00FBCA  6E03               	movwf	___awdiv@divisor,c
  8529  00FBCC  EC4A  F076         	call	___awdiv	;wreg free
  8530  00FBD0  5001               	movf	?___awdiv,w,c
  8531  00FBD2  0100               	movlb	0	; () banked
  8532  00FBD4  6FED               	movwf	_mes_d& (0+255),b
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
  8536  00FBD6  0100               	movlb	0	; () banked
  8537  00FBD8  51ED               	movf	_mes_d& (0+255),w,b
  8538  00FBDA  0D0A               	mullw	10
  8539  00FBDC  50F3               	movf	prodl,w,c
  8540  00FBDE  0800               	sublw	0
  8541  00FBE0  0100               	movlb	0	; () banked
  8542  00FBE2  25E2               	addwf	_mes& (0+255),w,b
  8543  00FBE4  0100               	movlb	0	; () banked
  8544  00FBE6  6FEE               	movwf	_mes_u& (0+255),b
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
  8548  00FBE8  0100               	movlb	0	; () banked
  8549  00FBEA  51ED               	movf	_mes_d& (0+255),w,b
  8550  00FBEC  0D10               	mullw	16
  8551  00FBEE  50F3               	movf	prodl,w,c
  8552  00FBF0  0100               	movlb	0	; () banked
  8553  00FBF2  25EE               	addwf	_mes_u& (0+255),w,b
  8554  00FBF4  6E52               	movwf	_RtccDate+2,c
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
  8558  00FBF6  C0DC  F001         	movff	_dia,___awdiv@dividend
  8559  00FBFA  C0DD  F002         	movff	_dia+1,___awdiv@dividend+1
  8560  00FBFE  0E00               	movlw	0
  8561  00FC00  6E04               	movwf	___awdiv@divisor+1,c
  8562  00FC02  0E0A               	movlw	10
  8563  00FC04  6E03               	movwf	___awdiv@divisor,c
  8564  00FC06  EC4A  F076         	call	___awdiv	;wreg free
  8565  00FC0A  5001               	movf	?___awdiv,w,c
  8566  00FC0C  0100               	movlb	0	; () banked
  8567  00FC0E  6FE9               	movwf	_fecha_d& (0+255),b
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
  8571  00FC10  0100               	movlb	0	; () banked
  8572  00FC12  51E9               	movf	_fecha_d& (0+255),w,b
  8573  00FC14  0D0A               	mullw	10
  8574  00FC16  50F3               	movf	prodl,w,c
  8575  00FC18  0800               	sublw	0
  8576  00FC1A  0100               	movlb	0	; () banked
  8577  00FC1C  25DC               	addwf	_dia& (0+255),w,b
  8578  00FC1E  0100               	movlb	0	; () banked
  8579  00FC20  6FEA               	movwf	_fecha_u& (0+255),b
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
  8583  00FC22  0100               	movlb	0	; () banked
  8584  00FC24  51E9               	movf	_fecha_d& (0+255),w,b
  8585  00FC26  0D10               	mullw	16
  8586  00FC28  50F3               	movf	prodl,w,c
  8587  00FC2A  0100               	movlb	0	; () banked
  8588  00FC2C  25EA               	addwf	_fecha_u& (0+255),w,b
  8589  00FC2E  6E51               	movwf	_RtccDate+1,c
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
  8593  00FC30  C0DE  F0E8         	movff	_diasem,_dia_semana
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
  8597  00FC34  C0DE  F050         	movff	_diasem,_RtccDate
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
  8601  00FC38  0EBB               	movlw	low _RtccTime
  8602  00FC3A  6E01               	movwf	RtccWriteTime@pTm,c
  8603  00FC3C  0E00               	movlw	high _RtccTime
  8604  00FC3E  6E02               	movwf	RtccWriteTime@pTm+1,c
  8605  00FC40  0E01               	movlw	1
  8606  00FC42  6E03               	movwf	RtccWriteTime@di,c
  8607  00FC44  EC0B  F07B         	call	_RtccWriteTime	;wreg free
  8608                           
  8609                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
  8610  00FC48  0E50               	movlw	low _RtccDate
  8611  00FC4A  6E01               	movwf	RtccWriteDate@pDt,c
  8612  00FC4C  0E00               	movlw	high _RtccDate
  8613  00FC4E  6E02               	movwf	RtccWriteDate@pDt+1,c
  8614  00FC50  0E01               	movlw	1
  8615  00FC52  6E03               	movwf	RtccWriteDate@di,c
  8616  00FC54  ECC4  F07C         	call	_RtccWriteDate	;wreg free
  8617                           
  8618                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
  8619  00FC58  010F               	movlb	15	; () banked
  8620  00FC5A  8F3F               	bsf	63,7,b	;volatile
  8621                           
  8622                           ; BSR set to: 15
  8623  00FC5C  0012               	return		;funcret
  8624  00FC5E                     __end_of_Write_RTC:
  8625                           	opt stack 0
  8626                           tosu	equ	0xFFF
  8627                           tosh	equ	0xFFE
  8628                           tosl	equ	0xFFD
  8629                           pclath	equ	0xFFA
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           indf0	equ	0xFEF
  8637                           postinc0	equ	0xFEE
  8638                           fsr0h	equ	0xFEA
  8639                           fsr0l	equ	0xFE9
  8640                           wreg	equ	0xFE8
  8641                           indf1	equ	0xFE7
  8642                           postinc1	equ	0xFE6
  8643                           postdec1	equ	0xFE5
  8644                           fsr1h	equ	0xFE2
  8645                           fsr1l	equ	0xFE1
  8646                           indf2	equ	0xFDF
  8647                           postinc2	equ	0xFDE
  8648                           postdec2	equ	0xFDD
  8649                           fsr2h	equ	0xFDA
  8650                           fsr2l	equ	0xFD9
  8651                           status	equ	0xFD8
  8652                           
  8653 ;; *************** function ___awdiv *****************
  8654 ;; Defined at:
  8655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  dividend        2    0[COMRAM] int 
  8658 ;;  divisor         2    2[COMRAM] int 
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  quotient        2    6[COMRAM] int 
  8661 ;;  sign            1    5[COMRAM] unsigned char 
  8662 ;;  counter         1    4[COMRAM] unsigned char 
  8663 ;; Return value:  Size  Location     Type
  8664 ;;                  2    0[COMRAM] int 
  8665 ;; Registers used:
  8666 ;;		wreg, status,2, status,0
  8667 ;; Tracked objects:
  8668 ;;		On entry : 0/0
  8669 ;;		On exit  : 0/0
  8670 ;;		Unchanged: 0/0
  8671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8673 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8676 ;;Total ram usage:        8 bytes
  8677 ;; Hardware stack levels used:    1
  8678 ;; This function calls:
  8679 ;;		Nothing
  8680 ;; This function is called by:
  8681 ;;		_Write_RTC
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           	psect	text53
  8686  00EC94                     __ptext53:
  8687                           	opt stack 0
  8688  00EC94                     ___awdiv:
  8689                           	opt stack 26
  8690                           
  8691                           ; BSR set to: 15
  8692                           ;incstack = 0
  8693  00EC94  0E00               	movlw	0
  8694  00EC96  6E06               	movwf	___awdiv@sign,c
  8695  00EC98  AE04               	btfss	___awdiv@divisor+1,7,c
  8696  00EC9A  D007               	goto	l3232
  8697  00EC9C  6C03               	negf	___awdiv@divisor,c
  8698  00EC9E  1E04               	comf	___awdiv@divisor+1,f,c
  8699  00ECA0  B0D8               	btfsc	status,0,c
  8700  00ECA2  2A04               	incf	___awdiv@divisor+1,f,c
  8701  00ECA4  0E01               	movlw	1
  8702  00ECA6  6E06               	movwf	___awdiv@sign,c
  8703  00ECA8  D000               	goto	l3232
  8704  00ECAA                     l3232:
  8705  00ECAA  AE02               	btfss	___awdiv@dividend+1,7,c
  8706  00ECAC  D007               	goto	l3238
  8707  00ECAE  6C01               	negf	___awdiv@dividend,c
  8708  00ECB0  1E02               	comf	___awdiv@dividend+1,f,c
  8709  00ECB2  B0D8               	btfsc	status,0,c
  8710  00ECB4  2A02               	incf	___awdiv@dividend+1,f,c
  8711  00ECB6  0E01               	movlw	1
  8712  00ECB8  1A06               	xorwf	___awdiv@sign,f,c
  8713  00ECBA  D000               	goto	l3238
  8714  00ECBC                     l3238:
  8715  00ECBC  0E00               	movlw	0
  8716  00ECBE  6E08               	movwf	___awdiv@quotient+1,c
  8717  00ECC0  0E00               	movlw	0
  8718  00ECC2  6E07               	movwf	___awdiv@quotient,c
  8719  00ECC4  5003               	movf	___awdiv@divisor,w,c
  8720  00ECC6  1004               	iorwf	___awdiv@divisor+1,w,c
  8721  00ECC8  B4D8               	btfsc	status,2,c
  8722  00ECCA  D021               	goto	l3260
  8723  00ECCC  0E01               	movlw	1
  8724  00ECCE  6E05               	movwf	___awdiv@counter,c
  8725  00ECD0  D005               	goto	l3246
  8726  00ECD2                     l3244:
  8727  00ECD2  90D8               	bcf	status,0,c
  8728  00ECD4  3603               	rlcf	___awdiv@divisor,f,c
  8729  00ECD6  3604               	rlcf	___awdiv@divisor+1,f,c
  8730  00ECD8  2A05               	incf	___awdiv@counter,f,c
  8731  00ECDA  D000               	goto	l3246
  8732  00ECDC                     l3246:
  8733  00ECDC  BE04               	btfsc	___awdiv@divisor+1,7,c
  8734  00ECDE  D002               	goto	l3248
  8735  00ECE0  D7F8               	goto	l3244
  8736  00ECE2  D000               	goto	l3248
  8737  00ECE4                     l3248:
  8738  00ECE4  90D8               	bcf	status,0,c
  8739  00ECE6  3607               	rlcf	___awdiv@quotient,f,c
  8740  00ECE8  3608               	rlcf	___awdiv@quotient+1,f,c
  8741  00ECEA  5003               	movf	___awdiv@divisor,w,c
  8742  00ECEC  5C01               	subwf	___awdiv@dividend,w,c
  8743  00ECEE  5004               	movf	___awdiv@divisor+1,w,c
  8744  00ECF0  5802               	subwfb	___awdiv@dividend+1,w,c
  8745  00ECF2  A0D8               	btfss	status,0,c
  8746  00ECF4  D006               	goto	l3256
  8747  00ECF6  5003               	movf	___awdiv@divisor,w,c
  8748  00ECF8  5E01               	subwf	___awdiv@dividend,f,c
  8749  00ECFA  5004               	movf	___awdiv@divisor+1,w,c
  8750  00ECFC  5A02               	subwfb	___awdiv@dividend+1,f,c
  8751  00ECFE  8007               	bsf	___awdiv@quotient,0,c
  8752  00ED00  D000               	goto	l3256
  8753  00ED02                     l3256:
  8754  00ED02  90D8               	bcf	status,0,c
  8755  00ED04  3204               	rrcf	___awdiv@divisor+1,f,c
  8756  00ED06  3203               	rrcf	___awdiv@divisor,f,c
  8757  00ED08  2E05               	decfsz	___awdiv@counter,f,c
  8758  00ED0A  D7EC               	goto	l3248
  8759  00ED0C  D000               	goto	l3260
  8760  00ED0E                     l3260:
  8761  00ED0E  5006               	movf	___awdiv@sign,w,c
  8762  00ED10  B4D8               	btfsc	status,2,c
  8763  00ED12  D005               	goto	l3264
  8764  00ED14  6C07               	negf	___awdiv@quotient,c
  8765  00ED16  1E08               	comf	___awdiv@quotient+1,f,c
  8766  00ED18  B0D8               	btfsc	status,0,c
  8767  00ED1A  2A08               	incf	___awdiv@quotient+1,f,c
  8768  00ED1C  D000               	goto	l3264
  8769  00ED1E                     l3264:
  8770  00ED1E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8771  00ED22  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8772  00ED26  0012               	return	
  8773  00ED28  0012               	return		;funcret
  8774  00ED2A                     __end_of___awdiv:
  8775                           	opt stack 0
  8776                           tosu	equ	0xFFF
  8777                           tosh	equ	0xFFE
  8778                           tosl	equ	0xFFD
  8779                           pclath	equ	0xFFA
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           indf0	equ	0xFEF
  8787                           postinc0	equ	0xFEE
  8788                           fsr0h	equ	0xFEA
  8789                           fsr0l	equ	0xFE9
  8790                           wreg	equ	0xFE8
  8791                           indf1	equ	0xFE7
  8792                           postinc1	equ	0xFE6
  8793                           postdec1	equ	0xFE5
  8794                           fsr1h	equ	0xFE2
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _RtccWriteTime *****************
  8804 ;; Defined at:
  8805 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  pTm             2    0[COMRAM] PTR const struct .
  8808 ;;		 -> RtccTime(4), 
  8809 ;;  di              1    2[COMRAM] enum E7121
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;  tempHourWDay    2    9[COMRAM] struct .
  8812 ;;  tempMinSec      2    7[COMRAM] struct .
  8813 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8814 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8815 ;;  wasOn           1    4[COMRAM] enum E7121
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  1    wreg      enum E7121
  8818 ;; Registers used:
  8819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8825 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8826 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8828 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8829 ;;Total ram usage:       11 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    1
  8832 ;; This function calls:
  8833 ;;		_RtccWrOn
  8834 ;; This function is called by:
  8835 ;;		_Write_RTC
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text54
  8840  00F616                     __ptext54:
  8841                           	opt stack 0
  8842  00F616                     _RtccWriteTime:
  8843                           	opt stack 25
  8844                           
  8845                           ;incstack = 0
  8846  00F616  0E00               	movlw	0
  8847  00F618  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8848  00F61A  EE20 F002          	lfsr	2,2
  8849  00F61E  5001               	movf	RtccWriteTime@pTm,w,c
  8850  00F620  26D9               	addwf	fsr2l,f,c
  8851  00F622  5002               	movf	RtccWriteTime@pTm+1,w,c
  8852  00F624  22DA               	addwfc	fsr2h,f,c
  8853  00F626  0E5A               	movlw	90
  8854  00F628  60DF               	cpfslt	indf2,c
  8855  00F62A  0012               	return	
  8856  00F62C  EE20 F001          	lfsr	2,1
  8857  00F630  5001               	movf	RtccWriteTime@pTm,w,c
  8858  00F632  26D9               	addwf	fsr2l,f,c
  8859  00F634  5002               	movf	RtccWriteTime@pTm+1,w,c
  8860  00F636  22DA               	addwfc	fsr2h,f,c
  8861  00F638  0E5A               	movlw	90
  8862  00F63A  60DF               	cpfslt	indf2,c
  8863  00F63C  0012               	return	
  8864  00F63E  EE20 F003          	lfsr	2,3
  8865  00F642  5001               	movf	RtccWriteTime@pTm,w,c
  8866  00F644  26D9               	addwf	fsr2l,f,c
  8867  00F646  5002               	movf	RtccWriteTime@pTm+1,w,c
  8868  00F648  22DA               	addwfc	fsr2h,f,c
  8869  00F64A  0E24               	movlw	36
  8870  00F64C  64DF               	cpfsgt	indf2,c
  8871  00F64E  D002               	goto	l3096
  8872  00F650  0012               	return	
  8873                           
  8874                           ;	Return value of _RtccWriteTime is never used
  8875  00F652  0012               	return	
  8876  00F654                     l3096:
  8877  00F654  EE20 F002          	lfsr	2,2
  8878  00F658  5001               	movf	RtccWriteTime@pTm,w,c
  8879  00F65A  26D9               	addwf	fsr2l,f,c
  8880  00F65C  5002               	movf	RtccWriteTime@pTm+1,w,c
  8881  00F65E  22DA               	addwfc	fsr2h,f,c
  8882  00F660  50DF               	movf	indf2,w,c
  8883  00F662  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8884  00F664  EE20 F001          	lfsr	2,1
  8885  00F668  5001               	movf	RtccWriteTime@pTm,w,c
  8886  00F66A  26D9               	addwf	fsr2l,f,c
  8887  00F66C  5002               	movf	RtccWriteTime@pTm+1,w,c
  8888  00F66E  22DA               	addwfc	fsr2h,f,c
  8889  00F670  50DF               	movf	indf2,w,c
  8890  00F672  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8891  00F674  5003               	movf	RtccWriteTime@di,w,c
  8892  00F676  B4D8               	btfsc	status,2,c
  8893  00F678  D002               	goto	l3102
  8894  00F67A  9CF2               	bcf	intcon,6,c	;volatile
  8895  00F67C  D000               	goto	l3102
  8896  00F67E                     l3102:
  8897  00F67E  0E00               	movlw	0
  8898  00F680  BB3F               	btfsc	63,5,b	;volatile
  8899  00F682  0E01               	movlw	1
  8900  00F684  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8901  00F686  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8902  00F688  A4D8               	btfss	status,2,c
  8903  00F68A  D003               	goto	l3106
  8904  00F68C  EC72  F070         	call	_RtccWrOn	;wreg free
  8905  00F690  D000               	goto	l3106
  8906  00F692                     l3106:
  8907  00F692  0E00               	movlw	0
  8908  00F694  BF3F               	btfsc	63,7,b	;volatile
  8909  00F696  0E01               	movlw	1
  8910  00F698  6E05               	movwf	RtccWriteTime@wasOn,c
  8911  00F69A  5005               	movf	RtccWriteTime@wasOn,w,c
  8912  00F69C  B4D8               	btfsc	status,2,c
  8913  00F69E  D007               	goto	l3112
  8914  00F6A0  0E00               	movlw	0
  8915  00F6A2  BE91               	btfsc	3985,7,c	;volatile
  8916  00F6A4  0E01               	movlw	1
  8917  00F6A6  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8918  00F6A8  010F               	movlb	15	; () banked
  8919  00F6AA  9F3F               	bcf	63,7,b	;volatile
  8920  00F6AC  D000               	goto	l3112
  8921  00F6AE                     l3112:
  8922  00F6AE  0EFC               	movlw	252
  8923  00F6B0  010F               	movlb	15	; () banked
  8924  00F6B2  173F               	andwf	63,f,b	;volatile
  8925  00F6B4  010F               	movlb	15	; () banked
  8926  00F6B6  813F               	bsf	63,0,b	;volatile
  8927                           
  8928                           ; BSR set to: 15
  8929  00F6B8  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8930                           
  8931                           ; BSR set to: 15
  8932  00F6BC  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8933                           
  8934                           ; BSR set to: 15
  8935  00F6C0  EE20 F003          	lfsr	2,3
  8936  00F6C4  5001               	movf	RtccWriteTime@pTm,w,c
  8937  00F6C6  26D9               	addwf	fsr2l,f,c
  8938  00F6C8  5002               	movf	RtccWriteTime@pTm+1,w,c
  8939  00F6CA  22DA               	addwfc	fsr2h,f,c
  8940  00F6CC  50DF               	movf	indf2,w,c
  8941  00F6CE  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8942                           
  8943                           ; BSR set to: 15
  8944  00F6D0  0EFC               	movlw	252
  8945  00F6D2  010F               	movlb	15	; () banked
  8946  00F6D4  173F               	andwf	63,f,b	;volatile
  8947                           
  8948                           ; BSR set to: 15
  8949  00F6D6  010F               	movlb	15	; () banked
  8950  00F6D8  813F               	bsf	63,0,b	;volatile
  8951                           
  8952                           ; BSR set to: 15
  8953  00F6DA  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8954                           
  8955                           ; BSR set to: 15
  8956  00F6DE  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8957                           
  8958                           ; BSR set to: 15
  8959  00F6E2  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8960                           
  8961                           ; BSR set to: 15
  8962  00F6E6  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8963                           
  8964                           ; BSR set to: 15
  8965  00F6EA  5005               	movf	RtccWriteTime@wasOn,w,c
  8966  00F6EC  B4D8               	btfsc	status,2,c
  8967  00F6EE  D00D               	goto	l3144
  8968                           
  8969                           ; BSR set to: 15
  8970  00F6F0  010F               	movlb	15	; () banked
  8971  00F6F2  8F3F               	bsf	63,7,b	;volatile
  8972                           
  8973                           ; BSR set to: 15
  8974  00F6F4  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8975  00F6F6  B4D8               	btfsc	status,2,c
  8976  00F6F8  D002               	goto	l3140
  8977                           
  8978                           ; BSR set to: 15
  8979  00F6FA  8E91               	bsf	3985,7,c	;volatile
  8980  00F6FC  D000               	goto	l3140
  8981  00F6FE                     l3140:
  8982                           
  8983                           ; BSR set to: 15
  8984  00F6FE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8985  00F700  B4D8               	btfsc	status,2,c
  8986  00F702  D009               	goto	l3148
  8987                           
  8988                           ; BSR set to: 15
  8989  00F704  EC72  F070         	call	_RtccWrOn	;wreg free
  8990  00F708  D006               	goto	l3148
  8991  00F70A                     l3144:
  8992  00F70A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8993  00F70C  A4D8               	btfss	status,2,c
  8994  00F70E  D003               	goto	l3148
  8995  00F710  010F               	movlb	15	; () banked
  8996  00F712  9B3F               	bcf	63,5,b	;volatile
  8997                           
  8998                           ; BSR set to: 15
  8999  00F714  D000               	goto	l3148
  9000  00F716                     l3148:
  9001  00F716  5003               	movf	RtccWriteTime@di,w,c
  9002  00F718  B4D8               	btfsc	status,2,c
  9003  00F71A  0012               	return	
  9004  00F71C  8CF2               	bsf	intcon,6,c	;volatile
  9005  00F71E  0012               	return	
  9006                           
  9007                           ;	Return value of _RtccWriteTime is never used
  9008  00F720  0012               	return		;funcret
  9009  00F722                     __end_of_RtccWriteTime:
  9010                           	opt stack 0
  9011                           tosu	equ	0xFFF
  9012                           tosh	equ	0xFFE
  9013                           tosl	equ	0xFFD
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           indf0	equ	0xFEF
  9023                           postinc0	equ	0xFEE
  9024                           fsr0h	equ	0xFEA
  9025                           fsr0l	equ	0xFE9
  9026                           wreg	equ	0xFE8
  9027                           indf1	equ	0xFE7
  9028                           postinc1	equ	0xFE6
  9029                           postdec1	equ	0xFE5
  9030                           fsr1h	equ	0xFE2
  9031                           fsr1l	equ	0xFE1
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           fsr2h	equ	0xFDA
  9036                           fsr2l	equ	0xFD9
  9037                           status	equ	0xFD8
  9038                           
  9039 ;; *************** function _RtccWriteDate *****************
  9040 ;; Defined at:
  9041 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  pDt             2    0[COMRAM] PTR const struct .
  9044 ;;		 -> RtccDate(4), 
  9045 ;;  di              1    2[COMRAM] enum E7121
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;  tempHourWDay    2   11[COMRAM] struct .
  9048 ;;  tempDayMonth    2    9[COMRAM] struct .
  9049 ;;  tempYear        2    6[COMRAM] struct .
  9050 ;;  wasWrEn         1    8[COMRAM] enum E7121
  9051 ;;  wasAlrm         1    5[COMRAM] enum E7121
  9052 ;;  wasOn           1    4[COMRAM] enum E7121
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      enum E7121
  9055 ;; Registers used:
  9056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9062 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9063 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9065 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9066 ;;Total ram usage:       13 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    1
  9069 ;; This function calls:
  9070 ;;		_RtccWrOn
  9071 ;; This function is called by:
  9072 ;;		_Write_RTC
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text55
  9077  00F988                     __ptext55:
  9078                           	opt stack 0
  9079  00F988                     _RtccWriteDate:
  9080                           	opt stack 25
  9081                           
  9082                           ;incstack = 0
  9083  00F988  0E00               	movlw	0
  9084  00F98A  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9085  00F98C  EE20 F002          	lfsr	2,2
  9086  00F990  5001               	movf	RtccWriteDate@pDt,w,c
  9087  00F992  26D9               	addwf	fsr2l,f,c
  9088  00F994  5002               	movf	RtccWriteDate@pDt+1,w,c
  9089  00F996  22DA               	addwfc	fsr2h,f,c
  9090  00F998  0E13               	movlw	19
  9091  00F99A  60DF               	cpfslt	indf2,c
  9092  00F99C  0012               	return	
  9093  00F99E  EE20 F002          	lfsr	2,2
  9094  00F9A2  5001               	movf	RtccWriteDate@pDt,w,c
  9095  00F9A4  26D9               	addwf	fsr2l,f,c
  9096  00F9A6  5002               	movf	RtccWriteDate@pDt+1,w,c
  9097  00F9A8  22DA               	addwfc	fsr2h,f,c
  9098  00F9AA  50DF               	movf	indf2,w,c
  9099  00F9AC  B4D8               	btfsc	status,2,c
  9100  00F9AE  0012               	return	
  9101  00F9B0  EE20 F001          	lfsr	2,1
  9102  00F9B4  5001               	movf	RtccWriteDate@pDt,w,c
  9103  00F9B6  26D9               	addwf	fsr2l,f,c
  9104  00F9B8  5002               	movf	RtccWriteDate@pDt+1,w,c
  9105  00F9BA  22DA               	addwfc	fsr2h,f,c
  9106  00F9BC  0E32               	movlw	50
  9107  00F9BE  60DF               	cpfslt	indf2,c
  9108  00F9C0  0012               	return	
  9109  00F9C2  EE20 F001          	lfsr	2,1
  9110  00F9C6  5001               	movf	RtccWriteDate@pDt,w,c
  9111  00F9C8  26D9               	addwf	fsr2l,f,c
  9112  00F9CA  5002               	movf	RtccWriteDate@pDt+1,w,c
  9113  00F9CC  22DA               	addwfc	fsr2h,f,c
  9114  00F9CE  50DF               	movf	indf2,w,c
  9115  00F9D0  B4D8               	btfsc	status,2,c
  9116  00F9D2  0012               	return	
  9117  00F9D4  EE20 F003          	lfsr	2,3
  9118  00F9D8  5001               	movf	RtccWriteDate@pDt,w,c
  9119  00F9DA  26D9               	addwf	fsr2l,f,c
  9120  00F9DC  5002               	movf	RtccWriteDate@pDt+1,w,c
  9121  00F9DE  22DA               	addwfc	fsr2h,f,c
  9122  00F9E0  0E99               	movlw	153
  9123  00F9E2  64DF               	cpfsgt	indf2,c
  9124  00F9E4  D002               	goto	l3164
  9125  00F9E6  0012               	return	
  9126                           
  9127                           ;	Return value of _RtccWriteDate is never used
  9128  00F9E8  0012               	return	
  9129  00F9EA                     l3164:
  9130  00F9EA  EE20 F003          	lfsr	2,3
  9131  00F9EE  5001               	movf	RtccWriteDate@pDt,w,c
  9132  00F9F0  26D9               	addwf	fsr2l,f,c
  9133  00F9F2  5002               	movf	RtccWriteDate@pDt+1,w,c
  9134  00F9F4  22DA               	addwfc	fsr2h,f,c
  9135  00F9F6  50DF               	movf	indf2,w,c
  9136  00F9F8  6E07               	movwf	RtccWriteDate@tempYear,c
  9137  00F9FA  EE20 F001          	lfsr	2,1
  9138  00F9FE  5001               	movf	RtccWriteDate@pDt,w,c
  9139  00FA00  26D9               	addwf	fsr2l,f,c
  9140  00FA02  5002               	movf	RtccWriteDate@pDt+1,w,c
  9141  00FA04  22DA               	addwfc	fsr2h,f,c
  9142  00FA06  50DF               	movf	indf2,w,c
  9143  00FA08  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  9144  00FA0A  EE20 F002          	lfsr	2,2
  9145  00FA0E  5001               	movf	RtccWriteDate@pDt,w,c
  9146  00FA10  26D9               	addwf	fsr2l,f,c
  9147  00FA12  5002               	movf	RtccWriteDate@pDt+1,w,c
  9148  00FA14  22DA               	addwfc	fsr2h,f,c
  9149  00FA16  50DF               	movf	indf2,w,c
  9150  00FA18  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  9151  00FA1A  5003               	movf	RtccWriteDate@di,w,c
  9152  00FA1C  B4D8               	btfsc	status,2,c
  9153  00FA1E  D002               	goto	l3170
  9154  00FA20  9CF2               	bcf	intcon,6,c	;volatile
  9155  00FA22  D000               	goto	l3170
  9156  00FA24                     l3170:
  9157  00FA24  0E00               	movlw	0
  9158  00FA26  BB3F               	btfsc	63,5,b	;volatile
  9159  00FA28  0E01               	movlw	1
  9160  00FA2A  6E09               	movwf	RtccWriteDate@wasWrEn,c
  9161  00FA2C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9162  00FA2E  A4D8               	btfss	status,2,c
  9163  00FA30  D003               	goto	l3174
  9164  00FA32  EC72  F070         	call	_RtccWrOn	;wreg free
  9165  00FA36  D000               	goto	l3174
  9166  00FA38                     l3174:
  9167  00FA38  0E00               	movlw	0
  9168  00FA3A  BF3F               	btfsc	63,7,b	;volatile
  9169  00FA3C  0E01               	movlw	1
  9170  00FA3E  6E05               	movwf	RtccWriteDate@wasOn,c
  9171  00FA40  5005               	movf	RtccWriteDate@wasOn,w,c
  9172  00FA42  B4D8               	btfsc	status,2,c
  9173  00FA44  D007               	goto	l3180
  9174  00FA46  0E00               	movlw	0
  9175  00FA48  BE91               	btfsc	3985,7,c	;volatile
  9176  00FA4A  0E01               	movlw	1
  9177  00FA4C  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9178  00FA4E  010F               	movlb	15	; () banked
  9179  00FA50  9F3F               	bcf	63,7,b	;volatile
  9180  00FA52  D000               	goto	l3180
  9181  00FA54                     l3180:
  9182  00FA54  0EFC               	movlw	252
  9183  00FA56  010F               	movlb	15	; () banked
  9184  00FA58  173F               	andwf	63,f,b	;volatile
  9185  00FA5A  010F               	movlb	15	; () banked
  9186  00FA5C  813F               	bsf	63,0,b	;volatile
  9187                           
  9188                           ; BSR set to: 15
  9189  00FA5E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  9190                           
  9191                           ; BSR set to: 15
  9192  00FA62  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  9193                           
  9194                           ; BSR set to: 15
  9195  00FA66  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  9196  00FA6A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  9197  00FA6E  50DF               	movf	indf2,w,c
  9198  00FA70  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  9199                           
  9200                           ; BSR set to: 15
  9201  00FA72  0EFC               	movlw	252
  9202  00FA74  010F               	movlb	15	; () banked
  9203  00FA76  173F               	andwf	63,f,b	;volatile
  9204                           
  9205                           ; BSR set to: 15
  9206  00FA78  0E03               	movlw	3
  9207  00FA7A  010F               	movlb	15	; () banked
  9208  00FA7C  133F               	iorwf	63,f,b	;volatile
  9209                           
  9210                           ; BSR set to: 15
  9211  00FA7E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  9212                           
  9213                           ; BSR set to: 15
  9214  00FA82  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  9215                           
  9216                           ; BSR set to: 15
  9217  00FA86  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  9218                           
  9219                           ; BSR set to: 15
  9220  00FA8A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  9221                           
  9222                           ; BSR set to: 15
  9223  00FA8E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  9224                           
  9225                           ; BSR set to: 15
  9226  00FA92  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  9227                           
  9228                           ; BSR set to: 15
  9229  00FA96  5005               	movf	RtccWriteDate@wasOn,w,c
  9230  00FA98  B4D8               	btfsc	status,2,c
  9231  00FA9A  D00D               	goto	l3216
  9232                           
  9233                           ; BSR set to: 15
  9234  00FA9C  010F               	movlb	15	; () banked
  9235  00FA9E  8F3F               	bsf	63,7,b	;volatile
  9236                           
  9237                           ; BSR set to: 15
  9238  00FAA0  5006               	movf	RtccWriteDate@wasAlrm,w,c
  9239  00FAA2  B4D8               	btfsc	status,2,c
  9240  00FAA4  D002               	goto	l3212
  9241                           
  9242                           ; BSR set to: 15
  9243  00FAA6  8E91               	bsf	3985,7,c	;volatile
  9244  00FAA8  D000               	goto	l3212
  9245  00FAAA                     l3212:
  9246                           
  9247                           ; BSR set to: 15
  9248  00FAAA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9249  00FAAC  B4D8               	btfsc	status,2,c
  9250  00FAAE  D009               	goto	l3220
  9251                           
  9252                           ; BSR set to: 15
  9253  00FAB0  EC72  F070         	call	_RtccWrOn	;wreg free
  9254  00FAB4  D006               	goto	l3220
  9255  00FAB6                     l3216:
  9256  00FAB6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9257  00FAB8  A4D8               	btfss	status,2,c
  9258  00FABA  D003               	goto	l3220
  9259  00FABC  010F               	movlb	15	; () banked
  9260  00FABE  9B3F               	bcf	63,5,b	;volatile
  9261                           
  9262                           ; BSR set to: 15
  9263  00FAC0  D000               	goto	l3220
  9264  00FAC2                     l3220:
  9265  00FAC2  5003               	movf	RtccWriteDate@di,w,c
  9266  00FAC4  B4D8               	btfsc	status,2,c
  9267  00FAC6  0012               	return	
  9268  00FAC8  9CF2               	bcf	intcon,6,c	;volatile
  9269  00FACA  0012               	return	
  9270                           
  9271                           ;	Return value of _RtccWriteDate is never used
  9272  00FACC  0012               	return		;funcret
  9273  00FACE                     __end_of_RtccWriteDate:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           indf0	equ	0xFEF
  9287                           postinc0	equ	0xFEE
  9288                           fsr0h	equ	0xFEA
  9289                           fsr0l	equ	0xFE9
  9290                           wreg	equ	0xFE8
  9291                           indf1	equ	0xFE7
  9292                           postinc1	equ	0xFE6
  9293                           postdec1	equ	0xFE5
  9294                           fsr1h	equ	0xFE2
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function _RtccWrOn *****************
  9304 ;; Defined at:
  9305 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;		None
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  data            2    0        unsigned int 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;		None               void
  9312 ;; Registers used:
  9313 ;;		wreg, status,2
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9323 ;;Total ram usage:        0 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_Write_RTC
  9329 ;;		_RtccWriteDate
  9330 ;;		_RtccWriteTime
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           	psect	text56
  9335  00E0E4                     __ptext56:
  9336                           	opt stack 0
  9337  00E0E4                     _RtccWrOn:
  9338                           	opt stack 25
  9339                           
  9340                           ;incstack = 0
  9341  00E0E4  9CF2               	bcf	intcon,6,c	;volatile
  9342  00E0E6  0E55               	movlw	85
  9343  00E0E8  6EA7               	movwf	4007,c	;volatile
  9344  00E0EA  0EAA               	movlw	170
  9345  00E0EC  6EA7               	movwf	4007,c	;volatile
  9346  00E0EE  010F               	movlb	15	; () banked
  9347  00E0F0  8B3F               	bsf	63,5,b	;volatile
  9348                           
  9349                           ; BSR set to: 15
  9350  00E0F2  8CF2               	bsf	intcon,6,c	;volatile
  9351                           
  9352                           ; BSR set to: 15
  9353  00E0F4  0012               	return		;funcret
  9354  00E0F6                     __end_of_RtccWrOn:
  9355                           	opt stack 0
  9356                           tosu	equ	0xFFF
  9357                           tosh	equ	0xFFE
  9358                           tosl	equ	0xFFD
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           indf0	equ	0xFEF
  9368                           postinc0	equ	0xFEE
  9369                           fsr0h	equ	0xFEA
  9370                           fsr0l	equ	0xFE9
  9371                           wreg	equ	0xFE8
  9372                           indf1	equ	0xFE7
  9373                           postinc1	equ	0xFE6
  9374                           postdec1	equ	0xFE5
  9375                           fsr1h	equ	0xFE2
  9376                           fsr1l	equ	0xFE1
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           fsr2h	equ	0xFDA
  9381                           fsr2l	equ	0xFD9
  9382                           status	equ	0xFD8
  9383                           
  9384 ;; *************** function _Read_RTC *****************
  9385 ;; Defined at:
  9386 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;		None               void
  9393 ;; Registers used:
  9394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9404 ;;Total ram usage:        0 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    1
  9407 ;; This function calls:
  9408 ;;		_RtccReadDate
  9409 ;;		_RtccReadTime
  9410 ;; This function is called by:
  9411 ;;		_main
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text57
  9416  00F852                     __ptext57:
  9417                           	opt stack 0
  9418  00F852                     _Read_RTC:
  9419                           	opt stack 29
  9420                           
  9421                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
  9422                           
  9423                           ; BSR set to: 15
  9424                           ;incstack = 0
  9425  00F852  0EBB               	movlw	low _RtccTime
  9426  00F854  6E01               	movwf	RtccReadTime@pTm,c
  9427  00F856  0E00               	movlw	high _RtccTime
  9428  00F858  6E02               	movwf	RtccReadTime@pTm+1,c
  9429  00F85A  EC53  F073         	call	_RtccReadTime	;wreg free
  9430                           
  9431                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
  9432  00F85E  0100               	movlb	0	; () banked
  9433  00F860  51BC               	movf	(_RtccTime+1)& (0+255),w,b
  9434  00F862  0B0F               	andlw	15
  9435  00F864  0100               	movlb	0	; () banked
  9436  00F866  6FF1               	movwf	_segundo_u& (0+255),b
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9440  00F868  0100               	movlb	0	; () banked
  9441  00F86A  39BC               	swapf	(_RtccTime+1)& (0+255),w,b
  9442  00F86C  0B0F               	andlw	15
  9443  00F86E  0B0F               	andlw	15
  9444  00F870  6E5E               	movwf	_segundo_d,c
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
  9448  00F872  0100               	movlb	0	; () banked
  9449  00F874  51BD               	movf	(_RtccTime+2)& (0+255),w,b
  9450  00F876  0B0F               	andlw	15
  9451  00F878  0100               	movlb	0	; () banked
  9452  00F87A  6FF0               	movwf	_minuto_u& (0+255),b
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9456  00F87C  0100               	movlb	0	; () banked
  9457  00F87E  39BD               	swapf	(_RtccTime+2)& (0+255),w,b
  9458  00F880  0B0F               	andlw	15
  9459  00F882  0B0F               	andlw	15
  9460  00F884  0100               	movlb	0	; () banked
  9461  00F886  6FEF               	movwf	_minuto_d& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
  9465  00F888  0100               	movlb	0	; () banked
  9466  00F88A  51BE               	movf	(_RtccTime+3)& (0+255),w,b
  9467  00F88C  0B0F               	andlw	15
  9468  00F88E  0100               	movlb	0	; () banked
  9469  00F890  6FEC               	movwf	_hora_u& (0+255),b
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9473  00F892  0100               	movlb	0	; () banked
  9474  00F894  39BE               	swapf	(_RtccTime+3)& (0+255),w,b
  9475  00F896  0B0F               	andlw	15
  9476  00F898  0B0F               	andlw	15
  9477  00F89A  0100               	movlb	0	; () banked
  9478  00F89C  6FEB               	movwf	_hora_d& (0+255),b
  9479                           
  9480                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
  9481  00F89E  0E50               	movlw	low _RtccDate
  9482  00F8A0  6E01               	movwf	RtccReadDate@pDt,c
  9483  00F8A2  0E00               	movlw	high _RtccDate
  9484  00F8A4  6E02               	movwf	RtccReadDate@pDt+1,c
  9485  00F8A6  ECBA  F075         	call	_RtccReadDate	;wreg free
  9486                           
  9487                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
  9488  00F8AA  5051               	movf	_RtccDate+1,w,c
  9489  00F8AC  0B0F               	andlw	15
  9490  00F8AE  0100               	movlb	0	; () banked
  9491  00F8B0  6FEA               	movwf	_fecha_u& (0+255),b
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9495  00F8B2  3851               	swapf	_RtccDate+1,w,c
  9496  00F8B4  0B0F               	andlw	15
  9497  00F8B6  0B0F               	andlw	15
  9498  00F8B8  0100               	movlb	0	; () banked
  9499  00F8BA  6FE9               	movwf	_fecha_d& (0+255),b
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
  9503  00F8BC  5052               	movf	_RtccDate+2,w,c
  9504  00F8BE  0B0F               	andlw	15
  9505  00F8C0  0100               	movlb	0	; () banked
  9506  00F8C2  6FEE               	movwf	_mes_u& (0+255),b
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9510  00F8C4  3852               	swapf	_RtccDate+2,w,c
  9511  00F8C6  0B0F               	andlw	15
  9512  00F8C8  0B0F               	andlw	15
  9513  00F8CA  0100               	movlb	0	; () banked
  9514  00F8CC  6FED               	movwf	_mes_d& (0+255),b
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
  9518  00F8CE  C050  F0E8         	movff	_RtccDate,_dia_semana
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
  9522  00F8D2  5053               	movf	_RtccDate+3,w,c
  9523  00F8D4  0B0F               	andlw	15
  9524  00F8D6  0100               	movlb	0	; () banked
  9525  00F8D8  6FE7               	movwf	_anio_u& (0+255),b
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9529  00F8DA  3853               	swapf	_RtccDate+3,w,c
  9530  00F8DC  0B0F               	andlw	15
  9531  00F8DE  0B0F               	andlw	15
  9532  00F8E0  0100               	movlb	0	; () banked
  9533  00F8E2  6FE6               	movwf	_anio_d& (0+255),b
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
  9537  00F8E4  505E               	movf	_segundo_d,w,c
  9538  00F8E6  0D0A               	mullw	10
  9539  00F8E8  0100               	movlb	0	; () banked
  9540  00F8EA  51F1               	movf	_segundo_u& (0+255),w,b
  9541  00F8EC  24F3               	addwf	prodl,w,c
  9542  00F8EE  0100               	movlb	0	; () banked
  9543  00F8F0  6FA3               	movwf	_segundo& (0+255),b
  9544  00F8F2  0100               	movlb	0	; () banked
  9545  00F8F4  0E00               	movlw	0
  9546  00F8F6  20F4               	addwfc	prodh,w,c
  9547  00F8F8  0100               	movlb	0	; () banked
  9548  00F8FA  6FA4               	movwf	(_segundo+1)& (0+255),b
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
  9552  00F8FC  0100               	movlb	0	; () banked
  9553  00F8FE  51EF               	movf	_minuto_d& (0+255),w,b
  9554  00F900  0D0A               	mullw	10
  9555  00F902  0100               	movlb	0	; () banked
  9556  00F904  51F0               	movf	_minuto_u& (0+255),w,b
  9557  00F906  24F3               	addwf	prodl,w,c
  9558  00F908  0100               	movlb	0	; () banked
  9559  00F90A  6FE4               	movwf	_minuto& (0+255),b
  9560  00F90C  0100               	movlb	0	; () banked
  9561  00F90E  0E00               	movlw	0
  9562  00F910  20F4               	addwfc	prodh,w,c
  9563  00F912  0100               	movlb	0	; () banked
  9564  00F914  6FE5               	movwf	(_minuto+1)& (0+255),b
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
  9568  00F916  0100               	movlb	0	; () banked
  9569  00F918  51EB               	movf	_hora_d& (0+255),w,b
  9570  00F91A  0D0A               	mullw	10
  9571  00F91C  0100               	movlb	0	; () banked
  9572  00F91E  51EC               	movf	_hora_u& (0+255),w,b
  9573  00F920  24F3               	addwf	prodl,w,c
  9574  00F922  0100               	movlb	0	; () banked
  9575  00F924  6FE0               	movwf	_hora& (0+255),b
  9576  00F926  0100               	movlb	0	; () banked
  9577  00F928  0E00               	movlw	0
  9578  00F92A  20F4               	addwfc	prodh,w,c
  9579  00F92C  0100               	movlb	0	; () banked
  9580  00F92E  6FE1               	movwf	(_hora+1)& (0+255),b
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
  9584  00F930  0100               	movlb	0	; () banked
  9585  00F932  51E9               	movf	_fecha_d& (0+255),w,b
  9586  00F934  0D0A               	mullw	10
  9587  00F936  0100               	movlb	0	; () banked
  9588  00F938  51EA               	movf	_fecha_u& (0+255),w,b
  9589  00F93A  24F3               	addwf	prodl,w,c
  9590  00F93C  0100               	movlb	0	; () banked
  9591  00F93E  6FDC               	movwf	_dia& (0+255),b
  9592  00F940  0100               	movlb	0	; () banked
  9593  00F942  0E00               	movlw	0
  9594  00F944  20F4               	addwfc	prodh,w,c
  9595  00F946  0100               	movlb	0	; () banked
  9596  00F948  6FDD               	movwf	(_dia+1)& (0+255),b
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
  9600  00F94A  C0E8  F0DE         	movff	_dia_semana,_diasem
  9601  00F94E  0100               	movlb	0	; () banked
  9602  00F950  6BDF               	clrf	(_diasem+1)& (0+255),b
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
  9606  00F952  0100               	movlb	0	; () banked
  9607  00F954  51ED               	movf	_mes_d& (0+255),w,b
  9608  00F956  0D0A               	mullw	10
  9609  00F958  0100               	movlb	0	; () banked
  9610  00F95A  51EE               	movf	_mes_u& (0+255),w,b
  9611  00F95C  24F3               	addwf	prodl,w,c
  9612  00F95E  0100               	movlb	0	; () banked
  9613  00F960  6FE2               	movwf	_mes& (0+255),b
  9614  00F962  0100               	movlb	0	; () banked
  9615  00F964  0E00               	movlw	0
  9616  00F966  20F4               	addwfc	prodh,w,c
  9617  00F968  0100               	movlb	0	; () banked
  9618  00F96A  6FE3               	movwf	(_mes+1)& (0+255),b
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
  9622  00F96C  0100               	movlb	0	; () banked
  9623  00F96E  51E6               	movf	_anio_d& (0+255),w,b
  9624  00F970  0D0A               	mullw	10
  9625  00F972  0100               	movlb	0	; () banked
  9626  00F974  51E7               	movf	_anio_u& (0+255),w,b
  9627  00F976  24F3               	addwf	prodl,w,c
  9628  00F978  0100               	movlb	0	; () banked
  9629  00F97A  6FDA               	movwf	_anio& (0+255),b
  9630  00F97C  0100               	movlb	0	; () banked
  9631  00F97E  0E00               	movlw	0
  9632  00F980  20F4               	addwfc	prodh,w,c
  9633  00F982  0100               	movlb	0	; () banked
  9634  00F984  6FDB               	movwf	(_anio+1)& (0+255),b
  9635                           
  9636                           ; BSR set to: 0
  9637  00F986  0012               	return		;funcret
  9638  00F988                     __end_of_Read_RTC:
  9639                           	opt stack 0
  9640                           tosu	equ	0xFFF
  9641                           tosh	equ	0xFFE
  9642                           tosl	equ	0xFFD
  9643                           pclath	equ	0xFFA
  9644                           tblptru	equ	0xFF8
  9645                           tblptrh	equ	0xFF7
  9646                           tblptrl	equ	0xFF6
  9647                           tablat	equ	0xFF5
  9648                           prodh	equ	0xFF4
  9649                           prodl	equ	0xFF3
  9650                           intcon	equ	0xFF2
  9651                           indf0	equ	0xFEF
  9652                           postinc0	equ	0xFEE
  9653                           fsr0h	equ	0xFEA
  9654                           fsr0l	equ	0xFE9
  9655                           wreg	equ	0xFE8
  9656                           indf1	equ	0xFE7
  9657                           postinc1	equ	0xFE6
  9658                           postdec1	equ	0xFE5
  9659                           fsr1h	equ	0xFE2
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           fsr2h	equ	0xFDA
  9665                           fsr2l	equ	0xFD9
  9666                           status	equ	0xFD8
  9667                           
  9668 ;; *************** function _RtccReadTime *****************
  9669 ;; Defined at:
  9670 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  pTm             2    0[COMRAM] PTR struct .
  9673 ;;		 -> RtccTime(4), 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  rTD0            8   10[COMRAM] struct .
  9676 ;;  rTD1            8    2[COMRAM] struct .
  9677 ;; Return value:  Size  Location     Type
  9678 ;;		None               void
  9679 ;; Registers used:
  9680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9687 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9689 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9690 ;;Total ram usage:       18 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; This function calls:
  9693 ;;		Nothing
  9694 ;; This function is called by:
  9695 ;;		_Read_RTC
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text58
  9700  00E6A6                     __ptext58:
  9701                           	opt stack 0
  9702  00E6A6                     _RtccReadTime:
  9703                           	opt stack 29
  9704  00E6A6  0EFC               	movlw	252
  9705  00E6A8  010F               	movlb	15	; () banked
  9706  00E6AA  173F               	andwf	63,f,b	;volatile
  9707                           
  9708                           ; BSR set to: 15
  9709  00E6AC  010F               	movlb	15	; () banked
  9710  00E6AE  813F               	bsf	63,0,b	;volatile
  9711                           
  9712                           ; BSR set to: 15
  9713  00E6B0  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9714                           
  9715                           ; BSR set to: 15
  9716  00E6B4  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9717                           
  9718                           ; BSR set to: 15
  9719  00E6B8  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9720                           
  9721                           ; BSR set to: 15
  9722  00E6BC  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9723                           
  9724                           ; BSR set to: 15
  9725  00E6C0  0EFC               	movlw	252
  9726  00E6C2  010F               	movlb	15	; () banked
  9727  00E6C4  173F               	andwf	63,f,b	;volatile
  9728  00E6C6  010F               	movlb	15	; () banked
  9729  00E6C8  813F               	bsf	63,0,b	;volatile
  9730                           
  9731                           ; BSR set to: 15
  9732  00E6CA  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9733                           
  9734                           ; BSR set to: 15
  9735  00E6CE  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9736                           
  9737                           ; BSR set to: 15
  9738  00E6D2  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9739                           
  9740                           ; BSR set to: 15
  9741  00E6D6  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9742                           
  9743                           ; BSR set to: 15
  9744  00E6DA  5009               	movf	RtccReadTime@rTD1+6,w,c
  9745  00E6DC  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9746  00E6DE  A4D8               	btfss	status,2,c
  9747  00E6E0  D7E2               	goto	l3680
  9748                           
  9749                           ; BSR set to: 15
  9750                           
  9751                           ; BSR set to: 15
  9752  00E6E2  EE20 F003          	lfsr	2,3
  9753  00E6E6  5001               	movf	RtccReadTime@pTm,w,c
  9754  00E6E8  26D9               	addwf	fsr2l,f,c
  9755  00E6EA  5002               	movf	RtccReadTime@pTm+1,w,c
  9756  00E6EC  22DA               	addwfc	fsr2h,f,c
  9757  00E6EE  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9758  00E6F2  EE20 F002          	lfsr	2,2
  9759  00E6F6  5001               	movf	RtccReadTime@pTm,w,c
  9760  00E6F8  26D9               	addwf	fsr2l,f,c
  9761  00E6FA  5002               	movf	RtccReadTime@pTm+1,w,c
  9762  00E6FC  22DA               	addwfc	fsr2h,f,c
  9763  00E6FE  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9764  00E702  EE20 F001          	lfsr	2,1
  9765  00E706  5001               	movf	RtccReadTime@pTm,w,c
  9766  00E708  26D9               	addwf	fsr2l,f,c
  9767  00E70A  5002               	movf	RtccReadTime@pTm+1,w,c
  9768  00E70C  22DA               	addwfc	fsr2h,f,c
  9769  00E70E  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9770                           
  9771                           ; BSR set to: 15
  9772  00E712  0012               	return		;funcret
  9773  00E714                     __end_of_RtccReadTime:
  9774                           	opt stack 0
  9775                           tosu	equ	0xFFF
  9776                           tosh	equ	0xFFE
  9777                           tosl	equ	0xFFD
  9778                           pclath	equ	0xFFA
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           prodh	equ	0xFF4
  9784                           prodl	equ	0xFF3
  9785                           intcon	equ	0xFF2
  9786                           indf0	equ	0xFEF
  9787                           postinc0	equ	0xFEE
  9788                           fsr0h	equ	0xFEA
  9789                           fsr0l	equ	0xFE9
  9790                           wreg	equ	0xFE8
  9791                           indf1	equ	0xFE7
  9792                           postinc1	equ	0xFE6
  9793                           postdec1	equ	0xFE5
  9794                           fsr1h	equ	0xFE2
  9795                           fsr1l	equ	0xFE1
  9796                           indf2	equ	0xFDF
  9797                           postinc2	equ	0xFDE
  9798                           postdec2	equ	0xFDD
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _RtccReadDate *****************
  9804 ;; Defined at:
  9805 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  pDt             2    0[COMRAM] PTR struct .
  9808 ;;		 -> RtccDate(4), 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  rTD0            8   10[COMRAM] struct .
  9811 ;;  rTD1            8    2[COMRAM] struct .
  9812 ;; Return value:  Size  Location     Type
  9813 ;;		None               void
  9814 ;; Registers used:
  9815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9822 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9824 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9825 ;;Total ram usage:       18 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_Read_RTC
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           	psect	text59
  9835  00EB74                     __ptext59:
  9836                           	opt stack 0
  9837  00EB74                     _RtccReadDate:
  9838                           	opt stack 29
  9839  00EB74  0EFC               	movlw	252
  9840  00EB76  010F               	movlb	15	; () banked
  9841  00EB78  173F               	andwf	63,f,b	;volatile
  9842  00EB7A  0E03               	movlw	3
  9843  00EB7C  010F               	movlb	15	; () banked
  9844  00EB7E  133F               	iorwf	63,f,b	;volatile
  9845                           
  9846                           ; BSR set to: 15
  9847  00EB80  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  9848                           
  9849                           ; BSR set to: 15
  9850  00EB84  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  9851                           
  9852                           ; BSR set to: 15
  9853  00EB88  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  9854                           
  9855                           ; BSR set to: 15
  9856  00EB8C  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  9857                           
  9858                           ; BSR set to: 15
  9859  00EB90  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  9860                           
  9861                           ; BSR set to: 15
  9862  00EB94  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  9863  00EB98  0EFC               	movlw	252
  9864  00EB9A  010F               	movlb	15	; () banked
  9865  00EB9C  173F               	andwf	63,f,b	;volatile
  9866  00EB9E  0E03               	movlw	3
  9867  00EBA0  010F               	movlb	15	; () banked
  9868  00EBA2  133F               	iorwf	63,f,b	;volatile
  9869                           
  9870                           ; BSR set to: 15
  9871  00EBA4  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  9872                           
  9873                           ; BSR set to: 15
  9874  00EBA8  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  9875                           
  9876                           ; BSR set to: 15
  9877  00EBAC  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  9878                           
  9879                           ; BSR set to: 15
  9880  00EBB0  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  9881                           
  9882                           ; BSR set to: 15
  9883  00EBB4  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  9884                           
  9885                           ; BSR set to: 15
  9886  00EBB8  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  9887  00EBBC  5005               	movf	RtccReadDate@rTD1+2,w,c
  9888  00EBBE  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  9889  00EBC0  A4D8               	btfss	status,2,c
  9890  00EBC2  D7D8               	goto	l3706
  9891                           
  9892                           ; BSR set to: 15
  9893                           
  9894                           ; BSR set to: 15
  9895  00EBC4  EE20 F001          	lfsr	2,1
  9896  00EBC8  5001               	movf	RtccReadDate@pDt,w,c
  9897  00EBCA  26D9               	addwf	fsr2l,f,c
  9898  00EBCC  5002               	movf	RtccReadDate@pDt+1,w,c
  9899  00EBCE  22DA               	addwfc	fsr2h,f,c
  9900  00EBD0  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  9901  00EBD4  EE20 F002          	lfsr	2,2
  9902  00EBD8  5001               	movf	RtccReadDate@pDt,w,c
  9903  00EBDA  26D9               	addwf	fsr2l,f,c
  9904  00EBDC  5002               	movf	RtccReadDate@pDt+1,w,c
  9905  00EBDE  22DA               	addwfc	fsr2h,f,c
  9906  00EBE0  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  9907                           
  9908                           ; BSR set to: 15
  9909  00EBE4  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  9910  00EBE8  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  9911  00EBEC  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  9912                           
  9913                           ; BSR set to: 15
  9914  00EBF0  EE20 F003          	lfsr	2,3
  9915  00EBF4  5001               	movf	RtccReadDate@pDt,w,c
  9916  00EBF6  26D9               	addwf	fsr2l,f,c
  9917  00EBF8  5002               	movf	RtccReadDate@pDt+1,w,c
  9918  00EBFA  22DA               	addwfc	fsr2h,f,c
  9919  00EBFC  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  9920                           
  9921                           ; BSR set to: 15
  9922  00EC00  0012               	return		;funcret
  9923  00EC02                     __end_of_RtccReadDate:
  9924                           	opt stack 0
  9925                           tosu	equ	0xFFF
  9926                           tosh	equ	0xFFE
  9927                           tosl	equ	0xFFD
  9928                           pclath	equ	0xFFA
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           indf0	equ	0xFEF
  9937                           postinc0	equ	0xFEE
  9938                           fsr0h	equ	0xFEA
  9939                           fsr0l	equ	0xFE9
  9940                           wreg	equ	0xFE8
  9941                           indf1	equ	0xFE7
  9942                           postinc1	equ	0xFE6
  9943                           postdec1	equ	0xFE5
  9944                           fsr1h	equ	0xFE2
  9945                           fsr1l	equ	0xFE1
  9946                           indf2	equ	0xFDF
  9947                           postinc2	equ	0xFDE
  9948                           postdec2	equ	0xFDD
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           tosu	equ	0xFFF
  9953                           tosh	equ	0xFFE
  9954                           tosl	equ	0xFFD
  9955                           pclath	equ	0xFFA
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           indf0	equ	0xFEF
  9964                           postinc0	equ	0xFEE
  9965                           fsr0h	equ	0xFEA
  9966                           fsr0l	equ	0xFE9
  9967                           wreg	equ	0xFE8
  9968                           indf1	equ	0xFE7
  9969                           postinc1	equ	0xFE6
  9970                           postdec1	equ	0xFE5
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980                           	psect	text60
  9981  000000                     __ptext60:
  9982                           	opt stack 0
  9983                           tosu	equ	0xFFF
  9984                           tosh	equ	0xFFE
  9985                           tosl	equ	0xFFD
  9986                           pclath	equ	0xFFA
  9987                           tblptru	equ	0xFF8
  9988                           tblptrh	equ	0xFF7
  9989                           tblptrl	equ	0xFF6
  9990                           tablat	equ	0xFF5
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           intcon	equ	0xFF2
  9994                           indf0	equ	0xFEF
  9995                           postinc0	equ	0xFEE
  9996                           fsr0h	equ	0xFEA
  9997                           fsr0l	equ	0xFE9
  9998                           wreg	equ	0xFE8
  9999                           indf1	equ	0xFE7
 10000                           postinc1	equ	0xFE6
 10001                           postdec1	equ	0xFE5
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011                           	psect	rparam
 10012  0000                     tosu	equ	0xFFF
 10013                           tosh	equ	0xFFE
 10014                           tosl	equ	0xFFD
 10015                           pclath	equ	0xFFA
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           indf0	equ	0xFEF
 10024                           postinc0	equ	0xFEE
 10025                           fsr0h	equ	0xFEA
 10026                           fsr0l	equ	0xFE9
 10027                           wreg	equ	0xFE8
 10028                           indf1	equ	0xFE7
 10029                           postinc1	equ	0xFE6
 10030                           postdec1	equ	0xFE5
 10031                           fsr1h	equ	0xFE2
 10032                           fsr1l	equ	0xFE1
 10033                           indf2	equ	0xFDF
 10034                           postinc2	equ	0xFDE
 10035                           postdec2	equ	0xFDD
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8


Data Sizes:
    Strings     294
    Constant    14
    Data        24
    BSS         131
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     72      95
    BANK0           160      0     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_29(CODE[5]), STR_28(CODE[5]), 
		 -> STR_21(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    actualizar_password@confirmar	PTR int  size(2) Largest target is 2
		 -> cambiar_password@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> cambiar_password@verifica(COMRAM[2]), 

    convertir_a_int_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_hora@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_minutos@valor(COMRAM[2]), cambiar_hora@valor(COMRAM[2]), 

    guardar_elemento_hora@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(COMRAM[2]), 

    guardar_elemento_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    convertir_a_int_fecha@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento_fecha@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), tamanio_anio(COMRAM[2]), 

    guardar_elemento_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 3
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_11(CODE[3]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), STR_36(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), 
		 -> STR_30(CODE[2]), imprimir_tecla@aux(COMRAM[20]), STR_25(CODE[8]), STR_22(CODE[23]), 
		 -> STR_20(CODE[20]), STR_19(CODE[27]), STR_18(CODE[19]), STR_17(CODE[22]), 
		 -> STR_16(CODE[18]), STR_15(CODE[18]), STR_14(CODE[19]), STR_13(CODE[26]), 
		 -> STR_12(CODE[8]), STR_6(CODE[11]), STR_5(CODE[17]), ingresar_password@clear(COMRAM[16]), 
		 -> STR_4(CODE[4]), STR_3(CODE[3]), buffer2(BANK0[20]), 

    puntero_funcion	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), cambiar_hora(), cambiar_minutos(), cambiar_dia(), 
		 -> cambiar_mes(), cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), 
		 -> mostrar_guardar_nuevo_password(), mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    mostrar_titulo_menu@titulo_menu	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_22(CODE[23]), STR_20(CODE[20]), STR_19(CODE[27]), STR_18(CODE[19]), 
		 -> STR_17(CODE[22]), STR_16(CODE[18]), STR_15(CODE[18]), STR_14(CODE[19]), 

    caratula$527	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_25(CODE[8]), STR_12(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _cambiar_minutos->_guardar_elemento_hora
    _cambiar_mes->_guardar_elemento_fecha
    _cambiar_hora->_guardar_elemento_hora
    _guardar_elemento_hora->_sprintf
    _convertir_a_int_hora->_atoi
    _cambiar_dia->_guardar_elemento_fecha
    _cambiar_anio->_guardar_elemento_fecha
    _guardar_elemento_fecha->_sprintf
    _convertir_a_int_fecha->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _cambiar_password->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _cambiar_horario->_clear_display
    _cambiar_horario->_mostrar_titulo_menu
    _cambiar_fecha->_clear_display
    _cambiar_fecha->_mostrar_titulo_menu
    _mostrar_titulo_menu->_lcd_putrs
    _clear_display->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  282160
                                             68 COMRAM     4     4      0
                           _Read_RTC
                              _Setup
                      _cambiar_fecha
                    _cambiar_horario
                   _cambiar_password
                           _caratula
                  _ingresar_password
                       _leer_teclado
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     796
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2  220509
                                             63 COMRAM     5     3      2
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             4     0      4  108526
                                             59 COMRAM     4     0      4
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   10246
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   10246
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   10246
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3294
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3272
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   10224
                                             56 COMRAM     1     1      0
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    6984
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      6     6      0   12606
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         6     6      0   12606
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                   _inicializar_hora
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (4) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_hora                                7     3      4    3584
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_hora                                 4     0      4    1139
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                  _inicializar_fecha
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (4) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_fecha                               7     3      4    3712
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_fecha                                4     0      4    1267
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    6367
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9507
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _cambiar_password                                     4     4      0   15872
                                             35 COMRAM     4     4      0
                _actualizar_password
                      _clear_display
                _mostrar_titulo_menu
                            _sprintf
                  _verficar_password
 ---------------------------------------------------------------------------------
 (2) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _actualizar_password                                 12     9      3     329
                                              0 COMRAM    12     9      3
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cambiar_horario                                      0     0      0   12072
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (1) _cambiar_fecha                                        0     0      0   12072
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (2) _mostrar_titulo_menu                                  2     0      2    6025
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        2     0      2    6047
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    3710
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    2449
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1781
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _cambiar_fecha
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _cambiar_horario
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _cambiar_password
     _actualizar_password
       _restaurar_comando
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _verficar_password
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _leer_teclado
     Absolute function(Fake) *
     _cambiar_anio *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_dia *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_fecha
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_hora *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_hora
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_mes *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_minutos *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _confirmar_actualizar_password *
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _guardar_tecla_presionada *
       Absolute function(Fake) *
       _cambiar_anio *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_dia *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_fecha
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_hora *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_hora
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_mes *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_minutos *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _confirmar_actualizar_password *
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      92       5       91.3%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     48      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F1       6        0.0%
DATA                 0      0      F1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 13 22:28:25 2016

                         _verficar_password E8E2                                           _a 0091  
                                         _b 0095                                           _c 0097  
                                         _i 009B                                           _j 009D  
                                         _k 009F                              ?_lcd_send_byte 0003  
             __size_of_convertir_a_int_hora 001E                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                ??_mostrar_guardar_password 0039                                         l402 F5FC  
                                       l350 E782                                         l362 EA5E  
                                       l283 E342                                         l284 E344  
                                       l532 EDDE                                         l525 EE94  
                                       l381 EB5E                                         l373 EB10  
                                       l382 EB5A                                         l374 EB0C  
                                       l390 F5A2                                         l377 EB36  
                                       l393 F5CC                                         l378 EB32  
                                       l394 F5C8                                         l539 F008  
                                       l397 F5E6                                         l389 F5A6  
                                       l398 F5E2                                         l815 E958  
                                       l760 F0C8                                         l753 EF4A  
                                       l862 FE30                                         l792 E4B2  
                                       l796 E426                                         l788 E46C  
                      actualizar_password@j 0009                                         _dia 00DC  
                                       _day 00BF                                         _key 004F  
                                       _mes 00E2                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                                 lcd_gotoxy@x 0006  
                               lcd_gotoxy@y 0005                   __size_of_cambiar_password 00D0  
         __end_of_guardar_password_temporal E4B4                                        l1144 F264  
                                      l3010 FD76                                        l3002 FD38  
                                      l3004 FD5A                                        l3102 F67E  
                                      l3022 FDAA                                        l3014 FD82  
                                      l3112 F6AE                                        l3040 FE0E  
                                      l3032 FDE4                                        l1521 E63A  
                                      l3106 F692                                        l3026 FDCE  
                                      l3018 FDA6                                        l1531 E58A  
                                      l3220 FAC2                                        l3212 FAAA  
                                      l3140 F6FE                                        l3052 FE8A  
                                      l3028 FDD8                                        l3046 FE36  
                                      l3038 FE06                                        l3054 FE96  
                                      l3062 F19C                                        l4022 F43C  
                                      l3216 FAB6                                        l3144 F70A  
                                      l3232 ECAA                                        l3056 FEB2  
                                      l3080 F22C                                        l3064 F1A2  
                                      l4008 F604                                        l4040 F490  
                                      l4032 F466                                        l3170 FA24  
                                      l3402 E10A                                        l3082 F232  
                                      l3074 F1E2                                        l3410 EDFA  
                                      l3180 FA54                                        l3164 F9EA  
                                      l3148 F716                                        l3244 ECD2  
                                      l3260 ED0E                                        l3324 E3D2  
                                      l3340 E3F4                                        l4052 F4DC  
                                      l3174 FA38                                        l3246 ECDC  
                                      l3238 ECBC                                        l3078 F1F6  
                                      l3334 E480                                        l4046 F4BA  
                                      l3096 F654                                        l3264 ED1E  
                                      l3256 ED02                                        l3248 ECE4  
                                      l3600 EAC6                                        l3328 E43A  
                                      l3440 ED44                                        l3432 EE7C  
                                      l3416 EE28                                        l3520 EF32  
                                      l3504 EEDE                                        l4058 F4FE  
                                      l3620 E8FC                                        l3348 E746  
                                      l3460 EDC6                                        l3428 EE68  
                                      l3516 EF1E                                        l3550 F0B0  
                                      l3624 E92E                                        l3456 EDB2  
                                      l3448 ED7A                                        l3528 F024  
                                      l3536 F05A                                        l3706 EB74  
                                      l3562 E980                                        l3642 F7B0  
                                      l2930 E5FE                                        l2914 E1FC  
                                      l3626 E934                                        l3490 EFF0  
                                      l3546 F09C                                        l2852 E0F8  
                                      l3580 E9AC                                        l3572 E998  
                                      l3652 F7FA                                        l3644 F7B6  
                                      l2932 E608                                        l3628 E944  
                                      l3468 EF66                                        l3566 E988  
                                      l3662 F832                                        l3638 F772  
                                      l2942 E62E                                        l2934 E610  
                                      l2950 E556                                        l3902 F148  
                                      l3590 EA74                                        l3822 F3F8  
                                      l3486 EFDC                                        l3478 EFA4  
                                      l3680 E6A6                                        l2880 E218  
                                      l3656 F80E                                        l2952 E560  
                                      l3760 F336                                        l3840 EA3A  
                                      l2890 E518                                        l2954 E568  
                                      l3594 EAA0                                        l3826 F410  
                                      l3818 F3E4                                        l3498 EEB0  
                                      l3842 EA4A                                        l3834 E9F4  
                                      l2892 E524                                        l2964 E596  
                                      l3860 EC62                                        l3852 EC32  
                                      l2980 FC90                                        l2972 FC68  
                                      l3596 EAA6                                        l2878 E212  
                                      l2886 E500                                        l2958 E57E  
                                      l2990 FCCE                                        l3758 F32C  
                                      l3598 EAB6                                        l3838 EA34  
                                      l2888 E50C                                        l2896 E530  
                                      l2968 E5C0                                        l2984 FC9A  
                                      l3792 F360                                        l2986 FCB0  
                                      l2978 FC82                                        l3876 E674  
                                      l3892 F104                                        l3788 F34C  
                                      l2998 FD32                                        l3894 F114  
                                      l3798 F378                                        STR_1 FFA2  
                                      STR_2 FFB1                                        STR_3 FFE5  
                                      STR_4 FFD8                                        STR_5 FF91  
                                      STR_6 FFC0                                        STR_7 FFD3  
                                      STR_8 FFD3                                        STR_9 FFD3  
                           _guardar_comando E714                           ?_inicializar_hora 0001  
                                      u2420 EE38                                        u1710 E8C6  
                                      u1650 E878                                        u2530 EFB4  
                                      u3307 EF38                                        u1708 E8AC  
                                      u2620 F06A                                        u3317 F0B6  
                                      u1670 E890                                        u1830 E5B6  
                                      u2470 ED8A                                        u3327 EE82  
                                      u1728 E8C8                                        u1840 E5E0  
                                      u2800 F7EE                                        u3168 F5B2  
                                      u3337 EDCC                                        u1690 E8AA  
                                      u2570 EEEE                                        u3347 EFF6  
                                      u1668 E87A                                        u1837 E5AC  
                                      u3357 F3FE                                        u3367 E10C  
                                      u1847 E5D6                                        u1688 E892  
                                      u3377 E0FA                                        u3297 F60A  
                                      u2908 EB44                                        u2848 EAF6  
                                      u2980 F3B2                                        u2878 EB1C  
                guardar_elemento_hora@array 0024                            ?_lcd_send_nibble 0001  
                guardar_elemento_hora@tecla 002A                                        _anio 00DA  
                                      _flag 02F8                                        _atoi F19A  
                        ??_inicializar_hora 0001                                        _main F42A  
                                      _hora 00E0                                        _hour 00C2  
                                      _year 00CB                                        fsr0h 000FEA  
                                      indf0 000FEF                                        fsr0l 000FE9  
                                      fsr2h 000FDA                                        indf1 000FE7  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                               __CFG_T1DIG$ON 000000  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 0000                               __CFG_IESO$OFF 000000  
                          RtccReadDate@rTD0 000B                            RtccReadDate@rTD1 0003  
                 __end_of_verficar_password E95A                                ___param_bank 000010  
                           RtccReadTime@pTm 0001                               cambiar_anio@i 002D  
                      __size_of_cambiar_dia 00B6                               cambiar_hora@i 002D  
                      __size_of_cambiar_mes 00B6                           _inicializar_fecha E276  
                               _Delay1KTCYx E108                               __CFG_PLLDIV$1 000000  
                    ?_convertir_a_int_fecha 000E                                       ?_atoi 0007  
                                     ?_main 0001                             __end_of___awdiv ED2A  
                        ?_inicializar_fecha 0001                                       STR_10 FFD3  
                                     STR_11 FFE8                                       STR_12 FFCB  
                                     STR_20 FF33                                       STR_21 FFD3  
                                     STR_13 FEEC                                       STR_30 FFED  
                                     STR_14 FF5A                                       STR_22 FF06  
                                     STR_31 FFEF                                       STR_23 FFDC  
                                     STR_15 FF7F                                       STR_24 FFE8  
                                     STR_32 FFF1                                       STR_16 FF6D  
                                     STR_25 FFCB                                       STR_33 FFF3  
                                     STR_17 FF1D                                       STR_34 FFED  
                                     STR_26 FFDF                                       STR_18 FF47  
                                     STR_35 FFEB                                       STR_27 FFE2  
                                     STR_19 FED1                                       STR_28 FFD3  
                                     STR_36 FFF5                                       STR_37 FFD3  
                                     STR_29 FFD3                                       STR_38 FFD3  
                     __size_of_Delay100TCYx 0012                             ___awdiv@divisor 0003  
                           __end_of___lwdiv E644                             __end_of___lwmod E594  
                         _restaurar_comando E14A                            ?_validar_comando 0001  
                           ___awdiv@counter 0005                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
           ??_confirmar_actualizar_password 0039                               ?_leer_teclado 0040  
                        ?_restaurar_comando 0001                              __CFG_FCMEN$OFF 000000  
                                     _Setup E4B4                         ??_inicializar_fecha 0001  
                            _ocultar_teclas 00A1                             __end_of_dpowers FECD  
                                     _mes_d 00ED                                       _mes_u 00EE  
                           __end_of_isdigit E206                                       _month 00C8  
                                     atoi@a 000C                                       atoi@s 0007  
                            __pbitbssCOMRAM 02F8      __end_of_mostrar_guardar_nuevo_password E326  
   __size_of_mostrar_guardar_nuevo_password 002C              _mostrar_guardar_nuevo_password E2FA  
                                     pclath 000FFA                                       tablat 000FF5  
                       ??_restaurar_comando 0001                                lcd_putrs@ptr 0009  
                                     status 000FD8                             __end_of_sprintf FEC2  
                         validar_password@i 0003                     __CFG_DSWDTOSC$INTOSCREF 000000  
                           __initialization E358                                _Delay100TCYx E0F6  
                 __end_of_inicializar_fecha E2A2                                __end_of_atoi F26E  
                              __end_of_main F510                             ??_lcd_send_byte 0004  
                          RtccReadTime@rTD0 000B                            RtccReadTime@rTD1 0003  
                          __end_of_Read_RTC F988                    _guardar_current_password E428  
                 __size_of_ingresar_comando 000A                   __end_of_restaurar_comando E168  
                         cambiar_anio@tecla 002C                       __size_of_cambiar_anio 00BE  
                         cambiar_anio@valor 002F                       __size_of_cambiar_hora 00B6  
                                    ??_atoi 0009                                      ??_main 0045  
                             __activetblptr 000002                              ??_leer_teclado 0042  
                   __end_of_guardar_comando E784                            __end_of_RtccWrOn E0F6  
              __size_of_mostrar_titulo_menu 0018                                      ?_Setup 0001  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _EECON2 000FA7                                      _ANCON0 000F48  
                                    _ANCON1 000F49                            ___awdiv@dividend 0001  
                            __CFG_WDTEN$OFF 000000                            RtccWriteDate@pDt 0001  
                                    _RTCCFG 000F3F                              __CFG_WPCFG$OFF 000000  
    mostrar_guardar_temporal_password@tecla 0039                       __end_of_clear_display E1E4  
                          __end_of_caratula F344                        cambiar_minutos@tecla 002C  
                            __CFG_WPDIS$OFF 000000                        cambiar_minutos@valor 002F  
                            __CFG_XINST$OFF 000000                  __size_of_verficar_password 0078  
                              _cambiar_anio EF4C                                _cambiar_hora EE96  
                          __end_of_lcd_init E9DA              guardar_password_temporal@valor 0003  
                          __end_of_lcd_putc E548                           ?_validar_password 0001  
                                    ___wmul E24E                                   ??___awdiv 0005  
                            __CFG_STVREN$ON 000000                                      _diasem 00DE  
                                    _anio_d 00E6                                      _anio_u 00E7  
                                 ??___lwdiv 0005                                   ??___lwmod 000C  
                        ??_validar_password 0001                                      _hora_d 00EB  
                                    _hora_u 00EC                                      clear_0 E35E  
                                    clear_1 E36C                            ___awdiv@quotient 0007  
                                    _minuto 00E4            __end_of_mostrar_guardar_password E2FA  
                         cambiar_hora@tecla 002C                       __end_of_RtccWriteDate FACE  
                         cambiar_hora@valor 002F                    __size_of_cambiar_horario 0062  
                     __end_of_RtccWriteTime F722                            RtccWriteTime@pTm 0001  
                   ??_guardar_elemento_hora 0028                    __size_of_cambiar_minutos 00C0  
                  _guardar_tecla_presionada EAEA                                   ??_isdigit 0001  
                          ??_imprimir_tecla 0024   __end_of_mostrar_guardar_temporal_password E2CE  
__size_of_mostrar_guardar_temporal_password 002C         ??_mostrar_guardar_temporal_password 0039  
        ?_mostrar_guardar_temporal_password 0001           _mostrar_guardar_temporal_password E2A2  
                              __mediumconst FEC2                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                          _cambiar_password F0CA                                   ??_sprintf 0017  
                                __accesstop 0060                     __end_of__initialization E392  
                        __size_of_Write_RTC 0190                               ___rparam_used 000001  
                              _caratula$527 0026                              __pcstackCOMRAM 0001  
                             __end_of_Setup E4FC                  __size_of_inicializar_fecha 002C  
                              __pidataBANK0 E132                 __end_of_actualizar_password F852  
                           __CFG_DSWDTPS$G2 000000                  __size_of_restaurar_comando 001E  
                       leer_teclado@ocultar 0040                   cambiar_password@confirmar 0024  
            mostrar_titulo_menu@titulo_menu 000B                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                   actualizar_password@j_1623 000B  
                                   ??_Setup 000E                      __size_of_cambiar_fecha 0092  
                         lcd_gotoxy@address 0007                          __size_of_lcd_putrs 0054  
              __end_of_convertir_a_int_hora E1A4                                sprintf@width 0021  
                                __pbssBANK0 0060                                   ?_Read_RTC 0001  
                           _tamanio_comando 00A5                                  _dia_semana 00E8  
                 RtccWriteTime@tempHourWDay 000A                                  __pnvCOMRAM 005E  
                           _tamanio_minutos 005C                        __end_of_leer_teclado F616  
                                 ?_RtccWrOn 0001                              lcd_send_byte@n 0003  
                   ??_convertir_a_int_fecha 0012                                     ?___wmul 0001  
                             ?_RtccReadDate 0001                   __size_of_inicializar_hora 001E  
                             ?_RtccReadTime 0001                            _ingresar_comando E0CC  
                              ?_Delay1KTCYx 0001                          guardar_comando@aux 0026  
                         __end_of_Write_RTC FC5E                                  _lcd_comand E0D6  
                                 ?_caratula 0024                    actualizar_password@valor 0003  
                                _lcd_gotoxy E206                                     _RTCVALH 000F99  
                                   _RTCVALL 000F98                           ??_cambiar_horario 000D  
                                 ?_lcd_init 0001                           ??_cambiar_minutos 002B  
                                 ?_lcd_putc 0001                  ?_guardar_password_temporal 0001  
                  cambiar_password@verifica 0026                                  ??_Read_RTC 0013  
         __size_of_mostrar_guardar_password 002C                   ?_mostrar_guardar_password 0001  
                ??_guardar_current_password 0001                                     __Hparam 0000  
                             ??_cambiar_dia 002B                         _mostrar_titulo_menu E11A  
                             ??_cambiar_mes 002B                                     __Lparam 0000  
                             _cambiar_fecha EC02                    __size_of_lcd_send_nibble 0076  
                                ??_RtccWrOn 0001                        guardar_comando@tecla 003A  
                            ??_RtccReadDate 0003                                  _autorizado 0093  
                            ??_RtccReadTime 0003                                     ___awdiv EC94  
                         __end_of_lcd_putrs E5E8                             __size_of___wmul 0028  
                                   ___lwdiv E5E8                                     ___lwmod E548  
                               _RtccTimeVal 008D                                     __pcinit E358  
                                   _fecha_d 00E9                                     _fecha_u 00EA  
                                   __ramtop 0F00               mostrar_guardar_password@tecla 0039  
                                   __ptext0 F42A                                     __ptext1 E9DA  
                                   __ptext2 F510                                     __ptext3 EAEA  
                                   __ptext4 E0CC                                     __ptext5 E22A  
                                   __ptext6 E2FA                                     __ptext7 E2CE  
                                   __ptext8 EE96                                     __ptext9 F00A  
                                   _buffer2 00A7                                     _comando 00D5  
                                 _T1CONbits 000FCD                                     _dpowers FEC3  
                                   _isdigit E1E4                              main@validacion 0047  
                                ??_caratula 0026                        ?_mostrar_titulo_menu 000B  
                                   _minutes 00C5                                     _segundo 00A3  
                                   _sprintf FC5E                    ??_guardar_nuevo_password 0001  
                                ??_lcd_init 0005                                  ??_lcd_putc 0008  
                      end_of_initialization E392                  convertir_a_int_fecha@array 000E  
                  __size_of_validar_comando 0086                    ??_guardar_elemento_fecha 0028  
                convertir_a_int_fecha@valor 0010                        lcd_send_byte@address 0004  
                             __Lmediumconst FEC2                              ?_cambiar_fecha 0001  
                                   postdec1 000FE5                                     postdec2 000FDD  
                ??_guardar_tecla_presionada 0040                                     postinc0 000FEE  
                                   postinc1 000FE6                                     postinc2 000FDE  
                  __end_of_cambiar_password F19A                        _tamanio_new_password 004B  
                     __end_of_lcd_send_byte E358                        _convertir_a_int_hora E186  
                       __end_of_cambiar_dia EE96                         __end_of_cambiar_mes EDE0  
                                 _PORTAbits 000F80                                   _PORTCbits 000F82  
                          __CFG_DSBOREN$OFF 000000                       ??_mostrar_titulo_menu 000D  
                               ?_lcd_comand 0001              __size_of_guardar_elemento_hora 0074  
                          __CFG_CPUDIV$OSC1 000000               __end_of_guardar_elemento_hora E86C  
                        ingresar_password@i 001E                                   _TRISBbits 000F93  
                               ?_lcd_gotoxy 0005                   __size_of_validar_password 008A  
                 convertir_a_int_hora@array 000E                   convertir_a_int_hora@valor 0010  
                           _LCD_INIT_STRING FECD                            validar_comando@i 0008  
       mostrar_guardar_nuevo_password@tecla 0039                       __size_of_leer_teclado 0106  
                          _current_password 0078                            __CFG_IOL1WAY$OFF 000000  
                 RtccWriteDate@tempDayMonth 000A                         __CFG_MSSP7B_EN$MSK7 000000  
                              cambiar_dia@i 002D                               leer_teclado@i 0043  
                              cambiar_mes@i 002D                            Delay100TCYx@unit 0001  
                          _inicializar_hora E1A4                       ?_convertir_a_int_hora 000E  
                            __end_of___wmul E276                   RtccWriteDate@tempHourWDay 000C  
                         ??_lcd_send_nibble 0001                        __size_of_Delay1KTCYx 0012  
                          __CFG_DSWDTEN$OFF 000000                            cambiar_dia@tecla 002C  
                          cambiar_dia@valor 002F                      __size_of_clear_display 0022  
                       start_initialization E358                          main@ocultar_teclas 0045  
                              _leer_teclado F510                        __end_of_RtccReadDate EC02  
                      __end_of_RtccReadTime E714             __size_of_guardar_nuevo_password 0046  
                  __end_of_ingresar_comando E0D6             __size_of_guardar_elemento_fecha 0074  
                      RtccWriteTime@wasAlrm 0006                             _puntero_funcion 0049  
                      RtccWriteTime@wasWrEn 0007            __end_of_guardar_current_password E46E  
                           ??_cambiar_fecha 000D               guardar_current_password@valor 0003  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                    __size_of_RtccWriteTime 010C                           __size_of_Read_RTC 0136  
                         ??_validar_comando 0005                                 _cambiar_dia EDE0  
                       __size_of_lcd_comand 000E                                 _cambiar_mes ED2A  
                          cambiar_mes@tecla 002C                         __size_of_lcd_gotoxy 0024  
                          cambiar_mes@valor 002F                                    ??___wmul 0005  
                               __pdataBANK0 00CE                           __size_of_RtccWrOn 0012  
                           RtccWriteTime@di 0003                            __CFG_LPT1OSC$OFF 000000  
            __size_of_convertir_a_int_fecha 001E               __end_of_convertir_a_int_fecha E186  
                           _cambiar_horario E644                             _cambiar_minutos F00A  
                               _ALRMCFGbits 000F91                     __end_of_LCD_INIT_STRING FED1  
                               __pbssCOMRAM 0049                __size_of_actualizar_password 0130  
                                 _Write_RTC FACE                            cambiar_minutos@i 002D  
                              _isdigit$2628 0002                           __size_of_caratula 00D6  
                           Delay1KTCYx@unit 0001                 ??_guardar_password_temporal 0001  
                  __size_of_guardar_comando 0070                           __size_of_lcd_init 0080  
     __end_of_confirmar_actualizar_password E24E      __size_of_confirmar_actualizar_password 0024  
             _confirmar_actualizar_password E22A                                 sprintf@flag 001D  
                         __size_of_lcd_putc 004C                                 sprintf@prec 0020  
                   __size_of_imprimir_tecla 0046                                   __pnvBANK0 00E6  
                          _tamanio_password 004D                               _clear_display E1C2  
                          ___lwdiv@dividend 0001                          verficar_password@i 0005  
                             ?_Delay100TCYx 0001            __end_of_guardar_tecla_presionada EB74  
                    ??_convertir_a_int_hora 0012                               __pmediumconst FEC2  
                                  ?___awdiv 0001                      _guardar_nuevo_password E3E2  
                                  ?___lwdiv 0001                                    ?___lwmod 0008  
                                 _encendida 0099                      _guardar_elemento_fecha E784  
                   RtccWriteTime@tempMinSec 0008                 guardar_nuevo_password@valor 0003  
                                 _lcd_putrs E594                               _RtccWriteDate F988  
                             _RtccWriteTime F616                                    ?_isdigit 0001  
                      __CFG_RTCOSC$T1OSCREF 000000                            _validar_password EA60  
                            __size_of_Setup 0048                                  ?_Write_RTC 0001  
                          ___lwdiv@quotient 0005                            clear_display@pos 000B  
                                  ?_sprintf 000D                           _ingresar_password F344  
                          _RtccAlrmTimeDate 0060                              ___wmul@product 0005  
                                  _LATAbits 000F89                                    _LATBbits 000F8A  
                        ?_ingresar_password 0001                              ?_clear_display 000B  
                                  _PIE3bits 000FA3                                   _segundo_d 005E  
                            ??_Delay100TCYx 0001                                   _segundo_u 00F1  
                             ?_cambiar_anio 0001                     __end_of_cambiar_horario E6A6  
                             ?_cambiar_hora 0001                     __end_of_cambiar_minutos F0CA  
                              _new_password 007F                            __CFG_WDTPS$32768 000000  
                       ??_ingresar_password 000B                          RtccWriteDate@wasOn 0005  
                         ?_cambiar_password 0001                   guardar_tecla_presionada@i 003E  
                 _guardar_password_temporal E46E                    validar_comando@candidato 0001  
                        _Rtcc_read_TimeDate 0070                          ??_cambiar_password 0024  
                            ?_RtccWriteDate 0001                                  ?_lcd_putrs 0009  
                         ___wmul@multiplier 0001                              ?_RtccWriteTime 0001  
         __size_of_guardar_current_password 0046                              caratula@titulo 0024  
        confirmar_actualizar_password@tecla 0039                   ?_guardar_current_password 0001  
                                 lcd_init@i 0005                       __size_of_RtccReadDate 008E  
                              ??_lcd_comand 0005                                   lcd_putc@c 0008  
                     __size_of_RtccReadTime 006E                         imprimir_tecla@tecla 0038  
                              ??_lcd_gotoxy 0006                   __end_of_ingresar_password F42A  
                  _mostrar_guardar_password E2CE                    __end_of_inicializar_hora E1C2  
                                 copy_data0 E386                                    _Read_RTC F852  
                              _tamanio_anio 0054                                _tamanio_hora 0058  
                            ??_cambiar_anio 002B                             _lcd_send_nibble E86C  
                                  __Hrparam 0000                              ??_cambiar_hora 002B  
                                  _RtccDate 0050              ?_confirmar_actualizar_password 0001  
                                  __Lrparam 0000                           ??_guardar_comando 0024  
                                  _RtccTime 00BB                                    _RtccWrOn E0E4  
                        __end_of_lcd_comand E0E4                          __end_of_lcd_gotoxy E22A  
             guardar_tecla_presionada@letra 003C                                _RtccReadDate EB74  
                          __size_of___awdiv 0096                                _RtccReadTime E6A6  
               __end_of_mostrar_titulo_menu E132                            __size_of___lwdiv 005C  
                       ingresar_comando@key 003B                            __size_of___lwmod 004C  
          ??_mostrar_guardar_nuevo_password 0039             ?_mostrar_guardar_nuevo_password 0001  
                              _RtccTimeDate 0068                                  sprintf@val 001E  
                                  _activada 00D8                                    _caratula F26E  
                          __size_of_isdigit 0022                             ___lwdiv@divisor 0003  
                               ??_Write_RTC 000E                             ___lwdiv@counter 0007  
         __size_of_guardar_tecla_presionada 008A                                    __ptext10 EDE0  
                                  __ptext11 ED2A                                    __ptext20 E7F8  
                                  __ptext12 EF4C                                    __ptext21 E186  
                                  __ptext13 E2A2                                    __ptext30 E8E2  
                                  __ptext22 E276                                    __ptext14 E46E  
                                  __ptext31 FC5E                                    __ptext23 E784  
                                  __ptext15 E428                                    __ptext40 E11A  
                                  __ptext32 E1E4                                    __ptext24 E168  
                                  __ptext16 E3E2                                    __ptext41 E1C2  
                                  __ptext33 E24E                                    __ptext25 F19A  
                                  __ptext17 E714                                    __ptext50 E86C  
                                  __ptext42 E594                                    __ptext34 E548  
                                  __ptext26 F344                                    __ptext18 E39C  
                                  __ptext51 E0F6                                    __ptext43 E4FC  
                                  __ptext35 E5E8                                    __ptext27 EA60  
                                  __ptext19 E1A4                                    __ptext60 0000  
                                  __ptext52 FACE                                    __ptext44 E206  
                                  __ptext36 F722                                    __ptext28 F26E  
                                  __ptext53 EC94                                    __ptext45 E4B4  
                                  __ptext37 E14A                                    __ptext29 F0CA  
                                  __ptext54 F616                                    __ptext46 E95A  
                                  __ptext38 E644                                    __ptext55 F988  
                                  __ptext47 E108                                    __ptext39 EC02  
                                  __ptext56 E0E4                                    __ptext48 E0D6  
                                  __ptext57 F852                                    __ptext49 E326  
                                  __ptext58 E6A6                                    __ptext59 EB74  
                 ?_guardar_tecla_presionada 003C                             _validar_comando E9DA  
                     _guardar_elemento_hora E7F8                                    _lcd_init E95A  
                                  _lcd_putc E4FC                            __size_of_sprintf 0264  
                           ??_clear_display 000D                           ?_ingresar_comando 0001  
                    __size_of_lcd_send_byte 0032                              _imprimir_tecla E39C  
                             __size_of_atoi 00D4                               __size_of_main 00E6  
                        ??_ingresar_comando 003B                                    _minuto_d 00EF  
                                  _minuto_u 00F0                                    _password 00CE  
                       _actualizar_password F722                                ?_cambiar_dia 0001  
                              ?_cambiar_mes 0001                            ?_cambiar_horario 0001  
                                  _temporal 0086                            ?_cambiar_minutos 0001  
                                  atoi@sign 000B                               ??_Delay1KTCYx 0001  
                           ??_RtccWriteDate 0004                             ??_RtccWriteTime 0004  
              actualizar_password@confirmar 0001                                 ??_lcd_putrs 000B  
                               _OSCTUNEbits 000F9B                                  _INTCONbits 000FF2  
                               _tamanio_dia 0056                        ?_actualizar_password 0001  
                               _tamanio_mes 005A                          RtccWriteTime@wasOn 0005  
                      __end_of_Delay100TCYx E108                                    isdigit@c 0003  
                __size_of_ingresar_password 00E6                      __end_of_imprimir_tecla E3E2  
                                 sprintf@ap 001B                     __end_of_lcd_send_nibble E8E2  
                                 sprintf@sp 000D                            ___lwmod@dividend 0008  
        guardar_elemento_hora@tamanio_array 0026                     ?_guardar_nuevo_password 0001  
                     __end_of_cambiar_fecha EC94                                  _OSCCONbits 000FD3  
                   ?_guardar_elemento_fecha 0024                    __end_of_validar_password EAEA  
                     RtccWriteDate@tempYear 0007                 guardar_elemento_fecha@array 0024  
                         imprimir_tecla@aux 0024                 guardar_elemento_fecha@tecla 002A  
                             _lcd_send_byte E326                                  _RTCCFGbits 000F3F  
       guardar_elemento_fecha@tamanio_array 0026                     __end_of_validar_comando EA60  
                     _convertir_a_int_fecha E168                      validar_comando@validar 0003  
                                  sprintf@c 0023                                    sprintf@f 000F  
                     ??_actualizar_password 0004                             ___lwmod@divisor 000A  
                 verficar_password@verifica 0001                         __end_of_Delay1KTCYx E11A  
                           ___lwmod@counter 000C                        __end_of_cambiar_anio F00A  
        __size_of_guardar_password_temporal 0046                        RtccWriteDate@wasAlrm 0006  
                      __end_of_cambiar_hora EF4C                        RtccWriteDate@wasWrEn 0009  
                    ?_guardar_elemento_hora 0024                      ingresar_password@i_565 001C  
                           ?_imprimir_tecla 0001                      ingresar_password@clear 000C  
            __end_of_guardar_nuevo_password E428              __end_of_guardar_elemento_fecha E7F8  
                     lcd_send_nibble@nibble 0002  
