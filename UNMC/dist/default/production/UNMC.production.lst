

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 05 00:04:30 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   106  0000                     
   107                           	psect	idataCOMRAM
   108  00DB76                     __pidataCOMRAM:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _anio
   112  00DB76  000F               	dw	15
   113                           
   114                           ;initializer for _mes
   115  00DB78  0009               	dw	9
   116                           
   117                           	psect	idataBANK0
   118  00DB80                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _diasem
   122  00DB80  0003               	dw	3
   123                           
   124                           ;initializer for _dia
   125  00DB82  0008               	dw	8
   126                           
   127                           ;initializer for _hora
   128  00DB84  0012               	dw	18
   129                           
   130                           ;initializer for _minuto
   131  00DB86  001E               	dw	30
   132                           
   133                           	psect	mediumconst
   134  00FE8A                     __pmediumconst:
   135                           	opt stack 0
   136  00FE8A  00                 	db	0
   137  00FE8B                     _dpowers:
   138                           	opt stack 0
   139  00FE8B  0001               	dw	1
   140  00FE8D  000A               	dw	10
   141  00FE8F  0064               	dw	100
   142  00FE91  03E8               	dw	1000
   143  00FE93  2710               	dw	10000
   144  00FE95                     __end_of_dpowers:
   145                           	opt stack 0
   146  00FE95                     _LCD_INIT_STRING:
   147                           	opt stack 0
   148  00FE95  28                 	db	40
   149  00FE96  0C                 	db	12
   150  00FE97  01                 	db	1
   151  00FE98  06                 	db	6
   152  00FE99                     __end_of_LCD_INIT_STRING:
   153                           	opt stack 0
   154  00FE99                     STR_17:
   155                           
   156                           ; BSR set to: 15
   157  00FE99  50                 	db	80	;'P'
   158  00FE9A  61                 	db	97	;'a'
   159  00FE9B  73                 	db	115	;'s'
   160  00FE9C  73                 	db	115	;'s'
   161  00FE9D  77                 	db	119	;'w'
   162  00FE9E  6F                 	db	111	;'o'
   163  00FE9F  72                 	db	114	;'r'
   164  00FEA0  64                 	db	100	;'d'
   165  00FEA1  20                 	db	32
   166  00FEA2  61                 	db	97	;'a'
   167  00FEA3  63                 	db	99	;'c'
   168  00FEA4  74                 	db	116	;'t'
   169  00FEA5  75                 	db	117	;'u'
   170  00FEA6  61                 	db	97	;'a'
   171  00FEA7  6C                 	db	108	;'l'
   172  00FEA8  3A                 	db	58	;':'
   173  00FEA9  20                 	db	32
   174  00FEAA  20                 	db	32
   175  00FEAB  20                 	db	32
   176  00FEAC  20                 	db	32
   177  00FEAD  20                 	db	32
   178  00FEAE  20                 	db	32
   179  00FEAF  20                 	db	32
   180  00FEB0  20                 	db	32
   181  00FEB1  20                 	db	32
   182  00FEB2  20                 	db	32
   183  00FEB3  00                 	db	0
   184  00FEB4                     STR_5:
   185                           
   186                           ; BSR set to: 15
   187  00FEB4  20                 	db	32
   188  00FEB5  20                 	db	32
   189  00FEB6  20                 	db	32
   190  00FEB7  20                 	db	32
   191  00FEB8  20                 	db	32
   192  00FEB9  20                 	db	32
   193  00FEBA  20                 	db	32
   194  00FEBB  20                 	db	32
   195  00FEBC  20                 	db	32
   196  00FEBD  20                 	db	32
   197  00FEBE  20                 	db	32
   198  00FEBF  20                 	db	32
   199  00FEC0  20                 	db	32
   200  00FEC1  20                 	db	32
   201  00FEC2  20                 	db	32
   202  00FEC3  20                 	db	32
   203  00FEC4  20                 	db	32
   204  00FEC5  20                 	db	32
   205  00FEC6  20                 	db	32
   206  00FEC7  20                 	db	32
   207  00FEC8  20                 	db	32
   208  00FEC9  20                 	db	32
   209  00FECA  20                 	db	32
   210  00FECB  20                 	db	32
   211  00FECC  20                 	db	32
   212  00FECD  00                 	db	0
   213  00FECE                     STR_19:
   214                           
   215                           ; BSR set to: 15
   216  00FECE  43                 	db	67	;'C'
   217  00FECF  6F                 	db	111	;'o'
   218  00FED0  6E                 	db	110	;'n'
   219  00FED1  66                 	db	102	;'f'
   220  00FED2  69                 	db	105	;'i'
   221  00FED3  72                 	db	114	;'r'
   222  00FED4  6D                 	db	109	;'m'
   223  00FED5  65                 	db	101	;'e'
   224  00FED6  20                 	db	32
   225  00FED7  70                 	db	112	;'p'
   226  00FED8  61                 	db	97	;'a'
   227  00FED9  73                 	db	115	;'s'
   228  00FEDA  73                 	db	115	;'s'
   229  00FEDB  3A                 	db	58	;':'
   230  00FEDC  20                 	db	32
   231  00FEDD  20                 	db	32
   232  00FEDE  20                 	db	32
   233  00FEDF  20                 	db	32
   234  00FEE0  20                 	db	32
   235  00FEE1  20                 	db	32
   236  00FEE2  20                 	db	32
   237  00FEE3  20                 	db	32
   238  00FEE4  00                 	db	0
   239  00FEE5                     STR_15:
   240                           
   241                           ; BSR set to: 15
   242  00FEE5  49                 	db	73	;'I'
   243  00FEE6  6E                 	db	110	;'n'
   244  00FEE7  73                 	db	115	;'s'
   245  00FEE8  65                 	db	101	;'e'
   246  00FEE9  72                 	db	114	;'r'
   247  00FEEA  74                 	db	116	;'t'
   248  00FEEB  65                 	db	101	;'e'
   249  00FEEC  20                 	db	32
   250  00FEED  6D                 	db	109	;'m'
   251  00FEEE  69                 	db	105	;'i'
   252  00FEEF  6E                 	db	110	;'n'
   253  00FEF0  75                 	db	117	;'u'
   254  00FEF1  74                 	db	116	;'t'
   255  00FEF2  6F                 	db	111	;'o'
   256  00FEF3  73                 	db	115	;'s'
   257  00FEF4  3A                 	db	58	;':'
   258  00FEF5  20                 	db	32
   259  00FEF6  20                 	db	32
   260  00FEF7  20                 	db	32
   261  00FEF8  20                 	db	32
   262  00FEF9  20                 	db	32
   263  00FEFA  00                 	db	0
   264  00FEFB                     STR_18:
   265                           
   266                           ; BSR set to: 15
   267  00FEFB  4E                 	db	78	;'N'
   268  00FEFC  75                 	db	117	;'u'
   269  00FEFD  65                 	db	101	;'e'
   270  00FEFE  76                 	db	118	;'v'
   271  00FEFF  6F                 	db	111	;'o'
   272  00FF00  20                 	db	32
   273  00FF01  70                 	db	112	;'p'
   274  00FF02  61                 	db	97	;'a'
   275  00FF03  73                 	db	115	;'s'
   276  00FF04  73                 	db	115	;'s'
   277  00FF05  3A                 	db	58	;':'
   278  00FF06  20                 	db	32
   279  00FF07  20                 	db	32
   280  00FF08  20                 	db	32
   281  00FF09  20                 	db	32
   282  00FF0A  20                 	db	32
   283  00FF0B  20                 	db	32
   284  00FF0C  20                 	db	32
   285  00FF0D  20                 	db	32
   286  00FF0E  00                 	db	0
   287  00FF0F                     STR_16:
   288                           
   289                           ; BSR set to: 15
   290  00FF0F  49                 	db	73	;'I'
   291  00FF10  6E                 	db	110	;'n'
   292  00FF11  73                 	db	115	;'s'
   293  00FF12  65                 	db	101	;'e'
   294  00FF13  72                 	db	114	;'r'
   295  00FF14  74                 	db	116	;'t'
   296  00FF15  65                 	db	101	;'e'
   297  00FF16  20                 	db	32
   298  00FF17  68                 	db	104	;'h'
   299  00FF18  6F                 	db	111	;'o'
   300  00FF19  72                 	db	114	;'r'
   301  00FF1A  61                 	db	97	;'a'
   302  00FF1B  3A                 	db	58	;':'
   303  00FF1C  20                 	db	32
   304  00FF1D  20                 	db	32
   305  00FF1E  20                 	db	32
   306  00FF1F  20                 	db	32
   307  00FF20  20                 	db	32
   308  00FF21  00                 	db	0
   309  00FF22                     STR_12:
   310                           
   311                           ; BSR set to: 15
   312  00FF22  49                 	db	73	;'I'
   313  00FF23  6E                 	db	110	;'n'
   314  00FF24  73                 	db	115	;'s'
   315  00FF25  65                 	db	101	;'e'
   316  00FF26  72                 	db	114	;'r'
   317  00FF27  74                 	db	116	;'t'
   318  00FF28  65                 	db	101	;'e'
   319  00FF29  20                 	db	32
   320  00FF2A  61                 	db	97	;'a'
   321  00FF2B  6E                 	db	110	;'n'
   322  00FF2C  69                 	db	105	;'i'
   323  00FF2D  6F                 	db	111	;'o'
   324  00FF2E  3A                 	db	58	;':'
   325  00FF2F  20                 	db	32
   326  00FF30  20                 	db	32
   327  00FF31  20                 	db	32
   328  00FF32  20                 	db	32
   329  00FF33  20                 	db	32
   330  00FF34  00                 	db	0
   331  00FF35                     STR_32:
   332                           
   333                           ; BSR set to: 15
   334  00FF35  76                 	db	118	;'v'
   335  00FF36  61                 	db	97	;'a'
   336  00FF37  6C                 	db	108	;'l'
   337  00FF38  6F                 	db	111	;'o'
   338  00FF39  72                 	db	114	;'r'
   339  00FF3A  20                 	db	32
   340  00FF3B  3E                 	db	62	;'>'
   341  00FF3C  3D                 	db	61	;'='
   342  00FF3D  25                 	db	37
   343  00FF3E  64                 	db	100	;'d'
   344  00FF3F  20                 	db	32
   345  00FF40  79                 	db	121	;'y'
   346  00FF41  20                 	db	32
   347  00FF42  3C                 	db	60	;'<'
   348  00FF43  3D                 	db	61	;'='
   349  00FF44  25                 	db	37
   350  00FF45  64                 	db	100	;'d'
   351  00FF46  00                 	db	0
   352  00FF47                     STR_14:
   353                           
   354                           ; BSR set to: 15
   355  00FF47  49                 	db	73	;'I'
   356  00FF48  6E                 	db	110	;'n'
   357  00FF49  73                 	db	115	;'s'
   358  00FF4A  65                 	db	101	;'e'
   359  00FF4B  72                 	db	114	;'r'
   360  00FF4C  74                 	db	116	;'t'
   361  00FF4D  65                 	db	101	;'e'
   362  00FF4E  20                 	db	32
   363  00FF4F  64                 	db	100	;'d'
   364  00FF50  69                 	db	105	;'i'
   365  00FF51  61                 	db	97	;'a'
   366  00FF52  3A                 	db	58	;':'
   367  00FF53  20                 	db	32
   368  00FF54  20                 	db	32
   369  00FF55  20                 	db	32
   370  00FF56  20                 	db	32
   371  00FF57  20                 	db	32
   372  00FF58  00                 	db	0
   373  00FF59                     STR_13:
   374                           
   375                           ; BSR set to: 15
   376  00FF59  49                 	db	73	;'I'
   377  00FF5A  6E                 	db	110	;'n'
   378  00FF5B  73                 	db	115	;'s'
   379  00FF5C  65                 	db	101	;'e'
   380  00FF5D  72                 	db	114	;'r'
   381  00FF5E  74                 	db	116	;'t'
   382  00FF5F  65                 	db	101	;'e'
   383  00FF60  20                 	db	32
   384  00FF61  6D                 	db	109	;'m'
   385  00FF62  65                 	db	101	;'e'
   386  00FF63  73                 	db	115	;'s'
   387  00FF64  3A                 	db	58	;':'
   388  00FF65  20                 	db	32
   389  00FF66  20                 	db	32
   390  00FF67  20                 	db	32
   391  00FF68  20                 	db	32
   392  00FF69  20                 	db	32
   393  00FF6A  00                 	db	0
   394  00FF6B                     STR_21:
   395                           
   396                           ; BSR set to: 15
   397  00FF6B  23                 	db	35
   398  00FF6C  23                 	db	35
   399  00FF6D  23                 	db	35
   400  00FF6E  20                 	db	32
   401  00FF6F  41                 	db	65	;'A'
   402  00FF70  43                 	db	67	;'C'
   403  00FF71  54                 	db	84	;'T'
   404  00FF72  49                 	db	73	;'I'
   405  00FF73  56                 	db	86	;'V'
   406  00FF74  41                 	db	65	;'A'
   407  00FF75  44                 	db	68	;'D'
   408  00FF76  41                 	db	65	;'A'
   409  00FF77  20                 	db	32
   410  00FF78  23                 	db	35
   411  00FF79  23                 	db	35
   412  00FF7A  23                 	db	35
   413  00FF7B  00                 	db	0
   414  00FF7C                     STR_20:
   415                           
   416                           ; BSR set to: 15
   417  00FF7C  23                 	db	35
   418  00FF7D  23                 	db	35
   419  00FF7E  23                 	db	35
   420  00FF7F  23                 	db	35
   421  00FF80  20                 	db	32
   422  00FF81  41                 	db	65	;'A'
   423  00FF82  4C                 	db	76	;'L'
   424  00FF83  41                 	db	65	;'A'
   425  00FF84  52                 	db	82	;'R'
   426  00FF85  4D                 	db	77	;'M'
   427  00FF86  41                 	db	65	;'A'
   428  00FF87  20                 	db	32
   429  00FF88  23                 	db	35
   430  00FF89  23                 	db	35
   431  00FF8A  23                 	db	35
   432  00FF8B  23                 	db	35
   433  00FF8C  00                 	db	0
   434  00FF8D                     STR_6:
   435                           
   436                           ; BSR set to: 15
   437  00FF8D  49                 	db	73	;'I'
   438  00FF8E  6E                 	db	110	;'n'
   439  00FF8F  73                 	db	115	;'s'
   440  00FF90  65                 	db	101	;'e'
   441  00FF91  72                 	db	114	;'r'
   442  00FF92  74                 	db	116	;'t'
   443  00FF93  65                 	db	101	;'e'
   444  00FF94  20                 	db	32
   445  00FF95  70                 	db	112	;'p'
   446  00FF96  61                 	db	97	;'a'
   447  00FF97  73                 	db	115	;'s'
   448  00FF98  73                 	db	115	;'s'
   449  00FF99  77                 	db	119	;'w'
   450  00FF9A  6F                 	db	111	;'o'
   451  00FF9B  72                 	db	114	;'r'
   452  00FF9C  64                 	db	100	;'d'
   453  00FF9D  00                 	db	0
   454  00FF9E                     STR_1:
   455                           
   456                           ; BSR set to: 15
   457  00FF9E  25                 	db	37
   458  00FF9F  30                 	db	48	;'0'
   459  00FFA0  32                 	db	50	;'2'
   460  00FFA1  75                 	db	117	;'u'
   461  00FFA2  2F                 	db	47
   462  00FFA3  25                 	db	37
   463  00FFA4  30                 	db	48	;'0'
   464  00FFA5  32                 	db	50	;'2'
   465  00FFA6  75                 	db	117	;'u'
   466  00FFA7  2F                 	db	47
   467  00FFA8  25                 	db	37
   468  00FFA9  30                 	db	48	;'0'
   469  00FFAA  32                 	db	50	;'2'
   470  00FFAB  75                 	db	117	;'u'
   471  00FFAC  00                 	db	0
   472  00FFAD                     STR_2:
   473                           
   474                           ; BSR set to: 15
   475  00FFAD  25                 	db	37
   476  00FFAE  30                 	db	48	;'0'
   477  00FFAF  32                 	db	50	;'2'
   478  00FFB0  75                 	db	117	;'u'
   479  00FFB1  3A                 	db	58	;':'
   480  00FFB2  25                 	db	37
   481  00FFB3  30                 	db	48	;'0'
   482  00FFB4  32                 	db	50	;'2'
   483  00FFB5  75                 	db	117	;'u'
   484  00FFB6  3A                 	db	58	;':'
   485  00FFB7  25                 	db	37
   486  00FFB8  30                 	db	48	;'0'
   487  00FFB9  32                 	db	50	;'2'
   488  00FFBA  75                 	db	117	;'u'
   489  00FFBB  00                 	db	0
   490  00FFBC                     STR_22:
   491                           
   492                           ; BSR set to: 15
   493  00FFBC  50                 	db	80	;'P'
   494  00FFBD  61                 	db	97	;'a'
   495  00FFBE  72                 	db	114	;'r'
   496  00FFBF  61                 	db	97	;'a'
   497  00FFC0  20                 	db	32
   498  00FFC1  65                 	db	101	;'e'
   499  00FFC2  6E                 	db	110	;'n'
   500  00FFC3  63                 	db	99	;'c'
   501  00FFC4  65                 	db	101	;'e'
   502  00FFC5  6E                 	db	110	;'n'
   503  00FFC6  64                 	db	100	;'d'
   504  00FFC7  65                 	db	101	;'e'
   505  00FFC8  72                 	db	114	;'r'
   506  00FFC9  00                 	db	0
   507  00FFCA                     STR_23:
   508                           
   509                           ; BSR set to: 15
   510  00FFCA  50                 	db	80	;'P'
   511  00FFCB  72                 	db	114	;'r'
   512  00FFCC  65                 	db	101	;'e'
   513  00FFCD  73                 	db	115	;'s'
   514  00FFCE  69                 	db	105	;'i'
   515  00FFCF  6F                 	db	111	;'o'
   516  00FFD0  6E                 	db	110	;'n'
   517  00FFD1  65                 	db	101	;'e'
   518  00FFD2  20                 	db	32
   519  00FFD3  41                 	db	65	;'A'
   520  00FFD4  00                 	db	0
   521  00FFD5                     STR_7:
   522                           
   523                           ; BSR set to: 15
   524  00FFD5  45                 	db	69	;'E'
   525  00FFD6  52                 	db	82	;'R'
   526  00FFD7  52                 	db	82	;'R'
   527  00FFD8  4F                 	db	79	;'O'
   528  00FFD9  52                 	db	82	;'R'
   529  00FFDA  20                 	db	32
   530  00FFDB  70                 	db	112	;'p'
   531  00FFDC  61                 	db	97	;'a'
   532  00FFDD  73                 	db	115	;'s'
   533  00FFDE  73                 	db	115	;'s'
   534  00FFDF  00                 	db	0
   535  00FFE0                     STR_24:
   536                           
   537                           ; BSR set to: 15
   538  00FFE0  57                 	db	87	;'W'
   539  00FFE1  65                 	db	101	;'e'
   540  00FFE2  6C                 	db	108	;'l'
   541  00FFE3  63                 	db	99	;'c'
   542  00FFE4  6F                 	db	111	;'o'
   543  00FFE5  6D                 	db	109	;'m'
   544  00FFE6  65                 	db	101	;'e'
   545  00FFE7  20                 	db	32
   546  00FFE8  00                 	db	0
   547  00FFE9                     STR_8:
   548                           
   549                           ; BSR set to: 15
   550  00FFE9  25                 	db	37
   551  00FFEA  30                 	db	48	;'0'
   552  00FFEB  31                 	db	49	;'1'
   553  00FFEC  75                 	db	117	;'u'
   554  00FFED  00                 	db	0
   555  00FFEE                     STR_4:
   556                           
   557                           ; BSR set to: 15
   558  00FFEE  4F                 	db	79	;'O'
   559  00FFEF  46                 	db	70	;'F'
   560  00FFF0  46                 	db	70	;'F'
   561  00FFF1  00                 	db	0
   562  00FFF2                     STR_3:
   563                           
   564                           ; BSR set to: 15
   565  00FFF2  4F                 	db	79	;'O'
   566  00FFF3  4E                 	db	78	;'N'
   567  00FFF4  00                 	db	0
   568  00FFF5                     STR_28:
   569                           
   570                           ; BSR set to: 15
   571  00FFF5  2A                 	db	42
   572  00FFF6  00                 	db	0
   573  0000                     
   574                           ; #config settings
   575  00FFF7  00                 	db	0	; dummy byte at the end
   576  0000                     
   577                           	psect	nvCOMRAM
   578  00005E                     __pnvCOMRAM:
   579                           	opt stack 0
   580  00005E                     _segundo_d:
   581                           	opt stack 0
   582  00005E                     	ds	1
   583                           
   584                           	psect	nvBANK0
   585  0000EB                     __pnvBANK0:
   586                           	opt stack 0
   587  0000EB                     _anio_d:
   588                           	opt stack 0
   589  0000EB                     	ds	1
   590  0000EC                     _anio_u:
   591                           	opt stack 0
   592  0000EC                     	ds	1
   593  0000ED                     _dia_semana:
   594                           	opt stack 0
   595  0000ED                     	ds	1
   596  0000EE                     _fecha_d:
   597                           	opt stack 0
   598  0000EE                     	ds	1
   599  0000EF                     _fecha_u:
   600                           	opt stack 0
   601  0000EF                     	ds	1
   602  0000F0                     _hora_d:
   603                           	opt stack 0
   604  0000F0                     	ds	1
   605  0000F1                     _hora_u:
   606                           	opt stack 0
   607  0000F1                     	ds	1
   608  0000F2                     _mes_d:
   609                           	opt stack 0
   610  0000F2                     	ds	1
   611  0000F3                     _mes_u:
   612                           	opt stack 0
   613  0000F3                     	ds	1
   614  0000F4                     _minuto_d:
   615                           	opt stack 0
   616  0000F4                     	ds	1
   617  0000F5                     _minuto_u:
   618                           	opt stack 0
   619  0000F5                     	ds	1
   620  0000F6                     _segundo_u:
   621                           	opt stack 0
   622  0000F6                     	ds	1
   623  0000                     _ANCON0	set	3912
   624  0000                     _ANCON1	set	3913
   625  0000                     _RTCCFG	set	3903
   626  0000                     _RTCCFGbits	set	3903
   627  0000                     _ADCON0	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ALRMCFGbits	set	3985
   630  0000                     _EECON2	set	4007
   631  0000                     _INTCONbits	set	4082
   632  0000                     _LATAbits	set	3977
   633  0000                     _LATBbits	set	3978
   634  0000                     _LATCbits	set	3979
   635  0000                     _OSCCONbits	set	4051
   636  0000                     _OSCTUNEbits	set	3995
   637  0000                     _PIE3bits	set	4003
   638  0000                     _PORTAbits	set	3968
   639  0000                     _PORTCbits	set	3970
   640  0000                     _RTCVALH	set	3993
   641  0000                     _RTCVALL	set	3992
   642  0000                     _T1CONbits	set	4045
   643  0000                     _TRISA	set	3986
   644  0000                     _TRISB	set	3987
   645  0000                     _TRISBbits	set	3987
   646  0000                     _TRISC	set	3988
   647                           
   648                           	psect	cinit
   649  00E462                     __pcinit:
   650                           	opt stack 0
   651  00E462                     start_initialization:
   652                           	opt stack 0
   653  00E462                     __initialization:
   654                           	opt stack 0
   655                           
   656                           ; Clear objects allocated to BANK1 (16 bytes)
   657  00E462  EE01  F000         	lfsr	0,__pbssBANK1
   658  00E466  0E10               	movlw	16
   659  00E468                     clear_0:
   660  00E468  6AEE               	clrf	postinc0,c
   661  00E46A  06E8               	decf	wreg,f,c
   662  00E46C  E1FD               	bnz	clear_0
   663                           
   664                           ; Clear objects allocated to BANK0 (139 bytes)
   665  00E46E  EE00  F060         	lfsr	0,__pbssBANK0
   666  00E472  0E8B               	movlw	139
   667  00E474                     clear_1:
   668  00E474  6AEE               	clrf	postinc0,c
   669  00E476  06E8               	decf	wreg,f,c
   670  00E478  E1FD               	bnz	clear_1
   671                           
   672                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   673  00E47A  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   674                           
   675                           ; Clear objects allocated to COMRAM (21 bytes)
   676  00E47C  EE00  F045         	lfsr	0,__pbssCOMRAM
   677  00E480  0E15               	movlw	21
   678  00E482                     clear_2:
   679  00E482  6AEE               	clrf	postinc0,c
   680  00E484  06E8               	decf	wreg,f,c
   681  00E486  E1FD               	bnz	clear_2
   682                           
   683                           ; Initialize objects allocated to BANK0 (8 bytes)
   684                           ; load TBLPTR registers with __pidataBANK0
   685  00E488  0E80               	movlw	low __pidataBANK0
   686  00E48A  6EF6               	movwf	tblptrl,c
   687  00E48C  0EDB               	movlw	high __pidataBANK0
   688  00E48E  6EF7               	movwf	tblptrh,c
   689  00E490  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   690  00E492  6EF8               	movwf	tblptru,c
   691  00E494  EE00  F0F7         	lfsr	0,__pdataBANK0
   692  00E498  EE10 F008          	lfsr	1,8
   693  00E49C                     copy_data0:
   694  00E49C  0009               	tblrd		*+
   695  00E49E  CFF5 FFEE          	movff	tablat,postinc0
   696  00E4A2  50E5               	movf	postdec1,w,c
   697  00E4A4  50E1               	movf	fsr1l,w,c
   698  00E4A6  E1FA               	bnz	copy_data0
   699                           
   700                           ; Initialize objects allocated to COMRAM (4 bytes)
   701                           ; load TBLPTR registers with __pidataCOMRAM
   702  00E4A8  0E76               	movlw	low __pidataCOMRAM
   703  00E4AA  6EF6               	movwf	tblptrl,c
   704  00E4AC  0EDB               	movlw	high __pidataCOMRAM
   705  00E4AE  6EF7               	movwf	tblptrh,c
   706  00E4B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   707  00E4B2  6EF8               	movwf	tblptru,c
   708  00E4B4  EE00  F05A         	lfsr	0,__pdataCOMRAM
   709  00E4B8  EE10 F004          	lfsr	1,4
   710  00E4BC                     copy_data1:
   711  00E4BC  0009               	tblrd		*+
   712  00E4BE  CFF5 FFEE          	movff	tablat,postinc0
   713  00E4C2  50E5               	movf	postdec1,w,c
   714  00E4C4  50E1               	movf	fsr1l,w,c
   715  00E4C6  E1FA               	bnz	copy_data1
   716  00E4C8                     end_of_initialization:
   717                           	opt stack 0
   718  00E4C8                     __end_of__initialization:
   719                           	opt stack 0
   720  00E4C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   721  00E4CA  6EF8               	movwf	tblptru,c
   722  00E4CC  0100               	movlb	0
   723  00E4CE  EFD9  F07C         	goto	_main	;jump to C main() function
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           postdec1	equ	0xFE5
   731                           fsr1l	equ	0xFE1
   732                           
   733                           	psect	bitbssCOMRAM
   734  0002F8                     __pbitbssCOMRAM:
   735                           	opt stack 0
   736  0002F8                     _flag:
   737                           	opt stack 0
   738  0002F8                     	ds	1
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           
   748                           	psect	bssCOMRAM
   749  000045                     __pbssCOMRAM:
   750                           	opt stack 0
   751  000045                     _autorizado:
   752                           	opt stack 0
   753  000045                     	ds	2
   754  000047                     _tamanio_comando:
   755                           	opt stack 0
   756  000047                     	ds	2
   757  000049                     _key:
   758                           	opt stack 0
   759  000049                     	ds	1
   760  00004A                     _RtccDate:
   761                           	opt stack 0
   762  00004A                     	ds	4
   763  00004E                     _RtccTime:
   764                           	opt stack 0
   765  00004E                     	ds	4
   766  000052                     _tamanio_dia:
   767                           	opt stack 0
   768  000052                     	ds	2
   769  000054                     _tamanio_hora:
   770                           	opt stack 0
   771  000054                     	ds	2
   772  000056                     _tamanio_mes:
   773                           	opt stack 0
   774  000056                     	ds	2
   775  000058                     _tamanio_password:
   776                           	opt stack 0
   777  000058                     	ds	2
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	dataCOMRAM
   788  00005A                     __pdataCOMRAM:
   789                           	opt stack 0
   790  00005A                     _anio:
   791                           	opt stack 0
   792  00005A                     	ds	2
   793  00005C                     _mes:
   794                           	opt stack 0
   795  00005C                     	ds	2
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           
   805                           	psect	bssBANK0
   806  000060                     __pbssBANK0:
   807                           	opt stack 0
   808  000060                     _RtccTimeDate:
   809                           	opt stack 0
   810  000060                     	ds	8
   811  000068                     _password:
   812                           	opt stack 0
   813  000068                     	ds	7
   814  00006F                     _RtccTimeVal:
   815                           	opt stack 0
   816  00006F                     	ds	4
   817  000073                     	ds	3
   818  000076                     	ds	3
   819  000079                     	ds	3
   820  00007C                     	ds	3
   821  00007F                     	ds	3
   822  000082                     _a:
   823                           	opt stack 0
   824  000082                     	ds	2
   825  000084                     _activada:
   826                           	opt stack 0
   827  000084                     	ds	2
   828  000086                     _b:
   829                           	opt stack 0
   830  000086                     	ds	2
   831  000088                     _c:
   832                           	opt stack 0
   833  000088                     	ds	2
   834  00008A                     _encendida:
   835                           	opt stack 0
   836  00008A                     	ds	2
   837  00008C                     _funcion_pulsador_A:
   838                           	opt stack 0
   839  00008C                     	ds	2
   840  00008E                     _funcion_pulsador_B:
   841                           	opt stack 0
   842  00008E                     	ds	2
   843  000090                     _funcion_pulsador_C:
   844                           	opt stack 0
   845  000090                     	ds	2
   846  000092                     _funcion_pulsador_D:
   847                           	opt stack 0
   848  000092                     	ds	2
   849  000094                     _i:
   850                           	opt stack 0
   851  000094                     	ds	2
   852  000096                     _intentos_fallidos:
   853                           	opt stack 0
   854  000096                     	ds	2
   855  000098                     _j:
   856                           	opt stack 0
   857  000098                     	ds	2
   858  00009A                     _k:
   859                           	opt stack 0
   860  00009A                     	ds	2
   861  00009C                     _ocultar_teclas:
   862                           	opt stack 0
   863  00009C                     	ds	2
   864  00009E                     _puntero_funcion:
   865                           	opt stack 0
   866  00009E                     	ds	2
   867  0000A0                     _segundo:
   868                           	opt stack 0
   869  0000A0                     	ds	2
   870  0000A2                     	ds	2
   871  0000A4                     	ds	2
   872  0000A6                     fecha@valor_max:
   873                           	opt stack 0
   874  0000A6                     	ds	2
   875  0000A8                     fecha@valor_min:
   876                           	opt stack 0
   877  0000A8                     	ds	2
   878  0000AA                     _buffer2:
   879                           	opt stack 0
   880  0000AA                     	ds	20
   881  0000BE                     _current_password:
   882                           	opt stack 0
   883  0000BE                     	ds	7
   884  0000C5                     _new_password:
   885                           	opt stack 0
   886  0000C5                     	ds	7
   887  0000CC                     _temporal:
   888                           	opt stack 0
   889  0000CC                     	ds	7
   890  0000D3                     _comando:
   891                           	opt stack 0
   892  0000D3                     	ds	3
   893  0000D6                     fecha@day:
   894                           	opt stack 0
   895  0000D6                     	ds	3
   896  0000D9                     fecha@hour:
   897                           	opt stack 0
   898  0000D9                     	ds	3
   899  0000DC                     fecha@minutes:
   900                           	opt stack 0
   901  0000DC                     	ds	3
   902  0000DF                     fecha@month:
   903                           	opt stack 0
   904  0000DF                     	ds	3
   905  0000E2                     fecha@year:
   906                           	opt stack 0
   907  0000E2                     	ds	3
   908  0000E5                     _tamanio_anio:
   909                           	opt stack 0
   910  0000E5                     	ds	2
   911  0000E7                     _tamanio_minutos:
   912                           	opt stack 0
   913  0000E7                     	ds	2
   914  0000E9                     _tamanio_new_password:
   915                           	opt stack 0
   916  0000E9                     	ds	2
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           fsr1l	equ	0xFE1
   925                           
   926                           	psect	dataBANK0
   927  0000F7                     __pdataBANK0:
   928                           	opt stack 0
   929  0000F7                     _diasem:
   930                           	opt stack 0
   931  0000F7                     	ds	2
   932  0000F9                     _dia:
   933                           	opt stack 0
   934  0000F9                     	ds	2
   935  0000FB                     _hora:
   936                           	opt stack 0
   937  0000FB                     	ds	2
   938  0000FD                     _minuto:
   939                           	opt stack 0
   940  0000FD                     	ds	2
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK1
   951  000100                     __pbssBANK1:
   952                           	opt stack 0
   953  000100                     _RtccAlrmTimeDate:
   954                           	opt stack 0
   955  000100                     	ds	8
   956  000108                     _Rtcc_read_TimeDate:
   957                           	opt stack 0
   958  000108                     	ds	8
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	cstackCOMRAM
   969  000001                     __pcstackCOMRAM:
   970                           	opt stack 0
   971  000001                     ??_isdigit:
   972  000001                     ??_lcd_send_nibble:
   973  000001                     ?___wmul:
   974                           	opt stack 0
   975  000001                     ?___awdiv:
   976                           	opt stack 0
   977  000001                     ?___awmod:
   978                           	opt stack 0
   979  000001                     ?___lwdiv:
   980                           	opt stack 0
   981  000001                     Delay100TCYx@unit:
   982                           	opt stack 0
   983  000001                     Delay1KTCYx@unit:
   984                           	opt stack 0
   985  000001                     guardar_elemento_arreglo@arreglo:
   986                           	opt stack 0
   987  000001                     verficar_password@verifica:
   988                           	opt stack 0
   989  000001                     RtccReadDate@pDt:
   990                           	opt stack 0
   991  000001                     RtccReadTime@pTm:
   992                           	opt stack 0
   993  000001                     RtccWriteDate@pDt:
   994                           	opt stack 0
   995  000001                     RtccWriteTime@pTm:
   996                           	opt stack 0
   997  000001                     ___wmul@multiplier:
   998                           	opt stack 0
   999  000001                     ___awdiv@dividend:
  1000                           	opt stack 0
  1001  000001                     ___awmod@dividend:
  1002                           	opt stack 0
  1003  000001                     ___lwdiv@dividend:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x0
  1007  000001                     	ds	1
  1008  000002                     lcd_send_nibble@nibble:
  1009                           	opt stack 0
  1010  000002                     _isdigit$2763:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x1
  1014  000002                     	ds	1
  1015  000003                     lcd_send_byte@n:
  1016                           	opt stack 0
  1017  000003                     guardar_elemento_arreglo@valor:
  1018                           	opt stack 0
  1019  000003                     RtccWriteDate@di:
  1020                           	opt stack 0
  1021  000003                     RtccWriteTime@di:
  1022                           	opt stack 0
  1023  000003                     isdigit@c:
  1024                           	opt stack 0
  1025  000003                     validar_password@i:
  1026                           	opt stack 0
  1027  000003                     ___wmul@multiplicand:
  1028                           	opt stack 0
  1029  000003                     ___awdiv@divisor:
  1030                           	opt stack 0
  1031  000003                     ___awmod@divisor:
  1032                           	opt stack 0
  1033  000003                     ___lwdiv@divisor:
  1034                           	opt stack 0
  1035  000003                     RtccReadDate@rTD1:
  1036                           	opt stack 0
  1037  000003                     RtccReadTime@rTD1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 8 bytes @ 0x2
  1041  000003                     	ds	1
  1042  000004                     lcd_send_byte@address:
  1043                           	opt stack 0
  1044  000004                     guardar_elemento_arreglo@tamanio:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x3
  1048  000004                     	ds	1
  1049  000005                     lcd_init@i:
  1050                           	opt stack 0
  1051  000005                     lcd_gotoxy@y:
  1052                           	opt stack 0
  1053  000005                     lcd_comand@d:
  1054                           	opt stack 0
  1055  000005                     RtccWriteDate@wasOn:
  1056                           	opt stack 0
  1057  000005                     RtccWriteTime@wasOn:
  1058                           	opt stack 0
  1059  000005                     ___awdiv@counter:
  1060                           	opt stack 0
  1061  000005                     ___awmod@counter:
  1062                           	opt stack 0
  1063  000005                     verficar_password@i:
  1064                           	opt stack 0
  1065  000005                     ___wmul@product:
  1066                           	opt stack 0
  1067  000005                     ___lwdiv@quotient:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x4
  1071  000005                     	ds	1
  1072  000006                     ??_guardar_elemento_arreglo:
  1073  000006                     lcd_gotoxy@x:
  1074                           	opt stack 0
  1075  000006                     RtccWriteDate@wasAlrm:
  1076                           	opt stack 0
  1077  000006                     RtccWriteTime@wasAlrm:
  1078                           	opt stack 0
  1079  000006                     ___awdiv@sign:
  1080                           	opt stack 0
  1081  000006                     ___awmod@sign:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x5
  1085  000006                     	ds	1
  1086  000007                     ??_obtener_dia_mes:
  1087  000007                     ?_atoi:
  1088                           	opt stack 0
  1089  000007                     lcd_gotoxy@address:
  1090                           	opt stack 0
  1091  000007                     RtccWriteTime@wasWrEn:
  1092                           	opt stack 0
  1093  000007                     ___lwdiv@counter:
  1094                           	opt stack 0
  1095  000007                     RtccWriteDate@tempYear:
  1096                           	opt stack 0
  1097  000007                     atoi@s:
  1098                           	opt stack 0
  1099  000007                     ___awdiv@quotient:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x6
  1103  000007                     	ds	1
  1104  000008                     ?___lwmod:
  1105                           	opt stack 0
  1106  000008                     lcd_putc@c:
  1107                           	opt stack 0
  1108  000008                     guardar_current_password@valor:
  1109                           	opt stack 0
  1110  000008                     guardar_password_temporal@valor:
  1111                           	opt stack 0
  1112  000008                     guardar_nuevo_password@valor:
  1113                           	opt stack 0
  1114  000008                     RtccWriteTime@tempMinSec:
  1115                           	opt stack 0
  1116  000008                     ___lwmod@dividend:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x7
  1120  000008                     	ds	1
  1121  000009                     ??_atoi:
  1122  000009                     RtccWriteDate@wasWrEn:
  1123                           	opt stack 0
  1124  000009                     lcd_putrs@ptr:
  1125                           	opt stack 0
  1126  000009                     confirmar_nuevo_password@confirmar:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x8
  1130  000009                     	ds	1
  1131  00000A                     RtccWriteDate@tempDayMonth:
  1132                           	opt stack 0
  1133  00000A                     RtccWriteTime@tempHourWDay:
  1134                           	opt stack 0
  1135  00000A                     ___lwmod@divisor:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x9
  1139  00000A                     	ds	1
  1140  00000B                     confirmar_nuevo_password@valor:
  1141                           	opt stack 0
  1142  00000B                     atoi@sign:
  1143                           	opt stack 0
  1144  00000B                     clear_display@pos:
  1145                           	opt stack 0
  1146  00000B                     mostrar_titulo_menu@titulo_menu:
  1147                           	opt stack 0
  1148  00000B                     RtccReadDate@rTD0:
  1149                           	opt stack 0
  1150  00000B                     RtccReadTime@rTD0:
  1151                           	opt stack 0
  1152                           
  1153                           ; 8 bytes @ 0xA
  1154  00000B                     	ds	1
  1155  00000C                     ___lwmod@counter:
  1156                           	opt stack 0
  1157  00000C                     RtccWriteDate@tempHourWDay:
  1158                           	opt stack 0
  1159  00000C                     atoi@a:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0xB
  1163  00000C                     	ds	1
  1164  00000D                     ??_menu_ingresar_password:
  1165  00000D                     ?_sprintf:
  1166                           	opt stack 0
  1167  00000D                     menu_cambiar_password@verifica:
  1168                           	opt stack 0
  1169  00000D                     sprintf@sp:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0xC
  1173  00000D                     	ds	1
  1174  00000E                     menu_ingresar_password@i:
  1175                           	opt stack 0
  1176  00000E                     convertir_a_int@array:
  1177                           	opt stack 0
  1178  00000E                     confirmar_nuevo_password@i:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0xD
  1182  00000E                     	ds	1
  1183  00000F                     sprintf@f:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0xE
  1187  00000F                     	ds	1
  1188  000010                     actualizar_password@valor:
  1189                           	opt stack 0
  1190  000010                     convertir_a_int@valor:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0xF
  1194  000010                     	ds	1
  1195  000011                     actualizar_password@confirmar:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x10
  1199  000011                     	ds	1
  1200  000012                     
  1201                           ; 0 bytes @ 0x11
  1202  000012                     	ds	1
  1203  000013                     actualizar_password@j:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x12
  1207  000013                     	ds	3
  1208  000016                     actualiza_elemento@elemento:
  1209                           	opt stack 0
  1210  000016                     actualiza_dia@elemento:
  1211                           	opt stack 0
  1212  000016                     actualizar_hora@elemento:
  1213                           	opt stack 0
  1214  000016                     actualizar_minutos@elemento:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x15
  1218  000016                     	ds	1
  1219  000017                     ??_sprintf:
  1220                           
  1221                           ; 0 bytes @ 0x16
  1222  000017                     	ds	1
  1223  000018                     actualiza_elemento@valor:
  1224                           	opt stack 0
  1225  000018                     actualiza_dia@valor:
  1226                           	opt stack 0
  1227  000018                     actualizar_hora@valor:
  1228                           	opt stack 0
  1229  000018                     actualizar_minutos@valor:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x17
  1233  000018                     	ds	2
  1234  00001A                     
  1235                           ; 0 bytes @ 0x19
  1236  00001A                     	ds	1
  1237  00001B                     sprintf@prec:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x1A
  1241  00001B                     	ds	1
  1242  00001C                     sprintf@ap:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x1B
  1246  00001C                     	ds	2
  1247  00001E                     sprintf@val:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x1D
  1251  00001E                     	ds	2
  1252  000020                     sprintf@flag:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x1F
  1256  000020                     	ds	1
  1257  000021                     sprintf@width:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x20
  1261  000021                     	ds	2
  1262  000023                     sprintf@c:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x22
  1266  000023                     	ds	1
  1267  000024                     ??_guardar_comando:
  1268  000024                     caratula@titulo:
  1269                           	opt stack 0
  1270  000024                     guardar_elemento@array:
  1271                           	opt stack 0
  1272  000024                     imprimir_tecla@aux:
  1273                           	opt stack 0
  1274                           
  1275                           ; 20 bytes @ 0x23
  1276  000024                     	ds	2
  1277  000026                     _caratula$788:
  1278                           	opt stack 0
  1279  000026                     guardar_elemento@tamanio_array:
  1280                           	opt stack 0
  1281  000026                     guardar_comando@aux:
  1282                           	opt stack 0
  1283                           
  1284                           ; 20 bytes @ 0x25
  1285  000026                     	ds	2
  1286  000028                     guardar_elemento@validacion:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x27
  1290  000028                     	ds	2
  1291  00002A                     guardar_elemento@dato_fecha:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x29
  1295  00002A                     	ds	2
  1296  00002C                     guardar_elemento@doit:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x2B
  1300  00002C                     	ds	2
  1301  00002E                     ??_guardar_elemento:
  1302                           
  1303                           ; 0 bytes @ 0x2D
  1304  00002E                     	ds	2
  1305  000030                     guardar_elemento@tecla:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x2F
  1309  000030                     	ds	1
  1310  000031                     guardar_elemento@i:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x30
  1314  000031                     	ds	2
  1315  000033                     guardar_elemento@valor:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x32
  1319  000033                     	ds	2
  1320  000035                     cambiar_dia@validacion:
  1321                           	opt stack 0
  1322  000035                     cambiar_mes@validacion:
  1323                           	opt stack 0
  1324  000035                     cambiar_anio@validacion:
  1325                           	opt stack 0
  1326  000035                     cambiar_hora@validacion:
  1327                           	opt stack 0
  1328  000035                     cambiar_minutos@validacion:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x34
  1332  000035                     	ds	2
  1333  000037                     cambiar_dia@tecla:
  1334                           	opt stack 0
  1335  000037                     cambiar_mes@tecla:
  1336                           	opt stack 0
  1337  000037                     cambiar_anio@tecla:
  1338                           	opt stack 0
  1339  000037                     cambiar_hora@tecla:
  1340                           	opt stack 0
  1341  000037                     cambiar_minutos@tecla:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x36
  1345  000037                     	ds	1
  1346  000038                     imprimir_tecla@tecla:
  1347                           	opt stack 0
  1348  000038                     _cambiar_mes$1486:
  1349                           	opt stack 0
  1350  000038                     _cambiar_anio$1490:
  1351                           	opt stack 0
  1352  000038                     _cambiar_minutos$1509:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x37
  1356  000038                     	ds	1
  1357  000039                     mostrar_guardar_password@tecla:
  1358                           	opt stack 0
  1359  000039                     mostrar_guardar_temporal_password@tecla:
  1360                           	opt stack 0
  1361  000039                     mostrar_guardar_nuevo_password@tecla:
  1362                           	opt stack 0
  1363  000039                     confirmar_actualizar_password@tecla:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x38
  1367  000039                     	ds	1
  1368  00003A                     guardar_comando@tecla:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x39
  1372  00003A                     	ds	1
  1373  00003B                     ingresar_comando@key:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x3A
  1377  00003B                     	ds	1
  1378  00003C                     guardar_tecla_presionada@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x3B
  1382  00003C                     	ds	2
  1383  00003E                     leer_teclado@ocultar:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x3D
  1387  00003E                     	ds	2
  1388  000040                     ??_leer_teclado:
  1389                           
  1390                           ; 0 bytes @ 0x3F
  1391  000040                     	ds	1
  1392  000041                     leer_teclado@i:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x40
  1396  000041                     	ds	2
  1397  000043                     main@ocultar_teclas:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x42
  1401  000043                     	ds	2
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           fsr1l	equ	0xFE1
  1410                           
  1411 ;;
  1412 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1413 ;;
  1414 ;; *************** function _main *****************
  1415 ;; Defined at:
  1416 ;;		line 294 in file "main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  ocultar_tecl    2   66[COMRAM] int 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  2  315[None  ] int 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels required when called:   10
  1436 ;; This function calls:
  1437 ;;		_Read_RTC
  1438 ;;		_Setup
  1439 ;;		_activar_sonido_alarma
  1440 ;;		_atoi
  1441 ;;		_caratula
  1442 ;;		_desactivar_sonido_alarma
  1443 ;;		_inicializar_alarma
  1444 ;;		_inicializar_teclado
  1445 ;;		_lcd_gotoxy
  1446 ;;		_lcd_putrs
  1447 ;;		_leer_teclado
  1448 ;;		_mensaje_alarma_activada
  1449 ;;		_menu_cambiar_fecha
  1450 ;;		_menu_cambiar_horario
  1451 ;;		_menu_cambiar_password
  1452 ;;		_setear_comando_alarma
  1453 ;; This function is called by:
  1454 ;;		Startup code after reset
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text0
  1459  00F9B2                     __ptext0:
  1460                           	opt stack 0
  1461  00F9B2                     _main:
  1462                           	opt stack 21
  1463                           
  1464                           ;main.c: 296: Setup();
  1465                           
  1466                           ; BSR set to: 15
  1467                           ;incstack = 0
  1468  00F9B2  EC3B  F070         	call	_Setup	;wreg free
  1469                           
  1470                           ;main.c: 297: inicializar_teclado();
  1471  00F9B6  EC4D  F06F         	call	_inicializar_teclado	;wreg free
  1472                           
  1473                           ;main.c: 298: inicializar_alarma();
  1474  00F9BA  EC17  F073         	call	_inicializar_alarma	;wreg free
  1475                           
  1476                           ;main.c: 300: lcd_gotoxy(1,1);
  1477  00F9BE  0E01               	movlw	1
  1478  00F9C0  6E05               	movwf	lcd_gotoxy@y,c
  1479  00F9C2  0E01               	movlw	1
  1480  00F9C4  EC15  F06F         	call	_lcd_gotoxy
  1481                           
  1482                           ;main.c: 301: lcd_putrs("Para encender");
  1483  00F9C8  0EBC               	movlw	low STR_22
  1484  00F9CA  6E09               	movwf	lcd_putrs@ptr,c
  1485  00F9CC  0EFF               	movlw	high STR_22
  1486  00F9CE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1487  00F9D0  ECAB  F070         	call	_lcd_putrs	;wreg free
  1488                           
  1489                           ;main.c: 302: lcd_gotoxy(1,2);
  1490  00F9D4  0E02               	movlw	2
  1491  00F9D6  6E05               	movwf	lcd_gotoxy@y,c
  1492  00F9D8  0E01               	movlw	1
  1493  00F9DA  EC15  F06F         	call	_lcd_gotoxy
  1494                           
  1495                           ;main.c: 303: lcd_putrs("Presione A");
  1496  00F9DE  0ECA               	movlw	low STR_23
  1497  00F9E0  6E09               	movwf	lcd_putrs@ptr,c
  1498  00F9E2  0EFF               	movlw	high STR_23
  1499  00F9E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1500  00F9E6  ECAB  F070         	call	_lcd_putrs	;wreg free
  1501                           
  1502                           ;main.c: 305: funcion_pulsador_A = accionar_alarma;
  1503  00F9EA  0E20               	movlw	low _accionar_alarma
  1504  00F9EC  0100               	movlb	0	; () banked
  1505  00F9EE  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1506  00F9F0  0EE3               	movlw	high _accionar_alarma
  1507  00F9F2  0100               	movlb	0	; () banked
  1508  00F9F4  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 306: int ocultar_teclas = 1;
  1512  00F9F6  0E00               	movlw	0
  1513  00F9F8  6E44               	movwf	main@ocultar_teclas+1,c
  1514  00F9FA  0E01               	movlw	1
  1515  00F9FC  6E43               	movwf	main@ocultar_teclas,c
  1516  00F9FE  D000               	goto	l4384
  1517  00FA00                     l4384:
  1518                           
  1519                           ;main.c: 309: {
  1520                           ;main.c: 311: Read_RTC();
  1521  00FA00  EC4B  F079         	call	_Read_RTC	;wreg free
  1522                           
  1523                           ;main.c: 313: if (intentos_fallidos > 2 ){
  1524  00FA04  0100               	movlb	0	; () banked
  1525  00FA06  BF97               	btfsc	(_intentos_fallidos+1)& (0+255),7,b
  1526  00FA08  D01C               	goto	l4396
  1527  00FA0A  0100               	movlb	0	; () banked
  1528  00FA0C  5197               	movf	(_intentos_fallidos+1)& (0+255),w,b
  1529  00FA0E  E105               	bnz	u3750
  1530  00FA10  0E03               	movlw	3
  1531  00FA12  0100               	movlb	0	; () banked
  1532  00FA14  5D96               	subwf	_intentos_fallidos& (0+255),w,b
  1533  00FA16  A0D8               	btfss	status,0,c
  1534  00FA18  D014               	goto	l4396
  1535  00FA1A                     u3750:
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 314: activada = 1;
  1539  00FA1A  0E00               	movlw	0
  1540  00FA1C  0100               	movlb	0	; () banked
  1541  00FA1E  6F85               	movwf	(_activada+1)& (0+255),b
  1542  00FA20  0E01               	movlw	1
  1543  00FA22  6F84               	movwf	_activada& (0+255),b
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;main.c: 315: mensaje_alarma_activada();
  1547  00FA24  ECD0  F06F         	call	_mensaje_alarma_activada	;wreg free
  1548                           
  1549                           ;main.c: 316: funcion_pulsador_A = ingresar_comando;
  1550  00FA28  0E9C               	movlw	low _ingresar_comando
  1551  00FA2A  0100               	movlb	0	; () banked
  1552  00FA2C  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1553  00FA2E  0EDB               	movlw	high _ingresar_comando
  1554  00FA30  0100               	movlb	0	; () banked
  1555  00FA32  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;main.c: 317: funcion_pulsador_B = desactivar_alarma;
  1559  00FA34  0EC4               	movlw	low _desactivar_alarma
  1560  00FA36  0100               	movlb	0	; () banked
  1561  00FA38  6F8E               	movwf	_funcion_pulsador_B& (0+255),b
  1562  00FA3A  0EDE               	movlw	high _desactivar_alarma
  1563  00FA3C  0100               	movlb	0	; () banked
  1564  00FA3E  6F8F               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  1565  00FA40  D000               	goto	l4396
  1566  00FA42                     l4396:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 318: }
  1570                           ;main.c: 320: if (activada)
  1571  00FA42  0100               	movlb	0	; () banked
  1572  00FA44  5184               	movf	_activada& (0+255),w,b
  1573  00FA46  0100               	movlb	0	; () banked
  1574  00FA48  1185               	iorwf	(_activada+1)& (0+255),w,b
  1575  00FA4A  B4D8               	btfsc	status,2,c
  1576  00FA4C  D003               	goto	l4400
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;main.c: 321: activar_sonido_alarma();
  1580  00FA4E  ECBD  F06D         	call	_activar_sonido_alarma	;wreg free
  1581  00FA52  D000               	goto	l4400
  1582  00FA54                     l4400:
  1583                           
  1584                           ;main.c: 322: if (autorizado)
  1585  00FA54  5045               	movf	_autorizado,w,c
  1586  00FA56  1046               	iorwf	_autorizado+1,w,c
  1587  00FA58  B4D8               	btfsc	status,2,c
  1588  00FA5A  D003               	goto	l4404
  1589                           
  1590                           ;main.c: 323: desactivar_sonido_alarma();
  1591  00FA5C  EC3E  F06E         	call	_desactivar_sonido_alarma	;wreg free
  1592  00FA60  D000               	goto	l4404
  1593  00FA62                     l4404:
  1594                           
  1595                           ;main.c: 325: if (autorizado && !encendida){
  1596  00FA62  5045               	movf	_autorizado,w,c
  1597  00FA64  1046               	iorwf	_autorizado+1,w,c
  1598  00FA66  B4D8               	btfsc	status,2,c
  1599  00FA68  D01A               	goto	l4416
  1600  00FA6A  0100               	movlb	0	; () banked
  1601  00FA6C  518A               	movf	_encendida& (0+255),w,b
  1602  00FA6E  0100               	movlb	0	; () banked
  1603  00FA70  118B               	iorwf	(_encendida+1)& (0+255),w,b
  1604  00FA72  A4D8               	btfss	status,2,c
  1605  00FA74  D014               	goto	l4416
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 326: caratula("Welcome ");
  1609  00FA76  0EE0               	movlw	low STR_24
  1610  00FA78  6E24               	movwf	caratula@titulo,c
  1611  00FA7A  0EFF               	movlw	high STR_24
  1612  00FA7C  6E25               	movwf	caratula@titulo+1,c
  1613  00FA7E  ECFC  F076         	call	_caratula	;wreg free
  1614                           
  1615                           ;main.c: 327: LATBbits.LATB1 = 0;;
  1616  00FA82  928A               	bcf	3978,1,c	;volatile
  1617                           
  1618                           ;main.c: 328: puntero_funcion = &ingresar_comando;
  1619  00FA84  0E9C               	movlw	low _ingresar_comando
  1620  00FA86  0100               	movlb	0	; () banked
  1621  00FA88  6F9E               	movwf	_puntero_funcion& (0+255),b
  1622  00FA8A  0EDB               	movlw	high _ingresar_comando
  1623  00FA8C  0100               	movlb	0	; () banked
  1624  00FA8E  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;main.c: 329: funcion_pulsador_A = accionar_alarma;
  1628  00FA90  0E20               	movlw	low _accionar_alarma
  1629  00FA92  0100               	movlb	0	; () banked
  1630  00FA94  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1631  00FA96  0EE3               	movlw	high _accionar_alarma
  1632  00FA98  0100               	movlb	0	; () banked
  1633  00FA9A  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1634  00FA9C  D000               	goto	l4416
  1635  00FA9E                     l4416:
  1636                           
  1637                           ;main.c: 330: }
  1638                           ;main.c: 332: if (autorizado && encendida){
  1639  00FA9E  5045               	movf	_autorizado,w,c
  1640  00FAA0  1046               	iorwf	_autorizado+1,w,c
  1641  00FAA2  B4D8               	btfsc	status,2,c
  1642  00FAA4  D06D               	goto	l4450
  1643  00FAA6  0100               	movlb	0	; () banked
  1644  00FAA8  518A               	movf	_encendida& (0+255),w,b
  1645  00FAAA  0100               	movlb	0	; () banked
  1646  00FAAC  118B               	iorwf	(_encendida+1)& (0+255),w,b
  1647  00FAAE  B4D8               	btfsc	status,2,c
  1648  00FAB0  D067               	goto	l4450
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 333: LATBbits.LATB1 = !LATBbits.LATB1;;
  1652  00FAB2  728A               	btg	3978,1,c	;volatile
  1653                           
  1654                           ;main.c: 335: if(!PORTCbits.RC6){
  1655  00FAB4  BC82               	btfsc	3970,6,c	;volatile
  1656  00FAB6  D003               	goto	l4424
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;main.c: 336: setear_comando_alarma();
  1660  00FAB8  EC5F  F06E         	call	_setear_comando_alarma	;wreg free
  1661  00FABC  D000               	goto	l4424
  1662  00FABE                     l4424:
  1663                           
  1664                           ;main.c: 337: }
  1665                           ;main.c: 340: puntero_funcion = &ingresar_comando;
  1666  00FABE  0E9C               	movlw	low _ingresar_comando
  1667  00FAC0  0100               	movlb	0	; () banked
  1668  00FAC2  6F9E               	movwf	_puntero_funcion& (0+255),b
  1669  00FAC4  0EDB               	movlw	high _ingresar_comando
  1670  00FAC6  0100               	movlb	0	; () banked
  1671  00FAC8  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 341: funcion_pulsador_A = accionar_alarma;
  1675  00FACA  0E20               	movlw	low _accionar_alarma
  1676  00FACC  0100               	movlb	0	; () banked
  1677  00FACE  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  1678  00FAD0  0EE3               	movlw	high _accionar_alarma
  1679  00FAD2  0100               	movlb	0	; () banked
  1680  00FAD4  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 342: funcion_pulsador_C = restaurar_comando;
  1684  00FAD6  0ED8               	movlw	low _restaurar_comando
  1685  00FAD8  0100               	movlb	0	; () banked
  1686  00FADA  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  1687  00FADC  0EDC               	movlw	high _restaurar_comando
  1688  00FADE  0100               	movlb	0	; () banked
  1689  00FAE0  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 343: funcion_pulsador_D = restaurar_comando;
  1693  00FAE2  0ED8               	movlw	low _restaurar_comando
  1694  00FAE4  0100               	movlb	0	; () banked
  1695  00FAE6  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1696  00FAE8  0EDC               	movlw	high _restaurar_comando
  1697  00FAEA  0100               	movlb	0	; () banked
  1698  00FAEC  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1699                           
  1700                           ;main.c: 345: switch (atoi(comando))
  1701  00FAEE  D029               	goto	l4448
  1702  00FAF0                     l4432:
  1703  00FAF0  EC47  F078         	call	_menu_cambiar_password	;wreg free
  1704  00FAF4  D045               	goto	l4450
  1705  00FAF6                     l4434:
  1706  00FAF6  EC67  F077         	call	_menu_cambiar_fecha	;wreg free
  1707  00FAFA  D042               	goto	l4450
  1708  00FAFC                     l4436:
  1709  00FAFC  ECA1  F075         	call	_menu_cambiar_horario	;wreg free
  1710  00FB00  D03F               	goto	l4450
  1711  00FB02                     l4438:
  1712  00FB02  0E00               	movlw	0
  1713  00FB04  0100               	movlb	0	; () banked
  1714  00FB06  6FBE               	movwf	_current_password& (0+255),b
  1715                           
  1716                           ;main.c: 351: autorizado = 0;
  1717  00FB08  0E00               	movlw	0
  1718  00FB0A  6E46               	movwf	_autorizado+1,c
  1719  00FB0C  0E00               	movlw	0
  1720  00FB0E  6E45               	movwf	_autorizado,c
  1721                           
  1722                           ;main.c: 352: intentos_fallidos = 3;
  1723  00FB10  0E00               	movlw	0
  1724  00FB12  0100               	movlb	0	; () banked
  1725  00FB14  6F97               	movwf	(_intentos_fallidos+1)& (0+255),b
  1726  00FB16  0E03               	movlw	3
  1727  00FB18  6F96               	movwf	_intentos_fallidos& (0+255),b
  1728                           
  1729                           ;main.c: 353: break;
  1730  00FB1A  D032               	goto	l4450
  1731  00FB1C                     l4440:
  1732  00FB1C  0EE0               	movlw	low STR_24
  1733  00FB1E  6E24               	movwf	caratula@titulo,c
  1734  00FB20  0EFF               	movlw	high STR_24
  1735  00FB22  6E25               	movwf	caratula@titulo+1,c
  1736  00FB24  ECFC  F076         	call	_caratula	;wreg free
  1737                           
  1738                           ;main.c: 355: if (tamanio_comando >= 2)
  1739  00FB28  BE48               	btfsc	_tamanio_comando+1,7,c
  1740  00FB2A  D02A               	goto	l4450
  1741  00FB2C  5048               	movf	_tamanio_comando+1,w,c
  1742  00FB2E  E104               	bnz	u3830
  1743  00FB30  0E02               	movlw	2
  1744  00FB32  5C47               	subwf	_tamanio_comando,w,c
  1745  00FB34  A0D8               	btfss	status,0,c
  1746  00FB36  D024               	goto	l4450
  1747  00FB38                     u3830:
  1748                           
  1749                           ;main.c: 356: tamanio_comando = 0;
  1750  00FB38  0E00               	movlw	0
  1751  00FB3A  6E48               	movwf	_tamanio_comando+1,c
  1752  00FB3C  0E00               	movlw	0
  1753  00FB3E  6E47               	movwf	_tamanio_comando,c
  1754                           
  1755                           ;main.c: 358: }
  1756                           
  1757                           ;main.c: 357: break;
  1758  00FB40  D01F               	goto	l4450
  1759  00FB42                     l4448:
  1760  00FB42  0ED3               	movlw	low _comando
  1761  00FB44  6E07               	movwf	atoi@s,c
  1762  00FB46  0E00               	movlw	high _comando
  1763  00FB48  6E08               	movwf	atoi@s+1,c
  1764  00FB4A  EC92  F076         	call	_atoi	;wreg free
  1765                           
  1766                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1767                           ; Switch size 1, requested type "space"
  1768                           ; Number of cases is 2, Range of values is 0 to 2
  1769                           ; switch strategies available:
  1770                           ; Name         Instructions Cycles
  1771                           ; simple_byte            7     4 (average)
  1772                           ;	Chosen strategy is simple_byte
  1773  00FB4E  5008               	movf	?_atoi+1,w,c
  1774  00FB50  0A00               	xorlw	0	; case 0
  1775  00FB52  B4D8               	btfsc	status,2,c
  1776  00FB54  D004               	goto	l4512
  1777  00FB56  0A02               	xorlw	2	; case 2
  1778  00FB58  B4D8               	btfsc	status,2,c
  1779  00FB5A  D00C               	goto	l4514
  1780  00FB5C  D7DF               	goto	l4440
  1781  00FB5E                     l4512:
  1782                           
  1783                           ; Switch size 1, requested type "space"
  1784                           ; Number of cases is 3, Range of values is 10 to 12
  1785                           ; switch strategies available:
  1786                           ; Name         Instructions Cycles
  1787                           ; simple_byte           10     6 (average)
  1788                           ;	Chosen strategy is simple_byte
  1789  00FB5E  5007               	movf	?_atoi,w,c
  1790  00FB60  0A0A               	xorlw	10	; case 10
  1791  00FB62  B4D8               	btfsc	status,2,c
  1792  00FB64  D7C5               	goto	l4432
  1793  00FB66  0A01               	xorlw	1	; case 11
  1794  00FB68  B4D8               	btfsc	status,2,c
  1795  00FB6A  D7C5               	goto	l4434
  1796  00FB6C  0A07               	xorlw	7	; case 12
  1797  00FB6E  B4D8               	btfsc	status,2,c
  1798  00FB70  D7C5               	goto	l4436
  1799  00FB72  D7D4               	goto	l4440
  1800  00FB74                     l4514:
  1801                           
  1802                           ; Switch size 1, requested type "space"
  1803                           ; Number of cases is 1, Range of values is 154 to 154
  1804                           ; switch strategies available:
  1805                           ; Name         Instructions Cycles
  1806                           ; simple_byte            4     3 (average)
  1807                           ;	Chosen strategy is simple_byte
  1808  00FB74  5007               	movf	?_atoi,w,c
  1809  00FB76  0A9A               	xorlw	154	; case 154
  1810  00FB78  B4D8               	btfsc	status,2,c
  1811  00FB7A  D7C3               	goto	l4438
  1812  00FB7C  D7CF               	goto	l4440
  1813  00FB7E  D000               	goto	l4450
  1814  00FB80                     l4450:
  1815                           
  1816                           ;main.c: 359: }
  1817                           ;main.c: 361: leer_teclado(ocultar_teclas);
  1818  00FB80  C043  F03E         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1819  00FB84  C044  F03F         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1820  00FB88  EC7F  F07A         	call	_leer_teclado	;wreg free
  1821  00FB8C  D739               	goto	l4384
  1822                           
  1823                           ;main.c: 362: }
  1824                           ;main.c: 363: return 0;
  1825                           ;	Return value of _main is never used
  1826  00FB8E  EF00  F000         	goto	start
  1827  00FB92                     __end_of_main:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _setear_comando_alarma *****************
  1840 ;; Defined at:
  1841 ;;		line 280 in file "main.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;		None
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;		None
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, status,2
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1859 ;;Total ram usage:        0 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text1
  1869  00DCBE                     __ptext1:
  1870                           	opt stack 0
  1871  00DCBE                     _setear_comando_alarma:
  1872                           	opt stack 30
  1873                           
  1874                           ;main.c: 281: comando[0]='6';
  1875                           
  1876                           ;incstack = 0
  1877  00DCBE  0E36               	movlw	54
  1878  00DCC0  0100               	movlb	0	; () banked
  1879  00DCC2  6FD3               	movwf	_comando& (0+255),b
  1880                           
  1881                           ;main.c: 282: comando[1]='6';
  1882  00DCC4  0E36               	movlw	54
  1883  00DCC6  0100               	movlb	0	; () banked
  1884  00DCC8  6FD4               	movwf	(_comando+1)& (0+255),b
  1885                           
  1886                           ;main.c: 283: comando[2]='6';
  1887  00DCCA  0E36               	movlw	54
  1888  00DCCC  0100               	movlb	0	; () banked
  1889  00DCCE  6FD5               	movwf	(_comando+2)& (0+255),b
  1890                           
  1891                           ;main.c: 284: comando[3]=0;
  1892  00DCD0  0E00               	movlw	0
  1893  00DCD2  0100               	movlb	0	; () banked
  1894  00DCD4  6FD6               	movwf	(_comando+3)& (0+255),b
  1895                           
  1896                           ; BSR set to: 0
  1897  00DCD6  0012               	return		;funcret
  1898  00DCD8                     __end_of_setear_comando_alarma:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1l	equ	0xFE1
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _menu_cambiar_password *****************
  1911 ;; Defined at:
  1912 ;;		line 200 in file "main.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  verifica        2   12[COMRAM] int 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;		None               void
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1930 ;;Total ram usage:        2 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    6
  1933 ;; This function calls:
  1934 ;;		_clear_display
  1935 ;;		_mostrar_titulo_menu
  1936 ;;		_verficar_password
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text2
  1943  00F08E                     __ptext2:
  1944                           	opt stack 0
  1945  00F08E                     _menu_cambiar_password:
  1946                           	opt stack 24
  1947                           
  1948                           ;main.c: 202: int verifica;
  1949                           ;main.c: 204: funcion_pulsador_C = cancelar_cambio_password;
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;incstack = 0
  1953  00F08E  0E4E               	movlw	low _cancelar_cambio_password
  1954  00F090  0100               	movlb	0	; () banked
  1955  00F092  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  1956  00F094  0EDE               	movlw	high _cancelar_cambio_password
  1957  00F096  0100               	movlb	0	; () banked
  1958  00F098  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 206: verficar_password(&verifica);
  1962  00F09A  0E0D               	movlw	low menu_cambiar_password@verifica
  1963  00F09C  6E01               	movwf	verficar_password@verifica,c
  1964  00F09E  0E00               	movlw	high menu_cambiar_password@verifica
  1965  00F0A0  6E02               	movwf	verficar_password@verifica+1,c
  1966  00F0A2  EC8D  F073         	call	_verficar_password	;wreg free
  1967                           
  1968                           ;main.c: 207: if(!verifica){
  1969  00F0A6  500D               	movf	menu_cambiar_password@verifica,w,c
  1970  00F0A8  100E               	iorwf	menu_cambiar_password@verifica+1,w,c
  1971  00F0AA  A4D8               	btfss	status,2,c
  1972  00F0AC  D01B               	goto	l4232
  1973                           
  1974                           ;main.c: 208: puntero_funcion = &mostrar_guardar_temporal_password;
  1975  00F0AE  0EEE               	movlw	low _mostrar_guardar_temporal_password
  1976  00F0B0  0100               	movlb	0	; () banked
  1977  00F0B2  6F9E               	movwf	_puntero_funcion& (0+255),b
  1978  00F0B4  0EDE               	movlw	high _mostrar_guardar_temporal_password
  1979  00F0B6  0100               	movlb	0	; () banked
  1980  00F0B8  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  1981                           
  1982                           ;main.c: 209: funcion_pulsador_D = borrar_temporal_password;
  1983  00F0BA  0EF0               	movlw	low _borrar_temporal_password
  1984  00F0BC  0100               	movlb	0	; () banked
  1985  00F0BE  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  1986  00F0C0  0EDB               	movlw	high _borrar_temporal_password
  1987  00F0C2  0100               	movlb	0	; () banked
  1988  00F0C4  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;main.c: 210: mostrar_titulo_menu("Password actual:          ");
  1992  00F0C6  0E99               	movlw	low STR_17
  1993  00F0C8  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  1994  00F0CA  0EFE               	movlw	high STR_17
  1995  00F0CC  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  1996  00F0CE  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  1997                           
  1998                           ;main.c: 211: clear_display(tamanio_password+1);
  1999  00F0D2  0E01               	movlw	1
  2000  00F0D4  2458               	addwf	_tamanio_password,w,c
  2001  00F0D6  6E0B               	movwf	clear_display@pos,c
  2002  00F0D8  0E00               	movlw	0
  2003  00F0DA  2059               	addwfc	_tamanio_password+1,w,c
  2004  00F0DC  6E0C               	movwf	clear_display@pos+1,c
  2005  00F0DE  ECF3  F06E         	call	_clear_display	;wreg free
  2006                           
  2007                           ;main.c: 213: }else {
  2008  00F0E2  0012               	return	
  2009  00F0E4                     l4232:
  2010                           
  2011                           ;main.c: 214: if (tamanio_new_password <= 6){
  2012  00F0E4  0100               	movlb	0	; () banked
  2013  00F0E6  BFEA               	btfsc	(_tamanio_new_password+1)& (0+255),7,b
  2014  00F0E8  D008               	goto	l4234
  2015  00F0EA  0100               	movlb	0	; () banked
  2016  00F0EC  51EA               	movf	(_tamanio_new_password+1)& (0+255),w,b
  2017  00F0EE  E131               	bnz	l4244
  2018  00F0F0  0E07               	movlw	7
  2019  00F0F2  0100               	movlb	0	; () banked
  2020  00F0F4  5DE9               	subwf	_tamanio_new_password& (0+255),w,b
  2021  00F0F6  B0D8               	btfsc	status,0,c
  2022  00F0F8  D02C               	goto	l4244
  2023  00F0FA                     l4234:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;main.c: 215: puntero_funcion = &mostrar_guardar_nuevo_password;
  2027  00F0FA  0E1A               	movlw	low _mostrar_guardar_nuevo_password
  2028  00F0FC  0100               	movlb	0	; () banked
  2029  00F0FE  6F9E               	movwf	_puntero_funcion& (0+255),b
  2030  00F100  0EDF               	movlw	high _mostrar_guardar_nuevo_password
  2031  00F102  0100               	movlb	0	; () banked
  2032  00F104  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2033                           
  2034                           ;main.c: 216: funcion_pulsador_D = borrar_nuevo_password;
  2035  00F106  0E6A               	movlw	low _borrar_nuevo_password
  2036  00F108  0100               	movlb	0	; () banked
  2037  00F10A  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2038  00F10C  0EDC               	movlw	high _borrar_nuevo_password
  2039  00F10E  0100               	movlb	0	; () banked
  2040  00F110  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 218: mostrar_titulo_menu("Nuevo pass:        ");
  2044  00F112  0EFB               	movlw	low STR_18
  2045  00F114  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2046  00F116  0EFE               	movlw	high STR_18
  2047  00F118  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2048  00F11A  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2049                           
  2050                           ;main.c: 219: clear_display(tamanio_new_password+1);
  2051  00F11E  0E01               	movlw	1
  2052  00F120  0100               	movlb	0	; () banked
  2053  00F122  25E9               	addwf	_tamanio_new_password& (0+255),w,b
  2054  00F124  6E0B               	movwf	clear_display@pos,c
  2055  00F126  0E00               	movlw	0
  2056  00F128  0100               	movlb	0	; () banked
  2057  00F12A  21EA               	addwfc	(_tamanio_new_password+1)& (0+255),w,b
  2058  00F12C  6E0C               	movwf	clear_display@pos+1,c
  2059  00F12E  ECF3  F06E         	call	_clear_display	;wreg free
  2060                           
  2061                           ;main.c: 221: if (tamanio_new_password == 6) tamanio_new_password++;
  2062  00F132  0E06               	movlw	6
  2063  00F134  0100               	movlb	0	; () banked
  2064  00F136  19E9               	xorwf	_tamanio_new_password& (0+255),w,b
  2065  00F138  0100               	movlb	0	; () banked
  2066  00F13A  11EA               	iorwf	(_tamanio_new_password+1)& (0+255),w,b
  2067  00F13C  A4D8               	btfss	status,2,c
  2068  00F13E  D004               	goto	l4242
  2069                           
  2070                           ; BSR set to: 0
  2071  00F140  0100               	movlb	0	; () banked
  2072  00F142  4BE9               	infsnz	_tamanio_new_password& (0+255),f,b
  2073  00F144  2BEA               	incf	(_tamanio_new_password+1)& (0+255),f,b
  2074  00F146  D000               	goto	l4242
  2075  00F148                     l4242:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 222: tamanio_password = 0;
  2079  00F148  0E00               	movlw	0
  2080  00F14A  6E59               	movwf	_tamanio_password+1,c
  2081  00F14C  0E00               	movlw	0
  2082  00F14E  6E58               	movwf	_tamanio_password,c
  2083                           
  2084                           ;main.c: 224: }else {
  2085  00F150  0012               	return	
  2086  00F152                     l4244:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 225: puntero_funcion = &confirmar_actualizar_password;
  2090  00F152  0E46               	movlw	low _confirmar_actualizar_password
  2091  00F154  0100               	movlb	0	; () banked
  2092  00F156  6F9E               	movwf	_puntero_funcion& (0+255),b
  2093  00F158  0EDF               	movlw	high _confirmar_actualizar_password
  2094  00F15A  0100               	movlb	0	; () banked
  2095  00F15C  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2096                           
  2097                           ;main.c: 226: funcion_pulsador_D = borrar_current_password;
  2098  00F15E  0E00               	movlw	low _borrar_current_password
  2099  00F160  0100               	movlb	0	; () banked
  2100  00F162  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2101  00F164  0EDC               	movlw	high _borrar_current_password
  2102  00F166  0100               	movlb	0	; () banked
  2103  00F168  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 228: mostrar_titulo_menu("Confirme pass:        ");
  2107  00F16A  0ECE               	movlw	low STR_19
  2108  00F16C  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2109  00F16E  0EFE               	movlw	high STR_19
  2110  00F170  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2111  00F172  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2112                           
  2113                           ;main.c: 229: clear_display(tamanio_password+1);
  2114  00F176  0E01               	movlw	1
  2115  00F178  2458               	addwf	_tamanio_password,w,c
  2116  00F17A  6E0B               	movwf	clear_display@pos,c
  2117  00F17C  0E00               	movlw	0
  2118  00F17E  2059               	addwfc	_tamanio_password+1,w,c
  2119  00F180  6E0C               	movwf	clear_display@pos+1,c
  2120  00F182  ECF3  F06E         	call	_clear_display	;wreg free
  2121  00F186  0012               	return	
  2122  00F188  0012               	return		;funcret
  2123  00F18A                     __end_of_menu_cambiar_password:
  2124                           	opt stack 0
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           postdec1	equ	0xFE5
  2132                           fsr1l	equ	0xFE1
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _verficar_password *****************
  2136 ;; Defined at:
  2137 ;;		line 76 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  verifica        2    0[COMRAM] PTR int 
  2140 ;;		 -> menu_cambiar_password@verifica(2), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  i               2    4[COMRAM] int 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2156 ;;Total ram usage:        6 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_menu_cambiar_password
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text3
  2166  00E71A                     __ptext3:
  2167                           	opt stack 0
  2168  00E71A                     _verficar_password:
  2169                           	opt stack 29
  2170                           
  2171                           ;alarma.c: 78: *verifica=1;
  2172                           
  2173                           ;incstack = 0
  2174  00E71A  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2175  00E71E  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2176  00E722  0E01               	movlw	1
  2177  00E724  6EDE               	movwf	postinc2,c
  2178  00E726  0E00               	movlw	0
  2179  00E728  6EDD               	movwf	postdec2,c
  2180                           
  2181                           ;alarma.c: 79: int i = 0;
  2182  00E72A  0E00               	movlw	0
  2183  00E72C  6E06               	movwf	verficar_password@i+1,c
  2184  00E72E  0E00               	movlw	0
  2185  00E730  6E05               	movwf	verficar_password@i,c
  2186                           
  2187                           ;alarma.c: 80: while (i < 6 && *verifica == 1){
  2188  00E732  D01C               	goto	l4006
  2189  00E734                     l4000:
  2190                           
  2191                           ;alarma.c: 81: if (password[i] != *(temporal+i))
  2192  00E734  0ECC               	movlw	low _temporal
  2193  00E736  2405               	addwf	verficar_password@i,w,c
  2194  00E738  6ED9               	movwf	fsr2l,c
  2195  00E73A  0E00               	movlw	high _temporal
  2196  00E73C  2006               	addwfc	verficar_password@i+1,w,c
  2197  00E73E  6EDA               	movwf	fsr2h,c
  2198  00E740  0E68               	movlw	low _password
  2199  00E742  2405               	addwf	verficar_password@i,w,c
  2200  00E744  6EE1               	movwf	fsr1l,c
  2201  00E746  0E00               	movlw	high _password
  2202  00E748  2006               	addwfc	verficar_password@i+1,w,c
  2203  00E74A  6EE2               	movwf	fsr1h,c
  2204  00E74C  50DE               	movf	postinc2,w,c
  2205  00E74E  18E6               	xorwf	postinc1,w,c
  2206  00E750  B4D8               	btfsc	status,2,c
  2207  00E752  D009               	goto	l4004
  2208                           
  2209                           ;alarma.c: 82: *verifica = 0;
  2210  00E754  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2211  00E758  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2212  00E75C  0E00               	movlw	0
  2213  00E75E  6EDE               	movwf	postinc2,c
  2214  00E760  0E00               	movlw	0
  2215  00E762  6EDD               	movwf	postdec2,c
  2216  00E764  D000               	goto	l4004
  2217  00E766                     l4004:
  2218                           
  2219                           ;alarma.c: 84: i++;
  2220  00E766  4A05               	infsnz	verficar_password@i,f,c
  2221  00E768  2A06               	incf	verficar_password@i+1,f,c
  2222  00E76A  D000               	goto	l4006
  2223  00E76C                     l4006:
  2224  00E76C  BE06               	btfsc	verficar_password@i+1,7,c
  2225  00E76E  D006               	goto	l4008
  2226  00E770  5006               	movf	verficar_password@i+1,w,c
  2227  00E772  E10E               	bnz	l859
  2228  00E774  0E06               	movlw	6
  2229  00E776  5C05               	subwf	verficar_password@i,w,c
  2230  00E778  B0D8               	btfsc	status,0,c
  2231  00E77A  0012               	return	
  2232  00E77C                     l4008:
  2233  00E77C  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  2234  00E780  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  2235  00E784  04DE               	decf	postinc2,w,c
  2236  00E786  10DE               	iorwf	postinc2,w,c
  2237  00E788  A4D8               	btfss	status,2,c
  2238  00E78A  0012               	return	
  2239  00E78C  D7D3               	goto	l4000
  2240  00E78E  0012               	return	
  2241  00E790                     l859:
  2242  00E790  0012               	return		;funcret
  2243  00E792                     __end_of_verficar_password:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           postinc1	equ	0xFE6
  2252                           postdec1	equ	0xFE5
  2253                           fsr1h	equ	0xFE2
  2254                           fsr1l	equ	0xFE1
  2255                           postinc2	equ	0xFDE
  2256                           postdec2	equ	0xFDD
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function _menu_cambiar_horario *****************
  2262 ;; Defined at:
  2263 ;;		line 181 in file "main.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;		None
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;		None
  2268 ;; Return value:  Size  Location     Type
  2269 ;;		None               void
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2281 ;;Total ram usage:        0 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    6
  2284 ;; This function calls:
  2285 ;;		_clear_display
  2286 ;;		_mostrar_titulo_menu
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text4
  2293  00EB42                     __ptext4:
  2294                           	opt stack 0
  2295  00EB42                     _menu_cambiar_horario:
  2296                           	opt stack 24
  2297                           
  2298                           ;main.c: 183: funcion_pulsador_C = cancelar_cambio_hora;
  2299                           
  2300                           ;incstack = 0
  2301  00EB42  0E92               	movlw	low _cancelar_cambio_hora
  2302  00EB44  0100               	movlb	0	; () banked
  2303  00EB46  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  2304  00EB48  0EDB               	movlw	high _cancelar_cambio_hora
  2305  00EB4A  0100               	movlb	0	; () banked
  2306  00EB4C  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2307                           
  2308                           ;main.c: 185: if (tamanio_minutos != 2){
  2309  00EB4E  0E02               	movlw	2
  2310  00EB50  0100               	movlb	0	; () banked
  2311  00EB52  19E7               	xorwf	_tamanio_minutos& (0+255),w,b
  2312  00EB54  0100               	movlb	0	; () banked
  2313  00EB56  11E8               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  2314  00EB58  B4D8               	btfsc	status,2,c
  2315  00EB5A  D01D               	goto	l4212
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;main.c: 186: mostrar_titulo_menu("Inserte minutos:     ");
  2319  00EB5C  0EE5               	movlw	low STR_15
  2320  00EB5E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2321  00EB60  0EFE               	movlw	high STR_15
  2322  00EB62  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2323  00EB64  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2324                           
  2325                           ;main.c: 187: puntero_funcion = cambiar_minutos;
  2326  00EB68  0E44               	movlw	low _cambiar_minutos
  2327  00EB6A  0100               	movlb	0	; () banked
  2328  00EB6C  6F9E               	movwf	_puntero_funcion& (0+255),b
  2329  00EB6E  0EE5               	movlw	high _cambiar_minutos
  2330  00EB70  0100               	movlb	0	; () banked
  2331  00EB72  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 188: funcion_pulsador_D = borrar_minutos;
  2335  00EB74  0E58               	movlw	low _borrar_minutos
  2336  00EB76  0100               	movlb	0	; () banked
  2337  00EB78  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2338  00EB7A  0EDC               	movlw	high _borrar_minutos
  2339  00EB7C  0100               	movlb	0	; () banked
  2340  00EB7E  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2341                           
  2342                           ;main.c: 189: clear_display(tamanio_minutos+1);
  2343  00EB80  0E01               	movlw	1
  2344  00EB82  0100               	movlb	0	; () banked
  2345  00EB84  25E7               	addwf	_tamanio_minutos& (0+255),w,b
  2346  00EB86  6E0B               	movwf	clear_display@pos,c
  2347  00EB88  0E00               	movlw	0
  2348  00EB8A  0100               	movlb	0	; () banked
  2349  00EB8C  21E8               	addwfc	(_tamanio_minutos+1)& (0+255),w,b
  2350  00EB8E  6E0C               	movwf	clear_display@pos+1,c
  2351  00EB90  ECF3  F06E         	call	_clear_display	;wreg free
  2352                           
  2353                           ;main.c: 191: }else if (tamanio_hora != 2){
  2354  00EB94  0012               	return	
  2355  00EB96                     l4212:
  2356  00EB96  0E02               	movlw	2
  2357  00EB98  1854               	xorwf	_tamanio_hora,w,c
  2358  00EB9A  1055               	iorwf	_tamanio_hora+1,w,c
  2359  00EB9C  B4D8               	btfsc	status,2,c
  2360  00EB9E  0012               	return	
  2361                           
  2362                           ;main.c: 192: mostrar_titulo_menu("Inserte hora:     ");
  2363  00EBA0  0E0F               	movlw	low STR_16
  2364  00EBA2  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2365  00EBA4  0EFF               	movlw	high STR_16
  2366  00EBA6  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2367  00EBA8  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2368                           
  2369                           ;main.c: 193: puntero_funcion = cambiar_hora;
  2370  00EBAC  0EC0               	movlw	low _cambiar_hora
  2371  00EBAE  0100               	movlb	0	; () banked
  2372  00EBB0  6F9E               	movwf	_puntero_funcion& (0+255),b
  2373  00EBB2  0EE2               	movlw	high _cambiar_hora
  2374  00EBB4  0100               	movlb	0	; () banked
  2375  00EBB6  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 194: funcion_pulsador_D = borrar_hora;
  2379  00EBB8  0EE0               	movlw	low _borrar_hora
  2380  00EBBA  0100               	movlb	0	; () banked
  2381  00EBBC  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2382  00EBBE  0EDB               	movlw	high _borrar_hora
  2383  00EBC0  0100               	movlb	0	; () banked
  2384  00EBC2  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2385                           
  2386                           ;main.c: 195: clear_display(tamanio_hora+1);
  2387  00EBC4  0E01               	movlw	1
  2388  00EBC6  2454               	addwf	_tamanio_hora,w,c
  2389  00EBC8  6E0B               	movwf	clear_display@pos,c
  2390  00EBCA  0E00               	movlw	0
  2391  00EBCC  2055               	addwfc	_tamanio_hora+1,w,c
  2392  00EBCE  6E0C               	movwf	clear_display@pos+1,c
  2393  00EBD0  ECF3  F06E         	call	_clear_display	;wreg free
  2394  00EBD4  0012               	return	
  2395  00EBD6  0012               	return		;funcret
  2396  00EBD8                     __end_of_menu_cambiar_horario:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           postinc1	equ	0xFE6
  2405                           postdec1	equ	0xFE5
  2406                           fsr1h	equ	0xFE2
  2407                           fsr1l	equ	0xFE1
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           fsr2h	equ	0xFDA
  2411                           fsr2l	equ	0xFD9
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _menu_cambiar_fecha *****************
  2415 ;; Defined at:
  2416 ;;		line 156 in file "main.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;		None               void
  2423 ;; Registers used:
  2424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    6
  2437 ;; This function calls:
  2438 ;;		_clear_display
  2439 ;;		_mostrar_titulo_menu
  2440 ;; This function is called by:
  2441 ;;		_main
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text5
  2446  00EECE                     __ptext5:
  2447                           	opt stack 0
  2448  00EECE                     _menu_cambiar_fecha:
  2449                           	opt stack 24
  2450                           
  2451                           ;main.c: 158: funcion_pulsador_C = cancelar_cambio_fecha;
  2452                           
  2453                           ;incstack = 0
  2454  00EECE  0E88               	movlw	low _cancelar_cambio_fecha
  2455  00EED0  0100               	movlb	0	; () banked
  2456  00EED2  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  2457  00EED4  0EDB               	movlw	high _cancelar_cambio_fecha
  2458  00EED6  0100               	movlb	0	; () banked
  2459  00EED8  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  2460                           
  2461                           ;main.c: 160: if (tamanio_anio != 2){
  2462  00EEDA  0E02               	movlw	2
  2463  00EEDC  0100               	movlb	0	; () banked
  2464  00EEDE  19E5               	xorwf	_tamanio_anio& (0+255),w,b
  2465  00EEE0  0100               	movlb	0	; () banked
  2466  00EEE2  11E6               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  2467  00EEE4  B4D8               	btfsc	status,2,c
  2468  00EEE6  D01D               	goto	l4188
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 161: mostrar_titulo_menu("Inserte anio:     ");
  2472  00EEE8  0E22               	movlw	low STR_12
  2473  00EEEA  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2474  00EEEC  0EFF               	movlw	high STR_12
  2475  00EEEE  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2476  00EEF0  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2477                           
  2478                           ;main.c: 162: puntero_funcion = &cambiar_anio;
  2479  00EEF4  0E92               	movlw	low _cambiar_anio
  2480  00EEF6  0100               	movlb	0	; () banked
  2481  00EEF8  6F9E               	movwf	_puntero_funcion& (0+255),b
  2482  00EEFA  0EE7               	movlw	high _cambiar_anio
  2483  00EEFC  0100               	movlb	0	; () banked
  2484  00EEFE  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 163: funcion_pulsador_D = borrar_anio;
  2488  00EF00  0E46               	movlw	low _borrar_anio
  2489  00EF02  0100               	movlb	0	; () banked
  2490  00EF04  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2491  00EF06  0EDC               	movlw	high _borrar_anio
  2492  00EF08  0100               	movlb	0	; () banked
  2493  00EF0A  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2494                           
  2495                           ;main.c: 164: clear_display(tamanio_anio+1);
  2496  00EF0C  0E01               	movlw	1
  2497  00EF0E  0100               	movlb	0	; () banked
  2498  00EF10  25E5               	addwf	_tamanio_anio& (0+255),w,b
  2499  00EF12  6E0B               	movwf	clear_display@pos,c
  2500  00EF14  0E00               	movlw	0
  2501  00EF16  0100               	movlb	0	; () banked
  2502  00EF18  21E6               	addwfc	(_tamanio_anio+1)& (0+255),w,b
  2503  00EF1A  6E0C               	movwf	clear_display@pos+1,c
  2504  00EF1C  ECF3  F06E         	call	_clear_display	;wreg free
  2505                           
  2506                           ;main.c: 166: }else if (tamanio_mes != 2){
  2507  00EF20  0012               	return	
  2508  00EF22                     l4188:
  2509  00EF22  0E02               	movlw	2
  2510  00EF24  1856               	xorwf	_tamanio_mes,w,c
  2511  00EF26  1057               	iorwf	_tamanio_mes+1,w,c
  2512  00EF28  B4D8               	btfsc	status,2,c
  2513  00EF2A  D01B               	goto	l4196
  2514                           
  2515                           ;main.c: 167: mostrar_titulo_menu("Inserte mes:     ");
  2516  00EF2C  0E59               	movlw	low STR_13
  2517  00EF2E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2518  00EF30  0EFF               	movlw	high STR_13
  2519  00EF32  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2520  00EF34  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2521                           
  2522                           ;main.c: 168: puntero_funcion = &cambiar_mes;
  2523  00EF38  0EF4               	movlw	low _cambiar_mes
  2524  00EF3A  0100               	movlb	0	; () banked
  2525  00EF3C  6F9E               	movwf	_puntero_funcion& (0+255),b
  2526  00EF3E  0EE3               	movlw	high _cambiar_mes
  2527  00EF40  0100               	movlb	0	; () banked
  2528  00EF42  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 169: funcion_pulsador_D = borrar_mes;
  2532  00EF44  0EC0               	movlw	low _borrar_mes
  2533  00EF46  0100               	movlb	0	; () banked
  2534  00EF48  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2535  00EF4A  0EDB               	movlw	high _borrar_mes
  2536  00EF4C  0100               	movlb	0	; () banked
  2537  00EF4E  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2538                           
  2539                           ;main.c: 170: clear_display(tamanio_mes+1);
  2540  00EF50  0E01               	movlw	1
  2541  00EF52  2456               	addwf	_tamanio_mes,w,c
  2542  00EF54  6E0B               	movwf	clear_display@pos,c
  2543  00EF56  0E00               	movlw	0
  2544  00EF58  2057               	addwfc	_tamanio_mes+1,w,c
  2545  00EF5A  6E0C               	movwf	clear_display@pos+1,c
  2546  00EF5C  ECF3  F06E         	call	_clear_display	;wreg free
  2547                           
  2548                           ;main.c: 172: }else if (tamanio_dia != 2){
  2549  00EF60  0012               	return	
  2550  00EF62                     l4196:
  2551  00EF62  0E02               	movlw	2
  2552  00EF64  1852               	xorwf	_tamanio_dia,w,c
  2553  00EF66  1053               	iorwf	_tamanio_dia+1,w,c
  2554  00EF68  B4D8               	btfsc	status,2,c
  2555  00EF6A  0012               	return	
  2556                           
  2557                           ;main.c: 173: mostrar_titulo_menu("Inserte dia:     ");
  2558  00EF6C  0E47               	movlw	low STR_14
  2559  00EF6E  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  2560  00EF70  0EFF               	movlw	high STR_14
  2561  00EF72  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  2562  00EF74  EC53  F06E         	call	_mostrar_titulo_menu	;wreg free
  2563                           
  2564                           ;main.c: 174: puntero_funcion = &cambiar_dia;
  2565  00EF78  0EAA               	movlw	low _cambiar_dia
  2566  00EF7A  0100               	movlb	0	; () banked
  2567  00EF7C  6F9E               	movwf	_puntero_funcion& (0+255),b
  2568  00EF7E  0EE1               	movlw	high _cambiar_dia
  2569  00EF80  0100               	movlb	0	; () banked
  2570  00EF82  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 175: funcion_pulsador_D = borrar_dia;
  2574  00EF84  0ED0               	movlw	low _borrar_dia
  2575  00EF86  0100               	movlb	0	; () banked
  2576  00EF88  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  2577  00EF8A  0EDB               	movlw	high _borrar_dia
  2578  00EF8C  0100               	movlb	0	; () banked
  2579  00EF8E  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  2580                           
  2581                           ;main.c: 176: clear_display(tamanio_dia+1);
  2582  00EF90  0E01               	movlw	1
  2583  00EF92  2452               	addwf	_tamanio_dia,w,c
  2584  00EF94  6E0B               	movwf	clear_display@pos,c
  2585  00EF96  0E00               	movlw	0
  2586  00EF98  2053               	addwfc	_tamanio_dia+1,w,c
  2587  00EF9A  6E0C               	movwf	clear_display@pos+1,c
  2588  00EF9C  ECF3  F06E         	call	_clear_display	;wreg free
  2589  00EFA0  0012               	return	
  2590  00EFA2  0012               	return		;funcret
  2591  00EFA4                     __end_of_menu_cambiar_fecha:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postinc1	equ	0xFE6
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function _mostrar_titulo_menu *****************
  2610 ;; Defined at:
  2611 ;;		line 118 in file "main.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  titulo_menu     2   10[COMRAM] PTR const unsigned char 
  2614 ;;		 -> STR_19(23), STR_18(20), STR_17(27), STR_16(19), 
  2615 ;;		 -> STR_15(22), STR_14(18), STR_13(18), STR_12(19), 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;		None               void
  2620 ;; Registers used:
  2621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2631 ;;Total ram usage:        2 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    5
  2634 ;; This function calls:
  2635 ;;		_lcd_gotoxy
  2636 ;;		_lcd_putrs
  2637 ;; This function is called by:
  2638 ;;		_menu_cambiar_fecha
  2639 ;;		_menu_cambiar_horario
  2640 ;;		_menu_cambiar_password
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text6
  2645  00DCA6                     __ptext6:
  2646                           	opt stack 0
  2647  00DCA6                     _mostrar_titulo_menu:
  2648                           	opt stack 24
  2649                           
  2650                           ;main.c: 119: lcd_gotoxy(1,1);
  2651                           
  2652                           ;incstack = 0
  2653  00DCA6  0E01               	movlw	1
  2654  00DCA8  6E05               	movwf	lcd_gotoxy@y,c
  2655  00DCAA  0E01               	movlw	1
  2656  00DCAC  EC15  F06F         	call	_lcd_gotoxy
  2657                           
  2658                           ;main.c: 120: lcd_putrs(titulo_menu);
  2659  00DCB0  C00B  F009         	movff	mostrar_titulo_menu@titulo_menu,lcd_putrs@ptr
  2660  00DCB4  C00C  F00A         	movff	mostrar_titulo_menu@titulo_menu+1,lcd_putrs@ptr+1
  2661  00DCB8  ECAB  F070         	call	_lcd_putrs	;wreg free
  2662  00DCBC  0012               	return		;funcret
  2663  00DCBE                     __end_of_mostrar_titulo_menu:
  2664                           	opt stack 0
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           postinc0	equ	0xFEE
  2670                           wreg	equ	0xFE8
  2671                           postinc1	equ	0xFE6
  2672                           postdec1	equ	0xFE5
  2673                           fsr1h	equ	0xFE2
  2674                           fsr1l	equ	0xFE1
  2675                           postinc2	equ	0xFDE
  2676                           postdec2	equ	0xFDD
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _mensaje_alarma_activada *****************
  2682 ;; Defined at:
  2683 ;;		line 234 in file "main.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;		None
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;		None
  2688 ;; Return value:  Size  Location     Type
  2689 ;;		None               void
  2690 ;; Registers used:
  2691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;Total ram usage:        0 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    5
  2704 ;; This function calls:
  2705 ;;		_lcd_gotoxy
  2706 ;;		_lcd_putrs
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text7
  2713  00DFA0                     __ptext7:
  2714                           	opt stack 0
  2715  00DFA0                     _mensaje_alarma_activada:
  2716                           	opt stack 25
  2717                           
  2718                           ;main.c: 235: lcd_gotoxy(1,1);
  2719                           
  2720                           ;incstack = 0
  2721  00DFA0  0E01               	movlw	1
  2722  00DFA2  6E05               	movwf	lcd_gotoxy@y,c
  2723  00DFA4  0E01               	movlw	1
  2724  00DFA6  EC15  F06F         	call	_lcd_gotoxy
  2725                           
  2726                           ;main.c: 236: lcd_putrs("#### ALARMA ####");
  2727  00DFAA  0E7C               	movlw	low STR_20
  2728  00DFAC  6E09               	movwf	lcd_putrs@ptr,c
  2729  00DFAE  0EFF               	movlw	high STR_20
  2730  00DFB0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2731  00DFB2  ECAB  F070         	call	_lcd_putrs	;wreg free
  2732                           
  2733                           ;main.c: 237: lcd_gotoxy(1,2);
  2734  00DFB6  0E02               	movlw	2
  2735  00DFB8  6E05               	movwf	lcd_gotoxy@y,c
  2736  00DFBA  0E01               	movlw	1
  2737  00DFBC  EC15  F06F         	call	_lcd_gotoxy
  2738                           
  2739                           ;main.c: 238: lcd_putrs("### ACTIVADA ###");
  2740  00DFC0  0E6B               	movlw	low STR_21
  2741  00DFC2  6E09               	movwf	lcd_putrs@ptr,c
  2742  00DFC4  0EFF               	movlw	high STR_21
  2743  00DFC6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2744  00DFC8  ECAB  F070         	call	_lcd_putrs	;wreg free
  2745  00DFCC  0012               	return		;funcret
  2746  00DFCE                     __end_of_mensaje_alarma_activada:
  2747                           	opt stack 0
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postinc1	equ	0xFE6
  2755                           postdec1	equ	0xFE5
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _leer_teclado *****************
  2765 ;; Defined at:
  2766 ;;		line 57 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  ocultar         2   61[COMRAM] int 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  i               2   64[COMRAM] int 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2783 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2784 ;;Total ram usage:        5 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    9
  2787 ;; This function calls:
  2788 ;;		Absolute function
  2789 ;;		_accionar_alarma
  2790 ;;		_borrar_anio
  2791 ;;		_borrar_current_password
  2792 ;;		_borrar_dia
  2793 ;;		_borrar_hora
  2794 ;;		_borrar_mes
  2795 ;;		_borrar_minutos
  2796 ;;		_borrar_nuevo_password
  2797 ;;		_borrar_temporal_password
  2798 ;;		_cambiar_anio
  2799 ;;		_cambiar_dia
  2800 ;;		_cambiar_hora
  2801 ;;		_cambiar_mes
  2802 ;;		_cambiar_minutos
  2803 ;;		_cancelar_cambio_fecha
  2804 ;;		_cancelar_cambio_hora
  2805 ;;		_cancelar_cambio_password
  2806 ;;		_confirmar_actualizar_password
  2807 ;;		_desactivar_alarma
  2808 ;;		_guardar_tecla_presionada
  2809 ;;		_ingresar_comando
  2810 ;;		_lcd_putrs
  2811 ;;		_mostrar_guardar_nuevo_password
  2812 ;;		_mostrar_guardar_password
  2813 ;;		_mostrar_guardar_temporal_password
  2814 ;;		_restaurar_comando
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text8
  2821  00F4FE                     __ptext8:
  2822                           	opt stack 0
  2823  00F4FE                     _leer_teclado:
  2824                           	opt stack 21
  2825                           
  2826                           ;teclado.c: 58: int i;
  2827                           ;teclado.c: 59: ocultar_teclas = ocultar;
  2828                           
  2829                           ;incstack = 0
  2830  00F4FE  C03E  F09C         	movff	leer_teclado@ocultar,_ocultar_teclas
  2831  00F502  C03F  F09D         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  2832                           
  2833                           ;teclado.c: 61: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  2834  00F506  8089               	bsf	3977,0,c	;volatile
  2835  00F508  9289               	bcf	3977,1,c	;volatile
  2836  00F50A  9489               	bcf	3977,2,c	;volatile
  2837  00F50C  9689               	bcf	3977,3,c	;volatile
  2838  00F50E  0E00               	movlw	0
  2839  00F510  6E42               	movwf	leer_teclado@i+1,c
  2840  00F512  0E01               	movlw	1
  2841  00F514  6E41               	movwf	leer_teclado@i,c
  2842                           
  2843                           ;teclado.c: 62: guardar_tecla_presionada(i);
  2844  00F516  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2845  00F51A  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2846  00F51E  EC47  F074         	call	_guardar_tecla_presionada	;wreg free
  2847                           
  2848                           ;teclado.c: 63: if (PORTCbits.RC2==1){key='A';funcion_pulsador_A();while(PORTCbits.RC2==
      +                          1){};}
  2849  00F522  A482               	btfss	3970,2,c	;volatile
  2850  00F524  D011               	goto	l455
  2851  00F526  0E41               	movlw	65
  2852  00F528  6E49               	movwf	_key,c
  2853  00F52A  D801               	call	u3578
  2854  00F52C  D00B               	goto	l456
  2855  00F52E                     u3578:
  2856  00F52E  0005               	push	
  2857  00F530  0100               	movlb	0	; () banked
  2858  00F532  6EFA               	movwf	pclath,c
  2859  00F534  518C               	movf	_funcion_pulsador_A& (0+255),w,b
  2860  00F536  6EFD               	movwf	tosl,c
  2861  00F538  518D               	movf	(_funcion_pulsador_A+1)& (0+255),w,b
  2862  00F53A  6EFE               	movwf	tosh,c
  2863  00F53C  50F8               	movf	tblptru,w,c
  2864  00F53E  6EFF               	movwf	tosu,c
  2865  00F540  50FA               	movf	pclath,w,c
  2866  00F542  0012               	return		;indir
  2867  00F544                     l456:
  2868  00F544  B482               	btfsc	3970,2,c	;volatile
  2869  00F546  D7FE               	goto	l456
  2870  00F548                     l455:
  2871                           
  2872                           ;teclado.c: 65: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  2873  00F548  9089               	bcf	3977,0,c	;volatile
  2874  00F54A  8289               	bsf	3977,1,c	;volatile
  2875  00F54C  9489               	bcf	3977,2,c	;volatile
  2876  00F54E  9689               	bcf	3977,3,c	;volatile
  2877  00F550  0E00               	movlw	0
  2878  00F552  6E42               	movwf	leer_teclado@i+1,c
  2879  00F554  0E04               	movlw	4
  2880  00F556  6E41               	movwf	leer_teclado@i,c
  2881                           
  2882                           ;teclado.c: 66: guardar_tecla_presionada(i);
  2883  00F558  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2884  00F55C  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2885  00F560  EC47  F074         	call	_guardar_tecla_presionada	;wreg free
  2886                           
  2887                           ;teclado.c: 67: if (PORTCbits.RC2==1){key='B';funcion_pulsador_B();while(PORTCbits.RC2==
      +                          1){};}
  2888  00F564  A482               	btfss	3970,2,c	;volatile
  2889  00F566  D011               	goto	l459
  2890  00F568  0E42               	movlw	66
  2891  00F56A  6E49               	movwf	_key,c
  2892  00F56C  D801               	call	u3608
  2893  00F56E  D00B               	goto	l460
  2894  00F570                     u3608:
  2895  00F570  0005               	push	
  2896  00F572  0100               	movlb	0	; () banked
  2897  00F574  6EFA               	movwf	pclath,c
  2898  00F576  518E               	movf	_funcion_pulsador_B& (0+255),w,b
  2899  00F578  6EFD               	movwf	tosl,c
  2900  00F57A  518F               	movf	(_funcion_pulsador_B+1)& (0+255),w,b
  2901  00F57C  6EFE               	movwf	tosh,c
  2902  00F57E  50F8               	movf	tblptru,w,c
  2903  00F580  6EFF               	movwf	tosu,c
  2904  00F582  50FA               	movf	pclath,w,c
  2905  00F584  0012               	return		;indir
  2906  00F586                     l460:
  2907  00F586  B482               	btfsc	3970,2,c	;volatile
  2908  00F588  D7FE               	goto	l460
  2909  00F58A                     l459:
  2910                           
  2911                           ;teclado.c: 69: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  2912  00F58A  9089               	bcf	3977,0,c	;volatile
  2913  00F58C  9289               	bcf	3977,1,c	;volatile
  2914  00F58E  8489               	bsf	3977,2,c	;volatile
  2915  00F590  9689               	bcf	3977,3,c	;volatile
  2916  00F592  0E00               	movlw	0
  2917  00F594  6E42               	movwf	leer_teclado@i+1,c
  2918  00F596  0E07               	movlw	7
  2919  00F598  6E41               	movwf	leer_teclado@i,c
  2920                           
  2921                           ;teclado.c: 70: guardar_tecla_presionada(i);
  2922  00F59A  C041  F03C         	movff	leer_teclado@i,guardar_tecla_presionada@i
  2923  00F59E  C042  F03D         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  2924  00F5A2  EC47  F074         	call	_guardar_tecla_presionada	;wreg free
  2925                           
  2926                           ;teclado.c: 71: if (PORTCbits.RC2==1){key='C';funcion_pulsador_C();while(PORTCbits.RC2==
      +                          1){};}
  2927  00F5A6  A482               	btfss	3970,2,c	;volatile
  2928  00F5A8  D011               	goto	l463
  2929  00F5AA  0E43               	movlw	67
  2930  00F5AC  6E49               	movwf	_key,c
  2931  00F5AE  D801               	call	u3638
  2932  00F5B0  D00B               	goto	l464
  2933  00F5B2                     u3638:
  2934  00F5B2  0005               	push	
  2935  00F5B4  0100               	movlb	0	; () banked
  2936  00F5B6  6EFA               	movwf	pclath,c
  2937  00F5B8  5190               	movf	_funcion_pulsador_C& (0+255),w,b
  2938  00F5BA  6EFD               	movwf	tosl,c
  2939  00F5BC  5191               	movf	(_funcion_pulsador_C+1)& (0+255),w,b
  2940  00F5BE  6EFE               	movwf	tosh,c
  2941  00F5C0  50F8               	movf	tblptru,w,c
  2942  00F5C2  6EFF               	movwf	tosu,c
  2943  00F5C4  50FA               	movf	pclath,w,c
  2944  00F5C6  0012               	return		;indir
  2945  00F5C8                     l464:
  2946  00F5C8  B482               	btfsc	3970,2,c	;volatile
  2947  00F5CA  D7FE               	goto	l464
  2948  00F5CC                     l463:
  2949                           
  2950                           ;teclado.c: 73: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2951  00F5CC  9089               	bcf	3977,0,c	;volatile
  2952  00F5CE  9289               	bcf	3977,1,c	;volatile
  2953  00F5D0  9489               	bcf	3977,2,c	;volatile
  2954  00F5D2  8689               	bsf	3977,3,c	;volatile
  2955                           
  2956                           ;teclado.c: 74: {
  2957                           ;teclado.c: 75: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  2958  00F5D4  AA80               	btfss	3968,5,c	;volatile
  2959  00F5D6  D00B               	goto	l467
  2960  00F5D8  0E2A               	movlw	42
  2961  00F5DA  6E49               	movwf	_key,c
  2962  00F5DC  0EF5               	movlw	low STR_28
  2963  00F5DE  6E09               	movwf	lcd_putrs@ptr,c
  2964  00F5E0  0EFF               	movlw	high STR_28
  2965  00F5E2  6E0A               	movwf	lcd_putrs@ptr+1,c
  2966  00F5E4  ECAB  F070         	call	_lcd_putrs	;wreg free
  2967  00F5E8  D000               	goto	l468
  2968  00F5EA                     l468:
  2969  00F5EA  BA80               	btfsc	3968,5,c	;volatile
  2970  00F5EC  D7FE               	goto	l468
  2971  00F5EE                     l467:
  2972                           
  2973                           ;teclado.c: 76: if (PORTAbits.RA7==1){key=0;puntero_funcion(key);while(PORTAbits.RA7==1)
      +                          {};}
  2974  00F5EE  AE80               	btfss	3968,7,c	;volatile
  2975  00F5F0  D012               	goto	l471
  2976  00F5F2  0E00               	movlw	0
  2977  00F5F4  6E49               	movwf	_key,c
  2978  00F5F6  D801               	call	u3688
  2979  00F5F8  D00C               	goto	l472
  2980  00F5FA                     u3688:
  2981  00F5FA  0005               	push	
  2982  00F5FC  0100               	movlb	0	; () banked
  2983  00F5FE  6EFA               	movwf	pclath,c
  2984  00F600  519E               	movf	_puntero_funcion& (0+255),w,b
  2985  00F602  6EFD               	movwf	tosl,c
  2986  00F604  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  2987  00F606  6EFE               	movwf	tosh,c
  2988  00F608  50F8               	movf	tblptru,w,c
  2989  00F60A  6EFF               	movwf	tosu,c
  2990  00F60C  50FA               	movf	pclath,w,c
  2991  00F60E  5049               	movf	_key,w,c
  2992  00F610  0012               	return		;indir
  2993  00F612                     l472:
  2994  00F612  BE80               	btfsc	3968,7,c	;volatile
  2995  00F614  D7FE               	goto	l472
  2996  00F616                     l471:
  2997                           
  2998                           ;teclado.c: 77: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  2999  00F616  AC80               	btfss	3968,6,c	;volatile
  3000  00F618  D00B               	goto	l475
  3001  00F61A  0E23               	movlw	35
  3002  00F61C  6E49               	movwf	_key,c
  3003  00F61E  0E7A               	movlw	low (STR_21+15)
  3004  00F620  6E09               	movwf	lcd_putrs@ptr,c
  3005  00F622  0EFF               	movlw	high (STR_21+15)
  3006  00F624  6E0A               	movwf	lcd_putrs@ptr+1,c
  3007  00F626  ECAB  F070         	call	_lcd_putrs
  3008  00F62A  D000               	goto	l476
  3009  00F62C                     l476:
  3010  00F62C  BC80               	btfsc	3968,6,c	;volatile
  3011  00F62E  D7FE               	goto	l476
  3012  00F630                     l475:
  3013                           
  3014                           ;teclado.c: 78: if (PORTCbits.RC2==1){key='D';funcion_pulsador_D();while(PORTCbits.RC2==
      +                          1){};}
  3015  00F630  A482               	btfss	3970,2,c	;volatile
  3016  00F632  D013               	goto	l4364
  3017  00F634  0E44               	movlw	68
  3018  00F636  6E49               	movwf	_key,c
  3019  00F638  D801               	call	u3738
  3020  00F63A  D00B               	goto	l480
  3021  00F63C                     u3738:
  3022  00F63C  0005               	push	
  3023  00F63E  0100               	movlb	0	; () banked
  3024  00F640  6EFA               	movwf	pclath,c
  3025  00F642  5192               	movf	_funcion_pulsador_D& (0+255),w,b
  3026  00F644  6EFD               	movwf	tosl,c
  3027  00F646  5193               	movf	(_funcion_pulsador_D+1)& (0+255),w,b
  3028  00F648  6EFE               	movwf	tosh,c
  3029  00F64A  50F8               	movf	tblptru,w,c
  3030  00F64C  6EFF               	movwf	tosu,c
  3031  00F64E  50FA               	movf	pclath,w,c
  3032  00F650  0012               	return		;indir
  3033  00F652                     l480:
  3034  00F652  A482               	btfss	3970,2,c	;volatile
  3035  00F654  D002               	goto	l4364
  3036  00F656  D7FD               	goto	l480
  3037  00F658  D000               	goto	l4364
  3038  00F65A                     l4364:
  3039                           
  3040                           ;teclado.c: 79: }
  3041                           ;teclado.c: 80: _delay((unsigned long)((98)*(8000000/4000.0)));
  3042  00F65A  0EFF               	movlw	255
  3043  00F65C  6E40               	movwf	??_leer_teclado& (0+255),c
  3044  00F65E  0E8A               	movlw	138
  3045  00F660                     u3857:
  3046  00F660  2EE8               	decfsz	wreg,f,c
  3047  00F662  D7FE               	goto	u3857
  3048  00F664  2E40               	decfsz	??_leer_teclado& (0+255),f,c
  3049  00F666  D7FC               	goto	u3857
  3050  00F668  D000               	nop2	
  3051  00F66A  0012               	return		;funcret
  3052  00F66C                     __end_of_leer_teclado:
  3053                           	opt stack 0
  3054                           tosu	equ	0xFFF
  3055                           tosh	equ	0xFFE
  3056                           tosl	equ	0xFFD
  3057                           pclath	equ	0xFFA
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postinc1	equ	0xFE6
  3065                           postdec1	equ	0xFE5
  3066                           fsr1h	equ	0xFE2
  3067                           fsr1l	equ	0xFE1
  3068                           postinc2	equ	0xFDE
  3069                           postdec2	equ	0xFDD
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           status	equ	0xFD8
  3073                           
  3074 ;; *************** function _guardar_tecla_presionada *****************
  3075 ;; Defined at:
  3076 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  i               2   59[COMRAM] int 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;		None               void
  3083 ;; Registers used:
  3084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3094 ;;Total ram usage:        2 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    8
  3097 ;; This function calls:
  3098 ;;		Absolute function
  3099 ;;		_cambiar_anio
  3100 ;;		_cambiar_dia
  3101 ;;		_cambiar_hora
  3102 ;;		_cambiar_mes
  3103 ;;		_cambiar_minutos
  3104 ;;		_confirmar_actualizar_password
  3105 ;;		_ingresar_comando
  3106 ;;		_mostrar_guardar_nuevo_password
  3107 ;;		_mostrar_guardar_password
  3108 ;;		_mostrar_guardar_temporal_password
  3109 ;; This function is called by:
  3110 ;;		_leer_teclado
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text9
  3115  00E88E                     __ptext9:
  3116                           	opt stack 0
  3117  00E88E                     _guardar_tecla_presionada:
  3118                           	opt stack 21
  3119                           
  3120                           ;teclado.c: 52: if (PORTAbits.RA5==1){key=i;puntero_funcion(key);while(PORTAbits.RA5==1)
      +                          {};}
  3121                           
  3122                           ;incstack = 0
  3123  00E88E  AA80               	btfss	3968,5,c	;volatile
  3124  00E890  D012               	goto	l440
  3125  00E892  C03C  F049         	movff	guardar_tecla_presionada@i,_key
  3126  00E896  D801               	call	u3378
  3127  00E898  D00C               	goto	l441
  3128  00E89A                     u3378:
  3129  00E89A  0005               	push	
  3130  00E89C  0100               	movlb	0	; () banked
  3131  00E89E  6EFA               	movwf	pclath,c
  3132  00E8A0  519E               	movf	_puntero_funcion& (0+255),w,b
  3133  00E8A2  6EFD               	movwf	tosl,c
  3134  00E8A4  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3135  00E8A6  6EFE               	movwf	tosh,c
  3136  00E8A8  50F8               	movf	tblptru,w,c
  3137  00E8AA  6EFF               	movwf	tosu,c
  3138  00E8AC  50FA               	movf	pclath,w,c
  3139  00E8AE  5049               	movf	_key,w,c
  3140  00E8B0  0012               	return		;indir
  3141  00E8B2                     l441:
  3142  00E8B2  BA80               	btfsc	3968,5,c	;volatile
  3143  00E8B4  D7FE               	goto	l441
  3144  00E8B6                     l440:
  3145                           
  3146                           ;teclado.c: 53: if (PORTAbits.RA7==1){key=(i)+1;puntero_funcion(key);while(PORTAbits.RA7
      +                          ==1){};}
  3147  00E8B6  AE80               	btfss	3968,7,c	;volatile
  3148  00E8B8  D012               	goto	l444
  3149  00E8BA  283C               	incf	guardar_tecla_presionada@i,w,c
  3150  00E8BC  6E49               	movwf	_key,c
  3151  00E8BE  D801               	call	u3408
  3152  00E8C0  D00C               	goto	l445
  3153  00E8C2                     u3408:
  3154  00E8C2  0005               	push	
  3155  00E8C4  0100               	movlb	0	; () banked
  3156  00E8C6  6EFA               	movwf	pclath,c
  3157  00E8C8  519E               	movf	_puntero_funcion& (0+255),w,b
  3158  00E8CA  6EFD               	movwf	tosl,c
  3159  00E8CC  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3160  00E8CE  6EFE               	movwf	tosh,c
  3161  00E8D0  50F8               	movf	tblptru,w,c
  3162  00E8D2  6EFF               	movwf	tosu,c
  3163  00E8D4  50FA               	movf	pclath,w,c
  3164  00E8D6  5049               	movf	_key,w,c
  3165  00E8D8  0012               	return		;indir
  3166  00E8DA                     l445:
  3167  00E8DA  BE80               	btfsc	3968,7,c	;volatile
  3168  00E8DC  D7FE               	goto	l445
  3169  00E8DE                     l444:
  3170                           
  3171                           ;teclado.c: 54: if (PORTAbits.RA6==1){key=(i)+2;puntero_funcion(key);while(PORTAbits.RA6
      +                          ==1){};}
  3172  00E8DE  AC80               	btfss	3968,6,c	;volatile
  3173  00E8E0  0012               	return	
  3174  00E8E2  503C               	movf	guardar_tecla_presionada@i,w,c
  3175  00E8E4  0F02               	addlw	2
  3176  00E8E6  6E49               	movwf	_key,c
  3177  00E8E8  D801               	call	u3438
  3178  00E8EA  D00C               	goto	l449
  3179  00E8EC                     u3438:
  3180  00E8EC  0005               	push	
  3181  00E8EE  0100               	movlb	0	; () banked
  3182  00E8F0  6EFA               	movwf	pclath,c
  3183  00E8F2  519E               	movf	_puntero_funcion& (0+255),w,b
  3184  00E8F4  6EFD               	movwf	tosl,c
  3185  00E8F6  519F               	movf	(_puntero_funcion+1)& (0+255),w,b
  3186  00E8F8  6EFE               	movwf	tosh,c
  3187  00E8FA  50F8               	movf	tblptru,w,c
  3188  00E8FC  6EFF               	movwf	tosu,c
  3189  00E8FE  50FA               	movf	pclath,w,c
  3190  00E900  5049               	movf	_key,w,c
  3191  00E902  0012               	return		;indir
  3192  00E904                     l449:
  3193  00E904  AC80               	btfss	3968,6,c	;volatile
  3194  00E906  0012               	return	
  3195  00E908  D7FD               	goto	l449
  3196  00E90A  0012               	return	
  3197  00E90C  0012               	return		;funcret
  3198  00E90E                     __end_of_guardar_tecla_presionada:
  3199                           	opt stack 0
  3200                           tosu	equ	0xFFF
  3201                           tosh	equ	0xFFE
  3202                           tosl	equ	0xFFD
  3203                           pclath	equ	0xFFA
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postinc1	equ	0xFE6
  3211                           postdec1	equ	0xFE5
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           postinc2	equ	0xFDE
  3215                           postdec2	equ	0xFDD
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _accionar_alarma *****************
  3221 ;; Defined at:
  3222 ;;		line 262 in file "main.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;		None
  3227 ;; Return value:  Size  Location     Type
  3228 ;;		None               void
  3229 ;; Registers used:
  3230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3240 ;;Total ram usage:        0 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    7
  3243 ;; This function calls:
  3244 ;;		_clear_display
  3245 ;;		_menu_ingresar_password
  3246 ;; This function is called by:
  3247 ;;		_main
  3248 ;;		_leer_teclado
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text10
  3253  00E320                     __ptext10:
  3254                           	opt stack 0
  3255  00E320                     _accionar_alarma:
  3256                           	opt stack 22
  3257                           
  3258                           ;main.c: 264: *current_password = 0;
  3259                           
  3260                           ;incstack = 0
  3261  00E320  0E00               	movlw	0
  3262  00E322  0100               	movlb	0	; () banked
  3263  00E324  6FBE               	movwf	_current_password& (0+255),b
  3264                           
  3265                           ;main.c: 265: autorizado = 0;
  3266  00E326  0E00               	movlw	0
  3267  00E328  6E46               	movwf	_autorizado+1,c
  3268  00E32A  0E00               	movlw	0
  3269  00E32C  6E45               	movwf	_autorizado,c
  3270                           
  3271                           ;main.c: 266: tamanio_password = 0;
  3272  00E32E  0E00               	movlw	0
  3273  00E330  6E59               	movwf	_tamanio_password+1,c
  3274  00E332  0E00               	movlw	0
  3275  00E334  6E58               	movwf	_tamanio_password,c
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 268: if(encendida){
  3279  00E336  0100               	movlb	0	; () banked
  3280  00E338  518A               	movf	_encendida& (0+255),w,b
  3281  00E33A  0100               	movlb	0	; () banked
  3282  00E33C  118B               	iorwf	(_encendida+1)& (0+255),w,b
  3283  00E33E  B4D8               	btfsc	status,2,c
  3284  00E340  D005               	goto	l4026
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 269: encendida = 0;
  3288  00E342  0E00               	movlw	0
  3289  00E344  0100               	movlb	0	; () banked
  3290  00E346  6F8B               	movwf	(_encendida+1)& (0+255),b
  3291  00E348  0E00               	movlw	0
  3292  00E34A  D004               	goto	L1
  3293  00E34C                     l4026:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 271: encendida = 1;
  3297  00E34C  0E00               	movlw	0
  3298  00E34E  0100               	movlb	0	; () banked
  3299  00E350  6F8B               	movwf	(_encendida+1)& (0+255),b
  3300  00E352  0E01               	movlw	1
  3301  00E354                     L1:
  3302  00E354  6F8A               	movwf	_encendida& (0+255),b
  3303  00E356  D000               	goto	l4028
  3304  00E358                     l4028:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 273: puntero_funcion = mostrar_guardar_password;
  3308  00E358  0ECE               	movlw	low _mostrar_guardar_password
  3309  00E35A  0100               	movlb	0	; () banked
  3310  00E35C  6F9E               	movwf	_puntero_funcion& (0+255),b
  3311  00E35E  0EDF               	movlw	high _mostrar_guardar_password
  3312  00E360  0100               	movlb	0	; () banked
  3313  00E362  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 274: funcion_pulsador_A = ingresar_comando;
  3317  00E364  0E9C               	movlw	low _ingresar_comando
  3318  00E366  0100               	movlb	0	; () banked
  3319  00E368  6F8C               	movwf	_funcion_pulsador_A& (0+255),b
  3320  00E36A  0EDB               	movlw	high _ingresar_comando
  3321  00E36C  0100               	movlb	0	; () banked
  3322  00E36E  6F8D               	movwf	(_funcion_pulsador_A+1)& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 275: clear_display(tamanio_password+1);
  3326  00E370  0E01               	movlw	1
  3327  00E372  2458               	addwf	_tamanio_password,w,c
  3328  00E374  6E0B               	movwf	clear_display@pos,c
  3329  00E376  0E00               	movlw	0
  3330  00E378  2059               	addwfc	_tamanio_password+1,w,c
  3331  00E37A  6E0C               	movwf	clear_display@pos+1,c
  3332  00E37C  ECF3  F06E         	call	_clear_display
  3333                           
  3334                           ;main.c: 276: menu_ingresar_password();
  3335  00E380  EC38  F076         	call	_menu_ingresar_password	;wreg free
  3336  00E384  0012               	return		;funcret
  3337  00E386                     __end_of_accionar_alarma:
  3338                           	opt stack 0
  3339                           tosu	equ	0xFFF
  3340                           tosh	equ	0xFFE
  3341                           tosl	equ	0xFFD
  3342                           pclath	equ	0xFFA
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postinc1	equ	0xFE6
  3350                           postdec1	equ	0xFE5
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _ingresar_comando *****************
  3360 ;; Defined at:
  3361 ;;		line 152 in file "main.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  key             1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  key             1   58[COMRAM] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;		None               void
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3378 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3379 ;;Total ram usage:        1 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    3
  3382 ;; This function calls:
  3383 ;;		_guardar_comando
  3384 ;; This function is called by:
  3385 ;;		_accionar_alarma
  3386 ;;		_main
  3387 ;;		_guardar_tecla_presionada
  3388 ;;		_leer_teclado
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text11
  3393  00DB9C                     __ptext11:
  3394                           	opt stack 0
  3395  00DB9C                     _ingresar_comando:
  3396                           	opt stack 26
  3397                           
  3398                           ;incstack = 0
  3399                           ;ingresar_comando@key stored from wreg
  3400  00DB9C  6E3B               	movwf	ingresar_comando@key,c
  3401                           
  3402                           ;main.c: 153: guardar_comando(key);
  3403  00DB9E  503B               	movf	ingresar_comando@key,w,c
  3404  00DBA0  EC30  F071         	call	_guardar_comando
  3405  00DBA4  0012               	return		;funcret
  3406  00DBA6                     __end_of_ingresar_comando:
  3407                           	opt stack 0
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           pclath	equ	0xFFA
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postinc1	equ	0xFE6
  3419                           postdec1	equ	0xFE5
  3420                           fsr1h	equ	0xFE2
  3421                           fsr1l	equ	0xFE1
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _confirmar_actualizar_password *****************
  3429 ;; Defined at:
  3430 ;;		line 145 in file "main.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  tecla           1    wreg     unsigned char 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  tecla           1   56[COMRAM] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;		None               void
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3445 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3448 ;;Total ram usage:        1 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    6
  3451 ;; This function calls:
  3452 ;;		_actualizar_password
  3453 ;;		_imprimir_tecla
  3454 ;;		_sprintf
  3455 ;; This function is called by:
  3456 ;;		_menu_cambiar_password
  3457 ;;		_guardar_tecla_presionada
  3458 ;;		_leer_teclado
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text12
  3463  00DF46                     __ptext12:
  3464                           	opt stack 0
  3465  00DF46                     _confirmar_actualizar_password:
  3466                           	opt stack 22
  3467                           
  3468                           ;incstack = 0
  3469                           ;confirmar_actualizar_password@tecla stored from wreg
  3470  00DF46  6E39               	movwf	confirmar_actualizar_password@tecla,c
  3471                           
  3472                           ;main.c: 147: imprimir_tecla(tecla);
  3473  00DF48  5039               	movf	confirmar_actualizar_password@tecla,w,c
  3474  00DF4A  EC18  F070         	call	_imprimir_tecla
  3475                           
  3476                           ;main.c: 148: sprintf(buffer2,"%01u",tecla);
  3477  00DF4E  0EAA               	movlw	low _buffer2
  3478  00DF50  6E0D               	movwf	sprintf@sp,c
  3479  00DF52  0E00               	movlw	high _buffer2
  3480  00DF54  6E0E               	movwf	sprintf@sp+1,c
  3481  00DF56  0EE9               	movlw	low STR_8
  3482  00DF58  6E0F               	movwf	sprintf@f,c
  3483  00DF5A  0EFF               	movlw	high STR_8
  3484  00DF5C  6E10               	movwf	sprintf@f+1,c
  3485  00DF5E  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  3486  00DF62  6A12               	clrf	?_sprintf+5,c
  3487  00DF64  ECC9  F07D         	call	_sprintf	;wreg free
  3488                           
  3489                           ;main.c: 149: actualizar_password(buffer2[0]);
  3490  00DF68  0100               	movlb	0	; () banked
  3491  00DF6A  51AA               	movf	_buffer2& (0+255),w,b
  3492  00DF6C  ECEC  F075         	call	_actualizar_password
  3493  00DF70  0012               	return		;funcret
  3494  00DF72                     __end_of_confirmar_actualizar_password:
  3495                           	opt stack 0
  3496                           tosu	equ	0xFFF
  3497                           tosh	equ	0xFFE
  3498                           tosl	equ	0xFFD
  3499                           pclath	equ	0xFFA
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           postinc0	equ	0xFEE
  3505                           wreg	equ	0xFE8
  3506                           postinc1	equ	0xFE6
  3507                           postdec1	equ	0xFE5
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _mostrar_guardar_nuevo_password *****************
  3517 ;; Defined at:
  3518 ;;		line 138 in file "main.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  tecla           1    wreg     unsigned char 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  tecla           1   56[COMRAM] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;		None               void
  3525 ;; Registers used:
  3526 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3536 ;;Total ram usage:        1 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    6
  3539 ;; This function calls:
  3540 ;;		_guardar_nuevo_password
  3541 ;;		_imprimir_tecla
  3542 ;;		_sprintf
  3543 ;; This function is called by:
  3544 ;;		_menu_cambiar_password
  3545 ;;		_guardar_tecla_presionada
  3546 ;;		_leer_teclado
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text13
  3551  00DF1A                     __ptext13:
  3552                           	opt stack 0
  3553  00DF1A                     _mostrar_guardar_nuevo_password:
  3554                           	opt stack 23
  3555                           
  3556                           ;incstack = 0
  3557                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  3558  00DF1A  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  3559                           
  3560                           ;main.c: 140: imprimir_tecla(tecla);
  3561  00DF1C  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  3562  00DF1E  EC18  F070         	call	_imprimir_tecla
  3563                           
  3564                           ;main.c: 141: sprintf(buffer2,"%01u",tecla);
  3565  00DF22  0EAA               	movlw	low _buffer2
  3566  00DF24  6E0D               	movwf	sprintf@sp,c
  3567  00DF26  0E00               	movlw	high _buffer2
  3568  00DF28  6E0E               	movwf	sprintf@sp+1,c
  3569  00DF2A  0EE9               	movlw	low STR_8
  3570  00DF2C  6E0F               	movwf	sprintf@f,c
  3571  00DF2E  0EFF               	movlw	high STR_8
  3572  00DF30  6E10               	movwf	sprintf@f+1,c
  3573  00DF32  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  3574  00DF36  6A12               	clrf	?_sprintf+5,c
  3575  00DF38  ECC9  F07D         	call	_sprintf	;wreg free
  3576                           
  3577                           ;main.c: 142: guardar_nuevo_password(*buffer2);
  3578  00DF3C  0100               	movlb	0	; () banked
  3579  00DF3E  51AA               	movf	_buffer2& (0+255),w,b
  3580  00DF40  EC88  F06E         	call	_guardar_nuevo_password
  3581  00DF44  0012               	return		;funcret
  3582  00DF46                     __end_of_mostrar_guardar_nuevo_password:
  3583                           	opt stack 0
  3584                           tosu	equ	0xFFF
  3585                           tosh	equ	0xFFE
  3586                           tosl	equ	0xFFD
  3587                           pclath	equ	0xFFA
  3588                           tblptru	equ	0xFF8
  3589                           tblptrh	equ	0xFF7
  3590                           tblptrl	equ	0xFF6
  3591                           tablat	equ	0xFF5
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           postinc1	equ	0xFE6
  3595                           postdec1	equ	0xFE5
  3596                           fsr1h	equ	0xFE2
  3597                           fsr1l	equ	0xFE1
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _mostrar_guardar_password *****************
  3605 ;; Defined at:
  3606 ;;		line 123 in file "main.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  tecla           1    wreg     unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  tecla           1   56[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    7
  3627 ;; This function calls:
  3628 ;;		_guardar_current_password
  3629 ;;		_imprimir_tecla
  3630 ;;		_menu_ingresar_password
  3631 ;;		_sprintf
  3632 ;; This function is called by:
  3633 ;;		_desactivar_alarma
  3634 ;;		_accionar_alarma
  3635 ;;		_guardar_tecla_presionada
  3636 ;;		_leer_teclado
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text14
  3641  00DFCE                     __ptext14:
  3642                           	opt stack 0
  3643  00DFCE                     _mostrar_guardar_password:
  3644                           	opt stack 22
  3645                           
  3646                           ;incstack = 0
  3647                           ;mostrar_guardar_password@tecla stored from wreg
  3648  00DFCE  6E39               	movwf	mostrar_guardar_password@tecla,c
  3649                           
  3650                           ;main.c: 125: imprimir_tecla(tecla);
  3651  00DFD0  5039               	movf	mostrar_guardar_password@tecla,w,c
  3652  00DFD2  EC18  F070         	call	_imprimir_tecla
  3653                           
  3654                           ;main.c: 126: sprintf(buffer2,"%01u",tecla);
  3655  00DFD6  0EAA               	movlw	low _buffer2
  3656  00DFD8  6E0D               	movwf	sprintf@sp,c
  3657  00DFDA  0E00               	movlw	high _buffer2
  3658  00DFDC  6E0E               	movwf	sprintf@sp+1,c
  3659  00DFDE  0EE9               	movlw	low STR_8
  3660  00DFE0  6E0F               	movwf	sprintf@f,c
  3661  00DFE2  0EFF               	movlw	high STR_8
  3662  00DFE4  6E10               	movwf	sprintf@f+1,c
  3663  00DFE6  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  3664  00DFEA  6A12               	clrf	?_sprintf+5,c
  3665  00DFEC  ECC9  F07D         	call	_sprintf	;wreg free
  3666                           
  3667                           ;main.c: 127: guardar_current_password(*buffer2);
  3668  00DFF0  0100               	movlb	0	; () banked
  3669  00DFF2  51AA               	movf	_buffer2& (0+255),w,b
  3670  00DFF4  EC7A  F06E         	call	_guardar_current_password
  3671                           
  3672                           ;main.c: 128: menu_ingresar_password();
  3673  00DFF8  EC38  F076         	call	_menu_ingresar_password	;wreg free
  3674  00DFFC  0012               	return		;funcret
  3675  00DFFE                     __end_of_mostrar_guardar_password:
  3676                           	opt stack 0
  3677                           tosu	equ	0xFFF
  3678                           tosh	equ	0xFFE
  3679                           tosl	equ	0xFFD
  3680                           pclath	equ	0xFFA
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postinc1	equ	0xFE6
  3688                           postdec1	equ	0xFE5
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _cambiar_hora *****************
  3698 ;; Defined at:
  3699 ;;		line 165 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  tecla           1    wreg     unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  tecla           1   54[COMRAM] unsigned char 
  3704 ;;  validacion      2   52[COMRAM] int 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3715 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3717 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3718 ;;Total ram usage:        3 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    6
  3721 ;; This function calls:
  3722 ;;		_guardar_elemento
  3723 ;; This function is called by:
  3724 ;;		_menu_cambiar_horario
  3725 ;;		_guardar_tecla_presionada
  3726 ;;		_leer_teclado
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text15
  3731  00E2C0                     __ptext15:
  3732                           	opt stack 0
  3733  00E2C0                     _cambiar_hora:
  3734                           	opt stack 22
  3735                           
  3736                           ;incstack = 0
  3737                           ;cambiar_hora@tecla stored from wreg
  3738  00E2C0  6E37               	movwf	cambiar_hora@tecla,c
  3739                           
  3740                           ;fecha.c: 167: valor_min = 0;
  3741  00E2C2  0E00               	movlw	0
  3742  00E2C4  0100               	movlb	0	; () banked
  3743  00E2C6  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3744  00E2C8  0E00               	movlw	0
  3745  00E2CA  6FA8               	movwf	fecha@valor_min& (0+255),b
  3746                           
  3747                           ;fecha.c: 168: valor_max = 23;
  3748  00E2CC  0E00               	movlw	0
  3749  00E2CE  0100               	movlb	0	; () banked
  3750  00E2D0  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  3751  00E2D2  0E17               	movlw	23
  3752  00E2D4  6FA6               	movwf	fecha@valor_max& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;fecha.c: 170: int validacion = tamanio_hora < 3 - 1;
  3756  00E2D6  BE55               	btfsc	_tamanio_hora+1,7,c
  3757  00E2D8  D006               	goto	u3241
  3758  00E2DA  5055               	movf	_tamanio_hora+1,w,c
  3759  00E2DC  E106               	bnz	u3240
  3760  00E2DE  0E02               	movlw	2
  3761  00E2E0  5C54               	subwf	_tamanio_hora,w,c
  3762  00E2E2  B0D8               	btfsc	status,0,c
  3763  00E2E4  D002               	goto	u3240
  3764  00E2E6                     u3241:
  3765  00E2E6  0E01               	movlw	1
  3766  00E2E8  D001               	goto	u3250
  3767  00E2EA                     u3240:
  3768  00E2EA  0E00               	movlw	0
  3769  00E2EC                     u3250:
  3770  00E2EC  6E35               	movwf	cambiar_hora@validacion,c
  3771  00E2EE  6A36               	clrf	cambiar_hora@validacion+1,c
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;fecha.c: 171: guardar_elemento(tecla,hour,&tamanio_hora,validacion,&hora,actualizar_hor
      +                          a);
  3775  00E2F0  0ED9               	movlw	low fecha@hour
  3776  00E2F2  6E24               	movwf	guardar_elemento@array,c
  3777  00E2F4  0E00               	movlw	high fecha@hour
  3778  00E2F6  6E25               	movwf	guardar_elemento@array+1,c
  3779  00E2F8  0E54               	movlw	low _tamanio_hora
  3780  00E2FA  6E26               	movwf	guardar_elemento@tamanio_array,c
  3781  00E2FC  0E00               	movlw	high _tamanio_hora
  3782  00E2FE  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3783  00E300  C035  F028         	movff	cambiar_hora@validacion,guardar_elemento@validacion
  3784  00E304  C036  F029         	movff	cambiar_hora@validacion+1,guardar_elemento@validacion+1
  3785  00E308  0EFB               	movlw	low _hora
  3786  00E30A  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3787  00E30C  0E00               	movlw	high _hora
  3788  00E30E  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3789  00E310  0E08               	movlw	low _actualizar_hora
  3790  00E312  6E2C               	movwf	guardar_elemento@doit,c
  3791  00E314  0EDE               	movlw	high _actualizar_hora
  3792  00E316  6E2D               	movwf	guardar_elemento@doit+1,c
  3793  00E318  5037               	movf	cambiar_hora@tecla,w,c
  3794  00E31A  ECF9  F07B         	call	_guardar_elemento
  3795  00E31E  0012               	return		;funcret
  3796  00E320                     __end_of_cambiar_hora:
  3797                           	opt stack 0
  3798                           tosu	equ	0xFFF
  3799                           tosh	equ	0xFFE
  3800                           tosl	equ	0xFFD
  3801                           pclath	equ	0xFFA
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postinc1	equ	0xFE6
  3809                           postdec1	equ	0xFE5
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _cambiar_minutos *****************
  3819 ;; Defined at:
  3820 ;;		line 174 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  tecla           1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  tecla           1   54[COMRAM] unsigned char 
  3825 ;;  validacion      2   52[COMRAM] int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3838 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3839 ;;Total ram usage:        4 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    6
  3842 ;; This function calls:
  3843 ;;		_guardar_elemento
  3844 ;; This function is called by:
  3845 ;;		_menu_cambiar_horario
  3846 ;;		_guardar_tecla_presionada
  3847 ;;		_leer_teclado
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text16
  3852  00E544                     __ptext16:
  3853                           	opt stack 0
  3854  00E544                     _cambiar_minutos:
  3855                           	opt stack 22
  3856                           
  3857                           ;incstack = 0
  3858                           ;cambiar_minutos@tecla stored from wreg
  3859  00E544  6E37               	movwf	cambiar_minutos@tecla,c
  3860                           
  3861                           ;fecha.c: 176: valor_min = 0;
  3862  00E546  0E00               	movlw	0
  3863  00E548  0100               	movlb	0	; () banked
  3864  00E54A  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  3865  00E54C  0E00               	movlw	0
  3866  00E54E  6FA8               	movwf	fecha@valor_min& (0+255),b
  3867                           
  3868                           ;fecha.c: 177: valor_max = 59;
  3869  00E550  0E00               	movlw	0
  3870  00E552  0100               	movlb	0	; () banked
  3871  00E554  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  3872  00E556  0E3B               	movlw	59
  3873  00E558  6FA6               	movwf	fecha@valor_max& (0+255),b
  3874                           
  3875                           ;fecha.c: 179: int validacion = (tamanio_minutos < 3 - 1 && tamanio_hora == 0);
  3876  00E55A  0E00               	movlw	0
  3877  00E55C  6E38               	movwf	_cambiar_minutos$1509,c
  3878                           
  3879                           ; BSR set to: 0
  3880  00E55E  0100               	movlb	0	; () banked
  3881  00E560  BFE8               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  3882  00E562  D008               	goto	l3952
  3883  00E564  0100               	movlb	0	; () banked
  3884  00E566  51E8               	movf	(_tamanio_minutos+1)& (0+255),w,b
  3885  00E568  E10C               	bnz	l3956
  3886  00E56A  0E02               	movlw	2
  3887  00E56C  0100               	movlb	0	; () banked
  3888  00E56E  5DE7               	subwf	_tamanio_minutos& (0+255),w,b
  3889  00E570  B0D8               	btfsc	status,0,c
  3890  00E572  D007               	goto	l3956
  3891  00E574                     l3952:
  3892                           
  3893                           ; BSR set to: 0
  3894  00E574  5054               	movf	_tamanio_hora,w,c
  3895  00E576  1055               	iorwf	_tamanio_hora+1,w,c
  3896  00E578  A4D8               	btfss	status,2,c
  3897  00E57A  D003               	goto	l3956
  3898                           
  3899                           ; BSR set to: 0
  3900  00E57C  0E01               	movlw	1
  3901  00E57E  6E38               	movwf	_cambiar_minutos$1509,c
  3902  00E580  D000               	goto	l3956
  3903  00E582                     l3956:
  3904                           
  3905                           ; BSR set to: 0
  3906  00E582  C038  F035         	movff	_cambiar_minutos$1509,cambiar_minutos@validacion
  3907  00E586  6A36               	clrf	cambiar_minutos@validacion+1,c
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;fecha.c: 180: guardar_elemento(tecla,minutes,&tamanio_minutos,validacion,&minuto,actual
      +                          izar_minutos);
  3911  00E588  0EDC               	movlw	low fecha@minutes
  3912  00E58A  6E24               	movwf	guardar_elemento@array,c
  3913  00E58C  0E00               	movlw	high fecha@minutes
  3914  00E58E  6E25               	movwf	guardar_elemento@array+1,c
  3915  00E590  0EE7               	movlw	low _tamanio_minutos
  3916  00E592  6E26               	movwf	guardar_elemento@tamanio_array,c
  3917  00E594  0E00               	movlw	high _tamanio_minutos
  3918  00E596  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  3919  00E598  C035  F028         	movff	cambiar_minutos@validacion,guardar_elemento@validacion
  3920  00E59C  C036  F029         	movff	cambiar_minutos@validacion+1,guardar_elemento@validacion+1
  3921  00E5A0  0EFD               	movlw	low _minuto
  3922  00E5A2  6E2A               	movwf	guardar_elemento@dato_fecha,c
  3923  00E5A4  0E00               	movlw	high _minuto
  3924  00E5A6  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  3925  00E5A8  0EA4               	movlw	low _actualizar_minutos
  3926  00E5AA  6E2C               	movwf	guardar_elemento@doit,c
  3927  00E5AC  0EDD               	movlw	high _actualizar_minutos
  3928  00E5AE  6E2D               	movwf	guardar_elemento@doit+1,c
  3929  00E5B0  5037               	movf	cambiar_minutos@tecla,w,c
  3930  00E5B2  ECF9  F07B         	call	_guardar_elemento
  3931  00E5B6  0012               	return		;funcret
  3932  00E5B8                     __end_of_cambiar_minutos:
  3933                           	opt stack 0
  3934                           tosu	equ	0xFFF
  3935                           tosh	equ	0xFFE
  3936                           tosl	equ	0xFFD
  3937                           pclath	equ	0xFFA
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           postinc0	equ	0xFEE
  3943                           wreg	equ	0xFE8
  3944                           postinc1	equ	0xFE6
  3945                           postdec1	equ	0xFE5
  3946                           fsr1h	equ	0xFE2
  3947                           fsr1l	equ	0xFE1
  3948                           postinc2	equ	0xFDE
  3949                           postdec2	equ	0xFDD
  3950                           fsr2h	equ	0xFDA
  3951                           fsr2l	equ	0xFD9
  3952                           status	equ	0xFD8
  3953                           
  3954 ;; *************** function _cambiar_dia *****************
  3955 ;; Defined at:
  3956 ;;		line 86 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  tecla           1    wreg     unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  tecla           1   54[COMRAM] unsigned char 
  3961 ;;  validacion      2   52[COMRAM] int 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;		None               void
  3964 ;; Registers used:
  3965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3972 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3975 ;;Total ram usage:        3 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    6
  3978 ;; This function calls:
  3979 ;;		_guardar_elemento
  3980 ;;		_obtener_dia_mes
  3981 ;; This function is called by:
  3982 ;;		_menu_cambiar_fecha
  3983 ;;		_guardar_tecla_presionada
  3984 ;;		_leer_teclado
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text17
  3989  00E1AA                     __ptext17:
  3990                           	opt stack 0
  3991  00E1AA                     _cambiar_dia:
  3992                           	opt stack 22
  3993                           
  3994                           ;incstack = 0
  3995                           ;cambiar_dia@tecla stored from wreg
  3996  00E1AA  6E37               	movwf	cambiar_dia@tecla,c
  3997                           
  3998                           ;fecha.c: 88: valor_min = 1;
  3999  00E1AC  0E00               	movlw	0
  4000  00E1AE  0100               	movlb	0	; () banked
  4001  00E1B0  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  4002  00E1B2  0E01               	movlw	1
  4003  00E1B4  6FA8               	movwf	fecha@valor_min& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;fecha.c: 89: obtener_dia_mes();
  4007  00E1B6  ECD2  F077         	call	_obtener_dia_mes	;wreg free
  4008                           
  4009                           ;fecha.c: 91: int validacion = tamanio_dia < 3 - 1;
  4010  00E1BA  BE53               	btfsc	_tamanio_dia+1,7,c
  4011  00E1BC  D006               	goto	u3171
  4012  00E1BE  5053               	movf	_tamanio_dia+1,w,c
  4013  00E1C0  E106               	bnz	u3170
  4014  00E1C2  0E02               	movlw	2
  4015  00E1C4  5C52               	subwf	_tamanio_dia,w,c
  4016  00E1C6  B0D8               	btfsc	status,0,c
  4017  00E1C8  D002               	goto	u3170
  4018  00E1CA                     u3171:
  4019  00E1CA  0E01               	movlw	1
  4020  00E1CC  D001               	goto	u3180
  4021  00E1CE                     u3170:
  4022  00E1CE  0E00               	movlw	0
  4023  00E1D0                     u3180:
  4024  00E1D0  6E35               	movwf	cambiar_dia@validacion,c
  4025  00E1D2  6A36               	clrf	cambiar_dia@validacion+1,c
  4026                           
  4027                           ;fecha.c: 92: guardar_elemento(tecla,day,&tamanio_dia,validacion,&dia,actualiza_dia);
  4028  00E1D4  0ED6               	movlw	low fecha@day
  4029  00E1D6  6E24               	movwf	guardar_elemento@array,c
  4030  00E1D8  0E00               	movlw	high fecha@day
  4031  00E1DA  6E25               	movwf	guardar_elemento@array+1,c
  4032  00E1DC  0E52               	movlw	low _tamanio_dia
  4033  00E1DE  6E26               	movwf	guardar_elemento@tamanio_array,c
  4034  00E1E0  0E00               	movlw	high _tamanio_dia
  4035  00E1E2  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  4036  00E1E4  C035  F028         	movff	cambiar_dia@validacion,guardar_elemento@validacion
  4037  00E1E8  C036  F029         	movff	cambiar_dia@validacion+1,guardar_elemento@validacion+1
  4038  00E1EC  0EF9               	movlw	low _dia
  4039  00E1EE  6E2A               	movwf	guardar_elemento@dato_fecha,c
  4040  00E1F0  0E00               	movlw	high _dia
  4041  00E1F2  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  4042  00E1F4  0E48               	movlw	low _actualiza_dia
  4043  00E1F6  6E2C               	movwf	guardar_elemento@doit,c
  4044  00E1F8  0EDD               	movlw	high _actualiza_dia
  4045  00E1FA  6E2D               	movwf	guardar_elemento@doit+1,c
  4046  00E1FC  5037               	movf	cambiar_dia@tecla,w,c
  4047  00E1FE  ECF9  F07B         	call	_guardar_elemento
  4048  00E202  0012               	return		;funcret
  4049  00E204                     __end_of_cambiar_dia:
  4050                           	opt stack 0
  4051                           tosu	equ	0xFFF
  4052                           tosh	equ	0xFFE
  4053                           tosl	equ	0xFFD
  4054                           pclath	equ	0xFFA
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           postinc0	equ	0xFEE
  4060                           wreg	equ	0xFE8
  4061                           postinc1	equ	0xFE6
  4062                           postdec1	equ	0xFE5
  4063                           fsr1h	equ	0xFE2
  4064                           fsr1l	equ	0xFE1
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _cambiar_mes *****************
  4072 ;; Defined at:
  4073 ;;		line 96 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  tecla           1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  tecla           1   54[COMRAM] unsigned char 
  4078 ;;  validacion      2   52[COMRAM] int 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;		None               void
  4081 ;; Registers used:
  4082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4089 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4091 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4092 ;;Total ram usage:        4 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    6
  4095 ;; This function calls:
  4096 ;;		_guardar_elemento
  4097 ;; This function is called by:
  4098 ;;		_menu_cambiar_fecha
  4099 ;;		_guardar_tecla_presionada
  4100 ;;		_leer_teclado
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text18
  4105  00E3F4                     __ptext18:
  4106                           	opt stack 0
  4107  00E3F4                     _cambiar_mes:
  4108                           	opt stack 22
  4109                           
  4110                           ;incstack = 0
  4111                           ;cambiar_mes@tecla stored from wreg
  4112  00E3F4  6E37               	movwf	cambiar_mes@tecla,c
  4113                           
  4114                           ;fecha.c: 98: valor_min = 1;
  4115  00E3F6  0E00               	movlw	0
  4116  00E3F8  0100               	movlb	0	; () banked
  4117  00E3FA  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  4118  00E3FC  0E01               	movlw	1
  4119  00E3FE  6FA8               	movwf	fecha@valor_min& (0+255),b
  4120                           
  4121                           ;fecha.c: 99: valor_max = 12;
  4122  00E400  0E00               	movlw	0
  4123  00E402  0100               	movlb	0	; () banked
  4124  00E404  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  4125  00E406  0E0C               	movlw	12
  4126  00E408  6FA6               	movwf	fecha@valor_max& (0+255),b
  4127                           
  4128                           ;fecha.c: 101: int validacion = (tamanio_mes < 3 - 1 && tamanio_dia == 0);
  4129  00E40A  0E00               	movlw	0
  4130  00E40C  6E38               	movwf	_cambiar_mes$1486,c
  4131                           
  4132                           ; BSR set to: 0
  4133  00E40E  BE57               	btfsc	_tamanio_mes+1,7,c
  4134  00E410  D006               	goto	l3920
  4135  00E412  5057               	movf	_tamanio_mes+1,w,c
  4136  00E414  E10B               	bnz	l3924
  4137  00E416  0E02               	movlw	2
  4138  00E418  5C56               	subwf	_tamanio_mes,w,c
  4139  00E41A  B0D8               	btfsc	status,0,c
  4140  00E41C  D007               	goto	l3924
  4141  00E41E                     l3920:
  4142                           
  4143                           ; BSR set to: 0
  4144  00E41E  5052               	movf	_tamanio_dia,w,c
  4145  00E420  1053               	iorwf	_tamanio_dia+1,w,c
  4146  00E422  A4D8               	btfss	status,2,c
  4147  00E424  D003               	goto	l3924
  4148                           
  4149                           ; BSR set to: 0
  4150  00E426  0E01               	movlw	1
  4151  00E428  6E38               	movwf	_cambiar_mes$1486,c
  4152  00E42A  D000               	goto	l3924
  4153  00E42C                     l3924:
  4154                           
  4155                           ; BSR set to: 0
  4156  00E42C  C038  F035         	movff	_cambiar_mes$1486,cambiar_mes@validacion
  4157  00E430  6A36               	clrf	cambiar_mes@validacion+1,c
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;fecha.c: 102: guardar_elemento(tecla,month,&tamanio_mes,validacion,&mes,actualiza_eleme
      +                          nto);
  4161  00E432  0EDF               	movlw	low fecha@month
  4162  00E434  6E24               	movwf	guardar_elemento@array,c
  4163  00E436  0E00               	movlw	high fecha@month
  4164  00E438  6E25               	movwf	guardar_elemento@array+1,c
  4165  00E43A  0E56               	movlw	low _tamanio_mes
  4166  00E43C  6E26               	movwf	guardar_elemento@tamanio_array,c
  4167  00E43E  0E00               	movlw	high _tamanio_mes
  4168  00E440  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  4169  00E442  C035  F028         	movff	cambiar_mes@validacion,guardar_elemento@validacion
  4170  00E446  C036  F029         	movff	cambiar_mes@validacion+1,guardar_elemento@validacion+1
  4171  00E44A  0E5C               	movlw	low _mes
  4172  00E44C  6E2A               	movwf	guardar_elemento@dato_fecha,c
  4173  00E44E  0E00               	movlw	high _mes
  4174  00E450  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  4175  00E452  0E90               	movlw	low _actualiza_elemento
  4176  00E454  6E2C               	movwf	guardar_elemento@doit,c
  4177  00E456  0EDC               	movlw	high _actualiza_elemento
  4178  00E458  6E2D               	movwf	guardar_elemento@doit+1,c
  4179  00E45A  5037               	movf	cambiar_mes@tecla,w,c
  4180  00E45C  ECF9  F07B         	call	_guardar_elemento
  4181  00E460  0012               	return		;funcret
  4182  00E462                     __end_of_cambiar_mes:
  4183                           	opt stack 0
  4184                           tosu	equ	0xFFF
  4185                           tosh	equ	0xFFE
  4186                           tosl	equ	0xFFD
  4187                           pclath	equ	0xFFA
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           postinc0	equ	0xFEE
  4193                           wreg	equ	0xFE8
  4194                           postinc1	equ	0xFE6
  4195                           postdec1	equ	0xFE5
  4196                           fsr1h	equ	0xFE2
  4197                           fsr1l	equ	0xFE1
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _cambiar_anio *****************
  4205 ;; Defined at:
  4206 ;;		line 106 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  tecla           1    wreg     unsigned char 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  tecla           1   54[COMRAM] unsigned char 
  4211 ;;  validacion      2   52[COMRAM] int 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4224 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4225 ;;Total ram usage:        4 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    6
  4228 ;; This function calls:
  4229 ;;		_guardar_elemento
  4230 ;; This function is called by:
  4231 ;;		_menu_cambiar_fecha
  4232 ;;		_guardar_tecla_presionada
  4233 ;;		_leer_teclado
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text19
  4238  00E792                     __ptext19:
  4239                           	opt stack 0
  4240  00E792                     _cambiar_anio:
  4241                           	opt stack 22
  4242                           
  4243                           ;incstack = 0
  4244                           ;cambiar_anio@tecla stored from wreg
  4245  00E792  6E37               	movwf	cambiar_anio@tecla,c
  4246                           
  4247                           ;fecha.c: 108: valor_min = 16;
  4248  00E794  0E00               	movlw	0
  4249  00E796  0100               	movlb	0	; () banked
  4250  00E798  6FA9               	movwf	(fecha@valor_min+1)& (0+255),b
  4251  00E79A  0E10               	movlw	16
  4252  00E79C  6FA8               	movwf	fecha@valor_min& (0+255),b
  4253                           
  4254                           ;fecha.c: 109: valor_max = 99;
  4255  00E79E  0E00               	movlw	0
  4256  00E7A0  0100               	movlb	0	; () banked
  4257  00E7A2  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  4258  00E7A4  0E63               	movlw	99
  4259  00E7A6  6FA6               	movwf	fecha@valor_max& (0+255),b
  4260                           
  4261                           ;fecha.c: 111: int validacion = (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia
      +                           == 0);
  4262  00E7A8  0E00               	movlw	0
  4263  00E7AA  6E38               	movwf	_cambiar_anio$1490,c
  4264                           
  4265                           ; BSR set to: 0
  4266  00E7AC  0100               	movlb	0	; () banked
  4267  00E7AE  BFE6               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  4268  00E7B0  D008               	goto	l3932
  4269  00E7B2  0100               	movlb	0	; () banked
  4270  00E7B4  51E6               	movf	(_tamanio_anio+1)& (0+255),w,b
  4271  00E7B6  E110               	bnz	l3938
  4272  00E7B8  0E02               	movlw	2
  4273  00E7BA  0100               	movlb	0	; () banked
  4274  00E7BC  5DE5               	subwf	_tamanio_anio& (0+255),w,b
  4275  00E7BE  B0D8               	btfsc	status,0,c
  4276  00E7C0  D00B               	goto	l3938
  4277  00E7C2                     l3932:
  4278                           
  4279                           ; BSR set to: 0
  4280  00E7C2  5056               	movf	_tamanio_mes,w,c
  4281  00E7C4  1057               	iorwf	_tamanio_mes+1,w,c
  4282  00E7C6  A4D8               	btfss	status,2,c
  4283  00E7C8  D007               	goto	l3938
  4284                           
  4285                           ; BSR set to: 0
  4286  00E7CA  5052               	movf	_tamanio_dia,w,c
  4287  00E7CC  1053               	iorwf	_tamanio_dia+1,w,c
  4288  00E7CE  A4D8               	btfss	status,2,c
  4289  00E7D0  D003               	goto	l3938
  4290                           
  4291                           ; BSR set to: 0
  4292  00E7D2  0E01               	movlw	1
  4293  00E7D4  6E38               	movwf	_cambiar_anio$1490,c
  4294  00E7D6  D000               	goto	l3938
  4295  00E7D8                     l3938:
  4296                           
  4297                           ; BSR set to: 0
  4298  00E7D8  C038  F035         	movff	_cambiar_anio$1490,cambiar_anio@validacion
  4299  00E7DC  6A36               	clrf	cambiar_anio@validacion+1,c
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;fecha.c: 112: guardar_elemento(tecla,year,&tamanio_anio,validacion,&anio,actualiza_elem
      +                          ento);
  4303  00E7DE  0EE2               	movlw	low fecha@year
  4304  00E7E0  6E24               	movwf	guardar_elemento@array,c
  4305  00E7E2  0E00               	movlw	high fecha@year
  4306  00E7E4  6E25               	movwf	guardar_elemento@array+1,c
  4307  00E7E6  0EE5               	movlw	low _tamanio_anio
  4308  00E7E8  6E26               	movwf	guardar_elemento@tamanio_array,c
  4309  00E7EA  0E00               	movlw	high _tamanio_anio
  4310  00E7EC  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  4311  00E7EE  C035  F028         	movff	cambiar_anio@validacion,guardar_elemento@validacion
  4312  00E7F2  C036  F029         	movff	cambiar_anio@validacion+1,guardar_elemento@validacion+1
  4313  00E7F6  0E5A               	movlw	low _anio
  4314  00E7F8  6E2A               	movwf	guardar_elemento@dato_fecha,c
  4315  00E7FA  0E00               	movlw	high _anio
  4316  00E7FC  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  4317  00E7FE  0E90               	movlw	low _actualiza_elemento
  4318  00E800  6E2C               	movwf	guardar_elemento@doit,c
  4319  00E802  0EDC               	movlw	high _actualiza_elemento
  4320  00E804  6E2D               	movwf	guardar_elemento@doit+1,c
  4321  00E806  5037               	movf	cambiar_anio@tecla,w,c
  4322  00E808  ECF9  F07B         	call	_guardar_elemento
  4323  00E80C  0012               	return		;funcret
  4324  00E80E                     __end_of_cambiar_anio:
  4325                           	opt stack 0
  4326                           tosu	equ	0xFFF
  4327                           tosh	equ	0xFFE
  4328                           tosl	equ	0xFFD
  4329                           pclath	equ	0xFFA
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postinc1	equ	0xFE6
  4337                           postdec1	equ	0xFE5
  4338                           fsr1h	equ	0xFE2
  4339                           fsr1l	equ	0xFE1
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _mostrar_guardar_temporal_password *****************
  4347 ;; Defined at:
  4348 ;;		line 131 in file "main.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  tecla           1    wreg     unsigned char 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  tecla           1   56[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;		None               void
  4355 ;; Registers used:
  4356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4366 ;;Total ram usage:        1 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    6
  4369 ;; This function calls:
  4370 ;;		_guardar_password_temporal
  4371 ;;		_imprimir_tecla
  4372 ;;		_sprintf
  4373 ;; This function is called by:
  4374 ;;		_menu_cambiar_password
  4375 ;;		_guardar_tecla_presionada
  4376 ;;		_leer_teclado
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text20
  4381  00DEEE                     __ptext20:
  4382                           	opt stack 0
  4383  00DEEE                     _mostrar_guardar_temporal_password:
  4384                           	opt stack 23
  4385                           
  4386                           ;incstack = 0
  4387                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  4388  00DEEE  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  4389                           
  4390                           ;main.c: 133: imprimir_tecla(tecla);
  4391  00DEF0  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  4392  00DEF2  EC18  F070         	call	_imprimir_tecla
  4393                           
  4394                           ;main.c: 134: sprintf(buffer2,"%01u",tecla);
  4395  00DEF6  0EAA               	movlw	low _buffer2
  4396  00DEF8  6E0D               	movwf	sprintf@sp,c
  4397  00DEFA  0E00               	movlw	high _buffer2
  4398  00DEFC  6E0E               	movwf	sprintf@sp+1,c
  4399  00DEFE  0EE9               	movlw	low STR_8
  4400  00DF00  6E0F               	movwf	sprintf@f,c
  4401  00DF02  0EFF               	movlw	high STR_8
  4402  00DF04  6E10               	movwf	sprintf@f+1,c
  4403  00DF06  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  4404  00DF0A  6A12               	clrf	?_sprintf+5,c
  4405  00DF0C  ECC9  F07D         	call	_sprintf	;wreg free
  4406                           
  4407                           ;main.c: 135: guardar_password_temporal(*buffer2);
  4408  00DF10  0100               	movlb	0	; () banked
  4409  00DF12  51AA               	movf	_buffer2& (0+255),w,b
  4410  00DF14  EC96  F06E         	call	_guardar_password_temporal
  4411  00DF18  0012               	return		;funcret
  4412  00DF1A                     __end_of_mostrar_guardar_temporal_password:
  4413                           	opt stack 0
  4414                           tosu	equ	0xFFF
  4415                           tosh	equ	0xFFE
  4416                           tosl	equ	0xFFD
  4417                           pclath	equ	0xFFA
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           postinc0	equ	0xFEE
  4423                           wreg	equ	0xFE8
  4424                           postinc1	equ	0xFE6
  4425                           postdec1	equ	0xFE5
  4426                           fsr1h	equ	0xFE2
  4427                           fsr1l	equ	0xFE1
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _guardar_password_temporal *****************
  4435 ;; Defined at:
  4436 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  valor           1    wreg     const unsigned char 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  valor           1    7[COMRAM] const unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;		None               void
  4443 ;; Registers used:
  4444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4454 ;;Total ram usage:        1 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    1
  4457 ;; This function calls:
  4458 ;;		_guardar_elemento_arreglo
  4459 ;; This function is called by:
  4460 ;;		_mostrar_guardar_temporal_password
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text21
  4465  00DD2C                     __ptext21:
  4466                           	opt stack 0
  4467  00DD2C                     _guardar_password_temporal:
  4468                           	opt stack 27
  4469                           
  4470                           ;incstack = 0
  4471                           ;guardar_password_temporal@valor stored from wreg
  4472  00DD2C  6E08               	movwf	guardar_password_temporal@valor,c
  4473                           
  4474                           ;alarma.c: 54: guardar_elemento_arreglo(temporal,valor, &tamanio_password );
  4475  00DD2E  0ECC               	movlw	low _temporal
  4476  00DD30  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4477  00DD32  0E00               	movlw	high _temporal
  4478  00DD34  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4479  00DD36  C008  F003         	movff	guardar_password_temporal@valor,guardar_elemento_arreglo@valor
  4480  00DD3A  0E58               	movlw	low _tamanio_password
  4481  00DD3C  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4482  00DD3E  0E00               	movlw	high _tamanio_password
  4483  00DD40  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4484  00DD42  EC52  F073         	call	_guardar_elemento_arreglo	;wreg free
  4485  00DD46  0012               	return		;funcret
  4486  00DD48                     __end_of_guardar_password_temporal:
  4487                           	opt stack 0
  4488                           tosu	equ	0xFFF
  4489                           tosh	equ	0xFFE
  4490                           tosl	equ	0xFFD
  4491                           pclath	equ	0xFFA
  4492                           tblptru	equ	0xFF8
  4493                           tblptrh	equ	0xFF7
  4494                           tblptrl	equ	0xFF6
  4495                           tablat	equ	0xFF5
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           postinc1	equ	0xFE6
  4499                           postdec1	equ	0xFE5
  4500                           fsr1h	equ	0xFE2
  4501                           fsr1l	equ	0xFE1
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _guardar_nuevo_password *****************
  4509 ;; Defined at:
  4510 ;;		line 57 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  valor           1    wreg     unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  valor           1    7[COMRAM] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;		None               void
  4517 ;; Registers used:
  4518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4528 ;;Total ram usage:        1 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    1
  4531 ;; This function calls:
  4532 ;;		_guardar_elemento_arreglo
  4533 ;; This function is called by:
  4534 ;;		_mostrar_guardar_nuevo_password
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text22
  4539  00DD10                     __ptext22:
  4540                           	opt stack 0
  4541  00DD10                     _guardar_nuevo_password:
  4542                           	opt stack 27
  4543                           
  4544                           ;incstack = 0
  4545                           ;guardar_nuevo_password@valor stored from wreg
  4546  00DD10  6E08               	movwf	guardar_nuevo_password@valor,c
  4547                           
  4548                           ;alarma.c: 58: guardar_elemento_arreglo(new_password,valor, &tamanio_new_password );
  4549  00DD12  0EC5               	movlw	low _new_password
  4550  00DD14  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  4551  00DD16  0E00               	movlw	high _new_password
  4552  00DD18  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  4553  00DD1A  C008  F003         	movff	guardar_nuevo_password@valor,guardar_elemento_arreglo@valor
  4554  00DD1E  0EE9               	movlw	low _tamanio_new_password
  4555  00DD20  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  4556  00DD22  0E00               	movlw	high _tamanio_new_password
  4557  00DD24  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  4558  00DD26  EC52  F073         	call	_guardar_elemento_arreglo	;wreg free
  4559  00DD2A  0012               	return		;funcret
  4560  00DD2C                     __end_of_guardar_nuevo_password:
  4561                           	opt stack 0
  4562                           tosu	equ	0xFFF
  4563                           tosh	equ	0xFFE
  4564                           tosl	equ	0xFFD
  4565                           pclath	equ	0xFFA
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postinc1	equ	0xFE6
  4573                           postdec1	equ	0xFE5
  4574                           fsr1h	equ	0xFE2
  4575                           fsr1l	equ	0xFE1
  4576                           postinc2	equ	0xFDE
  4577                           postdec2	equ	0xFDD
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function _guardar_comando *****************
  4583 ;; Defined at:
  4584 ;;		line 29 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  tecla           1    wreg     unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  tecla           1   57[COMRAM] unsigned char 
  4589 ;;  aux            20   37[COMRAM] unsigned char [20]
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4600 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;Total ram usage:       23 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    2
  4606 ;; This function calls:
  4607 ;;		_sprintf
  4608 ;; This function is called by:
  4609 ;;		_ingresar_comando
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text23
  4614  00E260                     __ptext23:
  4615                           	opt stack 0
  4616  00E260                     _guardar_comando:
  4617                           	opt stack 26
  4618                           
  4619                           ;incstack = 0
  4620                           ;guardar_comando@tecla stored from wreg
  4621  00E260  6E3A               	movwf	guardar_comando@tecla,c
  4622                           
  4623                           ;teclado.c: 31: unsigned char aux[20];
  4624                           ;teclado.c: 32: sprintf(aux,"%01u",tecla);
  4625  00E262  0E26               	movlw	low guardar_comando@aux
  4626  00E264  6E0D               	movwf	sprintf@sp,c
  4627  00E266  0E00               	movlw	high guardar_comando@aux
  4628  00E268  6E0E               	movwf	sprintf@sp+1,c
  4629  00E26A  0EE9               	movlw	low STR_8
  4630  00E26C  6E0F               	movwf	sprintf@f,c
  4631  00E26E  0EFF               	movlw	high STR_8
  4632  00E270  6E10               	movwf	sprintf@f+1,c
  4633  00E272  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  4634  00E276  6A12               	clrf	?_sprintf+5,c
  4635  00E278  ECC9  F07D         	call	_sprintf	;wreg free
  4636                           
  4637                           ;teclado.c: 33: if (tamanio_comando < 2){
  4638  00E27C  BE48               	btfsc	_tamanio_comando+1,7,c
  4639  00E27E  D006               	goto	l3788
  4640  00E280  5048               	movf	_tamanio_comando+1,w,c
  4641  00E282  E11D               	bnz	l432
  4642  00E284  0E02               	movlw	2
  4643  00E286  5C47               	subwf	_tamanio_comando,w,c
  4644  00E288  B0D8               	btfsc	status,0,c
  4645  00E28A  0012               	return	
  4646  00E28C                     l3788:
  4647                           
  4648                           ;teclado.c: 34: comando[tamanio_comando] = *aux;
  4649  00E28C  0ED3               	movlw	low _comando
  4650  00E28E  2447               	addwf	_tamanio_comando,w,c
  4651  00E290  6ED9               	movwf	fsr2l,c
  4652  00E292  0E00               	movlw	high _comando
  4653  00E294  2048               	addwfc	_tamanio_comando+1,w,c
  4654  00E296  6EDA               	movwf	fsr2h,c
  4655  00E298  C026  FFDF         	movff	guardar_comando@aux,indf2
  4656                           
  4657                           ;teclado.c: 35: comando [tamanio_comando+1] = 0;
  4658  00E29C  0E01               	movlw	1
  4659  00E29E  2447               	addwf	_tamanio_comando,w,c
  4660  00E2A0  6E24               	movwf	??_guardar_comando& (0+255),c
  4661  00E2A2  0E00               	movlw	0
  4662  00E2A4  2048               	addwfc	_tamanio_comando+1,w,c
  4663  00E2A6  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  4664  00E2A8  0ED3               	movlw	low _comando
  4665  00E2AA  2424               	addwf	??_guardar_comando,w,c
  4666  00E2AC  6ED9               	movwf	fsr2l,c
  4667  00E2AE  0E00               	movlw	high _comando
  4668  00E2B0  2025               	addwfc	??_guardar_comando+1,w,c
  4669  00E2B2  6EDA               	movwf	fsr2h,c
  4670  00E2B4  0E00               	movlw	0
  4671  00E2B6  6EDF               	movwf	indf2,c
  4672                           
  4673                           ;teclado.c: 36: tamanio_comando++;
  4674  00E2B8  4A47               	infsnz	_tamanio_comando,f,c
  4675  00E2BA  2A48               	incf	_tamanio_comando+1,f,c
  4676  00E2BC  0012               	return	
  4677  00E2BE                     l432:
  4678  00E2BE  0012               	return		;funcret
  4679  00E2C0                     __end_of_guardar_comando:
  4680                           	opt stack 0
  4681                           tosu	equ	0xFFF
  4682                           tosh	equ	0xFFE
  4683                           tosl	equ	0xFFD
  4684                           pclath	equ	0xFFA
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           postinc1	equ	0xFE6
  4692                           postdec1	equ	0xFE5
  4693                           fsr1h	equ	0xFE2
  4694                           fsr1l	equ	0xFE1
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _imprimir_tecla *****************
  4703 ;; Defined at:
  4704 ;;		line 40 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  tecla           1    wreg     unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  tecla           1   55[COMRAM] unsigned char 
  4709 ;;  aux            20   35[COMRAM] unsigned char [20]
  4710 ;; Return value:  Size  Location     Type
  4711 ;;		None               void
  4712 ;; Registers used:
  4713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4720 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4722 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4723 ;;Total ram usage:       21 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    5
  4726 ;; This function calls:
  4727 ;;		_lcd_putrs
  4728 ;;		_sprintf
  4729 ;; This function is called by:
  4730 ;;		_mostrar_guardar_password
  4731 ;;		_mostrar_guardar_temporal_password
  4732 ;;		_mostrar_guardar_nuevo_password
  4733 ;;		_confirmar_actualizar_password
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text24
  4738  00E030                     __ptext24:
  4739                           	opt stack 0
  4740  00E030                     _imprimir_tecla:
  4741                           	opt stack 23
  4742                           
  4743                           ;incstack = 0
  4744                           ;imprimir_tecla@tecla stored from wreg
  4745  00E030  6E38               	movwf	imprimir_tecla@tecla,c
  4746                           
  4747                           ;teclado.c: 42: unsigned char aux[20];
  4748                           ;teclado.c: 43: sprintf(aux,"%01u",tecla);
  4749  00E032  0E24               	movlw	low imprimir_tecla@aux
  4750  00E034  6E0D               	movwf	sprintf@sp,c
  4751  00E036  0E00               	movlw	high imprimir_tecla@aux
  4752  00E038  6E0E               	movwf	sprintf@sp+1,c
  4753  00E03A  0EE9               	movlw	low STR_8
  4754  00E03C  6E0F               	movwf	sprintf@f,c
  4755  00E03E  0EFF               	movlw	high STR_8
  4756  00E040  6E10               	movwf	sprintf@f+1,c
  4757  00E042  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  4758  00E046  6A12               	clrf	?_sprintf+5,c
  4759  00E048  ECC9  F07D         	call	_sprintf	;wreg free
  4760                           
  4761                           ;teclado.c: 44: if (ocultar_teclas == 1){
  4762  00E04C  0100               	movlb	0	; () banked
  4763  00E04E  059C               	decf	_ocultar_teclas& (0+255),w,b
  4764  00E050  0100               	movlb	0	; () banked
  4765  00E052  119D               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  4766  00E054  A4D8               	btfss	status,2,c
  4767  00E056  D007               	goto	l3748
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;teclado.c: 45: lcd_putrs("*");
  4771  00E058  0EF5               	movlw	low STR_28
  4772  00E05A  6E09               	movwf	lcd_putrs@ptr,c
  4773  00E05C  0EFF               	movlw	high STR_28
  4774  00E05E  6E0A               	movwf	lcd_putrs@ptr+1,c
  4775  00E060  ECAB  F070         	call	_lcd_putrs	;wreg free
  4776                           
  4777                           ;teclado.c: 46: }else{
  4778  00E064  0012               	return	
  4779  00E066                     l3748:
  4780                           
  4781                           ;teclado.c: 47: lcd_putrs(aux);
  4782  00E066  0E24               	movlw	low imprimir_tecla@aux
  4783  00E068  6E09               	movwf	lcd_putrs@ptr,c
  4784  00E06A  0E00               	movlw	high imprimir_tecla@aux
  4785  00E06C  6E0A               	movwf	lcd_putrs@ptr+1,c
  4786  00E06E  ECAB  F070         	call	_lcd_putrs	;wreg free
  4787  00E072  0012               	return	
  4788  00E074  0012               	return		;funcret
  4789  00E076                     __end_of_imprimir_tecla:
  4790                           	opt stack 0
  4791                           tosu	equ	0xFFF
  4792                           tosh	equ	0xFFE
  4793                           tosl	equ	0xFFD
  4794                           pclath	equ	0xFFA
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postinc1	equ	0xFE6
  4802                           postdec1	equ	0xFE5
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _actualizar_password *****************
  4813 ;; Defined at:
  4814 ;;		line 102 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  valor           1    wreg     unsigned char 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  valor           1   15[COMRAM] unsigned char 
  4819 ;;  j               2   18[COMRAM] int 
  4820 ;;  confirmar       2   16[COMRAM] int 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4831 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4833 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4834 ;;Total ram usage:        5 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    3
  4837 ;; This function calls:
  4838 ;;		_confirmar_nuevo_password
  4839 ;;		_restaurar_comando
  4840 ;; This function is called by:
  4841 ;;		_confirmar_actualizar_password
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text25
  4846  00EBD8                     __ptext25:
  4847                           	opt stack 0
  4848  00EBD8                     _actualizar_password:
  4849                           	opt stack 24
  4850                           
  4851                           ;incstack = 0
  4852                           ;actualizar_password@valor stored from wreg
  4853  00EBD8  6E10               	movwf	actualizar_password@valor,c
  4854                           
  4855                           ;alarma.c: 104: int confirmar=1;
  4856  00EBDA  0E00               	movlw	0
  4857  00EBDC  6E12               	movwf	actualizar_password@confirmar+1,c
  4858  00EBDE  0E01               	movlw	1
  4859  00EBE0  6E11               	movwf	actualizar_password@confirmar,c
  4860                           
  4861                           ;alarma.c: 105: confirmar_nuevo_password(&confirmar,valor);
  4862  00EBE2  0E11               	movlw	low actualizar_password@confirmar
  4863  00EBE4  6E09               	movwf	confirmar_nuevo_password@confirmar,c
  4864  00EBE6  0E00               	movlw	high actualizar_password@confirmar
  4865  00EBE8  6E0A               	movwf	confirmar_nuevo_password@confirmar+1,c
  4866  00EBEA  C010  F00B         	movff	actualizar_password@valor,confirmar_nuevo_password@valor
  4867  00EBEE  EC0F  F075         	call	_confirmar_nuevo_password	;wreg free
  4868                           
  4869                           ;alarma.c: 107: if (confirmar && tamanio_password >= 6){
  4870  00EBF2  5011               	movf	actualizar_password@confirmar,w,c
  4871  00EBF4  1012               	iorwf	actualizar_password@confirmar+1,w,c
  4872  00EBF6  B4D8               	btfsc	status,2,c
  4873  00EBF8  0012               	return	
  4874  00EBFA  BE59               	btfsc	_tamanio_password+1,7,c
  4875  00EBFC  0012               	return	
  4876  00EBFE  5059               	movf	_tamanio_password+1,w,c
  4877  00EC00  E104               	bnz	u2920
  4878  00EC02  0E06               	movlw	6
  4879  00EC04  5C58               	subwf	_tamanio_password,w,c
  4880  00EC06  A0D8               	btfss	status,0,c
  4881  00EC08  0012               	return	
  4882  00EC0A                     u2920:
  4883                           
  4884                           ;alarma.c: 109: int j;
  4885                           ;alarma.c: 110: for (j=0; j < 6; j++ )
  4886  00EC0A  0E00               	movlw	0
  4887  00EC0C  6E14               	movwf	actualizar_password@j+1,c
  4888  00EC0E  0E00               	movlw	0
  4889  00EC10  6E13               	movwf	actualizar_password@j,c
  4890  00EC12                     l3764:
  4891  00EC12  BE14               	btfsc	actualizar_password@j+1,7,c
  4892  00EC14  D008               	goto	l3768
  4893  00EC16  5014               	movf	actualizar_password@j+1,w,c
  4894  00EC18  E118               	bnz	l3774
  4895  00EC1A  0E06               	movlw	6
  4896  00EC1C  5C13               	subwf	actualizar_password@j,w,c
  4897  00EC1E  B0D8               	btfsc	status,0,c
  4898  00EC20  D014               	goto	l3774
  4899  00EC22  D001               	goto	l3768
  4900  00EC24  D012               	goto	l3774
  4901  00EC26                     l3768:
  4902                           
  4903                           ;alarma.c: 111: password[j] = new_password[j];
  4904  00EC26  0EC5               	movlw	low _new_password
  4905  00EC28  2413               	addwf	actualizar_password@j,w,c
  4906  00EC2A  6ED9               	movwf	fsr2l,c
  4907  00EC2C  0E00               	movlw	high _new_password
  4908  00EC2E  2014               	addwfc	actualizar_password@j+1,w,c
  4909  00EC30  6EDA               	movwf	fsr2h,c
  4910  00EC32  0E68               	movlw	low _password
  4911  00EC34  2413               	addwf	actualizar_password@j,w,c
  4912  00EC36  6EE1               	movwf	fsr1l,c
  4913  00EC38  0E00               	movlw	high _password
  4914  00EC3A  2014               	addwfc	actualizar_password@j+1,w,c
  4915  00EC3C  6EE2               	movwf	fsr1h,c
  4916  00EC3E  CFDF FFE7          	movff	indf2,indf1
  4917  00EC42  4A13               	infsnz	actualizar_password@j,f,c
  4918  00EC44  2A14               	incf	actualizar_password@j+1,f,c
  4919  00EC46  D7E5               	goto	l3764
  4920  00EC48  D000               	goto	l3774
  4921  00EC4A                     l3774:
  4922                           
  4923                           ;alarma.c: 112: restaurar_comando();
  4924  00EC4A  EC6C  F06E         	call	_restaurar_comando	;wreg free
  4925                           
  4926                           ;alarma.c: 114: new_password[0] = 0;
  4927  00EC4E  0E00               	movlw	0
  4928  00EC50  0100               	movlb	0	; () banked
  4929  00EC52  6FC5               	movwf	_new_password& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;alarma.c: 115: temporal[0] = 0;
  4933  00EC54  0E00               	movlw	0
  4934  00EC56  0100               	movlb	0	; () banked
  4935  00EC58  6FCC               	movwf	_temporal& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;alarma.c: 117: tamanio_new_password = 0;
  4939  00EC5A  0E00               	movlw	0
  4940  00EC5C  0100               	movlb	0	; () banked
  4941  00EC5E  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  4942  00EC60  0E00               	movlw	0
  4943  00EC62  6FE9               	movwf	_tamanio_new_password& (0+255),b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;alarma.c: 118: tamanio_password = 0;
  4947  00EC64  0E00               	movlw	0
  4948  00EC66  6E59               	movwf	_tamanio_password+1,c
  4949  00EC68  0E00               	movlw	0
  4950  00EC6A  6E58               	movwf	_tamanio_password,c
  4951  00EC6C  0012               	return	
  4952                           
  4953                           ; BSR set to: 0
  4954  00EC6E  0012               	return		;funcret
  4955  00EC70                     __end_of_actualizar_password:
  4956                           	opt stack 0
  4957                           tosu	equ	0xFFF
  4958                           tosh	equ	0xFFE
  4959                           tosl	equ	0xFFD
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           indf1	equ	0xFE7
  4968                           postinc1	equ	0xFE6
  4969                           postdec1	equ	0xFE5
  4970                           fsr1h	equ	0xFE2
  4971                           fsr1l	equ	0xFE1
  4972                           indf2	equ	0xFDF
  4973                           postinc2	equ	0xFDE
  4974                           postdec2	equ	0xFDD
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _confirmar_nuevo_password *****************
  4980 ;; Defined at:
  4981 ;;		line 88 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;  confirmar       2    8[COMRAM] PTR int 
  4984 ;;		 -> actualizar_password@confirmar(2), 
  4985 ;;  valor           1   10[COMRAM] unsigned char 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  i               2   13[COMRAM] int 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;		None               void
  4990 ;; Registers used:
  4991 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4997 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5000 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;Total ram usage:        7 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    2
  5004 ;; This function calls:
  5005 ;;		_guardar_current_password
  5006 ;; This function is called by:
  5007 ;;		_actualizar_password
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text26
  5012  00EA1E                     __ptext26:
  5013                           	opt stack 0
  5014  00EA1E                     _confirmar_nuevo_password:
  5015                           	opt stack 24
  5016                           
  5017                           ;alarma.c: 90: guardar_current_password(valor);
  5018                           
  5019                           ;incstack = 0
  5020  00EA1E  500B               	movf	confirmar_nuevo_password@valor,w,c
  5021  00EA20  EC7A  F06E         	call	_guardar_current_password
  5022                           
  5023                           ;alarma.c: 92: if (tamanio_password >= 6 && *confirmar){
  5024  00EA24  BE59               	btfsc	_tamanio_password+1,7,c
  5025  00EA26  0012               	return	
  5026  00EA28  5059               	movf	_tamanio_password+1,w,c
  5027  00EA2A  E104               	bnz	u2750
  5028  00EA2C  0E06               	movlw	6
  5029  00EA2E  5C58               	subwf	_tamanio_password,w,c
  5030  00EA30  A0D8               	btfss	status,0,c
  5031  00EA32  0012               	return	
  5032  00EA34                     u2750:
  5033  00EA34  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  5034  00EA38  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  5035  00EA3C  50DE               	movf	postinc2,w,c
  5036  00EA3E  10DE               	iorwf	postinc2,w,c
  5037  00EA40  B4D8               	btfsc	status,2,c
  5038  00EA42  0012               	return	
  5039                           
  5040                           ;alarma.c: 93: int i = 0;
  5041  00EA44  0E00               	movlw	0
  5042  00EA46  6E0F               	movwf	confirmar_nuevo_password@i+1,c
  5043  00EA48  0E00               	movlw	0
  5044  00EA4A  6E0E               	movwf	confirmar_nuevo_password@i,c
  5045                           
  5046                           ;alarma.c: 94: while (i < 6 && *confirmar){
  5047  00EA4C  D01C               	goto	l3668
  5048  00EA4E                     l3662:
  5049                           
  5050                           ;alarma.c: 95: if (new_password[i] != current_password[i])
  5051  00EA4E  0EBE               	movlw	low _current_password
  5052  00EA50  240E               	addwf	confirmar_nuevo_password@i,w,c
  5053  00EA52  6ED9               	movwf	fsr2l,c
  5054  00EA54  0E00               	movlw	high _current_password
  5055  00EA56  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  5056  00EA58  6EDA               	movwf	fsr2h,c
  5057  00EA5A  0EC5               	movlw	low _new_password
  5058  00EA5C  240E               	addwf	confirmar_nuevo_password@i,w,c
  5059  00EA5E  6EE1               	movwf	fsr1l,c
  5060  00EA60  0E00               	movlw	high _new_password
  5061  00EA62  200F               	addwfc	confirmar_nuevo_password@i+1,w,c
  5062  00EA64  6EE2               	movwf	fsr1h,c
  5063  00EA66  50DE               	movf	postinc2,w,c
  5064  00EA68  18E6               	xorwf	postinc1,w,c
  5065  00EA6A  B4D8               	btfsc	status,2,c
  5066  00EA6C  D009               	goto	l3666
  5067                           
  5068                           ;alarma.c: 96: *confirmar = 0;
  5069  00EA6E  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  5070  00EA72  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  5071  00EA76  0E00               	movlw	0
  5072  00EA78  6EDE               	movwf	postinc2,c
  5073  00EA7A  0E00               	movlw	0
  5074  00EA7C  6EDD               	movwf	postdec2,c
  5075  00EA7E  D000               	goto	l3666
  5076  00EA80                     l3666:
  5077                           
  5078                           ;alarma.c: 97: i++;
  5079  00EA80  4A0E               	infsnz	confirmar_nuevo_password@i,f,c
  5080  00EA82  2A0F               	incf	confirmar_nuevo_password@i+1,f,c
  5081  00EA84  D000               	goto	l3668
  5082  00EA86                     l3668:
  5083  00EA86  BE0F               	btfsc	confirmar_nuevo_password@i+1,7,c
  5084  00EA88  D006               	goto	l3670
  5085  00EA8A  500F               	movf	confirmar_nuevo_password@i+1,w,c
  5086  00EA8C  E10E               	bnz	l869
  5087  00EA8E  0E06               	movlw	6
  5088  00EA90  5C0E               	subwf	confirmar_nuevo_password@i,w,c
  5089  00EA92  B0D8               	btfsc	status,0,c
  5090  00EA94  0012               	return	
  5091  00EA96                     l3670:
  5092  00EA96  C009  FFD9         	movff	confirmar_nuevo_password@confirmar,fsr2l
  5093  00EA9A  C00A  FFDA         	movff	confirmar_nuevo_password@confirmar+1,fsr2h
  5094  00EA9E  50DE               	movf	postinc2,w,c
  5095  00EAA0  10DE               	iorwf	postinc2,w,c
  5096  00EAA2  B4D8               	btfsc	status,2,c
  5097  00EAA4  0012               	return	
  5098  00EAA6  D7D3               	goto	l3662
  5099  00EAA8  0012               	return	
  5100  00EAAA                     l869:
  5101  00EAAA  0012               	return		;funcret
  5102  00EAAC                     __end_of_confirmar_nuevo_password:
  5103                           	opt stack 0
  5104                           tosu	equ	0xFFF
  5105                           tosh	equ	0xFFE
  5106                           tosl	equ	0xFFD
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           indf1	equ	0xFE7
  5115                           postinc1	equ	0xFE6
  5116                           postdec1	equ	0xFE5
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _guardar_current_password *****************
  5127 ;; Defined at:
  5128 ;;		line 49 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  valor           1    wreg     const unsigned char 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  valor           1    7[COMRAM] const unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;		None               void
  5135 ;; Registers used:
  5136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5146 ;;Total ram usage:        1 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    1
  5149 ;; This function calls:
  5150 ;;		_guardar_elemento_arreglo
  5151 ;; This function is called by:
  5152 ;;		_mostrar_guardar_password
  5153 ;;		_confirmar_nuevo_password
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text27
  5158  00DCF4                     __ptext27:
  5159                           	opt stack 0
  5160  00DCF4                     _guardar_current_password:
  5161                           	opt stack 27
  5162                           
  5163                           ;incstack = 0
  5164                           ;guardar_current_password@valor stored from wreg
  5165  00DCF4  6E08               	movwf	guardar_current_password@valor,c
  5166                           
  5167                           ;alarma.c: 50: guardar_elemento_arreglo(current_password,valor, &tamanio_password );
  5168  00DCF6  0EBE               	movlw	low _current_password
  5169  00DCF8  6E01               	movwf	guardar_elemento_arreglo@arreglo,c
  5170  00DCFA  0E00               	movlw	high _current_password
  5171  00DCFC  6E02               	movwf	guardar_elemento_arreglo@arreglo+1,c
  5172  00DCFE  C008  F003         	movff	guardar_current_password@valor,guardar_elemento_arreglo@valor
  5173  00DD02  0E58               	movlw	low _tamanio_password
  5174  00DD04  6E04               	movwf	guardar_elemento_arreglo@tamanio,c
  5175  00DD06  0E00               	movlw	high _tamanio_password
  5176  00DD08  6E05               	movwf	guardar_elemento_arreglo@tamanio+1,c
  5177  00DD0A  EC52  F073         	call	_guardar_elemento_arreglo	;wreg free
  5178  00DD0E  0012               	return		;funcret
  5179  00DD10                     __end_of_guardar_current_password:
  5180                           	opt stack 0
  5181                           tosu	equ	0xFFF
  5182                           tosh	equ	0xFFE
  5183                           tosl	equ	0xFFD
  5184                           pclath	equ	0xFFA
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           indf1	equ	0xFE7
  5192                           postinc1	equ	0xFE6
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _guardar_elemento_arreglo *****************
  5204 ;; Defined at:
  5205 ;;		line 39 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  arreglo         2    0[COMRAM] PTR unsigned char 
  5208 ;;		 -> new_password(7), temporal(7), current_password(7), 
  5209 ;;  valor           1    2[COMRAM] const unsigned char 
  5210 ;;  tamanio         2    3[COMRAM] PTR int 
  5211 ;;		 -> tamanio_new_password(2), tamanio_password(2), 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;		None               void
  5216 ;; Registers used:
  5217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5223 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5226 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5227 ;;Total ram usage:        7 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_guardar_current_password
  5233 ;;		_guardar_password_temporal
  5234 ;;		_guardar_nuevo_password
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text28
  5239  00E6A4                     __ptext28:
  5240                           	opt stack 0
  5241  00E6A4                     _guardar_elemento_arreglo:
  5242                           	opt stack 27
  5243                           
  5244                           ;alarma.c: 41: if (*tamanio < 6){
  5245                           
  5246                           ;incstack = 0
  5247  00E6A4  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5248  00E6A8  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5249  00E6AC  0E01               	movlw	1
  5250  00E6AE  BEDB               	btfsc	plusw2,7,c
  5251  00E6B0  D007               	goto	l3384
  5252  00E6B2  0E01               	movlw	1
  5253  00E6B4  50DB               	movf	plusw2,w,c
  5254  00E6B6  E130               	bnz	l831
  5255  00E6B8  0E06               	movlw	6
  5256  00E6BA  5CDE               	subwf	postinc2,w,c
  5257  00E6BC  B0D8               	btfsc	status,0,c
  5258  00E6BE  0012               	return	
  5259  00E6C0                     l3384:
  5260                           
  5261                           ;alarma.c: 42: arreglo[*tamanio] = valor;
  5262  00E6C0  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5263  00E6C4  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5264  00E6C8  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  5265  00E6CC  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  5266  00E6D0  5006               	movf	??_guardar_elemento_arreglo,w,c
  5267  00E6D2  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  5268  00E6D4  6ED9               	movwf	fsr2l,c
  5269  00E6D6  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  5270  00E6D8  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  5271  00E6DA  6EDA               	movwf	fsr2h,c
  5272  00E6DC  C003  FFDF         	movff	guardar_elemento_arreglo@valor,indf2
  5273                           
  5274                           ;alarma.c: 43: arreglo [*tamanio + 1] = '\0';
  5275  00E6E0  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5276  00E6E4  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5277  00E6E8  CFDE F006          	movff	postinc2,??_guardar_elemento_arreglo
  5278  00E6EC  CFDD F007          	movff	postdec2,??_guardar_elemento_arreglo+1
  5279  00E6F0  0E01               	movlw	1
  5280  00E6F2  2606               	addwf	??_guardar_elemento_arreglo,f,c
  5281  00E6F4  0E00               	movlw	0
  5282  00E6F6  2207               	addwfc	??_guardar_elemento_arreglo+1,f,c
  5283  00E6F8  5006               	movf	??_guardar_elemento_arreglo,w,c
  5284  00E6FA  2401               	addwf	guardar_elemento_arreglo@arreglo,w,c
  5285  00E6FC  6ED9               	movwf	fsr2l,c
  5286  00E6FE  5007               	movf	??_guardar_elemento_arreglo+1,w,c
  5287  00E700  2002               	addwfc	guardar_elemento_arreglo@arreglo+1,w,c
  5288  00E702  6EDA               	movwf	fsr2h,c
  5289  00E704  0E00               	movlw	0
  5290  00E706  6EDF               	movwf	indf2,c
  5291                           
  5292                           ;alarma.c: 44: (*tamanio)++;
  5293  00E708  C004  FFD9         	movff	guardar_elemento_arreglo@tamanio,fsr2l
  5294  00E70C  C005  FFDA         	movff	guardar_elemento_arreglo@tamanio+1,fsr2h
  5295  00E710  2ADE               	incf	postinc2,f,c
  5296  00E712  0E00               	movlw	0
  5297  00E714  22DD               	addwfc	postdec2,f,c
  5298  00E716  0012               	return	
  5299  00E718                     l831:
  5300  00E718  0012               	return		;funcret
  5301  00E71A                     __end_of_guardar_elemento_arreglo:
  5302                           	opt stack 0
  5303                           tosu	equ	0xFFF
  5304                           tosh	equ	0xFFE
  5305                           tosl	equ	0xFFD
  5306                           pclath	equ	0xFFA
  5307                           tblptru	equ	0xFF8
  5308                           tblptrh	equ	0xFF7
  5309                           tblptrl	equ	0xFF6
  5310                           tablat	equ	0xFF5
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           indf1	equ	0xFE7
  5314                           postinc1	equ	0xFE6
  5315                           postdec1	equ	0xFE5
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           plusw2	equ	0xFDB
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function _obtener_dia_mes *****************
  5327 ;; Defined at:
  5328 ;;		line 71 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;		None
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;		None               void
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0, cstack
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5344 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5346 ;;Total ram usage:        2 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    1
  5349 ;; This function calls:
  5350 ;;		___awmod
  5351 ;; This function is called by:
  5352 ;;		_cambiar_dia
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text29
  5357  00EFA4                     __ptext29:
  5358                           	opt stack 0
  5359  00EFA4                     _obtener_dia_mes:
  5360                           	opt stack 26
  5361                           
  5362                           ;fecha.c: 73: if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 
      +                          || mes == 12)
  5363                           
  5364                           ;incstack = 0
  5365  00EFA4  045C               	decf	_mes,w,c
  5366  00EFA6  105D               	iorwf	_mes+1,w,c
  5367  00EFA8  B4D8               	btfsc	status,2,c
  5368  00EFAA  D01E               	goto	l3852
  5369  00EFAC  0E03               	movlw	3
  5370  00EFAE  185C               	xorwf	_mes,w,c
  5371  00EFB0  105D               	iorwf	_mes+1,w,c
  5372  00EFB2  B4D8               	btfsc	status,2,c
  5373  00EFB4  D019               	goto	l3852
  5374  00EFB6  0E05               	movlw	5
  5375  00EFB8  185C               	xorwf	_mes,w,c
  5376  00EFBA  105D               	iorwf	_mes+1,w,c
  5377  00EFBC  B4D8               	btfsc	status,2,c
  5378  00EFBE  D014               	goto	l3852
  5379  00EFC0  0E07               	movlw	7
  5380  00EFC2  185C               	xorwf	_mes,w,c
  5381  00EFC4  105D               	iorwf	_mes+1,w,c
  5382  00EFC6  B4D8               	btfsc	status,2,c
  5383  00EFC8  D00F               	goto	l3852
  5384  00EFCA  0E08               	movlw	8
  5385  00EFCC  185C               	xorwf	_mes,w,c
  5386  00EFCE  105D               	iorwf	_mes+1,w,c
  5387  00EFD0  B4D8               	btfsc	status,2,c
  5388  00EFD2  D00A               	goto	l3852
  5389  00EFD4  0E0A               	movlw	10
  5390  00EFD6  185C               	xorwf	_mes,w,c
  5391  00EFD8  105D               	iorwf	_mes+1,w,c
  5392  00EFDA  B4D8               	btfsc	status,2,c
  5393  00EFDC  D005               	goto	l3852
  5394  00EFDE  0E0C               	movlw	12
  5395  00EFE0  185C               	xorwf	_mes,w,c
  5396  00EFE2  105D               	iorwf	_mes+1,w,c
  5397  00EFE4  A4D8               	btfss	status,2,c
  5398  00EFE6  D006               	goto	l3854
  5399  00EFE8                     l3852:
  5400                           
  5401                           ;fecha.c: 74: valor_max = 31;
  5402  00EFE8  0E00               	movlw	0
  5403  00EFEA  0100               	movlb	0	; () banked
  5404  00EFEC  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5405  00EFEE  0E1F               	movlw	31
  5406  00EFF0  6FA6               	movwf	fecha@valor_max& (0+255),b
  5407  00EFF2  0012               	return	
  5408  00EFF4                     l3854:
  5409                           
  5410                           ;fecha.c: 75: else if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
  5411  00EFF4  0E04               	movlw	4
  5412  00EFF6  185C               	xorwf	_mes,w,c
  5413  00EFF8  105D               	iorwf	_mes+1,w,c
  5414  00EFFA  B4D8               	btfsc	status,2,c
  5415  00EFFC  D00F               	goto	l3862
  5416  00EFFE  0E06               	movlw	6
  5417  00F000  185C               	xorwf	_mes,w,c
  5418  00F002  105D               	iorwf	_mes+1,w,c
  5419  00F004  B4D8               	btfsc	status,2,c
  5420  00F006  D00A               	goto	l3862
  5421  00F008  0E09               	movlw	9
  5422  00F00A  185C               	xorwf	_mes,w,c
  5423  00F00C  105D               	iorwf	_mes+1,w,c
  5424  00F00E  B4D8               	btfsc	status,2,c
  5425  00F010  D005               	goto	l3862
  5426  00F012  0E0B               	movlw	11
  5427  00F014  185C               	xorwf	_mes,w,c
  5428  00F016  105D               	iorwf	_mes+1,w,c
  5429  00F018  A4D8               	btfss	status,2,c
  5430  00F01A  D006               	goto	l3864
  5431  00F01C                     l3862:
  5432                           
  5433                           ;fecha.c: 76: valor_max = 30;
  5434  00F01C  0E00               	movlw	0
  5435  00F01E  0100               	movlb	0	; () banked
  5436  00F020  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5437  00F022  0E1E               	movlw	30
  5438  00F024  6FA6               	movwf	fecha@valor_max& (0+255),b
  5439  00F026  0012               	return	
  5440  00F028                     l3864:
  5441                           
  5442                           ;fecha.c: 77: else{
  5443                           ;fecha.c: 78: if ((anio%4==0) && (anio%100!=0) || anio%400==0)
  5444  00F028  0E03               	movlw	3
  5445  00F02A  145A               	andwf	_anio,w,c
  5446  00F02C  6E07               	movwf	??_obtener_dia_mes& (0+255),c
  5447  00F02E  0E00               	movlw	0
  5448  00F030  145B               	andwf	_anio+1,w,c
  5449  00F032  6E08               	movwf	(??_obtener_dia_mes+1)& (0+255),c
  5450  00F034  5007               	movf	??_obtener_dia_mes,w,c
  5451  00F036  1008               	iorwf	??_obtener_dia_mes+1,w,c
  5452  00F038  A4D8               	btfss	status,2,c
  5453  00F03A  D00E               	goto	l3868
  5454  00F03C  C05A  F001         	movff	_anio,___awmod@dividend
  5455  00F040  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5456  00F044  0E00               	movlw	0
  5457  00F046  6E04               	movwf	___awmod@divisor+1,c
  5458  00F048  0E64               	movlw	100
  5459  00F04A  6E03               	movwf	___awmod@divisor,c
  5460  00F04C  EC87  F074         	call	___awmod	;wreg free
  5461  00F050  5001               	movf	?___awmod,w,c
  5462  00F052  1002               	iorwf	?___awmod+1,w,c
  5463  00F054  A4D8               	btfss	status,2,c
  5464  00F056  D00E               	goto	l3870
  5465  00F058                     l3868:
  5466  00F058  C05A  F001         	movff	_anio,___awmod@dividend
  5467  00F05C  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  5468  00F060  0E01               	movlw	1
  5469  00F062  6E04               	movwf	___awmod@divisor+1,c
  5470  00F064  0E90               	movlw	144
  5471  00F066  6E03               	movwf	___awmod@divisor,c
  5472  00F068  EC87  F074         	call	___awmod	;wreg free
  5473  00F06C  5001               	movf	?___awmod,w,c
  5474  00F06E  1002               	iorwf	?___awmod+1,w,c
  5475  00F070  A4D8               	btfss	status,2,c
  5476  00F072  D006               	goto	l3872
  5477  00F074                     l3870:
  5478                           
  5479                           ;fecha.c: 79: valor_max =29;
  5480  00F074  0E00               	movlw	0
  5481  00F076  0100               	movlb	0	; () banked
  5482  00F078  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5483  00F07A  0E1D               	movlw	29
  5484  00F07C  6FA6               	movwf	fecha@valor_max& (0+255),b
  5485  00F07E  0012               	return	
  5486  00F080                     l3872:
  5487                           
  5488                           ;fecha.c: 80: else
  5489                           ;fecha.c: 81: valor_max =28;
  5490  00F080  0E00               	movlw	0
  5491  00F082  0100               	movlb	0	; () banked
  5492  00F084  6FA7               	movwf	(fecha@valor_max+1)& (0+255),b
  5493  00F086  0E1C               	movlw	28
  5494  00F088  6FA6               	movwf	fecha@valor_max& (0+255),b
  5495                           
  5496                           ; BSR set to: 0
  5497                           
  5498                           ; BSR set to: 0
  5499  00F08A  0012               	return	
  5500                           
  5501                           ; BSR set to: 0
  5502                           
  5503                           ; BSR set to: 0
  5504  00F08C  0012               	return		;funcret
  5505  00F08E                     __end_of_obtener_dia_mes:
  5506                           	opt stack 0
  5507                           tosu	equ	0xFFF
  5508                           tosh	equ	0xFFE
  5509                           tosl	equ	0xFFD
  5510                           pclath	equ	0xFFA
  5511                           tblptru	equ	0xFF8
  5512                           tblptrh	equ	0xFF7
  5513                           tblptrl	equ	0xFF6
  5514                           tablat	equ	0xFF5
  5515                           postinc0	equ	0xFEE
  5516                           wreg	equ	0xFE8
  5517                           indf1	equ	0xFE7
  5518                           postinc1	equ	0xFE6
  5519                           postdec1	equ	0xFE5
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           plusw2	equ	0xFDB
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function ___awmod *****************
  5531 ;; Defined at:
  5532 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  dividend        2    0[COMRAM] int 
  5535 ;;  divisor         2    2[COMRAM] int 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  sign            1    5[COMRAM] unsigned char 
  5538 ;;  counter         1    4[COMRAM] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  2    0[COMRAM] int 
  5541 ;; Registers used:
  5542 ;;		wreg, status,2, status,0
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5549 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5551 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5552 ;;Total ram usage:        6 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; This function calls:
  5555 ;;		Nothing
  5556 ;; This function is called by:
  5557 ;;		_obtener_dia_mes
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text30
  5562  00E90E                     __ptext30:
  5563                           	opt stack 0
  5564  00E90E                     ___awmod:
  5565                           	opt stack 26
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;incstack = 0
  5569  00E90E  0E00               	movlw	0
  5570  00E910  6E06               	movwf	___awmod@sign,c
  5571  00E912  AE02               	btfss	___awmod@dividend+1,7,c
  5572  00E914  D007               	goto	l3680
  5573  00E916  6C01               	negf	___awmod@dividend,c
  5574  00E918  1E02               	comf	___awmod@dividend+1,f,c
  5575  00E91A  B0D8               	btfsc	status,0,c
  5576  00E91C  2A02               	incf	___awmod@dividend+1,f,c
  5577  00E91E  0E01               	movlw	1
  5578  00E920  6E06               	movwf	___awmod@sign,c
  5579  00E922  D000               	goto	l3680
  5580  00E924                     l3680:
  5581  00E924  AE04               	btfss	___awmod@divisor+1,7,c
  5582  00E926  D005               	goto	l3684
  5583  00E928  6C03               	negf	___awmod@divisor,c
  5584  00E92A  1E04               	comf	___awmod@divisor+1,f,c
  5585  00E92C  B0D8               	btfsc	status,0,c
  5586  00E92E  2A04               	incf	___awmod@divisor+1,f,c
  5587  00E930  D000               	goto	l3684
  5588  00E932                     l3684:
  5589  00E932  5003               	movf	___awmod@divisor,w,c
  5590  00E934  1004               	iorwf	___awmod@divisor+1,w,c
  5591  00E936  B4D8               	btfsc	status,2,c
  5592  00E938  D01D               	goto	l3700
  5593  00E93A  0E01               	movlw	1
  5594  00E93C  6E05               	movwf	___awmod@counter,c
  5595  00E93E  D005               	goto	l3690
  5596  00E940                     l3688:
  5597  00E940  90D8               	bcf	status,0,c
  5598  00E942  3603               	rlcf	___awmod@divisor,f,c
  5599  00E944  3604               	rlcf	___awmod@divisor+1,f,c
  5600  00E946  2A05               	incf	___awmod@counter,f,c
  5601  00E948  D000               	goto	l3690
  5602  00E94A                     l3690:
  5603  00E94A  BE04               	btfsc	___awmod@divisor+1,7,c
  5604  00E94C  D002               	goto	l3692
  5605  00E94E  D7F8               	goto	l3688
  5606  00E950  D000               	goto	l3692
  5607  00E952                     l3692:
  5608  00E952  5003               	movf	___awmod@divisor,w,c
  5609  00E954  5C01               	subwf	___awmod@dividend,w,c
  5610  00E956  5004               	movf	___awmod@divisor+1,w,c
  5611  00E958  5802               	subwfb	___awmod@dividend+1,w,c
  5612  00E95A  A0D8               	btfss	status,0,c
  5613  00E95C  D005               	goto	l3696
  5614  00E95E  5003               	movf	___awmod@divisor,w,c
  5615  00E960  5E01               	subwf	___awmod@dividend,f,c
  5616  00E962  5004               	movf	___awmod@divisor+1,w,c
  5617  00E964  5A02               	subwfb	___awmod@dividend+1,f,c
  5618  00E966  D000               	goto	l3696
  5619  00E968                     l3696:
  5620  00E968  90D8               	bcf	status,0,c
  5621  00E96A  3204               	rrcf	___awmod@divisor+1,f,c
  5622  00E96C  3203               	rrcf	___awmod@divisor,f,c
  5623  00E96E  2E05               	decfsz	___awmod@counter,f,c
  5624  00E970  D7F0               	goto	l3692
  5625  00E972  D000               	goto	l3700
  5626  00E974                     l3700:
  5627  00E974  5006               	movf	___awmod@sign,w,c
  5628  00E976  B4D8               	btfsc	status,2,c
  5629  00E978  D005               	goto	l3704
  5630  00E97A  6C01               	negf	___awmod@dividend,c
  5631  00E97C  1E02               	comf	___awmod@dividend+1,f,c
  5632  00E97E  B0D8               	btfsc	status,0,c
  5633  00E980  2A02               	incf	___awmod@dividend+1,f,c
  5634  00E982  D000               	goto	l3704
  5635  00E984                     l3704:
  5636  00E984  C001  F001         	movff	___awmod@dividend,?___awmod
  5637  00E988  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5638  00E98C  0012               	return	
  5639  00E98E  0012               	return		;funcret
  5640  00E990                     __end_of___awmod:
  5641                           	opt stack 0
  5642                           tosu	equ	0xFFF
  5643                           tosh	equ	0xFFE
  5644                           tosl	equ	0xFFD
  5645                           pclath	equ	0xFFA
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           postinc0	equ	0xFEE
  5651                           wreg	equ	0xFE8
  5652                           indf1	equ	0xFE7
  5653                           postinc1	equ	0xFE6
  5654                           postdec1	equ	0xFE5
  5655                           fsr1h	equ	0xFE2
  5656                           fsr1l	equ	0xFE1
  5657                           indf2	equ	0xFDF
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           plusw2	equ	0xFDB
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _guardar_elemento *****************
  5666 ;; Defined at:
  5667 ;;		line 7 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  tecla           1    wreg     unsigned char 
  5670 ;;  array           2   35[COMRAM] PTR unsigned char 
  5671 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  5672 ;;		 -> fecha@day(3), 
  5673 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  5674 ;;		 -> tamanio_hora(2), tamanio_minutos(2), tamanio_dia(2), tamanio_mes(2), 
  5675 ;;		 -> tamanio_anio(2), 
  5676 ;;  validacion      2   39[COMRAM] int 
  5677 ;;  dato_fecha      2   41[COMRAM] PTR int 
  5678 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  5679 ;;		 -> dia(2), 
  5680 ;;  doit            2   43[COMRAM] PTR FTN(PTR int ,const i
  5681 ;;		 -> actualizar_minutos(0), actualizar_hora(0), actualiza_dia(0), actualiza_elemento(0), 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  tecla           1   47[COMRAM] unsigned char 
  5684 ;;  i               2   48[COMRAM] int 
  5685 ;;  valor           2   50[COMRAM] int 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5695 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5696 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5698 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5699 ;;Total ram usage:       17 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    5
  5702 ;; This function calls:
  5703 ;;		_actualiza_dia
  5704 ;;		_actualiza_elemento
  5705 ;;		_actualizar_hora
  5706 ;;		_actualizar_minutos
  5707 ;;		_convertir_a_int
  5708 ;;		_lcd_gotoxy
  5709 ;;		_lcd_putrs
  5710 ;;		_sprintf
  5711 ;; This function is called by:
  5712 ;;		_cambiar_dia
  5713 ;;		_cambiar_mes
  5714 ;;		_cambiar_anio
  5715 ;;		_cambiar_hora
  5716 ;;		_cambiar_minutos
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text31
  5721  00F7F2                     __ptext31:
  5722                           	opt stack 0
  5723  00F7F2                     _guardar_elemento:
  5724                           	opt stack 22
  5725                           
  5726                           ;incstack = 0
  5727                           ;guardar_elemento@tecla stored from wreg
  5728  00F7F2  6E30               	movwf	guardar_elemento@tecla,c
  5729                           
  5730                           ;fecha.c: 9: int valor = 0;
  5731  00F7F4  0E00               	movlw	0
  5732  00F7F6  6E34               	movwf	guardar_elemento@valor+1,c
  5733  00F7F8  0E00               	movlw	0
  5734  00F7FA  6E33               	movwf	guardar_elemento@valor,c
  5735                           
  5736                           ;fecha.c: 11: if (validacion){
  5737  00F7FC  5028               	movf	guardar_elemento@validacion,w,c
  5738  00F7FE  1029               	iorwf	guardar_elemento@validacion+1,w,c
  5739  00F800  B4D8               	btfsc	status,2,c
  5740  00F802  D044               	goto	l3808
  5741                           
  5742                           ;fecha.c: 13: sprintf(buffer2,"%01u",tecla);
  5743  00F804  0EAA               	movlw	low _buffer2
  5744  00F806  6E0D               	movwf	sprintf@sp,c
  5745  00F808  0E00               	movlw	high _buffer2
  5746  00F80A  6E0E               	movwf	sprintf@sp+1,c
  5747  00F80C  0EE9               	movlw	low STR_8
  5748  00F80E  6E0F               	movwf	sprintf@f,c
  5749  00F810  0EFF               	movlw	high STR_8
  5750  00F812  6E10               	movwf	sprintf@f+1,c
  5751  00F814  C030  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  5752  00F818  6A12               	clrf	?_sprintf+5,c
  5753  00F81A  ECC9  F07D         	call	_sprintf	;wreg free
  5754                           
  5755                           ;fecha.c: 14: array[*tamanio_array] = *buffer2;
  5756  00F81E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5757  00F822  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5758  00F826  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5759  00F82A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5760  00F82E  502E               	movf	??_guardar_elemento,w,c
  5761  00F830  2424               	addwf	guardar_elemento@array,w,c
  5762  00F832  6ED9               	movwf	fsr2l,c
  5763  00F834  502F               	movf	??_guardar_elemento+1,w,c
  5764  00F836  2025               	addwfc	guardar_elemento@array+1,w,c
  5765  00F838  6EDA               	movwf	fsr2h,c
  5766  00F83A  C0AA  FFDF         	movff	_buffer2,indf2
  5767                           
  5768                           ;fecha.c: 15: array [(*tamanio_array)+1] = 0;
  5769  00F83E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5770  00F842  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5771  00F846  CFDE F02E          	movff	postinc2,??_guardar_elemento
  5772  00F84A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  5773  00F84E  0E01               	movlw	1
  5774  00F850  262E               	addwf	??_guardar_elemento,f,c
  5775  00F852  0E00               	movlw	0
  5776  00F854  222F               	addwfc	??_guardar_elemento+1,f,c
  5777  00F856  502E               	movf	??_guardar_elemento,w,c
  5778  00F858  2424               	addwf	guardar_elemento@array,w,c
  5779  00F85A  6ED9               	movwf	fsr2l,c
  5780  00F85C  502F               	movf	??_guardar_elemento+1,w,c
  5781  00F85E  2025               	addwfc	guardar_elemento@array+1,w,c
  5782  00F860  6EDA               	movwf	fsr2h,c
  5783  00F862  0E00               	movlw	0
  5784  00F864  6EDF               	movwf	indf2,c
  5785                           
  5786                           ;fecha.c: 16: (*tamanio_array)++;
  5787  00F866  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5788  00F86A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5789  00F86E  2ADE               	incf	postinc2,f,c
  5790  00F870  0E00               	movlw	0
  5791  00F872  22DD               	addwfc	postdec2,f,c
  5792                           
  5793                           ;fecha.c: 18: lcd_gotoxy(1,2);
  5794  00F874  0E02               	movlw	2
  5795  00F876  6E05               	movwf	lcd_gotoxy@y,c
  5796  00F878  0E01               	movlw	1
  5797  00F87A  EC15  F06F         	call	_lcd_gotoxy
  5798                           
  5799                           ;fecha.c: 19: lcd_putrs(array);
  5800  00F87E  C024  F009         	movff	guardar_elemento@array,lcd_putrs@ptr
  5801  00F882  C025  F00A         	movff	guardar_elemento@array+1,lcd_putrs@ptr+1
  5802  00F886  ECAB  F070         	call	_lcd_putrs	;wreg free
  5803  00F88A  D000               	goto	l3808
  5804  00F88C                     l3808:
  5805                           
  5806                           ;fecha.c: 20: }
  5807                           ;fecha.c: 22: if (*tamanio_array >= 3 - 1){
  5808  00F88C  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5809  00F890  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5810  00F894  0E01               	movlw	1
  5811  00F896  BEDB               	btfsc	plusw2,7,c
  5812  00F898  0012               	return	
  5813  00F89A  0E01               	movlw	1
  5814  00F89C  50DB               	movf	plusw2,w,c
  5815  00F89E  E104               	bnz	u2970
  5816  00F8A0  0E02               	movlw	2
  5817  00F8A2  5CDE               	subwf	postinc2,w,c
  5818  00F8A4  A0D8               	btfss	status,0,c
  5819  00F8A6  0012               	return	
  5820  00F8A8                     u2970:
  5821                           
  5822                           ;fecha.c: 24: convertir_a_int(array,&valor);
  5823  00F8A8  C024  F00E         	movff	guardar_elemento@array,convertir_a_int@array
  5824  00F8AC  C025  F00F         	movff	guardar_elemento@array+1,convertir_a_int@array+1
  5825  00F8B0  0E33               	movlw	low guardar_elemento@valor
  5826  00F8B2  6E10               	movwf	convertir_a_int@valor,c
  5827  00F8B4  0E00               	movlw	high guardar_elemento@valor
  5828  00F8B6  6E11               	movwf	convertir_a_int@valor+1,c
  5829  00F8B8  ECB3  F06E         	call	_convertir_a_int	;wreg free
  5830                           
  5831                           ;fecha.c: 26: if(valor >= valor_min && valor <= valor_max){
  5832  00F8BC  0100               	movlb	0	; () banked
  5833  00F8BE  51A8               	movf	fecha@valor_min& (0+255),w,b
  5834  00F8C0  5C33               	subwf	guardar_elemento@valor,w,c
  5835  00F8C2  5034               	movf	guardar_elemento@valor+1,w,c
  5836  00F8C4  0A80               	xorlw	128
  5837  00F8C6  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5838  00F8C8  0100               	movlb	0	; () banked
  5839  00F8CA  51A9               	movf	(fecha@valor_min+1)& (0+255),w,b
  5840  00F8CC  0A80               	xorlw	128
  5841  00F8CE  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5842  00F8D0  A0D8               	btfss	status,0,c
  5843  00F8D2  D029               	goto	l3820
  5844                           
  5845                           ; BSR set to: 0
  5846  00F8D4  5033               	movf	guardar_elemento@valor,w,c
  5847  00F8D6  0100               	movlb	0	; () banked
  5848  00F8D8  5DA6               	subwf	fecha@valor_max& (0+255),w,b
  5849  00F8DA  0100               	movlb	0	; () banked
  5850  00F8DC  51A7               	movf	(fecha@valor_max+1)& (0+255),w,b
  5851  00F8DE  0A80               	xorlw	128
  5852  00F8E0  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5853  00F8E2  5034               	movf	guardar_elemento@valor+1,w,c
  5854  00F8E4  0A80               	xorlw	128
  5855  00F8E6  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  5856  00F8E8  A0D8               	btfss	status,0,c
  5857  00F8EA  D01D               	goto	l3820
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;fecha.c: 27: doit(dato_fecha,valor);
  5861  00F8EC  C02A  F016         	movff	guardar_elemento@dato_fecha,actualizar_minutos@elemento
  5862  00F8F0  C02B  F017         	movff	guardar_elemento@dato_fecha+1,actualizar_minutos@elemento+1
  5863  00F8F4  C033  F018         	movff	guardar_elemento@valor,actualizar_minutos@valor
  5864  00F8F8  C034  F019         	movff	guardar_elemento@valor+1,actualizar_minutos@valor+1
  5865  00F8FC  D801               	call	u3008
  5866  00F8FE  D00A               	goto	l3818
  5867  00F900                     u3008:
  5868  00F900  0005               	push	
  5869  00F902  6EFA               	movwf	pclath,c
  5870  00F904  502C               	movf	guardar_elemento@doit,w,c
  5871  00F906  6EFD               	movwf	tosl,c
  5872  00F908  502D               	movf	guardar_elemento@doit+1,w,c
  5873  00F90A  6EFE               	movwf	tosh,c
  5874  00F90C  50F8               	movf	tblptru,w,c
  5875  00F90E  6EFF               	movwf	tosu,c
  5876  00F910  50FA               	movf	pclath,w,c
  5877  00F912  0012               	return		;indir
  5878  00F914                     l3818:
  5879                           
  5880                           ;fecha.c: 28: _delay((unsigned long)((98)*(8000000/4000.0)));
  5881  00F914  0EFF               	movlw	255
  5882  00F916  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5883  00F918  0E8A               	movlw	138
  5884  00F91A                     u3867:
  5885  00F91A  2EE8               	decfsz	wreg,f,c
  5886  00F91C  D7FE               	goto	u3867
  5887  00F91E  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5888  00F920  D7FC               	goto	u3867
  5889  00F922  D000               	nop2	
  5890                           
  5891                           ;fecha.c: 30: }else{
  5892  00F924  0012               	return	
  5893  00F926                     l3820:
  5894                           
  5895                           ;fecha.c: 31: *tamanio_array = 0;
  5896  00F926  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  5897  00F92A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  5898  00F92E  0E00               	movlw	0
  5899  00F930  6EDE               	movwf	postinc2,c
  5900  00F932  0E00               	movlw	0
  5901  00F934  6EDD               	movwf	postdec2,c
  5902                           
  5903                           ;fecha.c: 32: *array = 0;
  5904  00F936  C024  FFD9         	movff	guardar_elemento@array,fsr2l
  5905  00F93A  C025  FFDA         	movff	guardar_elemento@array+1,fsr2h
  5906  00F93E  0E00               	movlw	0
  5907  00F940  6EDF               	movwf	indf2,c
  5908                           
  5909                           ;fecha.c: 33: lcd_gotoxy(1,2);
  5910  00F942  0E02               	movlw	2
  5911  00F944  6E05               	movwf	lcd_gotoxy@y,c
  5912  00F946  0E01               	movlw	1
  5913  00F948  EC15  F06F         	call	_lcd_gotoxy
  5914                           
  5915                           ;fecha.c: 34: sprintf(buffer2,"valor >=%d y <=%d",valor_min,valor_max);
  5916  00F94C  0EAA               	movlw	low _buffer2
  5917  00F94E  6E0D               	movwf	sprintf@sp,c
  5918  00F950  0E00               	movlw	high _buffer2
  5919  00F952  6E0E               	movwf	sprintf@sp+1,c
  5920  00F954  0E35               	movlw	low STR_32
  5921  00F956  6E0F               	movwf	sprintf@f,c
  5922  00F958  0EFF               	movlw	high STR_32
  5923  00F95A  6E10               	movwf	sprintf@f+1,c
  5924  00F95C  C0A8  F011         	movff	fecha@valor_min,?_sprintf+4
  5925  00F960  C0A9  F012         	movff	fecha@valor_min+1,?_sprintf+5
  5926  00F964  C0A6  F013         	movff	fecha@valor_max,?_sprintf+6
  5927  00F968  C0A7  F014         	movff	fecha@valor_max+1,?_sprintf+7
  5928  00F96C  ECC9  F07D         	call	_sprintf	;wreg free
  5929                           
  5930                           ;fecha.c: 35: lcd_putrs(buffer2);
  5931  00F970  0EAA               	movlw	low _buffer2
  5932  00F972  6E09               	movwf	lcd_putrs@ptr,c
  5933  00F974  0E00               	movlw	high _buffer2
  5934  00F976  6E0A               	movwf	lcd_putrs@ptr+1,c
  5935  00F978  ECAB  F070         	call	_lcd_putrs	;wreg free
  5936                           
  5937                           ;fecha.c: 37: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  5938  00F97C  0E00               	movlw	0
  5939  00F97E  6E32               	movwf	guardar_elemento@i+1,c
  5940  00F980  0E00               	movlw	0
  5941  00F982  6E31               	movwf	guardar_elemento@i,c
  5942  00F984                     l3830:
  5943  00F984  BE32               	btfsc	guardar_elemento@i+1,7,c
  5944  00F986  D008               	goto	l3834
  5945  00F988  5032               	movf	guardar_elemento@i+1,w,c
  5946  00F98A  E112               	bnz	l619
  5947  00F98C  0E04               	movlw	4
  5948  00F98E  5C31               	subwf	guardar_elemento@i,w,c
  5949  00F990  B0D8               	btfsc	status,0,c
  5950  00F992  0012               	return	
  5951  00F994  D001               	goto	l3834
  5952  00F996  0012               	return	
  5953  00F998                     l3834:
  5954  00F998  0EFF               	movlw	255
  5955  00F99A  6E2E               	movwf	??_guardar_elemento& (0+255),c
  5956  00F99C  0E8A               	movlw	138
  5957  00F99E                     u3877:
  5958  00F99E  2EE8               	decfsz	wreg,f,c
  5959  00F9A0  D7FE               	goto	u3877
  5960  00F9A2  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  5961  00F9A4  D7FC               	goto	u3877
  5962  00F9A6  D000               	nop2	
  5963  00F9A8  4A31               	infsnz	guardar_elemento@i,f,c
  5964  00F9AA  2A32               	incf	guardar_elemento@i+1,f,c
  5965  00F9AC  D7EB               	goto	l3830
  5966  00F9AE  0012               	return	
  5967  00F9B0                     l619:
  5968  00F9B0  0012               	return		;funcret
  5969  00F9B2                     __end_of_guardar_elemento:
  5970                           	opt stack 0
  5971                           tosu	equ	0xFFF
  5972                           tosh	equ	0xFFE
  5973                           tosl	equ	0xFFD
  5974                           pclath	equ	0xFFA
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           postinc0	equ	0xFEE
  5980                           wreg	equ	0xFE8
  5981                           indf1	equ	0xFE7
  5982                           postinc1	equ	0xFE6
  5983                           postdec1	equ	0xFE5
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _convertir_a_int *****************
  5995 ;; Defined at:
  5996 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  array           2   13[COMRAM] PTR unsigned char 
  5999 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  6000 ;;		 -> fecha@day(3), 
  6001 ;;  valor           2   15[COMRAM] PTR int 
  6002 ;;		 -> guardar_elemento@valor(2), 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;		None
  6005 ;; Return value:  Size  Location     Type
  6006 ;;		None               void
  6007 ;; Registers used:
  6008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6017 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6018 ;;Total ram usage:        4 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    2
  6021 ;; This function calls:
  6022 ;;		_atoi
  6023 ;; This function is called by:
  6024 ;;		_guardar_elemento
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text32
  6029  00DD66                     __ptext32:
  6030                           	opt stack 0
  6031  00DD66                     _convertir_a_int:
  6032                           	opt stack 24
  6033                           
  6034                           ;fecha.c: 4: *valor = atoi(array);
  6035                           
  6036                           ;incstack = 0
  6037  00DD66  C00E  F007         	movff	convertir_a_int@array,atoi@s
  6038  00DD6A  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  6039  00DD6E  EC92  F076         	call	_atoi	;wreg free
  6040  00DD72  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  6041  00DD76  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  6042  00DD7A  C007  FFDE         	movff	?_atoi,postinc2
  6043  00DD7E  C008  FFDD         	movff	?_atoi+1,postdec2
  6044  00DD82  0012               	return		;funcret
  6045  00DD84                     __end_of_convertir_a_int:
  6046                           	opt stack 0
  6047                           tosu	equ	0xFFF
  6048                           tosh	equ	0xFFE
  6049                           tosl	equ	0xFFD
  6050                           pclath	equ	0xFFA
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           indf1	equ	0xFE7
  6058                           postinc1	equ	0xFE6
  6059                           postdec1	equ	0xFE5
  6060                           fsr1h	equ	0xFE2
  6061                           fsr1l	equ	0xFE1
  6062                           indf2	equ	0xFDF
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           plusw2	equ	0xFDB
  6066                           fsr2h	equ	0xFDA
  6067                           fsr2l	equ	0xFD9
  6068                           status	equ	0xFD8
  6069                           
  6070 ;; *************** function _atoi *****************
  6071 ;; Defined at:
  6072 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  s               2    6[COMRAM] PTR const unsigned char 
  6075 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  6076 ;;		 -> fecha@day(3), comando(3), 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  a               2   11[COMRAM] int 
  6079 ;;  sign            1   10[COMRAM] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  2    6[COMRAM] int 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6090 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6092 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;Total ram usage:        7 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    1
  6096 ;; This function calls:
  6097 ;;		___wmul
  6098 ;;		_isdigit
  6099 ;; This function is called by:
  6100 ;;		_main
  6101 ;;		_convertir_a_int
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text33
  6106  00ED24                     __ptext33:
  6107                           	opt stack 0
  6108  00ED24                     _atoi:
  6109                           	opt stack 24
  6110                           
  6111                           ;incstack = 0
  6112  00ED24  D003               	goto	l3420
  6113  00ED26                     l3418:
  6114  00ED26  4A07               	infsnz	atoi@s,f,c
  6115  00ED28  2A08               	incf	atoi@s+1,f,c
  6116  00ED2A  D000               	goto	l3420
  6117  00ED2C                     l3420:
  6118  00ED2C  C007  FFD9         	movff	atoi@s,fsr2l
  6119  00ED30  C008  FFDA         	movff	atoi@s+1,fsr2h
  6120  00ED34  0E20               	movlw	32
  6121  00ED36  18DE               	xorwf	postinc2,w,c
  6122  00ED38  B4D8               	btfsc	status,2,c
  6123  00ED3A  D7F5               	goto	l3418
  6124  00ED3C  C007  FFD9         	movff	atoi@s,fsr2l
  6125  00ED40  C008  FFDA         	movff	atoi@s+1,fsr2h
  6126  00ED44  0E09               	movlw	9
  6127  00ED46  18DE               	xorwf	postinc2,w,c
  6128  00ED48  B4D8               	btfsc	status,2,c
  6129  00ED4A  D7ED               	goto	l3418
  6130  00ED4C  0E00               	movlw	0
  6131  00ED4E  6E0D               	movwf	atoi@a+1,c
  6132  00ED50  0E00               	movlw	0
  6133  00ED52  6E0C               	movwf	atoi@a,c
  6134  00ED54  0E00               	movlw	0
  6135  00ED56  6E0B               	movwf	atoi@sign,c
  6136  00ED58  C007  FFD9         	movff	atoi@s,fsr2l
  6137  00ED5C  C008  FFDA         	movff	atoi@s+1,fsr2h
  6138  00ED60  0E2D               	movlw	45
  6139  00ED62  18DE               	xorwf	postinc2,w,c
  6140  00ED64  A4D8               	btfss	status,2,c
  6141  00ED66  D002               	goto	l3430
  6142  00ED68  2A0B               	incf	atoi@sign,f,c
  6143  00ED6A  D025               	goto	l3436
  6144  00ED6C                     l3430:
  6145  00ED6C  C007  FFD9         	movff	atoi@s,fsr2l
  6146  00ED70  C008  FFDA         	movff	atoi@s+1,fsr2h
  6147  00ED74  0E2B               	movlw	43
  6148  00ED76  18DE               	xorwf	postinc2,w,c
  6149  00ED78  A4D8               	btfss	status,2,c
  6150  00ED7A  D020               	goto	l3438
  6151  00ED7C  D01C               	goto	l3436
  6152  00ED7E  D01E               	goto	l3438
  6153  00ED80                     l3434:
  6154  00ED80  C00C  F001         	movff	atoi@a,___wmul@multiplier
  6155  00ED84  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  6156  00ED88  0E00               	movlw	0
  6157  00ED8A  6E04               	movwf	___wmul@multiplicand+1,c
  6158  00ED8C  0E0A               	movlw	10
  6159  00ED8E  6E03               	movwf	___wmul@multiplicand,c
  6160  00ED90  EC39  F06F         	call	___wmul	;wreg free
  6161  00ED94  C007  FFD9         	movff	atoi@s,fsr2l
  6162  00ED98  C008  FFDA         	movff	atoi@s+1,fsr2h
  6163  00ED9C  50DF               	movf	indf2,w,c
  6164  00ED9E  6E09               	movwf	??_atoi& (0+255),c
  6165  00EDA0  6A0A               	clrf	(??_atoi+1)& (0+255),c
  6166  00EDA2  5001               	movf	?___wmul,w,c
  6167  00EDA4  2609               	addwf	??_atoi,f,c
  6168  00EDA6  5002               	movf	?___wmul+1,w,c
  6169  00EDA8  220A               	addwfc	??_atoi+1,f,c
  6170  00EDAA  0ED0               	movlw	208
  6171  00EDAC  2409               	addwf	??_atoi,w,c
  6172  00EDAE  6E0C               	movwf	atoi@a,c
  6173  00EDB0  0EFF               	movlw	255
  6174  00EDB2  200A               	addwfc	??_atoi+1,w,c
  6175  00EDB4  6E0D               	movwf	atoi@a+1,c
  6176  00EDB6                     l3436:
  6177  00EDB6  4A07               	infsnz	atoi@s,f,c
  6178  00EDB8  2A08               	incf	atoi@s+1,f,c
  6179  00EDBA  D000               	goto	l3438
  6180  00EDBC                     l3438:
  6181  00EDBC  C007  FFD9         	movff	atoi@s,fsr2l
  6182  00EDC0  C008  FFDA         	movff	atoi@s+1,fsr2h
  6183  00EDC4  50DF               	movf	indf2,w,c
  6184  00EDC6  ECE2  F06E         	call	_isdigit
  6185  00EDCA  B0D8               	btfsc	status,0,c
  6186  00EDCC  D7D9               	goto	l3434
  6187  00EDCE  500B               	movf	atoi@sign,w,c
  6188  00EDD0  B4D8               	btfsc	status,2,c
  6189  00EDD2  D00D               	goto	l1212
  6190  00EDD4  C00C  F009         	movff	atoi@a,??_atoi
  6191  00EDD8  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  6192  00EDDC  1E09               	comf	??_atoi,f,c
  6193  00EDDE  1E0A               	comf	??_atoi+1,f,c
  6194  00EDE0  4A09               	infsnz	??_atoi,f,c
  6195  00EDE2  2A0A               	incf	??_atoi+1,f,c
  6196  00EDE4  C009  F007         	movff	??_atoi,?_atoi
  6197  00EDE8  C00A  F008         	movff	??_atoi+1,?_atoi+1
  6198  00EDEC  0012               	return	
  6199  00EDEE                     l1212:
  6200  00EDEE  C00C  F007         	movff	atoi@a,?_atoi
  6201  00EDF2  C00D  F008         	movff	atoi@a+1,?_atoi+1
  6202  00EDF6  0012               	return		;funcret
  6203  00EDF8                     __end_of_atoi:
  6204                           	opt stack 0
  6205                           tosu	equ	0xFFF
  6206                           tosh	equ	0xFFE
  6207                           tosl	equ	0xFFD
  6208                           pclath	equ	0xFFA
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           indf1	equ	0xFE7
  6216                           postinc1	equ	0xFE6
  6217                           postdec1	equ	0xFE5
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           plusw2	equ	0xFDB
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _actualizar_hora *****************
  6229 ;; Defined at:
  6230 ;;		line 150 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  elemento        2   21[COMRAM] PTR int 
  6233 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6234 ;;		 -> dia(2), 
  6235 ;;  valor           2   23[COMRAM] const int 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;		None
  6238 ;; Return value:  Size  Location     Type
  6239 ;;		None               void
  6240 ;; Registers used:
  6241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6251 ;;Total ram usage:        4 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    4
  6254 ;; This function calls:
  6255 ;;		_Write_RTC
  6256 ;;		_actualiza_elemento
  6257 ;;		_inicializar_hora
  6258 ;;		_restaurar_comando
  6259 ;; This function is called by:
  6260 ;;		_cambiar_hora
  6261 ;;		_guardar_elemento
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text34
  6266  00DE08                     __ptext34:
  6267                           	opt stack 0
  6268  00DE08                     _actualizar_hora:
  6269                           	opt stack 22
  6270                           
  6271                           ;fecha.c: 152: actualiza_elemento(elemento,valor);
  6272                           
  6273                           ;incstack = 0
  6274  00DE08  C016  F016         	movff	actualizar_hora@elemento,actualiza_elemento@elemento
  6275  00DE0C  C017  F017         	movff	actualizar_hora@elemento+1,actualiza_elemento@elemento+1
  6276  00DE10  C018  F018         	movff	actualizar_hora@valor,actualiza_elemento@valor
  6277  00DE14  C019  F019         	movff	actualizar_hora@valor+1,actualiza_elemento@valor+1
  6278  00DE18  EC48  F06E         	call	_actualiza_elemento	;wreg free
  6279                           
  6280                           ;fecha.c: 153: Write_RTC();
  6281  00DE1C  EC36  F07B         	call	_Write_RTC	;wreg free
  6282                           
  6283                           ;fecha.c: 154: restaurar_comando();
  6284  00DE20  EC6C  F06E         	call	_restaurar_comando	;wreg free
  6285                           
  6286                           ;fecha.c: 155: inicializar_hora();
  6287  00DE24  ECC2  F06E         	call	_inicializar_hora	;wreg free
  6288  00DE28  0012               	return		;funcret
  6289  00DE2A                     __end_of_actualizar_hora:
  6290                           	opt stack 0
  6291                           tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           indf1	equ	0xFE7
  6302                           postinc1	equ	0xFE6
  6303                           postdec1	equ	0xFE5
  6304                           fsr1h	equ	0xFE2
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           plusw2	equ	0xFDB
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _actualiza_dia *****************
  6315 ;; Defined at:
  6316 ;;		line 64 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  elemento        2   21[COMRAM] PTR int 
  6319 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6320 ;;		 -> dia(2), 
  6321 ;;  valor           2   23[COMRAM] const int 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;		None               void
  6326 ;; Registers used:
  6327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6333 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6337 ;;Total ram usage:        4 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    4
  6340 ;; This function calls:
  6341 ;;		_actualiza_elemento
  6342 ;;		_inicializar_fecha
  6343 ;;		_restaurar_comando
  6344 ;; This function is called by:
  6345 ;;		_cambiar_dia
  6346 ;;		_guardar_elemento
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text35
  6351  00DD48                     __ptext35:
  6352                           	opt stack 0
  6353  00DD48                     _actualiza_dia:
  6354                           	opt stack 22
  6355                           
  6356                           ;fecha.c: 66: actualiza_elemento(elemento,valor);
  6357                           
  6358                           ;incstack = 0
  6359  00DD48  C016  F016         	movff	actualiza_dia@elemento,actualiza_elemento@elemento
  6360  00DD4C  C017  F017         	movff	actualiza_dia@elemento+1,actualiza_elemento@elemento+1
  6361  00DD50  C018  F018         	movff	actualiza_dia@valor,actualiza_elemento@valor
  6362  00DD54  C019  F019         	movff	actualiza_dia@valor+1,actualiza_elemento@valor+1
  6363  00DD58  EC48  F06E         	call	_actualiza_elemento	;wreg free
  6364                           
  6365                           ;fecha.c: 67: restaurar_comando();
  6366  00DD5C  EC6C  F06E         	call	_restaurar_comando	;wreg free
  6367                           
  6368                           ;fecha.c: 68: inicializar_fecha();
  6369  00DD60  ECB9  F06F         	call	_inicializar_fecha	;wreg free
  6370  00DD64  0012               	return		;funcret
  6371  00DD66                     __end_of_actualiza_dia:
  6372                           	opt stack 0
  6373                           tosu	equ	0xFFF
  6374                           tosh	equ	0xFFE
  6375                           tosl	equ	0xFFD
  6376                           pclath	equ	0xFFA
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           indf1	equ	0xFE7
  6384                           postinc1	equ	0xFE6
  6385                           postdec1	equ	0xFE5
  6386                           fsr1h	equ	0xFE2
  6387                           fsr1l	equ	0xFE1
  6388                           indf2	equ	0xFDF
  6389                           postinc2	equ	0xFDE
  6390                           postdec2	equ	0xFDD
  6391                           plusw2	equ	0xFDB
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _actualiza_elemento *****************
  6397 ;; Defined at:
  6398 ;;		line 43 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  elemento        2   21[COMRAM] PTR int 
  6401 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6402 ;;		 -> dia(2), 
  6403 ;;  valor           2   23[COMRAM] const int 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;		None               void
  6408 ;; Registers used:
  6409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6418 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6419 ;;Total ram usage:        4 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    3
  6422 ;; This function calls:
  6423 ;;		_Write_RTC
  6424 ;; This function is called by:
  6425 ;;		_actualiza_dia
  6426 ;;		_cambiar_mes
  6427 ;;		_cambiar_anio
  6428 ;;		_actualizar_hora
  6429 ;;		_guardar_elemento
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text36
  6434  00DC90                     __ptext36:
  6435                           	opt stack 0
  6436  00DC90                     _actualiza_elemento:
  6437                           	opt stack 22
  6438                           
  6439                           ;fecha.c: 45: *elemento = valor;
  6440                           
  6441                           ;incstack = 0
  6442  00DC90  C016  FFD9         	movff	actualiza_elemento@elemento,fsr2l
  6443  00DC94  C017  FFDA         	movff	actualiza_elemento@elemento+1,fsr2h
  6444  00DC98  C018  FFDE         	movff	actualiza_elemento@valor,postinc2
  6445  00DC9C  C019  FFDD         	movff	actualiza_elemento@valor+1,postdec2
  6446                           
  6447                           ;fecha.c: 46: Write_RTC();
  6448  00DCA0  EC36  F07B         	call	_Write_RTC	;wreg free
  6449  00DCA4  0012               	return		;funcret
  6450  00DCA6                     __end_of_actualiza_elemento:
  6451                           	opt stack 0
  6452                           tosu	equ	0xFFF
  6453                           tosh	equ	0xFFE
  6454                           tosl	equ	0xFFD
  6455                           pclath	equ	0xFFA
  6456                           tblptru	equ	0xFF8
  6457                           tblptrh	equ	0xFF7
  6458                           tblptrl	equ	0xFF6
  6459                           tablat	equ	0xFF5
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           indf1	equ	0xFE7
  6463                           postinc1	equ	0xFE6
  6464                           postdec1	equ	0xFE5
  6465                           fsr1h	equ	0xFE2
  6466                           fsr1l	equ	0xFE1
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           postdec2	equ	0xFDD
  6470                           plusw2	equ	0xFDB
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _actualizar_minutos *****************
  6476 ;; Defined at:
  6477 ;;		line 158 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  elemento        2   21[COMRAM] PTR int 
  6480 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  6481 ;;		 -> dia(2), 
  6482 ;;  valor           2   23[COMRAM] const int 
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6497 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6498 ;;Total ram usage:        4 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    3
  6501 ;; This function calls:
  6502 ;;		_Write_RTC
  6503 ;; This function is called by:
  6504 ;;		_cambiar_minutos
  6505 ;;		_guardar_elemento
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text37
  6510  00DDA4                     __ptext37:
  6511                           	opt stack 0
  6512  00DDA4                     _actualizar_minutos:
  6513                           	opt stack 23
  6514                           
  6515                           ;fecha.c: 160: *elemento = valor;
  6516                           
  6517                           ;incstack = 0
  6518  00DDA4  C016  FFD9         	movff	actualizar_minutos@elemento,fsr2l
  6519  00DDA8  C017  FFDA         	movff	actualizar_minutos@elemento+1,fsr2h
  6520  00DDAC  C018  FFDE         	movff	actualizar_minutos@valor,postinc2
  6521  00DDB0  C019  FFDD         	movff	actualizar_minutos@valor+1,postdec2
  6522                           
  6523                           ;fecha.c: 161: segundo = 00;
  6524  00DDB4  0E00               	movlw	0
  6525  00DDB6  0100               	movlb	0	; () banked
  6526  00DDB8  6FA1               	movwf	(_segundo+1)& (0+255),b
  6527  00DDBA  0E00               	movlw	0
  6528  00DDBC  6FA0               	movwf	_segundo& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;fecha.c: 162: Write_RTC();
  6532  00DDBE  EC36  F07B         	call	_Write_RTC	;wreg free
  6533  00DDC2  0012               	return		;funcret
  6534  00DDC4                     __end_of_actualizar_minutos:
  6535                           	opt stack 0
  6536                           tosu	equ	0xFFF
  6537                           tosh	equ	0xFFE
  6538                           tosl	equ	0xFFD
  6539                           pclath	equ	0xFFA
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           indf1	equ	0xFE7
  6547                           postinc1	equ	0xFE6
  6548                           postdec1	equ	0xFE5
  6549                           fsr1h	equ	0xFE2
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           plusw2	equ	0xFDB
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _cancelar_cambio_password *****************
  6560 ;; Defined at:
  6561 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;		None               void
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    1
  6582 ;; This function calls:
  6583 ;;		_restaurar_comando
  6584 ;; This function is called by:
  6585 ;;		_menu_cambiar_password
  6586 ;;		_leer_teclado
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text38
  6591  00DE4E                     __ptext38:
  6592                           	opt stack 0
  6593  00DE4E                     _cancelar_cambio_password:
  6594                           	opt stack 28
  6595                           
  6596                           ;alarma.c: 26: new_password[0] = 0;
  6597                           
  6598                           ;incstack = 0
  6599  00DE4E  0E00               	movlw	0
  6600  00DE50  0100               	movlb	0	; () banked
  6601  00DE52  6FC5               	movwf	_new_password& (0+255),b
  6602                           
  6603                           ;alarma.c: 27: temporal[0] = 0;
  6604  00DE54  0E00               	movlw	0
  6605  00DE56  0100               	movlb	0	; () banked
  6606  00DE58  6FCC               	movwf	_temporal& (0+255),b
  6607                           
  6608                           ;alarma.c: 29: tamanio_new_password = 0;
  6609  00DE5A  0E00               	movlw	0
  6610  00DE5C  0100               	movlb	0	; () banked
  6611  00DE5E  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  6612  00DE60  0E00               	movlw	0
  6613  00DE62  6FE9               	movwf	_tamanio_new_password& (0+255),b
  6614                           
  6615                           ;alarma.c: 30: tamanio_password = 0;
  6616  00DE64  0E00               	movlw	0
  6617  00DE66  6E59               	movwf	_tamanio_password+1,c
  6618  00DE68  0E00               	movlw	0
  6619  00DE6A  6E58               	movwf	_tamanio_password,c
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;alarma.c: 32: restaurar_comando();
  6623  00DE6C  EC6C  F06E         	call	_restaurar_comando	;wreg free
  6624  00DE70  0012               	return		;funcret
  6625  00DE72                     __end_of_cancelar_cambio_password:
  6626                           	opt stack 0
  6627                           tosu	equ	0xFFF
  6628                           tosh	equ	0xFFE
  6629                           tosl	equ	0xFFD
  6630                           pclath	equ	0xFFA
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           indf1	equ	0xFE7
  6638                           postinc1	equ	0xFE6
  6639                           postdec1	equ	0xFE5
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           plusw2	equ	0xFDB
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _cancelar_cambio_hora *****************
  6651 ;; Defined at:
  6652 ;;		line 183 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;		None               void
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    1
  6673 ;; This function calls:
  6674 ;;		_inicializar_hora
  6675 ;;		_restaurar_comando
  6676 ;; This function is called by:
  6677 ;;		_menu_cambiar_horario
  6678 ;;		_leer_teclado
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text39
  6683  00DB92                     __ptext39:
  6684                           	opt stack 0
  6685  00DB92                     _cancelar_cambio_hora:
  6686                           	opt stack 28
  6687                           
  6688                           ;fecha.c: 184: inicializar_hora();
  6689                           
  6690                           ;incstack = 0
  6691  00DB92  ECC2  F06E         	call	_inicializar_hora	;wreg free
  6692                           
  6693                           ;fecha.c: 185: restaurar_comando();
  6694  00DB96  EC6C  F06E         	call	_restaurar_comando	;wreg free
  6695  00DB9A  0012               	return		;funcret
  6696  00DB9C                     __end_of_cancelar_cambio_hora:
  6697                           	opt stack 0
  6698                           tosu	equ	0xFFF
  6699                           tosh	equ	0xFFE
  6700                           tosl	equ	0xFFD
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           indf1	equ	0xFE7
  6709                           postinc1	equ	0xFE6
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _cancelar_cambio_fecha *****************
  6722 ;; Defined at:
  6723 ;;		line 116 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;		None               void
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    1
  6744 ;; This function calls:
  6745 ;;		_inicializar_fecha
  6746 ;;		_restaurar_comando
  6747 ;; This function is called by:
  6748 ;;		_menu_cambiar_fecha
  6749 ;;		_leer_teclado
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text40
  6754  00DB88                     __ptext40:
  6755                           	opt stack 0
  6756  00DB88                     _cancelar_cambio_fecha:
  6757                           	opt stack 28
  6758                           
  6759                           ;fecha.c: 117: inicializar_fecha();
  6760                           
  6761                           ;incstack = 0
  6762  00DB88  ECB9  F06F         	call	_inicializar_fecha	;wreg free
  6763                           
  6764                           ;fecha.c: 118: restaurar_comando();
  6765  00DB8C  EC6C  F06E         	call	_restaurar_comando	;wreg free
  6766  00DB90  0012               	return		;funcret
  6767  00DB92                     __end_of_cancelar_cambio_fecha:
  6768                           	opt stack 0
  6769                           tosu	equ	0xFFF
  6770                           tosh	equ	0xFFE
  6771                           tosl	equ	0xFFD
  6772                           pclath	equ	0xFFA
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           postinc1	equ	0xFE6
  6781                           postdec1	equ	0xFE5
  6782                           fsr1h	equ	0xFE2
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           plusw2	equ	0xFDB
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _borrar_current_password *****************
  6793 ;; Defined at:
  6794 ;;		line 122 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;		None
  6799 ;; Return value:  Size  Location     Type
  6800 ;;		None               void
  6801 ;; Registers used:
  6802 ;;		wreg, status,2
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6812 ;;Total ram usage:        0 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_menu_cambiar_password
  6818 ;;		_leer_teclado
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text41
  6823  00DC00                     __ptext41:
  6824                           	opt stack 0
  6825  00DC00                     _borrar_current_password:
  6826                           	opt stack 29
  6827                           
  6828                           ;alarma.c: 123: *current_password = 0;
  6829                           
  6830                           ;incstack = 0
  6831  00DC00  0E00               	movlw	0
  6832  00DC02  0100               	movlb	0	; () banked
  6833  00DC04  6FBE               	movwf	_current_password& (0+255),b
  6834                           
  6835                           ;alarma.c: 124: tamanio_password = 0;
  6836  00DC06  0E00               	movlw	0
  6837  00DC08  6E59               	movwf	_tamanio_password+1,c
  6838  00DC0A  0E00               	movlw	0
  6839  00DC0C  6E58               	movwf	_tamanio_password,c
  6840                           
  6841                           ; BSR set to: 0
  6842  00DC0E  0012               	return		;funcret
  6843  00DC10                     __end_of_borrar_current_password:
  6844                           	opt stack 0
  6845                           tosu	equ	0xFFF
  6846                           tosh	equ	0xFFE
  6847                           tosl	equ	0xFFD
  6848                           pclath	equ	0xFFA
  6849                           tblptru	equ	0xFF8
  6850                           tblptrh	equ	0xFF7
  6851                           tblptrl	equ	0xFF6
  6852                           tablat	equ	0xFF5
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           postinc1	equ	0xFE6
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           plusw2	equ	0xFDB
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _borrar_nuevo_password *****************
  6869 ;; Defined at:
  6870 ;;		line 127 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; This function calls:
  6891 ;;		Nothing
  6892 ;; This function is called by:
  6893 ;;		_menu_cambiar_password
  6894 ;;		_leer_teclado
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text42
  6899  00DC6A                     __ptext42:
  6900                           	opt stack 0
  6901  00DC6A                     _borrar_nuevo_password:
  6902                           	opt stack 29
  6903                           
  6904                           ;alarma.c: 128: *new_password = 0;
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;incstack = 0
  6908  00DC6A  0E00               	movlw	0
  6909  00DC6C  0100               	movlb	0	; () banked
  6910  00DC6E  6FC5               	movwf	_new_password& (0+255),b
  6911                           
  6912                           ;alarma.c: 129: tamanio_new_password = 0;
  6913  00DC70  0E00               	movlw	0
  6914  00DC72  0100               	movlb	0	; () banked
  6915  00DC74  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  6916  00DC76  0E00               	movlw	0
  6917  00DC78  6FE9               	movwf	_tamanio_new_password& (0+255),b
  6918                           
  6919                           ; BSR set to: 0
  6920  00DC7A  0012               	return		;funcret
  6921  00DC7C                     __end_of_borrar_nuevo_password:
  6922                           	opt stack 0
  6923                           tosu	equ	0xFFF
  6924                           tosh	equ	0xFFE
  6925                           tosl	equ	0xFFD
  6926                           pclath	equ	0xFFA
  6927                           tblptru	equ	0xFF8
  6928                           tblptrh	equ	0xFF7
  6929                           tblptrl	equ	0xFF6
  6930                           tablat	equ	0xFF5
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           indf1	equ	0xFE7
  6934                           postinc1	equ	0xFE6
  6935                           postdec1	equ	0xFE5
  6936                           fsr1h	equ	0xFE2
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           postinc2	equ	0xFDE
  6940                           postdec2	equ	0xFDD
  6941                           plusw2	equ	0xFDB
  6942                           fsr2h	equ	0xFDA
  6943                           fsr2l	equ	0xFD9
  6944                           status	equ	0xFD8
  6945                           
  6946 ;; *************** function _borrar_temporal_password *****************
  6947 ;; Defined at:
  6948 ;;		line 132 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;		None
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;		None
  6953 ;; Return value:  Size  Location     Type
  6954 ;;		None               void
  6955 ;; Registers used:
  6956 ;;		wreg, status,2
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6966 ;;Total ram usage:        0 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; This function calls:
  6969 ;;		Nothing
  6970 ;; This function is called by:
  6971 ;;		_menu_cambiar_password
  6972 ;;		_leer_teclado
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           	psect	text43
  6977  00DBF0                     __ptext43:
  6978                           	opt stack 0
  6979  00DBF0                     _borrar_temporal_password:
  6980                           	opt stack 29
  6981                           
  6982                           ;alarma.c: 133: *temporal = 0;
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;incstack = 0
  6986  00DBF0  0E00               	movlw	0
  6987  00DBF2  0100               	movlb	0	; () banked
  6988  00DBF4  6FCC               	movwf	_temporal& (0+255),b
  6989                           
  6990                           ;alarma.c: 134: tamanio_password = 0;
  6991  00DBF6  0E00               	movlw	0
  6992  00DBF8  6E59               	movwf	_tamanio_password+1,c
  6993  00DBFA  0E00               	movlw	0
  6994  00DBFC  6E58               	movwf	_tamanio_password,c
  6995                           
  6996                           ; BSR set to: 0
  6997  00DBFE  0012               	return		;funcret
  6998  00DC00                     __end_of_borrar_temporal_password:
  6999                           	opt stack 0
  7000                           tosu	equ	0xFFF
  7001                           tosh	equ	0xFFE
  7002                           tosl	equ	0xFFD
  7003                           pclath	equ	0xFFA
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           postinc0	equ	0xFEE
  7009                           wreg	equ	0xFE8
  7010                           indf1	equ	0xFE7
  7011                           postinc1	equ	0xFE6
  7012                           postdec1	equ	0xFE5
  7013                           fsr1h	equ	0xFE2
  7014                           fsr1l	equ	0xFE1
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           plusw2	equ	0xFDB
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _borrar_hora *****************
  7024 ;; Defined at:
  7025 ;;		line 188 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;		None               void
  7032 ;; Registers used:
  7033 ;;		wreg, status,2
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_menu_cambiar_horario
  7049 ;;		_leer_teclado
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text44
  7054  00DBE0                     __ptext44:
  7055                           	opt stack 0
  7056  00DBE0                     _borrar_hora:
  7057                           	opt stack 29
  7058                           
  7059                           ;fecha.c: 189: *hour = 0;
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;incstack = 0
  7063  00DBE0  0E00               	movlw	0
  7064  00DBE2  0100               	movlb	0	; () banked
  7065  00DBE4  6FD9               	movwf	fecha@hour& (0+255),b
  7066                           
  7067                           ;fecha.c: 190: tamanio_hora = 0;
  7068  00DBE6  0E00               	movlw	0
  7069  00DBE8  6E55               	movwf	_tamanio_hora+1,c
  7070  00DBEA  0E00               	movlw	0
  7071  00DBEC  6E54               	movwf	_tamanio_hora,c
  7072                           
  7073                           ; BSR set to: 0
  7074  00DBEE  0012               	return		;funcret
  7075  00DBF0                     __end_of_borrar_hora:
  7076                           	opt stack 0
  7077                           tosu	equ	0xFFF
  7078                           tosh	equ	0xFFE
  7079                           tosl	equ	0xFFD
  7080                           pclath	equ	0xFFA
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           indf1	equ	0xFE7
  7088                           postinc1	equ	0xFE6
  7089                           postdec1	equ	0xFE5
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           plusw2	equ	0xFDB
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _borrar_minutos *****************
  7101 ;; Defined at:
  7102 ;;		line 194 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;		None
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;		None
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, status,2
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7120 ;;Total ram usage:        0 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_menu_cambiar_horario
  7126 ;;		_leer_teclado
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text45
  7131  00DC58                     __ptext45:
  7132                           	opt stack 0
  7133  00DC58                     _borrar_minutos:
  7134                           	opt stack 29
  7135                           
  7136                           ;fecha.c: 195: *minutes = 0;
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;incstack = 0
  7140  00DC58  0E00               	movlw	0
  7141  00DC5A  0100               	movlb	0	; () banked
  7142  00DC5C  6FDC               	movwf	fecha@minutes& (0+255),b
  7143                           
  7144                           ;fecha.c: 196: tamanio_minutos = 0;
  7145  00DC5E  0E00               	movlw	0
  7146  00DC60  0100               	movlb	0	; () banked
  7147  00DC62  6FE8               	movwf	(_tamanio_minutos+1)& (0+255),b
  7148  00DC64  0E00               	movlw	0
  7149  00DC66  6FE7               	movwf	_tamanio_minutos& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152  00DC68  0012               	return		;funcret
  7153  00DC6A                     __end_of_borrar_minutos:
  7154                           	opt stack 0
  7155                           tosu	equ	0xFFF
  7156                           tosh	equ	0xFFE
  7157                           tosl	equ	0xFFD
  7158                           pclath	equ	0xFFA
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           indf1	equ	0xFE7
  7166                           postinc1	equ	0xFE6
  7167                           postdec1	equ	0xFE5
  7168                           fsr1h	equ	0xFE2
  7169                           fsr1l	equ	0xFE1
  7170                           indf2	equ	0xFDF
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           plusw2	equ	0xFDB
  7174                           fsr2h	equ	0xFDA
  7175                           fsr2l	equ	0xFD9
  7176                           status	equ	0xFD8
  7177                           
  7178 ;; *************** function _borrar_dia *****************
  7179 ;; Defined at:
  7180 ;;		line 121 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;		None
  7183 ;; Auto vars:     Size  Location     Type
  7184 ;;		None
  7185 ;; Return value:  Size  Location     Type
  7186 ;;		None               void
  7187 ;; Registers used:
  7188 ;;		wreg, status,2
  7189 ;; Tracked objects:
  7190 ;;		On entry : 0/0
  7191 ;;		On exit  : 0/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7198 ;;Total ram usage:        0 bytes
  7199 ;; Hardware stack levels used:    1
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_menu_cambiar_fecha
  7204 ;;		_leer_teclado
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           	psect	text46
  7209  00DBD0                     __ptext46:
  7210                           	opt stack 0
  7211  00DBD0                     _borrar_dia:
  7212                           	opt stack 29
  7213                           
  7214                           ;fecha.c: 122: *day = 0;
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;incstack = 0
  7218  00DBD0  0E00               	movlw	0
  7219  00DBD2  0100               	movlb	0	; () banked
  7220  00DBD4  6FD6               	movwf	fecha@day& (0+255),b
  7221                           
  7222                           ;fecha.c: 123: tamanio_dia = 0;
  7223  00DBD6  0E00               	movlw	0
  7224  00DBD8  6E53               	movwf	_tamanio_dia+1,c
  7225  00DBDA  0E00               	movlw	0
  7226  00DBDC  6E52               	movwf	_tamanio_dia,c
  7227                           
  7228                           ; BSR set to: 0
  7229  00DBDE  0012               	return		;funcret
  7230  00DBE0                     __end_of_borrar_dia:
  7231                           	opt stack 0
  7232                           tosu	equ	0xFFF
  7233                           tosh	equ	0xFFE
  7234                           tosl	equ	0xFFD
  7235                           pclath	equ	0xFFA
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           postinc0	equ	0xFEE
  7241                           wreg	equ	0xFE8
  7242                           indf1	equ	0xFE7
  7243                           postinc1	equ	0xFE6
  7244                           postdec1	equ	0xFE5
  7245                           fsr1h	equ	0xFE2
  7246                           fsr1l	equ	0xFE1
  7247                           indf2	equ	0xFDF
  7248                           postinc2	equ	0xFDE
  7249                           postdec2	equ	0xFDD
  7250                           plusw2	equ	0xFDB
  7251                           fsr2h	equ	0xFDA
  7252                           fsr2l	equ	0xFD9
  7253                           status	equ	0xFD8
  7254                           
  7255 ;; *************** function _borrar_mes *****************
  7256 ;; Defined at:
  7257 ;;		line 127 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, status,2
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7275 ;;Total ram usage:        0 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		_menu_cambiar_fecha
  7281 ;;		_leer_teclado
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text47
  7286  00DBC0                     __ptext47:
  7287                           	opt stack 0
  7288  00DBC0                     _borrar_mes:
  7289                           	opt stack 29
  7290                           
  7291                           ;fecha.c: 128: *month = 0;
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;incstack = 0
  7295  00DBC0  0E00               	movlw	0
  7296  00DBC2  0100               	movlb	0	; () banked
  7297  00DBC4  6FDF               	movwf	fecha@month& (0+255),b
  7298                           
  7299                           ;fecha.c: 129: tamanio_mes = 0;
  7300  00DBC6  0E00               	movlw	0
  7301  00DBC8  6E57               	movwf	_tamanio_mes+1,c
  7302  00DBCA  0E00               	movlw	0
  7303  00DBCC  6E56               	movwf	_tamanio_mes,c
  7304                           
  7305                           ; BSR set to: 0
  7306  00DBCE  0012               	return		;funcret
  7307  00DBD0                     __end_of_borrar_mes:
  7308                           	opt stack 0
  7309                           tosu	equ	0xFFF
  7310                           tosh	equ	0xFFE
  7311                           tosl	equ	0xFFD
  7312                           pclath	equ	0xFFA
  7313                           tblptru	equ	0xFF8
  7314                           tblptrh	equ	0xFF7
  7315                           tblptrl	equ	0xFF6
  7316                           tablat	equ	0xFF5
  7317                           postinc0	equ	0xFEE
  7318                           wreg	equ	0xFE8
  7319                           indf1	equ	0xFE7
  7320                           postinc1	equ	0xFE6
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _borrar_anio *****************
  7333 ;; Defined at:
  7334 ;;		line 132 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;		None               void
  7341 ;; Registers used:
  7342 ;;		wreg, status,2
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7352 ;;Total ram usage:        0 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_menu_cambiar_fecha
  7358 ;;		_leer_teclado
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text48
  7363  00DC46                     __ptext48:
  7364                           	opt stack 0
  7365  00DC46                     _borrar_anio:
  7366                           	opt stack 29
  7367                           
  7368                           ;fecha.c: 133: *year = 0;
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;incstack = 0
  7372  00DC46  0E00               	movlw	0
  7373  00DC48  0100               	movlb	0	; () banked
  7374  00DC4A  6FE2               	movwf	fecha@year& (0+255),b
  7375                           
  7376                           ;fecha.c: 134: tamanio_anio = 0;
  7377  00DC4C  0E00               	movlw	0
  7378  00DC4E  0100               	movlb	0	; () banked
  7379  00DC50  6FE6               	movwf	(_tamanio_anio+1)& (0+255),b
  7380  00DC52  0E00               	movlw	0
  7381  00DC54  6FE5               	movwf	_tamanio_anio& (0+255),b
  7382                           
  7383                           ; BSR set to: 0
  7384  00DC56  0012               	return		;funcret
  7385  00DC58                     __end_of_borrar_anio:
  7386                           	opt stack 0
  7387                           tosu	equ	0xFFF
  7388                           tosh	equ	0xFFE
  7389                           tosl	equ	0xFFD
  7390                           pclath	equ	0xFFA
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           postinc0	equ	0xFEE
  7396                           wreg	equ	0xFE8
  7397                           indf1	equ	0xFE7
  7398                           postinc1	equ	0xFE6
  7399                           postdec1	equ	0xFE5
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           plusw2	equ	0xFDB
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _restaurar_comando *****************
  7411 ;; Defined at:
  7412 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;		None               void
  7419 ;; Registers used:
  7420 ;;		wreg, status,2
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7430 ;;Total ram usage:        0 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		_desactivar_alarma
  7436 ;;		_main
  7437 ;;		_inicializar_teclado
  7438 ;;		_actualiza_dia
  7439 ;;		_cancelar_cambio_fecha
  7440 ;;		_actualizar_hora
  7441 ;;		_cancelar_cambio_hora
  7442 ;;		_cancelar_cambio_password
  7443 ;;		_actualizar_password
  7444 ;;		_leer_teclado
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text49
  7449  00DCD8                     __ptext49:
  7450                           	opt stack 0
  7451  00DCD8                     _restaurar_comando:
  7452                           	opt stack 29
  7453                           
  7454                           ;teclado.c: 11: tamanio_comando = 0;
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;incstack = 0
  7458  00DCD8  0E00               	movlw	0
  7459  00DCDA  6E48               	movwf	_tamanio_comando+1,c
  7460  00DCDC  0E00               	movlw	0
  7461  00DCDE  6E47               	movwf	_tamanio_comando,c
  7462                           
  7463                           ;teclado.c: 13: comando[0] = 'x';
  7464  00DCE0  0E78               	movlw	120
  7465  00DCE2  0100               	movlb	0	; () banked
  7466  00DCE4  6FD3               	movwf	_comando& (0+255),b
  7467                           
  7468                           ;teclado.c: 14: comando[1] = 'x';
  7469  00DCE6  0E78               	movlw	120
  7470  00DCE8  0100               	movlb	0	; () banked
  7471  00DCEA  6FD4               	movwf	(_comando+1)& (0+255),b
  7472                           
  7473                           ;teclado.c: 15: comando[2] = 0;
  7474  00DCEC  0E00               	movlw	0
  7475  00DCEE  0100               	movlb	0	; () banked
  7476  00DCF0  6FD5               	movwf	(_comando+2)& (0+255),b
  7477                           
  7478                           ; BSR set to: 0
  7479  00DCF2  0012               	return		;funcret
  7480  00DCF4                     __end_of_restaurar_comando:
  7481                           	opt stack 0
  7482                           tosu	equ	0xFFF
  7483                           tosh	equ	0xFFE
  7484                           tosl	equ	0xFFD
  7485                           pclath	equ	0xFFA
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           postinc0	equ	0xFEE
  7491                           wreg	equ	0xFE8
  7492                           indf1	equ	0xFE7
  7493                           postinc1	equ	0xFE6
  7494                           postdec1	equ	0xFE5
  7495                           fsr1h	equ	0xFE2
  7496                           fsr1l	equ	0xFE1
  7497                           indf2	equ	0xFDF
  7498                           postinc2	equ	0xFDE
  7499                           postdec2	equ	0xFDD
  7500                           plusw2	equ	0xFDB
  7501                           fsr2h	equ	0xFDA
  7502                           fsr2l	equ	0xFD9
  7503                           status	equ	0xFD8
  7504                           
  7505 ;; *************** function _desactivar_alarma *****************
  7506 ;; Defined at:
  7507 ;;		line 254 in file "main.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;		None               void
  7514 ;; Registers used:
  7515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;Total ram usage:        0 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    7
  7528 ;; This function calls:
  7529 ;;		_clear_display
  7530 ;;		_inicializar_intentos_fallidos
  7531 ;;		_menu_ingresar_password
  7532 ;;		_restaurar_comando
  7533 ;; This function is called by:
  7534 ;;		_main
  7535 ;;		_leer_teclado
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text50
  7540  00DEC4                     __ptext50:
  7541                           	opt stack 0
  7542  00DEC4                     _desactivar_alarma:
  7543                           	opt stack 22
  7544                           
  7545                           ;main.c: 255: inicializar_intentos_fallidos();
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;incstack = 0
  7549  00DEC4  ECD3  F06D         	call	_inicializar_intentos_fallidos	;wreg free
  7550                           
  7551                           ;main.c: 256: puntero_funcion = mostrar_guardar_password;
  7552  00DEC8  0ECE               	movlw	low _mostrar_guardar_password
  7553  00DECA  0100               	movlb	0	; () banked
  7554  00DECC  6F9E               	movwf	_puntero_funcion& (0+255),b
  7555  00DECE  0EDF               	movlw	high _mostrar_guardar_password
  7556  00DED0  0100               	movlb	0	; () banked
  7557  00DED2  6F9F               	movwf	(_puntero_funcion+1)& (0+255),b
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;main.c: 257: menu_ingresar_password();
  7561  00DED4  EC38  F076         	call	_menu_ingresar_password	;wreg free
  7562                           
  7563                           ;main.c: 258: clear_display(tamanio_password+1);
  7564  00DED8  0E01               	movlw	1
  7565  00DEDA  2458               	addwf	_tamanio_password,w,c
  7566  00DEDC  6E0B               	movwf	clear_display@pos,c
  7567  00DEDE  0E00               	movlw	0
  7568  00DEE0  2059               	addwfc	_tamanio_password+1,w,c
  7569  00DEE2  6E0C               	movwf	clear_display@pos+1,c
  7570  00DEE4  ECF3  F06E         	call	_clear_display	;wreg free
  7571                           
  7572                           ;main.c: 259: restaurar_comando();
  7573  00DEE8  EC6C  F06E         	call	_restaurar_comando	;wreg free
  7574  00DEEC  0012               	return		;funcret
  7575  00DEEE                     __end_of_desactivar_alarma:
  7576                           	opt stack 0
  7577                           tosu	equ	0xFFF
  7578                           tosh	equ	0xFFE
  7579                           tosl	equ	0xFFD
  7580                           pclath	equ	0xFFA
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           postinc0	equ	0xFEE
  7586                           wreg	equ	0xFE8
  7587                           indf1	equ	0xFE7
  7588                           postinc1	equ	0xFE6
  7589                           postdec1	equ	0xFE5
  7590                           fsr1h	equ	0xFE2
  7591                           fsr1l	equ	0xFE1
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           plusw2	equ	0xFDB
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function _inicializar_hora *****************
  7601 ;; Defined at:
  7602 ;;		line 142 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, status,2
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_actualizar_hora
  7626 ;;		_cancelar_cambio_hora
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text51
  7631  00DD84                     __ptext51:
  7632                           	opt stack 0
  7633  00DD84                     _inicializar_hora:
  7634                           	opt stack 25
  7635                           
  7636                           ;fecha.c: 143: *hour = 0;
  7637                           
  7638                           ;incstack = 0
  7639  00DD84  0E00               	movlw	0
  7640  00DD86  0100               	movlb	0	; () banked
  7641  00DD88  6FD9               	movwf	fecha@hour& (0+255),b
  7642                           
  7643                           ;fecha.c: 144: *minutes = 0;
  7644  00DD8A  0E00               	movlw	0
  7645  00DD8C  0100               	movlb	0	; () banked
  7646  00DD8E  6FDC               	movwf	fecha@minutes& (0+255),b
  7647                           
  7648                           ;fecha.c: 146: tamanio_hora = 0;
  7649  00DD90  0E00               	movlw	0
  7650  00DD92  6E55               	movwf	_tamanio_hora+1,c
  7651  00DD94  0E00               	movlw	0
  7652  00DD96  6E54               	movwf	_tamanio_hora,c
  7653                           
  7654                           ;fecha.c: 147: tamanio_minutos = 0;
  7655  00DD98  0E00               	movlw	0
  7656  00DD9A  0100               	movlb	0	; () banked
  7657  00DD9C  6FE8               	movwf	(_tamanio_minutos+1)& (0+255),b
  7658  00DD9E  0E00               	movlw	0
  7659  00DDA0  6FE7               	movwf	_tamanio_minutos& (0+255),b
  7660                           
  7661                           ; BSR set to: 0
  7662  00DDA2  0012               	return		;funcret
  7663  00DDA4                     __end_of_inicializar_hora:
  7664                           	opt stack 0
  7665                           tosu	equ	0xFFF
  7666                           tosh	equ	0xFFE
  7667                           tosl	equ	0xFFD
  7668                           pclath	equ	0xFFA
  7669                           tblptru	equ	0xFF8
  7670                           tblptrh	equ	0xFF7
  7671                           tblptrl	equ	0xFF6
  7672                           tablat	equ	0xFF5
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           indf1	equ	0xFE7
  7676                           postinc1	equ	0xFE6
  7677                           postdec1	equ	0xFE5
  7678                           fsr1h	equ	0xFE2
  7679                           fsr1l	equ	0xFE1
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           plusw2	equ	0xFDB
  7684                           fsr2h	equ	0xFDA
  7685                           fsr2l	equ	0xFD9
  7686                           status	equ	0xFD8
  7687                           
  7688 ;; *************** function _inicializar_fecha *****************
  7689 ;; Defined at:
  7690 ;;		line 54 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;		None
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;		None
  7695 ;; Return value:  Size  Location     Type
  7696 ;;		None               void
  7697 ;; Registers used:
  7698 ;;		wreg, status,2
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7708 ;;Total ram usage:        0 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_actualiza_dia
  7714 ;;		_cancelar_cambio_fecha
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text52
  7719  00DF72                     __ptext52:
  7720                           	opt stack 0
  7721  00DF72                     _inicializar_fecha:
  7722                           	opt stack 25
  7723                           
  7724                           ;fecha.c: 55: *day = 0;
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;incstack = 0
  7728  00DF72  0E00               	movlw	0
  7729  00DF74  0100               	movlb	0	; () banked
  7730  00DF76  6FD6               	movwf	fecha@day& (0+255),b
  7731                           
  7732                           ;fecha.c: 56: *month = 0;
  7733  00DF78  0E00               	movlw	0
  7734  00DF7A  0100               	movlb	0	; () banked
  7735  00DF7C  6FDF               	movwf	fecha@month& (0+255),b
  7736                           
  7737                           ;fecha.c: 57: *year = 0;
  7738  00DF7E  0E00               	movlw	0
  7739  00DF80  0100               	movlb	0	; () banked
  7740  00DF82  6FE2               	movwf	fecha@year& (0+255),b
  7741                           
  7742                           ;fecha.c: 59: tamanio_dia = 0;
  7743  00DF84  0E00               	movlw	0
  7744  00DF86  6E53               	movwf	_tamanio_dia+1,c
  7745  00DF88  0E00               	movlw	0
  7746  00DF8A  6E52               	movwf	_tamanio_dia,c
  7747                           
  7748                           ;fecha.c: 60: tamanio_mes = 0;
  7749  00DF8C  0E00               	movlw	0
  7750  00DF8E  6E57               	movwf	_tamanio_mes+1,c
  7751  00DF90  0E00               	movlw	0
  7752  00DF92  6E56               	movwf	_tamanio_mes,c
  7753                           
  7754                           ;fecha.c: 61: tamanio_anio = 0;
  7755  00DF94  0E00               	movlw	0
  7756  00DF96  0100               	movlb	0	; () banked
  7757  00DF98  6FE6               	movwf	(_tamanio_anio+1)& (0+255),b
  7758  00DF9A  0E00               	movlw	0
  7759  00DF9C  6FE5               	movwf	_tamanio_anio& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762  00DF9E  0012               	return		;funcret
  7763  00DFA0                     __end_of_inicializar_fecha:
  7764                           	opt stack 0
  7765                           tosu	equ	0xFFF
  7766                           tosh	equ	0xFFE
  7767                           tosl	equ	0xFFD
  7768                           pclath	equ	0xFFA
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           postinc0	equ	0xFEE
  7774                           wreg	equ	0xFE8
  7775                           indf1	equ	0xFE7
  7776                           postinc1	equ	0xFE6
  7777                           postdec1	equ	0xFE5
  7778                           fsr1h	equ	0xFE2
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           plusw2	equ	0xFDB
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function _menu_ingresar_password *****************
  7789 ;; Defined at:
  7790 ;;		line 97 in file "main.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;		None
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  i               2   13[COMRAM] int 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;		None               void
  7797 ;; Registers used:
  7798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7808 ;;Total ram usage:        3 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    6
  7811 ;; This function calls:
  7812 ;;		_clear_display
  7813 ;;		_lcd_comand
  7814 ;;		_lcd_gotoxy
  7815 ;;		_lcd_putrs
  7816 ;;		_validar_password
  7817 ;; This function is called by:
  7818 ;;		_mostrar_guardar_password
  7819 ;;		_desactivar_alarma
  7820 ;;		_accionar_alarma
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text53
  7825  00EC70                     __ptext53:
  7826                           	opt stack 0
  7827  00EC70                     _menu_ingresar_password:
  7828                           	opt stack 22
  7829                           
  7830                           ;main.c: 99: lcd_comand(0b00001100);
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;incstack = 0
  7834  00EC70  0E0C               	movlw	12
  7835  00EC72  ECD9  F06D         	call	_lcd_comand
  7836                           
  7837                           ;main.c: 100: lcd_gotoxy(1,1);
  7838  00EC76  0E01               	movlw	1
  7839  00EC78  6E05               	movwf	lcd_gotoxy@y,c
  7840  00EC7A  0E01               	movlw	1
  7841  00EC7C  EC15  F06F         	call	_lcd_gotoxy
  7842                           
  7843                           ;main.c: 101: lcd_putrs("Inserte password");
  7844  00EC80  0E8D               	movlw	low STR_6
  7845  00EC82  6E09               	movwf	lcd_putrs@ptr,c
  7846  00EC84  0EFF               	movlw	high STR_6
  7847  00EC86  6E0A               	movwf	lcd_putrs@ptr+1,c
  7848  00EC88  ECAB  F070         	call	_lcd_putrs	;wreg free
  7849                           
  7850                           ;main.c: 102: lcd_gotoxy(tamanio_password+1,2);
  7851  00EC8C  0E02               	movlw	2
  7852  00EC8E  6E05               	movwf	lcd_gotoxy@y,c
  7853  00EC90  2858               	incf	_tamanio_password,w,c
  7854  00EC92  EC15  F06F         	call	_lcd_gotoxy
  7855                           
  7856                           ;main.c: 104: validar_password();
  7857  00EC96  EC69  F072         	call	_validar_password	;wreg free
  7858                           
  7859                           ;main.c: 105: if (tamanio_password >= 6 && !autorizado){
  7860  00EC9A  BE59               	btfsc	_tamanio_password+1,7,c
  7861  00EC9C  0012               	return	
  7862  00EC9E  5059               	movf	_tamanio_password+1,w,c
  7863  00ECA0  E104               	bnz	u2860
  7864  00ECA2  0E06               	movlw	6
  7865  00ECA4  5C58               	subwf	_tamanio_password,w,c
  7866  00ECA6  A0D8               	btfss	status,0,c
  7867  00ECA8  0012               	return	
  7868  00ECAA                     u2860:
  7869  00ECAA  5045               	movf	_autorizado,w,c
  7870  00ECAC  1046               	iorwf	_autorizado+1,w,c
  7871  00ECAE  A4D8               	btfss	status,2,c
  7872  00ECB0  0012               	return	
  7873                           
  7874                           ;main.c: 106: lcd_gotoxy(1,2);
  7875  00ECB2  0E02               	movlw	2
  7876  00ECB4  6E05               	movwf	lcd_gotoxy@y,c
  7877  00ECB6  0E01               	movlw	1
  7878  00ECB8  EC15  F06F         	call	_lcd_gotoxy
  7879                           
  7880                           ;main.c: 107: lcd_putrs("ERROR pass");
  7881  00ECBC  0ED5               	movlw	low STR_7
  7882  00ECBE  6E09               	movwf	lcd_putrs@ptr,c
  7883  00ECC0  0EFF               	movlw	high STR_7
  7884  00ECC2  6E0A               	movwf	lcd_putrs@ptr+1,c
  7885  00ECC4  ECAB  F070         	call	_lcd_putrs	;wreg free
  7886                           
  7887                           ;main.c: 109: intentos_fallidos++;
  7888  00ECC8  0100               	movlb	0	; () banked
  7889  00ECCA  4B96               	infsnz	_intentos_fallidos& (0+255),f,b
  7890  00ECCC  2B97               	incf	(_intentos_fallidos+1)& (0+255),f,b
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;main.c: 110: tamanio_password = 0;
  7894  00ECCE  0E00               	movlw	0
  7895  00ECD0  6E59               	movwf	_tamanio_password+1,c
  7896  00ECD2  0E00               	movlw	0
  7897  00ECD4  6E58               	movwf	_tamanio_password,c
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;main.c: 111: *current_password = 0;;
  7901  00ECD6  0E00               	movlw	0
  7902  00ECD8  0100               	movlb	0	; () banked
  7903  00ECDA  6FBE               	movwf	_current_password& (0+255),b
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 113: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  7907  00ECDC  0E00               	movlw	0
  7908  00ECDE  6E0F               	movwf	menu_ingresar_password@i+1,c
  7909  00ECE0  0E00               	movlw	0
  7910  00ECE2  6E0E               	movwf	menu_ingresar_password@i,c
  7911  00ECE4                     l3732:
  7912                           
  7913                           ; BSR set to: 0
  7914  00ECE4  BE0F               	btfsc	menu_ingresar_password@i+1,7,c
  7915  00ECE6  D008               	goto	l3736
  7916  00ECE8  500F               	movf	menu_ingresar_password@i+1,w,c
  7917  00ECEA  E112               	bnz	l3740
  7918  00ECEC  0E04               	movlw	4
  7919  00ECEE  5C0E               	subwf	menu_ingresar_password@i,w,c
  7920  00ECF0  B0D8               	btfsc	status,0,c
  7921  00ECF2  D00E               	goto	l3740
  7922  00ECF4  D001               	goto	l3736
  7923                           
  7924                           ; BSR set to: 0
  7925  00ECF6  D00C               	goto	l3740
  7926  00ECF8                     l3736:
  7927  00ECF8  0EFF               	movlw	255
  7928  00ECFA  6E0D               	movwf	??_menu_ingresar_password& (0+255),c
  7929  00ECFC  0E8A               	movlw	138
  7930  00ECFE                     u3887:
  7931  00ECFE  2EE8               	decfsz	wreg,f,c
  7932  00ED00  D7FE               	goto	u3887
  7933  00ED02  2E0D               	decfsz	??_menu_ingresar_password& (0+255),f,c
  7934  00ED04  D7FC               	goto	u3887
  7935  00ED06  D000               	nop2	
  7936  00ED08  4A0E               	infsnz	menu_ingresar_password@i,f,c
  7937  00ED0A  2A0F               	incf	menu_ingresar_password@i+1,f,c
  7938  00ED0C  D7EB               	goto	l3732
  7939  00ED0E  D000               	goto	l3740
  7940  00ED10                     l3740:
  7941                           
  7942                           ;main.c: 114: clear_display(tamanio_password+1);
  7943  00ED10  0E01               	movlw	1
  7944  00ED12  2458               	addwf	_tamanio_password,w,c
  7945  00ED14  6E0B               	movwf	clear_display@pos,c
  7946  00ED16  0E00               	movlw	0
  7947  00ED18  2059               	addwfc	_tamanio_password+1,w,c
  7948  00ED1A  6E0C               	movwf	clear_display@pos+1,c
  7949  00ED1C  ECF3  F06E         	call	_clear_display	;wreg free
  7950  00ED20  0012               	return	
  7951  00ED22  0012               	return		;funcret
  7952  00ED24                     __end_of_menu_ingresar_password:
  7953                           	opt stack 0
  7954                           tosu	equ	0xFFF
  7955                           tosh	equ	0xFFE
  7956                           tosl	equ	0xFFD
  7957                           pclath	equ	0xFFA
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           postinc0	equ	0xFEE
  7963                           wreg	equ	0xFE8
  7964                           indf1	equ	0xFE7
  7965                           postinc1	equ	0xFE6
  7966                           postdec1	equ	0xFE5
  7967                           fsr1h	equ	0xFE2
  7968                           fsr1l	equ	0xFE1
  7969                           indf2	equ	0xFDF
  7970                           postinc2	equ	0xFDE
  7971                           postdec2	equ	0xFDD
  7972                           plusw2	equ	0xFDB
  7973                           fsr2h	equ	0xFDA
  7974                           fsr2l	equ	0xFD9
  7975                           status	equ	0xFD8
  7976                           
  7977 ;; *************** function _validar_password *****************
  7978 ;; Defined at:
  7979 ;;		line 61 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;		None
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  i               2    2[COMRAM] int 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;		None               void
  7986 ;; Registers used:
  7987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7996 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7997 ;;Total ram usage:        4 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_menu_ingresar_password
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text54
  8007  00E4D2                     __ptext54:
  8008                           	opt stack 0
  8009  00E4D2                     _validar_password:
  8010                           	opt stack 27
  8011                           
  8012                           ;alarma.c: 63: autorizado = 1;
  8013                           
  8014                           ;incstack = 0
  8015  00E4D2  0E00               	movlw	0
  8016  00E4D4  6E46               	movwf	_autorizado+1,c
  8017  00E4D6  0E01               	movlw	1
  8018  00E4D8  6E45               	movwf	_autorizado,c
  8019                           
  8020                           ;alarma.c: 64: int i = 0;
  8021  00E4DA  0E00               	movlw	0
  8022  00E4DC  6E04               	movwf	validar_password@i+1,c
  8023  00E4DE  0E00               	movlw	0
  8024  00E4E0  6E03               	movwf	validar_password@i,c
  8025                           
  8026                           ;alarma.c: 65: while (i < 6 && autorizado==1){
  8027  00E4E2  D018               	goto	l3626
  8028  00E4E4                     l3620:
  8029                           
  8030                           ;alarma.c: 66: if (current_password[i] != password[i])
  8031  00E4E4  0E68               	movlw	low _password
  8032  00E4E6  2403               	addwf	validar_password@i,w,c
  8033  00E4E8  6ED9               	movwf	fsr2l,c
  8034  00E4EA  0E00               	movlw	high _password
  8035  00E4EC  2004               	addwfc	validar_password@i+1,w,c
  8036  00E4EE  6EDA               	movwf	fsr2h,c
  8037  00E4F0  0EBE               	movlw	low _current_password
  8038  00E4F2  2403               	addwf	validar_password@i,w,c
  8039  00E4F4  6EE1               	movwf	fsr1l,c
  8040  00E4F6  0E00               	movlw	high _current_password
  8041  00E4F8  2004               	addwfc	validar_password@i+1,w,c
  8042  00E4FA  6EE2               	movwf	fsr1h,c
  8043  00E4FC  50DE               	movf	postinc2,w,c
  8044  00E4FE  18E6               	xorwf	postinc1,w,c
  8045  00E500  B4D8               	btfsc	status,2,c
  8046  00E502  D005               	goto	l3624
  8047                           
  8048                           ;alarma.c: 67: autorizado = 0;
  8049  00E504  0E00               	movlw	0
  8050  00E506  6E46               	movwf	_autorizado+1,c
  8051  00E508  0E00               	movlw	0
  8052  00E50A  6E45               	movwf	_autorizado,c
  8053  00E50C  D000               	goto	l3624
  8054  00E50E                     l3624:
  8055                           
  8056                           ;alarma.c: 68: i++;
  8057  00E50E  4A03               	infsnz	validar_password@i,f,c
  8058  00E510  2A04               	incf	validar_password@i+1,f,c
  8059  00E512  D000               	goto	l3626
  8060  00E514                     l3626:
  8061  00E514  BE04               	btfsc	validar_password@i+1,7,c
  8062  00E516  D006               	goto	l3628
  8063  00E518  5004               	movf	validar_password@i+1,w,c
  8064  00E51A  E10A               	bnz	l3630
  8065  00E51C  0E06               	movlw	6
  8066  00E51E  5C03               	subwf	validar_password@i,w,c
  8067  00E520  B0D8               	btfsc	status,0,c
  8068  00E522  D006               	goto	l3630
  8069  00E524                     l3628:
  8070  00E524  0445               	decf	_autorizado,w,c
  8071  00E526  1046               	iorwf	_autorizado+1,w,c
  8072  00E528  A4D8               	btfss	status,2,c
  8073  00E52A  D002               	goto	l3630
  8074  00E52C  D7DB               	goto	l3620
  8075  00E52E  D000               	goto	l3630
  8076  00E530                     l3630:
  8077                           
  8078                           ;alarma.c: 69: }
  8079                           ;alarma.c: 71: if (autorizado == 1){
  8080  00E530  0445               	decf	_autorizado,w,c
  8081  00E532  1046               	iorwf	_autorizado+1,w,c
  8082  00E534  A4D8               	btfss	status,2,c
  8083  00E536  0012               	return	
  8084                           
  8085                           ;alarma.c: 72: tamanio_password = 0;
  8086  00E538  0E00               	movlw	0
  8087  00E53A  6E59               	movwf	_tamanio_password+1,c
  8088  00E53C  0E00               	movlw	0
  8089  00E53E  6E58               	movwf	_tamanio_password,c
  8090  00E540  0012               	return	
  8091  00E542  0012               	return		;funcret
  8092  00E544                     __end_of_validar_password:
  8093                           	opt stack 0
  8094                           tosu	equ	0xFFF
  8095                           tosh	equ	0xFFE
  8096                           tosl	equ	0xFFD
  8097                           pclath	equ	0xFFA
  8098                           tblptru	equ	0xFF8
  8099                           tblptrh	equ	0xFF7
  8100                           tblptrl	equ	0xFF6
  8101                           tablat	equ	0xFF5
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           indf1	equ	0xFE7
  8105                           postinc1	equ	0xFE6
  8106                           postdec1	equ	0xFE5
  8107                           fsr1h	equ	0xFE2
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           plusw2	equ	0xFDB
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _clear_display *****************
  8118 ;; Defined at:
  8119 ;;		line 91 in file "main.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  pos             2   10[COMRAM] const int 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;		None
  8124 ;; Return value:  Size  Location     Type
  8125 ;;		None               void
  8126 ;; Registers used:
  8127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8133 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8137 ;;Total ram usage:        2 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    5
  8140 ;; This function calls:
  8141 ;;		_lcd_gotoxy
  8142 ;;		_lcd_putrs
  8143 ;; This function is called by:
  8144 ;;		_menu_ingresar_password
  8145 ;;		_menu_cambiar_fecha
  8146 ;;		_menu_cambiar_horario
  8147 ;;		_menu_cambiar_password
  8148 ;;		_desactivar_alarma
  8149 ;;		_accionar_alarma
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           	psect	text55
  8154  00DDE6                     __ptext55:
  8155                           	opt stack 0
  8156  00DDE6                     _clear_display:
  8157                           	opt stack 24
  8158                           
  8159                           ;main.c: 92: lcd_gotoxy(pos,2);
  8160                           
  8161                           ;incstack = 0
  8162  00DDE6  0E02               	movlw	2
  8163  00DDE8  6E05               	movwf	lcd_gotoxy@y,c
  8164  00DDEA  500B               	movf	clear_display@pos,w,c
  8165  00DDEC  EC15  F06F         	call	_lcd_gotoxy
  8166                           
  8167                           ;main.c: 93: lcd_putrs("                         ");
  8168  00DDF0  0EB4               	movlw	low STR_5
  8169  00DDF2  6E09               	movwf	lcd_putrs@ptr,c
  8170  00DDF4  0EFE               	movlw	high STR_5
  8171  00DDF6  6E0A               	movwf	lcd_putrs@ptr+1,c
  8172  00DDF8  ECAB  F070         	call	_lcd_putrs	;wreg free
  8173                           
  8174                           ;main.c: 94: lcd_gotoxy(pos,2);
  8175  00DDFC  0E02               	movlw	2
  8176  00DDFE  6E05               	movwf	lcd_gotoxy@y,c
  8177  00DE00  500B               	movf	clear_display@pos,w,c
  8178  00DE02  EC15  F06F         	call	_lcd_gotoxy
  8179  00DE06  0012               	return		;funcret
  8180  00DE08                     __end_of_clear_display:
  8181                           	opt stack 0
  8182                           tosu	equ	0xFFF
  8183                           tosh	equ	0xFFE
  8184                           tosl	equ	0xFFD
  8185                           pclath	equ	0xFFA
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           indf1	equ	0xFE7
  8193                           postinc1	equ	0xFE6
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           plusw2	equ	0xFDB
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function _inicializar_teclado *****************
  8206 ;; Defined at:
  8207 ;;		line 19 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;		None               void
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    1
  8228 ;; This function calls:
  8229 ;;		_restaurar_comando
  8230 ;; This function is called by:
  8231 ;;		_main
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text56
  8236  00DE9A                     __ptext56:
  8237                           	opt stack 0
  8238  00DE9A                     _inicializar_teclado:
  8239                           	opt stack 29
  8240                           
  8241                           ;teclado.c: 21: funcion_pulsador_B = restaurar_comando;
  8242                           
  8243                           ;incstack = 0
  8244  00DE9A  0ED8               	movlw	low _restaurar_comando
  8245  00DE9C  0100               	movlb	0	; () banked
  8246  00DE9E  6F8E               	movwf	_funcion_pulsador_B& (0+255),b
  8247  00DEA0  0EDC               	movlw	high _restaurar_comando
  8248  00DEA2  0100               	movlb	0	; () banked
  8249  00DEA4  6F8F               	movwf	(_funcion_pulsador_B+1)& (0+255),b
  8250                           
  8251                           ;teclado.c: 22: funcion_pulsador_C = restaurar_comando;
  8252  00DEA6  0ED8               	movlw	low _restaurar_comando
  8253  00DEA8  0100               	movlb	0	; () banked
  8254  00DEAA  6F90               	movwf	_funcion_pulsador_C& (0+255),b
  8255  00DEAC  0EDC               	movlw	high _restaurar_comando
  8256  00DEAE  0100               	movlb	0	; () banked
  8257  00DEB0  6F91               	movwf	(_funcion_pulsador_C+1)& (0+255),b
  8258                           
  8259                           ;teclado.c: 23: funcion_pulsador_D = restaurar_comando;
  8260  00DEB2  0ED8               	movlw	low _restaurar_comando
  8261  00DEB4  0100               	movlb	0	; () banked
  8262  00DEB6  6F92               	movwf	_funcion_pulsador_D& (0+255),b
  8263  00DEB8  0EDC               	movlw	high _restaurar_comando
  8264  00DEBA  0100               	movlb	0	; () banked
  8265  00DEBC  6F93               	movwf	(_funcion_pulsador_D+1)& (0+255),b
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;teclado.c: 25: restaurar_comando();
  8269  00DEBE  EC6C  F06E         	call	_restaurar_comando	;wreg free
  8270  00DEC2  0012               	return		;funcret
  8271  00DEC4                     __end_of_inicializar_teclado:
  8272                           	opt stack 0
  8273                           tosu	equ	0xFFF
  8274                           tosh	equ	0xFFE
  8275                           tosl	equ	0xFFD
  8276                           pclath	equ	0xFFA
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           postinc0	equ	0xFEE
  8282                           wreg	equ	0xFE8
  8283                           indf1	equ	0xFE7
  8284                           postinc1	equ	0xFE6
  8285                           postdec1	equ	0xFE5
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           plusw2	equ	0xFDB
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _inicializar_alarma *****************
  8297 ;; Defined at:
  8298 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;		None
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  2   96[None  ] int 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8316 ;;Total ram usage:        0 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_main
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           	psect	text57
  8326  00E62E                     __ptext57:
  8327                           	opt stack 0
  8328  00E62E                     _inicializar_alarma:
  8329                           	opt stack 30
  8330                           
  8331                           ;alarma.c: 4: password[0] = '1';
  8332                           
  8333                           ;incstack = 0
  8334  00E62E  0E31               	movlw	49
  8335  00E630  0100               	movlb	0	; () banked
  8336  00E632  6F68               	movwf	_password& (0+255),b
  8337                           
  8338                           ;alarma.c: 5: password[1] = '2';
  8339  00E634  0E32               	movlw	50
  8340  00E636  0100               	movlb	0	; () banked
  8341  00E638  6F69               	movwf	(_password+1)& (0+255),b
  8342                           
  8343                           ;alarma.c: 6: password[2] = '3';
  8344  00E63A  0E33               	movlw	51
  8345  00E63C  0100               	movlb	0	; () banked
  8346  00E63E  6F6A               	movwf	(_password+2)& (0+255),b
  8347                           
  8348                           ;alarma.c: 7: password[3] = '4';
  8349  00E640  0E34               	movlw	52
  8350  00E642  0100               	movlb	0	; () banked
  8351  00E644  6F6B               	movwf	(_password+3)& (0+255),b
  8352                           
  8353                           ;alarma.c: 8: password[4] = '5';
  8354  00E646  0E35               	movlw	53
  8355  00E648  0100               	movlb	0	; () banked
  8356  00E64A  6F6C               	movwf	(_password+4)& (0+255),b
  8357                           
  8358                           ;alarma.c: 9: password[5] = '6';
  8359  00E64C  0E36               	movlw	54
  8360  00E64E  0100               	movlb	0	; () banked
  8361  00E650  6F6D               	movwf	(_password+5)& (0+255),b
  8362                           
  8363                           ;alarma.c: 10: password[6] = 0;
  8364  00E652  0E00               	movlw	0
  8365  00E654  0100               	movlb	0	; () banked
  8366  00E656  6F6E               	movwf	(_password+6)& (0+255),b
  8367                           
  8368                           ;alarma.c: 12: *current_password = 0;
  8369  00E658  0E00               	movlw	0
  8370  00E65A  0100               	movlb	0	; () banked
  8371  00E65C  6FBE               	movwf	_current_password& (0+255),b
  8372                           
  8373                           ;alarma.c: 13: *temporal = 0;
  8374  00E65E  0E00               	movlw	0
  8375  00E660  0100               	movlb	0	; () banked
  8376  00E662  6FCC               	movwf	_temporal& (0+255),b
  8377                           
  8378                           ;alarma.c: 14: *new_password = 0;
  8379  00E664  0E00               	movlw	0
  8380  00E666  0100               	movlb	0	; () banked
  8381  00E668  6FC5               	movwf	_new_password& (0+255),b
  8382                           
  8383                           ;alarma.c: 16: tamanio_password=0;
  8384  00E66A  0E00               	movlw	0
  8385  00E66C  6E59               	movwf	_tamanio_password+1,c
  8386  00E66E  0E00               	movlw	0
  8387  00E670  6E58               	movwf	_tamanio_password,c
  8388                           
  8389                           ;alarma.c: 17: tamanio_new_password=0;
  8390  00E672  0E00               	movlw	0
  8391  00E674  0100               	movlb	0	; () banked
  8392  00E676  6FEA               	movwf	(_tamanio_new_password+1)& (0+255),b
  8393  00E678  0E00               	movlw	0
  8394  00E67A  6FE9               	movwf	_tamanio_new_password& (0+255),b
  8395                           
  8396                           ;alarma.c: 19: autorizado=0;
  8397  00E67C  0E00               	movlw	0
  8398  00E67E  6E46               	movwf	_autorizado+1,c
  8399  00E680  0E00               	movlw	0
  8400  00E682  6E45               	movwf	_autorizado,c
  8401                           
  8402                           ;alarma.c: 20: encendida = 0;
  8403  00E684  0E00               	movlw	0
  8404  00E686  0100               	movlb	0	; () banked
  8405  00E688  6F8B               	movwf	(_encendida+1)& (0+255),b
  8406  00E68A  0E00               	movlw	0
  8407  00E68C  6F8A               	movwf	_encendida& (0+255),b
  8408                           
  8409                           ;alarma.c: 21: activada = 0;
  8410  00E68E  0E00               	movlw	0
  8411  00E690  0100               	movlb	0	; () banked
  8412  00E692  6F85               	movwf	(_activada+1)& (0+255),b
  8413  00E694  0E00               	movlw	0
  8414  00E696  6F84               	movwf	_activada& (0+255),b
  8415                           
  8416                           ;alarma.c: 22: intentos_fallidos = 0;
  8417  00E698  0E00               	movlw	0
  8418  00E69A  0100               	movlb	0	; () banked
  8419  00E69C  6F97               	movwf	(_intentos_fallidos+1)& (0+255),b
  8420  00E69E  0E00               	movlw	0
  8421  00E6A0  6F96               	movwf	_intentos_fallidos& (0+255),b
  8422                           
  8423                           ; BSR set to: 0
  8424  00E6A2  0012               	return		;funcret
  8425  00E6A4                     __end_of_inicializar_alarma:
  8426                           	opt stack 0
  8427                           tosu	equ	0xFFF
  8428                           tosh	equ	0xFFE
  8429                           tosl	equ	0xFFD
  8430                           pclath	equ	0xFFA
  8431                           tblptru	equ	0xFF8
  8432                           tblptrh	equ	0xFF7
  8433                           tblptrl	equ	0xFF6
  8434                           tablat	equ	0xFF5
  8435                           postinc0	equ	0xFEE
  8436                           wreg	equ	0xFE8
  8437                           indf1	equ	0xFE7
  8438                           postinc1	equ	0xFE6
  8439                           postdec1	equ	0xFE5
  8440                           fsr1h	equ	0xFE2
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           plusw2	equ	0xFDB
  8446                           fsr2h	equ	0xFDA
  8447                           fsr2l	equ	0xFD9
  8448                           status	equ	0xFD8
  8449                           
  8450 ;; *************** function _desactivar_sonido_alarma *****************
  8451 ;; Defined at:
  8452 ;;		line 247 in file "main.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;		None
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;		None
  8457 ;; Return value:  Size  Location     Type
  8458 ;;		None               void
  8459 ;; Registers used:
  8460 ;;		wreg, status,2, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8470 ;;Total ram usage:        0 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    1
  8473 ;; This function calls:
  8474 ;;		_inicializar_intentos_fallidos
  8475 ;; This function is called by:
  8476 ;;		_main
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text58
  8481  00DC7C                     __ptext58:
  8482                           	opt stack 0
  8483  00DC7C                     _desactivar_sonido_alarma:
  8484                           	opt stack 29
  8485                           
  8486                           ;main.c: 248: activada=0;
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;incstack = 0
  8490  00DC7C  0E00               	movlw	0
  8491  00DC7E  0100               	movlb	0	; () banked
  8492  00DC80  6F85               	movwf	(_activada+1)& (0+255),b
  8493  00DC82  0E00               	movlw	0
  8494  00DC84  6F84               	movwf	_activada& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;main.c: 249: LATBbits.LATB0 = 0;;
  8498  00DC86  908A               	bcf	3978,0,c	;volatile
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 250: LATCbits.LATC7 = 0;;
  8502  00DC88  9E8B               	bcf	3979,7,c	;volatile
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;main.c: 251: inicializar_intentos_fallidos();
  8506  00DC8A  ECD3  F06D         	call	_inicializar_intentos_fallidos	;wreg free
  8507  00DC8E  0012               	return		;funcret
  8508  00DC90                     __end_of_desactivar_sonido_alarma:
  8509                           	opt stack 0
  8510                           tosu	equ	0xFFF
  8511                           tosh	equ	0xFFE
  8512                           tosl	equ	0xFFD
  8513                           pclath	equ	0xFFA
  8514                           tblptru	equ	0xFF8
  8515                           tblptrh	equ	0xFF7
  8516                           tblptrl	equ	0xFF6
  8517                           tablat	equ	0xFF5
  8518                           postinc0	equ	0xFEE
  8519                           wreg	equ	0xFE8
  8520                           indf1	equ	0xFE7
  8521                           postinc1	equ	0xFE6
  8522                           postdec1	equ	0xFE5
  8523                           fsr1h	equ	0xFE2
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           plusw2	equ	0xFDB
  8529                           fsr2h	equ	0xFDA
  8530                           fsr2l	equ	0xFD9
  8531                           status	equ	0xFD8
  8532                           
  8533 ;; *************** function _inicializar_intentos_fallidos *****************
  8534 ;; Defined at:
  8535 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  2   90[None  ] int 
  8542 ;; Registers used:
  8543 ;;		wreg, status,2
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8553 ;;Total ram usage:        0 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; This function calls:
  8556 ;;		Nothing
  8557 ;; This function is called by:
  8558 ;;		_desactivar_sonido_alarma
  8559 ;;		_desactivar_alarma
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	text59
  8564  00DBA6                     __ptext59:
  8565                           	opt stack 0
  8566  00DBA6                     _inicializar_intentos_fallidos:
  8567                           	opt stack 28
  8568                           
  8569                           ;alarma.c: 36: intentos_fallidos = 0;
  8570                           
  8571                           ;incstack = 0
  8572  00DBA6  0E00               	movlw	0
  8573  00DBA8  0100               	movlb	0	; () banked
  8574  00DBAA  6F97               	movwf	(_intentos_fallidos+1)& (0+255),b
  8575  00DBAC  0E00               	movlw	0
  8576  00DBAE  6F96               	movwf	_intentos_fallidos& (0+255),b
  8577                           
  8578                           ; BSR set to: 0
  8579  00DBB0  0012               	return		;funcret
  8580  00DBB2                     __end_of_inicializar_intentos_fallidos:
  8581                           	opt stack 0
  8582                           tosu	equ	0xFFF
  8583                           tosh	equ	0xFFE
  8584                           tosl	equ	0xFFD
  8585                           pclath	equ	0xFFA
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           postinc0	equ	0xFEE
  8591                           wreg	equ	0xFE8
  8592                           indf1	equ	0xFE7
  8593                           postinc1	equ	0xFE6
  8594                           postdec1	equ	0xFE5
  8595                           fsr1h	equ	0xFE2
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           plusw2	equ	0xFDB
  8601                           fsr2h	equ	0xFDA
  8602                           fsr2l	equ	0xFD9
  8603                           status	equ	0xFD8
  8604                           
  8605 ;; *************** function _caratula *****************
  8606 ;; Defined at:
  8607 ;;		line 35 in file "main.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;  titulo          2   35[COMRAM] PTR const unsigned char 
  8610 ;;		 -> STR_25(9), STR_24(9), 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;		None
  8613 ;; Return value:  Size  Location     Type
  8614 ;;		None               void
  8615 ;; Registers used:
  8616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8626 ;;Total ram usage:        4 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    5
  8629 ;; This function calls:
  8630 ;;		_lcd_comand
  8631 ;;		_lcd_gotoxy
  8632 ;;		_lcd_putrs
  8633 ;;		_sprintf
  8634 ;; This function is called by:
  8635 ;;		_main
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text60
  8640  00EDF8                     __ptext60:
  8641                           	opt stack 0
  8642  00EDF8                     _caratula:
  8643                           	opt stack 25
  8644                           
  8645                           ;main.c: 37: lcd_comand(0b00001100);
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;incstack = 0
  8649  00EDF8  0E0C               	movlw	12
  8650  00EDFA  ECD9  F06D         	call	_lcd_comand
  8651                           
  8652                           ;main.c: 38: lcd_gotoxy(1,1);
  8653  00EDFE  0E01               	movlw	1
  8654  00EE00  6E05               	movwf	lcd_gotoxy@y,c
  8655  00EE02  0E01               	movlw	1
  8656  00EE04  EC15  F06F         	call	_lcd_gotoxy
  8657                           
  8658                           ;main.c: 39: lcd_putrs(titulo);
  8659  00EE08  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  8660  00EE0C  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  8661  00EE10  ECAB  F070         	call	_lcd_putrs	;wreg free
  8662                           
  8663                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  8664  00EE14  0EAA               	movlw	low _buffer2
  8665  00EE16  6E0D               	movwf	sprintf@sp,c
  8666  00EE18  0E00               	movlw	high _buffer2
  8667  00EE1A  6E0E               	movwf	sprintf@sp+1,c
  8668  00EE1C  0E9E               	movlw	low STR_1
  8669  00EE1E  6E0F               	movwf	sprintf@f,c
  8670  00EE20  0EFF               	movlw	high STR_1
  8671  00EE22  6E10               	movwf	sprintf@f+1,c
  8672  00EE24  C0F9  F011         	movff	_dia,?_sprintf+4
  8673  00EE28  C0FA  F012         	movff	_dia+1,?_sprintf+5
  8674  00EE2C  C05C  F013         	movff	_mes,?_sprintf+6
  8675  00EE30  C05D  F014         	movff	_mes+1,?_sprintf+7
  8676  00EE34  C05A  F015         	movff	_anio,?_sprintf+8
  8677  00EE38  C05B  F016         	movff	_anio+1,?_sprintf+9
  8678  00EE3C  ECC9  F07D         	call	_sprintf	;wreg free
  8679                           
  8680                           ;main.c: 42: lcd_gotoxy(9,1);
  8681  00EE40  0E01               	movlw	1
  8682  00EE42  6E05               	movwf	lcd_gotoxy@y,c
  8683  00EE44  0E09               	movlw	9
  8684  00EE46  EC15  F06F         	call	_lcd_gotoxy
  8685                           
  8686                           ;main.c: 43: lcd_putrs(buffer2);
  8687  00EE4A  0EAA               	movlw	low _buffer2
  8688  00EE4C  6E09               	movwf	lcd_putrs@ptr,c
  8689  00EE4E  0E00               	movlw	high _buffer2
  8690  00EE50  6E0A               	movwf	lcd_putrs@ptr+1,c
  8691  00EE52  ECAB  F070         	call	_lcd_putrs	;wreg free
  8692                           
  8693                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  8694  00EE56  0EAA               	movlw	low _buffer2
  8695  00EE58  6E0D               	movwf	sprintf@sp,c
  8696  00EE5A  0E00               	movlw	high _buffer2
  8697  00EE5C  6E0E               	movwf	sprintf@sp+1,c
  8698  00EE5E  0EAD               	movlw	low STR_2
  8699  00EE60  6E0F               	movwf	sprintf@f,c
  8700  00EE62  0EFF               	movlw	high STR_2
  8701  00EE64  6E10               	movwf	sprintf@f+1,c
  8702  00EE66  C0FB  F011         	movff	_hora,?_sprintf+4
  8703  00EE6A  C0FC  F012         	movff	_hora+1,?_sprintf+5
  8704  00EE6E  C0FD  F013         	movff	_minuto,?_sprintf+6
  8705  00EE72  C0FE  F014         	movff	_minuto+1,?_sprintf+7
  8706  00EE76  C0A0  F015         	movff	_segundo,?_sprintf+8
  8707  00EE7A  C0A1  F016         	movff	_segundo+1,?_sprintf+9
  8708  00EE7E  ECC9  F07D         	call	_sprintf	;wreg free
  8709                           
  8710                           ;main.c: 46: lcd_gotoxy(1,2);
  8711  00EE82  0E02               	movlw	2
  8712  00EE84  6E05               	movwf	lcd_gotoxy@y,c
  8713  00EE86  0E01               	movlw	1
  8714  00EE88  EC15  F06F         	call	_lcd_gotoxy
  8715                           
  8716                           ;main.c: 47: lcd_putrs(buffer2);
  8717  00EE8C  0EAA               	movlw	low _buffer2
  8718  00EE8E  6E09               	movwf	lcd_putrs@ptr,c
  8719  00EE90  0E00               	movlw	high _buffer2
  8720  00EE92  6E0A               	movwf	lcd_putrs@ptr+1,c
  8721  00EE94  ECAB  F070         	call	_lcd_putrs	;wreg free
  8722                           
  8723                           ;main.c: 49: lcd_gotoxy(13,2);
  8724  00EE98  0E02               	movlw	2
  8725  00EE9A  6E05               	movwf	lcd_gotoxy@y,c
  8726  00EE9C  0E0D               	movlw	13
  8727  00EE9E  EC15  F06F         	call	_lcd_gotoxy
  8728                           
  8729                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  8730  00EEA2  0100               	movlb	0	; () banked
  8731  00EEA4  518A               	movf	_encendida& (0+255),w,b
  8732  00EEA6  0100               	movlb	0	; () banked
  8733  00EEA8  118B               	iorwf	(_encendida+1)& (0+255),w,b
  8734  00EEAA  A4D8               	btfss	status,2,c
  8735  00EEAC  D004               	goto	l4152
  8736                           
  8737                           ; BSR set to: 0
  8738  00EEAE  0EEE               	movlw	low STR_4
  8739  00EEB0  6E26               	movwf	_caratula$788,c
  8740  00EEB2  0EFF               	movlw	high STR_4
  8741  00EEB4  D003               	goto	L2
  8742  00EEB6                     l4152:
  8743                           
  8744                           ; BSR set to: 0
  8745  00EEB6  0EF2               	movlw	low STR_3
  8746  00EEB8  6E26               	movwf	_caratula$788,c
  8747  00EEBA  0EFF               	movlw	high STR_3
  8748  00EEBC                     L2:
  8749  00EEBC  6E27               	movwf	_caratula$788+1,c
  8750  00EEBE  D000               	goto	l4154
  8751  00EEC0                     l4154:
  8752                           
  8753                           ; BSR set to: 0
  8754  00EEC0  C026  F009         	movff	_caratula$788,lcd_putrs@ptr
  8755  00EEC4  C027  F00A         	movff	_caratula$788+1,lcd_putrs@ptr+1
  8756  00EEC8  ECAB  F070         	call	_lcd_putrs	;wreg free
  8757  00EECC  0012               	return		;funcret
  8758  00EECE                     __end_of_caratula:
  8759                           	opt stack 0
  8760                           tosu	equ	0xFFF
  8761                           tosh	equ	0xFFE
  8762                           tosl	equ	0xFFD
  8763                           pclath	equ	0xFFA
  8764                           tblptru	equ	0xFF8
  8765                           tblptrh	equ	0xFF7
  8766                           tblptrl	equ	0xFF6
  8767                           tablat	equ	0xFF5
  8768                           postinc0	equ	0xFEE
  8769                           wreg	equ	0xFE8
  8770                           indf1	equ	0xFE7
  8771                           postinc1	equ	0xFE6
  8772                           postdec1	equ	0xFE5
  8773                           fsr1h	equ	0xFE2
  8774                           fsr1l	equ	0xFE1
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           plusw2	equ	0xFDB
  8779                           fsr2h	equ	0xFDA
  8780                           fsr2l	equ	0xFD9
  8781                           status	equ	0xFD8
  8782                           
  8783 ;; *************** function _sprintf *****************
  8784 ;; Defined at:
  8785 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  sp              2   12[COMRAM] PTR unsigned char 
  8788 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  8789 ;;  f               2   14[COMRAM] PTR const unsigned char 
  8790 ;;		 -> STR_32(18), STR_31(5), STR_27(5), STR_26(5), 
  8791 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  8792 ;;		 -> STR_2(15), STR_1(15), 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  tmpval          4    0        struct .
  8795 ;;  cp              3    0        PTR const unsigned char 
  8796 ;;  width           2   32[COMRAM] int 
  8797 ;;  val             2   29[COMRAM] unsigned int 
  8798 ;;  ap              2   27[COMRAM] PTR void [1]
  8799 ;;		 -> ?_sprintf(2), 
  8800 ;;  len             2    0        unsigned int 
  8801 ;;  c               1   34[COMRAM] char 
  8802 ;;  flag            1   31[COMRAM] unsigned char 
  8803 ;;  prec            1   26[COMRAM] char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  2   12[COMRAM] int 
  8806 ;; Registers used:
  8807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8813 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8814 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8815 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8816 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8817 ;;Total ram usage:       23 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    1
  8820 ;; This function calls:
  8821 ;;		___lwdiv
  8822 ;;		___lwmod
  8823 ;;		___wmul
  8824 ;;		_isdigit
  8825 ;; This function is called by:
  8826 ;;		_caratula
  8827 ;;		_mostrar_guardar_password
  8828 ;;		_mostrar_guardar_temporal_password
  8829 ;;		_mostrar_guardar_nuevo_password
  8830 ;;		_confirmar_actualizar_password
  8831 ;;		_guardar_comando
  8832 ;;		_imprimir_tecla
  8833 ;;		_guardar_elemento
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           	psect	text61
  8838  00FB92                     __ptext61:
  8839                           	opt stack 0
  8840  00FB92                     _sprintf:
  8841                           	opt stack 27
  8842                           
  8843                           ;doprnt.c: 494: va_list ap;
  8844                           ;doprnt.c: 499: signed char c;
  8845                           ;doprnt.c: 501: int width;
  8846                           ;doprnt.c: 506: signed char prec;
  8847                           ;doprnt.c: 508: unsigned char flag;
  8848                           ;doprnt.c: 523: union {
  8849                           ;doprnt.c: 524: unsigned long vd;
  8850                           ;doprnt.c: 525: double integ;
  8851                           ;doprnt.c: 526: } tmpval;
  8852                           ;doprnt.c: 528: unsigned int val;
  8853                           ;doprnt.c: 529: unsigned len;
  8854                           ;doprnt.c: 530: const char * cp;
  8855                           ;doprnt.c: 533: *ap = __va_start();
  8856                           
  8857                           ;incstack = 0
  8858  00FB92  0E11               	movlw	low (?_sprintf+4)
  8859  00FB94  6E1C               	movwf	sprintf@ap,c
  8860  00FB96  0E00               	movlw	high (?_sprintf+4)
  8861  00FB98  6E1D               	movwf	sprintf@ap+1,c
  8862                           
  8863                           ;doprnt.c: 536: while(c = *f++) {
  8864  00FB9A  D161               	goto	l3606
  8865  00FB9C                     l3494:
  8866                           
  8867                           ;doprnt.c: 538: if(c != '%')
  8868  00FB9C  0E25               	movlw	37
  8869  00FB9E  1823               	xorwf	sprintf@c,w,c
  8870  00FBA0  B4D8               	btfsc	status,2,c
  8871  00FBA2  D009               	goto	l3500
  8872                           
  8873                           ;doprnt.c: 540: {
  8874                           ;doprnt.c: 541: ((*sp++ = (c)));
  8875  00FBA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8876  00FBA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8877  00FBAC  C023  FFDF         	movff	sprintf@c,indf2
  8878  00FBB0  4A0D               	infsnz	sprintf@sp,f,c
  8879  00FBB2  2A0E               	incf	sprintf@sp+1,f,c
  8880                           
  8881                           ;doprnt.c: 542: continue;
  8882  00FBB4  D154               	goto	l3606
  8883  00FBB6                     l3500:
  8884                           
  8885                           ;doprnt.c: 543: }
  8886                           ;doprnt.c: 546: width = 0;
  8887  00FBB6  0E00               	movlw	0
  8888  00FBB8  6E22               	movwf	sprintf@width+1,c
  8889  00FBBA  0E00               	movlw	0
  8890  00FBBC  6E21               	movwf	sprintf@width,c
  8891                           
  8892                           ;doprnt.c: 548: flag = 0;
  8893  00FBBE  0E00               	movlw	0
  8894  00FBC0  6E20               	movwf	sprintf@flag,c
  8895                           
  8896                           ;doprnt.c: 551: switch(*f) {
  8897                           
  8898                           ;doprnt.c: 550: for(;;) {
  8899  00FBC2  D005               	goto	l3506
  8900  00FBC4                     l3502:
  8901                           
  8902                           ;doprnt.c: 580: flag |= 0x04;
  8903  00FBC4  8420               	bsf	sprintf@flag,2,c
  8904                           
  8905                           ;doprnt.c: 581: f++;
  8906  00FBC6  4A0F               	infsnz	sprintf@f,f,c
  8907  00FBC8  2A10               	incf	sprintf@f+1,f,c
  8908                           
  8909                           ;doprnt.c: 582: continue;
  8910  00FBCA  D001               	goto	l3506
  8911                           
  8912                           ;doprnt.c: 584: }
  8913  00FBCC  D00B               	goto	l3508
  8914  00FBCE                     l3506:
  8915  00FBCE  C00F  FFF6         	movff	sprintf@f,tblptrl
  8916  00FBD2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8917  00FBD6                     	if	0	;tblptru may be non-zero
  8918  00FBD6                     	endif
  8919  00FBD6                     	if	0	;tblptru may be non-zero
  8920  00FBD6                     	endif
  8921  00FBD6  0008               	tblrd		*
  8922  00FBD8  50F5               	movf	tablat,w,c
  8923                           
  8924                           ; Switch size 1, requested type "space"
  8925                           ; Number of cases is 1, Range of values is 48 to 48
  8926                           ; switch strategies available:
  8927                           ; Name         Instructions Cycles
  8928                           ; simple_byte            4     3 (average)
  8929                           ;	Chosen strategy is simple_byte
  8930  00FBDA  0A30               	xorlw	48	; case 48
  8931  00FBDC  B4D8               	btfsc	status,2,c
  8932  00FBDE  D7F2               	goto	l3502
  8933                           
  8934                           ;doprnt.c: 585: break;
  8935  00FBE0  D001               	goto	l3508
  8936                           
  8937                           ;doprnt.c: 586: }
  8938  00FBE2  D7F5               	goto	l3506
  8939  00FBE4                     l3508:
  8940                           
  8941                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8942  00FBE4  C00F  FFF6         	movff	sprintf@f,tblptrl
  8943  00FBE8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8944  00FBEC                     	if	0	;tblptru may be non-zero
  8945  00FBEC                     	endif
  8946  00FBEC                     	if	0	;tblptru may be non-zero
  8947  00FBEC                     	endif
  8948  00FBEC  0008               	tblrd		*
  8949  00FBEE  50F5               	movf	tablat,w,c
  8950  00FBF0  ECE2  F06E         	call	_isdigit
  8951  00FBF4  A0D8               	btfss	status,0,c
  8952  00FBF6  D03A               	goto	l3524
  8953                           
  8954                           ;doprnt.c: 598: width = 0;
  8955  00FBF8  0E00               	movlw	0
  8956  00FBFA  6E22               	movwf	sprintf@width+1,c
  8957  00FBFC  0E00               	movlw	0
  8958  00FBFE  6E21               	movwf	sprintf@width,c
  8959  00FC00  D000               	goto	l3512
  8960  00FC02                     l3512:
  8961                           
  8962                           ;doprnt.c: 600: width *= 10;
  8963  00FC02  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8964  00FC06  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8965  00FC0A  0E00               	movlw	0
  8966  00FC0C  6E04               	movwf	___wmul@multiplicand+1,c
  8967  00FC0E  0E0A               	movlw	10
  8968  00FC10  6E03               	movwf	___wmul@multiplicand,c
  8969  00FC12  EC39  F06F         	call	___wmul	;wreg free
  8970  00FC16  C001  F021         	movff	?___wmul,sprintf@width
  8971  00FC1A  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8972                           
  8973                           ;doprnt.c: 601: width += *f++ - '0';
  8974  00FC1E  0ED0               	movlw	208
  8975  00FC20  6E17               	movwf	??_sprintf& (0+255),c
  8976  00FC22  0EFF               	movlw	255
  8977  00FC24  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8978  00FC26  C00F  FFF6         	movff	sprintf@f,tblptrl
  8979  00FC2A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8980  00FC2E                     	if	0	;tblptru may be non-zero
  8981  00FC2E                     	endif
  8982  00FC2E                     	if	0	;tblptru may be non-zero
  8983  00FC2E                     	endif
  8984  00FC2E  0008               	tblrd		*
  8985  00FC30  50F5               	movf	tablat,w,c
  8986  00FC32  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8987  00FC34  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8988  00FC36  5017               	movf	??_sprintf,w,c
  8989  00FC38  2619               	addwf	??_sprintf+2,f,c
  8990  00FC3A  5018               	movf	??_sprintf+1,w,c
  8991  00FC3C  221A               	addwfc	??_sprintf+3,f,c
  8992  00FC3E  5019               	movf	??_sprintf+2,w,c
  8993  00FC40  2621               	addwf	sprintf@width,f,c
  8994  00FC42  501A               	movf	??_sprintf+3,w,c
  8995  00FC44  2222               	addwfc	sprintf@width+1,f,c
  8996  00FC46  4A0F               	infsnz	sprintf@f,f,c
  8997  00FC48  2A10               	incf	sprintf@f+1,f,c
  8998                           
  8999                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9000  00FC4A  C00F  FFF6         	movff	sprintf@f,tblptrl
  9001  00FC4E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  9002  00FC52                     	if	0	;tblptru may be non-zero
  9003  00FC52                     	endif
  9004  00FC52                     	if	0	;tblptru may be non-zero
  9005  00FC52                     	endif
  9006  00FC52  0008               	tblrd		*
  9007  00FC54  50F5               	movf	tablat,w,c
  9008  00FC56  ECE2  F06E         	call	_isdigit
  9009  00FC5A  A0D8               	btfss	status,0,c
  9010  00FC5C  D007               	goto	l3524
  9011  00FC5E  D7D1               	goto	l3512
  9012                           
  9013                           ;doprnt.c: 608: }
  9014                           ;doprnt.c: 635: switch(c = *f++) {
  9015  00FC60  D005               	goto	l3524
  9016                           
  9017                           ;doprnt.c: 638: goto alldone;
  9018                           
  9019                           ;doprnt.c: 637: case 0:
  9020  00FC62  D10B               	goto	l3608
  9021                           
  9022                           ;doprnt.c: 698: case 'i':
  9023                           ;doprnt.c: 699: break;
  9024                           
  9025                           ;doprnt.c: 697: case 'd':
  9026  00FC64  D01A               	goto	l912
  9027                           
  9028                           ;doprnt.c: 813: continue;
  9029                           
  9030                           ;doprnt.c: 802: default:
  9031  00FC66  D0FB               	goto	l3606
  9032  00FC68                     l3520:
  9033                           
  9034                           ;doprnt.c: 818: flag |= 0x40;
  9035  00FC68  8C20               	bsf	sprintf@flag,6,c
  9036                           
  9037                           ;doprnt.c: 822: }
  9038                           
  9039                           ;doprnt.c: 819: break;
  9040  00FC6A  D017               	goto	l912
  9041  00FC6C                     l3524:
  9042  00FC6C  C00F  FFF6         	movff	sprintf@f,tblptrl
  9043  00FC70  C010  FFF7         	movff	sprintf@f+1,tblptrh
  9044  00FC74  4A0F               	infsnz	sprintf@f,f,c
  9045  00FC76  2A10               	incf	sprintf@f+1,f,c
  9046  00FC78                     	if	0	;tblptru may be non-zero
  9047  00FC78                     	endif
  9048  00FC78                     	if	0	;tblptru may be non-zero
  9049  00FC78                     	endif
  9050  00FC78  0008               	tblrd		*
  9051  00FC7A  CFF5 F023          	movff	tablat,sprintf@c
  9052  00FC7E  5023               	movf	sprintf@c,w,c
  9053                           
  9054                           ; Switch size 1, requested type "space"
  9055                           ; Number of cases is 4, Range of values is 0 to 117
  9056                           ; switch strategies available:
  9057                           ; Name         Instructions Cycles
  9058                           ; simple_byte           13     7 (average)
  9059                           ;	Chosen strategy is simple_byte
  9060  00FC80  0A00               	xorlw	0	; case 0
  9061  00FC82  B4D8               	btfsc	status,2,c
  9062  00FC84  D0FA               	goto	l3608
  9063  00FC86  0A64               	xorlw	100	; case 100
  9064  00FC88  B4D8               	btfsc	status,2,c
  9065  00FC8A  D007               	goto	l912
  9066  00FC8C  0A0D               	xorlw	13	; case 105
  9067  00FC8E  B4D8               	btfsc	status,2,c
  9068  00FC90  D004               	goto	l912
  9069  00FC92  0A1C               	xorlw	28	; case 117
  9070  00FC94  B4D8               	btfsc	status,2,c
  9071  00FC96  D7E8               	goto	l3520
  9072  00FC98  D0E2               	goto	l3606
  9073  00FC9A                     l912:
  9074                           
  9075                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  9076  00FC9A  BC20               	btfsc	sprintf@flag,6,c
  9077  00FC9C  D015               	goto	l3536
  9078                           
  9079                           ;doprnt.c: 1253: {
  9080                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9081  00FC9E  C01C  FFD9         	movff	sprintf@ap,fsr2l
  9082  00FCA2  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  9083  00FCA6  CFDE F01E          	movff	postinc2,sprintf@val
  9084  00FCAA  CFDD F01F          	movff	postdec2,sprintf@val+1
  9085  00FCAE  0E02               	movlw	2
  9086  00FCB0  261C               	addwf	sprintf@ap,f,c
  9087  00FCB2  0E00               	movlw	0
  9088  00FCB4  221D               	addwfc	sprintf@ap+1,f,c
  9089                           
  9090                           ;doprnt.c: 1261: if((int)val < 0) {
  9091  00FCB6  AE1F               	btfss	sprintf@val+1,7,c
  9092  00FCB8  D014               	goto	l3540
  9093                           
  9094                           ;doprnt.c: 1262: flag |= 0x03;
  9095  00FCBA  0E03               	movlw	3
  9096  00FCBC  1220               	iorwf	sprintf@flag,f,c
  9097                           
  9098                           ;doprnt.c: 1263: val = -val;
  9099  00FCBE  6C1E               	negf	sprintf@val,c
  9100  00FCC0  1E1F               	comf	sprintf@val+1,f,c
  9101  00FCC2  B0D8               	btfsc	status,0,c
  9102  00FCC4  2A1F               	incf	sprintf@val+1,f,c
  9103                           
  9104                           ;doprnt.c: 1264: }
  9105                           ;doprnt.c: 1266: }
  9106  00FCC6  D00D               	goto	l3540
  9107  00FCC8                     l3536:
  9108                           
  9109                           ;doprnt.c: 1268: else
  9110                           ;doprnt.c: 1273: {
  9111                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9112  00FCC8  C01C  FFD9         	movff	sprintf@ap,fsr2l
  9113  00FCCC  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  9114  00FCD0  CFDE F01E          	movff	postinc2,sprintf@val
  9115  00FCD4  CFDD F01F          	movff	postdec2,sprintf@val+1
  9116  00FCD8  0E02               	movlw	2
  9117  00FCDA  261C               	addwf	sprintf@ap,f,c
  9118  00FCDC  0E00               	movlw	0
  9119  00FCDE  221D               	addwfc	sprintf@ap+1,f,c
  9120  00FCE0  D000               	goto	l3540
  9121  00FCE2                     l3540:
  9122                           
  9123                           ;doprnt.c: 1287: }
  9124                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9125  00FCE2  0E01               	movlw	1
  9126  00FCE4  6E23               	movwf	sprintf@c,c
  9127  00FCE6                     l3542:
  9128  00FCE6  0E05               	movlw	5
  9129  00FCE8  1823               	xorwf	sprintf@c,w,c
  9130  00FCEA  B4D8               	btfsc	status,2,c
  9131  00FCEC  D016               	goto	l3554
  9132  00FCEE  D001               	goto	l3546
  9133  00FCF0  D014               	goto	l3554
  9134  00FCF2                     l3546:
  9135                           
  9136                           ;doprnt.c: 1306: if(val < dpowers[c])
  9137  00FCF2  5023               	movf	sprintf@c,w,c
  9138  00FCF4  0D02               	mullw	2
  9139  00FCF6  0E8B               	movlw	low _dpowers
  9140  00FCF8  24F3               	addwf	prodl,w,c
  9141  00FCFA  6EF6               	movwf	tblptrl,c
  9142  00FCFC  0EFE               	movlw	high _dpowers
  9143  00FCFE  20F4               	addwfc	prodh,w,c
  9144  00FD00  6EF7               	movwf	tblptrh,c
  9145  00FD02                     	if	0	;There are less than 3 active tblptr bytes
  9146  00FD02                     	endif
  9147  00FD02  0009               	tblrd		*+
  9148  00FD04  50F5               	movf	tablat,w,c
  9149  00FD06  5C1E               	subwf	sprintf@val,w,c
  9150  00FD08  0009               	tblrd		*+
  9151  00FD0A  50F5               	movf	tablat,w,c
  9152  00FD0C  581F               	subwfb	sprintf@val+1,w,c
  9153  00FD0E  A0D8               	btfss	status,0,c
  9154  00FD10  D004               	goto	l3554
  9155  00FD12  D001               	goto	l3550
  9156                           
  9157                           ;doprnt.c: 1307: break;
  9158  00FD14  D002               	goto	l3554
  9159  00FD16                     l3550:
  9160  00FD16  2A23               	incf	sprintf@c,f,c
  9161  00FD18  D7E6               	goto	l3542
  9162  00FD1A                     l3554:
  9163                           
  9164                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9165  00FD1A  5021               	movf	sprintf@width,w,c
  9166  00FD1C  1022               	iorwf	sprintf@width+1,w,c
  9167  00FD1E  B4D8               	btfsc	status,2,c
  9168  00FD20  D00A               	goto	l3560
  9169  00FD22  C020  F017         	movff	sprintf@flag,??_sprintf
  9170  00FD26  0E03               	movlw	3
  9171  00FD28  1617               	andwf	??_sprintf,f,c
  9172  00FD2A  B4D8               	btfsc	status,2,c
  9173  00FD2C  D004               	goto	l3560
  9174                           
  9175                           ;doprnt.c: 1346: width--;
  9176  00FD2E  0621               	decf	sprintf@width,f,c
  9177  00FD30  A0D8               	btfss	status,0,c
  9178  00FD32  0622               	decf	sprintf@width+1,f,c
  9179  00FD34  D000               	goto	l3560
  9180  00FD36                     l3560:
  9181                           
  9182                           ;doprnt.c: 1381: if(width > c)
  9183  00FD36  0E80               	movlw	128
  9184  00FD38  BE23               	btfsc	sprintf@c,7,c
  9185  00FD3A  0E7F               	movlw	127
  9186  00FD3C  6E17               	movwf	??_sprintf& (0+255),c
  9187  00FD3E  5021               	movf	sprintf@width,w,c
  9188  00FD40  5C23               	subwf	sprintf@c,w,c
  9189  00FD42  5022               	movf	sprintf@width+1,w,c
  9190  00FD44  0A80               	xorlw	128
  9191  00FD46  5817               	subwfb	??_sprintf& (0+255),w,c
  9192  00FD48  B0D8               	btfsc	status,0,c
  9193  00FD4A  D007               	goto	l3564
  9194                           
  9195                           ;doprnt.c: 1382: width -= c;
  9196  00FD4C  5023               	movf	sprintf@c,w,c
  9197  00FD4E  5E21               	subwf	sprintf@width,f,c
  9198  00FD50  0E00               	movlw	0
  9199  00FD52  BE23               	btfsc	sprintf@c,7,c
  9200  00FD54  0EFF               	movlw	255
  9201  00FD56  5A22               	subwfb	sprintf@width+1,f,c
  9202  00FD58  D005               	goto	l3566
  9203  00FD5A                     l3564:
  9204                           
  9205                           ;doprnt.c: 1383: else
  9206                           ;doprnt.c: 1384: width = 0;
  9207  00FD5A  0E00               	movlw	0
  9208  00FD5C  6E22               	movwf	sprintf@width+1,c
  9209  00FD5E  0E00               	movlw	0
  9210  00FD60  6E21               	movwf	sprintf@width,c
  9211  00FD62  D000               	goto	l3566
  9212  00FD64                     l3566:
  9213                           
  9214                           ;doprnt.c: 1387: if(flag & 0x04) {
  9215  00FD64  A420               	btfss	sprintf@flag,2,c
  9216  00FD66  D024               	goto	l3582
  9217                           
  9218                           ;doprnt.c: 1392: if(flag & 0x03)
  9219  00FD68  C020  F017         	movff	sprintf@flag,??_sprintf
  9220  00FD6C  0E03               	movlw	3
  9221  00FD6E  1617               	andwf	??_sprintf,f,c
  9222  00FD70  B4D8               	btfsc	status,2,c
  9223  00FD72  D009               	goto	l3574
  9224                           
  9225                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9226  00FD74  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9227  00FD78  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9228  00FD7C  0E2D               	movlw	45
  9229  00FD7E  6EDF               	movwf	indf2,c
  9230  00FD80  4A0D               	infsnz	sprintf@sp,f,c
  9231  00FD82  2A0E               	incf	sprintf@sp+1,f,c
  9232  00FD84  D000               	goto	l3574
  9233  00FD86                     l3574:
  9234                           
  9235                           ;doprnt.c: 1415: if(width)
  9236  00FD86  5021               	movf	sprintf@width,w,c
  9237  00FD88  1022               	iorwf	sprintf@width+1,w,c
  9238  00FD8A  B4D8               	btfsc	status,2,c
  9239  00FD8C  D035               	goto	l3596
  9240  00FD8E                     l3576:
  9241                           
  9242                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9243  00FD8E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9244  00FD92  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9245  00FD96  0E30               	movlw	48
  9246  00FD98  6EDF               	movwf	indf2,c
  9247  00FD9A  4A0D               	infsnz	sprintf@sp,f,c
  9248  00FD9C  2A0E               	incf	sprintf@sp+1,f,c
  9249                           
  9250                           ;doprnt.c: 1418: while(--width);
  9251  00FD9E  0621               	decf	sprintf@width,f,c
  9252  00FDA0  A0D8               	btfss	status,0,c
  9253  00FDA2  0622               	decf	sprintf@width+1,f,c
  9254  00FDA4  5021               	movf	sprintf@width,w,c
  9255  00FDA6  1022               	iorwf	sprintf@width+1,w,c
  9256  00FDA8  B4D8               	btfsc	status,2,c
  9257  00FDAA  D026               	goto	l3596
  9258  00FDAC  D7F0               	goto	l3576
  9259                           
  9260                           ;doprnt.c: 1420: } else
  9261  00FDAE  D024               	goto	l3596
  9262  00FDB0                     l3582:
  9263                           
  9264                           ;doprnt.c: 1422: {
  9265                           ;doprnt.c: 1424: if(width
  9266                           ;doprnt.c: 1428: )
  9267  00FDB0  5021               	movf	sprintf@width,w,c
  9268  00FDB2  1022               	iorwf	sprintf@width+1,w,c
  9269  00FDB4  B4D8               	btfsc	status,2,c
  9270  00FDB6  D011               	goto	l3590
  9271  00FDB8                     l3584:
  9272                           
  9273                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9274  00FDB8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9275  00FDBC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9276  00FDC0  0E20               	movlw	32
  9277  00FDC2  6EDF               	movwf	indf2,c
  9278  00FDC4  4A0D               	infsnz	sprintf@sp,f,c
  9279  00FDC6  2A0E               	incf	sprintf@sp+1,f,c
  9280                           
  9281                           ;doprnt.c: 1431: while(--width);
  9282  00FDC8  0621               	decf	sprintf@width,f,c
  9283  00FDCA  A0D8               	btfss	status,0,c
  9284  00FDCC  0622               	decf	sprintf@width+1,f,c
  9285  00FDCE  5021               	movf	sprintf@width,w,c
  9286  00FDD0  1022               	iorwf	sprintf@width+1,w,c
  9287  00FDD2  B4D8               	btfsc	status,2,c
  9288  00FDD4  D002               	goto	l3590
  9289  00FDD6  D7F0               	goto	l3584
  9290  00FDD8  D000               	goto	l3590
  9291  00FDDA                     l3590:
  9292                           
  9293                           ;doprnt.c: 1438: if(flag & 0x03)
  9294  00FDDA  C020  F017         	movff	sprintf@flag,??_sprintf
  9295  00FDDE  0E03               	movlw	3
  9296  00FDE0  1617               	andwf	??_sprintf,f,c
  9297  00FDE2  B4D8               	btfsc	status,2,c
  9298  00FDE4  D009               	goto	l3596
  9299                           
  9300                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9301  00FDE6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9302  00FDEA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9303  00FDEE  0E2D               	movlw	45
  9304  00FDF0  6EDF               	movwf	indf2,c
  9305  00FDF2  4A0D               	infsnz	sprintf@sp,f,c
  9306  00FDF4  2A0E               	incf	sprintf@sp+1,f,c
  9307  00FDF6  D000               	goto	l3596
  9308  00FDF8                     l3596:
  9309                           
  9310                           ;doprnt.c: 1469: }
  9311                           ;doprnt.c: 1472: prec = c;
  9312  00FDF8  C023  F01B         	movff	sprintf@c,sprintf@prec
  9313                           
  9314                           ;doprnt.c: 1474: while(prec--) {
  9315  00FDFC  D02A               	goto	l3604
  9316  00FDFE                     l3598:
  9317                           
  9318                           ;doprnt.c: 1478: {
  9319                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9320  00FDFE  501B               	movf	sprintf@prec,w,c
  9321  00FE00  0D02               	mullw	2
  9322  00FE02  0E8B               	movlw	low _dpowers
  9323  00FE04  24F3               	addwf	prodl,w,c
  9324  00FE06  6EF6               	movwf	tblptrl,c
  9325  00FE08  0EFE               	movlw	high _dpowers
  9326  00FE0A  20F4               	addwfc	prodh,w,c
  9327  00FE0C  6EF7               	movwf	tblptrh,c
  9328  00FE0E                     	if	0	;There are less than 3 active tblptr bytes
  9329  00FE0E                     	endif
  9330  00FE0E  0009               	tblrd		*+
  9331  00FE10  CFF5 F003          	movff	tablat,___lwdiv@divisor
  9332  00FE14  000A               	tblrd		*-
  9333  00FE16  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  9334  00FE1A  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  9335  00FE1E  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  9336  00FE22  EC02  F071         	call	___lwdiv	;wreg free
  9337  00FE26  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  9338  00FE2A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  9339  00FE2E  0E00               	movlw	0
  9340  00FE30  6E0B               	movwf	___lwmod@divisor+1,c
  9341  00FE32  0E0A               	movlw	10
  9342  00FE34  6E0A               	movwf	___lwmod@divisor,c
  9343  00FE36  EC85  F070         	call	___lwmod	;wreg free
  9344  00FE3A  5008               	movf	?___lwmod,w,c
  9345  00FE3C  0F30               	addlw	48
  9346  00FE3E  6E23               	movwf	sprintf@c,c
  9347                           
  9348                           ;doprnt.c: 1523: }
  9349                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9350  00FE40  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9351  00FE44  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9352  00FE48  C023  FFDF         	movff	sprintf@c,indf2
  9353  00FE4C  4A0D               	infsnz	sprintf@sp,f,c
  9354  00FE4E  2A0E               	incf	sprintf@sp+1,f,c
  9355  00FE50  D000               	goto	l3604
  9356  00FE52                     l3604:
  9357  00FE52  061B               	decf	sprintf@prec,f,c
  9358  00FE54  281B               	incf	sprintf@prec,w,c
  9359  00FE56  B4D8               	btfsc	status,2,c
  9360  00FE58  D002               	goto	l3606
  9361  00FE5A  D7D1               	goto	l3598
  9362  00FE5C  D000               	goto	l3606
  9363  00FE5E                     l3606:
  9364  00FE5E  C00F  FFF6         	movff	sprintf@f,tblptrl
  9365  00FE62  C010  FFF7         	movff	sprintf@f+1,tblptrh
  9366  00FE66  4A0F               	infsnz	sprintf@f,f,c
  9367  00FE68  2A10               	incf	sprintf@f+1,f,c
  9368  00FE6A                     	if	0	;tblptru may be non-zero
  9369  00FE6A                     	endif
  9370  00FE6A                     	if	0	;tblptru may be non-zero
  9371  00FE6A                     	endif
  9372  00FE6A  0008               	tblrd		*
  9373  00FE6C  CFF5 F023          	movff	tablat,sprintf@c
  9374  00FE70  5023               	movf	sprintf@c,w,c
  9375  00FE72  B4D8               	btfsc	status,2,c
  9376  00FE74  D002               	goto	l3608
  9377  00FE76  D692               	goto	l3494
  9378  00FE78  D000               	goto	l3608
  9379  00FE7A                     l3608:
  9380                           
  9381                           ;doprnt.c: 1538: *sp = 0;
  9382  00FE7A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  9383  00FE7E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  9384  00FE82  0E00               	movlw	0
  9385  00FE84  6EDF               	movwf	indf2,c
  9386  00FE86  0012               	return	
  9387                           
  9388                           ;doprnt.c: 1540: return 0;
  9389                           ;	Return value of _sprintf is never used
  9390  00FE88  0012               	return		;funcret
  9391  00FE8A                     __end_of_sprintf:
  9392                           	opt stack 0
  9393                           tosu	equ	0xFFF
  9394                           tosh	equ	0xFFE
  9395                           tosl	equ	0xFFD
  9396                           pclath	equ	0xFFA
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           postinc0	equ	0xFEE
  9404                           wreg	equ	0xFE8
  9405                           indf1	equ	0xFE7
  9406                           postinc1	equ	0xFE6
  9407                           postdec1	equ	0xFE5
  9408                           fsr1h	equ	0xFE2
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           plusw2	equ	0xFDB
  9414                           fsr2h	equ	0xFDA
  9415                           fsr2l	equ	0xFD9
  9416                           status	equ	0xFD8
  9417                           
  9418 ;; *************** function _isdigit *****************
  9419 ;; Defined at:
  9420 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;  c               1    wreg     unsigned char 
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  c               1    2[COMRAM] unsigned char 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;		None               void
  9427 ;; Registers used:
  9428 ;;		wreg, status,2, status,0
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9437 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9438 ;;Total ram usage:        3 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_sprintf
  9444 ;;		_atoi
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           	psect	text62
  9449  00DDC4                     __ptext62:
  9450                           	opt stack 0
  9451  00DDC4                     _isdigit:
  9452                           	opt stack 27
  9453                           
  9454                           ;incstack = 0
  9455                           ;isdigit@c stored from wreg
  9456  00DDC4  6E03               	movwf	isdigit@c,c
  9457  00DDC6  0E00               	movlw	0
  9458  00DDC8  6E02               	movwf	_isdigit$2763,c
  9459  00DDCA  0E3A               	movlw	58
  9460  00DDCC  6003               	cpfslt	isdigit@c,c
  9461  00DDCE  D006               	goto	l3394
  9462  00DDD0  0E2F               	movlw	47
  9463  00DDD2  6403               	cpfsgt	isdigit@c,c
  9464  00DDD4  D003               	goto	l3394
  9465  00DDD6  0E01               	movlw	1
  9466  00DDD8  6E02               	movwf	_isdigit$2763,c
  9467  00DDDA  D000               	goto	l3394
  9468  00DDDC                     l3394:
  9469  00DDDC  C002  F001         	movff	_isdigit$2763,??_isdigit
  9470  00DDE0  3001               	rrcf	??_isdigit,w,c
  9471  00DDE2  0012               	return	
  9472  00DDE4  0012               	return		;funcret
  9473  00DDE6                     __end_of_isdigit:
  9474                           	opt stack 0
  9475                           tosu	equ	0xFFF
  9476                           tosh	equ	0xFFE
  9477                           tosl	equ	0xFFD
  9478                           pclath	equ	0xFFA
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           postinc0	equ	0xFEE
  9486                           wreg	equ	0xFE8
  9487                           indf1	equ	0xFE7
  9488                           postinc1	equ	0xFE6
  9489                           postdec1	equ	0xFE5
  9490                           fsr1h	equ	0xFE2
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           postdec2	equ	0xFDD
  9495                           plusw2	equ	0xFDB
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function ___wmul *****************
  9501 ;; Defined at:
  9502 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  multiplier      2    0[COMRAM] unsigned int 
  9505 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  product         2    4[COMRAM] unsigned int 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  2    0[COMRAM] unsigned int 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, status,0, prodl, prodh
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9520 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9521 ;;Total ram usage:        6 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; This function calls:
  9524 ;;		Nothing
  9525 ;; This function is called by:
  9526 ;;		_sprintf
  9527 ;;		_atoi
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text63
  9532  00DE72                     __ptext63:
  9533                           	opt stack 0
  9534  00DE72                     ___wmul:
  9535                           	opt stack 27
  9536                           
  9537                           ;incstack = 0
  9538  00DE72  5001               	movf	___wmul@multiplier,w,c
  9539  00DE74  0203               	mulwf	___wmul@multiplicand,c
  9540  00DE76  CFF3 F005          	movff	prodl,___wmul@product
  9541  00DE7A  CFF4 F006          	movff	prodh,___wmul@product+1
  9542  00DE7E  5001               	movf	___wmul@multiplier,w,c
  9543  00DE80  0204               	mulwf	___wmul@multiplicand+1,c
  9544  00DE82  50F3               	movf	prodl,w,c
  9545  00DE84  2606               	addwf	___wmul@product+1,f,c
  9546  00DE86  5002               	movf	___wmul@multiplier+1,w,c
  9547  00DE88  0203               	mulwf	___wmul@multiplicand,c
  9548  00DE8A  50F3               	movf	prodl,w,c
  9549  00DE8C  2606               	addwf	___wmul@product+1,f,c
  9550  00DE8E  C005  F001         	movff	___wmul@product,?___wmul
  9551  00DE92  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9552  00DE96  0012               	return	
  9553  00DE98  0012               	return		;funcret
  9554  00DE9A                     __end_of___wmul:
  9555                           	opt stack 0
  9556                           tosu	equ	0xFFF
  9557                           tosh	equ	0xFFE
  9558                           tosl	equ	0xFFD
  9559                           pclath	equ	0xFFA
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           postinc0	equ	0xFEE
  9567                           wreg	equ	0xFE8
  9568                           indf1	equ	0xFE7
  9569                           postinc1	equ	0xFE6
  9570                           postdec1	equ	0xFE5
  9571                           fsr1h	equ	0xFE2
  9572                           fsr1l	equ	0xFE1
  9573                           indf2	equ	0xFDF
  9574                           postinc2	equ	0xFDE
  9575                           postdec2	equ	0xFDD
  9576                           plusw2	equ	0xFDB
  9577                           fsr2h	equ	0xFDA
  9578                           fsr2l	equ	0xFD9
  9579                           status	equ	0xFD8
  9580                           
  9581 ;; *************** function ___lwmod *****************
  9582 ;; Defined at:
  9583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;  dividend        2    7[COMRAM] unsigned int 
  9586 ;;  divisor         2    9[COMRAM] unsigned int 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  counter         1   11[COMRAM] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  2    7[COMRAM] unsigned int 
  9591 ;; Registers used:
  9592 ;;		wreg, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9601 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9602 ;;Total ram usage:        5 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_sprintf
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text64
  9612  00E10A                     __ptext64:
  9613                           	opt stack 0
  9614  00E10A                     ___lwmod:
  9615                           	opt stack 27
  9616                           
  9617                           ;incstack = 0
  9618  00E10A  500A               	movf	___lwmod@divisor,w,c
  9619  00E10C  100B               	iorwf	___lwmod@divisor+1,w,c
  9620  00E10E  B4D8               	btfsc	status,2,c
  9621  00E110  D01D               	goto	l1599
  9622  00E112  0E01               	movlw	1
  9623  00E114  6E0C               	movwf	___lwmod@counter,c
  9624  00E116  D005               	goto	l3480
  9625  00E118                     l3478:
  9626  00E118  90D8               	bcf	status,0,c
  9627  00E11A  360A               	rlcf	___lwmod@divisor,f,c
  9628  00E11C  360B               	rlcf	___lwmod@divisor+1,f,c
  9629  00E11E  2A0C               	incf	___lwmod@counter,f,c
  9630  00E120  D000               	goto	l3480
  9631  00E122                     l3480:
  9632  00E122  BE0B               	btfsc	___lwmod@divisor+1,7,c
  9633  00E124  D002               	goto	l3482
  9634  00E126  D7F8               	goto	l3478
  9635  00E128  D000               	goto	l3482
  9636  00E12A                     l3482:
  9637  00E12A  500A               	movf	___lwmod@divisor,w,c
  9638  00E12C  5C08               	subwf	___lwmod@dividend,w,c
  9639  00E12E  500B               	movf	___lwmod@divisor+1,w,c
  9640  00E130  5809               	subwfb	___lwmod@dividend+1,w,c
  9641  00E132  A0D8               	btfss	status,0,c
  9642  00E134  D005               	goto	l3486
  9643  00E136  500A               	movf	___lwmod@divisor,w,c
  9644  00E138  5E08               	subwf	___lwmod@dividend,f,c
  9645  00E13A  500B               	movf	___lwmod@divisor+1,w,c
  9646  00E13C  5A09               	subwfb	___lwmod@dividend+1,f,c
  9647  00E13E  D000               	goto	l3486
  9648  00E140                     l3486:
  9649  00E140  90D8               	bcf	status,0,c
  9650  00E142  320B               	rrcf	___lwmod@divisor+1,f,c
  9651  00E144  320A               	rrcf	___lwmod@divisor,f,c
  9652  00E146  2E0C               	decfsz	___lwmod@counter,f,c
  9653  00E148  D7F0               	goto	l3482
  9654  00E14A  D000               	goto	l1599
  9655  00E14C                     l1599:
  9656  00E14C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  9657  00E150  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  9658  00E154  0012               	return		;funcret
  9659  00E156                     __end_of___lwmod:
  9660                           	opt stack 0
  9661                           tosu	equ	0xFFF
  9662                           tosh	equ	0xFFE
  9663                           tosl	equ	0xFFD
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           postinc0	equ	0xFEE
  9672                           wreg	equ	0xFE8
  9673                           indf1	equ	0xFE7
  9674                           postinc1	equ	0xFE6
  9675                           postdec1	equ	0xFE5
  9676                           fsr1h	equ	0xFE2
  9677                           fsr1l	equ	0xFE1
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           plusw2	equ	0xFDB
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function ___lwdiv *****************
  9687 ;; Defined at:
  9688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  dividend        2    0[COMRAM] unsigned int 
  9691 ;;  divisor         2    2[COMRAM] unsigned int 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  quotient        2    4[COMRAM] unsigned int 
  9694 ;;  counter         1    6[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  2    0[COMRAM] unsigned int 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9708 ;;Total ram usage:        7 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_sprintf
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text65
  9718  00E204                     __ptext65:
  9719                           	opt stack 0
  9720  00E204                     ___lwdiv:
  9721                           	opt stack 27
  9722                           
  9723                           ;incstack = 0
  9724  00E204  0E00               	movlw	0
  9725  00E206  6E06               	movwf	___lwdiv@quotient+1,c
  9726  00E208  0E00               	movlw	0
  9727  00E20A  6E05               	movwf	___lwdiv@quotient,c
  9728  00E20C  5003               	movf	___lwdiv@divisor,w,c
  9729  00E20E  1004               	iorwf	___lwdiv@divisor+1,w,c
  9730  00E210  B4D8               	btfsc	status,2,c
  9731  00E212  D021               	goto	l1589
  9732  00E214  0E01               	movlw	1
  9733  00E216  6E07               	movwf	___lwdiv@counter,c
  9734  00E218  D005               	goto	l3460
  9735  00E21A                     l3458:
  9736  00E21A  90D8               	bcf	status,0,c
  9737  00E21C  3603               	rlcf	___lwdiv@divisor,f,c
  9738  00E21E  3604               	rlcf	___lwdiv@divisor+1,f,c
  9739  00E220  2A07               	incf	___lwdiv@counter,f,c
  9740  00E222  D000               	goto	l3460
  9741  00E224                     l3460:
  9742  00E224  BE04               	btfsc	___lwdiv@divisor+1,7,c
  9743  00E226  D002               	goto	l3462
  9744  00E228  D7F8               	goto	l3458
  9745  00E22A  D000               	goto	l3462
  9746  00E22C                     l3462:
  9747  00E22C  90D8               	bcf	status,0,c
  9748  00E22E  3605               	rlcf	___lwdiv@quotient,f,c
  9749  00E230  3606               	rlcf	___lwdiv@quotient+1,f,c
  9750  00E232  5003               	movf	___lwdiv@divisor,w,c
  9751  00E234  5C01               	subwf	___lwdiv@dividend,w,c
  9752  00E236  5004               	movf	___lwdiv@divisor+1,w,c
  9753  00E238  5802               	subwfb	___lwdiv@dividend+1,w,c
  9754  00E23A  A0D8               	btfss	status,0,c
  9755  00E23C  D006               	goto	l3470
  9756  00E23E  5003               	movf	___lwdiv@divisor,w,c
  9757  00E240  5E01               	subwf	___lwdiv@dividend,f,c
  9758  00E242  5004               	movf	___lwdiv@divisor+1,w,c
  9759  00E244  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9760  00E246  8005               	bsf	___lwdiv@quotient,0,c
  9761  00E248  D000               	goto	l3470
  9762  00E24A                     l3470:
  9763  00E24A  90D8               	bcf	status,0,c
  9764  00E24C  3204               	rrcf	___lwdiv@divisor+1,f,c
  9765  00E24E  3203               	rrcf	___lwdiv@divisor,f,c
  9766  00E250  2E07               	decfsz	___lwdiv@counter,f,c
  9767  00E252  D7EC               	goto	l3462
  9768  00E254  D000               	goto	l1589
  9769  00E256                     l1589:
  9770  00E256  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9771  00E25A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9772  00E25E  0012               	return		;funcret
  9773  00E260                     __end_of___lwdiv:
  9774                           	opt stack 0
  9775                           tosu	equ	0xFFF
  9776                           tosh	equ	0xFFE
  9777                           tosl	equ	0xFFD
  9778                           pclath	equ	0xFFA
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           prodh	equ	0xFF4
  9784                           prodl	equ	0xFF3
  9785                           postinc0	equ	0xFEE
  9786                           wreg	equ	0xFE8
  9787                           indf1	equ	0xFE7
  9788                           postinc1	equ	0xFE6
  9789                           postdec1	equ	0xFE5
  9790                           fsr1h	equ	0xFE2
  9791                           fsr1l	equ	0xFE1
  9792                           indf2	equ	0xFDF
  9793                           postinc2	equ	0xFDE
  9794                           postdec2	equ	0xFDD
  9795                           plusw2	equ	0xFDB
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           
  9800 ;; *************** function _lcd_putrs *****************
  9801 ;; Defined at:
  9802 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  9805 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  9806 ;;		 -> fecha@day(3), STR_30(2), STR_29(2), STR_28(2), 
  9807 ;;		 -> imprimir_tecla@aux(20), STR_25(9), STR_24(9), STR_23(11), 
  9808 ;;		 -> STR_22(14), STR_21(17), STR_20(17), STR_19(23), 
  9809 ;;		 -> STR_18(20), STR_17(27), STR_16(19), STR_15(22), 
  9810 ;;		 -> STR_14(18), STR_13(18), STR_12(19), STR_7(11), 
  9811 ;;		 -> STR_6(17), STR_5(26), STR_4(4), STR_3(3), 
  9812 ;;		 -> buffer2(20), 
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;		None
  9815 ;; Return value:  Size  Location     Type
  9816 ;;		None               void
  9817 ;; Registers used:
  9818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9828 ;;Total ram usage:        2 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    4
  9831 ;; This function calls:
  9832 ;;		_lcd_putc
  9833 ;; This function is called by:
  9834 ;;		_caratula
  9835 ;;		_clear_display
  9836 ;;		_menu_ingresar_password
  9837 ;;		_mostrar_titulo_menu
  9838 ;;		_mensaje_alarma_activada
  9839 ;;		_main
  9840 ;;		_imprimir_tecla
  9841 ;;		_leer_teclado
  9842 ;;		_guardar_elemento
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text66
  9847  00E156                     __ptext66:
  9848                           	opt stack 0
  9849  00E156                     _lcd_putrs:
  9850                           	opt stack 24
  9851                           
  9852                           ;unmc_lcd_216.c: 223: while(*ptr){
  9853                           
  9854                           ;incstack = 0
  9855  00E156  D015               	goto	l3410
  9856  00E158                     l3406:
  9857                           
  9858                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  9859  00E158  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9860  00E15C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9861  00E160  6AF8               	clrf	tblptru,c
  9862  00E162  0E0E               	movlw	(high __ramtop+-1)
  9863  00E164  64F7               	cpfsgt	tblptrh,c
  9864  00E166  D003               	bra	u2367
  9865  00E168  0008               	tblrd		*
  9866  00E16A  50F5               	movf	tablat,w,c
  9867  00E16C  D005               	bra	u2360
  9868  00E16E                     u2367:
  9869  00E16E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9870  00E172  CFF7 FFEA          	movff	tblptrh,fsr0h
  9871  00E176  50EF               	movf	indf0,w,c
  9872  00E178                     u2360:
  9873  00E178  EC5F  F070         	call	_lcd_putc
  9874  00E17C  4A09               	infsnz	lcd_putrs@ptr,f,c
  9875  00E17E  2A0A               	incf	lcd_putrs@ptr+1,f,c
  9876  00E180  D000               	goto	l3410
  9877  00E182                     l3410:
  9878  00E182  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9879  00E186  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9880  00E18A  6AF8               	clrf	tblptru,c
  9881  00E18C  0E0E               	movlw	(high __ramtop+-1)
  9882  00E18E  64F7               	cpfsgt	tblptrh,c
  9883  00E190  D003               	bra	u2377
  9884  00E192  0008               	tblrd		*
  9885  00E194  50F5               	movf	tablat,w,c
  9886  00E196  D005               	bra	u2370
  9887  00E198                     u2377:
  9888  00E198  CFF6 FFE9          	movff	tblptrl,fsr0l
  9889  00E19C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9890  00E1A0  50EF               	movf	indf0,w,c
  9891  00E1A2                     u2370:
  9892  00E1A2  0900               	iorlw	0
  9893  00E1A4  A4D8               	btfss	status,2,c
  9894  00E1A6  D7D8               	goto	l3406
  9895  00E1A8  0012               	return		;funcret
  9896  00E1AA                     __end_of_lcd_putrs:
  9897                           	opt stack 0
  9898                           tosu	equ	0xFFF
  9899                           tosh	equ	0xFFE
  9900                           tosl	equ	0xFFD
  9901                           pclath	equ	0xFFA
  9902                           tblptru	equ	0xFF8
  9903                           tblptrh	equ	0xFF7
  9904                           tblptrl	equ	0xFF6
  9905                           tablat	equ	0xFF5
  9906                           prodh	equ	0xFF4
  9907                           prodl	equ	0xFF3
  9908                           indf0	equ	0xFEF
  9909                           postinc0	equ	0xFEE
  9910                           fsr0h	equ	0xFEA
  9911                           fsr0l	equ	0xFE9
  9912                           wreg	equ	0xFE8
  9913                           indf1	equ	0xFE7
  9914                           postinc1	equ	0xFE6
  9915                           postdec1	equ	0xFE5
  9916                           fsr1h	equ	0xFE2
  9917                           fsr1l	equ	0xFE1
  9918                           indf2	equ	0xFDF
  9919                           postinc2	equ	0xFDE
  9920                           postdec2	equ	0xFDD
  9921                           plusw2	equ	0xFDB
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926 ;; *************** function _lcd_putc *****************
  9927 ;; Defined at:
  9928 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;  c               1    wreg     unsigned char 
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;  c               1    7[COMRAM] unsigned char 
  9933 ;; Return value:  Size  Location     Type
  9934 ;;		None               void
  9935 ;; Registers used:
  9936 ;;		wreg, status,2, status,0, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9946 ;;Total ram usage:        1 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    3
  9949 ;; This function calls:
  9950 ;;		_lcd_gotoxy
  9951 ;;		_lcd_send_byte
  9952 ;; This function is called by:
  9953 ;;		_lcd_putrs
  9954 ;;		_lcd_puts
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text67
  9959  00E0BE                     __ptext67:
  9960                           	opt stack 0
  9961  00E0BE                     _lcd_putc:
  9962                           	opt stack 24
  9963                           
  9964                           ;incstack = 0
  9965                           ;lcd_putc@c stored from wreg
  9966  00E0BE  6E08               	movwf	lcd_putc@c,c
  9967                           
  9968                           ;unmc_lcd_216.c: 173: switch(c){
  9969  00E0C0  D018               	goto	l3380
  9970  00E0C2                     l3370:
  9971                           
  9972                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9973  00E0C2  0E01               	movlw	1
  9974  00E0C4  6E03               	movwf	lcd_send_byte@n,c
  9975  00E0C6  0E00               	movlw	0
  9976  00E0C8  ECFF  F06F         	call	_lcd_send_byte
  9977                           
  9978                           ;unmc_lcd_216.c: 176: break;
  9979  00E0CC  0012               	return	
  9980  00E0CE                     l3372:
  9981                           
  9982                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9983  00E0CE  0E02               	movlw	2
  9984  00E0D0  6E05               	movwf	lcd_gotoxy@y,c
  9985  00E0D2  0E01               	movlw	1
  9986  00E0D4  EC15  F06F         	call	_lcd_gotoxy
  9987                           
  9988                           ;unmc_lcd_216.c: 179: break;
  9989  00E0D8  0012               	return	
  9990  00E0DA                     l3374:
  9991                           
  9992                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9993  00E0DA  0E10               	movlw	16
  9994  00E0DC  6E03               	movwf	lcd_send_byte@n,c
  9995  00E0DE  0E00               	movlw	0
  9996  00E0E0  ECFF  F06F         	call	_lcd_send_byte
  9997                           
  9998                           ;unmc_lcd_216.c: 182: break;
  9999  00E0E4  0012               	return	
 10000  00E0E6                     l3376:
 10001                           
 10002                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
 10003  00E0E6  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
 10004  00E0EA  0E01               	movlw	1
 10005  00E0EC  ECFF  F06F         	call	_lcd_send_byte
 10006                           
 10007                           ;unmc_lcd_216.c: 186: }
 10008                           
 10009                           ;unmc_lcd_216.c: 185: break;
 10010  00E0F0  0012               	return	
 10011  00E0F2                     l3380:
 10012  00E0F2  5008               	movf	lcd_putc@c,w,c
 10013                           
 10014                           ; Switch size 1, requested type "space"
 10015                           ; Number of cases is 3, Range of values is 8 to 12
 10016                           ; switch strategies available:
 10017                           ; Name         Instructions Cycles
 10018                           ; simple_byte           10     6 (average)
 10019                           ;	Chosen strategy is simple_byte
 10020  00E0F4  0A08               	xorlw	8	; case 8
 10021  00E0F6  B4D8               	btfsc	status,2,c
 10022  00E0F8  D7F0               	goto	l3374
 10023  00E0FA  0A02               	xorlw	2	; case 10
 10024  00E0FC  B4D8               	btfsc	status,2,c
 10025  00E0FE  D7E7               	goto	l3372
 10026  00E100  0A06               	xorlw	6	; case 12
 10027  00E102  B4D8               	btfsc	status,2,c
 10028  00E104  D7DE               	goto	l3370
 10029  00E106  D7EF               	goto	l3376
 10030  00E108  0012               	return		;funcret
 10031  00E10A                     __end_of_lcd_putc:
 10032                           	opt stack 0
 10033                           tosu	equ	0xFFF
 10034                           tosh	equ	0xFFE
 10035                           tosl	equ	0xFFD
 10036                           pclath	equ	0xFFA
 10037                           tblptru	equ	0xFF8
 10038                           tblptrh	equ	0xFF7
 10039                           tblptrl	equ	0xFF6
 10040                           tablat	equ	0xFF5
 10041                           prodh	equ	0xFF4
 10042                           prodl	equ	0xFF3
 10043                           indf0	equ	0xFEF
 10044                           postinc0	equ	0xFEE
 10045                           fsr0h	equ	0xFEA
 10046                           fsr0l	equ	0xFE9
 10047                           wreg	equ	0xFE8
 10048                           indf1	equ	0xFE7
 10049                           postinc1	equ	0xFE6
 10050                           postdec1	equ	0xFE5
 10051                           fsr1h	equ	0xFE2
 10052                           fsr1l	equ	0xFE1
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           plusw2	equ	0xFDB
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function _lcd_gotoxy *****************
 10062 ;; Defined at:
 10063 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  x               1    wreg     unsigned char 
 10066 ;;  y               1    4[COMRAM] unsigned char 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;  x               1    5[COMRAM] unsigned char 
 10069 ;;  address         1    6[COMRAM] unsigned char 
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10079 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10082 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10083 ;;Total ram usage:        3 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    2
 10086 ;; This function calls:
 10087 ;;		_lcd_send_byte
 10088 ;; This function is called by:
 10089 ;;		_caratula
 10090 ;;		_clear_display
 10091 ;;		_menu_ingresar_password
 10092 ;;		_mostrar_titulo_menu
 10093 ;;		_mensaje_alarma_activada
 10094 ;;		_main
 10095 ;;		_lcd_putc
 10096 ;;		_guardar_elemento
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           	psect	text68
 10101  00DE2A                     __ptext68:
 10102                           	opt stack 0
 10103  00DE2A                     _lcd_gotoxy:
 10104                           	opt stack 24
 10105                           
 10106                           ;incstack = 0
 10107                           ;lcd_gotoxy@x stored from wreg
 10108  00DE2A  6E06               	movwf	lcd_gotoxy@x,c
 10109                           
 10110                           ;unmc_lcd_216.c: 159: int8 address;
 10111                           ;unmc_lcd_216.c: 161: if(y != 1)
 10112  00DE2C  0405               	decf	lcd_gotoxy@y,w,c
 10113  00DE2E  B4D8               	btfsc	status,2,c
 10114  00DE30  D002               	goto	l3132
 10115                           
 10116                           ;unmc_lcd_216.c: 162: address = 0x40;
 10117  00DE32  0E40               	movlw	64
 10118  00DE34  D001               	goto	L3
 10119  00DE36                     l3132:
 10120                           
 10121                           ;unmc_lcd_216.c: 163: else
 10122                           ;unmc_lcd_216.c: 164: address=0;
 10123  00DE36  0E00               	movlw	0
 10124  00DE38                     L3:
 10125  00DE38  6E07               	movwf	lcd_gotoxy@address,c
 10126  00DE3A  D000               	goto	l3134
 10127  00DE3C                     l3134:
 10128                           
 10129                           ;unmc_lcd_216.c: 166: address += x-1;
 10130  00DE3C  0406               	decf	lcd_gotoxy@x,w,c
 10131  00DE3E  2607               	addwf	lcd_gotoxy@address,f,c
 10132                           
 10133                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
 10134  00DE40  5007               	movf	lcd_gotoxy@address,w,c
 10135  00DE42  0980               	iorlw	128
 10136  00DE44  6E03               	movwf	lcd_send_byte@n,c
 10137  00DE46  0E00               	movlw	0
 10138  00DE48  ECFF  F06F         	call	_lcd_send_byte
 10139  00DE4C  0012               	return		;funcret
 10140  00DE4E                     __end_of_lcd_gotoxy:
 10141                           	opt stack 0
 10142                           tosu	equ	0xFFF
 10143                           tosh	equ	0xFFE
 10144                           tosl	equ	0xFFD
 10145                           pclath	equ	0xFFA
 10146                           tblptru	equ	0xFF8
 10147                           tblptrh	equ	0xFF7
 10148                           tblptrl	equ	0xFF6
 10149                           tablat	equ	0xFF5
 10150                           prodh	equ	0xFF4
 10151                           prodl	equ	0xFF3
 10152                           indf0	equ	0xFEF
 10153                           postinc0	equ	0xFEE
 10154                           fsr0h	equ	0xFEA
 10155                           fsr0l	equ	0xFE9
 10156                           wreg	equ	0xFE8
 10157                           indf1	equ	0xFE7
 10158                           postinc1	equ	0xFE6
 10159                           postdec1	equ	0xFE5
 10160                           fsr1h	equ	0xFE2
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           plusw2	equ	0xFDB
 10166                           fsr2h	equ	0xFDA
 10167                           fsr2l	equ	0xFD9
 10168                           status	equ	0xFD8
 10169                           
 10170 ;; *************** function _activar_sonido_alarma *****************
 10171 ;; Defined at:
 10172 ;;		line 242 in file "main.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;		None
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;		None
 10177 ;; Return value:  Size  Location     Type
 10178 ;;		None               void
 10179 ;; Registers used:
 10180 ;;		None
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10190 ;;Total ram usage:        0 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; This function calls:
 10193 ;;		Nothing
 10194 ;; This function is called by:
 10195 ;;		_main
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           	psect	text69
 10200  00DB7A                     __ptext69:
 10201                           	opt stack 0
 10202  00DB7A                     _activar_sonido_alarma:
 10203                           	opt stack 30
 10204                           
 10205                           ;main.c: 243: LATBbits.LATB0 = !LATBbits.LATB0;;
 10206                           
 10207                           ;incstack = 0
 10208  00DB7A  708A               	btg	3978,0,c	;volatile
 10209                           
 10210                           ;main.c: 244: LATCbits.LATC7 = !LATCbits.LATC7;;
 10211  00DB7C  7E8B               	btg	3979,7,c	;volatile
 10212  00DB7E  0012               	return		;funcret
 10213  00DB80                     __end_of_activar_sonido_alarma:
 10214                           	opt stack 0
 10215                           tosu	equ	0xFFF
 10216                           tosh	equ	0xFFE
 10217                           tosl	equ	0xFFD
 10218                           pclath	equ	0xFFA
 10219                           tblptru	equ	0xFF8
 10220                           tblptrh	equ	0xFF7
 10221                           tblptrl	equ	0xFF6
 10222                           tablat	equ	0xFF5
 10223                           prodh	equ	0xFF4
 10224                           prodl	equ	0xFF3
 10225                           indf0	equ	0xFEF
 10226                           postinc0	equ	0xFEE
 10227                           fsr0h	equ	0xFEA
 10228                           fsr0l	equ	0xFE9
 10229                           wreg	equ	0xFE8
 10230                           indf1	equ	0xFE7
 10231                           postinc1	equ	0xFE6
 10232                           postdec1	equ	0xFE5
 10233                           fsr1h	equ	0xFE2
 10234                           fsr1l	equ	0xFE1
 10235                           indf2	equ	0xFDF
 10236                           postinc2	equ	0xFDE
 10237                           postdec2	equ	0xFDD
 10238                           plusw2	equ	0xFDB
 10239                           fsr2h	equ	0xFDA
 10240                           fsr2l	equ	0xFD9
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function _Setup *****************
 10244 ;; Defined at:
 10245 ;;		line 60 in file "main.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;		None               void
 10252 ;; Registers used:
 10253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10263 ;;Total ram usage:        0 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    3
 10266 ;; This function calls:
 10267 ;;		_Write_RTC
 10268 ;;		_lcd_comand
 10269 ;;		_lcd_init
 10270 ;; This function is called by:
 10271 ;;		_main
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           	psect	text70
 10276  00E076                     __ptext70:
 10277                           	opt stack 0
 10278  00E076                     _Setup:
 10279                           	opt stack 27
 10280                           
 10281                           ;main.c: 62: OSCTUNEbits.INTSRC=1;
 10282                           
 10283                           ;incstack = 0
 10284  00E076  8E9B               	bsf	3995,7,c	;volatile
 10285                           
 10286                           ;main.c: 63: OSCTUNEbits.PLLEN=0;
 10287  00E078  9C9B               	bcf	3995,6,c	;volatile
 10288                           
 10289                           ;main.c: 64: OSCCONbits.IRCF0=1;
 10290  00E07A  88D3               	bsf	4051,4,c	;volatile
 10291                           
 10292                           ;main.c: 65: OSCCONbits.IRCF1=1;
 10293  00E07C  8AD3               	bsf	4051,5,c	;volatile
 10294                           
 10295                           ;main.c: 66: OSCCONbits.IRCF2=1;
 10296  00E07E  8CD3               	bsf	4051,6,c	;volatile
 10297                           
 10298                           ;main.c: 67: OSCCONbits.SCS0=0;
 10299  00E080  90D3               	bcf	4051,0,c	;volatile
 10300                           
 10301                           ;main.c: 68: OSCCONbits.SCS1=0;
 10302  00E082  92D3               	bcf	4051,1,c	;volatile
 10303                           
 10304                           ;main.c: 69: TRISA = 0b11110000;
 10305  00E084  0EF0               	movlw	240
 10306  00E086  6E92               	movwf	3986,c	;volatile
 10307                           
 10308                           ;main.c: 70: TRISB = 0;
 10309  00E088  0E00               	movlw	0
 10310  00E08A  6E93               	movwf	3987,c	;volatile
 10311                           
 10312                           ;main.c: 71: TRISC = 0b01000111;
 10313  00E08C  0E47               	movlw	71
 10314  00E08E  6E94               	movwf	3988,c	;volatile
 10315                           
 10316                           ;main.c: 75: ANCON0=0b11111111;
 10317  00E090  010F               	movlb	15	; () banked
 10318  00E092  6948               	setf	72,b	;volatile
 10319                           
 10320                           ; BSR set to: 15
 10321                           ;main.c: 77: ANCON1=0b11111111;
 10322  00E094  010F               	movlb	15	; () banked
 10323  00E096  6949               	setf	73,b	;volatile
 10324                           
 10325                           ;main.c: 78: ADCON0=0b00101101;
 10326  00E098  0E2D               	movlw	45
 10327  00E09A  6EC2               	movwf	4034,c	;volatile
 10328                           
 10329                           ;main.c: 79: ADCON1=0b00010000;
 10330  00E09C  0E10               	movlw	16
 10331  00E09E  6EC1               	movwf	4033,c	;volatile
 10332                           
 10333                           ; BSR set to: 15
 10334                           ;main.c: 80: RTCCFGbits.RTCEN=1;
 10335  00E0A0  010F               	movlb	15	; () banked
 10336  00E0A2  8F3F               	bsf	63,7,b	;volatile
 10337                           
 10338                           ; BSR set to: 15
 10339                           ;main.c: 81: RTCCFGbits.RTCWREN=1;
 10340  00E0A4  010F               	movlb	15	; () banked
 10341  00E0A6  8B3F               	bsf	63,5,b	;volatile
 10342                           
 10343                           ; BSR set to: 15
 10344                           ;main.c: 82: T1CONbits.T1OSCEN=1;
 10345  00E0A8  86CD               	bsf	4045,3,c	;volatile
 10346                           
 10347                           ; BSR set to: 15
 10348                           ;main.c: 83: Write_RTC();
 10349  00E0AA  EC36  F07B         	call	_Write_RTC	;wreg free
 10350                           
 10351                           ;main.c: 84: lcd_init();
 10352  00E0AE  EC07  F074         	call	_lcd_init	;wreg free
 10353                           
 10354                           ;main.c: 85: lcd_comand(0b00001100);
 10355  00E0B2  0E0C               	movlw	12
 10356  00E0B4  ECD9  F06D         	call	_lcd_comand
 10357                           
 10358                           ;main.c: 86: LATBbits.LATB1 = 0;;
 10359  00E0B8  928A               	bcf	3978,1,c	;volatile
 10360                           
 10361                           ;main.c: 87: LATBbits.LATB0 = 0;;
 10362  00E0BA  908A               	bcf	3978,0,c	;volatile
 10363  00E0BC  0012               	return		;funcret
 10364  00E0BE                     __end_of_Setup:
 10365                           	opt stack 0
 10366                           tosu	equ	0xFFF
 10367                           tosh	equ	0xFFE
 10368                           tosl	equ	0xFFD
 10369                           pclath	equ	0xFFA
 10370                           tblptru	equ	0xFF8
 10371                           tblptrh	equ	0xFF7
 10372                           tblptrl	equ	0xFF6
 10373                           tablat	equ	0xFF5
 10374                           prodh	equ	0xFF4
 10375                           prodl	equ	0xFF3
 10376                           indf0	equ	0xFEF
 10377                           postinc0	equ	0xFEE
 10378                           fsr0h	equ	0xFEA
 10379                           fsr0l	equ	0xFE9
 10380                           wreg	equ	0xFE8
 10381                           indf1	equ	0xFE7
 10382                           postinc1	equ	0xFE6
 10383                           postdec1	equ	0xFE5
 10384                           fsr1h	equ	0xFE2
 10385                           fsr1l	equ	0xFE1
 10386                           indf2	equ	0xFDF
 10387                           postinc2	equ	0xFDE
 10388                           postdec2	equ	0xFDD
 10389                           plusw2	equ	0xFDB
 10390                           fsr2h	equ	0xFDA
 10391                           fsr2l	equ	0xFD9
 10392                           status	equ	0xFD8
 10393                           
 10394 ;; *************** function _lcd_init *****************
 10395 ;; Defined at:
 10396 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;		None
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;  i               1    4[COMRAM] unsigned char 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;		None               void
 10403 ;; Registers used:
 10404 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10414 ;;Total ram usage:        1 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    2
 10417 ;; This function calls:
 10418 ;;		_Delay1KTCYx
 10419 ;;		_lcd_send_byte
 10420 ;;		_lcd_send_nibble
 10421 ;; This function is called by:
 10422 ;;		_Setup
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text71
 10427  00E80E                     __ptext71:
 10428                           	opt stack 0
 10429  00E80E                     _lcd_init:
 10430                           	opt stack 27
 10431                           
 10432                           ;unmc_lcd_216.c: 120: int8 i;
 10433                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
 10434                           
 10435                           ;incstack = 0
 10436  00E80E  9693               	bcf	3987,3,c	;volatile
 10437                           
 10438                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
 10439  00E810  9493               	bcf	3987,2,c	;volatile
 10440                           
 10441                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
 10442  00E812  968A               	bcf	3978,3,c	;volatile
 10443                           
 10444                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
 10445  00E814  948A               	bcf	3978,2,c	;volatile
 10446                           
 10447                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
 10448  00E816  9893               	bcf	3987,4,c	;volatile
 10449                           
 10450                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
 10451  00E818  9A93               	bcf	3987,5,c	;volatile
 10452                           
 10453                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
 10454  00E81A  9C93               	bcf	3987,6,c	;volatile
 10455                           
 10456                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
 10457  00E81C  9E93               	bcf	3987,7,c	;volatile
 10458                           
 10459                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
 10460  00E81E  0E0A               	movlw	10
 10461  00E820  EC1A  F06E         	call	_Delay1KTCYx
 10462                           
 10463                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
 10464  00E824  0E0A               	movlw	10
 10465  00E826  EC1A  F06E         	call	_Delay1KTCYx
 10466                           
 10467                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
 10468  00E82A  0E0A               	movlw	10
 10469  00E82C  EC1A  F06E         	call	_Delay1KTCYx
 10470                           
 10471                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
 10472  00E830  0E00               	movlw	0
 10473  00E832  6E05               	movwf	lcd_init@i,c
 10474  00E834                     l3966:
 10475  00E834  0E02               	movlw	2
 10476  00E836  6405               	cpfsgt	lcd_init@i,c
 10477  00E838  D001               	goto	l3970
 10478  00E83A  D008               	goto	l3976
 10479  00E83C                     l3970:
 10480                           
 10481                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
 10482  00E83C  0E03               	movlw	3
 10483  00E83E  ECDC  F072         	call	_lcd_send_nibble
 10484                           
 10485                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
 10486  00E842  0E0A               	movlw	10
 10487  00E844  EC1A  F06E         	call	_Delay1KTCYx
 10488  00E848  2A05               	incf	lcd_init@i,f,c
 10489  00E84A  D7F4               	goto	l3966
 10490  00E84C                     l3976:
 10491                           
 10492                           ;unmc_lcd_216.c: 146: }
 10493                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
 10494  00E84C  0E02               	movlw	2
 10495  00E84E  ECDC  F072         	call	_lcd_send_nibble
 10496                           
 10497                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
 10498  00E852  0E00               	movlw	0
 10499  00E854  6E05               	movwf	lcd_init@i,c
 10500  00E856  0E03               	movlw	3
 10501  00E858  6405               	cpfsgt	lcd_init@i,c
 10502  00E85A  D002               	goto	l3984
 10503  00E85C  0012               	return	
 10504  00E85E  0012               	return	
 10505  00E860                     l3984:
 10506                           
 10507                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10508  00E860  5005               	movf	lcd_init@i,w,c
 10509  00E862  0D01               	mullw	1
 10510  00E864  0E95               	movlw	low _LCD_INIT_STRING
 10511  00E866  24F3               	addwf	prodl,w,c
 10512  00E868  6EF6               	movwf	tblptrl,c
 10513  00E86A  0EFE               	movlw	high _LCD_INIT_STRING
 10514  00E86C  20F4               	addwfc	prodh,w,c
 10515  00E86E  6EF7               	movwf	tblptrh,c
 10516  00E870                     	if	0	;There are less than 3 active tblptr bytes
 10517  00E870                     	endif
 10518  00E870  0008               	tblrd		*
 10519  00E872  CFF5 F003          	movff	tablat,lcd_send_byte@n
 10520  00E876  0E00               	movlw	0
 10521  00E878  ECFF  F06F         	call	_lcd_send_byte
 10522                           
 10523                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
 10524  00E87C  0E0A               	movlw	10
 10525  00E87E  EC1A  F06E         	call	_Delay1KTCYx
 10526  00E882  2A05               	incf	lcd_init@i,f,c
 10527  00E884  0E03               	movlw	3
 10528  00E886  6405               	cpfsgt	lcd_init@i,c
 10529  00E888  D7EB               	goto	l3984
 10530  00E88A  0012               	return	
 10531  00E88C  0012               	return		;funcret
 10532  00E88E                     __end_of_lcd_init:
 10533                           	opt stack 0
 10534                           tosu	equ	0xFFF
 10535                           tosh	equ	0xFFE
 10536                           tosl	equ	0xFFD
 10537                           pclath	equ	0xFFA
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           indf0	equ	0xFEF
 10545                           postinc0	equ	0xFEE
 10546                           fsr0h	equ	0xFEA
 10547                           fsr0l	equ	0xFE9
 10548                           wreg	equ	0xFE8
 10549                           indf1	equ	0xFE7
 10550                           postinc1	equ	0xFE6
 10551                           postdec1	equ	0xFE5
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           plusw2	equ	0xFDB
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _Delay1KTCYx *****************
 10563 ;; Defined at:
 10564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  unit            1    wreg     unsigned char 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;  unit            1    0[COMRAM] unsigned char 
 10569 ;; Return value:  Size  Location     Type
 10570 ;;		None               void
 10571 ;; Registers used:
 10572 ;;		wreg
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10581 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10582 ;;Total ram usage:        1 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_lcd_init
 10588 ;;		_DelayPORXLCD
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           	psect	text72
 10593  00DC34                     __ptext72:
 10594                           	opt stack 0
 10595  00DC34                     _Delay1KTCYx:
 10596                           	opt stack 28
 10597                           
 10598                           ;incstack = 0
 10599                           ;Delay1KTCYx@unit stored from wreg
 10600  00DC34  6E01               	movwf	Delay1KTCYx@unit,c
 10601  00DC36  0EFA               	movlw	250
 10602  00DC38                     u3897:
 10603  00DC38  F000               	nop	
 10604  00DC3A  2EE8               	decfsz	wreg,f,c
 10605  00DC3C  D7FD               	goto	u3897
 10606  00DC3E  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10607  00DC40  D7FA               	goto	l3904
 10608  00DC42  0012               	return	
 10609  00DC44  0012               	return		;funcret
 10610  00DC46                     __end_of_Delay1KTCYx:
 10611                           	opt stack 0
 10612                           tosu	equ	0xFFF
 10613                           tosh	equ	0xFFE
 10614                           tosl	equ	0xFFD
 10615                           pclath	equ	0xFFA
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           indf0	equ	0xFEF
 10623                           postinc0	equ	0xFEE
 10624                           fsr0h	equ	0xFEA
 10625                           fsr0l	equ	0xFE9
 10626                           wreg	equ	0xFE8
 10627                           indf1	equ	0xFE7
 10628                           postinc1	equ	0xFE6
 10629                           postdec1	equ	0xFE5
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           plusw2	equ	0xFDB
 10636                           fsr2h	equ	0xFDA
 10637                           fsr2l	equ	0xFD9
 10638                           status	equ	0xFD8
 10639                           
 10640 ;; *************** function _lcd_comand *****************
 10641 ;; Defined at:
 10642 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  d               1    wreg     unsigned char 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  d               1    4[COMRAM] unsigned char 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;		None               void
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10660 ;;Total ram usage:        1 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    2
 10663 ;; This function calls:
 10664 ;;		_lcd_send_byte
 10665 ;; This function is called by:
 10666 ;;		_caratula
 10667 ;;		_Setup
 10668 ;;		_menu_ingresar_password
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text73
 10673  00DBB2                     __ptext73:
 10674                           	opt stack 0
 10675  00DBB2                     _lcd_comand:
 10676                           	opt stack 25
 10677                           
 10678                           ;incstack = 0
 10679                           ;lcd_comand@d stored from wreg
 10680  00DBB2  6E05               	movwf	lcd_comand@d,c
 10681                           
 10682                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
 10683  00DBB4  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
 10684  00DBB8  0E00               	movlw	0
 10685  00DBBA  ECFF  F06F         	call	_lcd_send_byte
 10686  00DBBE  0012               	return		;funcret
 10687  00DBC0                     __end_of_lcd_comand:
 10688                           	opt stack 0
 10689                           tosu	equ	0xFFF
 10690                           tosh	equ	0xFFE
 10691                           tosl	equ	0xFFD
 10692                           pclath	equ	0xFFA
 10693                           tblptru	equ	0xFF8
 10694                           tblptrh	equ	0xFF7
 10695                           tblptrl	equ	0xFF6
 10696                           tablat	equ	0xFF5
 10697                           prodh	equ	0xFF4
 10698                           prodl	equ	0xFF3
 10699                           indf0	equ	0xFEF
 10700                           postinc0	equ	0xFEE
 10701                           fsr0h	equ	0xFEA
 10702                           fsr0l	equ	0xFE9
 10703                           wreg	equ	0xFE8
 10704                           indf1	equ	0xFE7
 10705                           postinc1	equ	0xFE6
 10706                           postdec1	equ	0xFE5
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _lcd_send_byte *****************
 10718 ;; Defined at:
 10719 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  address         1    wreg     unsigned char 
 10722 ;;  n               1    2[COMRAM] unsigned char 
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  address         1    3[COMRAM] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;		None               void
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10734 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10738 ;;Total ram usage:        2 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    1
 10741 ;; This function calls:
 10742 ;;		_Delay100TCYx
 10743 ;;		_lcd_send_nibble
 10744 ;; This function is called by:
 10745 ;;		_lcd_init
 10746 ;;		_lcd_gotoxy
 10747 ;;		_lcd_putc
 10748 ;;		_lcd_comand
 10749 ;;		_lcd_setcursor_vb
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text74
 10754  00DFFE                     __ptext74:
 10755                           	opt stack 0
 10756  00DFFE                     _lcd_send_byte:
 10757                           	opt stack 25
 10758                           
 10759                           ;incstack = 0
 10760                           ;lcd_send_byte@address stored from wreg
 10761  00DFFE  6E04               	movwf	lcd_send_byte@address,c
 10762                           
 10763                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10764  00E000  968A               	bcf	3978,3,c	;volatile
 10765                           
 10766                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10767  00E002  0E02               	movlw	2
 10768  00E004  EC11  F06E         	call	_Delay100TCYx
 10769                           
 10770                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10771  00E008  9893               	bcf	3987,4,c	;volatile
 10772                           
 10773                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10774  00E00A  9A93               	bcf	3987,5,c	;volatile
 10775                           
 10776                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10777  00E00C  9C93               	bcf	3987,6,c	;volatile
 10778                           
 10779                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10780  00E00E  9E93               	bcf	3987,7,c	;volatile
 10781                           
 10782                           ;unmc_lcd_216.c: 101: if(address)
 10783  00E010  5004               	movf	lcd_send_byte@address,w,c
 10784  00E012  B4D8               	btfsc	status,2,c
 10785  00E014  D002               	goto	l351
 10786                           
 10787                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10788  00E016  868A               	bsf	3978,3,c	;volatile
 10789  00E018  D001               	goto	l352
 10790  00E01A                     l351:
 10791                           
 10792                           ;unmc_lcd_216.c: 103: else
 10793                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10794  00E01A  968A               	bcf	3978,3,c	;volatile
 10795  00E01C                     l352:
 10796                           
 10797                           ;unmc_lcd_216.c: 106: __nop();
 10798  00E01C  F000               	nop	
 10799                           
 10800                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10801  00E01E  3803               	swapf	lcd_send_byte@n,w,c
 10802  00E020  0B0F               	andlw	15
 10803  00E022  ECDC  F072         	call	_lcd_send_nibble
 10804                           
 10805                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10806  00E026  5003               	movf	lcd_send_byte@n,w,c
 10807  00E028  0B0F               	andlw	15
 10808  00E02A  ECDC  F072         	call	_lcd_send_nibble
 10809  00E02E  0012               	return		;funcret
 10810  00E030                     __end_of_lcd_send_byte:
 10811                           	opt stack 0
 10812                           tosu	equ	0xFFF
 10813                           tosh	equ	0xFFE
 10814                           tosl	equ	0xFFD
 10815                           pclath	equ	0xFFA
 10816                           tblptru	equ	0xFF8
 10817                           tblptrh	equ	0xFF7
 10818                           tblptrl	equ	0xFF6
 10819                           tablat	equ	0xFF5
 10820                           prodh	equ	0xFF4
 10821                           prodl	equ	0xFF3
 10822                           indf0	equ	0xFEF
 10823                           postinc0	equ	0xFEE
 10824                           fsr0h	equ	0xFEA
 10825                           fsr0l	equ	0xFE9
 10826                           wreg	equ	0xFE8
 10827                           indf1	equ	0xFE7
 10828                           postinc1	equ	0xFE6
 10829                           postdec1	equ	0xFE5
 10830                           fsr1h	equ	0xFE2
 10831                           fsr1l	equ	0xFE1
 10832                           indf2	equ	0xFDF
 10833                           postinc2	equ	0xFDE
 10834                           postdec2	equ	0xFDD
 10835                           plusw2	equ	0xFDB
 10836                           fsr2h	equ	0xFDA
 10837                           fsr2l	equ	0xFD9
 10838                           status	equ	0xFD8
 10839                           
 10840 ;; *************** function _lcd_send_nibble *****************
 10841 ;; Defined at:
 10842 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  nibble          1    wreg     unsigned char 
 10845 ;; Auto vars:     Size  Location     Type
 10846 ;;  nibble          1    1[COMRAM] unsigned char 
 10847 ;; Return value:  Size  Location     Type
 10848 ;;		None               void
 10849 ;; Registers used:
 10850 ;;		wreg, status,2, status,0
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10860 ;;Total ram usage:        2 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; This function calls:
 10863 ;;		Nothing
 10864 ;; This function is called by:
 10865 ;;		_lcd_send_byte
 10866 ;;		_lcd_init
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           	psect	text75
 10871  00E5B8                     __ptext75:
 10872                           	opt stack 0
 10873  00E5B8                     _lcd_send_nibble:
 10874                           	opt stack 25
 10875                           
 10876                           ;incstack = 0
 10877                           ;lcd_send_nibble@nibble stored from wreg
 10878  00E5B8  6E02               	movwf	lcd_send_nibble@nibble,c
 10879                           
 10880                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10881  00E5BA  A002               	btfss	lcd_send_nibble@nibble,0,c
 10882  00E5BC  D003               	goto	u1930
 10883  00E5BE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10884  00E5C0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10885  00E5C2  D001               	goto	u1948
 10886  00E5C4                     u1930:
 10887  00E5C4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10888  00E5C6                     u1948:
 10889  00E5C6  3A01               	swapf	??_lcd_send_nibble,f,c
 10890  00E5C8  508A               	movf	3978,w,c	;volatile
 10891  00E5CA  1801               	xorwf	??_lcd_send_nibble,w,c
 10892  00E5CC  0BEF               	andlw	-17
 10893  00E5CE  1801               	xorwf	??_lcd_send_nibble,w,c
 10894  00E5D0  6E8A               	movwf	3978,c	;volatile
 10895                           
 10896                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10897  00E5D2  A202               	btfss	lcd_send_nibble@nibble,1,c
 10898  00E5D4  D003               	goto	u1950
 10899  00E5D6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10900  00E5D8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10901  00E5DA  D001               	goto	u1968
 10902  00E5DC                     u1950:
 10903  00E5DC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10904  00E5DE                     u1968:
 10905  00E5DE  3A01               	swapf	??_lcd_send_nibble,f,c
 10906  00E5E0  4601               	rlncf	??_lcd_send_nibble,f,c
 10907  00E5E2  508A               	movf	3978,w,c	;volatile
 10908  00E5E4  1801               	xorwf	??_lcd_send_nibble,w,c
 10909  00E5E6  0BDF               	andlw	-33
 10910  00E5E8  1801               	xorwf	??_lcd_send_nibble,w,c
 10911  00E5EA  6E8A               	movwf	3978,c	;volatile
 10912                           
 10913                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10914  00E5EC  A402               	btfss	lcd_send_nibble@nibble,2,c
 10915  00E5EE  D003               	goto	u1970
 10916  00E5F0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10917  00E5F2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10918  00E5F4  D001               	goto	u1988
 10919  00E5F6                     u1970:
 10920  00E5F6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10921  00E5F8                     u1988:
 10922  00E5F8  3A01               	swapf	??_lcd_send_nibble,f,c
 10923  00E5FA  4601               	rlncf	??_lcd_send_nibble,f,c
 10924  00E5FC  4601               	rlncf	??_lcd_send_nibble,f,c
 10925  00E5FE  508A               	movf	3978,w,c	;volatile
 10926  00E600  1801               	xorwf	??_lcd_send_nibble,w,c
 10927  00E602  0BBF               	andlw	-65
 10928  00E604  1801               	xorwf	??_lcd_send_nibble,w,c
 10929  00E606  6E8A               	movwf	3978,c	;volatile
 10930                           
 10931                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10932  00E608  A602               	btfss	lcd_send_nibble@nibble,3,c
 10933  00E60A  D003               	goto	u1990
 10934  00E60C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10935  00E60E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10936  00E610  D001               	goto	u2008
 10937  00E612                     u1990:
 10938  00E612  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10939  00E614                     u2008:
 10940  00E614  3201               	rrcf	??_lcd_send_nibble,f,c
 10941  00E616  3201               	rrcf	??_lcd_send_nibble,f,c
 10942  00E618  508A               	movf	3978,w,c	;volatile
 10943  00E61A  1801               	xorwf	??_lcd_send_nibble,w,c
 10944  00E61C  0B7F               	andlw	-129
 10945  00E61E  1801               	xorwf	??_lcd_send_nibble,w,c
 10946  00E620  6E8A               	movwf	3978,c	;volatile
 10947                           
 10948                           ;unmc_lcd_216.c: 32: __nop();
 10949  00E622  F000               	nop	
 10950                           
 10951                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10952  00E624  848A               	bsf	3978,2,c	;volatile
 10953                           
 10954                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10955  00E626  F000               	nop	
 10956  00E628  F000               	nop	
 10957                           
 10958                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10959  00E62A  948A               	bcf	3978,2,c	;volatile
 10960  00E62C  0012               	return		;funcret
 10961  00E62E                     __end_of_lcd_send_nibble:
 10962                           	opt stack 0
 10963                           tosu	equ	0xFFF
 10964                           tosh	equ	0xFFE
 10965                           tosl	equ	0xFFD
 10966                           pclath	equ	0xFFA
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           indf0	equ	0xFEF
 10974                           postinc0	equ	0xFEE
 10975                           fsr0h	equ	0xFEA
 10976                           fsr0l	equ	0xFE9
 10977                           wreg	equ	0xFE8
 10978                           indf1	equ	0xFE7
 10979                           postinc1	equ	0xFE6
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function _Delay100TCYx *****************
 10992 ;; Defined at:
 10993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  unit            1    wreg     unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  unit            1    0[COMRAM] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;		None               void
 11000 ;; Registers used:
 11001 ;;		wreg
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11008 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11010 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11011 ;;Total ram usage:        1 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; This function calls:
 11014 ;;		Nothing
 11015 ;; This function is called by:
 11016 ;;		_lcd_send_byte
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text76
 11021  00DC22                     __ptext76:
 11022                           	opt stack 0
 11023  00DC22                     _Delay100TCYx:
 11024                           	opt stack 25
 11025                           
 11026                           ;incstack = 0
 11027                           ;Delay100TCYx@unit stored from wreg
 11028  00DC22  6E01               	movwf	Delay100TCYx@unit,c
 11029  00DC24  0E21               	movlw	33
 11030  00DC26                     u3907:
 11031  00DC26  2EE8               	decfsz	wreg,f,c
 11032  00DC28  D7FE               	goto	u3907
 11033  00DC2A  F000               	nop	
 11034  00DC2C  2E01               	decfsz	Delay100TCYx@unit,f,c
 11035  00DC2E  D7FA               	goto	l3098
 11036  00DC30  0012               	return	
 11037  00DC32  0012               	return		;funcret
 11038  00DC34                     __end_of_Delay100TCYx:
 11039                           	opt stack 0
 11040                           tosu	equ	0xFFF
 11041                           tosh	equ	0xFFE
 11042                           tosl	equ	0xFFD
 11043                           pclath	equ	0xFFA
 11044                           tblptru	equ	0xFF8
 11045                           tblptrh	equ	0xFF7
 11046                           tblptrl	equ	0xFF6
 11047                           tablat	equ	0xFF5
 11048                           prodh	equ	0xFF4
 11049                           prodl	equ	0xFF3
 11050                           indf0	equ	0xFEF
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postinc1	equ	0xFE6
 11057                           postdec1	equ	0xFE5
 11058                           fsr1h	equ	0xFE2
 11059                           fsr1l	equ	0xFE1
 11060                           indf2	equ	0xFDF
 11061                           postinc2	equ	0xFDE
 11062                           postdec2	equ	0xFDD
 11063                           plusw2	equ	0xFDB
 11064                           fsr2h	equ	0xFDA
 11065                           fsr2l	equ	0xFD9
 11066                           status	equ	0xFD8
 11067                           
 11068 ;; *************** function _Write_RTC *****************
 11069 ;; Defined at:
 11070 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;		None               void
 11077 ;; Registers used:
 11078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    2
 11091 ;; This function calls:
 11092 ;;		_RtccWrOn
 11093 ;;		_RtccWriteDate
 11094 ;;		_RtccWriteTime
 11095 ;;		___awdiv
 11096 ;; This function is called by:
 11097 ;;		_Setup
 11098 ;;		_actualiza_elemento
 11099 ;;		_actualizar_hora
 11100 ;;		_actualizar_minutos
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           	psect	text77
 11105  00F66C                     __ptext77:
 11106                           	opt stack 0
 11107  00F66C                     _Write_RTC:
 11108                           	opt stack 23
 11109                           
 11110                           ;unmc_rtcc_02.c: 37: RtccWrOn();
 11111                           
 11112                           ;incstack = 0
 11113  00F66C  EC08  F06E         	call	_RtccWrOn	;wreg free
 11114                           
 11115                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
 11116  00F670  80A3               	bsf	4003,0,c	;volatile
 11117                           
 11118                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
 11119  00F672  C0A0  F001         	movff	_segundo,___awdiv@dividend
 11120  00F676  C0A1  F002         	movff	_segundo+1,___awdiv@dividend+1
 11121  00F67A  0E00               	movlw	0
 11122  00F67C  6E04               	movwf	___awdiv@divisor+1,c
 11123  00F67E  0E0A               	movlw	10
 11124  00F680  6E03               	movwf	___awdiv@divisor,c
 11125  00F682  EC56  F075         	call	___awdiv	;wreg free
 11126  00F686  5001               	movf	?___awdiv,w,c
 11127  00F688  6E5E               	movwf	_segundo_d,c
 11128                           
 11129                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
 11130  00F68A  505E               	movf	_segundo_d,w,c
 11131  00F68C  0D0A               	mullw	10
 11132  00F68E  50F3               	movf	prodl,w,c
 11133  00F690  0800               	sublw	0
 11134  00F692  0100               	movlb	0	; () banked
 11135  00F694  25A0               	addwf	_segundo& (0+255),w,b
 11136  00F696  0100               	movlb	0	; () banked
 11137  00F698  6FF6               	movwf	_segundo_u& (0+255),b
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
 11141  00F69A  505E               	movf	_segundo_d,w,c
 11142  00F69C  0D10               	mullw	16
 11143  00F69E  50F3               	movf	prodl,w,c
 11144  00F6A0  0100               	movlb	0	; () banked
 11145  00F6A2  25F6               	addwf	_segundo_u& (0+255),w,b
 11146  00F6A4  6E4F               	movwf	_RtccTime+1,c
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
 11150  00F6A6  C0FD  F001         	movff	_minuto,___awdiv@dividend
 11151  00F6AA  C0FE  F002         	movff	_minuto+1,___awdiv@dividend+1
 11152  00F6AE  0E00               	movlw	0
 11153  00F6B0  6E04               	movwf	___awdiv@divisor+1,c
 11154  00F6B2  0E0A               	movlw	10
 11155  00F6B4  6E03               	movwf	___awdiv@divisor,c
 11156  00F6B6  EC56  F075         	call	___awdiv	;wreg free
 11157  00F6BA  5001               	movf	?___awdiv,w,c
 11158  00F6BC  0100               	movlb	0	; () banked
 11159  00F6BE  6FF4               	movwf	_minuto_d& (0+255),b
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
 11163  00F6C0  0100               	movlb	0	; () banked
 11164  00F6C2  51F4               	movf	_minuto_d& (0+255),w,b
 11165  00F6C4  0D0A               	mullw	10
 11166  00F6C6  50F3               	movf	prodl,w,c
 11167  00F6C8  0800               	sublw	0
 11168  00F6CA  0100               	movlb	0	; () banked
 11169  00F6CC  25FD               	addwf	_minuto& (0+255),w,b
 11170  00F6CE  0100               	movlb	0	; () banked
 11171  00F6D0  6FF5               	movwf	_minuto_u& (0+255),b
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
 11175  00F6D2  0100               	movlb	0	; () banked
 11176  00F6D4  51F4               	movf	_minuto_d& (0+255),w,b
 11177  00F6D6  0D10               	mullw	16
 11178  00F6D8  50F3               	movf	prodl,w,c
 11179  00F6DA  0100               	movlb	0	; () banked
 11180  00F6DC  25F5               	addwf	_minuto_u& (0+255),w,b
 11181  00F6DE  6E50               	movwf	_RtccTime+2,c
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
 11185  00F6E0  C0FB  F001         	movff	_hora,___awdiv@dividend
 11186  00F6E4  C0FC  F002         	movff	_hora+1,___awdiv@dividend+1
 11187  00F6E8  0E00               	movlw	0
 11188  00F6EA  6E04               	movwf	___awdiv@divisor+1,c
 11189  00F6EC  0E0A               	movlw	10
 11190  00F6EE  6E03               	movwf	___awdiv@divisor,c
 11191  00F6F0  EC56  F075         	call	___awdiv	;wreg free
 11192  00F6F4  5001               	movf	?___awdiv,w,c
 11193  00F6F6  0100               	movlb	0	; () banked
 11194  00F6F8  6FF0               	movwf	_hora_d& (0+255),b
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
 11198  00F6FA  0100               	movlb	0	; () banked
 11199  00F6FC  51F0               	movf	_hora_d& (0+255),w,b
 11200  00F6FE  0D0A               	mullw	10
 11201  00F700  50F3               	movf	prodl,w,c
 11202  00F702  0800               	sublw	0
 11203  00F704  0100               	movlb	0	; () banked
 11204  00F706  25FB               	addwf	_hora& (0+255),w,b
 11205  00F708  0100               	movlb	0	; () banked
 11206  00F70A  6FF1               	movwf	_hora_u& (0+255),b
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
 11210  00F70C  0100               	movlb	0	; () banked
 11211  00F70E  51F0               	movf	_hora_d& (0+255),w,b
 11212  00F710  0D10               	mullw	16
 11213  00F712  50F3               	movf	prodl,w,c
 11214  00F714  0100               	movlb	0	; () banked
 11215  00F716  25F1               	addwf	_hora_u& (0+255),w,b
 11216  00F718  6E51               	movwf	_RtccTime+3,c
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
 11220  00F71A  C05A  F001         	movff	_anio,___awdiv@dividend
 11221  00F71E  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
 11222  00F722  0E00               	movlw	0
 11223  00F724  6E04               	movwf	___awdiv@divisor+1,c
 11224  00F726  0E0A               	movlw	10
 11225  00F728  6E03               	movwf	___awdiv@divisor,c
 11226  00F72A  EC56  F075         	call	___awdiv	;wreg free
 11227  00F72E  5001               	movf	?___awdiv,w,c
 11228  00F730  0100               	movlb	0	; () banked
 11229  00F732  6FEB               	movwf	_anio_d& (0+255),b
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
 11233  00F734  0100               	movlb	0	; () banked
 11234  00F736  51EB               	movf	_anio_d& (0+255),w,b
 11235  00F738  0D0A               	mullw	10
 11236  00F73A  50F3               	movf	prodl,w,c
 11237  00F73C  0800               	sublw	0
 11238  00F73E  245A               	addwf	_anio,w,c
 11239  00F740  0100               	movlb	0	; () banked
 11240  00F742  6FEC               	movwf	_anio_u& (0+255),b
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
 11244  00F744  0100               	movlb	0	; () banked
 11245  00F746  51EB               	movf	_anio_d& (0+255),w,b
 11246  00F748  0D10               	mullw	16
 11247  00F74A  50F3               	movf	prodl,w,c
 11248  00F74C  0100               	movlb	0	; () banked
 11249  00F74E  25EC               	addwf	_anio_u& (0+255),w,b
 11250  00F750  6E4D               	movwf	_RtccDate+3,c
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
 11254  00F752  C05C  F001         	movff	_mes,___awdiv@dividend
 11255  00F756  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
 11256  00F75A  0E00               	movlw	0
 11257  00F75C  6E04               	movwf	___awdiv@divisor+1,c
 11258  00F75E  0E0A               	movlw	10
 11259  00F760  6E03               	movwf	___awdiv@divisor,c
 11260  00F762  EC56  F075         	call	___awdiv	;wreg free
 11261  00F766  5001               	movf	?___awdiv,w,c
 11262  00F768  0100               	movlb	0	; () banked
 11263  00F76A  6FF2               	movwf	_mes_d& (0+255),b
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
 11267  00F76C  0100               	movlb	0	; () banked
 11268  00F76E  51F2               	movf	_mes_d& (0+255),w,b
 11269  00F770  0D0A               	mullw	10
 11270  00F772  50F3               	movf	prodl,w,c
 11271  00F774  0800               	sublw	0
 11272  00F776  245C               	addwf	_mes,w,c
 11273  00F778  0100               	movlb	0	; () banked
 11274  00F77A  6FF3               	movwf	_mes_u& (0+255),b
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
 11278  00F77C  0100               	movlb	0	; () banked
 11279  00F77E  51F2               	movf	_mes_d& (0+255),w,b
 11280  00F780  0D10               	mullw	16
 11281  00F782  50F3               	movf	prodl,w,c
 11282  00F784  0100               	movlb	0	; () banked
 11283  00F786  25F3               	addwf	_mes_u& (0+255),w,b
 11284  00F788  6E4C               	movwf	_RtccDate+2,c
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
 11288  00F78A  C0F9  F001         	movff	_dia,___awdiv@dividend
 11289  00F78E  C0FA  F002         	movff	_dia+1,___awdiv@dividend+1
 11290  00F792  0E00               	movlw	0
 11291  00F794  6E04               	movwf	___awdiv@divisor+1,c
 11292  00F796  0E0A               	movlw	10
 11293  00F798  6E03               	movwf	___awdiv@divisor,c
 11294  00F79A  EC56  F075         	call	___awdiv	;wreg free
 11295  00F79E  5001               	movf	?___awdiv,w,c
 11296  00F7A0  0100               	movlb	0	; () banked
 11297  00F7A2  6FEE               	movwf	_fecha_d& (0+255),b
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
 11301  00F7A4  0100               	movlb	0	; () banked
 11302  00F7A6  51EE               	movf	_fecha_d& (0+255),w,b
 11303  00F7A8  0D0A               	mullw	10
 11304  00F7AA  50F3               	movf	prodl,w,c
 11305  00F7AC  0800               	sublw	0
 11306  00F7AE  0100               	movlb	0	; () banked
 11307  00F7B0  25F9               	addwf	_dia& (0+255),w,b
 11308  00F7B2  0100               	movlb	0	; () banked
 11309  00F7B4  6FEF               	movwf	_fecha_u& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
 11313  00F7B6  0100               	movlb	0	; () banked
 11314  00F7B8  51EE               	movf	_fecha_d& (0+255),w,b
 11315  00F7BA  0D10               	mullw	16
 11316  00F7BC  50F3               	movf	prodl,w,c
 11317  00F7BE  0100               	movlb	0	; () banked
 11318  00F7C0  25EF               	addwf	_fecha_u& (0+255),w,b
 11319  00F7C2  6E4B               	movwf	_RtccDate+1,c
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
 11323  00F7C4  C0F7  F0ED         	movff	_diasem,_dia_semana
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
 11327  00F7C8  C0F7  F04A         	movff	_diasem,_RtccDate
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
 11331  00F7CC  0E4E               	movlw	low _RtccTime
 11332  00F7CE  6E01               	movwf	RtccWriteTime@pTm,c
 11333  00F7D0  0E00               	movlw	high _RtccTime
 11334  00F7D2  6E02               	movwf	RtccWriteTime@pTm+1,c
 11335  00F7D4  0E01               	movlw	1
 11336  00F7D6  6E03               	movwf	RtccWriteTime@di,c
 11337  00F7D8  ECC5  F078         	call	_RtccWriteTime	;wreg free
 11338                           
 11339                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
 11340  00F7DC  0E4A               	movlw	low _RtccDate
 11341  00F7DE  6E01               	movwf	RtccWriteDate@pDt,c
 11342  00F7E0  0E00               	movlw	high _RtccDate
 11343  00F7E2  6E02               	movwf	RtccWriteDate@pDt+1,c
 11344  00F7E4  0E01               	movlw	1
 11345  00F7E6  6E03               	movwf	RtccWriteDate@di,c
 11346  00F7E8  ECDC  F079         	call	_RtccWriteDate	;wreg free
 11347                           
 11348                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
 11349  00F7EC  010F               	movlb	15	; () banked
 11350  00F7EE  8F3F               	bsf	63,7,b	;volatile
 11351                           
 11352                           ; BSR set to: 15
 11353  00F7F0  0012               	return		;funcret
 11354  00F7F2                     __end_of_Write_RTC:
 11355                           	opt stack 0
 11356                           tosu	equ	0xFFF
 11357                           tosh	equ	0xFFE
 11358                           tosl	equ	0xFFD
 11359                           pclath	equ	0xFFA
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           indf0	equ	0xFEF
 11367                           postinc0	equ	0xFEE
 11368                           fsr0h	equ	0xFEA
 11369                           fsr0l	equ	0xFE9
 11370                           wreg	equ	0xFE8
 11371                           indf1	equ	0xFE7
 11372                           postinc1	equ	0xFE6
 11373                           postdec1	equ	0xFE5
 11374                           fsr1h	equ	0xFE2
 11375                           fsr1l	equ	0xFE1
 11376                           indf2	equ	0xFDF
 11377                           postinc2	equ	0xFDE
 11378                           postdec2	equ	0xFDD
 11379                           plusw2	equ	0xFDB
 11380                           fsr2h	equ	0xFDA
 11381                           fsr2l	equ	0xFD9
 11382                           status	equ	0xFD8
 11383                           
 11384 ;; *************** function ___awdiv *****************
 11385 ;; Defined at:
 11386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11387 ;; Parameters:    Size  Location     Type
 11388 ;;  dividend        2    0[COMRAM] int 
 11389 ;;  divisor         2    2[COMRAM] int 
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;  quotient        2    6[COMRAM] int 
 11392 ;;  sign            1    5[COMRAM] unsigned char 
 11393 ;;  counter         1    4[COMRAM] unsigned char 
 11394 ;; Return value:  Size  Location     Type
 11395 ;;                  2    0[COMRAM] int 
 11396 ;; Registers used:
 11397 ;;		wreg, status,2, status,0
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11404 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11406 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11407 ;;Total ram usage:        8 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_Write_RTC
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           	psect	text78
 11417  00EAAC                     __ptext78:
 11418                           	opt stack 0
 11419  00EAAC                     ___awdiv:
 11420                           	opt stack 24
 11421                           
 11422                           ; BSR set to: 15
 11423                           ;incstack = 0
 11424  00EAAC  0E00               	movlw	0
 11425  00EAAE  6E06               	movwf	___awdiv@sign,c
 11426  00EAB0  AE04               	btfss	___awdiv@divisor+1,7,c
 11427  00EAB2  D007               	goto	l3282
 11428  00EAB4  6C03               	negf	___awdiv@divisor,c
 11429  00EAB6  1E04               	comf	___awdiv@divisor+1,f,c
 11430  00EAB8  B0D8               	btfsc	status,0,c
 11431  00EABA  2A04               	incf	___awdiv@divisor+1,f,c
 11432  00EABC  0E01               	movlw	1
 11433  00EABE  6E06               	movwf	___awdiv@sign,c
 11434  00EAC0  D000               	goto	l3282
 11435  00EAC2                     l3282:
 11436  00EAC2  AE02               	btfss	___awdiv@dividend+1,7,c
 11437  00EAC4  D007               	goto	l3288
 11438  00EAC6  6C01               	negf	___awdiv@dividend,c
 11439  00EAC8  1E02               	comf	___awdiv@dividend+1,f,c
 11440  00EACA  B0D8               	btfsc	status,0,c
 11441  00EACC  2A02               	incf	___awdiv@dividend+1,f,c
 11442  00EACE  0E01               	movlw	1
 11443  00EAD0  1A06               	xorwf	___awdiv@sign,f,c
 11444  00EAD2  D000               	goto	l3288
 11445  00EAD4                     l3288:
 11446  00EAD4  0E00               	movlw	0
 11447  00EAD6  6E08               	movwf	___awdiv@quotient+1,c
 11448  00EAD8  0E00               	movlw	0
 11449  00EADA  6E07               	movwf	___awdiv@quotient,c
 11450  00EADC  5003               	movf	___awdiv@divisor,w,c
 11451  00EADE  1004               	iorwf	___awdiv@divisor+1,w,c
 11452  00EAE0  B4D8               	btfsc	status,2,c
 11453  00EAE2  D021               	goto	l3310
 11454  00EAE4  0E01               	movlw	1
 11455  00EAE6  6E05               	movwf	___awdiv@counter,c
 11456  00EAE8  D005               	goto	l3296
 11457  00EAEA                     l3294:
 11458  00EAEA  90D8               	bcf	status,0,c
 11459  00EAEC  3603               	rlcf	___awdiv@divisor,f,c
 11460  00EAEE  3604               	rlcf	___awdiv@divisor+1,f,c
 11461  00EAF0  2A05               	incf	___awdiv@counter,f,c
 11462  00EAF2  D000               	goto	l3296
 11463  00EAF4                     l3296:
 11464  00EAF4  BE04               	btfsc	___awdiv@divisor+1,7,c
 11465  00EAF6  D002               	goto	l3298
 11466  00EAF8  D7F8               	goto	l3294
 11467  00EAFA  D000               	goto	l3298
 11468  00EAFC                     l3298:
 11469  00EAFC  90D8               	bcf	status,0,c
 11470  00EAFE  3607               	rlcf	___awdiv@quotient,f,c
 11471  00EB00  3608               	rlcf	___awdiv@quotient+1,f,c
 11472  00EB02  5003               	movf	___awdiv@divisor,w,c
 11473  00EB04  5C01               	subwf	___awdiv@dividend,w,c
 11474  00EB06  5004               	movf	___awdiv@divisor+1,w,c
 11475  00EB08  5802               	subwfb	___awdiv@dividend+1,w,c
 11476  00EB0A  A0D8               	btfss	status,0,c
 11477  00EB0C  D006               	goto	l3306
 11478  00EB0E  5003               	movf	___awdiv@divisor,w,c
 11479  00EB10  5E01               	subwf	___awdiv@dividend,f,c
 11480  00EB12  5004               	movf	___awdiv@divisor+1,w,c
 11481  00EB14  5A02               	subwfb	___awdiv@dividend+1,f,c
 11482  00EB16  8007               	bsf	___awdiv@quotient,0,c
 11483  00EB18  D000               	goto	l3306
 11484  00EB1A                     l3306:
 11485  00EB1A  90D8               	bcf	status,0,c
 11486  00EB1C  3204               	rrcf	___awdiv@divisor+1,f,c
 11487  00EB1E  3203               	rrcf	___awdiv@divisor,f,c
 11488  00EB20  2E05               	decfsz	___awdiv@counter,f,c
 11489  00EB22  D7EC               	goto	l3298
 11490  00EB24  D000               	goto	l3310
 11491  00EB26                     l3310:
 11492  00EB26  5006               	movf	___awdiv@sign,w,c
 11493  00EB28  B4D8               	btfsc	status,2,c
 11494  00EB2A  D005               	goto	l3314
 11495  00EB2C  6C07               	negf	___awdiv@quotient,c
 11496  00EB2E  1E08               	comf	___awdiv@quotient+1,f,c
 11497  00EB30  B0D8               	btfsc	status,0,c
 11498  00EB32  2A08               	incf	___awdiv@quotient+1,f,c
 11499  00EB34  D000               	goto	l3314
 11500  00EB36                     l3314:
 11501  00EB36  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11502  00EB3A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11503  00EB3E  0012               	return	
 11504  00EB40  0012               	return		;funcret
 11505  00EB42                     __end_of___awdiv:
 11506                           	opt stack 0
 11507                           tosu	equ	0xFFF
 11508                           tosh	equ	0xFFE
 11509                           tosl	equ	0xFFD
 11510                           pclath	equ	0xFFA
 11511                           tblptru	equ	0xFF8
 11512                           tblptrh	equ	0xFF7
 11513                           tblptrl	equ	0xFF6
 11514                           tablat	equ	0xFF5
 11515                           prodh	equ	0xFF4
 11516                           prodl	equ	0xFF3
 11517                           indf0	equ	0xFEF
 11518                           postinc0	equ	0xFEE
 11519                           fsr0h	equ	0xFEA
 11520                           fsr0l	equ	0xFE9
 11521                           wreg	equ	0xFE8
 11522                           indf1	equ	0xFE7
 11523                           postinc1	equ	0xFE6
 11524                           postdec1	equ	0xFE5
 11525                           fsr1h	equ	0xFE2
 11526                           fsr1l	equ	0xFE1
 11527                           indf2	equ	0xFDF
 11528                           postinc2	equ	0xFDE
 11529                           postdec2	equ	0xFDD
 11530                           plusw2	equ	0xFDB
 11531                           fsr2h	equ	0xFDA
 11532                           fsr2l	equ	0xFD9
 11533                           status	equ	0xFD8
 11534                           
 11535 ;; *************** function _RtccWriteTime *****************
 11536 ;; Defined at:
 11537 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;  pTm             2    0[COMRAM] PTR const struct .
 11540 ;;		 -> RtccTime(4), 
 11541 ;;  di              1    2[COMRAM] enum E7121
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  tempHourWDay    2    9[COMRAM] struct .
 11544 ;;  tempMinSec      2    7[COMRAM] struct .
 11545 ;;  wasWrEn         1    6[COMRAM] enum E7121
 11546 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11547 ;;  wasOn           1    4[COMRAM] enum E7121
 11548 ;; Return value:  Size  Location     Type
 11549 ;;                  1    wreg      enum E7121
 11550 ;; Registers used:
 11551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11557 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11558 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11559 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11560 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11561 ;;Total ram usage:       11 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    1
 11564 ;; This function calls:
 11565 ;;		_RtccWrOn
 11566 ;; This function is called by:
 11567 ;;		_Write_RTC
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           	psect	text79
 11572  00F18A                     __ptext79:
 11573                           	opt stack 0
 11574  00F18A                     _RtccWriteTime:
 11575                           	opt stack 23
 11576                           
 11577                           ;incstack = 0
 11578  00F18A  0E00               	movlw	0
 11579  00F18C  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11580  00F18E  EE20 F002          	lfsr	2,2
 11581  00F192  5001               	movf	RtccWriteTime@pTm,w,c
 11582  00F194  26D9               	addwf	fsr2l,f,c
 11583  00F196  5002               	movf	RtccWriteTime@pTm+1,w,c
 11584  00F198  22DA               	addwfc	fsr2h,f,c
 11585  00F19A  0E5A               	movlw	90
 11586  00F19C  60DF               	cpfslt	indf2,c
 11587  00F19E  0012               	return	
 11588  00F1A0  EE20 F001          	lfsr	2,1
 11589  00F1A4  5001               	movf	RtccWriteTime@pTm,w,c
 11590  00F1A6  26D9               	addwf	fsr2l,f,c
 11591  00F1A8  5002               	movf	RtccWriteTime@pTm+1,w,c
 11592  00F1AA  22DA               	addwfc	fsr2h,f,c
 11593  00F1AC  0E5A               	movlw	90
 11594  00F1AE  60DF               	cpfslt	indf2,c
 11595  00F1B0  0012               	return	
 11596  00F1B2  EE20 F003          	lfsr	2,3
 11597  00F1B6  5001               	movf	RtccWriteTime@pTm,w,c
 11598  00F1B8  26D9               	addwf	fsr2l,f,c
 11599  00F1BA  5002               	movf	RtccWriteTime@pTm+1,w,c
 11600  00F1BC  22DA               	addwfc	fsr2h,f,c
 11601  00F1BE  0E24               	movlw	36
 11602  00F1C0  64DF               	cpfsgt	indf2,c
 11603  00F1C2  D002               	goto	l3146
 11604  00F1C4  0012               	return	
 11605                           
 11606                           ;	Return value of _RtccWriteTime is never used
 11607  00F1C6  0012               	return	
 11608  00F1C8                     l3146:
 11609  00F1C8  EE20 F002          	lfsr	2,2
 11610  00F1CC  5001               	movf	RtccWriteTime@pTm,w,c
 11611  00F1CE  26D9               	addwf	fsr2l,f,c
 11612  00F1D0  5002               	movf	RtccWriteTime@pTm+1,w,c
 11613  00F1D2  22DA               	addwfc	fsr2h,f,c
 11614  00F1D4  50DF               	movf	indf2,w,c
 11615  00F1D6  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 11616  00F1D8  EE20 F001          	lfsr	2,1
 11617  00F1DC  5001               	movf	RtccWriteTime@pTm,w,c
 11618  00F1DE  26D9               	addwf	fsr2l,f,c
 11619  00F1E0  5002               	movf	RtccWriteTime@pTm+1,w,c
 11620  00F1E2  22DA               	addwfc	fsr2h,f,c
 11621  00F1E4  50DF               	movf	indf2,w,c
 11622  00F1E6  6E08               	movwf	RtccWriteTime@tempMinSec,c
 11623  00F1E8  5003               	movf	RtccWriteTime@di,w,c
 11624  00F1EA  B4D8               	btfsc	status,2,c
 11625  00F1EC  D002               	goto	l3152
 11626  00F1EE  9CF2               	bcf	intcon,6,c	;volatile
 11627  00F1F0  D000               	goto	l3152
 11628  00F1F2                     l3152:
 11629  00F1F2  0E00               	movlw	0
 11630  00F1F4  BB3F               	btfsc	63,5,b	;volatile
 11631  00F1F6  0E01               	movlw	1
 11632  00F1F8  6E07               	movwf	RtccWriteTime@wasWrEn,c
 11633  00F1FA  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11634  00F1FC  A4D8               	btfss	status,2,c
 11635  00F1FE  D003               	goto	l3156
 11636  00F200  EC08  F06E         	call	_RtccWrOn	;wreg free
 11637  00F204  D000               	goto	l3156
 11638  00F206                     l3156:
 11639  00F206  0E00               	movlw	0
 11640  00F208  BF3F               	btfsc	63,7,b	;volatile
 11641  00F20A  0E01               	movlw	1
 11642  00F20C  6E05               	movwf	RtccWriteTime@wasOn,c
 11643  00F20E  5005               	movf	RtccWriteTime@wasOn,w,c
 11644  00F210  B4D8               	btfsc	status,2,c
 11645  00F212  D007               	goto	l3162
 11646  00F214  0E00               	movlw	0
 11647  00F216  BE91               	btfsc	3985,7,c	;volatile
 11648  00F218  0E01               	movlw	1
 11649  00F21A  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11650  00F21C  010F               	movlb	15	; () banked
 11651  00F21E  9F3F               	bcf	63,7,b	;volatile
 11652  00F220  D000               	goto	l3162
 11653  00F222                     l3162:
 11654  00F222  0EFC               	movlw	252
 11655  00F224  010F               	movlb	15	; () banked
 11656  00F226  173F               	andwf	63,f,b	;volatile
 11657  00F228  010F               	movlb	15	; () banked
 11658  00F22A  813F               	bsf	63,0,b	;volatile
 11659                           
 11660                           ; BSR set to: 15
 11661  00F22C  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 11662                           
 11663                           ; BSR set to: 15
 11664  00F230  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 11665                           
 11666                           ; BSR set to: 15
 11667  00F234  EE20 F003          	lfsr	2,3
 11668  00F238  5001               	movf	RtccWriteTime@pTm,w,c
 11669  00F23A  26D9               	addwf	fsr2l,f,c
 11670  00F23C  5002               	movf	RtccWriteTime@pTm+1,w,c
 11671  00F23E  22DA               	addwfc	fsr2h,f,c
 11672  00F240  50DF               	movf	indf2,w,c
 11673  00F242  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 11674                           
 11675                           ; BSR set to: 15
 11676  00F244  0EFC               	movlw	252
 11677  00F246  010F               	movlb	15	; () banked
 11678  00F248  173F               	andwf	63,f,b	;volatile
 11679                           
 11680                           ; BSR set to: 15
 11681  00F24A  010F               	movlb	15	; () banked
 11682  00F24C  813F               	bsf	63,0,b	;volatile
 11683                           
 11684                           ; BSR set to: 15
 11685  00F24E  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 11686                           
 11687                           ; BSR set to: 15
 11688  00F252  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 11689                           
 11690                           ; BSR set to: 15
 11691  00F256  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 11692                           
 11693                           ; BSR set to: 15
 11694  00F25A  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 11695                           
 11696                           ; BSR set to: 15
 11697  00F25E  5005               	movf	RtccWriteTime@wasOn,w,c
 11698  00F260  B4D8               	btfsc	status,2,c
 11699  00F262  D00D               	goto	l3194
 11700                           
 11701                           ; BSR set to: 15
 11702  00F264  010F               	movlb	15	; () banked
 11703  00F266  8F3F               	bsf	63,7,b	;volatile
 11704                           
 11705                           ; BSR set to: 15
 11706  00F268  5006               	movf	RtccWriteTime@wasAlrm,w,c
 11707  00F26A  B4D8               	btfsc	status,2,c
 11708  00F26C  D002               	goto	l3190
 11709                           
 11710                           ; BSR set to: 15
 11711  00F26E  8E91               	bsf	3985,7,c	;volatile
 11712  00F270  D000               	goto	l3190
 11713  00F272                     l3190:
 11714                           
 11715                           ; BSR set to: 15
 11716  00F272  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11717  00F274  B4D8               	btfsc	status,2,c
 11718  00F276  D009               	goto	l3198
 11719                           
 11720                           ; BSR set to: 15
 11721  00F278  EC08  F06E         	call	_RtccWrOn	;wreg free
 11722  00F27C  D006               	goto	l3198
 11723  00F27E                     l3194:
 11724  00F27E  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11725  00F280  A4D8               	btfss	status,2,c
 11726  00F282  D003               	goto	l3198
 11727  00F284  010F               	movlb	15	; () banked
 11728  00F286  9B3F               	bcf	63,5,b	;volatile
 11729                           
 11730                           ; BSR set to: 15
 11731  00F288  D000               	goto	l3198
 11732  00F28A                     l3198:
 11733  00F28A  5003               	movf	RtccWriteTime@di,w,c
 11734  00F28C  B4D8               	btfsc	status,2,c
 11735  00F28E  0012               	return	
 11736  00F290  8CF2               	bsf	intcon,6,c	;volatile
 11737  00F292  0012               	return	
 11738                           
 11739                           ;	Return value of _RtccWriteTime is never used
 11740  00F294  0012               	return		;funcret
 11741  00F296                     __end_of_RtccWriteTime:
 11742                           	opt stack 0
 11743                           tosu	equ	0xFFF
 11744                           tosh	equ	0xFFE
 11745                           tosl	equ	0xFFD
 11746                           pclath	equ	0xFFA
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           indf0	equ	0xFEF
 11755                           postinc0	equ	0xFEE
 11756                           fsr0h	equ	0xFEA
 11757                           fsr0l	equ	0xFE9
 11758                           wreg	equ	0xFE8
 11759                           indf1	equ	0xFE7
 11760                           postinc1	equ	0xFE6
 11761                           postdec1	equ	0xFE5
 11762                           fsr1h	equ	0xFE2
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           plusw2	equ	0xFDB
 11768                           fsr2h	equ	0xFDA
 11769                           fsr2l	equ	0xFD9
 11770                           status	equ	0xFD8
 11771                           
 11772 ;; *************** function _RtccWriteDate *****************
 11773 ;; Defined at:
 11774 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  pDt             2    0[COMRAM] PTR const struct .
 11777 ;;		 -> RtccDate(4), 
 11778 ;;  di              1    2[COMRAM] enum E7121
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  tempHourWDay    2   11[COMRAM] struct .
 11781 ;;  tempDayMonth    2    9[COMRAM] struct .
 11782 ;;  tempYear        2    6[COMRAM] struct .
 11783 ;;  wasWrEn         1    8[COMRAM] enum E7121
 11784 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11785 ;;  wasOn           1    4[COMRAM] enum E7121
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      enum E7121
 11788 ;; Registers used:
 11789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11795 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11796 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11798 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11799 ;;Total ram usage:       13 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    1
 11802 ;; This function calls:
 11803 ;;		_RtccWrOn
 11804 ;; This function is called by:
 11805 ;;		_Write_RTC
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           	psect	text80
 11810  00F3B8                     __ptext80:
 11811                           	opt stack 0
 11812  00F3B8                     _RtccWriteDate:
 11813                           	opt stack 23
 11814                           
 11815                           ;incstack = 0
 11816  00F3B8  0E00               	movlw	0
 11817  00F3BA  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11818  00F3BC  EE20 F002          	lfsr	2,2
 11819  00F3C0  5001               	movf	RtccWriteDate@pDt,w,c
 11820  00F3C2  26D9               	addwf	fsr2l,f,c
 11821  00F3C4  5002               	movf	RtccWriteDate@pDt+1,w,c
 11822  00F3C6  22DA               	addwfc	fsr2h,f,c
 11823  00F3C8  0E13               	movlw	19
 11824  00F3CA  60DF               	cpfslt	indf2,c
 11825  00F3CC  0012               	return	
 11826  00F3CE  EE20 F002          	lfsr	2,2
 11827  00F3D2  5001               	movf	RtccWriteDate@pDt,w,c
 11828  00F3D4  26D9               	addwf	fsr2l,f,c
 11829  00F3D6  5002               	movf	RtccWriteDate@pDt+1,w,c
 11830  00F3D8  22DA               	addwfc	fsr2h,f,c
 11831  00F3DA  50DF               	movf	indf2,w,c
 11832  00F3DC  B4D8               	btfsc	status,2,c
 11833  00F3DE  0012               	return	
 11834  00F3E0  EE20 F001          	lfsr	2,1
 11835  00F3E4  5001               	movf	RtccWriteDate@pDt,w,c
 11836  00F3E6  26D9               	addwf	fsr2l,f,c
 11837  00F3E8  5002               	movf	RtccWriteDate@pDt+1,w,c
 11838  00F3EA  22DA               	addwfc	fsr2h,f,c
 11839  00F3EC  0E32               	movlw	50
 11840  00F3EE  60DF               	cpfslt	indf2,c
 11841  00F3F0  0012               	return	
 11842  00F3F2  EE20 F001          	lfsr	2,1
 11843  00F3F6  5001               	movf	RtccWriteDate@pDt,w,c
 11844  00F3F8  26D9               	addwf	fsr2l,f,c
 11845  00F3FA  5002               	movf	RtccWriteDate@pDt+1,w,c
 11846  00F3FC  22DA               	addwfc	fsr2h,f,c
 11847  00F3FE  50DF               	movf	indf2,w,c
 11848  00F400  B4D8               	btfsc	status,2,c
 11849  00F402  0012               	return	
 11850  00F404  EE20 F003          	lfsr	2,3
 11851  00F408  5001               	movf	RtccWriteDate@pDt,w,c
 11852  00F40A  26D9               	addwf	fsr2l,f,c
 11853  00F40C  5002               	movf	RtccWriteDate@pDt+1,w,c
 11854  00F40E  22DA               	addwfc	fsr2h,f,c
 11855  00F410  0E99               	movlw	153
 11856  00F412  64DF               	cpfsgt	indf2,c
 11857  00F414  D002               	goto	l3214
 11858  00F416  0012               	return	
 11859                           
 11860                           ;	Return value of _RtccWriteDate is never used
 11861  00F418  0012               	return	
 11862  00F41A                     l3214:
 11863  00F41A  EE20 F003          	lfsr	2,3
 11864  00F41E  5001               	movf	RtccWriteDate@pDt,w,c
 11865  00F420  26D9               	addwf	fsr2l,f,c
 11866  00F422  5002               	movf	RtccWriteDate@pDt+1,w,c
 11867  00F424  22DA               	addwfc	fsr2h,f,c
 11868  00F426  50DF               	movf	indf2,w,c
 11869  00F428  6E07               	movwf	RtccWriteDate@tempYear,c
 11870  00F42A  EE20 F001          	lfsr	2,1
 11871  00F42E  5001               	movf	RtccWriteDate@pDt,w,c
 11872  00F430  26D9               	addwf	fsr2l,f,c
 11873  00F432  5002               	movf	RtccWriteDate@pDt+1,w,c
 11874  00F434  22DA               	addwfc	fsr2h,f,c
 11875  00F436  50DF               	movf	indf2,w,c
 11876  00F438  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11877  00F43A  EE20 F002          	lfsr	2,2
 11878  00F43E  5001               	movf	RtccWriteDate@pDt,w,c
 11879  00F440  26D9               	addwf	fsr2l,f,c
 11880  00F442  5002               	movf	RtccWriteDate@pDt+1,w,c
 11881  00F444  22DA               	addwfc	fsr2h,f,c
 11882  00F446  50DF               	movf	indf2,w,c
 11883  00F448  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11884  00F44A  5003               	movf	RtccWriteDate@di,w,c
 11885  00F44C  B4D8               	btfsc	status,2,c
 11886  00F44E  D002               	goto	l3220
 11887  00F450  9CF2               	bcf	intcon,6,c	;volatile
 11888  00F452  D000               	goto	l3220
 11889  00F454                     l3220:
 11890  00F454  0E00               	movlw	0
 11891  00F456  BB3F               	btfsc	63,5,b	;volatile
 11892  00F458  0E01               	movlw	1
 11893  00F45A  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11894  00F45C  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11895  00F45E  A4D8               	btfss	status,2,c
 11896  00F460  D003               	goto	l3224
 11897  00F462  EC08  F06E         	call	_RtccWrOn	;wreg free
 11898  00F466  D000               	goto	l3224
 11899  00F468                     l3224:
 11900  00F468  0E00               	movlw	0
 11901  00F46A  BF3F               	btfsc	63,7,b	;volatile
 11902  00F46C  0E01               	movlw	1
 11903  00F46E  6E05               	movwf	RtccWriteDate@wasOn,c
 11904  00F470  5005               	movf	RtccWriteDate@wasOn,w,c
 11905  00F472  B4D8               	btfsc	status,2,c
 11906  00F474  D007               	goto	l3230
 11907  00F476  0E00               	movlw	0
 11908  00F478  BE91               	btfsc	3985,7,c	;volatile
 11909  00F47A  0E01               	movlw	1
 11910  00F47C  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11911  00F47E  010F               	movlb	15	; () banked
 11912  00F480  9F3F               	bcf	63,7,b	;volatile
 11913  00F482  D000               	goto	l3230
 11914  00F484                     l3230:
 11915  00F484  0EFC               	movlw	252
 11916  00F486  010F               	movlb	15	; () banked
 11917  00F488  173F               	andwf	63,f,b	;volatile
 11918  00F48A  010F               	movlb	15	; () banked
 11919  00F48C  813F               	bsf	63,0,b	;volatile
 11920                           
 11921                           ; BSR set to: 15
 11922  00F48E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11923                           
 11924                           ; BSR set to: 15
 11925  00F492  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11926                           
 11927                           ; BSR set to: 15
 11928  00F496  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11929  00F49A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11930  00F49E  50DF               	movf	indf2,w,c
 11931  00F4A0  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11932                           
 11933                           ; BSR set to: 15
 11934  00F4A2  0EFC               	movlw	252
 11935  00F4A4  010F               	movlb	15	; () banked
 11936  00F4A6  173F               	andwf	63,f,b	;volatile
 11937                           
 11938                           ; BSR set to: 15
 11939  00F4A8  0E03               	movlw	3
 11940  00F4AA  010F               	movlb	15	; () banked
 11941  00F4AC  133F               	iorwf	63,f,b	;volatile
 11942                           
 11943                           ; BSR set to: 15
 11944  00F4AE  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11945                           
 11946                           ; BSR set to: 15
 11947  00F4B2  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11948                           
 11949                           ; BSR set to: 15
 11950  00F4B6  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11951                           
 11952                           ; BSR set to: 15
 11953  00F4BA  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11954                           
 11955                           ; BSR set to: 15
 11956  00F4BE  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11957                           
 11958                           ; BSR set to: 15
 11959  00F4C2  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11960                           
 11961                           ; BSR set to: 15
 11962  00F4C6  5005               	movf	RtccWriteDate@wasOn,w,c
 11963  00F4C8  B4D8               	btfsc	status,2,c
 11964  00F4CA  D00D               	goto	l3266
 11965                           
 11966                           ; BSR set to: 15
 11967  00F4CC  010F               	movlb	15	; () banked
 11968  00F4CE  8F3F               	bsf	63,7,b	;volatile
 11969                           
 11970                           ; BSR set to: 15
 11971  00F4D0  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11972  00F4D2  B4D8               	btfsc	status,2,c
 11973  00F4D4  D002               	goto	l3262
 11974                           
 11975                           ; BSR set to: 15
 11976  00F4D6  8E91               	bsf	3985,7,c	;volatile
 11977  00F4D8  D000               	goto	l3262
 11978  00F4DA                     l3262:
 11979                           
 11980                           ; BSR set to: 15
 11981  00F4DA  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11982  00F4DC  B4D8               	btfsc	status,2,c
 11983  00F4DE  D009               	goto	l3270
 11984                           
 11985                           ; BSR set to: 15
 11986  00F4E0  EC08  F06E         	call	_RtccWrOn	;wreg free
 11987  00F4E4  D006               	goto	l3270
 11988  00F4E6                     l3266:
 11989  00F4E6  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11990  00F4E8  A4D8               	btfss	status,2,c
 11991  00F4EA  D003               	goto	l3270
 11992  00F4EC  010F               	movlb	15	; () banked
 11993  00F4EE  9B3F               	bcf	63,5,b	;volatile
 11994                           
 11995                           ; BSR set to: 15
 11996  00F4F0  D000               	goto	l3270
 11997  00F4F2                     l3270:
 11998  00F4F2  5003               	movf	RtccWriteDate@di,w,c
 11999  00F4F4  B4D8               	btfsc	status,2,c
 12000  00F4F6  0012               	return	
 12001  00F4F8  9CF2               	bcf	intcon,6,c	;volatile
 12002  00F4FA  0012               	return	
 12003                           
 12004                           ;	Return value of _RtccWriteDate is never used
 12005  00F4FC  0012               	return		;funcret
 12006  00F4FE                     __end_of_RtccWriteDate:
 12007                           	opt stack 0
 12008                           tosu	equ	0xFFF
 12009                           tosh	equ	0xFFE
 12010                           tosl	equ	0xFFD
 12011                           pclath	equ	0xFFA
 12012                           tblptru	equ	0xFF8
 12013                           tblptrh	equ	0xFF7
 12014                           tblptrl	equ	0xFF6
 12015                           tablat	equ	0xFF5
 12016                           prodh	equ	0xFF4
 12017                           prodl	equ	0xFF3
 12018                           intcon	equ	0xFF2
 12019                           indf0	equ	0xFEF
 12020                           postinc0	equ	0xFEE
 12021                           fsr0h	equ	0xFEA
 12022                           fsr0l	equ	0xFE9
 12023                           wreg	equ	0xFE8
 12024                           indf1	equ	0xFE7
 12025                           postinc1	equ	0xFE6
 12026                           postdec1	equ	0xFE5
 12027                           fsr1h	equ	0xFE2
 12028                           fsr1l	equ	0xFE1
 12029                           indf2	equ	0xFDF
 12030                           postinc2	equ	0xFDE
 12031                           postdec2	equ	0xFDD
 12032                           plusw2	equ	0xFDB
 12033                           fsr2h	equ	0xFDA
 12034                           fsr2l	equ	0xFD9
 12035                           status	equ	0xFD8
 12036                           
 12037 ;; *************** function _RtccWrOn *****************
 12038 ;; Defined at:
 12039 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;  data            2    0        unsigned int 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;		None               void
 12046 ;; Registers used:
 12047 ;;		wreg, status,2
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12057 ;;Total ram usage:        0 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_Write_RTC
 12063 ;;		_RtccWriteDate
 12064 ;;		_RtccWriteTime
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           	psect	text81
 12069  00DC10                     __ptext81:
 12070                           	opt stack 0
 12071  00DC10                     _RtccWrOn:
 12072                           	opt stack 23
 12073                           
 12074                           ;incstack = 0
 12075  00DC10  9CF2               	bcf	intcon,6,c	;volatile
 12076  00DC12  0E55               	movlw	85
 12077  00DC14  6EA7               	movwf	4007,c	;volatile
 12078  00DC16  0EAA               	movlw	170
 12079  00DC18  6EA7               	movwf	4007,c	;volatile
 12080  00DC1A  010F               	movlb	15	; () banked
 12081  00DC1C  8B3F               	bsf	63,5,b	;volatile
 12082                           
 12083                           ; BSR set to: 15
 12084  00DC1E  8CF2               	bsf	intcon,6,c	;volatile
 12085                           
 12086                           ; BSR set to: 15
 12087  00DC20  0012               	return		;funcret
 12088  00DC22                     __end_of_RtccWrOn:
 12089                           	opt stack 0
 12090                           tosu	equ	0xFFF
 12091                           tosh	equ	0xFFE
 12092                           tosl	equ	0xFFD
 12093                           pclath	equ	0xFFA
 12094                           tblptru	equ	0xFF8
 12095                           tblptrh	equ	0xFF7
 12096                           tblptrl	equ	0xFF6
 12097                           tablat	equ	0xFF5
 12098                           prodh	equ	0xFF4
 12099                           prodl	equ	0xFF3
 12100                           intcon	equ	0xFF2
 12101                           indf0	equ	0xFEF
 12102                           postinc0	equ	0xFEE
 12103                           fsr0h	equ	0xFEA
 12104                           fsr0l	equ	0xFE9
 12105                           wreg	equ	0xFE8
 12106                           indf1	equ	0xFE7
 12107                           postinc1	equ	0xFE6
 12108                           postdec1	equ	0xFE5
 12109                           fsr1h	equ	0xFE2
 12110                           fsr1l	equ	0xFE1
 12111                           indf2	equ	0xFDF
 12112                           postinc2	equ	0xFDE
 12113                           postdec2	equ	0xFDD
 12114                           plusw2	equ	0xFDB
 12115                           fsr2h	equ	0xFDA
 12116                           fsr2l	equ	0xFD9
 12117                           status	equ	0xFD8
 12118                           
 12119 ;; *************** function _Read_RTC *****************
 12120 ;; Defined at:
 12121 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;		None
 12124 ;; Auto vars:     Size  Location     Type
 12125 ;;		None
 12126 ;; Return value:  Size  Location     Type
 12127 ;;		None               void
 12128 ;; Registers used:
 12129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12130 ;; Tracked objects:
 12131 ;;		On entry : 0/0
 12132 ;;		On exit  : 0/0
 12133 ;;		Unchanged: 0/0
 12134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12139 ;;Total ram usage:        0 bytes
 12140 ;; Hardware stack levels used:    1
 12141 ;; Hardware stack levels required when called:    1
 12142 ;; This function calls:
 12143 ;;		_RtccReadDate
 12144 ;;		_RtccReadTime
 12145 ;; This function is called by:
 12146 ;;		_main
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           	psect	text82
 12151  00F296                     __ptext82:
 12152                           	opt stack 0
 12153  00F296                     _Read_RTC:
 12154                           	opt stack 29
 12155                           
 12156                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
 12157                           
 12158                           ; BSR set to: 15
 12159                           ;incstack = 0
 12160  00F296  0E4E               	movlw	low _RtccTime
 12161  00F298  6E01               	movwf	RtccReadTime@pTm,c
 12162  00F29A  0E00               	movlw	high _RtccTime
 12163  00F29C  6E02               	movwf	RtccReadTime@pTm+1,c
 12164  00F29E  ECC3  F071         	call	_RtccReadTime	;wreg free
 12165                           
 12166                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
 12167  00F2A2  504F               	movf	_RtccTime+1,w,c
 12168  00F2A4  0B0F               	andlw	15
 12169  00F2A6  0100               	movlb	0	; () banked
 12170  00F2A8  6FF6               	movwf	_segundo_u& (0+255),b
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
 12174  00F2AA  384F               	swapf	_RtccTime+1,w,c
 12175  00F2AC  0B0F               	andlw	15
 12176  00F2AE  0B0F               	andlw	15
 12177  00F2B0  6E5E               	movwf	_segundo_d,c
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
 12181  00F2B2  5050               	movf	_RtccTime+2,w,c
 12182  00F2B4  0B0F               	andlw	15
 12183  00F2B6  0100               	movlb	0	; () banked
 12184  00F2B8  6FF5               	movwf	_minuto_u& (0+255),b
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
 12188  00F2BA  3850               	swapf	_RtccTime+2,w,c
 12189  00F2BC  0B0F               	andlw	15
 12190  00F2BE  0B0F               	andlw	15
 12191  00F2C0  0100               	movlb	0	; () banked
 12192  00F2C2  6FF4               	movwf	_minuto_d& (0+255),b
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
 12196  00F2C4  5051               	movf	_RtccTime+3,w,c
 12197  00F2C6  0B0F               	andlw	15
 12198  00F2C8  0100               	movlb	0	; () banked
 12199  00F2CA  6FF1               	movwf	_hora_u& (0+255),b
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
 12203  00F2CC  3851               	swapf	_RtccTime+3,w,c
 12204  00F2CE  0B0F               	andlw	15
 12205  00F2D0  0B0F               	andlw	15
 12206  00F2D2  0100               	movlb	0	; () banked
 12207  00F2D4  6FF0               	movwf	_hora_d& (0+255),b
 12208                           
 12209                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
 12210  00F2D6  0E4A               	movlw	low _RtccDate
 12211  00F2D8  6E01               	movwf	RtccReadDate@pDt,c
 12212  00F2DA  0E00               	movlw	high _RtccDate
 12213  00F2DC  6E02               	movwf	RtccReadDate@pDt+1,c
 12214  00F2DE  ECC8  F074         	call	_RtccReadDate	;wreg free
 12215                           
 12216                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
 12217  00F2E2  504B               	movf	_RtccDate+1,w,c
 12218  00F2E4  0B0F               	andlw	15
 12219  00F2E6  0100               	movlb	0	; () banked
 12220  00F2E8  6FEF               	movwf	_fecha_u& (0+255),b
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
 12224  00F2EA  384B               	swapf	_RtccDate+1,w,c
 12225  00F2EC  0B0F               	andlw	15
 12226  00F2EE  0B0F               	andlw	15
 12227  00F2F0  0100               	movlb	0	; () banked
 12228  00F2F2  6FEE               	movwf	_fecha_d& (0+255),b
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
 12232  00F2F4  504C               	movf	_RtccDate+2,w,c
 12233  00F2F6  0B0F               	andlw	15
 12234  00F2F8  0100               	movlb	0	; () banked
 12235  00F2FA  6FF3               	movwf	_mes_u& (0+255),b
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
 12239  00F2FC  384C               	swapf	_RtccDate+2,w,c
 12240  00F2FE  0B0F               	andlw	15
 12241  00F300  0B0F               	andlw	15
 12242  00F302  0100               	movlb	0	; () banked
 12243  00F304  6FF2               	movwf	_mes_d& (0+255),b
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
 12247  00F306  C04A  F0ED         	movff	_RtccDate,_dia_semana
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
 12251  00F30A  504D               	movf	_RtccDate+3,w,c
 12252  00F30C  0B0F               	andlw	15
 12253  00F30E  0100               	movlb	0	; () banked
 12254  00F310  6FEC               	movwf	_anio_u& (0+255),b
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
 12258  00F312  384D               	swapf	_RtccDate+3,w,c
 12259  00F314  0B0F               	andlw	15
 12260  00F316  0B0F               	andlw	15
 12261  00F318  0100               	movlb	0	; () banked
 12262  00F31A  6FEB               	movwf	_anio_d& (0+255),b
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
 12266  00F31C  505E               	movf	_segundo_d,w,c
 12267  00F31E  0D0A               	mullw	10
 12268  00F320  0100               	movlb	0	; () banked
 12269  00F322  51F6               	movf	_segundo_u& (0+255),w,b
 12270  00F324  24F3               	addwf	prodl,w,c
 12271  00F326  0100               	movlb	0	; () banked
 12272  00F328  6FA0               	movwf	_segundo& (0+255),b
 12273  00F32A  0100               	movlb	0	; () banked
 12274  00F32C  0E00               	movlw	0
 12275  00F32E  20F4               	addwfc	prodh,w,c
 12276  00F330  0100               	movlb	0	; () banked
 12277  00F332  6FA1               	movwf	(_segundo+1)& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
 12281  00F334  0100               	movlb	0	; () banked
 12282  00F336  51F4               	movf	_minuto_d& (0+255),w,b
 12283  00F338  0D0A               	mullw	10
 12284  00F33A  0100               	movlb	0	; () banked
 12285  00F33C  51F5               	movf	_minuto_u& (0+255),w,b
 12286  00F33E  24F3               	addwf	prodl,w,c
 12287  00F340  0100               	movlb	0	; () banked
 12288  00F342  6FFD               	movwf	_minuto& (0+255),b
 12289  00F344  0100               	movlb	0	; () banked
 12290  00F346  0E00               	movlw	0
 12291  00F348  20F4               	addwfc	prodh,w,c
 12292  00F34A  0100               	movlb	0	; () banked
 12293  00F34C  6FFE               	movwf	(_minuto+1)& (0+255),b
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
 12297  00F34E  0100               	movlb	0	; () banked
 12298  00F350  51F0               	movf	_hora_d& (0+255),w,b
 12299  00F352  0D0A               	mullw	10
 12300  00F354  0100               	movlb	0	; () banked
 12301  00F356  51F1               	movf	_hora_u& (0+255),w,b
 12302  00F358  24F3               	addwf	prodl,w,c
 12303  00F35A  0100               	movlb	0	; () banked
 12304  00F35C  6FFB               	movwf	_hora& (0+255),b
 12305  00F35E  0100               	movlb	0	; () banked
 12306  00F360  0E00               	movlw	0
 12307  00F362  20F4               	addwfc	prodh,w,c
 12308  00F364  0100               	movlb	0	; () banked
 12309  00F366  6FFC               	movwf	(_hora+1)& (0+255),b
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
 12313  00F368  0100               	movlb	0	; () banked
 12314  00F36A  51EE               	movf	_fecha_d& (0+255),w,b
 12315  00F36C  0D0A               	mullw	10
 12316  00F36E  0100               	movlb	0	; () banked
 12317  00F370  51EF               	movf	_fecha_u& (0+255),w,b
 12318  00F372  24F3               	addwf	prodl,w,c
 12319  00F374  0100               	movlb	0	; () banked
 12320  00F376  6FF9               	movwf	_dia& (0+255),b
 12321  00F378  0100               	movlb	0	; () banked
 12322  00F37A  0E00               	movlw	0
 12323  00F37C  20F4               	addwfc	prodh,w,c
 12324  00F37E  0100               	movlb	0	; () banked
 12325  00F380  6FFA               	movwf	(_dia+1)& (0+255),b
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
 12329  00F382  C0ED  F0F7         	movff	_dia_semana,_diasem
 12330  00F386  0100               	movlb	0	; () banked
 12331  00F388  6BF8               	clrf	(_diasem+1)& (0+255),b
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
 12335  00F38A  0100               	movlb	0	; () banked
 12336  00F38C  51F2               	movf	_mes_d& (0+255),w,b
 12337  00F38E  0D0A               	mullw	10
 12338  00F390  0100               	movlb	0	; () banked
 12339  00F392  51F3               	movf	_mes_u& (0+255),w,b
 12340  00F394  24F3               	addwf	prodl,w,c
 12341  00F396  6E5C               	movwf	_mes,c
 12342  00F398  0100               	movlb	0	; () banked
 12343  00F39A  0E00               	movlw	0
 12344  00F39C  20F4               	addwfc	prodh,w,c
 12345  00F39E  6E5D               	movwf	_mes+1,c
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
 12349  00F3A0  0100               	movlb	0	; () banked
 12350  00F3A2  51EB               	movf	_anio_d& (0+255),w,b
 12351  00F3A4  0D0A               	mullw	10
 12352  00F3A6  0100               	movlb	0	; () banked
 12353  00F3A8  51EC               	movf	_anio_u& (0+255),w,b
 12354  00F3AA  24F3               	addwf	prodl,w,c
 12355  00F3AC  6E5A               	movwf	_anio,c
 12356  00F3AE  0100               	movlb	0	; () banked
 12357  00F3B0  0E00               	movlw	0
 12358  00F3B2  20F4               	addwfc	prodh,w,c
 12359  00F3B4  6E5B               	movwf	_anio+1,c
 12360                           
 12361                           ; BSR set to: 0
 12362  00F3B6  0012               	return		;funcret
 12363  00F3B8                     __end_of_Read_RTC:
 12364                           	opt stack 0
 12365                           tosu	equ	0xFFF
 12366                           tosh	equ	0xFFE
 12367                           tosl	equ	0xFFD
 12368                           pclath	equ	0xFFA
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           indf0	equ	0xFEF
 12377                           postinc0	equ	0xFEE
 12378                           fsr0h	equ	0xFEA
 12379                           fsr0l	equ	0xFE9
 12380                           wreg	equ	0xFE8
 12381                           indf1	equ	0xFE7
 12382                           postinc1	equ	0xFE6
 12383                           postdec1	equ	0xFE5
 12384                           fsr1h	equ	0xFE2
 12385                           fsr1l	equ	0xFE1
 12386                           indf2	equ	0xFDF
 12387                           postinc2	equ	0xFDE
 12388                           postdec2	equ	0xFDD
 12389                           plusw2	equ	0xFDB
 12390                           fsr2h	equ	0xFDA
 12391                           fsr2l	equ	0xFD9
 12392                           status	equ	0xFD8
 12393                           
 12394 ;; *************** function _RtccReadTime *****************
 12395 ;; Defined at:
 12396 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
 12397 ;; Parameters:    Size  Location     Type
 12398 ;;  pTm             2    0[COMRAM] PTR struct .
 12399 ;;		 -> RtccTime(4), 
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;  rTD0            8   10[COMRAM] struct .
 12402 ;;  rTD1            8    2[COMRAM] struct .
 12403 ;; Return value:  Size  Location     Type
 12404 ;;		None               void
 12405 ;; Registers used:
 12406 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12413 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12415 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12416 ;;Total ram usage:       18 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; This function calls:
 12419 ;;		Nothing
 12420 ;; This function is called by:
 12421 ;;		_Read_RTC
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           	psect	text83
 12426  00E386                     __ptext83:
 12427                           	opt stack 0
 12428  00E386                     _RtccReadTime:
 12429                           	opt stack 29
 12430  00E386  0EFC               	movlw	252
 12431  00E388  010F               	movlb	15	; () banked
 12432  00E38A  173F               	andwf	63,f,b	;volatile
 12433                           
 12434                           ; BSR set to: 15
 12435  00E38C  010F               	movlb	15	; () banked
 12436  00E38E  813F               	bsf	63,0,b	;volatile
 12437                           
 12438                           ; BSR set to: 15
 12439  00E390  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 12440                           
 12441                           ; BSR set to: 15
 12442  00E394  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 12443                           
 12444                           ; BSR set to: 15
 12445  00E398  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 12446                           
 12447                           ; BSR set to: 15
 12448  00E39C  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 12449                           
 12450                           ; BSR set to: 15
 12451  00E3A0  0EFC               	movlw	252
 12452  00E3A2  010F               	movlb	15	; () banked
 12453  00E3A4  173F               	andwf	63,f,b	;volatile
 12454  00E3A6  010F               	movlb	15	; () banked
 12455  00E3A8  813F               	bsf	63,0,b	;volatile
 12456                           
 12457                           ; BSR set to: 15
 12458  00E3AA  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 12459                           
 12460                           ; BSR set to: 15
 12461  00E3AE  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 12462                           
 12463                           ; BSR set to: 15
 12464  00E3B2  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 12465                           
 12466                           ; BSR set to: 15
 12467  00E3B6  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 12468                           
 12469                           ; BSR set to: 15
 12470  00E3BA  5009               	movf	RtccReadTime@rTD1+6,w,c
 12471  00E3BC  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 12472  00E3BE  A4D8               	btfss	status,2,c
 12473  00E3C0  D7E2               	goto	l4064
 12474                           
 12475                           ; BSR set to: 15
 12476                           
 12477                           ; BSR set to: 15
 12478  00E3C2  EE20 F003          	lfsr	2,3
 12479  00E3C6  5001               	movf	RtccReadTime@pTm,w,c
 12480  00E3C8  26D9               	addwf	fsr2l,f,c
 12481  00E3CA  5002               	movf	RtccReadTime@pTm+1,w,c
 12482  00E3CC  22DA               	addwfc	fsr2h,f,c
 12483  00E3CE  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 12484  00E3D2  EE20 F002          	lfsr	2,2
 12485  00E3D6  5001               	movf	RtccReadTime@pTm,w,c
 12486  00E3D8  26D9               	addwf	fsr2l,f,c
 12487  00E3DA  5002               	movf	RtccReadTime@pTm+1,w,c
 12488  00E3DC  22DA               	addwfc	fsr2h,f,c
 12489  00E3DE  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 12490  00E3E2  EE20 F001          	lfsr	2,1
 12491  00E3E6  5001               	movf	RtccReadTime@pTm,w,c
 12492  00E3E8  26D9               	addwf	fsr2l,f,c
 12493  00E3EA  5002               	movf	RtccReadTime@pTm+1,w,c
 12494  00E3EC  22DA               	addwfc	fsr2h,f,c
 12495  00E3EE  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 12496                           
 12497                           ; BSR set to: 15
 12498  00E3F2  0012               	return		;funcret
 12499  00E3F4                     __end_of_RtccReadTime:
 12500                           	opt stack 0
 12501                           tosu	equ	0xFFF
 12502                           tosh	equ	0xFFE
 12503                           tosl	equ	0xFFD
 12504                           pclath	equ	0xFFA
 12505                           tblptru	equ	0xFF8
 12506                           tblptrh	equ	0xFF7
 12507                           tblptrl	equ	0xFF6
 12508                           tablat	equ	0xFF5
 12509                           prodh	equ	0xFF4
 12510                           prodl	equ	0xFF3
 12511                           intcon	equ	0xFF2
 12512                           indf0	equ	0xFEF
 12513                           postinc0	equ	0xFEE
 12514                           fsr0h	equ	0xFEA
 12515                           fsr0l	equ	0xFE9
 12516                           wreg	equ	0xFE8
 12517                           indf1	equ	0xFE7
 12518                           postinc1	equ	0xFE6
 12519                           postdec1	equ	0xFE5
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           plusw2	equ	0xFDB
 12526                           fsr2h	equ	0xFDA
 12527                           fsr2l	equ	0xFD9
 12528                           status	equ	0xFD8
 12529                           
 12530 ;; *************** function _RtccReadDate *****************
 12531 ;; Defined at:
 12532 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;  pDt             2    0[COMRAM] PTR struct .
 12535 ;;		 -> RtccDate(4), 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  rTD0            8   10[COMRAM] struct .
 12538 ;;  rTD1            8    2[COMRAM] struct .
 12539 ;; Return value:  Size  Location     Type
 12540 ;;		None               void
 12541 ;; Registers used:
 12542 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12543 ;; Tracked objects:
 12544 ;;		On entry : 0/0
 12545 ;;		On exit  : 0/0
 12546 ;;		Unchanged: 0/0
 12547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12549 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12551 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12552 ;;Total ram usage:       18 bytes
 12553 ;; Hardware stack levels used:    1
 12554 ;; This function calls:
 12555 ;;		Nothing
 12556 ;; This function is called by:
 12557 ;;		_Read_RTC
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           	psect	text84
 12562  00E990                     __ptext84:
 12563                           	opt stack 0
 12564  00E990                     _RtccReadDate:
 12565                           	opt stack 29
 12566  00E990  0EFC               	movlw	252
 12567  00E992  010F               	movlb	15	; () banked
 12568  00E994  173F               	andwf	63,f,b	;volatile
 12569  00E996  0E03               	movlw	3
 12570  00E998  010F               	movlb	15	; () banked
 12571  00E99A  133F               	iorwf	63,f,b	;volatile
 12572                           
 12573                           ; BSR set to: 15
 12574  00E99C  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 12575                           
 12576                           ; BSR set to: 15
 12577  00E9A0  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 12578                           
 12579                           ; BSR set to: 15
 12580  00E9A4  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 12581                           
 12582                           ; BSR set to: 15
 12583  00E9A8  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 12584                           
 12585                           ; BSR set to: 15
 12586  00E9AC  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 12587                           
 12588                           ; BSR set to: 15
 12589  00E9B0  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 12590  00E9B4  0EFC               	movlw	252
 12591  00E9B6  010F               	movlb	15	; () banked
 12592  00E9B8  173F               	andwf	63,f,b	;volatile
 12593  00E9BA  0E03               	movlw	3
 12594  00E9BC  010F               	movlb	15	; () banked
 12595  00E9BE  133F               	iorwf	63,f,b	;volatile
 12596                           
 12597                           ; BSR set to: 15
 12598  00E9C0  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 12599                           
 12600                           ; BSR set to: 15
 12601  00E9C4  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 12602                           
 12603                           ; BSR set to: 15
 12604  00E9C8  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 12605                           
 12606                           ; BSR set to: 15
 12607  00E9CC  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 12608                           
 12609                           ; BSR set to: 15
 12610  00E9D0  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 12611                           
 12612                           ; BSR set to: 15
 12613  00E9D4  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 12614  00E9D8  5005               	movf	RtccReadDate@rTD1+2,w,c
 12615  00E9DA  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 12616  00E9DC  A4D8               	btfss	status,2,c
 12617  00E9DE  D7D8               	goto	l4090
 12618                           
 12619                           ; BSR set to: 15
 12620                           
 12621                           ; BSR set to: 15
 12622  00E9E0  EE20 F001          	lfsr	2,1
 12623  00E9E4  5001               	movf	RtccReadDate@pDt,w,c
 12624  00E9E6  26D9               	addwf	fsr2l,f,c
 12625  00E9E8  5002               	movf	RtccReadDate@pDt+1,w,c
 12626  00E9EA  22DA               	addwfc	fsr2h,f,c
 12627  00E9EC  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 12628  00E9F0  EE20 F002          	lfsr	2,2
 12629  00E9F4  5001               	movf	RtccReadDate@pDt,w,c
 12630  00E9F6  26D9               	addwf	fsr2l,f,c
 12631  00E9F8  5002               	movf	RtccReadDate@pDt+1,w,c
 12632  00E9FA  22DA               	addwfc	fsr2h,f,c
 12633  00E9FC  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 12634                           
 12635                           ; BSR set to: 15
 12636  00EA00  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 12637  00EA04  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 12638  00EA08  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 12639                           
 12640                           ; BSR set to: 15
 12641  00EA0C  EE20 F003          	lfsr	2,3
 12642  00EA10  5001               	movf	RtccReadDate@pDt,w,c
 12643  00EA12  26D9               	addwf	fsr2l,f,c
 12644  00EA14  5002               	movf	RtccReadDate@pDt+1,w,c
 12645  00EA16  22DA               	addwfc	fsr2h,f,c
 12646  00EA18  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 12647                           
 12648                           ; BSR set to: 15
 12649  00EA1C  0012               	return		;funcret
 12650  00EA1E                     __end_of_RtccReadDate:
 12651                           	opt stack 0
 12652                           tosu	equ	0xFFF
 12653                           tosh	equ	0xFFE
 12654                           tosl	equ	0xFFD
 12655                           pclath	equ	0xFFA
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           indf0	equ	0xFEF
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           postinc1	equ	0xFE6
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           plusw2	equ	0xFDB
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           tosu	equ	0xFFF
 12681                           tosh	equ	0xFFE
 12682                           tosl	equ	0xFFD
 12683                           pclath	equ	0xFFA
 12684                           tblptru	equ	0xFF8
 12685                           tblptrh	equ	0xFF7
 12686                           tblptrl	equ	0xFF6
 12687                           tablat	equ	0xFF5
 12688                           prodh	equ	0xFF4
 12689                           prodl	equ	0xFF3
 12690                           intcon	equ	0xFF2
 12691                           indf0	equ	0xFEF
 12692                           postinc0	equ	0xFEE
 12693                           fsr0h	equ	0xFEA
 12694                           fsr0l	equ	0xFE9
 12695                           wreg	equ	0xFE8
 12696                           indf1	equ	0xFE7
 12697                           postinc1	equ	0xFE6
 12698                           postdec1	equ	0xFE5
 12699                           fsr1h	equ	0xFE2
 12700                           fsr1l	equ	0xFE1
 12701                           indf2	equ	0xFDF
 12702                           postinc2	equ	0xFDE
 12703                           postdec2	equ	0xFDD
 12704                           plusw2	equ	0xFDB
 12705                           fsr2h	equ	0xFDA
 12706                           fsr2l	equ	0xFD9
 12707                           status	equ	0xFD8
 12708                           
 12709                           	psect	text85
 12710  000000                     __ptext85:
 12711                           	opt stack 0
 12712                           tosu	equ	0xFFF
 12713                           tosh	equ	0xFFE
 12714                           tosl	equ	0xFFD
 12715                           pclath	equ	0xFFA
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           indf0	equ	0xFEF
 12724                           postinc0	equ	0xFEE
 12725                           fsr0h	equ	0xFEA
 12726                           fsr0l	equ	0xFE9
 12727                           wreg	equ	0xFE8
 12728                           indf1	equ	0xFE7
 12729                           postinc1	equ	0xFE6
 12730                           postdec1	equ	0xFE5
 12731                           fsr1h	equ	0xFE2
 12732                           fsr1l	equ	0xFE1
 12733                           indf2	equ	0xFDF
 12734                           postinc2	equ	0xFDE
 12735                           postdec2	equ	0xFDD
 12736                           plusw2	equ	0xFDB
 12737                           fsr2h	equ	0xFDA
 12738                           fsr2l	equ	0xFD9
 12739                           status	equ	0xFD8
 12740                           
 12741                           	psect	rparam
 12742  0000                     tosu	equ	0xFFF
 12743                           tosh	equ	0xFFE
 12744                           tosl	equ	0xFFD
 12745                           pclath	equ	0xFFA
 12746                           tblptru	equ	0xFF8
 12747                           tblptrh	equ	0xFF7
 12748                           tblptrl	equ	0xFF6
 12749                           tablat	equ	0xFF5
 12750                           prodh	equ	0xFF4
 12751                           prodl	equ	0xFF3
 12752                           intcon	equ	0xFF2
 12753                           indf0	equ	0xFEF
 12754                           postinc0	equ	0xFEE
 12755                           fsr0h	equ	0xFEA
 12756                           fsr0l	equ	0xFE9
 12757                           wreg	equ	0xFE8
 12758                           indf1	equ	0xFE7
 12759                           postinc1	equ	0xFE6
 12760                           postdec1	equ	0xFE5
 12761                           fsr1h	equ	0xFE2
 12762                           fsr1l	equ	0xFE1
 12763                           indf2	equ	0xFDF
 12764                           postinc2	equ	0xFDE
 12765                           postdec2	equ	0xFDD
 12766                           plusw2	equ	0xFDB
 12767                           fsr2h	equ	0xFDA
 12768                           fsr2l	equ	0xFD9
 12769                           status	equ	0xFD8


Data Sizes:
    Strings     350
    Constant    14
    Data        12
    BSS         176
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     68      95
    BANK0           160      0     159
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), comando(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_32(CODE[18]), STR_31(CODE[5]), STR_27(CODE[5]), STR_26(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    confirmar_nuevo_password@confirmar	PTR int  size(2) Largest target is 2
		 -> actualizar_password@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> menu_cambiar_password@verifica(COMRAM[2]), 

    guardar_elemento_arreglo@arreglo	PTR unsigned char  size(2) Largest target is 7
		 -> new_password(BANK0[7]), temporal(BANK0[7]), current_password(BANK0[7]), 

    guardar_elemento_arreglo@tamanio	PTR int  size(2) Largest target is 2
		 -> tamanio_new_password(BANK0[2]), tamanio_password(COMRAM[2]), 

    actualizar_minutos@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualizar_hora@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_dia@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_elemento@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@dato_fecha	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@doit	PTR FTN(PTR int ,const int ,)void  size(2) Largest target is 0
		 -> actualizar_minutos(), actualizar_hora(), actualiza_dia(), actualiza_elemento(), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), 
		 -> tamanio_anio(BANK0[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> guardar_elemento@valor(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), 
		 -> imprimir_tecla@aux(COMRAM[20]), STR_25(CODE[9]), STR_24(CODE[9]), STR_23(CODE[11]), 
		 -> STR_22(CODE[14]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[23]), 
		 -> STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), STR_15(CODE[22]), 
		 -> STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), STR_7(CODE[11]), 
		 -> STR_6(CODE[17]), STR_5(CODE[26]), STR_4(CODE[4]), STR_3(CODE[3]), 
		 -> buffer2(BANK0[20]), 

    funcion_pulsador_B	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), desactivar_alarma(), 

    funcion_pulsador_A	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), accionar_alarma(), ingresar_comando(), 

    funcion_pulsador_D	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), borrar_current_password(), borrar_nuevo_password(), 
		 -> borrar_temporal_password(), borrar_hora(), borrar_minutos(), borrar_dia(), 
		 -> borrar_mes(), borrar_anio(), 

    puntero_funcion	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), cambiar_hora(), cambiar_minutos(), cambiar_dia(), 
		 -> cambiar_mes(), cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), 
		 -> mostrar_guardar_nuevo_password(), mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    funcion_pulsador_C	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), restaurar_comando(), cancelar_cambio_password(), cancelar_cambio_hora(), 
		 -> cancelar_cambio_fecha(), 

    mostrar_titulo_menu@titulo_menu	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_19(CODE[23]), STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), 
		 -> STR_15(CODE[22]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), 

    caratula$788	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_25(CODE[9]), STR_24(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _menu_cambiar_password->_clear_display
    _menu_cambiar_password->_mostrar_titulo_menu
    _menu_cambiar_horario->_clear_display
    _menu_cambiar_horario->_mostrar_titulo_menu
    _menu_cambiar_fecha->_clear_display
    _menu_cambiar_fecha->_mostrar_titulo_menu
    _mostrar_titulo_menu->_lcd_putrs
    _mensaje_alarma_activada->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _guardar_password_temporal->_guardar_elemento_arreglo
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _guardar_nuevo_password->_guardar_elemento_arreglo
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _actualizar_password->_confirmar_nuevo_password
    _confirmar_nuevo_password->_guardar_current_password
    _guardar_current_password->_guardar_elemento_arreglo
    _cambiar_minutos->_guardar_elemento
    _cambiar_mes->_guardar_elemento
    _cambiar_hora->_guardar_elemento
    _cambiar_dia->_guardar_elemento
    _obtener_dia_mes->___awmod
    _cambiar_anio->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _accionar_alarma->_menu_ingresar_password
    _menu_ingresar_password->_clear_display
    _clear_display->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  469613
                                             66 COMRAM     2     2      0
                           _Read_RTC
                              _Setup
              _activar_sonido_alarma
                               _atoi
                           _caratula
           _desactivar_sonido_alarma
                 _inicializar_alarma
                _inicializar_teclado
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
            _mensaje_alarma_activada
                 _menu_cambiar_fecha
               _menu_cambiar_horario
              _menu_cambiar_password
              _setear_comando_alarma
 ---------------------------------------------------------------------------------
 (1) _setear_comando_alarma                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_password                                2     2      0   12383
                                             12 COMRAM     2     2      0
                      _clear_display
                _mostrar_titulo_menu
                  _verficar_password
 ---------------------------------------------------------------------------------
 (2) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_horario                                 0     0      0   12136
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (1) _menu_cambiar_fecha                                   0     0      0   12136
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (2) _mostrar_titulo_menu                                  2     0      2    5961
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _mensaje_alarma_activada                              0     0      0    5427
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2  406961
                                             61 COMRAM     5     3      2
                   Absolute function *
                    _accionar_alarma *
                        _borrar_anio *
            _borrar_current_password *
                         _borrar_dia *
                        _borrar_hora *
                         _borrar_mes *
                     _borrar_minutos *
              _borrar_nuevo_password *
           _borrar_temporal_password *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
              _cancelar_cambio_fecha *
               _cancelar_cambio_hora *
           _cancelar_cambio_password *
      _confirmar_actualizar_password *
                  _desactivar_alarma *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
                  _restaurar_comando *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             2     0      2  183172
                                             59 COMRAM     2     0      2
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   11114
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   23476
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
             _menu_ingresar_password
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   11114
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3397
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3375
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   11559
                                             56 COMRAM     1     1      0
                _actualizar_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    7023
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _actualizar_password                                  5     5      0    1197
                                             15 COMRAM     5     5      0
           _confirmar_nuevo_password
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _confirmar_nuevo_password                             7     4      3    1036
                                              8 COMRAM     7     4      3
           _guardar_current_password
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             1     1      0     752
                                              7 COMRAM     1     1      0
           _guardar_elemento_arreglo
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_arreglo                             7     2      5     730
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         3     3      0   24326
                                             52 COMRAM     3     3      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0   24878
                                             52 COMRAM     3     3      0
                   _guardar_elemento
                    _obtener_dia_mes
 ---------------------------------------------------------------------------------
 (4) _obtener_dia_mes                                      2     2      0     552
                                              6 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         4     4      0   24350
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                    17     7     10   24281
                                             35 COMRAM    17     7     10
                      _actualiza_dia *
                 _actualiza_elemento *
                    _actualizar_hora *
                 _actualizar_minutos *
                    _convertir_a_int
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _convertir_a_int                                      4     0      4    1011
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _actualizar_minutos                                   4     0      4    2407
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (5) _actualizar_hora                                      4     0      4    4898
                                             21 COMRAM     4     0      4
                          _Write_RTC
                 _actualiza_elemento
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (5) _actualiza_dia                                        4     0      4    2621
                                             21 COMRAM     4     0      4
                 _actualiza_elemento
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _actualiza_elemento                                   4     0      4    2577
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _desactivar_alarma                                    0     0      0   18537
                      _clear_display
      _inicializar_intentos_fallidos
             _menu_ingresar_password
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_password                             0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_hora                                 0     0      0       0
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cancelar_cambio_fecha                                0     0      0       0
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_temporal_password                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_nuevo_password                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_minutos                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_mes                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_hora                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_dia                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_current_password                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _borrar_anio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _accionar_alarma                                      0     0      0   18537
                      _clear_display
             _menu_ingresar_password
 ---------------------------------------------------------------------------------
 (3) _menu_ingresar_password                               3     3      0   12362
                                             12 COMRAM     3     3      0
                      _clear_display
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (4) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        2     0      2    6175
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _inicializar_teclado                                  0     0      0       0
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (2) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializar_alarma                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _desactivar_sonido_alarma                             0     0      0       0
      _inicializar_intentos_fallidos
 ---------------------------------------------------------------------------------
 (3) _inicializar_intentos_fallidos                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9542
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3295
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3646
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2449
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1781
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _activar_sonido_alarma                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (7) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (8) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _activar_sonido_alarma
   _atoi
     ___wmul
     _isdigit
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _desactivar_sonido_alarma
     _inicializar_intentos_fallidos
   _inicializar_alarma
   _inicializar_teclado
     _restaurar_comando
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     Absolute function(Fake) *
     _accionar_alarma *
       _clear_display
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
     _borrar_anio *
     _borrar_current_password *
     _borrar_dia *
     _borrar_hora *
     _borrar_mes *
     _borrar_minutos *
     _borrar_nuevo_password *
     _borrar_temporal_password *
     _cambiar_anio *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_dia *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _obtener_dia_mes
         ___awmod
     _cambiar_hora *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_mes *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_minutos *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cancelar_cambio_fecha *
       _inicializar_fecha
       _restaurar_comando
     _cancelar_cambio_hora *
       _inicializar_hora
       _restaurar_comando
     _cancelar_cambio_password *
       _restaurar_comando
     _confirmar_actualizar_password *
       _actualizar_password
         _confirmar_nuevo_password
           _guardar_current_password
             _guardar_elemento_arreglo
         _restaurar_comando
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _desactivar_alarma *
       _clear_display
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _inicializar_intentos_fallidos
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
       _restaurar_comando
     _guardar_tecla_presionada *
       Absolute function(Fake) *
       _cambiar_anio *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_dia *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _obtener_dia_mes
           ___awmod
       _cambiar_hora *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_mes *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_minutos *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _confirmar_actualizar_password *
         _actualizar_password
           _confirmar_nuevo_password
             _guardar_current_password
               _guardar_elemento_arreglo
           _restaurar_comando
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _menu_ingresar_password
           _clear_display
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_putrs
               _lcd_putc
                 _lcd_gotoxy
                   _lcd_send_byte
                     _Delay100TCYx
                     _lcd_send_nibble
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _validar_password
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
           _guardar_elemento_arreglo
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _menu_ingresar_password
         _clear_display
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _validar_password
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
         _guardar_elemento_arreglo
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _restaurar_comando *
   _mensaje_alarma_activada
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _menu_cambiar_fecha
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_horario
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _menu_cambiar_password
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _verficar_password
   _setear_comando_alarma

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      10       8        6.3%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9F       5       99.4%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     44      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E       6        0.0%
DATA                 0      0     10E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 05 00:04:30 2016

                    cambiar_hora@validacion 0035                           _verficar_password E71A  
                                         _a 0082                                           _b 0086  
                                         _c 0088                                           _i 0094  
                                         _j 0098                                           _k 009A  
                            ?_lcd_send_byte 0003                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                              ?_borrar_anio 0001                  ??_mostrar_guardar_password 0039  
                              ?_borrar_hora 0001                                         l351 E01A  
                                       l352 E01C                                         l432 E2BE  
                                       l440 E8B6                                         l441 E8B2  
                                       l444 E8DE                                         l460 F586  
                                       l445 E8DA                                         l471 F616  
                                       l463 F5CC                                         l455 F548  
                                       l480 F652                                         l472 F612  
                                       l464 F5C8                                         l456 F544  
                                       l449 E904                                         l619 F9B0  
                                       l475 F630                                         l467 F5EE  
                                       l459 F58A                                         l476 F62C  
                                       l468 F5EA                                         l831 E718  
                                       l912 FC9A                                         l859 E790  
                                       l869 EAAA                        actualizar_password@j 0013  
                                       _dia 00F9                                         _day 0073  
                                       _key 0049                                         _mes 005C  
                              ___awmod@sign 0006                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                    __size_of_actualizar_hora 0022  
                               lcd_gotoxy@x 0006                                 lcd_gotoxy@y 0005  
         __end_of_guardar_password_temporal DD48                              _borrar_minutos DC58  
                  _desactivar_sonido_alarma DC7C                                        l1212 EDEE  
          __end_of_cancelar_cambio_password DE72                                        l4000 E734  
                                      l3220 F454                                        l3132 DE36  
                                      l4004 E766                                        l3230 F484  
                                      l3214 F41A                                        l3310 EB26  
                                      l3134 DE3C                                        l4006 E76C  
                                      l3224 F468                                        l3152 F1F2  
                                      l4008 E77C                                        l3162 F222  
                                      l3146 F1C8                                        l3314 EB36  
                                      l3306 EB1A                                        l3410 E182  
                                      l4026 E34C                                        l3156 F206  
                                      l3500 FBB6                                        l3420 ED2C  
                                      l4028 E358                                        l4212 EB96  
                                      l3270 F4F2                                        l3262 F4DA  
                                      l3190 F272                                        l3406 E158  
                                      l3502 FBC4                                        l3430 ED6C  
                                      l4064 E386                                        l3520 FC68  
                                      l3512 FC02                                        l4152 EEB6  
                                      l4232 F0E4                                        l4400 FA54  
                                      l4090 E990                                        l3266 F4E6  
                                      l3194 F27E                                        l3282 EAC2  
                                      l3098 DC24                                        l3370 E0C2  
                                      l3506 FBCE                                        l4154 EEC0  
                                      l3434 ED80                                        l3418 ED26  
                                      l4242 F148                                        l4234 F0FA  
                                      l3372 E0CE                                        l3380 E0F2  
                                      l3460 E224                                        l3604 FE52  
                                      l3540 FCE2                                        l3524 FC6C  
                                      l3508 FBE4                                        l3620 E4E4  
                                      l3436 EDB6                                        l3700 E974  
                                      l4244 F152                                        l4404 FA62  
                                      l1589 E256                                        l3198 F28A  
                                      l3294 EAEA                                        l3374 E0DA  
                                      l3470 E24A                                        l3462 E22C  
                                      l3550 FD16                                        l3542 FCE6  
                                      l3606 FE5E                                        l3630 E530  
                                      l3438 EDBC                                        l1599 E14C  
                                      l3296 EAF4                                        l3288 EAD4  
                                      l3376 E0E6                                        l3480 E122  
                                      l3560 FD36                                        l3536 FCC8  
                                      l3608 FE7A                                        l3624 E50E  
                                      l3704 E984                                        l3384 E6C0  
                                      l4512 FB5E                                        l4440 FB1C  
                                      l4432 FAF0                                        l4424 FABE  
                                      l4416 FA9E                                        l3298 EAFC  
                                      l3458 E21A                                        l3482 E12A  
                                      l3394 DDDC                                        l3554 FD1A  
                                      l3546 FCF2                                        l3626 E514  
                                      l4514 FB74                                        l4434 FAF6  
                                      l4450 FB80                                        l3564 FD5A  
                                      l3628 E524                                        l3740 ED10  
                                      l3732 ECE4                                        l3820 F926  
                                      l4364 F65A                                        l4196 EF62  
                                      l4188 EF22                                        l4436 FAFC  
                                      l3486 E140                                        l3478 E118  
                                      l3590 FDDA                                        l3574 FD86  
                                      l3582 FDB0                                        l3566 FD64  
                                      l3494 FB9C                                        l3830 F984  
                                      l3670 EA96                                        l3662 EA4E  
                                      l4438 FB02                                        l3904 DC36  
                                      l3584 FDB8                                        l3576 FD8E  
                                      l3736 ECF8                                        l3808 F88C  
                                      l3680 E924                                        l3920 E41E  
                                      l4448 FB42                                        l4384 FA00  
                                      l3834 F998                                        l3818 F914  
                                      l3690 E94A                                        l3666 EA80  
                                      l3596 FDF8                                        l3692 E952  
                                      l3684 E932                                        l3852 EFE8  
                                      l3668 EA86                                        l3764 EC12  
                                      l3748 E066                                        l3932 E7C2  
                                      l3924 E42C                                        l4396 FA42  
                                      l3598 FDFE                                        l3870 F074  
                                      l3862 F01C                                        l3854 EFF4  
                                      l3774 EC4A                                        l3696 E968  
                                      l3688 E940                                        l3872 F080  
                                      l3864 F028                                        l3768 EC26  
                                      l3952 E574                                        l3970 E83C  
                                      l3938 E7D8                                        l3868 F058  
                                      l3788 E28C                                        l3956 E582  
                                      l3966 E834                                        l3984 E860  
                                      l3976 E84C                                        STR_1 FF9E  
                                      STR_2 FFAD                                        STR_3 FFF2  
                                      STR_4 FFEE                                        STR_5 FEB4  
                                      STR_6 FF8D                                        STR_7 FFD5  
                                      STR_8 FFE9                                        STR_9 FFE9  
                           _guardar_comando E260                           ?_inicializar_hora 0001  
                                      u2008 E614                                        u3008 F900  
                                      u2360 E178                                        u3240 E2EA  
                                      u3241 E2E6                                        u2370 E1A2  
                                      u3170 E1CE                                        u3250 E2EC  
                                      u3171 E1CA                                        u3180 E1D0  
                                      u2367 E16E                                        u3408 E8C2  
                                      u2377 E198                                        u1930 E5C4  
                                      u1950 E5DC                                        u2750 EA34  
                                      u3438 E8EC                                        u2920 EC0A  
                                      u3608 F570                                        u1970 E5F6  
                                      u3378 E89A                                        u1948 E5C6  
                                      u2860 ECAA                                        u1990 E612  
                                      u3638 F5B2                                        u3830 FB38  
                                      u3750 FA1A                                        u1968 E5DE  
                                      u2970 F8A8                                        u3738 F63C  
                                      u3578 F52E                                        u3907 DC26  
                                      u1988 E5F8                                        u3688 F5FA  
                                      u3857 F660                                        u3867 F91A  
                                      u3877 F99E                                        u3887 ECFE  
                                      u3897 DC38                            ?_lcd_send_nibble 0001  
                                      _anio 005A                                        _flag 02F8  
                                      _atoi ED24                          ??_inicializar_hora 0001  
                                      _main F9B2                                        _hora 00FB  
                                      _hour 0076                                        _year 007F  
                                      fsr0h 000FEA                                        indf0 000FEF  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      indf1 000FE7                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                             __CFG_T1DIG$ON 000000                  actualizar_minutos@elemento 0016  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 0000                               __CFG_IESO$OFF 000000  
                          RtccReadDate@rTD0 000B                            RtccReadDate@rTD1 0003  
                 __end_of_verficar_password E792                  __end_of_actualiza_elemento DCA6  
                           _accionar_alarma E320             __end_of_mensaje_alarma_activada DFCE  
                              ___param_bank 000010                             RtccReadTime@pTm 0001  
                      __size_of_cambiar_dia 005A                        __size_of_cambiar_mes 006E  
                         _inicializar_fecha DF72                                 _Delay1KTCYx DC34  
                             __CFG_PLLDIV$1 000000                                       ?_atoi 0007  
                                     ?_main 0001                             __end_of___awdiv EB42  
                        ?_inicializar_fecha 0001                                       STR_10 FFE9  
                                     STR_11 FFE9                                       STR_20 FF7C  
                                     STR_12 FF22                                       STR_21 FF6B  
                                     STR_13 FF59                                       STR_30 FF7A  
                                     STR_22 FFBC                                       STR_14 FF47  
                                     STR_31 FFE9                                       STR_23 FFCA  
                                     STR_15 FEE5                                       STR_24 FFE0  
                                     STR_32 FF35                                       STR_16 FF0F  
                                     STR_25 FFE0                                       STR_17 FE99  
                                     STR_26 FFE9                                       STR_18 FEFB  
                                     STR_27 FFE9                                       STR_19 FECE  
                                     STR_28 FFF5                             __end_of___awmod E990  
                                     STR_29 FFF5                       __size_of_Delay100TCYx 0012  
                          _guardar_elemento F7F2                             ___awdiv@divisor 0003  
                           __end_of___lwdiv E260                             __end_of___lwmod E156  
                         _restaurar_comando DCD8                             ___awdiv@counter 0005  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94             ??_confirmar_actualizar_password 0039  
                             ?_leer_teclado 003E                __size_of_inicializar_teclado 002A  
                        ?_restaurar_comando 0001                              __CFG_FCMEN$OFF 000000  
                      _cancelar_cambio_hora DB92                      __end_of_borrar_minutos DC6A  
                                     _Setup E076                         ??_inicializar_fecha 0001  
                            _ocultar_teclas 009C                             __end_of_dpowers FE95  
                                     _mes_d 00F2                                       _mes_u 00F3  
                           __end_of_isdigit DDE6                                       _month 007C  
                                     atoi@a 000C                                       atoi@s 0007  
                            __pbitbssCOMRAM 02F8      __end_of_mostrar_guardar_nuevo_password DF46  
   __size_of_mostrar_guardar_nuevo_password 002C              _mostrar_guardar_nuevo_password DF1A  
                                     pclath 000FFA                                       tablat 000FF5  
                         ??_convertir_a_int 0012                         ??_restaurar_comando 0001  
                                     plusw2 000FDB                                lcd_putrs@ptr 0009  
                                     status 000FD8                             __end_of_sprintf FE8A  
                         validar_password@i 0003                     __CFG_DSWDTOSC$INTOSCREF 000000  
                     __end_of_actualiza_dia DD66                             __initialization E462  
                              _Delay100TCYx DC22                   __end_of_inicializar_fecha DFA0  
                              __end_of_atoi EDF8                                __end_of_main FB92  
                           ??_lcd_send_byte 0004                  __end_of_actualizar_minutos DDC4  
                          RtccReadTime@rTD0 000B                            RtccReadTime@rTD1 0003  
                          __end_of_Read_RTC F3B8                    _guardar_current_password DCF4  
                 __size_of_ingresar_comando 000A                   __end_of_restaurar_comando DCF4  
                         cambiar_anio@tecla 0037                       __size_of_cambiar_anio 007C  
                     __size_of_cambiar_hora 0060                                      ??_atoi 0009  
                                    ??_main 0043                               __activetblptr 000002  
                        _inicializar_alarma E62E                              ??_leer_teclado 0040  
                   __end_of_guardar_comando E2C0            __end_of_guardar_elemento_arreglo E71A  
                          __end_of_RtccWrOn DC22                       ?_cancelar_cambio_hora 0001  
              __size_of_mostrar_titulo_menu 0018                     actualizar_minutos@valor 0018  
                  ?_borrar_current_password 0001                             ?_borrar_minutos 0001  
                                    ?_Setup 0001                                      _ADCON0 000FC2  
                                    _ADCON1 000FC1                         ?_inicializar_alarma 0001  
                                    _EECON2 000FA7                                      _ANCON0 000F48  
                                    _ANCON1 000F49                            ___awdiv@dividend 0001  
                            __CFG_WDTEN$OFF 000000                     __end_of_accionar_alarma E386  
                          RtccWriteDate@pDt 0001                           ??_actualizar_hora 001A  
                                    _RTCCFG 000F3F                     ??_borrar_nuevo_password 0001  
                            __CFG_WPCFG$OFF 000000      mostrar_guardar_temporal_password@tecla 0039  
                     __end_of_clear_display DE08                            __end_of_caratula EECE  
                      cambiar_minutos@tecla 0037                              __CFG_WPDIS$OFF 000000  
                     _cancelar_cambio_fecha DB88                              __CFG_XINST$OFF 000000  
                __size_of_verficar_password 0078                            _cambiar_mes$1486 0038  
                              _cambiar_anio E792                                _cambiar_hora E2C0  
                          __end_of_lcd_init E88E              guardar_password_temporal@valor 0008  
                          __end_of_lcd_putc E10A                           ?_validar_password 0001  
                      ??_inicializar_alarma 0001                                      ___wmul DE72  
                                 ??___awdiv 0005                              __CFG_STVREN$ON 000000  
                                 ??___awmod 0005                                      _diasem 00F7  
                                    _anio_d 00EB                                      _anio_u 00EC  
                                 ??___lwdiv 0005                                   ??___lwmod 000C  
         __size_of_cancelar_cambio_password 0024                    ??_menu_ingresar_password 000D  
                 ?_cancelar_cambio_password 0001                          ??_validar_password 0001  
                                    _hora_d 00F0                                      _hora_u 00F1  
                                    clear_0 E468                                      clear_1 E474  
                                    clear_2 E482                            ___awdiv@quotient 0007  
                                    _minuto 00FD            __end_of_mostrar_guardar_password DFFE  
                           ___awmod@divisor 0003                             ___awmod@counter 0005  
                         cambiar_hora@tecla 0037                       __end_of_RtccWriteDate F4FE  
                     __end_of_RtccWriteTime F296                  ??_borrar_temporal_password 0001  
                          RtccWriteTime@pTm 0001                    __size_of_cambiar_minutos 0074  
                  _guardar_tecla_presionada E88E                                __pdataCOMRAM 005A  
                                 ??_isdigit 0001                        __size_of_borrar_anio 0012  
                          ??_imprimir_tecla 0024                        __size_of_borrar_hora 0010  
 __end_of_mostrar_guardar_temporal_password DF1A  __size_of_mostrar_guardar_temporal_password 002C  
       ??_mostrar_guardar_temporal_password 0039          ?_mostrar_guardar_temporal_password 0001  
         _mostrar_guardar_temporal_password DEEE                                __mediumconst FE8A  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                                   ??_sprintf 0017  
                                __accesstop 0060                     __end_of__initialization E4C8  
                        __size_of_Write_RTC 0186                               ___rparam_used 000001  
            __size_of_menu_cambiar_password 00FC               __end_of_menu_cambiar_password F18A  
                              _caratula$788 0026                              __pcstackCOMRAM 0001  
                             __end_of_Setup E0BE                  __size_of_inicializar_fecha 002E  
                              __pidataBANK0 DB80                 __end_of_actualizar_password EC70  
                           __CFG_DSWDTPS$G2 000000                  __size_of_restaurar_comando 001C  
                  __size_of_obtener_dia_mes 00EA                         leer_teclado@ocultar 003E  
                ??_desactivar_sonido_alarma 0001                      ??_cancelar_cambio_hora 0001  
            mostrar_titulo_menu@titulo_menu 000B                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                                     ??_Setup 000E  
                         lcd_gotoxy@address 0007                          __size_of_lcd_putrs 0054  
                     _activar_sonido_alarma DB7A                                sprintf@width 0021  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                 ?_Read_RTC 0001                            ?_accionar_alarma 0001  
                           _tamanio_comando 0047                                  _dia_semana 00ED  
                 RtccWriteTime@tempHourWDay 000A                                  __pnvCOMRAM 005E  
                     _setear_comando_alarma DCBE                          actualiza_dia@valor 0018  
                  __end_of_guardar_elemento F9B2                      ?_cancelar_cambio_fecha 0001  
                           _tamanio_minutos 00E7                 __size_of_menu_cambiar_fecha 00D6  
         __size_of_guardar_elemento_arreglo 0076               __size_of_menu_cambiar_horario 0096  
                      __end_of_leer_teclado F66C                   ?_guardar_elemento_arreglo 0001  
                       _inicializar_teclado DE9A                           _intentos_fallidos 0096  
                                 ?_RtccWrOn 0001                              lcd_send_byte@n 0003  
                                   ?___wmul 0001                     menu_ingresar_password@i 000E  
                             ?_RtccReadDate 0001                   __size_of_inicializar_hora 0020  
                             ?_RtccReadTime 0001                            _ingresar_comando DB9C  
                              ?_Delay1KTCYx 0001             __size_of_menu_ingresar_password 00B4  
                        guardar_comando@aux 0026                           __end_of_Write_RTC F7F2  
                  ?_mensaje_alarma_activada 0001                          _actualiza_elemento DC90  
                           _convertir_a_int DD66                       cambiar_mes@validacion 0035  
                                _lcd_comand DBB2                                   ?_caratula 0024  
                 confirmar_nuevo_password@i 000E                        ?_inicializar_teclado 0001  
                  actualizar_password@valor 0010                                  _lcd_gotoxy DE2A  
                                   _RTCVALH 000F99                                     _RTCVALL 000F98  
                       ?_actualiza_elemento 0016                                   ?_lcd_init 0001  
                         ??_cambiar_minutos 0035                                   ?_lcd_putc 0001  
                                _borrar_dia DBD0               guardar_elemento_arreglo@valor 0003  
                                _borrar_mes DBC0                  ?_guardar_password_temporal 0001  
                  _confirmar_nuevo_password EA1E                                  ??_Read_RTC 0013  
         __size_of_mostrar_guardar_password 0030                   ?_mostrar_guardar_password 0001  
                ??_guardar_current_password 0008                           _cambiar_anio$1490 0038  
                actualiza_elemento@elemento 0016                                     __Hparam 0000  
                             ??_cambiar_dia 0035                         _mostrar_titulo_menu DCA6  
                             ??_cambiar_mes 0035                                     __Lparam 0000  
                  __size_of_lcd_send_nibble 0076                                  ??_RtccWrOn 0001  
                      guardar_comando@tecla 003A                        guardar_elemento@doit 002C  
                            ??_RtccReadDate 0003                                  _autorizado 0045  
                      ??_actualiza_elemento 0012                              ??_RtccReadTime 0003  
                                   ___awdiv EAAC                           __end_of_lcd_putrs E1AA  
                                   ___awmod E90E                             __size_of___wmul 0028  
                                   ___lwdiv E204                                     ___lwmod E10A  
                               _RtccTimeVal 006F                                  fecha@month 00DF  
                                   __pcinit E462                                     _fecha_d 00EE  
                                   _fecha_u 00EF                                     __ramtop 0F00  
             mostrar_guardar_password@tecla 0039            __end_of_borrar_temporal_password DC00  
                          ??_borrar_minutos 0001                                     __ptext0 F9B2  
                                   __ptext1 DCBE                                     __ptext2 F08E  
                                   __ptext3 E71A                                     __ptext4 EB42  
                                   __ptext5 EECE                                     __ptext6 DCA6  
                                   __ptext7 DFA0                                     __ptext8 F4FE  
                                   __ptext9 E88E                                     _buffer2 00AA  
            ?_inicializar_intentos_fallidos 0001                                     _comando 00D3  
                                 _T1CONbits 000FCD                                     _dpowers FE8B  
                                   _isdigit DDC4                       ??_inicializar_teclado 0001  
                           _actualizar_hora DE08                            ___awmod@dividend 0001  
                                ??_caratula 0026                        ?_mostrar_titulo_menu 000B  
                                   _minutes 0079                          _actualizar_minutos DDA4  
                                   _segundo 00A0                           _desactivar_alarma DEC4  
                    ?_activar_sonido_alarma 0001                           ??_obtener_dia_mes 0007  
                                   _sprintf FB92                    ??_guardar_nuevo_password 0008  
                                ??_lcd_init 0005                          ?_desactivar_alarma 0001  
                                ??_lcd_putc 0008                        end_of_initialization E4C8  
                    _menu_ingresar_password EC70                         ?_actualizar_minutos 0016  
                    ?_setear_comando_alarma 0001                        lcd_send_byte@address 0004  
                             __Lmediumconst FE8A                     actualiza_elemento@valor 0018  
            __size_of_borrar_nuevo_password 0012                         ??_desactivar_alarma 0001  
          __size_of_borrar_current_password 0010               __end_of_borrar_nuevo_password DC7C  
                guardar_elemento@dato_fecha 002A                                     postdec1 000FE5  
                                   postdec2 000FDD                  ??_guardar_tecla_presionada 003E  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                        _tamanio_new_password 00E9  
                   __end_of_convertir_a_int DD84                       __end_of_lcd_send_byte E030  
                      ??_actualizar_minutos 001A                         __end_of_cambiar_dia E204  
                       __end_of_cambiar_mes E462            __end_of_desactivar_sonido_alarma DC90  
                                 _PORTAbits 000F80                                   _PORTCbits 000F82  
                          __CFG_DSBOREN$OFF 000000                   __end_of_desactivar_alarma DEEE  
                     ??_mostrar_titulo_menu 000D                                 ?_lcd_comand 0001  
                          __CFG_CPUDIV$OSC1 000000                                   _TRISBbits 000F93  
                               ?_lcd_gotoxy 0005                   __size_of_validar_password 0072  
                    __size_of_actualiza_dia 001E                             _LCD_INIT_STRING FE95  
                               ?_borrar_dia 0001                                 ?_borrar_mes 0001  
                      convertir_a_int@array 000E                        convertir_a_int@valor 0010  
       mostrar_guardar_nuevo_password@tecla 0039                       __size_of_leer_teclado 016E  
                          _current_password 00BE                            __CFG_IOL1WAY$OFF 000000  
                 RtccWriteDate@tempDayMonth 000A                         __CFG_MSSP7B_EN$MSK7 000000  
                             leer_teclado@i 0041                            Delay100TCYx@unit 0001  
                          _inicializar_hora DD84                 __size_of_inicializar_alarma 0076  
                   __end_of_actualizar_hora DE2A                              __end_of___wmul DE9A  
                             __pidataCOMRAM DB76                   RtccWriteDate@tempHourWDay 000C  
                     actualiza_dia@elemento 0016                               ??_borrar_anio 0001  
                             ??_borrar_hora 0001                           ??_lcd_send_nibble 0001  
         confirmar_nuevo_password@confirmar 0009                        __size_of_Delay1KTCYx 0012  
                          __CFG_DSWDTEN$OFF 000000                            cambiar_dia@tecla 0037  
                    __size_of_clear_display 0022                         start_initialization E462  
                        main@ocultar_teclas 0043                                _leer_teclado F4FE  
                      __end_of_RtccReadDate EA1E                        __end_of_RtccReadTime E3F4  
           __size_of_guardar_nuevo_password 001C                     ??_cancelar_cambio_fecha 0001  
                  __end_of_ingresar_comando DBA6                        RtccWriteTime@wasAlrm 0006  
                           _puntero_funcion 009E           __size_of_borrar_temporal_password 0010  
                      RtccWriteTime@wasWrEn 0007            __end_of_guardar_current_password DD10  
                 ?_borrar_temporal_password 0001               guardar_current_password@valor 0008  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                         ?_guardar_elemento 0024                      __size_of_RtccWriteTime 010C  
                         __size_of_Read_RTC 0122                  guardar_elemento@validacion 0028  
                  _cancelar_cambio_password DE4E                                 _cambiar_dia E1AA  
                       __size_of_lcd_comand 000E                          ??_guardar_elemento 002E  
                               _cambiar_mes E3F4               menu_cambiar_password@verifica 000D  
                     _menu_cambiar_password F08E                            cambiar_mes@tecla 0037  
                             _actualiza_dia DD48                         __size_of_lcd_gotoxy 0024  
                                  ??___wmul 0005                            ?_convertir_a_int 000E  
                               __pdataBANK0 00F7                           __size_of_RtccWrOn 0012  
                           RtccWriteTime@di 0003                            __CFG_LPT1OSC$OFF 000000  
                       __size_of_borrar_dia 0010                         __size_of_borrar_mes 0010  
                           _cambiar_minutos E544                                 _ALRMCFGbits 000F91  
                   __end_of_LCD_INIT_STRING FE99                  __size_of_desactivar_alarma 002A  
              __end_of_menu_cambiar_horario EBD8                  ??_confirmar_nuevo_password 000C  
                               __pbssCOMRAM 0045                __size_of_actualizar_password 0098  
             __size_of_cancelar_cambio_hora 000A                         __end_of_borrar_anio DC58  
                                 _Write_RTC F66C                         __end_of_borrar_hora DBF0  
                              _isdigit$2763 0002                           __size_of_caratula 00D6  
                           Delay1KTCYx@unit 0001                              fecha@valor_max 00A6  
                            fecha@valor_min 00A8                 ??_guardar_password_temporal 0008  
                  __size_of_guardar_comando 0060                           __size_of_lcd_init 0080  
          __size_of_mensaje_alarma_activada 002E       __end_of_confirmar_actualizar_password DF72  
    __size_of_confirmar_actualizar_password 002C               _confirmar_actualizar_password DF46  
                               sprintf@flag 0020                           __size_of_lcd_putc 004C  
         __size_of_desactivar_sonido_alarma 0014                  __end_of_menu_cambiar_fecha EFA4  
                               sprintf@prec 001B                     _borrar_current_password DC00  
                   __size_of_imprimir_tecla 0046                   ?_desactivar_sonido_alarma 0001  
                              fecha@minutes 00DC                                   __pnvBANK0 00EB  
                          _tamanio_password 0058                               _clear_display DDE6  
                          ___lwdiv@dividend 0001                          verficar_password@i 0005  
                            ?_actualiza_dia 0016                               ?_Delay100TCYx 0001  
          __end_of_guardar_tecla_presionada E90E                    __size_of_accionar_alarma 0066  
                             __pmediumconst FE8A                                    ?___awdiv 0001  
                                  ?___awmod 0001                      _guardar_nuevo_password DD10  
           guardar_elemento_arreglo@arreglo 0001                           guardar_elemento@i 0031  
                                  ?___lwdiv 0001                                    ?___lwmod 0008  
                                 _encendida 008A                            ?_actualizar_hora 0016  
                   RtccWriteTime@tempMinSec 0008                             _obtener_dia_mes EFA4  
           guardar_elemento_arreglo@tamanio 0004                 guardar_nuevo_password@valor 0008  
                                 _lcd_putrs E156                               _RtccWriteDate F3B8  
                   ??_activar_sonido_alarma 0001                               _RtccWriteTime F18A  
                                  ?_isdigit 0001                        __CFG_RTCOSC$T1OSCREF 000000  
                   actualizar_hora@elemento 0016                     ?_menu_ingresar_password 0001  
                          _validar_password E4D2                              __size_of_Setup 0048  
                                ?_Write_RTC 0001                     ??_setear_comando_alarma 0001  
                          ___lwdiv@quotient 0005                            clear_display@pos 000B  
                                 fecha@hour 00D9                                    ?_sprintf 000D  
                                 fecha@year 00E2             ??_inicializar_intentos_fallidos 0001  
                          _RtccAlrmTimeDate 0100                    _guardar_elemento_arreglo E6A4  
                            ___wmul@product 0005                                    _LATAbits 000F89  
                                  _LATBbits 000F8A                                    _LATCbits 000F8B  
                            ?_clear_display 000B               confirmar_nuevo_password@valor 000B  
                                  _PIE3bits 000FA3                                   _segundo_d 005E  
                            ??_Delay100TCYx 0001                                   _segundo_u 00F6  
                    ?_menu_cambiar_password 0001                               ?_cambiar_anio 0001  
                             ?_cambiar_hora 0001                     __end_of_cambiar_minutos E5B8  
                              _new_password 00C5                            __CFG_WDTPS$32768 000000  
                                 _valor_max 00A2                                   _valor_min 00A4  
               __size_of_actualiza_elemento 0016                          RtccWriteDate@wasOn 0005  
                 cambiar_minutos@validacion 0035                   guardar_tecla_presionada@i 003C  
                 _guardar_password_temporal DD2C                 __end_of_inicializar_teclado DEC4  
                        _Rtcc_read_TimeDate 0108                              ?_RtccWriteDate 0001  
                                ?_lcd_putrs 0009                                 _borrar_anio DC46  
                         ___wmul@multiplier 0001                                 _borrar_hora DBE0  
                            ?_RtccWriteTime 0001           __size_of_guardar_current_password 001C  
                            caratula@titulo 0024          confirmar_actualizar_password@tecla 0039  
                 ?_guardar_current_password 0001                                   lcd_init@i 0005  
            __end_of_menu_ingresar_password ED24                       __size_of_RtccReadDate 008E  
                              ??_lcd_comand 0005                                   lcd_putc@c 0008  
                     __size_of_RtccReadTime 006E                         imprimir_tecla@tecla 0038  
                              ??_lcd_gotoxy 0006                    _mostrar_guardar_password DFCE  
                  __end_of_inicializar_hora DDA4                                ??_borrar_dia 0001  
                                 copy_data0 E49C                                   copy_data1 E4BC  
                              ??_borrar_mes 0001                   ??_borrar_current_password 0001  
                                  _Read_RTC F296                        _cambiar_minutos$1509 0038  
                              _tamanio_anio 00E5                                _tamanio_hora 0054  
                           ??_actualiza_dia 0016                              ??_cambiar_anio 0035  
                           _lcd_send_nibble E5B8                                    __Hrparam 0000  
                            ??_cambiar_hora 0035                        _menu_cambiar_horario EB42  
                   __end_of_obtener_dia_mes F08E                                    _RtccDate 004A  
            ?_confirmar_actualizar_password 0001                                    __Lrparam 0000  
                         ??_guardar_comando 0024                       _borrar_nuevo_password DC6A  
                                  _RtccTime 004E                                    _RtccWrOn DC10  
                        _funcion_pulsador_A 008C                          _funcion_pulsador_B 008E  
                        _funcion_pulsador_C 0090                          _funcion_pulsador_D 0092  
                        __end_of_lcd_comand DBC0                       guardar_elemento@array 0024  
                     cambiar_dia@validacion 0035                       guardar_elemento@tecla 0030  
                     guardar_elemento@valor 0033               guardar_elemento@tamanio_array 0026  
                        __end_of_lcd_gotoxy DE4E                                _RtccReadDate E990  
                          __size_of___awdiv 0096                            __size_of___awmod 0082  
                              _RtccReadTime E386                 __end_of_mostrar_titulo_menu DCBE  
                          __size_of___lwdiv 005C                         ingresar_comando@key 003B  
               __size_of_actualizar_minutos 0020                            __size_of___lwmod 004C  
          ??_mostrar_guardar_nuevo_password 0039             ?_mostrar_guardar_nuevo_password 0001  
                        __end_of_borrar_dia DBE0                          __end_of_borrar_mes DBD0  
                         ??_accionar_alarma 0010            __end_of_confirmar_nuevo_password EAAC  
                              _RtccTimeDate 0060                                  sprintf@val 001E  
                                  _activada 0084                                    _caratula EDF8  
                          __size_of_isdigit 0022                             ___lwdiv@divisor 0003  
                    cambiar_anio@validacion 0035                                 ??_Write_RTC 000E  
                           ___lwdiv@counter 0007           __size_of_guardar_tecla_presionada 0080  
                                  __ptext10 E320                                    __ptext11 DB9C  
                                  __ptext20 DEEE                                    __ptext12 DF46  
                                  __ptext21 DD2C                                    __ptext13 DF1A  
                                  __ptext30 E90E                                    __ptext22 DD10  
                                  __ptext14 DFCE                                    __ptext31 F7F2  
                                  __ptext23 E260                                    __ptext15 E2C0  
                                  __ptext40 DB88                                    __ptext32 DD66  
                                  __ptext24 E030                                    __ptext16 E544  
                                  __ptext41 DC00                                    __ptext33 ED24  
                                  __ptext25 EBD8                                    __ptext17 E1AA  
                                  __ptext50 DEC4                                    __ptext42 DC6A  
                                  __ptext34 DE08                                    __ptext26 EA1E  
                                  __ptext18 E3F4                                    __ptext51 DD84  
                                  __ptext43 DBF0                                    __ptext35 DD48  
                                  __ptext27 DCF4                                    __ptext19 E792  
                                  __ptext60 EDF8                                    __ptext52 DF72  
                                  __ptext44 DBE0                                    __ptext36 DC90  
                                  __ptext28 E6A4                                    __ptext61 FB92  
                                  __ptext53 EC70                                    __ptext45 DC58  
                                  __ptext37 DDA4                                    __ptext29 EFA4  
                                  __ptext70 E076                                    __ptext62 DDC4  
                                  __ptext54 E4D2                                    __ptext46 DBD0  
                                  __ptext38 DE4E                                    __ptext71 E80E  
                                  __ptext63 DE72                                    __ptext55 DDE6  
                                  __ptext47 DBC0                                    __ptext39 DB92  
                                  __ptext80 F3B8                                    __ptext72 DC34  
                                  __ptext64 E10A                                    __ptext56 DE9A  
                                  __ptext48 DC46                                    __ptext81 DC10  
                                  __ptext73 DBB2                                    __ptext65 E204  
                                  __ptext57 E62E                                    __ptext49 DCD8  
                                  __ptext82 F296                                    __ptext74 DFFE  
                                  __ptext66 E156                                    __ptext58 DC7C  
                                  __ptext83 E386                                    __ptext75 E5B8  
                                  __ptext67 E0BE                                    __ptext59 DBA6  
                                  __ptext84 E990                                    __ptext76 DC22  
                                  __ptext68 DE2A                                    __ptext85 0000  
                                  __ptext77 F66C                                    __ptext69 DB7A  
                                  __ptext78 EAAC                                    __ptext79 F18A  
                 ?_guardar_tecla_presionada 003C                                    _lcd_init E80E  
                                  _lcd_putc E0BE                     __size_of_borrar_minutos 0012  
                          __size_of_sprintf 02F8                     _mensaje_alarma_activada DFA0  
                ??_cancelar_cambio_password 0001                             ??_clear_display 000D  
                         ?_ingresar_comando 0001                      __size_of_lcd_send_byte 0032  
                            _imprimir_tecla E030              __size_of_cancelar_cambio_fecha 000A  
                                  fecha@day 00D6                               __size_of_atoi 00D4  
                             __size_of_main 01E0               __end_of_cancelar_cambio_fecha DB92  
                        ??_ingresar_comando 003B                       ?_menu_cambiar_horario 0001  
                                  _minuto_d 00F4                                    _minuto_u 00F5  
     __end_of_inicializar_intentos_fallidos DBB2      __size_of_inicializar_intentos_fallidos 000C  
             _inicializar_intentos_fallidos DBA6                                    _password 0068  
                       _actualizar_password EBD8                  __end_of_inicializar_alarma E6A4  
                              ?_cambiar_dia 0001                                ?_cambiar_mes 0001  
                                  _temporal 00CC                            ?_cambiar_minutos 0001  
                                  atoi@sign 000B             __end_of_borrar_current_password DC10  
                             ??_Delay1KTCYx 0001                             ??_RtccWriteDate 0004  
                           ??_RtccWriteTime 0004                actualizar_password@confirmar 0011  
                               ??_lcd_putrs 000B                   __size_of_guardar_elemento 01C0  
                               _OSCTUNEbits 000F9B                                  _INTCONbits 000FF2  
                               _tamanio_dia 0052                        ?_actualizar_password 0001  
                               _tamanio_mes 0056                          RtccWriteTime@wasOn 0005  
                      __end_of_Delay100TCYx DC34                                    isdigit@c 0003  
                    __end_of_imprimir_tecla E076                                   sprintf@ap 001C  
                   __end_of_lcd_send_nibble E62E                                   sprintf@sp 000D  
                          ___lwmod@dividend 0008                __end_of_cancelar_cambio_hora DB9C  
                    ?_borrar_nuevo_password 0001                     ?_guardar_nuevo_password 0001  
                                _OSCCONbits 000FD3                            ?_obtener_dia_mes 0001  
                  __end_of_validar_password E544                       RtccWriteDate@tempYear 0007  
                         imprimir_tecla@aux 0024                          _menu_cambiar_fecha EECE  
                             _lcd_send_byte DFFE                                  _RTCCFGbits 000F3F  
                                  sprintf@c 0023                                    sprintf@f 000F  
                     ??_actualizar_password 0010                             ___lwmod@divisor 000A  
                 verficar_password@verifica 0001                         ?_menu_cambiar_fecha 0001  
                       __end_of_Delay1KTCYx DC46                             ___lwmod@counter 000C  
            __size_of_activar_sonido_alarma 0006                    __size_of_convertir_a_int 001E  
             __end_of_activar_sonido_alarma DB80                        __end_of_cambiar_anio E80E  
                ??_guardar_elemento_arreglo 0006                        actualizar_hora@valor 0018  
        __size_of_guardar_password_temporal 001C                        RtccWriteDate@wasAlrm 0006  
                      __end_of_cambiar_hora E320                        RtccWriteDate@wasWrEn 0009  
                 ??_mensaje_alarma_activada 000B                    _borrar_temporal_password DBF0  
            __size_of_setear_comando_alarma 001A                             ?_imprimir_tecla 0001  
             __end_of_setear_comando_alarma DCD8                     ??_menu_cambiar_password 000D  
                    ??_menu_cambiar_horario 000D              __end_of_guardar_nuevo_password DD2C  
         __size_of_confirmar_nuevo_password 008E                   ?_confirmar_nuevo_password 0009  
                      ??_menu_cambiar_fecha 000D                       lcd_send_nibble@nibble 0002  
