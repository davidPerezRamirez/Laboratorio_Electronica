

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 15 23:55:50 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	idataCOMRAM
    86  00DF78                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _anio
    90  00DF78  000F               	dw	15
    91                           
    92                           ;initializer for _mes
    93  00DF7A  0009               	dw	9
    94                           
    95                           	psect	idataBANK0
    96  00DFCA                     __pidataBANK0:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _password
   100  00DFCA  31                 	db	49
   101  00DFCB  32                 	db	50
   102  00DFCC  33                 	db	51
   103  00DFCD  34                 	db	52
   104  00DFCE  35                 	db	53
   105  00DFCF  36                 	db	54
   106  00DFD0  00                 	db	0
   107                           
   108                           ;initializer for _activada
   109  00DFD1  0001               	dw	1
   110                           
   111                           ;initializer for _diasem
   112  00DFD3  0003               	dw	3
   113                           
   114                           ;initializer for _comando
   115  00DFD5  78                 	db	120
   116  00DFD6  78                 	db	120
   117  00DFD7  00                 	db	0
   118                           
   119                           ;initializer for _dia
   120  00DFD8  0008               	dw	8
   121                           
   122                           ;initializer for _hora
   123  00DFDA  0012               	dw	18
   124                           
   125                           ;initializer for _minuto
   126  00DFDC  001E               	dw	30
   127                           
   128                           	psect	mediumconst
   129  00FEBA                     __pmediumconst:
   130                           	opt stack 0
   131  00FEBA  00                 	db	0
   132  00FEBB                     _dpowers:
   133                           	opt stack 0
   134  00FEBB  0001               	dw	1
   135  00FEBD  000A               	dw	10
   136  00FEBF  0064               	dw	100
   137  00FEC1  03E8               	dw	1000
   138  00FEC3  2710               	dw	10000
   139  00FEC5                     __end_of_dpowers:
   140                           	opt stack 0
   141  00FEC5                     _LCD_INIT_STRING:
   142                           	opt stack 0
   143  00FEC5  28                 	db	40
   144  00FEC6  0C                 	db	12
   145  00FEC7  01                 	db	1
   146  00FEC8  06                 	db	6
   147  00FEC9                     __end_of_LCD_INIT_STRING:
   148                           	opt stack 0
   149  00FEC9                     STR_17:
   150                           
   151                           ; BSR set to: 15
   152  00FEC9  50                 	db	80	;'P'
   153  00FECA  61                 	db	97	;'a'
   154  00FECB  73                 	db	115	;'s'
   155  00FECC  73                 	db	115	;'s'
   156  00FECD  77                 	db	119	;'w'
   157  00FECE  6F                 	db	111	;'o'
   158  00FECF  72                 	db	114	;'r'
   159  00FED0  64                 	db	100	;'d'
   160  00FED1  20                 	db	32
   161  00FED2  61                 	db	97	;'a'
   162  00FED3  63                 	db	99	;'c'
   163  00FED4  74                 	db	116	;'t'
   164  00FED5  75                 	db	117	;'u'
   165  00FED6  61                 	db	97	;'a'
   166  00FED7  6C                 	db	108	;'l'
   167  00FED8  3A                 	db	58	;':'
   168  00FED9  20                 	db	32
   169  00FEDA  20                 	db	32
   170  00FEDB  20                 	db	32
   171  00FEDC  20                 	db	32
   172  00FEDD  20                 	db	32
   173  00FEDE  20                 	db	32
   174  00FEDF  20                 	db	32
   175  00FEE0  20                 	db	32
   176  00FEE1  20                 	db	32
   177  00FEE2  20                 	db	32
   178  00FEE3  00                 	db	0
   179  00FEE4                     STR_11:
   180                           
   181                           ; BSR set to: 15
   182  00FEE4  20                 	db	32
   183  00FEE5  20                 	db	32
   184  00FEE6  20                 	db	32
   185  00FEE7  20                 	db	32
   186  00FEE8  20                 	db	32
   187  00FEE9  20                 	db	32
   188  00FEEA  20                 	db	32
   189  00FEEB  20                 	db	32
   190  00FEEC  20                 	db	32
   191  00FEED  20                 	db	32
   192  00FEEE  20                 	db	32
   193  00FEEF  20                 	db	32
   194  00FEF0  20                 	db	32
   195  00FEF1  20                 	db	32
   196  00FEF2  20                 	db	32
   197  00FEF3  20                 	db	32
   198  00FEF4  20                 	db	32
   199  00FEF5  20                 	db	32
   200  00FEF6  20                 	db	32
   201  00FEF7  20                 	db	32
   202  00FEF8  20                 	db	32
   203  00FEF9  20                 	db	32
   204  00FEFA  20                 	db	32
   205  00FEFB  20                 	db	32
   206  00FEFC  20                 	db	32
   207  00FEFD  00                 	db	0
   208  00FEFE                     STR_20:
   209                           
   210                           ; BSR set to: 15
   211  00FEFE  43                 	db	67	;'C'
   212  00FEFF  6F                 	db	111	;'o'
   213  00FF00  6E                 	db	110	;'n'
   214  00FF01  66                 	db	102	;'f'
   215  00FF02  69                 	db	105	;'i'
   216  00FF03  72                 	db	114	;'r'
   217  00FF04  6D                 	db	109	;'m'
   218  00FF05  65                 	db	101	;'e'
   219  00FF06  20                 	db	32
   220  00FF07  70                 	db	112	;'p'
   221  00FF08  61                 	db	97	;'a'
   222  00FF09  73                 	db	115	;'s'
   223  00FF0A  73                 	db	115	;'s'
   224  00FF0B  3A                 	db	58	;':'
   225  00FF0C  20                 	db	32
   226  00FF0D  20                 	db	32
   227  00FF0E  20                 	db	32
   228  00FF0F  20                 	db	32
   229  00FF10  20                 	db	32
   230  00FF11  20                 	db	32
   231  00FF12  20                 	db	32
   232  00FF13  20                 	db	32
   233  00FF14  00                 	db	0
   234  00FF15                     STR_15:
   235                           
   236                           ; BSR set to: 15
   237  00FF15  49                 	db	73	;'I'
   238  00FF16  6E                 	db	110	;'n'
   239  00FF17  73                 	db	115	;'s'
   240  00FF18  65                 	db	101	;'e'
   241  00FF19  72                 	db	114	;'r'
   242  00FF1A  74                 	db	116	;'t'
   243  00FF1B  65                 	db	101	;'e'
   244  00FF1C  20                 	db	32
   245  00FF1D  6D                 	db	109	;'m'
   246  00FF1E  69                 	db	105	;'i'
   247  00FF1F  6E                 	db	110	;'n'
   248  00FF20  75                 	db	117	;'u'
   249  00FF21  74                 	db	116	;'t'
   250  00FF22  6F                 	db	111	;'o'
   251  00FF23  73                 	db	115	;'s'
   252  00FF24  3A                 	db	58	;':'
   253  00FF25  20                 	db	32
   254  00FF26  20                 	db	32
   255  00FF27  20                 	db	32
   256  00FF28  20                 	db	32
   257  00FF29  20                 	db	32
   258  00FF2A  00                 	db	0
   259  00FF2B                     STR_18:
   260                           
   261                           ; BSR set to: 15
   262  00FF2B  4E                 	db	78	;'N'
   263  00FF2C  75                 	db	117	;'u'
   264  00FF2D  65                 	db	101	;'e'
   265  00FF2E  76                 	db	118	;'v'
   266  00FF2F  6F                 	db	111	;'o'
   267  00FF30  20                 	db	32
   268  00FF31  70                 	db	112	;'p'
   269  00FF32  61                 	db	97	;'a'
   270  00FF33  73                 	db	115	;'s'
   271  00FF34  73                 	db	115	;'s'
   272  00FF35  3A                 	db	58	;':'
   273  00FF36  20                 	db	32
   274  00FF37  20                 	db	32
   275  00FF38  20                 	db	32
   276  00FF39  20                 	db	32
   277  00FF3A  20                 	db	32
   278  00FF3B  20                 	db	32
   279  00FF3C  20                 	db	32
   280  00FF3D  20                 	db	32
   281  00FF3E  00                 	db	0
   282  00FF3F                     STR_16:
   283                           
   284                           ; BSR set to: 15
   285  00FF3F  49                 	db	73	;'I'
   286  00FF40  6E                 	db	110	;'n'
   287  00FF41  73                 	db	115	;'s'
   288  00FF42  65                 	db	101	;'e'
   289  00FF43  72                 	db	114	;'r'
   290  00FF44  74                 	db	116	;'t'
   291  00FF45  65                 	db	101	;'e'
   292  00FF46  20                 	db	32
   293  00FF47  68                 	db	104	;'h'
   294  00FF48  6F                 	db	111	;'o'
   295  00FF49  72                 	db	114	;'r'
   296  00FF4A  61                 	db	97	;'a'
   297  00FF4B  3A                 	db	58	;':'
   298  00FF4C  20                 	db	32
   299  00FF4D  20                 	db	32
   300  00FF4E  20                 	db	32
   301  00FF4F  20                 	db	32
   302  00FF50  20                 	db	32
   303  00FF51  00                 	db	0
   304  00FF52                     STR_12:
   305                           
   306                           ; BSR set to: 15
   307  00FF52  49                 	db	73	;'I'
   308  00FF53  6E                 	db	110	;'n'
   309  00FF54  73                 	db	115	;'s'
   310  00FF55  65                 	db	101	;'e'
   311  00FF56  72                 	db	114	;'r'
   312  00FF57  74                 	db	116	;'t'
   313  00FF58  65                 	db	101	;'e'
   314  00FF59  20                 	db	32
   315  00FF5A  61                 	db	97	;'a'
   316  00FF5B  6E                 	db	110	;'n'
   317  00FF5C  69                 	db	105	;'i'
   318  00FF5D  6F                 	db	111	;'o'
   319  00FF5E  3A                 	db	58	;':'
   320  00FF5F  20                 	db	32
   321  00FF60  20                 	db	32
   322  00FF61  20                 	db	32
   323  00FF62  20                 	db	32
   324  00FF63  20                 	db	32
   325  00FF64  00                 	db	0
   326  00FF65                     STR_32:
   327                           
   328                           ; BSR set to: 15
   329  00FF65  76                 	db	118	;'v'
   330  00FF66  61                 	db	97	;'a'
   331  00FF67  6C                 	db	108	;'l'
   332  00FF68  6F                 	db	111	;'o'
   333  00FF69  72                 	db	114	;'r'
   334  00FF6A  20                 	db	32
   335  00FF6B  3E                 	db	62	;'>'
   336  00FF6C  3D                 	db	61	;'='
   337  00FF6D  25                 	db	37
   338  00FF6E  64                 	db	100	;'d'
   339  00FF6F  20                 	db	32
   340  00FF70  79                 	db	121	;'y'
   341  00FF71  20                 	db	32
   342  00FF72  3C                 	db	60	;'<'
   343  00FF73  3D                 	db	61	;'='
   344  00FF74  25                 	db	37
   345  00FF75  64                 	db	100	;'d'
   346  00FF76  00                 	db	0
   347  00FF77                     STR_14:
   348                           
   349                           ; BSR set to: 15
   350  00FF77  49                 	db	73	;'I'
   351  00FF78  6E                 	db	110	;'n'
   352  00FF79  73                 	db	115	;'s'
   353  00FF7A  65                 	db	101	;'e'
   354  00FF7B  72                 	db	114	;'r'
   355  00FF7C  74                 	db	116	;'t'
   356  00FF7D  65                 	db	101	;'e'
   357  00FF7E  20                 	db	32
   358  00FF7F  64                 	db	100	;'d'
   359  00FF80  69                 	db	105	;'i'
   360  00FF81  61                 	db	97	;'a'
   361  00FF82  3A                 	db	58	;':'
   362  00FF83  20                 	db	32
   363  00FF84  20                 	db	32
   364  00FF85  20                 	db	32
   365  00FF86  20                 	db	32
   366  00FF87  20                 	db	32
   367  00FF88  00                 	db	0
   368  00FF89                     STR_13:
   369                           
   370                           ; BSR set to: 15
   371  00FF89  49                 	db	73	;'I'
   372  00FF8A  6E                 	db	110	;'n'
   373  00FF8B  73                 	db	115	;'s'
   374  00FF8C  65                 	db	101	;'e'
   375  00FF8D  72                 	db	114	;'r'
   376  00FF8E  74                 	db	116	;'t'
   377  00FF8F  65                 	db	101	;'e'
   378  00FF90  20                 	db	32
   379  00FF91  6D                 	db	109	;'m'
   380  00FF92  65                 	db	101	;'e'
   381  00FF93  73                 	db	115	;'s'
   382  00FF94  3A                 	db	58	;':'
   383  00FF95  20                 	db	32
   384  00FF96  20                 	db	32
   385  00FF97  20                 	db	32
   386  00FF98  20                 	db	32
   387  00FF99  20                 	db	32
   388  00FF9A  00                 	db	0
   389  00FF9B                     STR_5:
   390                           
   391                           ; BSR set to: 15
   392  00FF9B  49                 	db	73	;'I'
   393  00FF9C  6E                 	db	110	;'n'
   394  00FF9D  73                 	db	115	;'s'
   395  00FF9E  65                 	db	101	;'e'
   396  00FF9F  72                 	db	114	;'r'
   397  00FFA0  74                 	db	116	;'t'
   398  00FFA1  65                 	db	101	;'e'
   399  00FFA2  20                 	db	32
   400  00FFA3  70                 	db	112	;'p'
   401  00FFA4  61                 	db	97	;'a'
   402  00FFA5  73                 	db	115	;'s'
   403  00FFA6  73                 	db	115	;'s'
   404  00FFA7  77                 	db	119	;'w'
   405  00FFA8  6F                 	db	111	;'o'
   406  00FFA9  72                 	db	114	;'r'
   407  00FFAA  64                 	db	100	;'d'
   408  00FFAB  00                 	db	0
   409  00FFAC                     STR_1:
   410                           
   411                           ; BSR set to: 15
   412  00FFAC  25                 	db	37
   413  00FFAD  30                 	db	48	;'0'
   414  00FFAE  32                 	db	50	;'2'
   415  00FFAF  75                 	db	117	;'u'
   416  00FFB0  2F                 	db	47
   417  00FFB1  25                 	db	37
   418  00FFB2  30                 	db	48	;'0'
   419  00FFB3  32                 	db	50	;'2'
   420  00FFB4  75                 	db	117	;'u'
   421  00FFB5  2F                 	db	47
   422  00FFB6  25                 	db	37
   423  00FFB7  30                 	db	48	;'0'
   424  00FFB8  32                 	db	50	;'2'
   425  00FFB9  75                 	db	117	;'u'
   426  00FFBA  00                 	db	0
   427  00FFBB                     STR_2:
   428                           
   429                           ; BSR set to: 15
   430  00FFBB  25                 	db	37
   431  00FFBC  30                 	db	48	;'0'
   432  00FFBD  32                 	db	50	;'2'
   433  00FFBE  75                 	db	117	;'u'
   434  00FFBF  3A                 	db	58	;':'
   435  00FFC0  25                 	db	37
   436  00FFC1  30                 	db	48	;'0'
   437  00FFC2  32                 	db	50	;'2'
   438  00FFC3  75                 	db	117	;'u'
   439  00FFC4  3A                 	db	58	;':'
   440  00FFC5  25                 	db	37
   441  00FFC6  30                 	db	48	;'0'
   442  00FFC7  32                 	db	50	;'2'
   443  00FFC8  75                 	db	117	;'u'
   444  00FFC9  00                 	db	0
   445  00FFCA                     STR_6:
   446                           
   447                           ; BSR set to: 15
   448  00FFCA  45                 	db	69	;'E'
   449  00FFCB  52                 	db	82	;'R'
   450  00FFCC  52                 	db	82	;'R'
   451  00FFCD  4F                 	db	79	;'O'
   452  00FFCE  52                 	db	82	;'R'
   453  00FFCF  20                 	db	32
   454  00FFD0  70                 	db	112	;'p'
   455  00FFD1  61                 	db	97	;'a'
   456  00FFD2  73                 	db	115	;'s'
   457  00FFD3  73                 	db	115	;'s'
   458  00FFD4  00                 	db	0
   459  00FFD5                     STR_21:
   460                           
   461                           ; BSR set to: 15
   462  00FFD5  57                 	db	87	;'W'
   463  00FFD6  65                 	db	101	;'e'
   464  00FFD7  6C                 	db	108	;'l'
   465  00FFD8  63                 	db	99	;'c'
   466  00FFD9  6F                 	db	111	;'o'
   467  00FFDA  6D                 	db	109	;'m'
   468  00FFDB  65                 	db	101	;'e'
   469  00FFDC  20                 	db	32
   470  00FFDD  00                 	db	0
   471  00FFDE                     STR_7:
   472                           
   473                           ; BSR set to: 15
   474  00FFDE  25                 	db	37
   475  00FFDF  30                 	db	48	;'0'
   476  00FFE0  31                 	db	49	;'1'
   477  00FFE1  75                 	db	117	;'u'
   478  00FFE2  00                 	db	0
   479  00FFE3                     STR_4:
   480                           
   481                           ; BSR set to: 15
   482  00FFE3  4F                 	db	79	;'O'
   483  00FFE4  46                 	db	70	;'F'
   484  00FFE5  46                 	db	70	;'F'
   485  00FFE6  00                 	db	0
   486  00FFE7                     STR_3:
   487                           
   488                           ; BSR set to: 15
   489  00FFE7  4F                 	db	79	;'O'
   490  00FFE8  4E                 	db	78	;'N'
   491  00FFE9  00                 	db	0
   492  00FFEA                     STR_29:
   493                           
   494                           ; BSR set to: 15
   495  00FFEA  23                 	db	35
   496  00FFEB  00                 	db	0
   497  00FFEC                     STR_24:
   498                           
   499                           ; BSR set to: 15
   500  00FFEC  2A                 	db	42
   501  00FFED  00                 	db	0
   502  00FFEE                     STR_25:
   503                           
   504                           ; BSR set to: 15
   505  00FFEE  41                 	db	65	;'A'
   506  00FFEF  00                 	db	0
   507  00FFF0                     STR_26:
   508                           
   509                           ; BSR set to: 15
   510  00FFF0  42                 	db	66	;'B'
   511  00FFF1  00                 	db	0
   512  00FFF2                     STR_27:
   513                           
   514                           ; BSR set to: 15
   515  00FFF2  43                 	db	67	;'C'
   516  00FFF3  00                 	db	0
   517  00FFF4                     STR_30:
   518                           
   519                           ; BSR set to: 15
   520  00FFF4  44                 	db	68	;'D'
   521  00FFF5  00                 	db	0
   522  0000                     
   523                           ; #config settings
   524  00FFF6  00                 	db	0	; dummy byte at the end
   525  0000                     
   526                           	psect	nvCOMRAM
   527  00005E                     __pnvCOMRAM:
   528                           	opt stack 0
   529  00005E                     _segundo_d:
   530                           	opt stack 0
   531  00005E                     	ds	1
   532                           
   533                           	psect	nvBANK0
   534  0000F3                     __pnvBANK0:
   535                           	opt stack 0
   536  0000F3                     _anio_d:
   537                           	opt stack 0
   538  0000F3                     	ds	1
   539  0000F4                     _anio_u:
   540                           	opt stack 0
   541  0000F4                     	ds	1
   542  0000F5                     _dia_semana:
   543                           	opt stack 0
   544  0000F5                     	ds	1
   545  0000F6                     _fecha_d:
   546                           	opt stack 0
   547  0000F6                     	ds	1
   548  0000F7                     _fecha_u:
   549                           	opt stack 0
   550  0000F7                     	ds	1
   551  0000F8                     _hora_d:
   552                           	opt stack 0
   553  0000F8                     	ds	1
   554  0000F9                     _hora_u:
   555                           	opt stack 0
   556  0000F9                     	ds	1
   557  0000FA                     _mes_d:
   558                           	opt stack 0
   559  0000FA                     	ds	1
   560  0000FB                     _mes_u:
   561                           	opt stack 0
   562  0000FB                     	ds	1
   563  0000FC                     _minuto_d:
   564                           	opt stack 0
   565  0000FC                     	ds	1
   566  0000FD                     _minuto_u:
   567                           	opt stack 0
   568  0000FD                     	ds	1
   569  0000FE                     _segundo_u:
   570                           	opt stack 0
   571  0000FE                     	ds	1
   572  0000                     _ANCON0	set	3912
   573  0000                     _ANCON1	set	3913
   574  0000                     _RTCCFG	set	3903
   575  0000                     _RTCCFGbits	set	3903
   576  0000                     _ADCON0	set	4034
   577  0000                     _ADCON1	set	4033
   578  0000                     _ALRMCFGbits	set	3985
   579  0000                     _EECON2	set	4007
   580  0000                     _INTCONbits	set	4082
   581  0000                     _LATAbits	set	3977
   582  0000                     _LATBbits	set	3978
   583  0000                     _OSCCONbits	set	4051
   584  0000                     _OSCTUNEbits	set	3995
   585  0000                     _PIE3bits	set	4003
   586  0000                     _PORTAbits	set	3968
   587  0000                     _PORTCbits	set	3970
   588  0000                     _RTCVALH	set	3993
   589  0000                     _RTCVALL	set	3992
   590  0000                     _T1CONbits	set	4045
   591  0000                     _TRISA	set	3986
   592  0000                     _TRISB	set	3987
   593  0000                     _TRISBbits	set	3987
   594  0000                     _TRISC	set	3988
   595                           
   596                           	psect	cinit
   597  00E70A                     __pcinit:
   598                           	opt stack 0
   599  00E70A                     start_initialization:
   600                           	opt stack 0
   601  00E70A                     __initialization:
   602                           	opt stack 0
   603                           
   604                           ; Clear objects allocated to BANK1 (8 bytes)
   605  00E70A  EE01  F000         	lfsr	0,__pbssBANK1
   606  00E70E  0E08               	movlw	8
   607  00E710                     clear_0:
   608  00E710  6AEE               	clrf	postinc0,c
   609  00E712  06E8               	decf	wreg,f,c
   610  00E714  E1FD               	bnz	clear_0
   611                           
   612                           ; Clear objects allocated to BANK0 (127 bytes)
   613  00E716  EE00  F060         	lfsr	0,__pbssBANK0
   614  00E71A  0E7F               	movlw	127
   615  00E71C                     clear_1:
   616  00E71C  6AEE               	clrf	postinc0,c
   617  00E71E  06E8               	decf	wreg,f,c
   618  00E720  E1FD               	bnz	clear_1
   619                           
   620                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   621  00E722  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   622                           
   623                           ; Clear objects allocated to COMRAM (19 bytes)
   624  00E724  EE00  F047         	lfsr	0,__pbssCOMRAM
   625  00E728  0E13               	movlw	19
   626  00E72A                     clear_2:
   627  00E72A  6AEE               	clrf	postinc0,c
   628  00E72C  06E8               	decf	wreg,f,c
   629  00E72E  E1FD               	bnz	clear_2
   630                           
   631                           ; Initialize objects allocated to BANK0 (20 bytes)
   632                           ; load TBLPTR registers with __pidataBANK0
   633  00E730  0ECA               	movlw	low __pidataBANK0
   634  00E732  6EF6               	movwf	tblptrl,c
   635  00E734  0EDF               	movlw	high __pidataBANK0
   636  00E736  6EF7               	movwf	tblptrh,c
   637  00E738  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   638  00E73A  6EF8               	movwf	tblptru,c
   639  00E73C  EE00  F0DF         	lfsr	0,__pdataBANK0
   640  00E740  EE10 F014          	lfsr	1,20
   641  00E744                     copy_data0:
   642  00E744  0009               	tblrd		*+
   643  00E746  CFF5 FFEE          	movff	tablat,postinc0
   644  00E74A  50E5               	movf	postdec1,w,c
   645  00E74C  50E1               	movf	fsr1l,w,c
   646  00E74E  E1FA               	bnz	copy_data0
   647                           
   648                           ; Initialize objects allocated to COMRAM (4 bytes)
   649                           ; load TBLPTR registers with __pidataCOMRAM
   650  00E750  0E78               	movlw	low __pidataCOMRAM
   651  00E752  6EF6               	movwf	tblptrl,c
   652  00E754  0EDF               	movlw	high __pidataCOMRAM
   653  00E756  6EF7               	movwf	tblptrh,c
   654  00E758  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   655  00E75A  6EF8               	movwf	tblptru,c
   656  00E75C  EE00  F05A         	lfsr	0,__pdataCOMRAM
   657  00E760  EE10 F004          	lfsr	1,4
   658  00E764                     copy_data1:
   659  00E764  0009               	tblrd		*+
   660  00E766  CFF5 FFEE          	movff	tablat,postinc0
   661  00E76A  50E5               	movf	postdec1,w,c
   662  00E76C  50E1               	movf	fsr1l,w,c
   663  00E76E  E1FA               	bnz	copy_data1
   664  00E770                     end_of_initialization:
   665                           	opt stack 0
   666  00E770                     __end_of__initialization:
   667                           	opt stack 0
   668  00E770  0E00               	movlw	low (__Lmediumconst shr (0+16))
   669  00E772  6EF8               	movwf	tblptru,c
   670  00E774  0100               	movlb	0
   671  00E776  EFD8  F076         	goto	_main	;jump to C main() function
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1l	equ	0xFE1
   680                           
   681                           	psect	bitbssCOMRAM
   682  0002F8                     __pbitbssCOMRAM:
   683                           	opt stack 0
   684  0002F8                     _flag:
   685                           	opt stack 0
   686  0002F8                     	ds	1
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           
   696                           	psect	bssCOMRAM
   697  000047                     __pbssCOMRAM:
   698                           	opt stack 0
   699  000047                     _tamanio_new_password:
   700                           	opt stack 0
   701  000047                     	ds	2
   702  000049                     _tamanio_password:
   703                           	opt stack 0
   704  000049                     	ds	2
   705  00004B                     _key:
   706                           	opt stack 0
   707  00004B                     	ds	1
   708  00004C                     _RtccDate:
   709                           	opt stack 0
   710  00004C                     	ds	4
   711  000050                     _RtccTime:
   712                           	opt stack 0
   713  000050                     	ds	4
   714  000054                     _tamanio_dia:
   715                           	opt stack 0
   716  000054                     	ds	2
   717  000056                     _tamanio_hora:
   718                           	opt stack 0
   719  000056                     	ds	2
   720  000058                     _tamanio_mes:
   721                           	opt stack 0
   722  000058                     	ds	2
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	dataCOMRAM
   733  00005A                     __pdataCOMRAM:
   734                           	opt stack 0
   735  00005A                     _anio:
   736                           	opt stack 0
   737  00005A                     	ds	2
   738  00005C                     _mes:
   739                           	opt stack 0
   740  00005C                     	ds	2
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postdec1	equ	0xFE5
   748                           fsr1l	equ	0xFE1
   749                           
   750                           	psect	bssBANK0
   751  000060                     __pbssBANK0:
   752                           	opt stack 0
   753  000060                     _RtccAlrmTimeDate:
   754                           	opt stack 0
   755  000060                     	ds	8
   756  000068                     _RtccTimeDate:
   757                           	opt stack 0
   758  000068                     	ds	8
   759  000070                     _current_password:
   760                           	opt stack 0
   761  000070                     	ds	7
   762  000077                     _new_password:
   763                           	opt stack 0
   764  000077                     	ds	7
   765  00007E                     _temporal:
   766                           	opt stack 0
   767  00007E                     	ds	7
   768  000085                     _RtccTimeVal:
   769                           	opt stack 0
   770  000085                     	ds	4
   771  000089                     	ds	3
   772  00008C                     	ds	3
   773  00008F                     	ds	3
   774  000092                     	ds	3
   775  000095                     	ds	3
   776  000098                     _a:
   777                           	opt stack 0
   778  000098                     	ds	2
   779  00009A                     _autorizado:
   780                           	opt stack 0
   781  00009A                     	ds	2
   782  00009C                     _b:
   783                           	opt stack 0
   784  00009C                     	ds	2
   785  00009E                     _c:
   786                           	opt stack 0
   787  00009E                     	ds	2
   788  0000A0                     _encendida:
   789                           	opt stack 0
   790  0000A0                     	ds	2
   791  0000A2                     _i:
   792                           	opt stack 0
   793  0000A2                     	ds	2
   794  0000A4                     _j:
   795                           	opt stack 0
   796  0000A4                     	ds	2
   797  0000A6                     _k:
   798                           	opt stack 0
   799  0000A6                     	ds	2
   800  0000A8                     _ocultar_teclas:
   801                           	opt stack 0
   802  0000A8                     	ds	2
   803  0000AA                     _puntero_funcion:
   804                           	opt stack 0
   805  0000AA                     	ds	2
   806  0000AC                     _segundo:
   807                           	opt stack 0
   808  0000AC                     	ds	2
   809  0000AE                     _tamanio_comando:
   810                           	opt stack 0
   811  0000AE                     	ds	2
   812  0000B0                     	ds	2
   813  0000B2                     	ds	2
   814  0000B4                     fecha@valor_max:
   815                           	opt stack 0
   816  0000B4                     	ds	2
   817  0000B6                     fecha@valor_min:
   818                           	opt stack 0
   819  0000B6                     	ds	2
   820  0000B8                     _buffer2:
   821                           	opt stack 0
   822  0000B8                     	ds	20
   823  0000CC                     fecha@day:
   824                           	opt stack 0
   825  0000CC                     	ds	3
   826  0000CF                     fecha@hour:
   827                           	opt stack 0
   828  0000CF                     	ds	3
   829  0000D2                     fecha@minutes:
   830                           	opt stack 0
   831  0000D2                     	ds	3
   832  0000D5                     fecha@month:
   833                           	opt stack 0
   834  0000D5                     	ds	3
   835  0000D8                     fecha@year:
   836                           	opt stack 0
   837  0000D8                     	ds	3
   838  0000DB                     _tamanio_anio:
   839                           	opt stack 0
   840  0000DB                     	ds	2
   841  0000DD                     _tamanio_minutos:
   842                           	opt stack 0
   843  0000DD                     	ds	2
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	dataBANK0
   854  0000DF                     __pdataBANK0:
   855                           	opt stack 0
   856  0000DF                     _password:
   857                           	opt stack 0
   858  0000DF                     	ds	7
   859  0000E6                     _activada:
   860                           	opt stack 0
   861  0000E6                     	ds	2
   862  0000E8                     _diasem:
   863                           	opt stack 0
   864  0000E8                     	ds	2
   865  0000EA                     _comando:
   866                           	opt stack 0
   867  0000EA                     	ds	3
   868  0000ED                     _dia:
   869                           	opt stack 0
   870  0000ED                     	ds	2
   871  0000EF                     _hora:
   872                           	opt stack 0
   873  0000EF                     	ds	2
   874  0000F1                     _minuto:
   875                           	opt stack 0
   876  0000F1                     	ds	2
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	bssBANK1
   887  000100                     __pbssBANK1:
   888                           	opt stack 0
   889  000100                     _Rtcc_read_TimeDate:
   890                           	opt stack 0
   891  000100                     	ds	8
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	cstackCOMRAM
   902  000001                     __pcstackCOMRAM:
   903                           	opt stack 0
   904  000001                     ??_guardar_current_password:
   905  000001                     ??_guardar_password_temporal:
   906  000001                     ??_guardar_nuevo_password:
   907  000001                     ??_isdigit:
   908  000001                     ??_lcd_send_nibble:
   909  000001                     ?___wmul:
   910                           	opt stack 0
   911  000001                     ?___awdiv:
   912                           	opt stack 0
   913  000001                     ?___awmod:
   914                           	opt stack 0
   915  000001                     ?___lwdiv:
   916                           	opt stack 0
   917  000001                     Delay100TCYx@unit:
   918                           	opt stack 0
   919  000001                     Delay1KTCYx@unit:
   920                           	opt stack 0
   921  000001                     verficar_password@verifica:
   922                           	opt stack 0
   923  000001                     actualizar_password@confirmar:
   924                           	opt stack 0
   925  000001                     RtccReadDate@pDt:
   926                           	opt stack 0
   927  000001                     RtccReadTime@pTm:
   928                           	opt stack 0
   929  000001                     RtccWriteDate@pDt:
   930                           	opt stack 0
   931  000001                     RtccWriteTime@pTm:
   932                           	opt stack 0
   933  000001                     ___wmul@multiplier:
   934                           	opt stack 0
   935  000001                     ___awdiv@dividend:
   936                           	opt stack 0
   937  000001                     ___awmod@dividend:
   938                           	opt stack 0
   939  000001                     ___lwdiv@dividend:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x0
   943  000001                     	ds	1
   944  000002                     lcd_send_nibble@nibble:
   945                           	opt stack 0
   946  000002                     _isdigit$2543:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x1
   950  000002                     	ds	1
   951  000003                     lcd_send_byte@n:
   952                           	opt stack 0
   953  000003                     guardar_current_password@valor:
   954                           	opt stack 0
   955  000003                     guardar_password_temporal@valor:
   956                           	opt stack 0
   957  000003                     guardar_nuevo_password@valor:
   958                           	opt stack 0
   959  000003                     actualizar_password@valor:
   960                           	opt stack 0
   961  000003                     RtccWriteDate@di:
   962                           	opt stack 0
   963  000003                     RtccWriteTime@di:
   964                           	opt stack 0
   965  000003                     isdigit@c:
   966                           	opt stack 0
   967  000003                     validar_password@i:
   968                           	opt stack 0
   969  000003                     ___wmul@multiplicand:
   970                           	opt stack 0
   971  000003                     ___awdiv@divisor:
   972                           	opt stack 0
   973  000003                     ___awmod@divisor:
   974                           	opt stack 0
   975  000003                     ___lwdiv@divisor:
   976                           	opt stack 0
   977  000003                     RtccReadDate@rTD1:
   978                           	opt stack 0
   979  000003                     RtccReadTime@rTD1:
   980                           	opt stack 0
   981                           
   982                           ; 8 bytes @ 0x2
   983  000003                     	ds	1
   984  000004                     ??_actualizar_password:
   985  000004                     lcd_send_byte@address:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3
   989  000004                     	ds	1
   990  000005                     lcd_init@i:
   991                           	opt stack 0
   992  000005                     lcd_gotoxy@y:
   993                           	opt stack 0
   994  000005                     lcd_comand@d:
   995                           	opt stack 0
   996  000005                     RtccWriteDate@wasOn:
   997                           	opt stack 0
   998  000005                     RtccWriteTime@wasOn:
   999                           	opt stack 0
  1000  000005                     ___awdiv@counter:
  1001                           	opt stack 0
  1002  000005                     ___awmod@counter:
  1003                           	opt stack 0
  1004  000005                     verficar_password@i:
  1005                           	opt stack 0
  1006  000005                     ___wmul@product:
  1007                           	opt stack 0
  1008  000005                     ___lwdiv@quotient:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x4
  1012  000005                     	ds	1
  1013  000006                     lcd_gotoxy@x:
  1014                           	opt stack 0
  1015  000006                     RtccWriteDate@wasAlrm:
  1016                           	opt stack 0
  1017  000006                     RtccWriteTime@wasAlrm:
  1018                           	opt stack 0
  1019  000006                     ___awdiv@sign:
  1020                           	opt stack 0
  1021  000006                     ___awmod@sign:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x5
  1025  000006                     	ds	1
  1026  000007                     ??_obtener_dia_mes:
  1027  000007                     ?_atoi:
  1028                           	opt stack 0
  1029  000007                     lcd_gotoxy@address:
  1030                           	opt stack 0
  1031  000007                     RtccWriteTime@wasWrEn:
  1032                           	opt stack 0
  1033  000007                     ___lwdiv@counter:
  1034                           	opt stack 0
  1035  000007                     RtccWriteDate@tempYear:
  1036                           	opt stack 0
  1037  000007                     atoi@s:
  1038                           	opt stack 0
  1039  000007                     ___awdiv@quotient:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x6
  1043  000007                     	ds	1
  1044  000008                     ?___lwmod:
  1045                           	opt stack 0
  1046  000008                     lcd_putc@c:
  1047                           	opt stack 0
  1048  000008                     RtccWriteTime@tempMinSec:
  1049                           	opt stack 0
  1050  000008                     ___lwmod@dividend:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x7
  1054  000008                     	ds	1
  1055  000009                     ??_atoi:
  1056  000009                     RtccWriteDate@wasWrEn:
  1057                           	opt stack 0
  1058  000009                     lcd_putrs@ptr:
  1059                           	opt stack 0
  1060  000009                     actualizar_password@j:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x8
  1064  000009                     	ds	1
  1065  00000A                     RtccWriteDate@tempDayMonth:
  1066                           	opt stack 0
  1067  00000A                     RtccWriteTime@tempHourWDay:
  1068                           	opt stack 0
  1069  00000A                     ___lwmod@divisor:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x9
  1073  00000A                     	ds	1
  1074  00000B                     ??_ingresar_password:
  1075  00000B                     atoi@sign:
  1076                           	opt stack 0
  1077  00000B                     mostrar_titulo_menu@titulo_menu:
  1078                           	opt stack 0
  1079  00000B                     clear_display@pos:
  1080                           	opt stack 0
  1081  00000B                     actualizar_password@j_1538:
  1082                           	opt stack 0
  1083  00000B                     RtccReadDate@rTD0:
  1084                           	opt stack 0
  1085  00000B                     RtccReadTime@rTD0:
  1086                           	opt stack 0
  1087                           
  1088                           ; 8 bytes @ 0xA
  1089  00000B                     	ds	1
  1090  00000C                     ___lwmod@counter:
  1091                           	opt stack 0
  1092  00000C                     RtccWriteDate@tempHourWDay:
  1093                           	opt stack 0
  1094  00000C                     atoi@a:
  1095                           	opt stack 0
  1096  00000C                     ingresar_password@clear:
  1097                           	opt stack 0
  1098                           
  1099                           ; 16 bytes @ 0xB
  1100  00000C                     	ds	1
  1101  00000D                     ?_sprintf:
  1102                           	opt stack 0
  1103  00000D                     sprintf@sp:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0xC
  1107  00000D                     	ds	1
  1108  00000E                     convertir_a_int@array:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0xD
  1112  00000E                     	ds	1
  1113  00000F                     sprintf@f:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0xE
  1117  00000F                     	ds	1
  1118  000010                     convertir_a_int@valor:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0xF
  1122  000010                     	ds	2
  1123  000012                     
  1124                           ; 0 bytes @ 0x11
  1125  000012                     	ds	1
  1126  000013                     
  1127                           ; 0 bytes @ 0x12
  1128  000013                     	ds	3
  1129  000016                     actualiza_elemento@elemento:
  1130                           	opt stack 0
  1131  000016                     actualiza_dia@elemento:
  1132                           	opt stack 0
  1133  000016                     actualizar_hora@elemento:
  1134                           	opt stack 0
  1135  000016                     actualizar_minutos@elemento:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x15
  1139  000016                     	ds	1
  1140  000017                     ??_sprintf:
  1141                           
  1142                           ; 0 bytes @ 0x16
  1143  000017                     	ds	1
  1144  000018                     actualiza_elemento@valor:
  1145                           	opt stack 0
  1146  000018                     actualiza_dia@valor:
  1147                           	opt stack 0
  1148  000018                     actualizar_hora@valor:
  1149                           	opt stack 0
  1150  000018                     actualizar_minutos@valor:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x17
  1154  000018                     	ds	2
  1155  00001A                     
  1156                           ; 0 bytes @ 0x19
  1157  00001A                     	ds	1
  1158  00001B                     sprintf@prec:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x1A
  1162  00001B                     	ds	1
  1163  00001C                     ingresar_password@i_566:
  1164                           	opt stack 0
  1165  00001C                     sprintf@ap:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x1B
  1169  00001C                     	ds	2
  1170  00001E                     ingresar_password@i:
  1171                           	opt stack 0
  1172  00001E                     sprintf@val:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x1D
  1176  00001E                     	ds	2
  1177  000020                     sprintf@flag:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x1F
  1181  000020                     	ds	1
  1182  000021                     sprintf@width:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x20
  1186  000021                     	ds	2
  1187  000023                     sprintf@c:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x22
  1191  000023                     	ds	1
  1192  000024                     ??_guardar_comando:
  1193  000024                     caratula@titulo:
  1194                           	opt stack 0
  1195  000024                     cambiar_password@confirmar:
  1196                           	opt stack 0
  1197  000024                     guardar_elemento@array:
  1198                           	opt stack 0
  1199  000024                     imprimir_tecla@aux:
  1200                           	opt stack 0
  1201                           
  1202                           ; 20 bytes @ 0x23
  1203  000024                     	ds	2
  1204  000026                     _caratula$528:
  1205                           	opt stack 0
  1206  000026                     cambiar_password@verifica:
  1207                           	opt stack 0
  1208  000026                     guardar_elemento@tamanio_array:
  1209                           	opt stack 0
  1210  000026                     guardar_comando@aux:
  1211                           	opt stack 0
  1212                           
  1213                           ; 20 bytes @ 0x25
  1214  000026                     	ds	2
  1215  000028                     guardar_elemento@validacion:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x27
  1219  000028                     	ds	2
  1220  00002A                     guardar_elemento@dato_fecha:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x29
  1224  00002A                     	ds	2
  1225  00002C                     guardar_elemento@doit:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x2B
  1229  00002C                     	ds	2
  1230  00002E                     ??_guardar_elemento:
  1231                           
  1232                           ; 0 bytes @ 0x2D
  1233  00002E                     	ds	2
  1234  000030                     guardar_elemento@tecla:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x2F
  1238  000030                     	ds	1
  1239  000031                     guardar_elemento@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x30
  1243  000031                     	ds	2
  1244  000033                     guardar_elemento@valor:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x32
  1248  000033                     	ds	2
  1249  000035                     cambiar_dia@validacion:
  1250                           	opt stack 0
  1251  000035                     cambiar_mes@validacion:
  1252                           	opt stack 0
  1253  000035                     cambiar_anio@validacion:
  1254                           	opt stack 0
  1255  000035                     cambiar_hora@validacion:
  1256                           	opt stack 0
  1257  000035                     cambiar_minutos@validacion:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x34
  1261  000035                     	ds	2
  1262  000037                     cambiar_dia@tecla:
  1263                           	opt stack 0
  1264  000037                     cambiar_mes@tecla:
  1265                           	opt stack 0
  1266  000037                     cambiar_anio@tecla:
  1267                           	opt stack 0
  1268  000037                     cambiar_hora@tecla:
  1269                           	opt stack 0
  1270  000037                     cambiar_minutos@tecla:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x36
  1274  000037                     	ds	1
  1275  000038                     imprimir_tecla@tecla:
  1276                           	opt stack 0
  1277  000038                     _cambiar_mes$1246:
  1278                           	opt stack 0
  1279  000038                     _cambiar_anio$1250:
  1280                           	opt stack 0
  1281  000038                     _cambiar_minutos$1265:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x37
  1285  000038                     	ds	1
  1286  000039                     mostrar_guardar_password@tecla:
  1287                           	opt stack 0
  1288  000039                     mostrar_guardar_temporal_password@tecla:
  1289                           	opt stack 0
  1290  000039                     mostrar_guardar_nuevo_password@tecla:
  1291                           	opt stack 0
  1292  000039                     confirmar_actualizar_password@tecla:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x38
  1296  000039                     	ds	1
  1297  00003A                     guardar_comando@tecla:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x39
  1301  00003A                     	ds	1
  1302  00003B                     ingresar_comando@key:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x3A
  1306  00003B                     	ds	1
  1307  00003C                     guardar_tecla_presionada@letra:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x3B
  1311  00003C                     	ds	2
  1312  00003E                     guardar_tecla_presionada@i:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x3D
  1316  00003E                     	ds	2
  1317  000040                     leer_teclado@ocultar:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x3F
  1321  000040                     	ds	2
  1322  000042                     ??_leer_teclado:
  1323                           
  1324                           ; 0 bytes @ 0x41
  1325  000042                     	ds	1
  1326  000043                     leer_teclado@i:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x42
  1330  000043                     	ds	2
  1331  000045                     main@ocultar_teclas:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x44
  1335  000045                     	ds	2
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           postdec1	equ	0xFE5
  1343                           fsr1l	equ	0xFE1
  1344                           
  1345 ;;
  1346 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1347 ;;
  1348 ;; *************** function _main *****************
  1349 ;; Defined at:
  1350 ;;		line 225 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  ocultar_tecl    2   68[COMRAM] int 
  1355 ;;  validacion      2    0        int 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2  255[None  ] int 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1369 ;;Total ram usage:        2 bytes
  1370 ;; Hardware stack levels required when called:    9
  1371 ;; This function calls:
  1372 ;;		_Read_RTC
  1373 ;;		_Setup
  1374 ;;		_atoi
  1375 ;;		_cambiar_fecha
  1376 ;;		_cambiar_horario
  1377 ;;		_cambiar_password
  1378 ;;		_caratula
  1379 ;;		_ingresar_password
  1380 ;;		_leer_teclado
  1381 ;;		_restaurar_comando
  1382 ;; This function is called by:
  1383 ;;		Startup code after reset
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text0
  1388  00EDB0                     __ptext0:
  1389                           	opt stack 0
  1390  00EDB0                     _main:
  1391                           	opt stack 22
  1392                           
  1393                           ;main.c: 227: Setup();
  1394                           
  1395                           ; BSR set to: 15
  1396                           ;incstack = 0
  1397  00EDB0  ECBA  F071         	call	_Setup	;wreg free
  1398                           
  1399                           ;main.c: 228: restaurar_comando();
  1400  00EDB4  EC06  F070         	call	_restaurar_comando	;wreg free
  1401                           
  1402                           ;main.c: 230: int ocultar_teclas = 1;
  1403  00EDB8  0E00               	movlw	0
  1404  00EDBA  6E46               	movwf	main@ocultar_teclas+1,c
  1405  00EDBC  0E01               	movlw	1
  1406  00EDBE  6E45               	movwf	main@ocultar_teclas,c
  1407  00EDC0  D000               	goto	l4032
  1408  00EDC2                     l4032:
  1409                           
  1410                           ;main.c: 234: {
  1411                           ;main.c: 235: Read_RTC();
  1412  00EDC2  EC72  F07A         	call	_Read_RTC	;wreg free
  1413                           
  1414                           ;main.c: 237: if (!autorizado){
  1415  00EDC6  0100               	movlb	0	; () banked
  1416  00EDC8  519A               	movf	_autorizado& (0+255),w,b
  1417  00EDCA  0100               	movlb	0	; () banked
  1418  00EDCC  119B               	iorwf	(_autorizado+1)& (0+255),w,b
  1419  00EDCE  A4D8               	btfss	status,2,c
  1420  00EDD0  D00F               	goto	l4042
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;main.c: 238: puntero_funcion = mostrar_guardar_password;
  1424  00EDD2  0EA4               	movlw	low _mostrar_guardar_password
  1425  00EDD4  0100               	movlb	0	; () banked
  1426  00EDD6  6FAA               	movwf	_puntero_funcion& (0+255),b
  1427  00EDD8  0EE1               	movlw	high _mostrar_guardar_password
  1428  00EDDA  0100               	movlb	0	; () banked
  1429  00EDDC  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;main.c: 239: leer_teclado(ocultar_teclas);
  1433  00EDDE  C045  F040         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1434  00EDE2  C046  F041         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1435  00EDE6  EC68  F079         	call	_leer_teclado	;wreg free
  1436                           
  1437                           ;main.c: 240: ingresar_password();
  1438  00EDEA  EC80  F078         	call	_ingresar_password	;wreg free
  1439                           
  1440                           ;main.c: 242: }else{
  1441  00EDEE  D7E9               	goto	l4032
  1442  00EDF0                     l4042:
  1443                           
  1444                           ;main.c: 243: puntero_funcion = &ingresar_comando;
  1445  00EDF0  0E7C               	movlw	low _ingresar_comando
  1446  00EDF2  0100               	movlb	0	; () banked
  1447  00EDF4  6FAA               	movwf	_puntero_funcion& (0+255),b
  1448  00EDF6  0EDF               	movlw	high _ingresar_comando
  1449  00EDF8  0100               	movlb	0	; () banked
  1450  00EDFA  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  1451                           
  1452                           ;main.c: 245: switch (atoi(comando))
  1453  00EDFC  D020               	goto	l4058
  1454  00EDFE                     l4044:
  1455  00EDFE  EC12  F078         	call	_cambiar_password	;wreg free
  1456  00EE02  D032               	goto	l4060
  1457  00EE04                     l4046:
  1458  00EE04  EC85  F076         	call	_cambiar_fecha	;wreg free
  1459  00EE08  D02F               	goto	l4060
  1460  00EE0A                     l4048:
  1461  00EE0A  ECBD  F073         	call	_cambiar_horario	;wreg free
  1462  00EE0E  D02C               	goto	l4060
  1463  00EE10                     l4050:
  1464  00EE10  0ED5               	movlw	low STR_21
  1465  00EE12  6E24               	movwf	caratula@titulo,c
  1466  00EE14  0EFF               	movlw	high STR_21
  1467  00EE16  6E25               	movwf	caratula@titulo+1,c
  1468  00EE18  ECA7  F077         	call	_caratula	;wreg free
  1469                           
  1470                           ;main.c: 251: if (tamanio_comando >= 2)
  1471  00EE1C  0100               	movlb	0	; () banked
  1472  00EE1E  BFAF               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  1473  00EE20  D023               	goto	l4060
  1474  00EE22  0100               	movlb	0	; () banked
  1475  00EE24  51AF               	movf	(_tamanio_comando+1)& (0+255),w,b
  1476  00EE26  E105               	bnz	u3530
  1477  00EE28  0E02               	movlw	2
  1478  00EE2A  0100               	movlb	0	; () banked
  1479  00EE2C  5DAE               	subwf	_tamanio_comando& (0+255),w,b
  1480  00EE2E  A0D8               	btfss	status,0,c
  1481  00EE30  D01B               	goto	l4060
  1482  00EE32                     u3530:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 252: tamanio_comando = 0;
  1486  00EE32  0E00               	movlw	0
  1487  00EE34  0100               	movlb	0	; () banked
  1488  00EE36  6FAF               	movwf	(_tamanio_comando+1)& (0+255),b
  1489  00EE38  0E00               	movlw	0
  1490  00EE3A  6FAE               	movwf	_tamanio_comando& (0+255),b
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 254: }
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 253: break;
  1497  00EE3C  D015               	goto	l4060
  1498  00EE3E                     l4058:
  1499                           
  1500                           ; BSR set to: 0
  1501  00EE3E  0EEA               	movlw	low _comando
  1502  00EE40  6E07               	movwf	atoi@s,c
  1503  00EE42  0E00               	movlw	high _comando
  1504  00EE44  6E08               	movwf	atoi@s+1,c
  1505  00EE46  EC3D  F077         	call	_atoi	;wreg free
  1506                           
  1507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1508                           ; Switch size 1, requested type "space"
  1509                           ; Number of cases is 1, Range of values is 0 to 0
  1510                           ; switch strategies available:
  1511                           ; Name         Instructions Cycles
  1512                           ; simple_byte            4     3 (average)
  1513                           ;	Chosen strategy is simple_byte
  1514  00EE4A  5008               	movf	?_atoi+1,w,c
  1515  00EE4C  0A00               	xorlw	0	; case 0
  1516  00EE4E  A4D8               	btfss	status,2,c
  1517  00EE50  D7DF               	goto	l4050
  1518                           
  1519                           ; Switch size 1, requested type "space"
  1520                           ; Number of cases is 3, Range of values is 10 to 12
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           10     6 (average)
  1524                           ;	Chosen strategy is simple_byte
  1525  00EE52  5007               	movf	?_atoi,w,c
  1526  00EE54  0A0A               	xorlw	10	; case 10
  1527  00EE56  B4D8               	btfsc	status,2,c
  1528  00EE58  D7D2               	goto	l4044
  1529  00EE5A  0A01               	xorlw	1	; case 11
  1530  00EE5C  B4D8               	btfsc	status,2,c
  1531  00EE5E  D7D2               	goto	l4046
  1532  00EE60  0A07               	xorlw	7	; case 12
  1533  00EE62  B4D8               	btfsc	status,2,c
  1534  00EE64  D7D2               	goto	l4048
  1535  00EE66  D7D4               	goto	l4050
  1536  00EE68                     l4060:
  1537                           
  1538                           ;main.c: 255: leer_teclado(ocultar_teclas);
  1539  00EE68  C045  F040         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1540  00EE6C  C046  F041         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1541  00EE70  EC68  F079         	call	_leer_teclado	;wreg free
  1542  00EE74  D7A6               	goto	l4032
  1543                           
  1544                           ;main.c: 288: }
  1545                           ;main.c: 289: }
  1546                           ;main.c: 290: return 0;
  1547                           ;	Return value of _main is never used
  1548  00EE76  EF00  F000         	goto	start
  1549  00EE7A                     __end_of_main:
  1550                           	opt stack 0
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           status	equ	0xFD8
  1560                           
  1561 ;; *************** function _leer_teclado *****************
  1562 ;; Defined at:
  1563 ;;		line 48 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  ocultar         2   63[COMRAM] int 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  i               2   66[COMRAM] int 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;		None               void
  1570 ;; Registers used:
  1571 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1578 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1579 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1580 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1581 ;;Total ram usage:        5 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    8
  1584 ;; This function calls:
  1585 ;;		Absolute function
  1586 ;;		_cambiar_anio
  1587 ;;		_cambiar_dia
  1588 ;;		_cambiar_hora
  1589 ;;		_cambiar_mes
  1590 ;;		_cambiar_minutos
  1591 ;;		_confirmar_actualizar_password
  1592 ;;		_guardar_tecla_presionada
  1593 ;;		_ingresar_comando
  1594 ;;		_lcd_putrs
  1595 ;;		_mostrar_guardar_nuevo_password
  1596 ;;		_mostrar_guardar_password
  1597 ;;		_mostrar_guardar_temporal_password
  1598 ;; This function is called by:
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text1
  1604  00F2D0                     __ptext1:
  1605                           	opt stack 0
  1606  00F2D0                     _leer_teclado:
  1607                           	opt stack 22
  1608                           
  1609                           ;teclado.c: 49: int i;
  1610                           ;teclado.c: 50: ocultar_teclas = ocultar;
  1611                           
  1612                           ;incstack = 0
  1613  00F2D0  C040  F0A8         	movff	leer_teclado@ocultar,_ocultar_teclas
  1614  00F2D4  C041  F0A9         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1615                           
  1616                           ;teclado.c: 52: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  1617  00F2D8  8089               	bsf	3977,0,c	;volatile
  1618  00F2DA  9289               	bcf	3977,1,c	;volatile
  1619  00F2DC  9489               	bcf	3977,2,c	;volatile
  1620  00F2DE  9689               	bcf	3977,3,c	;volatile
  1621  00F2E0  0E00               	movlw	0
  1622  00F2E2  6E44               	movwf	leer_teclado@i+1,c
  1623  00F2E4  0E01               	movlw	1
  1624  00F2E6  6E43               	movwf	leer_teclado@i,c
  1625                           
  1626                           ;teclado.c: 53: guardar_tecla_presionada("A",i);
  1627  00F2E8  0EEE               	movlw	low STR_25
  1628  00F2EA  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1629  00F2EC  0EFF               	movlw	high STR_25
  1630  00F2EE  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1631  00F2F0  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1632  00F2F4  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1633  00F2F8  ECF2  F075         	call	_guardar_tecla_presionada	;wreg free
  1634                           
  1635                           ;teclado.c: 55: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  1636  00F2FC  9089               	bcf	3977,0,c	;volatile
  1637  00F2FE  8289               	bsf	3977,1,c	;volatile
  1638  00F300  9489               	bcf	3977,2,c	;volatile
  1639  00F302  9689               	bcf	3977,3,c	;volatile
  1640  00F304  0E00               	movlw	0
  1641  00F306  6E44               	movwf	leer_teclado@i+1,c
  1642  00F308  0E04               	movlw	4
  1643  00F30A  6E43               	movwf	leer_teclado@i,c
  1644                           
  1645                           ;teclado.c: 56: guardar_tecla_presionada("B",i);
  1646  00F30C  0EF0               	movlw	low STR_26
  1647  00F30E  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1648  00F310  0EFF               	movlw	high STR_26
  1649  00F312  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1650  00F314  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1651  00F318  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1652  00F31C  ECF2  F075         	call	_guardar_tecla_presionada	;wreg free
  1653                           
  1654                           ;teclado.c: 58: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  1655  00F320  9089               	bcf	3977,0,c	;volatile
  1656  00F322  9289               	bcf	3977,1,c	;volatile
  1657  00F324  8489               	bsf	3977,2,c	;volatile
  1658  00F326  9689               	bcf	3977,3,c	;volatile
  1659  00F328  0E00               	movlw	0
  1660  00F32A  6E44               	movwf	leer_teclado@i+1,c
  1661  00F32C  0E07               	movlw	7
  1662  00F32E  6E43               	movwf	leer_teclado@i,c
  1663                           
  1664                           ;teclado.c: 59: guardar_tecla_presionada("C",i);
  1665  00F330  0EF2               	movlw	low STR_27
  1666  00F332  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1667  00F334  0EFF               	movlw	high STR_27
  1668  00F336  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1669  00F338  C043  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1670  00F33C  C044  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1671  00F340  ECF2  F075         	call	_guardar_tecla_presionada	;wreg free
  1672                           
  1673                           ;teclado.c: 61: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1674  00F344  9089               	bcf	3977,0,c	;volatile
  1675  00F346  9289               	bcf	3977,1,c	;volatile
  1676  00F348  9489               	bcf	3977,2,c	;volatile
  1677  00F34A  8689               	bsf	3977,3,c	;volatile
  1678                           
  1679                           ;teclado.c: 62: {
  1680                           ;teclado.c: 63: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1681  00F34C  AA80               	btfss	3968,5,c	;volatile
  1682  00F34E  D00B               	goto	l380
  1683  00F350  0E2A               	movlw	42
  1684  00F352  6E4B               	movwf	_key,c
  1685  00F354  0EEC               	movlw	low STR_24
  1686  00F356  6E09               	movwf	lcd_putrs@ptr,c
  1687  00F358  0EFF               	movlw	high STR_24
  1688  00F35A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1689  00F35C  EC2A  F072         	call	_lcd_putrs	;wreg free
  1690  00F360  D000               	goto	l381
  1691  00F362                     l381:
  1692  00F362  BA80               	btfsc	3968,5,c	;volatile
  1693  00F364  D7FE               	goto	l381
  1694  00F366                     l380:
  1695                           
  1696                           ;teclado.c: 64: if (PORTAbits.RA7==1){key=0;puntero_funcion(key);while(PORTAbits.RA7==1)
      +                          {};}
  1697  00F366  AE80               	btfss	3968,7,c	;volatile
  1698  00F368  D012               	goto	l384
  1699  00F36A  0E00               	movlw	0
  1700  00F36C  6E4B               	movwf	_key,c
  1701  00F36E  D801               	call	u3468
  1702  00F370  D00C               	goto	l385
  1703  00F372                     u3468:
  1704  00F372  0005               	push	
  1705  00F374  0100               	movlb	0	; () banked
  1706  00F376  6EFA               	movwf	pclath,c
  1707  00F378  51AA               	movf	_puntero_funcion& (0+255),w,b
  1708  00F37A  6EFD               	movwf	tosl,c
  1709  00F37C  51AB               	movf	(_puntero_funcion+1)& (0+255),w,b
  1710  00F37E  6EFE               	movwf	tosh,c
  1711  00F380  50F8               	movf	tblptru,w,c
  1712  00F382  6EFF               	movwf	tosu,c
  1713  00F384  50FA               	movf	pclath,w,c
  1714  00F386  504B               	movf	_key,w,c
  1715  00F388  0012               	return		;indir
  1716  00F38A                     l385:
  1717  00F38A  BE80               	btfsc	3968,7,c	;volatile
  1718  00F38C  D7FE               	goto	l385
  1719  00F38E                     l384:
  1720                           
  1721                           ;teclado.c: 65: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1722  00F38E  AC80               	btfss	3968,6,c	;volatile
  1723  00F390  D00B               	goto	l388
  1724  00F392  0E23               	movlw	35
  1725  00F394  6E4B               	movwf	_key,c
  1726  00F396  0EEA               	movlw	low STR_29
  1727  00F398  6E09               	movwf	lcd_putrs@ptr,c
  1728  00F39A  0EFF               	movlw	high STR_29
  1729  00F39C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1730  00F39E  EC2A  F072         	call	_lcd_putrs
  1731  00F3A2  D000               	goto	l389
  1732  00F3A4                     l389:
  1733  00F3A4  BC80               	btfsc	3968,6,c	;volatile
  1734  00F3A6  D7FE               	goto	l389
  1735  00F3A8                     l388:
  1736                           
  1737                           ;teclado.c: 66: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1738  00F3A8  A482               	btfss	3970,2,c	;volatile
  1739  00F3AA  D00D               	goto	l4024
  1740  00F3AC  0E44               	movlw	68
  1741  00F3AE  6E4B               	movwf	_key,c
  1742  00F3B0  0EF4               	movlw	low STR_30
  1743  00F3B2  6E09               	movwf	lcd_putrs@ptr,c
  1744  00F3B4  0EFF               	movlw	high STR_30
  1745  00F3B6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1746  00F3B8  EC2A  F072         	call	_lcd_putrs	;wreg free
  1747  00F3BC  D000               	goto	l393
  1748  00F3BE                     l393:
  1749  00F3BE  A482               	btfss	3970,2,c	;volatile
  1750  00F3C0  D002               	goto	l4024
  1751  00F3C2  D7FD               	goto	l393
  1752  00F3C4  D000               	goto	l4024
  1753  00F3C6                     l4024:
  1754                           
  1755                           ;teclado.c: 67: }
  1756                           ;teclado.c: 68: _delay((unsigned long)((98)*(8000000/4000.0)));
  1757  00F3C6  0EFF               	movlw	255
  1758  00F3C8  6E42               	movwf	??_leer_teclado& (0+255),c
  1759  00F3CA  0E8A               	movlw	138
  1760  00F3CC                     u3557:
  1761  00F3CC  2EE8               	decfsz	wreg,f,c
  1762  00F3CE  D7FE               	goto	u3557
  1763  00F3D0  2E42               	decfsz	??_leer_teclado& (0+255),f,c
  1764  00F3D2  D7FC               	goto	u3557
  1765  00F3D4  D000               	nop2	
  1766  00F3D6  0012               	return		;funcret
  1767  00F3D8                     __end_of_leer_teclado:
  1768                           	opt stack 0
  1769                           tosu	equ	0xFFF
  1770                           tosh	equ	0xFFE
  1771                           tosl	equ	0xFFD
  1772                           pclath	equ	0xFFA
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1l	equ	0xFE1
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _guardar_tecla_presionada *****************
  1784 ;; Defined at:
  1785 ;;		line 41 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  letra           2   59[COMRAM] PTR const unsigned char 
  1788 ;;		 -> STR_27(2), STR_26(2), STR_25(2), 
  1789 ;;  i               2   61[COMRAM] int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;		None               void
  1794 ;; Registers used:
  1795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;Total ram usage:        4 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    7
  1808 ;; This function calls:
  1809 ;;		Absolute function
  1810 ;;		_cambiar_anio
  1811 ;;		_cambiar_dia
  1812 ;;		_cambiar_hora
  1813 ;;		_cambiar_mes
  1814 ;;		_cambiar_minutos
  1815 ;;		_confirmar_actualizar_password
  1816 ;;		_ingresar_comando
  1817 ;;		_mostrar_guardar_nuevo_password
  1818 ;;		_mostrar_guardar_password
  1819 ;;		_mostrar_guardar_temporal_password
  1820 ;; This function is called by:
  1821 ;;		_leer_teclado
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text2
  1826  00EBE4                     __ptext2:
  1827                           	opt stack 0
  1828  00EBE4                     _guardar_tecla_presionada:
  1829                           	opt stack 22
  1830                           
  1831                           ;teclado.c: 42: if (PORTAbits.RA5==1){key=i;puntero_funcion(key);while(PORTAbits.RA5==1)
      +                          {};}
  1832                           
  1833                           ;incstack = 0
  1834  00EBE4  AA80               	btfss	3968,5,c	;volatile
  1835  00EBE6  D012               	goto	l364
  1836  00EBE8  C03E  F04B         	movff	guardar_tecla_presionada@i,_key
  1837  00EBEC  D801               	call	u3178
  1838  00EBEE  D00C               	goto	l365
  1839  00EBF0                     u3178:
  1840  00EBF0  0005               	push	
  1841  00EBF2  0100               	movlb	0	; () banked
  1842  00EBF4  6EFA               	movwf	pclath,c
  1843  00EBF6  51AA               	movf	_puntero_funcion& (0+255),w,b
  1844  00EBF8  6EFD               	movwf	tosl,c
  1845  00EBFA  51AB               	movf	(_puntero_funcion+1)& (0+255),w,b
  1846  00EBFC  6EFE               	movwf	tosh,c
  1847  00EBFE  50F8               	movf	tblptru,w,c
  1848  00EC00  6EFF               	movwf	tosu,c
  1849  00EC02  50FA               	movf	pclath,w,c
  1850  00EC04  504B               	movf	_key,w,c
  1851  00EC06  0012               	return		;indir
  1852  00EC08                     l365:
  1853  00EC08  BA80               	btfsc	3968,5,c	;volatile
  1854  00EC0A  D7FE               	goto	l365
  1855  00EC0C                     l364:
  1856                           
  1857                           ;teclado.c: 43: if (PORTAbits.RA7==1){key=(i)+1;puntero_funcion(key);while(PORTAbits.RA7
      +                          ==1){};}
  1858  00EC0C  AE80               	btfss	3968,7,c	;volatile
  1859  00EC0E  D012               	goto	l368
  1860  00EC10  283E               	incf	guardar_tecla_presionada@i,w,c
  1861  00EC12  6E4B               	movwf	_key,c
  1862  00EC14  D801               	call	u3208
  1863  00EC16  D00C               	goto	l369
  1864  00EC18                     u3208:
  1865  00EC18  0005               	push	
  1866  00EC1A  0100               	movlb	0	; () banked
  1867  00EC1C  6EFA               	movwf	pclath,c
  1868  00EC1E  51AA               	movf	_puntero_funcion& (0+255),w,b
  1869  00EC20  6EFD               	movwf	tosl,c
  1870  00EC22  51AB               	movf	(_puntero_funcion+1)& (0+255),w,b
  1871  00EC24  6EFE               	movwf	tosh,c
  1872  00EC26  50F8               	movf	tblptru,w,c
  1873  00EC28  6EFF               	movwf	tosu,c
  1874  00EC2A  50FA               	movf	pclath,w,c
  1875  00EC2C  504B               	movf	_key,w,c
  1876  00EC2E  0012               	return		;indir
  1877  00EC30                     l369:
  1878  00EC30  BE80               	btfsc	3968,7,c	;volatile
  1879  00EC32  D7FE               	goto	l369
  1880  00EC34                     l368:
  1881                           
  1882                           ;teclado.c: 44: if (PORTAbits.RA6==1){key=(i)+2;puntero_funcion(key);while(PORTAbits.RA6
      +                          ==1){};}
  1883  00EC34  AC80               	btfss	3968,6,c	;volatile
  1884  00EC36  D013               	goto	l372
  1885  00EC38  503E               	movf	guardar_tecla_presionada@i,w,c
  1886  00EC3A  0F02               	addlw	2
  1887  00EC3C  6E4B               	movwf	_key,c
  1888  00EC3E  D801               	call	u3238
  1889  00EC40  D00C               	goto	l373
  1890  00EC42                     u3238:
  1891  00EC42  0005               	push	
  1892  00EC44  0100               	movlb	0	; () banked
  1893  00EC46  6EFA               	movwf	pclath,c
  1894  00EC48  51AA               	movf	_puntero_funcion& (0+255),w,b
  1895  00EC4A  6EFD               	movwf	tosl,c
  1896  00EC4C  51AB               	movf	(_puntero_funcion+1)& (0+255),w,b
  1897  00EC4E  6EFE               	movwf	tosh,c
  1898  00EC50  50F8               	movf	tblptru,w,c
  1899  00EC52  6EFF               	movwf	tosu,c
  1900  00EC54  50FA               	movf	pclath,w,c
  1901  00EC56  504B               	movf	_key,w,c
  1902  00EC58  0012               	return		;indir
  1903  00EC5A                     l373:
  1904  00EC5A  BC80               	btfsc	3968,6,c	;volatile
  1905  00EC5C  D7FE               	goto	l373
  1906  00EC5E                     l372:
  1907                           
  1908                           ;teclado.c: 45: if (PORTCbits.RC2==1){key=letra[0]; }
  1909  00EC5E  A482               	btfss	3970,2,c	;volatile
  1910  00EC60  0012               	return	
  1911  00EC62  C03C  FFF6         	movff	guardar_tecla_presionada@letra,tblptrl
  1912  00EC66  C03D  FFF7         	movff	guardar_tecla_presionada@letra+1,tblptrh
  1913  00EC6A                     	if	0	;tblptru may be non-zero
  1914  00EC6A                     	endif
  1915  00EC6A                     	if	0	;tblptru may be non-zero
  1916  00EC6A                     	endif
  1917  00EC6A  0008               	tblrd		*
  1918  00EC6C  CFF5 F04B          	movff	tablat,_key
  1919  00EC70  0012               	return	
  1920  00EC72  0012               	return		;funcret
  1921  00EC74                     __end_of_guardar_tecla_presionada:
  1922                           	opt stack 0
  1923                           tosu	equ	0xFFF
  1924                           tosh	equ	0xFFE
  1925                           tosl	equ	0xFFD
  1926                           pclath	equ	0xFFA
  1927                           tblptru	equ	0xFF8
  1928                           tblptrh	equ	0xFF7
  1929                           tblptrl	equ	0xFF6
  1930                           tablat	equ	0xFF5
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postdec1	equ	0xFE5
  1934                           fsr1l	equ	0xFE1
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _ingresar_comando *****************
  1938 ;; Defined at:
  1939 ;;		line 141 in file "main.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  key             1    wreg     unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  key             1   58[COMRAM] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;		None               void
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;Total ram usage:        1 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    3
  1960 ;; This function calls:
  1961 ;;		_guardar_comando
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;;		_guardar_tecla_presionada
  1965 ;;		_leer_teclado
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text3
  1970  00DF7C                     __ptext3:
  1971                           	opt stack 0
  1972  00DF7C                     _ingresar_comando:
  1973                           	opt stack 26
  1974                           
  1975                           ;incstack = 0
  1976                           ;ingresar_comando@key stored from wreg
  1977  00DF7C  6E3B               	movwf	ingresar_comando@key,c
  1978                           
  1979                           ;main.c: 142: guardar_comando(key);
  1980  00DF7E  503B               	movf	ingresar_comando@key,w,c
  1981  00DF80  EC4D  F073         	call	_guardar_comando
  1982  00DF84  0012               	return		;funcret
  1983  00DF86                     __end_of_ingresar_comando:
  1984                           	opt stack 0
  1985                           tosu	equ	0xFFF
  1986                           tosh	equ	0xFFE
  1987                           tosl	equ	0xFFD
  1988                           pclath	equ	0xFFA
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _confirmar_actualizar_password *****************
  2000 ;; Defined at:
  2001 ;;		line 135 in file "main.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  tecla           1    wreg     unsigned char 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  tecla           1   56[COMRAM] unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;		None               void
  2008 ;; Registers used:
  2009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2016 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2019 ;;Total ram usage:        1 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    6
  2022 ;; This function calls:
  2023 ;;		_imprimir_tecla
  2024 ;;		_sprintf
  2025 ;; This function is called by:
  2026 ;;		_cambiar_password
  2027 ;;		_guardar_tecla_presionada
  2028 ;;		_leer_teclado
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text4
  2033  00E12C                     __ptext4:
  2034                           	opt stack 0
  2035  00E12C                     _confirmar_actualizar_password:
  2036                           	opt stack 22
  2037                           
  2038                           ;incstack = 0
  2039                           ;confirmar_actualizar_password@tecla stored from wreg
  2040  00E12C  6E39               	movwf	confirmar_actualizar_password@tecla,c
  2041                           
  2042                           ;main.c: 137: imprimir_tecla(tecla);
  2043  00E12E  5039               	movf	confirmar_actualizar_password@tecla,w,c
  2044  00E130  EC2E  F071         	call	_imprimir_tecla
  2045                           
  2046                           ;main.c: 138: sprintf(buffer2,"%01u",tecla);
  2047  00E134  0EB8               	movlw	low _buffer2
  2048  00E136  6E0D               	movwf	sprintf@sp,c
  2049  00E138  0E00               	movlw	high _buffer2
  2050  00E13A  6E0E               	movwf	sprintf@sp+1,c
  2051  00E13C  0EDE               	movlw	low STR_7
  2052  00E13E  6E0F               	movwf	sprintf@f,c
  2053  00E140  0EFF               	movlw	high STR_7
  2054  00E142  6E10               	movwf	sprintf@f+1,c
  2055  00E144  C039  F011         	movff	confirmar_actualizar_password@tecla,?_sprintf+4
  2056  00E148  6A12               	clrf	?_sprintf+5,c
  2057  00E14A  ECE1  F07D         	call	_sprintf	;wreg free
  2058  00E14E  0012               	return		;funcret
  2059  00E150                     __end_of_confirmar_actualizar_password:
  2060                           	opt stack 0
  2061                           tosu	equ	0xFFF
  2062                           tosh	equ	0xFFE
  2063                           tosl	equ	0xFFD
  2064                           pclath	equ	0xFFA
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           postdec1	equ	0xFE5
  2072                           fsr1l	equ	0xFE1
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _mostrar_guardar_nuevo_password *****************
  2076 ;; Defined at:
  2077 ;;		line 128 in file "main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  tecla           1    wreg     unsigned char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  tecla           1   56[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;		None               void
  2084 ;; Registers used:
  2085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2095 ;;Total ram usage:        1 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    6
  2098 ;; This function calls:
  2099 ;;		_guardar_nuevo_password
  2100 ;;		_imprimir_tecla
  2101 ;;		_sprintf
  2102 ;; This function is called by:
  2103 ;;		_cambiar_password
  2104 ;;		_guardar_tecla_presionada
  2105 ;;		_leer_teclado
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text5
  2110  00E1D0                     __ptext5:
  2111                           	opt stack 0
  2112  00E1D0                     _mostrar_guardar_nuevo_password:
  2113                           	opt stack 23
  2114                           
  2115                           ;incstack = 0
  2116                           ;mostrar_guardar_nuevo_password@tecla stored from wreg
  2117  00E1D0  6E39               	movwf	mostrar_guardar_nuevo_password@tecla,c
  2118                           
  2119                           ;main.c: 130: imprimir_tecla(tecla);
  2120  00E1D2  5039               	movf	mostrar_guardar_nuevo_password@tecla,w,c
  2121  00E1D4  EC2E  F071         	call	_imprimir_tecla
  2122                           
  2123                           ;main.c: 131: sprintf(buffer2,"%01u",tecla);
  2124  00E1D8  0EB8               	movlw	low _buffer2
  2125  00E1DA  6E0D               	movwf	sprintf@sp,c
  2126  00E1DC  0E00               	movlw	high _buffer2
  2127  00E1DE  6E0E               	movwf	sprintf@sp+1,c
  2128  00E1E0  0EDE               	movlw	low STR_7
  2129  00E1E2  6E0F               	movwf	sprintf@f,c
  2130  00E1E4  0EFF               	movlw	high STR_7
  2131  00E1E6  6E10               	movwf	sprintf@f+1,c
  2132  00E1E8  C039  F011         	movff	mostrar_guardar_nuevo_password@tecla,?_sprintf+4
  2133  00E1EC  6A12               	clrf	?_sprintf+5,c
  2134  00E1EE  ECE1  F07D         	call	_sprintf	;wreg free
  2135                           
  2136                           ;main.c: 132: guardar_nuevo_password(*buffer2);
  2137  00E1F2  0100               	movlb	0	; () banked
  2138  00E1F4  51B8               	movf	_buffer2& (0+255),w,b
  2139  00E1F6  EC51  F071         	call	_guardar_nuevo_password
  2140  00E1FA  0012               	return		;funcret
  2141  00E1FC                     __end_of_mostrar_guardar_nuevo_password:
  2142                           	opt stack 0
  2143                           tosu	equ	0xFFF
  2144                           tosh	equ	0xFFE
  2145                           tosl	equ	0xFFD
  2146                           pclath	equ	0xFFA
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function _mostrar_guardar_password *****************
  2158 ;; Defined at:
  2159 ;;		line 114 in file "main.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  tecla           1    wreg     unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  tecla           1   56[COMRAM] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    6
  2180 ;; This function calls:
  2181 ;;		_guardar_current_password
  2182 ;;		_imprimir_tecla
  2183 ;;		_sprintf
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;;		_guardar_tecla_presionada
  2187 ;;		_leer_teclado
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text6
  2192  00E1A4                     __ptext6:
  2193                           	opt stack 0
  2194  00E1A4                     _mostrar_guardar_password:
  2195                           	opt stack 23
  2196                           
  2197                           ;incstack = 0
  2198                           ;mostrar_guardar_password@tecla stored from wreg
  2199  00E1A4  6E39               	movwf	mostrar_guardar_password@tecla,c
  2200                           
  2201                           ;main.c: 116: imprimir_tecla(tecla);
  2202  00E1A6  5039               	movf	mostrar_guardar_password@tecla,w,c
  2203  00E1A8  EC2E  F071         	call	_imprimir_tecla
  2204                           
  2205                           ;main.c: 117: sprintf(buffer2,"%01u",tecla);
  2206  00E1AC  0EB8               	movlw	low _buffer2
  2207  00E1AE  6E0D               	movwf	sprintf@sp,c
  2208  00E1B0  0E00               	movlw	high _buffer2
  2209  00E1B2  6E0E               	movwf	sprintf@sp+1,c
  2210  00E1B4  0EDE               	movlw	low STR_7
  2211  00E1B6  6E0F               	movwf	sprintf@f,c
  2212  00E1B8  0EFF               	movlw	high STR_7
  2213  00E1BA  6E10               	movwf	sprintf@f+1,c
  2214  00E1BC  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  2215  00E1C0  6A12               	clrf	?_sprintf+5,c
  2216  00E1C2  ECE1  F07D         	call	_sprintf	;wreg free
  2217                           
  2218                           ;main.c: 118: guardar_current_password(*buffer2);
  2219  00E1C6  0100               	movlb	0	; () banked
  2220  00E1C8  51B8               	movf	_buffer2& (0+255),w,b
  2221  00E1CA  EC74  F071         	call	_guardar_current_password
  2222  00E1CE  0012               	return		;funcret
  2223  00E1D0                     __end_of_mostrar_guardar_password:
  2224                           	opt stack 0
  2225                           tosu	equ	0xFFF
  2226                           tosh	equ	0xFFE
  2227                           tosl	equ	0xFFD
  2228                           pclath	equ	0xFFA
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           postdec1	equ	0xFE5
  2236                           fsr1l	equ	0xFE1
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _cambiar_hora *****************
  2240 ;; Defined at:
  2241 ;;		line 149 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  tecla           1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  tecla           1   54[COMRAM] unsigned char 
  2246 ;;  validacion      2   52[COMRAM] int 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;		None               void
  2249 ;; Registers used:
  2250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2257 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2259 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2260 ;;Total ram usage:        3 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    6
  2263 ;; This function calls:
  2264 ;;		_guardar_elemento
  2265 ;; This function is called by:
  2266 ;;		_cambiar_horario
  2267 ;;		_guardar_tecla_presionada
  2268 ;;		_leer_teclado
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text7
  2273  00E55E                     __ptext7:
  2274                           	opt stack 0
  2275  00E55E                     _cambiar_hora:
  2276                           	opt stack 22
  2277                           
  2278                           ;incstack = 0
  2279                           ;cambiar_hora@tecla stored from wreg
  2280  00E55E  6E37               	movwf	cambiar_hora@tecla,c
  2281                           
  2282                           ;fecha.c: 151: valor_min = 0;
  2283  00E560  0E00               	movlw	0
  2284  00E562  0100               	movlb	0	; () banked
  2285  00E564  6FB7               	movwf	(fecha@valor_min+1)& (0+255),b
  2286  00E566  0E00               	movlw	0
  2287  00E568  6FB6               	movwf	fecha@valor_min& (0+255),b
  2288                           
  2289                           ;fecha.c: 152: valor_max = 23;
  2290  00E56A  0E00               	movlw	0
  2291  00E56C  0100               	movlb	0	; () banked
  2292  00E56E  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  2293  00E570  0E17               	movlw	23
  2294  00E572  6FB4               	movwf	fecha@valor_max& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;fecha.c: 154: int validacion = tamanio_hora < 3 - 1;
  2298  00E574  BE57               	btfsc	_tamanio_hora+1,7,c
  2299  00E576  D006               	goto	u2941
  2300  00E578  5057               	movf	_tamanio_hora+1,w,c
  2301  00E57A  E106               	bnz	u2940
  2302  00E57C  0E02               	movlw	2
  2303  00E57E  5C56               	subwf	_tamanio_hora,w,c
  2304  00E580  B0D8               	btfsc	status,0,c
  2305  00E582  D002               	goto	u2940
  2306  00E584                     u2941:
  2307  00E584  0E01               	movlw	1
  2308  00E586  D001               	goto	u2950
  2309  00E588                     u2940:
  2310  00E588  0E00               	movlw	0
  2311  00E58A                     u2950:
  2312  00E58A  6E35               	movwf	cambiar_hora@validacion,c
  2313  00E58C  6A36               	clrf	cambiar_hora@validacion+1,c
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;fecha.c: 155: guardar_elemento(tecla,hour,&tamanio_hora,validacion,&hora,actualizar_hor
      +                          a);
  2317  00E58E  0ECF               	movlw	low fecha@hour
  2318  00E590  6E24               	movwf	guardar_elemento@array,c
  2319  00E592  0E00               	movlw	high fecha@hour
  2320  00E594  6E25               	movwf	guardar_elemento@array+1,c
  2321  00E596  0E56               	movlw	low _tamanio_hora
  2322  00E598  6E26               	movwf	guardar_elemento@tamanio_array,c
  2323  00E59A  0E00               	movlw	high _tamanio_hora
  2324  00E59C  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2325  00E59E  C035  F028         	movff	cambiar_hora@validacion,guardar_elemento@validacion
  2326  00E5A2  C036  F029         	movff	cambiar_hora@validacion+1,guardar_elemento@validacion+1
  2327  00E5A6  0EEF               	movlw	low _hora
  2328  00E5A8  6E2A               	movwf	guardar_elemento@dato_fecha,c
  2329  00E5AA  0E00               	movlw	high _hora
  2330  00E5AC  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  2331  00E5AE  0E48               	movlw	low _actualizar_hora
  2332  00E5B0  6E2C               	movwf	guardar_elemento@doit,c
  2333  00E5B2  0EE0               	movlw	high _actualizar_hora
  2334  00E5B4  6E2D               	movwf	guardar_elemento@doit+1,c
  2335  00E5B6  5037               	movf	cambiar_hora@tecla,w,c
  2336  00E5B8  EC01  F07D         	call	_guardar_elemento
  2337  00E5BC  0012               	return		;funcret
  2338  00E5BE                     __end_of_cambiar_hora:
  2339                           	opt stack 0
  2340                           tosu	equ	0xFFF
  2341                           tosh	equ	0xFFE
  2342                           tosl	equ	0xFFD
  2343                           pclath	equ	0xFFA
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           postdec1	equ	0xFE5
  2351                           fsr1l	equ	0xFE1
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _cambiar_minutos *****************
  2355 ;; Defined at:
  2356 ;;		line 158 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  tecla           1    wreg     unsigned char 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  tecla           1   54[COMRAM] unsigned char 
  2361 ;;  validacion      2   52[COMRAM] int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;Total ram usage:        4 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    6
  2378 ;; This function calls:
  2379 ;;		_guardar_elemento
  2380 ;; This function is called by:
  2381 ;;		_cambiar_horario
  2382 ;;		_guardar_tecla_presionada
  2383 ;;		_leer_teclado
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text8
  2388  00E7EC                     __ptext8:
  2389                           	opt stack 0
  2390  00E7EC                     _cambiar_minutos:
  2391                           	opt stack 22
  2392                           
  2393                           ;incstack = 0
  2394                           ;cambiar_minutos@tecla stored from wreg
  2395  00E7EC  6E37               	movwf	cambiar_minutos@tecla,c
  2396                           
  2397                           ;fecha.c: 160: valor_min = 0;
  2398  00E7EE  0E00               	movlw	0
  2399  00E7F0  0100               	movlb	0	; () banked
  2400  00E7F2  6FB7               	movwf	(fecha@valor_min+1)& (0+255),b
  2401  00E7F4  0E00               	movlw	0
  2402  00E7F6  6FB6               	movwf	fecha@valor_min& (0+255),b
  2403                           
  2404                           ;fecha.c: 161: valor_max = 59;
  2405  00E7F8  0E00               	movlw	0
  2406  00E7FA  0100               	movlb	0	; () banked
  2407  00E7FC  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  2408  00E7FE  0E3B               	movlw	59
  2409  00E800  6FB4               	movwf	fecha@valor_max& (0+255),b
  2410                           
  2411                           ;fecha.c: 163: int validacion = (tamanio_minutos < 3 - 1 && tamanio_hora == 0);
  2412  00E802  0E00               	movlw	0
  2413  00E804  6E38               	movwf	_cambiar_minutos$1265,c
  2414                           
  2415                           ; BSR set to: 0
  2416  00E806  0100               	movlb	0	; () banked
  2417  00E808  BFDE               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  2418  00E80A  D008               	goto	l3570
  2419  00E80C  0100               	movlb	0	; () banked
  2420  00E80E  51DE               	movf	(_tamanio_minutos+1)& (0+255),w,b
  2421  00E810  E10C               	bnz	l3574
  2422  00E812  0E02               	movlw	2
  2423  00E814  0100               	movlb	0	; () banked
  2424  00E816  5DDD               	subwf	_tamanio_minutos& (0+255),w,b
  2425  00E818  B0D8               	btfsc	status,0,c
  2426  00E81A  D007               	goto	l3574
  2427  00E81C                     l3570:
  2428                           
  2429                           ; BSR set to: 0
  2430  00E81C  5056               	movf	_tamanio_hora,w,c
  2431  00E81E  1057               	iorwf	_tamanio_hora+1,w,c
  2432  00E820  A4D8               	btfss	status,2,c
  2433  00E822  D003               	goto	l3574
  2434                           
  2435                           ; BSR set to: 0
  2436  00E824  0E01               	movlw	1
  2437  00E826  6E38               	movwf	_cambiar_minutos$1265,c
  2438  00E828  D000               	goto	l3574
  2439  00E82A                     l3574:
  2440                           
  2441                           ; BSR set to: 0
  2442  00E82A  C038  F035         	movff	_cambiar_minutos$1265,cambiar_minutos@validacion
  2443  00E82E  6A36               	clrf	cambiar_minutos@validacion+1,c
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;fecha.c: 164: guardar_elemento(tecla,minutes,&tamanio_minutos,validacion,&minuto,actual
      +                          izar_minutos);
  2447  00E830  0ED2               	movlw	low fecha@minutes
  2448  00E832  6E24               	movwf	guardar_elemento@array,c
  2449  00E834  0E00               	movlw	high fecha@minutes
  2450  00E836  6E25               	movwf	guardar_elemento@array+1,c
  2451  00E838  0EDD               	movlw	low _tamanio_minutos
  2452  00E83A  6E26               	movwf	guardar_elemento@tamanio_array,c
  2453  00E83C  0E00               	movlw	high _tamanio_minutos
  2454  00E83E  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2455  00E840  C035  F028         	movff	cambiar_minutos@validacion,guardar_elemento@validacion
  2456  00E844  C036  F029         	movff	cambiar_minutos@validacion+1,guardar_elemento@validacion+1
  2457  00E848  0EF1               	movlw	low _minuto
  2458  00E84A  6E2A               	movwf	guardar_elemento@dato_fecha,c
  2459  00E84C  0E00               	movlw	high _minuto
  2460  00E84E  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  2461  00E850  0EA4               	movlw	low _actualizar_minutos
  2462  00E852  6E2C               	movwf	guardar_elemento@doit,c
  2463  00E854  0EE0               	movlw	high _actualizar_minutos
  2464  00E856  6E2D               	movwf	guardar_elemento@doit+1,c
  2465  00E858  5037               	movf	cambiar_minutos@tecla,w,c
  2466  00E85A  EC01  F07D         	call	_guardar_elemento
  2467  00E85E  0012               	return		;funcret
  2468  00E860                     __end_of_cambiar_minutos:
  2469                           	opt stack 0
  2470                           tosu	equ	0xFFF
  2471                           tosh	equ	0xFFE
  2472                           tosl	equ	0xFFD
  2473                           pclath	equ	0xFFA
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           fsr1l	equ	0xFE1
  2482                           status	equ	0xFD8
  2483                           
  2484 ;; *************** function _cambiar_dia *****************
  2485 ;; Defined at:
  2486 ;;		line 91 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  tecla           1    wreg     unsigned char 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  tecla           1   54[COMRAM] unsigned char 
  2491 ;;  validacion      2   52[COMRAM] int 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;		None               void
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2502 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2504 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2505 ;;Total ram usage:        3 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    6
  2508 ;; This function calls:
  2509 ;;		_guardar_elemento
  2510 ;;		_obtener_dia_mes
  2511 ;; This function is called by:
  2512 ;;		_cambiar_fecha
  2513 ;;		_guardar_tecla_presionada
  2514 ;;		_leer_teclado
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text9
  2519  00E4A8                     __ptext9:
  2520                           	opt stack 0
  2521  00E4A8                     _cambiar_dia:
  2522                           	opt stack 22
  2523                           
  2524                           ;incstack = 0
  2525                           ;cambiar_dia@tecla stored from wreg
  2526  00E4A8  6E37               	movwf	cambiar_dia@tecla,c
  2527                           
  2528                           ;fecha.c: 93: valor_min = 1;
  2529  00E4AA  0E00               	movlw	0
  2530  00E4AC  0100               	movlb	0	; () banked
  2531  00E4AE  6FB7               	movwf	(fecha@valor_min+1)& (0+255),b
  2532  00E4B0  0E01               	movlw	1
  2533  00E4B2  6FB6               	movwf	fecha@valor_min& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;fecha.c: 94: obtener_dia_mes();
  2537  00E4B4  ECF3  F078         	call	_obtener_dia_mes	;wreg free
  2538                           
  2539                           ;fecha.c: 96: int validacion = tamanio_dia < 3 - 1;
  2540  00E4B8  BE55               	btfsc	_tamanio_dia+1,7,c
  2541  00E4BA  D006               	goto	u2871
  2542  00E4BC  5055               	movf	_tamanio_dia+1,w,c
  2543  00E4BE  E106               	bnz	u2870
  2544  00E4C0  0E02               	movlw	2
  2545  00E4C2  5C54               	subwf	_tamanio_dia,w,c
  2546  00E4C4  B0D8               	btfsc	status,0,c
  2547  00E4C6  D002               	goto	u2870
  2548  00E4C8                     u2871:
  2549  00E4C8  0E01               	movlw	1
  2550  00E4CA  D001               	goto	u2880
  2551  00E4CC                     u2870:
  2552  00E4CC  0E00               	movlw	0
  2553  00E4CE                     u2880:
  2554  00E4CE  6E35               	movwf	cambiar_dia@validacion,c
  2555  00E4D0  6A36               	clrf	cambiar_dia@validacion+1,c
  2556                           
  2557                           ;fecha.c: 97: guardar_elemento(tecla,day,&tamanio_dia,validacion,&dia,actualiza_dia);
  2558  00E4D2  0ECC               	movlw	low fecha@day
  2559  00E4D4  6E24               	movwf	guardar_elemento@array,c
  2560  00E4D6  0E00               	movlw	high fecha@day
  2561  00E4D8  6E25               	movwf	guardar_elemento@array+1,c
  2562  00E4DA  0E54               	movlw	low _tamanio_dia
  2563  00E4DC  6E26               	movwf	guardar_elemento@tamanio_array,c
  2564  00E4DE  0E00               	movlw	high _tamanio_dia
  2565  00E4E0  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2566  00E4E2  C035  F028         	movff	cambiar_dia@validacion,guardar_elemento@validacion
  2567  00E4E6  C036  F029         	movff	cambiar_dia@validacion+1,guardar_elemento@validacion+1
  2568  00E4EA  0EED               	movlw	low _dia
  2569  00E4EC  6E2A               	movwf	guardar_elemento@dato_fecha,c
  2570  00E4EE  0E00               	movlw	high _dia
  2571  00E4F0  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  2572  00E4F2  0E2A               	movlw	low _actualiza_dia
  2573  00E4F4  6E2C               	movwf	guardar_elemento@doit,c
  2574  00E4F6  0EE0               	movlw	high _actualiza_dia
  2575  00E4F8  6E2D               	movwf	guardar_elemento@doit+1,c
  2576  00E4FA  5037               	movf	cambiar_dia@tecla,w,c
  2577  00E4FC  EC01  F07D         	call	_guardar_elemento
  2578  00E500  0012               	return		;funcret
  2579  00E502                     __end_of_cambiar_dia:
  2580                           	opt stack 0
  2581                           tosu	equ	0xFFF
  2582                           tosh	equ	0xFFE
  2583                           tosl	equ	0xFFD
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postdec1	equ	0xFE5
  2592                           fsr1l	equ	0xFE1
  2593                           status	equ	0xFD8
  2594                           
  2595 ;; *************** function _cambiar_mes *****************
  2596 ;; Defined at:
  2597 ;;		line 101 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  tecla           1    wreg     unsigned char 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  tecla           1   54[COMRAM] unsigned char 
  2602 ;;  validacion      2   52[COMRAM] int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;		None               void
  2605 ;; Registers used:
  2606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2613 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2616 ;;Total ram usage:        4 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    6
  2619 ;; This function calls:
  2620 ;;		_guardar_elemento
  2621 ;; This function is called by:
  2622 ;;		_cambiar_fecha
  2623 ;;		_guardar_tecla_presionada
  2624 ;;		_leer_teclado
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text10
  2629  00E62C                     __ptext10:
  2630                           	opt stack 0
  2631  00E62C                     _cambiar_mes:
  2632                           	opt stack 22
  2633                           
  2634                           ;incstack = 0
  2635                           ;cambiar_mes@tecla stored from wreg
  2636  00E62C  6E37               	movwf	cambiar_mes@tecla,c
  2637                           
  2638                           ;fecha.c: 103: valor_min = 1;
  2639  00E62E  0E00               	movlw	0
  2640  00E630  0100               	movlb	0	; () banked
  2641  00E632  6FB7               	movwf	(fecha@valor_min+1)& (0+255),b
  2642  00E634  0E01               	movlw	1
  2643  00E636  6FB6               	movwf	fecha@valor_min& (0+255),b
  2644                           
  2645                           ;fecha.c: 104: valor_max = 12;
  2646  00E638  0E00               	movlw	0
  2647  00E63A  0100               	movlb	0	; () banked
  2648  00E63C  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  2649  00E63E  0E0C               	movlw	12
  2650  00E640  6FB4               	movwf	fecha@valor_max& (0+255),b
  2651                           
  2652                           ;fecha.c: 106: int validacion = (tamanio_mes < 3 - 1 && tamanio_dia == 0);
  2653  00E642  0E00               	movlw	0
  2654  00E644  6E38               	movwf	_cambiar_mes$1246,c
  2655                           
  2656                           ; BSR set to: 0
  2657  00E646  BE59               	btfsc	_tamanio_mes+1,7,c
  2658  00E648  D006               	goto	l3538
  2659  00E64A  5059               	movf	_tamanio_mes+1,w,c
  2660  00E64C  E10B               	bnz	l3542
  2661  00E64E  0E02               	movlw	2
  2662  00E650  5C58               	subwf	_tamanio_mes,w,c
  2663  00E652  B0D8               	btfsc	status,0,c
  2664  00E654  D007               	goto	l3542
  2665  00E656                     l3538:
  2666                           
  2667                           ; BSR set to: 0
  2668  00E656  5054               	movf	_tamanio_dia,w,c
  2669  00E658  1055               	iorwf	_tamanio_dia+1,w,c
  2670  00E65A  A4D8               	btfss	status,2,c
  2671  00E65C  D003               	goto	l3542
  2672                           
  2673                           ; BSR set to: 0
  2674  00E65E  0E01               	movlw	1
  2675  00E660  6E38               	movwf	_cambiar_mes$1246,c
  2676  00E662  D000               	goto	l3542
  2677  00E664                     l3542:
  2678                           
  2679                           ; BSR set to: 0
  2680  00E664  C038  F035         	movff	_cambiar_mes$1246,cambiar_mes@validacion
  2681  00E668  6A36               	clrf	cambiar_mes@validacion+1,c
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;fecha.c: 107: guardar_elemento(tecla,month,&tamanio_mes,validacion,&mes,actualiza_eleme
      +                          nto);
  2685  00E66A  0ED5               	movlw	low fecha@month
  2686  00E66C  6E24               	movwf	guardar_elemento@array,c
  2687  00E66E  0E00               	movlw	high fecha@month
  2688  00E670  6E25               	movwf	guardar_elemento@array+1,c
  2689  00E672  0E58               	movlw	low _tamanio_mes
  2690  00E674  6E26               	movwf	guardar_elemento@tamanio_array,c
  2691  00E676  0E00               	movlw	high _tamanio_mes
  2692  00E678  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2693  00E67A  C035  F028         	movff	cambiar_mes@validacion,guardar_elemento@validacion
  2694  00E67E  C036  F029         	movff	cambiar_mes@validacion+1,guardar_elemento@validacion+1
  2695  00E682  0E5C               	movlw	low _mes
  2696  00E684  6E2A               	movwf	guardar_elemento@dato_fecha,c
  2697  00E686  0E00               	movlw	high _mes
  2698  00E688  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  2699  00E68A  0EDE               	movlw	low _actualiza_elemento
  2700  00E68C  6E2C               	movwf	guardar_elemento@doit,c
  2701  00E68E  0EDF               	movlw	high _actualiza_elemento
  2702  00E690  6E2D               	movwf	guardar_elemento@doit+1,c
  2703  00E692  5037               	movf	cambiar_mes@tecla,w,c
  2704  00E694  EC01  F07D         	call	_guardar_elemento
  2705  00E698  0012               	return		;funcret
  2706  00E69A                     __end_of_cambiar_mes:
  2707                           	opt stack 0
  2708                           tosu	equ	0xFFF
  2709                           tosh	equ	0xFFE
  2710                           tosl	equ	0xFFD
  2711                           pclath	equ	0xFFA
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postdec1	equ	0xFE5
  2719                           fsr1l	equ	0xFE1
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _cambiar_anio *****************
  2723 ;; Defined at:
  2724 ;;		line 111 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  tecla           1    wreg     unsigned char 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  tecla           1   54[COMRAM] unsigned char 
  2729 ;;  validacion      2   52[COMRAM] int 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;		None               void
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        4 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    6
  2746 ;; This function calls:
  2747 ;;		_guardar_elemento
  2748 ;; This function is called by:
  2749 ;;		_cambiar_fecha
  2750 ;;		_guardar_tecla_presionada
  2751 ;;		_leer_teclado
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text11
  2756  00E94E                     __ptext11:
  2757                           	opt stack 0
  2758  00E94E                     _cambiar_anio:
  2759                           	opt stack 22
  2760                           
  2761                           ;incstack = 0
  2762                           ;cambiar_anio@tecla stored from wreg
  2763  00E94E  6E37               	movwf	cambiar_anio@tecla,c
  2764                           
  2765                           ;fecha.c: 113: valor_min = 16;
  2766  00E950  0E00               	movlw	0
  2767  00E952  0100               	movlb	0	; () banked
  2768  00E954  6FB7               	movwf	(fecha@valor_min+1)& (0+255),b
  2769  00E956  0E10               	movlw	16
  2770  00E958  6FB6               	movwf	fecha@valor_min& (0+255),b
  2771                           
  2772                           ;fecha.c: 114: valor_max = 99;
  2773  00E95A  0E00               	movlw	0
  2774  00E95C  0100               	movlb	0	; () banked
  2775  00E95E  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  2776  00E960  0E63               	movlw	99
  2777  00E962  6FB4               	movwf	fecha@valor_max& (0+255),b
  2778                           
  2779                           ;fecha.c: 116: int validacion = (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia
      +                           == 0);
  2780  00E964  0E00               	movlw	0
  2781  00E966  6E38               	movwf	_cambiar_anio$1250,c
  2782                           
  2783                           ; BSR set to: 0
  2784  00E968  0100               	movlb	0	; () banked
  2785  00E96A  BFDC               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  2786  00E96C  D008               	goto	l3550
  2787  00E96E  0100               	movlb	0	; () banked
  2788  00E970  51DC               	movf	(_tamanio_anio+1)& (0+255),w,b
  2789  00E972  E110               	bnz	l3556
  2790  00E974  0E02               	movlw	2
  2791  00E976  0100               	movlb	0	; () banked
  2792  00E978  5DDB               	subwf	_tamanio_anio& (0+255),w,b
  2793  00E97A  B0D8               	btfsc	status,0,c
  2794  00E97C  D00B               	goto	l3556
  2795  00E97E                     l3550:
  2796                           
  2797                           ; BSR set to: 0
  2798  00E97E  5058               	movf	_tamanio_mes,w,c
  2799  00E980  1059               	iorwf	_tamanio_mes+1,w,c
  2800  00E982  A4D8               	btfss	status,2,c
  2801  00E984  D007               	goto	l3556
  2802                           
  2803                           ; BSR set to: 0
  2804  00E986  5054               	movf	_tamanio_dia,w,c
  2805  00E988  1055               	iorwf	_tamanio_dia+1,w,c
  2806  00E98A  A4D8               	btfss	status,2,c
  2807  00E98C  D003               	goto	l3556
  2808                           
  2809                           ; BSR set to: 0
  2810  00E98E  0E01               	movlw	1
  2811  00E990  6E38               	movwf	_cambiar_anio$1250,c
  2812  00E992  D000               	goto	l3556
  2813  00E994                     l3556:
  2814                           
  2815                           ; BSR set to: 0
  2816  00E994  C038  F035         	movff	_cambiar_anio$1250,cambiar_anio@validacion
  2817  00E998  6A36               	clrf	cambiar_anio@validacion+1,c
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;fecha.c: 117: guardar_elemento(tecla,year,&tamanio_anio,validacion,&anio,actualiza_elem
      +                          ento);
  2821  00E99A  0ED8               	movlw	low fecha@year
  2822  00E99C  6E24               	movwf	guardar_elemento@array,c
  2823  00E99E  0E00               	movlw	high fecha@year
  2824  00E9A0  6E25               	movwf	guardar_elemento@array+1,c
  2825  00E9A2  0EDB               	movlw	low _tamanio_anio
  2826  00E9A4  6E26               	movwf	guardar_elemento@tamanio_array,c
  2827  00E9A6  0E00               	movlw	high _tamanio_anio
  2828  00E9A8  6E27               	movwf	guardar_elemento@tamanio_array+1,c
  2829  00E9AA  C035  F028         	movff	cambiar_anio@validacion,guardar_elemento@validacion
  2830  00E9AE  C036  F029         	movff	cambiar_anio@validacion+1,guardar_elemento@validacion+1
  2831  00E9B2  0E5A               	movlw	low _anio
  2832  00E9B4  6E2A               	movwf	guardar_elemento@dato_fecha,c
  2833  00E9B6  0E00               	movlw	high _anio
  2834  00E9B8  6E2B               	movwf	guardar_elemento@dato_fecha+1,c
  2835  00E9BA  0EDE               	movlw	low _actualiza_elemento
  2836  00E9BC  6E2C               	movwf	guardar_elemento@doit,c
  2837  00E9BE  0EDF               	movlw	high _actualiza_elemento
  2838  00E9C0  6E2D               	movwf	guardar_elemento@doit+1,c
  2839  00E9C2  5037               	movf	cambiar_anio@tecla,w,c
  2840  00E9C4  EC01  F07D         	call	_guardar_elemento
  2841  00E9C8  0012               	return		;funcret
  2842  00E9CA                     __end_of_cambiar_anio:
  2843                           	opt stack 0
  2844                           tosu	equ	0xFFF
  2845                           tosh	equ	0xFFE
  2846                           tosl	equ	0xFFD
  2847                           pclath	equ	0xFFA
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1l	equ	0xFE1
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _mostrar_guardar_temporal_password *****************
  2859 ;; Defined at:
  2860 ;;		line 121 in file "main.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  tecla           1    wreg     unsigned char 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  tecla           1   56[COMRAM] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2878 ;;Total ram usage:        1 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    6
  2881 ;; This function calls:
  2882 ;;		_guardar_password_temporal
  2883 ;;		_imprimir_tecla
  2884 ;;		_sprintf
  2885 ;; This function is called by:
  2886 ;;		_cambiar_password
  2887 ;;		_guardar_tecla_presionada
  2888 ;;		_leer_teclado
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text12
  2893  00E178                     __ptext12:
  2894                           	opt stack 0
  2895  00E178                     _mostrar_guardar_temporal_password:
  2896                           	opt stack 23
  2897                           
  2898                           ;incstack = 0
  2899                           ;mostrar_guardar_temporal_password@tecla stored from wreg
  2900  00E178  6E39               	movwf	mostrar_guardar_temporal_password@tecla,c
  2901                           
  2902                           ;main.c: 123: imprimir_tecla(tecla);
  2903  00E17A  5039               	movf	mostrar_guardar_temporal_password@tecla,w,c
  2904  00E17C  EC2E  F071         	call	_imprimir_tecla
  2905                           
  2906                           ;main.c: 124: sprintf(buffer2,"%01u",tecla);
  2907  00E180  0EB8               	movlw	low _buffer2
  2908  00E182  6E0D               	movwf	sprintf@sp,c
  2909  00E184  0E00               	movlw	high _buffer2
  2910  00E186  6E0E               	movwf	sprintf@sp+1,c
  2911  00E188  0EDE               	movlw	low STR_7
  2912  00E18A  6E0F               	movwf	sprintf@f,c
  2913  00E18C  0EFF               	movlw	high STR_7
  2914  00E18E  6E10               	movwf	sprintf@f+1,c
  2915  00E190  C039  F011         	movff	mostrar_guardar_temporal_password@tecla,?_sprintf+4
  2916  00E194  6A12               	clrf	?_sprintf+5,c
  2917  00E196  ECE1  F07D         	call	_sprintf	;wreg free
  2918                           
  2919                           ;main.c: 125: guardar_password_temporal(*buffer2);
  2920  00E19A  0100               	movlb	0	; () banked
  2921  00E19C  51B8               	movf	_buffer2& (0+255),w,b
  2922  00E19E  EC97  F071         	call	_guardar_password_temporal
  2923  00E1A2  0012               	return		;funcret
  2924  00E1A4                     __end_of_mostrar_guardar_temporal_password:
  2925                           	opt stack 0
  2926                           tosu	equ	0xFFF
  2927                           tosh	equ	0xFFE
  2928                           tosl	equ	0xFFD
  2929                           pclath	equ	0xFFA
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1l	equ	0xFE1
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _guardar_password_temporal *****************
  2941 ;; Defined at:
  2942 ;;		line 16 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  valor           1    wreg     unsigned char 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  valor           1    2[COMRAM] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;		None               void
  2949 ;; Registers used:
  2950 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2958 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2960 ;;Total ram usage:        3 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_mostrar_guardar_temporal_password
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text13
  2970  00E32E                     __ptext13:
  2971                           	opt stack 0
  2972  00E32E                     _guardar_password_temporal:
  2973                           	opt stack 28
  2974                           
  2975                           ;incstack = 0
  2976                           ;guardar_password_temporal@valor stored from wreg
  2977  00E32E  6E03               	movwf	guardar_password_temporal@valor,c
  2978                           
  2979                           ;alarma.c: 18: if (tamanio_password < 6){
  2980  00E330  BE4A               	btfsc	_tamanio_password+1,7,c
  2981  00E332  D006               	goto	l3398
  2982  00E334  504A               	movf	_tamanio_password+1,w,c
  2983  00E336  E11D               	bnz	l710
  2984  00E338  0E06               	movlw	6
  2985  00E33A  5C49               	subwf	_tamanio_password,w,c
  2986  00E33C  B0D8               	btfsc	status,0,c
  2987  00E33E  0012               	return	
  2988  00E340                     l3398:
  2989                           
  2990                           ;alarma.c: 19: temporal[tamanio_password] = valor;
  2991  00E340  0E7E               	movlw	low _temporal
  2992  00E342  2449               	addwf	_tamanio_password,w,c
  2993  00E344  6ED9               	movwf	fsr2l,c
  2994  00E346  0E00               	movlw	high _temporal
  2995  00E348  204A               	addwfc	_tamanio_password+1,w,c
  2996  00E34A  6EDA               	movwf	fsr2h,c
  2997  00E34C  C003  FFDF         	movff	guardar_password_temporal@valor,indf2
  2998                           
  2999                           ;alarma.c: 20: temporal [tamanio_password+1] = '\0';
  3000  00E350  0E01               	movlw	1
  3001  00E352  2449               	addwf	_tamanio_password,w,c
  3002  00E354  6E01               	movwf	??_guardar_password_temporal& (0+255),c
  3003  00E356  0E00               	movlw	0
  3004  00E358  204A               	addwfc	_tamanio_password+1,w,c
  3005  00E35A  6E02               	movwf	(??_guardar_password_temporal+1)& (0+255),c
  3006  00E35C  0E7E               	movlw	low _temporal
  3007  00E35E  2401               	addwf	??_guardar_password_temporal,w,c
  3008  00E360  6ED9               	movwf	fsr2l,c
  3009  00E362  0E00               	movlw	high _temporal
  3010  00E364  2002               	addwfc	??_guardar_password_temporal+1,w,c
  3011  00E366  6EDA               	movwf	fsr2h,c
  3012  00E368  0E00               	movlw	0
  3013  00E36A  6EDF               	movwf	indf2,c
  3014                           
  3015                           ;alarma.c: 21: tamanio_password++;
  3016  00E36C  4A49               	infsnz	_tamanio_password,f,c
  3017  00E36E  2A4A               	incf	_tamanio_password+1,f,c
  3018  00E370  0012               	return	
  3019  00E372                     l710:
  3020  00E372  0012               	return		;funcret
  3021  00E374                     __end_of_guardar_password_temporal:
  3022                           	opt stack 0
  3023                           tosu	equ	0xFFF
  3024                           tosh	equ	0xFFE
  3025                           tosl	equ	0xFFD
  3026                           pclath	equ	0xFFA
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1l	equ	0xFE1
  3035                           indf2	equ	0xFDF
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _guardar_current_password *****************
  3041 ;; Defined at:
  3042 ;;		line 6 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  valor           1    wreg     unsigned char 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  valor           1    2[COMRAM] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;		None               void
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3059 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3060 ;;Total ram usage:        3 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_mostrar_guardar_password
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text14
  3070  00E2E8                     __ptext14:
  3071                           	opt stack 0
  3072  00E2E8                     _guardar_current_password:
  3073                           	opt stack 28
  3074                           
  3075                           ;incstack = 0
  3076                           ;guardar_current_password@valor stored from wreg
  3077  00E2E8  6E03               	movwf	guardar_current_password@valor,c
  3078                           
  3079                           ;alarma.c: 9: if (tamanio_password < 6){
  3080  00E2EA  BE4A               	btfsc	_tamanio_password+1,7,c
  3081  00E2EC  D006               	goto	l3392
  3082  00E2EE  504A               	movf	_tamanio_password+1,w,c
  3083  00E2F0  E11D               	bnz	l706
  3084  00E2F2  0E06               	movlw	6
  3085  00E2F4  5C49               	subwf	_tamanio_password,w,c
  3086  00E2F6  B0D8               	btfsc	status,0,c
  3087  00E2F8  0012               	return	
  3088  00E2FA                     l3392:
  3089                           
  3090                           ;alarma.c: 10: current_password[tamanio_password] = valor;
  3091  00E2FA  0E70               	movlw	low _current_password
  3092  00E2FC  2449               	addwf	_tamanio_password,w,c
  3093  00E2FE  6ED9               	movwf	fsr2l,c
  3094  00E300  0E00               	movlw	high _current_password
  3095  00E302  204A               	addwfc	_tamanio_password+1,w,c
  3096  00E304  6EDA               	movwf	fsr2h,c
  3097  00E306  C003  FFDF         	movff	guardar_current_password@valor,indf2
  3098                           
  3099                           ;alarma.c: 11: current_password [tamanio_password+1] = '\0';
  3100  00E30A  0E01               	movlw	1
  3101  00E30C  2449               	addwf	_tamanio_password,w,c
  3102  00E30E  6E01               	movwf	??_guardar_current_password& (0+255),c
  3103  00E310  0E00               	movlw	0
  3104  00E312  204A               	addwfc	_tamanio_password+1,w,c
  3105  00E314  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  3106  00E316  0E70               	movlw	low _current_password
  3107  00E318  2401               	addwf	??_guardar_current_password,w,c
  3108  00E31A  6ED9               	movwf	fsr2l,c
  3109  00E31C  0E00               	movlw	high _current_password
  3110  00E31E  2002               	addwfc	??_guardar_current_password+1,w,c
  3111  00E320  6EDA               	movwf	fsr2h,c
  3112  00E322  0E00               	movlw	0
  3113  00E324  6EDF               	movwf	indf2,c
  3114                           
  3115                           ;alarma.c: 12: tamanio_password++;
  3116  00E326  4A49               	infsnz	_tamanio_password,f,c
  3117  00E328  2A4A               	incf	_tamanio_password+1,f,c
  3118  00E32A  0012               	return	
  3119  00E32C                     l706:
  3120  00E32C  0012               	return		;funcret
  3121  00E32E                     __end_of_guardar_current_password:
  3122                           	opt stack 0
  3123                           tosu	equ	0xFFF
  3124                           tosh	equ	0xFFE
  3125                           tosl	equ	0xFFD
  3126                           pclath	equ	0xFFA
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           postinc0	equ	0xFEE
  3132                           wreg	equ	0xFE8
  3133                           postdec1	equ	0xFE5
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _guardar_nuevo_password *****************
  3141 ;; Defined at:
  3142 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  valor           1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  valor           1    2[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3159 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3160 ;;Total ram usage:        3 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_mostrar_guardar_nuevo_password
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text15
  3170  00E2A2                     __ptext15:
  3171                           	opt stack 0
  3172  00E2A2                     _guardar_nuevo_password:
  3173                           	opt stack 28
  3174                           
  3175                           ;incstack = 0
  3176                           ;guardar_nuevo_password@valor stored from wreg
  3177  00E2A2  6E03               	movwf	guardar_nuevo_password@valor,c
  3178                           
  3179                           ;alarma.c: 27: if (tamanio_new_password < 6){
  3180  00E2A4  BE48               	btfsc	_tamanio_new_password+1,7,c
  3181  00E2A6  D006               	goto	l3404
  3182  00E2A8  5048               	movf	_tamanio_new_password+1,w,c
  3183  00E2AA  E11D               	bnz	l714
  3184  00E2AC  0E06               	movlw	6
  3185  00E2AE  5C47               	subwf	_tamanio_new_password,w,c
  3186  00E2B0  B0D8               	btfsc	status,0,c
  3187  00E2B2  0012               	return	
  3188  00E2B4                     l3404:
  3189                           
  3190                           ;alarma.c: 28: new_password[tamanio_new_password] = valor;
  3191  00E2B4  0E77               	movlw	low _new_password
  3192  00E2B6  2447               	addwf	_tamanio_new_password,w,c
  3193  00E2B8  6ED9               	movwf	fsr2l,c
  3194  00E2BA  0E00               	movlw	high _new_password
  3195  00E2BC  2048               	addwfc	_tamanio_new_password+1,w,c
  3196  00E2BE  6EDA               	movwf	fsr2h,c
  3197  00E2C0  C003  FFDF         	movff	guardar_nuevo_password@valor,indf2
  3198                           
  3199                           ;alarma.c: 29: new_password [tamanio_new_password+1] = 0;
  3200  00E2C4  0E01               	movlw	1
  3201  00E2C6  2447               	addwf	_tamanio_new_password,w,c
  3202  00E2C8  6E01               	movwf	??_guardar_nuevo_password& (0+255),c
  3203  00E2CA  0E00               	movlw	0
  3204  00E2CC  2048               	addwfc	_tamanio_new_password+1,w,c
  3205  00E2CE  6E02               	movwf	(??_guardar_nuevo_password+1)& (0+255),c
  3206  00E2D0  0E77               	movlw	low _new_password
  3207  00E2D2  2401               	addwf	??_guardar_nuevo_password,w,c
  3208  00E2D4  6ED9               	movwf	fsr2l,c
  3209  00E2D6  0E00               	movlw	high _new_password
  3210  00E2D8  2002               	addwfc	??_guardar_nuevo_password+1,w,c
  3211  00E2DA  6EDA               	movwf	fsr2h,c
  3212  00E2DC  0E00               	movlw	0
  3213  00E2DE  6EDF               	movwf	indf2,c
  3214                           
  3215                           ;alarma.c: 30: tamanio_new_password++;
  3216  00E2E0  4A47               	infsnz	_tamanio_new_password,f,c
  3217  00E2E2  2A48               	incf	_tamanio_new_password+1,f,c
  3218  00E2E4  0012               	return	
  3219  00E2E6                     l714:
  3220  00E2E6  0012               	return		;funcret
  3221  00E2E8                     __end_of_guardar_nuevo_password:
  3222                           	opt stack 0
  3223                           tosu	equ	0xFFF
  3224                           tosh	equ	0xFFE
  3225                           tosl	equ	0xFFD
  3226                           pclath	equ	0xFFA
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1l	equ	0xFE1
  3235                           indf2	equ	0xFDF
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _guardar_comando *****************
  3241 ;; Defined at:
  3242 ;;		line 19 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  tecla           1    wreg     unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  tecla           1   57[COMRAM] unsigned char 
  3247 ;;  aux            20   37[COMRAM] unsigned char [20]
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3260 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3261 ;;Total ram usage:       23 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    2
  3264 ;; This function calls:
  3265 ;;		_sprintf
  3266 ;; This function is called by:
  3267 ;;		_ingresar_comando
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text16
  3272  00E69A                     __ptext16:
  3273                           	opt stack 0
  3274  00E69A                     _guardar_comando:
  3275                           	opt stack 26
  3276                           
  3277                           ;incstack = 0
  3278                           ;guardar_comando@tecla stored from wreg
  3279  00E69A  6E3A               	movwf	guardar_comando@tecla,c
  3280                           
  3281                           ;teclado.c: 21: unsigned char aux[20];
  3282                           ;teclado.c: 22: sprintf(aux,"%01u",tecla);
  3283  00E69C  0E26               	movlw	low guardar_comando@aux
  3284  00E69E  6E0D               	movwf	sprintf@sp,c
  3285  00E6A0  0E00               	movlw	high guardar_comando@aux
  3286  00E6A2  6E0E               	movwf	sprintf@sp+1,c
  3287  00E6A4  0EDE               	movlw	low STR_7
  3288  00E6A6  6E0F               	movwf	sprintf@f,c
  3289  00E6A8  0EFF               	movlw	high STR_7
  3290  00E6AA  6E10               	movwf	sprintf@f+1,c
  3291  00E6AC  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  3292  00E6B0  6A12               	clrf	?_sprintf+5,c
  3293  00E6B2  ECE1  F07D         	call	_sprintf	;wreg free
  3294                           
  3295                           ;teclado.c: 23: if (tamanio_comando < 2){
  3296  00E6B6  0100               	movlb	0	; () banked
  3297  00E6B8  BFAF               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  3298  00E6BA  D008               	goto	l3412
  3299  00E6BC  0100               	movlb	0	; () banked
  3300  00E6BE  51AF               	movf	(_tamanio_comando+1)& (0+255),w,b
  3301  00E6C0  E123               	bnz	l356
  3302  00E6C2  0E02               	movlw	2
  3303  00E6C4  0100               	movlb	0	; () banked
  3304  00E6C6  5DAE               	subwf	_tamanio_comando& (0+255),w,b
  3305  00E6C8  B0D8               	btfsc	status,0,c
  3306  00E6CA  0012               	return	
  3307  00E6CC                     l3412:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;teclado.c: 24: comando[tamanio_comando] = *aux;
  3311  00E6CC  0EEA               	movlw	low _comando
  3312  00E6CE  0100               	movlb	0	; () banked
  3313  00E6D0  25AE               	addwf	_tamanio_comando& (0+255),w,b
  3314  00E6D2  6ED9               	movwf	fsr2l,c
  3315  00E6D4  0E00               	movlw	high _comando
  3316  00E6D6  0100               	movlb	0	; () banked
  3317  00E6D8  21AF               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3318  00E6DA  6EDA               	movwf	fsr2h,c
  3319  00E6DC  C026  FFDF         	movff	guardar_comando@aux,indf2
  3320                           
  3321                           ;teclado.c: 25: comando [tamanio_comando+1] = 0;
  3322  00E6E0  0E01               	movlw	1
  3323  00E6E2  0100               	movlb	0	; () banked
  3324  00E6E4  25AE               	addwf	_tamanio_comando& (0+255),w,b
  3325  00E6E6  6E24               	movwf	??_guardar_comando& (0+255),c
  3326  00E6E8  0E00               	movlw	0
  3327  00E6EA  0100               	movlb	0	; () banked
  3328  00E6EC  21AF               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3329  00E6EE  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  3330  00E6F0  0EEA               	movlw	low _comando
  3331  00E6F2  2424               	addwf	??_guardar_comando,w,c
  3332  00E6F4  6ED9               	movwf	fsr2l,c
  3333  00E6F6  0E00               	movlw	high _comando
  3334  00E6F8  2025               	addwfc	??_guardar_comando+1,w,c
  3335  00E6FA  6EDA               	movwf	fsr2h,c
  3336  00E6FC  0E00               	movlw	0
  3337  00E6FE  6EDF               	movwf	indf2,c
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;teclado.c: 26: tamanio_comando++;
  3341  00E700  0100               	movlb	0	; () banked
  3342  00E702  4BAE               	infsnz	_tamanio_comando& (0+255),f,b
  3343  00E704  2BAF               	incf	(_tamanio_comando+1)& (0+255),f,b
  3344  00E706  0012               	return	
  3345  00E708                     l356:
  3346                           
  3347                           ; BSR set to: 0
  3348  00E708  0012               	return		;funcret
  3349  00E70A                     __end_of_guardar_comando:
  3350                           	opt stack 0
  3351                           tosu	equ	0xFFF
  3352                           tosh	equ	0xFFE
  3353                           tosl	equ	0xFFD
  3354                           pclath	equ	0xFFA
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           postdec1	equ	0xFE5
  3362                           fsr1l	equ	0xFE1
  3363                           indf2	equ	0xFDF
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _imprimir_tecla *****************
  3369 ;; Defined at:
  3370 ;;		line 30 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  tecla           1    wreg     unsigned char 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  tecla           1   55[COMRAM] unsigned char 
  3375 ;;  aux            20   35[COMRAM] unsigned char [20]
  3376 ;; Return value:  Size  Location     Type
  3377 ;;		None               void
  3378 ;; Registers used:
  3379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3386 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3388 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;Total ram usage:       21 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    5
  3392 ;; This function calls:
  3393 ;;		_lcd_putrs
  3394 ;;		_sprintf
  3395 ;; This function is called by:
  3396 ;;		_mostrar_guardar_password
  3397 ;;		_mostrar_guardar_temporal_password
  3398 ;;		_mostrar_guardar_nuevo_password
  3399 ;;		_confirmar_actualizar_password
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text17
  3404  00E25C                     __ptext17:
  3405                           	opt stack 0
  3406  00E25C                     _imprimir_tecla:
  3407                           	opt stack 23
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;incstack = 0
  3411                           ;imprimir_tecla@tecla stored from wreg
  3412  00E25C  6E38               	movwf	imprimir_tecla@tecla,c
  3413                           
  3414                           ;teclado.c: 32: unsigned char aux[20];
  3415                           ;teclado.c: 33: sprintf(aux,"%01u",tecla);
  3416  00E25E  0E24               	movlw	low imprimir_tecla@aux
  3417  00E260  6E0D               	movwf	sprintf@sp,c
  3418  00E262  0E00               	movlw	high imprimir_tecla@aux
  3419  00E264  6E0E               	movwf	sprintf@sp+1,c
  3420  00E266  0EDE               	movlw	low STR_7
  3421  00E268  6E0F               	movwf	sprintf@f,c
  3422  00E26A  0EFF               	movlw	high STR_7
  3423  00E26C  6E10               	movwf	sprintf@f+1,c
  3424  00E26E  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  3425  00E272  6A12               	clrf	?_sprintf+5,c
  3426  00E274  ECE1  F07D         	call	_sprintf	;wreg free
  3427                           
  3428                           ;teclado.c: 34: if (ocultar_teclas == 1){
  3429  00E278  0100               	movlb	0	; () banked
  3430  00E27A  05A8               	decf	_ocultar_teclas& (0+255),w,b
  3431  00E27C  0100               	movlb	0	; () banked
  3432  00E27E  11A9               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  3433  00E280  A4D8               	btfss	status,2,c
  3434  00E282  D007               	goto	l3388
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;teclado.c: 35: lcd_putrs("*");
  3438  00E284  0EEC               	movlw	low STR_24
  3439  00E286  6E09               	movwf	lcd_putrs@ptr,c
  3440  00E288  0EFF               	movlw	high STR_24
  3441  00E28A  6E0A               	movwf	lcd_putrs@ptr+1,c
  3442  00E28C  EC2A  F072         	call	_lcd_putrs	;wreg free
  3443                           
  3444                           ;teclado.c: 36: }else{
  3445  00E290  0012               	return	
  3446  00E292                     l3388:
  3447                           
  3448                           ;teclado.c: 37: lcd_putrs(aux);
  3449  00E292  0E24               	movlw	low imprimir_tecla@aux
  3450  00E294  6E09               	movwf	lcd_putrs@ptr,c
  3451  00E296  0E00               	movlw	high imprimir_tecla@aux
  3452  00E298  6E0A               	movwf	lcd_putrs@ptr+1,c
  3453  00E29A  EC2A  F072         	call	_lcd_putrs	;wreg free
  3454  00E29E  0012               	return	
  3455  00E2A0  0012               	return		;funcret
  3456  00E2A2                     __end_of_imprimir_tecla:
  3457                           	opt stack 0
  3458                           tosu	equ	0xFFF
  3459                           tosh	equ	0xFFE
  3460                           tosl	equ	0xFFD
  3461                           pclath	equ	0xFFA
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1l	equ	0xFE1
  3470                           indf2	equ	0xFDF
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _obtener_dia_mes *****************
  3476 ;; Defined at:
  3477 ;;		line 76 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;		None
  3482 ;; Return value:  Size  Location     Type
  3483 ;;		None               void
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3495 ;;Total ram usage:        2 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    1
  3498 ;; This function calls:
  3499 ;;		___awmod
  3500 ;; This function is called by:
  3501 ;;		_cambiar_dia
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text18
  3506  00F1E6                     __ptext18:
  3507                           	opt stack 0
  3508  00F1E6                     _obtener_dia_mes:
  3509                           	opt stack 26
  3510                           
  3511                           ;fecha.c: 78: if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 
      +                          || mes == 12)
  3512                           
  3513                           ;incstack = 0
  3514  00F1E6  045C               	decf	_mes,w,c
  3515  00F1E8  105D               	iorwf	_mes+1,w,c
  3516  00F1EA  B4D8               	btfsc	status,2,c
  3517  00F1EC  D01E               	goto	l3476
  3518  00F1EE  0E03               	movlw	3
  3519  00F1F0  185C               	xorwf	_mes,w,c
  3520  00F1F2  105D               	iorwf	_mes+1,w,c
  3521  00F1F4  B4D8               	btfsc	status,2,c
  3522  00F1F6  D019               	goto	l3476
  3523  00F1F8  0E05               	movlw	5
  3524  00F1FA  185C               	xorwf	_mes,w,c
  3525  00F1FC  105D               	iorwf	_mes+1,w,c
  3526  00F1FE  B4D8               	btfsc	status,2,c
  3527  00F200  D014               	goto	l3476
  3528  00F202  0E07               	movlw	7
  3529  00F204  185C               	xorwf	_mes,w,c
  3530  00F206  105D               	iorwf	_mes+1,w,c
  3531  00F208  B4D8               	btfsc	status,2,c
  3532  00F20A  D00F               	goto	l3476
  3533  00F20C  0E08               	movlw	8
  3534  00F20E  185C               	xorwf	_mes,w,c
  3535  00F210  105D               	iorwf	_mes+1,w,c
  3536  00F212  B4D8               	btfsc	status,2,c
  3537  00F214  D00A               	goto	l3476
  3538  00F216  0E0A               	movlw	10
  3539  00F218  185C               	xorwf	_mes,w,c
  3540  00F21A  105D               	iorwf	_mes+1,w,c
  3541  00F21C  B4D8               	btfsc	status,2,c
  3542  00F21E  D005               	goto	l3476
  3543  00F220  0E0C               	movlw	12
  3544  00F222  185C               	xorwf	_mes,w,c
  3545  00F224  105D               	iorwf	_mes+1,w,c
  3546  00F226  A4D8               	btfss	status,2,c
  3547  00F228  D006               	goto	l3478
  3548  00F22A                     l3476:
  3549                           
  3550                           ;fecha.c: 79: valor_max = 31;
  3551  00F22A  0E00               	movlw	0
  3552  00F22C  0100               	movlb	0	; () banked
  3553  00F22E  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  3554  00F230  0E1F               	movlw	31
  3555  00F232  6FB4               	movwf	fecha@valor_max& (0+255),b
  3556  00F234  0012               	return	
  3557  00F236                     l3478:
  3558                           
  3559                           ;fecha.c: 80: else if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
  3560  00F236  0E04               	movlw	4
  3561  00F238  185C               	xorwf	_mes,w,c
  3562  00F23A  105D               	iorwf	_mes+1,w,c
  3563  00F23C  B4D8               	btfsc	status,2,c
  3564  00F23E  D00F               	goto	l3486
  3565  00F240  0E06               	movlw	6
  3566  00F242  185C               	xorwf	_mes,w,c
  3567  00F244  105D               	iorwf	_mes+1,w,c
  3568  00F246  B4D8               	btfsc	status,2,c
  3569  00F248  D00A               	goto	l3486
  3570  00F24A  0E09               	movlw	9
  3571  00F24C  185C               	xorwf	_mes,w,c
  3572  00F24E  105D               	iorwf	_mes+1,w,c
  3573  00F250  B4D8               	btfsc	status,2,c
  3574  00F252  D005               	goto	l3486
  3575  00F254  0E0B               	movlw	11
  3576  00F256  185C               	xorwf	_mes,w,c
  3577  00F258  105D               	iorwf	_mes+1,w,c
  3578  00F25A  A4D8               	btfss	status,2,c
  3579  00F25C  D006               	goto	l3488
  3580  00F25E                     l3486:
  3581                           
  3582                           ;fecha.c: 81: valor_max = 30;
  3583  00F25E  0E00               	movlw	0
  3584  00F260  0100               	movlb	0	; () banked
  3585  00F262  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  3586  00F264  0E1E               	movlw	30
  3587  00F266  6FB4               	movwf	fecha@valor_max& (0+255),b
  3588  00F268  0012               	return	
  3589  00F26A                     l3488:
  3590                           
  3591                           ;fecha.c: 82: else{
  3592                           ;fecha.c: 83: if ((anio%4==0) && (anio%100!=0) || anio%400==0)
  3593  00F26A  0E03               	movlw	3
  3594  00F26C  145A               	andwf	_anio,w,c
  3595  00F26E  6E07               	movwf	??_obtener_dia_mes& (0+255),c
  3596  00F270  0E00               	movlw	0
  3597  00F272  145B               	andwf	_anio+1,w,c
  3598  00F274  6E08               	movwf	(??_obtener_dia_mes+1)& (0+255),c
  3599  00F276  5007               	movf	??_obtener_dia_mes,w,c
  3600  00F278  1008               	iorwf	??_obtener_dia_mes+1,w,c
  3601  00F27A  A4D8               	btfss	status,2,c
  3602  00F27C  D00E               	goto	l3492
  3603  00F27E  C05A  F001         	movff	_anio,___awmod@dividend
  3604  00F282  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  3605  00F286  0E00               	movlw	0
  3606  00F288  6E04               	movwf	___awmod@divisor+1,c
  3607  00F28A  0E64               	movlw	100
  3608  00F28C  6E03               	movwf	___awmod@divisor,c
  3609  00F28E  EC25  F075         	call	___awmod	;wreg free
  3610  00F292  5001               	movf	?___awmod,w,c
  3611  00F294  1002               	iorwf	?___awmod+1,w,c
  3612  00F296  A4D8               	btfss	status,2,c
  3613  00F298  D00E               	goto	l3494
  3614  00F29A                     l3492:
  3615  00F29A  C05A  F001         	movff	_anio,___awmod@dividend
  3616  00F29E  C05B  F002         	movff	_anio+1,___awmod@dividend+1
  3617  00F2A2  0E01               	movlw	1
  3618  00F2A4  6E04               	movwf	___awmod@divisor+1,c
  3619  00F2A6  0E90               	movlw	144
  3620  00F2A8  6E03               	movwf	___awmod@divisor,c
  3621  00F2AA  EC25  F075         	call	___awmod	;wreg free
  3622  00F2AE  5001               	movf	?___awmod,w,c
  3623  00F2B0  1002               	iorwf	?___awmod+1,w,c
  3624  00F2B2  A4D8               	btfss	status,2,c
  3625  00F2B4  D006               	goto	l3496
  3626  00F2B6                     l3494:
  3627                           
  3628                           ;fecha.c: 84: valor_max =29;
  3629  00F2B6  0E00               	movlw	0
  3630  00F2B8  0100               	movlb	0	; () banked
  3631  00F2BA  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  3632  00F2BC  0E1D               	movlw	29
  3633  00F2BE  6FB4               	movwf	fecha@valor_max& (0+255),b
  3634  00F2C0  0012               	return	
  3635  00F2C2                     l3496:
  3636                           
  3637                           ;fecha.c: 85: else
  3638                           ;fecha.c: 86: valor_max =28;
  3639  00F2C2  0E00               	movlw	0
  3640  00F2C4  0100               	movlb	0	; () banked
  3641  00F2C6  6FB5               	movwf	(fecha@valor_max+1)& (0+255),b
  3642  00F2C8  0E1C               	movlw	28
  3643  00F2CA  6FB4               	movwf	fecha@valor_max& (0+255),b
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ; BSR set to: 0
  3648  00F2CC  0012               	return	
  3649                           
  3650                           ; BSR set to: 0
  3651                           
  3652                           ; BSR set to: 0
  3653  00F2CE  0012               	return		;funcret
  3654  00F2D0                     __end_of_obtener_dia_mes:
  3655                           	opt stack 0
  3656                           tosu	equ	0xFFF
  3657                           tosh	equ	0xFFE
  3658                           tosl	equ	0xFFD
  3659                           pclath	equ	0xFFA
  3660                           tblptru	equ	0xFF8
  3661                           tblptrh	equ	0xFF7
  3662                           tblptrl	equ	0xFF6
  3663                           tablat	equ	0xFF5
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function ___awmod *****************
  3674 ;; Defined at:
  3675 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  dividend        2    0[COMRAM] int 
  3678 ;;  divisor         2    2[COMRAM] int 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  sign            1    5[COMRAM] unsigned char 
  3681 ;;  counter         1    4[COMRAM] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  2    0[COMRAM] int 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, status,0
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3694 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3695 ;;Total ram usage:        6 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_obtener_dia_mes
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text19
  3705  00EA4A                     __ptext19:
  3706                           	opt stack 0
  3707  00EA4A                     ___awmod:
  3708                           	opt stack 26
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;incstack = 0
  3712  00EA4A  0E00               	movlw	0
  3713  00EA4C  6E06               	movwf	___awmod@sign,c
  3714  00EA4E  AE02               	btfss	___awmod@dividend+1,7,c
  3715  00EA50  D007               	goto	l3354
  3716  00EA52  6C01               	negf	___awmod@dividend,c
  3717  00EA54  1E02               	comf	___awmod@dividend+1,f,c
  3718  00EA56  B0D8               	btfsc	status,0,c
  3719  00EA58  2A02               	incf	___awmod@dividend+1,f,c
  3720  00EA5A  0E01               	movlw	1
  3721  00EA5C  6E06               	movwf	___awmod@sign,c
  3722  00EA5E  D000               	goto	l3354
  3723  00EA60                     l3354:
  3724  00EA60  AE04               	btfss	___awmod@divisor+1,7,c
  3725  00EA62  D005               	goto	l3358
  3726  00EA64  6C03               	negf	___awmod@divisor,c
  3727  00EA66  1E04               	comf	___awmod@divisor+1,f,c
  3728  00EA68  B0D8               	btfsc	status,0,c
  3729  00EA6A  2A04               	incf	___awmod@divisor+1,f,c
  3730  00EA6C  D000               	goto	l3358
  3731  00EA6E                     l3358:
  3732  00EA6E  5003               	movf	___awmod@divisor,w,c
  3733  00EA70  1004               	iorwf	___awmod@divisor+1,w,c
  3734  00EA72  B4D8               	btfsc	status,2,c
  3735  00EA74  D01D               	goto	l3374
  3736  00EA76  0E01               	movlw	1
  3737  00EA78  6E05               	movwf	___awmod@counter,c
  3738  00EA7A  D005               	goto	l3364
  3739  00EA7C                     l3362:
  3740  00EA7C  90D8               	bcf	status,0,c
  3741  00EA7E  3603               	rlcf	___awmod@divisor,f,c
  3742  00EA80  3604               	rlcf	___awmod@divisor+1,f,c
  3743  00EA82  2A05               	incf	___awmod@counter,f,c
  3744  00EA84  D000               	goto	l3364
  3745  00EA86                     l3364:
  3746  00EA86  BE04               	btfsc	___awmod@divisor+1,7,c
  3747  00EA88  D002               	goto	l3366
  3748  00EA8A  D7F8               	goto	l3362
  3749  00EA8C  D000               	goto	l3366
  3750  00EA8E                     l3366:
  3751  00EA8E  5003               	movf	___awmod@divisor,w,c
  3752  00EA90  5C01               	subwf	___awmod@dividend,w,c
  3753  00EA92  5004               	movf	___awmod@divisor+1,w,c
  3754  00EA94  5802               	subwfb	___awmod@dividend+1,w,c
  3755  00EA96  A0D8               	btfss	status,0,c
  3756  00EA98  D005               	goto	l3370
  3757  00EA9A  5003               	movf	___awmod@divisor,w,c
  3758  00EA9C  5E01               	subwf	___awmod@dividend,f,c
  3759  00EA9E  5004               	movf	___awmod@divisor+1,w,c
  3760  00EAA0  5A02               	subwfb	___awmod@dividend+1,f,c
  3761  00EAA2  D000               	goto	l3370
  3762  00EAA4                     l3370:
  3763  00EAA4  90D8               	bcf	status,0,c
  3764  00EAA6  3204               	rrcf	___awmod@divisor+1,f,c
  3765  00EAA8  3203               	rrcf	___awmod@divisor,f,c
  3766  00EAAA  2E05               	decfsz	___awmod@counter,f,c
  3767  00EAAC  D7F0               	goto	l3366
  3768  00EAAE  D000               	goto	l3374
  3769  00EAB0                     l3374:
  3770  00EAB0  5006               	movf	___awmod@sign,w,c
  3771  00EAB2  B4D8               	btfsc	status,2,c
  3772  00EAB4  D005               	goto	l3378
  3773  00EAB6  6C01               	negf	___awmod@dividend,c
  3774  00EAB8  1E02               	comf	___awmod@dividend+1,f,c
  3775  00EABA  B0D8               	btfsc	status,0,c
  3776  00EABC  2A02               	incf	___awmod@dividend+1,f,c
  3777  00EABE  D000               	goto	l3378
  3778  00EAC0                     l3378:
  3779  00EAC0  C001  F001         	movff	___awmod@dividend,?___awmod
  3780  00EAC4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3781  00EAC8  0012               	return	
  3782  00EACA  0012               	return		;funcret
  3783  00EACC                     __end_of___awmod:
  3784                           	opt stack 0
  3785                           tosu	equ	0xFFF
  3786                           tosh	equ	0xFFE
  3787                           tosl	equ	0xFFD
  3788                           pclath	equ	0xFFA
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _guardar_elemento *****************
  3803 ;; Defined at:
  3804 ;;		line 12 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  tecla           1    wreg     unsigned char 
  3807 ;;  array           2   35[COMRAM] PTR unsigned char 
  3808 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  3809 ;;		 -> fecha@day(3), 
  3810 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  3811 ;;		 -> tamanio_hora(2), tamanio_minutos(2), tamanio_dia(2), tamanio_mes(2), 
  3812 ;;		 -> tamanio_anio(2), 
  3813 ;;  validacion      2   39[COMRAM] int 
  3814 ;;  dato_fecha      2   41[COMRAM] PTR int 
  3815 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  3816 ;;		 -> dia(2), 
  3817 ;;  doit            2   43[COMRAM] PTR FTN(PTR int ,const i
  3818 ;;		 -> actualizar_minutos(0), actualizar_hora(0), actualiza_dia(0), actualiza_elemento(0), 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  tecla           1   47[COMRAM] unsigned char 
  3821 ;;  i               2   48[COMRAM] int 
  3822 ;;  valor           2   50[COMRAM] int 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;		None               void
  3825 ;; Registers used:
  3826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3832 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3833 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3835 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;Total ram usage:       17 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    5
  3839 ;; This function calls:
  3840 ;;		_actualiza_dia
  3841 ;;		_actualiza_elemento
  3842 ;;		_actualizar_hora
  3843 ;;		_actualizar_minutos
  3844 ;;		_convertir_a_int
  3845 ;;		_lcd_gotoxy
  3846 ;;		_lcd_putrs
  3847 ;;		_sprintf
  3848 ;; This function is called by:
  3849 ;;		_cambiar_dia
  3850 ;;		_cambiar_mes
  3851 ;;		_cambiar_anio
  3852 ;;		_cambiar_hora
  3853 ;;		_cambiar_minutos
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text20
  3858  00FA02                     __ptext20:
  3859                           	opt stack 0
  3860  00FA02                     _guardar_elemento:
  3861                           	opt stack 22
  3862                           
  3863                           ;incstack = 0
  3864                           ;guardar_elemento@tecla stored from wreg
  3865  00FA02  6E30               	movwf	guardar_elemento@tecla,c
  3866                           
  3867                           ;fecha.c: 14: int valor = 0;
  3868  00FA04  0E00               	movlw	0
  3869  00FA06  6E34               	movwf	guardar_elemento@valor+1,c
  3870  00FA08  0E00               	movlw	0
  3871  00FA0A  6E33               	movwf	guardar_elemento@valor,c
  3872                           
  3873                           ;fecha.c: 16: if (validacion){
  3874  00FA0C  5028               	movf	guardar_elemento@validacion,w,c
  3875  00FA0E  1029               	iorwf	guardar_elemento@validacion+1,w,c
  3876  00FA10  B4D8               	btfsc	status,2,c
  3877  00FA12  D044               	goto	l3432
  3878                           
  3879                           ;fecha.c: 18: sprintf(buffer2,"%01u",tecla);
  3880  00FA14  0EB8               	movlw	low _buffer2
  3881  00FA16  6E0D               	movwf	sprintf@sp,c
  3882  00FA18  0E00               	movlw	high _buffer2
  3883  00FA1A  6E0E               	movwf	sprintf@sp+1,c
  3884  00FA1C  0EDE               	movlw	low STR_7
  3885  00FA1E  6E0F               	movwf	sprintf@f,c
  3886  00FA20  0EFF               	movlw	high STR_7
  3887  00FA22  6E10               	movwf	sprintf@f+1,c
  3888  00FA24  C030  F011         	movff	guardar_elemento@tecla,?_sprintf+4
  3889  00FA28  6A12               	clrf	?_sprintf+5,c
  3890  00FA2A  ECE1  F07D         	call	_sprintf	;wreg free
  3891                           
  3892                           ;fecha.c: 19: array[*tamanio_array] = *buffer2;
  3893  00FA2E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3894  00FA32  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3895  00FA36  CFDE F02E          	movff	postinc2,??_guardar_elemento
  3896  00FA3A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  3897  00FA3E  502E               	movf	??_guardar_elemento,w,c
  3898  00FA40  2424               	addwf	guardar_elemento@array,w,c
  3899  00FA42  6ED9               	movwf	fsr2l,c
  3900  00FA44  502F               	movf	??_guardar_elemento+1,w,c
  3901  00FA46  2025               	addwfc	guardar_elemento@array+1,w,c
  3902  00FA48  6EDA               	movwf	fsr2h,c
  3903  00FA4A  C0B8  FFDF         	movff	_buffer2,indf2
  3904                           
  3905                           ;fecha.c: 20: array [(*tamanio_array)+1] = 0;
  3906  00FA4E  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3907  00FA52  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3908  00FA56  CFDE F02E          	movff	postinc2,??_guardar_elemento
  3909  00FA5A  CFDD F02F          	movff	postdec2,??_guardar_elemento+1
  3910  00FA5E  0E01               	movlw	1
  3911  00FA60  262E               	addwf	??_guardar_elemento,f,c
  3912  00FA62  0E00               	movlw	0
  3913  00FA64  222F               	addwfc	??_guardar_elemento+1,f,c
  3914  00FA66  502E               	movf	??_guardar_elemento,w,c
  3915  00FA68  2424               	addwf	guardar_elemento@array,w,c
  3916  00FA6A  6ED9               	movwf	fsr2l,c
  3917  00FA6C  502F               	movf	??_guardar_elemento+1,w,c
  3918  00FA6E  2025               	addwfc	guardar_elemento@array+1,w,c
  3919  00FA70  6EDA               	movwf	fsr2h,c
  3920  00FA72  0E00               	movlw	0
  3921  00FA74  6EDF               	movwf	indf2,c
  3922                           
  3923                           ;fecha.c: 21: (*tamanio_array)++;
  3924  00FA76  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3925  00FA7A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3926  00FA7E  2ADE               	incf	postinc2,f,c
  3927  00FA80  0E00               	movlw	0
  3928  00FA82  22DD               	addwfc	postdec2,f,c
  3929                           
  3930                           ;fecha.c: 23: lcd_gotoxy(1,2);
  3931  00FA84  0E02               	movlw	2
  3932  00FA86  6E05               	movwf	lcd_gotoxy@y,c
  3933  00FA88  0E01               	movlw	1
  3934  00FA8A  EC84  F070         	call	_lcd_gotoxy
  3935                           
  3936                           ;fecha.c: 24: lcd_putrs(array);
  3937  00FA8E  C024  F009         	movff	guardar_elemento@array,lcd_putrs@ptr
  3938  00FA92  C025  F00A         	movff	guardar_elemento@array+1,lcd_putrs@ptr+1
  3939  00FA96  EC2A  F072         	call	_lcd_putrs	;wreg free
  3940  00FA9A  D000               	goto	l3432
  3941  00FA9C                     l3432:
  3942                           
  3943                           ;fecha.c: 25: }
  3944                           ;fecha.c: 27: if (*tamanio_array >= 3 - 1){
  3945  00FA9C  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  3946  00FAA0  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  3947  00FAA4  0E01               	movlw	1
  3948  00FAA6  BEDB               	btfsc	plusw2,7,c
  3949  00FAA8  0012               	return	
  3950  00FAAA  0E01               	movlw	1
  3951  00FAAC  50DB               	movf	plusw2,w,c
  3952  00FAAE  E104               	bnz	u2670
  3953  00FAB0  0E02               	movlw	2
  3954  00FAB2  5CDE               	subwf	postinc2,w,c
  3955  00FAB4  A0D8               	btfss	status,0,c
  3956  00FAB6  0012               	return	
  3957  00FAB8                     u2670:
  3958                           
  3959                           ;fecha.c: 29: convertir_a_int(array,&valor);
  3960  00FAB8  C024  F00E         	movff	guardar_elemento@array,convertir_a_int@array
  3961  00FABC  C025  F00F         	movff	guardar_elemento@array+1,convertir_a_int@array+1
  3962  00FAC0  0E33               	movlw	low guardar_elemento@valor
  3963  00FAC2  6E10               	movwf	convertir_a_int@valor,c
  3964  00FAC4  0E00               	movlw	high guardar_elemento@valor
  3965  00FAC6  6E11               	movwf	convertir_a_int@valor+1,c
  3966  00FAC8  EC33  F070         	call	_convertir_a_int	;wreg free
  3967                           
  3968                           ;fecha.c: 31: if(valor >= valor_min && valor <= valor_max){
  3969  00FACC  0100               	movlb	0	; () banked
  3970  00FACE  51B6               	movf	fecha@valor_min& (0+255),w,b
  3971  00FAD0  5C33               	subwf	guardar_elemento@valor,w,c
  3972  00FAD2  5034               	movf	guardar_elemento@valor+1,w,c
  3973  00FAD4  0A80               	xorlw	128
  3974  00FAD6  6E2E               	movwf	??_guardar_elemento& (0+255),c
  3975  00FAD8  0100               	movlb	0	; () banked
  3976  00FADA  51B7               	movf	(fecha@valor_min+1)& (0+255),w,b
  3977  00FADC  0A80               	xorlw	128
  3978  00FADE  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  3979  00FAE0  A0D8               	btfss	status,0,c
  3980  00FAE2  D029               	goto	l3444
  3981                           
  3982                           ; BSR set to: 0
  3983  00FAE4  5033               	movf	guardar_elemento@valor,w,c
  3984  00FAE6  0100               	movlb	0	; () banked
  3985  00FAE8  5DB4               	subwf	fecha@valor_max& (0+255),w,b
  3986  00FAEA  0100               	movlb	0	; () banked
  3987  00FAEC  51B5               	movf	(fecha@valor_max+1)& (0+255),w,b
  3988  00FAEE  0A80               	xorlw	128
  3989  00FAF0  6E2E               	movwf	??_guardar_elemento& (0+255),c
  3990  00FAF2  5034               	movf	guardar_elemento@valor+1,w,c
  3991  00FAF4  0A80               	xorlw	128
  3992  00FAF6  582E               	subwfb	??_guardar_elemento& (0+255),w,c
  3993  00FAF8  A0D8               	btfss	status,0,c
  3994  00FAFA  D01D               	goto	l3444
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;fecha.c: 32: doit(dato_fecha,valor);
  3998  00FAFC  C02A  F016         	movff	guardar_elemento@dato_fecha,actualizar_minutos@elemento
  3999  00FB00  C02B  F017         	movff	guardar_elemento@dato_fecha+1,actualizar_minutos@elemento+1
  4000  00FB04  C033  F018         	movff	guardar_elemento@valor,actualizar_minutos@valor
  4001  00FB08  C034  F019         	movff	guardar_elemento@valor+1,actualizar_minutos@valor+1
  4002  00FB0C  D801               	call	u2708
  4003  00FB0E  D00A               	goto	l3442
  4004  00FB10                     u2708:
  4005  00FB10  0005               	push	
  4006  00FB12  6EFA               	movwf	pclath,c
  4007  00FB14  502C               	movf	guardar_elemento@doit,w,c
  4008  00FB16  6EFD               	movwf	tosl,c
  4009  00FB18  502D               	movf	guardar_elemento@doit+1,w,c
  4010  00FB1A  6EFE               	movwf	tosh,c
  4011  00FB1C  50F8               	movf	tblptru,w,c
  4012  00FB1E  6EFF               	movwf	tosu,c
  4013  00FB20  50FA               	movf	pclath,w,c
  4014  00FB22  0012               	return		;indir
  4015  00FB24                     l3442:
  4016                           
  4017                           ;fecha.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  4018  00FB24  0EFF               	movlw	255
  4019  00FB26  6E2E               	movwf	??_guardar_elemento& (0+255),c
  4020  00FB28  0E8A               	movlw	138
  4021  00FB2A                     u3567:
  4022  00FB2A  2EE8               	decfsz	wreg,f,c
  4023  00FB2C  D7FE               	goto	u3567
  4024  00FB2E  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  4025  00FB30  D7FC               	goto	u3567
  4026  00FB32  D000               	nop2	
  4027                           
  4028                           ;fecha.c: 35: }else{
  4029  00FB34  0012               	return	
  4030  00FB36                     l3444:
  4031                           
  4032                           ;fecha.c: 36: *tamanio_array = 0;
  4033  00FB36  C026  FFD9         	movff	guardar_elemento@tamanio_array,fsr2l
  4034  00FB3A  C027  FFDA         	movff	guardar_elemento@tamanio_array+1,fsr2h
  4035  00FB3E  0E00               	movlw	0
  4036  00FB40  6EDE               	movwf	postinc2,c
  4037  00FB42  0E00               	movlw	0
  4038  00FB44  6EDD               	movwf	postdec2,c
  4039                           
  4040                           ;fecha.c: 37: *array = 0;
  4041  00FB46  C024  FFD9         	movff	guardar_elemento@array,fsr2l
  4042  00FB4A  C025  FFDA         	movff	guardar_elemento@array+1,fsr2h
  4043  00FB4E  0E00               	movlw	0
  4044  00FB50  6EDF               	movwf	indf2,c
  4045                           
  4046                           ;fecha.c: 38: lcd_gotoxy(1,2);
  4047  00FB52  0E02               	movlw	2
  4048  00FB54  6E05               	movwf	lcd_gotoxy@y,c
  4049  00FB56  0E01               	movlw	1
  4050  00FB58  EC84  F070         	call	_lcd_gotoxy
  4051                           
  4052                           ;fecha.c: 39: sprintf(buffer2,"valor >=%d y <=%d",valor_min,valor_max);
  4053  00FB5C  0EB8               	movlw	low _buffer2
  4054  00FB5E  6E0D               	movwf	sprintf@sp,c
  4055  00FB60  0E00               	movlw	high _buffer2
  4056  00FB62  6E0E               	movwf	sprintf@sp+1,c
  4057  00FB64  0E65               	movlw	low STR_32
  4058  00FB66  6E0F               	movwf	sprintf@f,c
  4059  00FB68  0EFF               	movlw	high STR_32
  4060  00FB6A  6E10               	movwf	sprintf@f+1,c
  4061  00FB6C  C0B6  F011         	movff	fecha@valor_min,?_sprintf+4
  4062  00FB70  C0B7  F012         	movff	fecha@valor_min+1,?_sprintf+5
  4063  00FB74  C0B4  F013         	movff	fecha@valor_max,?_sprintf+6
  4064  00FB78  C0B5  F014         	movff	fecha@valor_max+1,?_sprintf+7
  4065  00FB7C  ECE1  F07D         	call	_sprintf	;wreg free
  4066                           
  4067                           ;fecha.c: 40: lcd_putrs(buffer2);
  4068  00FB80  0EB8               	movlw	low _buffer2
  4069  00FB82  6E09               	movwf	lcd_putrs@ptr,c
  4070  00FB84  0E00               	movlw	high _buffer2
  4071  00FB86  6E0A               	movwf	lcd_putrs@ptr+1,c
  4072  00FB88  EC2A  F072         	call	_lcd_putrs	;wreg free
  4073                           
  4074                           ;fecha.c: 42: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  4075  00FB8C  0E00               	movlw	0
  4076  00FB8E  6E32               	movwf	guardar_elemento@i+1,c
  4077  00FB90  0E00               	movlw	0
  4078  00FB92  6E31               	movwf	guardar_elemento@i,c
  4079  00FB94                     l3454:
  4080  00FB94  BE32               	btfsc	guardar_elemento@i+1,7,c
  4081  00FB96  D008               	goto	l3458
  4082  00FB98  5032               	movf	guardar_elemento@i+1,w,c
  4083  00FB9A  E112               	bnz	l524
  4084  00FB9C  0E04               	movlw	4
  4085  00FB9E  5C31               	subwf	guardar_elemento@i,w,c
  4086  00FBA0  B0D8               	btfsc	status,0,c
  4087  00FBA2  0012               	return	
  4088  00FBA4  D001               	goto	l3458
  4089  00FBA6  0012               	return	
  4090  00FBA8                     l3458:
  4091  00FBA8  0EFF               	movlw	255
  4092  00FBAA  6E2E               	movwf	??_guardar_elemento& (0+255),c
  4093  00FBAC  0E8A               	movlw	138
  4094  00FBAE                     u3577:
  4095  00FBAE  2EE8               	decfsz	wreg,f,c
  4096  00FBB0  D7FE               	goto	u3577
  4097  00FBB2  2E2E               	decfsz	??_guardar_elemento& (0+255),f,c
  4098  00FBB4  D7FC               	goto	u3577
  4099  00FBB6  D000               	nop2	
  4100  00FBB8  4A31               	infsnz	guardar_elemento@i,f,c
  4101  00FBBA  2A32               	incf	guardar_elemento@i+1,f,c
  4102  00FBBC  D7EB               	goto	l3454
  4103  00FBBE  0012               	return	
  4104  00FBC0                     l524:
  4105  00FBC0  0012               	return		;funcret
  4106  00FBC2                     __end_of_guardar_elemento:
  4107                           	opt stack 0
  4108                           tosu	equ	0xFFF
  4109                           tosh	equ	0xFFE
  4110                           tosl	equ	0xFFD
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec1	equ	0xFE5
  4119                           fsr1l	equ	0xFE1
  4120                           indf2	equ	0xFDF
  4121                           postinc2	equ	0xFDE
  4122                           postdec2	equ	0xFDD
  4123                           plusw2	equ	0xFDB
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _convertir_a_int *****************
  4129 ;; Defined at:
  4130 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  array           2   13[COMRAM] PTR unsigned char 
  4133 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  4134 ;;		 -> fecha@day(3), 
  4135 ;;  valor           2   15[COMRAM] PTR int 
  4136 ;;		 -> guardar_elemento@valor(2), 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4151 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4152 ;;Total ram usage:        4 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		_atoi
  4157 ;; This function is called by:
  4158 ;;		_guardar_elemento
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text21
  4163  00E066                     __ptext21:
  4164                           	opt stack 0
  4165  00E066                     _convertir_a_int:
  4166                           	opt stack 24
  4167                           
  4168                           ;fecha.c: 9: *valor = atoi(array);
  4169                           
  4170                           ;incstack = 0
  4171  00E066  C00E  F007         	movff	convertir_a_int@array,atoi@s
  4172  00E06A  C00F  F008         	movff	convertir_a_int@array+1,atoi@s+1
  4173  00E06E  EC3D  F077         	call	_atoi	;wreg free
  4174  00E072  C010  FFD9         	movff	convertir_a_int@valor,fsr2l
  4175  00E076  C011  FFDA         	movff	convertir_a_int@valor+1,fsr2h
  4176  00E07A  C007  FFDE         	movff	?_atoi,postinc2
  4177  00E07E  C008  FFDD         	movff	?_atoi+1,postdec2
  4178  00E082  0012               	return		;funcret
  4179  00E084                     __end_of_convertir_a_int:
  4180                           	opt stack 0
  4181                           tosu	equ	0xFFF
  4182                           tosh	equ	0xFFE
  4183                           tosl	equ	0xFFD
  4184                           pclath	equ	0xFFA
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           plusw2	equ	0xFDB
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _atoi *****************
  4202 ;; Defined at:
  4203 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  s               2    6[COMRAM] PTR const unsigned char 
  4206 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  4207 ;;		 -> fecha@day(3), comando(3), 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  a               2   11[COMRAM] int 
  4210 ;;  sign            1   10[COMRAM] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  2    6[COMRAM] int 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4224 ;;Total ram usage:        7 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    1
  4227 ;; This function calls:
  4228 ;;		___wmul
  4229 ;;		_isdigit
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;;		_convertir_a_int
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text22
  4237  00EE7A                     __ptext22:
  4238                           	opt stack 0
  4239  00EE7A                     _atoi:
  4240                           	opt stack 24
  4241                           
  4242                           ;incstack = 0
  4243  00EE7A  D003               	goto	l3114
  4244  00EE7C                     l3112:
  4245  00EE7C  4A07               	infsnz	atoi@s,f,c
  4246  00EE7E  2A08               	incf	atoi@s+1,f,c
  4247  00EE80  D000               	goto	l3114
  4248  00EE82                     l3114:
  4249  00EE82  C007  FFD9         	movff	atoi@s,fsr2l
  4250  00EE86  C008  FFDA         	movff	atoi@s+1,fsr2h
  4251  00EE8A  0E20               	movlw	32
  4252  00EE8C  18DE               	xorwf	postinc2,w,c
  4253  00EE8E  B4D8               	btfsc	status,2,c
  4254  00EE90  D7F5               	goto	l3112
  4255  00EE92  C007  FFD9         	movff	atoi@s,fsr2l
  4256  00EE96  C008  FFDA         	movff	atoi@s+1,fsr2h
  4257  00EE9A  0E09               	movlw	9
  4258  00EE9C  18DE               	xorwf	postinc2,w,c
  4259  00EE9E  B4D8               	btfsc	status,2,c
  4260  00EEA0  D7ED               	goto	l3112
  4261  00EEA2  0E00               	movlw	0
  4262  00EEA4  6E0D               	movwf	atoi@a+1,c
  4263  00EEA6  0E00               	movlw	0
  4264  00EEA8  6E0C               	movwf	atoi@a,c
  4265  00EEAA  0E00               	movlw	0
  4266  00EEAC  6E0B               	movwf	atoi@sign,c
  4267  00EEAE  C007  FFD9         	movff	atoi@s,fsr2l
  4268  00EEB2  C008  FFDA         	movff	atoi@s+1,fsr2h
  4269  00EEB6  0E2D               	movlw	45
  4270  00EEB8  18DE               	xorwf	postinc2,w,c
  4271  00EEBA  A4D8               	btfss	status,2,c
  4272  00EEBC  D002               	goto	l3124
  4273  00EEBE  2A0B               	incf	atoi@sign,f,c
  4274  00EEC0  D025               	goto	l3130
  4275  00EEC2                     l3124:
  4276  00EEC2  C007  FFD9         	movff	atoi@s,fsr2l
  4277  00EEC6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4278  00EECA  0E2B               	movlw	43
  4279  00EECC  18DE               	xorwf	postinc2,w,c
  4280  00EECE  A4D8               	btfss	status,2,c
  4281  00EED0  D020               	goto	l3132
  4282  00EED2  D01C               	goto	l3130
  4283  00EED4  D01E               	goto	l3132
  4284  00EED6                     l3128:
  4285  00EED6  C00C  F001         	movff	atoi@a,___wmul@multiplier
  4286  00EEDA  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  4287  00EEDE  0E00               	movlw	0
  4288  00EEE0  6E04               	movwf	___wmul@multiplicand+1,c
  4289  00EEE2  0E0A               	movlw	10
  4290  00EEE4  6E03               	movwf	___wmul@multiplicand,c
  4291  00EEE6  ECA8  F070         	call	___wmul	;wreg free
  4292  00EEEA  C007  FFD9         	movff	atoi@s,fsr2l
  4293  00EEEE  C008  FFDA         	movff	atoi@s+1,fsr2h
  4294  00EEF2  50DF               	movf	indf2,w,c
  4295  00EEF4  6E09               	movwf	??_atoi& (0+255),c
  4296  00EEF6  6A0A               	clrf	(??_atoi+1)& (0+255),c
  4297  00EEF8  5001               	movf	?___wmul,w,c
  4298  00EEFA  2609               	addwf	??_atoi,f,c
  4299  00EEFC  5002               	movf	?___wmul+1,w,c
  4300  00EEFE  220A               	addwfc	??_atoi+1,f,c
  4301  00EF00  0ED0               	movlw	208
  4302  00EF02  2409               	addwf	??_atoi,w,c
  4303  00EF04  6E0C               	movwf	atoi@a,c
  4304  00EF06  0EFF               	movlw	255
  4305  00EF08  200A               	addwfc	??_atoi+1,w,c
  4306  00EF0A  6E0D               	movwf	atoi@a+1,c
  4307  00EF0C                     l3130:
  4308  00EF0C  4A07               	infsnz	atoi@s,f,c
  4309  00EF0E  2A08               	incf	atoi@s+1,f,c
  4310  00EF10  D000               	goto	l3132
  4311  00EF12                     l3132:
  4312  00EF12  C007  FFD9         	movff	atoi@s,fsr2l
  4313  00EF16  C008  FFDA         	movff	atoi@s+1,fsr2h
  4314  00EF1A  50DF               	movf	indf2,w,c
  4315  00EF1C  EC73  F070         	call	_isdigit
  4316  00EF20  B0D8               	btfsc	status,0,c
  4317  00EF22  D7D9               	goto	l3128
  4318  00EF24  500B               	movf	atoi@sign,w,c
  4319  00EF26  B4D8               	btfsc	status,2,c
  4320  00EF28  D00D               	goto	l1070
  4321  00EF2A  C00C  F009         	movff	atoi@a,??_atoi
  4322  00EF2E  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  4323  00EF32  1E09               	comf	??_atoi,f,c
  4324  00EF34  1E0A               	comf	??_atoi+1,f,c
  4325  00EF36  4A09               	infsnz	??_atoi,f,c
  4326  00EF38  2A0A               	incf	??_atoi+1,f,c
  4327  00EF3A  C009  F007         	movff	??_atoi,?_atoi
  4328  00EF3E  C00A  F008         	movff	??_atoi+1,?_atoi+1
  4329  00EF42  0012               	return	
  4330  00EF44                     l1070:
  4331  00EF44  C00C  F007         	movff	atoi@a,?_atoi
  4332  00EF48  C00D  F008         	movff	atoi@a+1,?_atoi+1
  4333  00EF4C  0012               	return		;funcret
  4334  00EF4E                     __end_of_atoi:
  4335                           	opt stack 0
  4336                           tosu	equ	0xFFF
  4337                           tosh	equ	0xFFE
  4338                           tosl	equ	0xFFD
  4339                           pclath	equ	0xFFA
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           indf2	equ	0xFDF
  4349                           postinc2	equ	0xFDE
  4350                           postdec2	equ	0xFDD
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _actualizar_hora *****************
  4357 ;; Defined at:
  4358 ;;		line 135 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  elemento        2   21[COMRAM] PTR int 
  4361 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  4362 ;;		 -> dia(2), 
  4363 ;;  valor           2   23[COMRAM] const int 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4378 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4379 ;;Total ram usage:        4 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    4
  4382 ;; This function calls:
  4383 ;;		_actualiza_elemento
  4384 ;;		_inicializar_hora
  4385 ;;		_restaurar_comando
  4386 ;; This function is called by:
  4387 ;;		_cambiar_hora
  4388 ;;		_guardar_elemento
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text23
  4393  00E048                     __ptext23:
  4394                           	opt stack 0
  4395  00E048                     _actualizar_hora:
  4396                           	opt stack 22
  4397                           
  4398                           ;fecha.c: 137: actualiza_elemento(elemento,valor);
  4399                           
  4400                           ;incstack = 0
  4401  00E048  C016  F016         	movff	actualizar_hora@elemento,actualiza_elemento@elemento
  4402  00E04C  C017  F017         	movff	actualizar_hora@elemento+1,actualiza_elemento@elemento+1
  4403  00E050  C018  F018         	movff	actualizar_hora@valor,actualiza_elemento@valor
  4404  00E054  C019  F019         	movff	actualizar_hora@valor+1,actualiza_elemento@valor+1
  4405  00E058  ECEF  F06F         	call	_actualiza_elemento	;wreg free
  4406                           
  4407                           ;fecha.c: 138: restaurar_comando();
  4408  00E05C  EC06  F070         	call	_restaurar_comando	;wreg free
  4409                           
  4410                           ;fecha.c: 139: inicializar_hora();
  4411  00E060  EC42  F070         	call	_inicializar_hora	;wreg free
  4412  00E064  0012               	return		;funcret
  4413  00E066                     __end_of_actualizar_hora:
  4414                           	opt stack 0
  4415                           tosu	equ	0xFFF
  4416                           tosh	equ	0xFFE
  4417                           tosl	equ	0xFFD
  4418                           pclath	equ	0xFFA
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           postinc0	equ	0xFEE
  4424                           wreg	equ	0xFE8
  4425                           postdec1	equ	0xFE5
  4426                           fsr1l	equ	0xFE1
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           plusw2	equ	0xFDB
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _actualiza_dia *****************
  4436 ;; Defined at:
  4437 ;;		line 69 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  elemento        2   21[COMRAM] PTR int 
  4440 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  4441 ;;		 -> dia(2), 
  4442 ;;  valor           2   23[COMRAM] const int 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;		None               void
  4447 ;; Registers used:
  4448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4454 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4457 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4458 ;;Total ram usage:        4 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    4
  4461 ;; This function calls:
  4462 ;;		_actualiza_elemento
  4463 ;;		_inicializar_fecha
  4464 ;;		_restaurar_comando
  4465 ;; This function is called by:
  4466 ;;		_cambiar_dia
  4467 ;;		_guardar_elemento
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text24
  4472  00E02A                     __ptext24:
  4473                           	opt stack 0
  4474  00E02A                     _actualiza_dia:
  4475                           	opt stack 22
  4476                           
  4477                           ;fecha.c: 71: actualiza_elemento(elemento,valor);
  4478                           
  4479                           ;incstack = 0
  4480  00E02A  C016  F016         	movff	actualiza_dia@elemento,actualiza_elemento@elemento
  4481  00E02E  C017  F017         	movff	actualiza_dia@elemento+1,actualiza_elemento@elemento+1
  4482  00E032  C018  F018         	movff	actualiza_dia@valor,actualiza_elemento@valor
  4483  00E036  C019  F019         	movff	actualiza_dia@valor+1,actualiza_elemento@valor+1
  4484  00E03A  ECEF  F06F         	call	_actualiza_elemento	;wreg free
  4485                           
  4486                           ;fecha.c: 72: restaurar_comando();
  4487  00E03E  EC06  F070         	call	_restaurar_comando	;wreg free
  4488                           
  4489                           ;fecha.c: 73: inicializar_fecha();
  4490  00E042  ECFE  F070         	call	_inicializar_fecha	;wreg free
  4491  00E046  0012               	return		;funcret
  4492  00E048                     __end_of_actualiza_dia:
  4493                           	opt stack 0
  4494                           tosu	equ	0xFFF
  4495                           tosh	equ	0xFFE
  4496                           tosl	equ	0xFFD
  4497                           pclath	equ	0xFFA
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           fsr1l	equ	0xFE1
  4506                           indf2	equ	0xFDF
  4507                           postinc2	equ	0xFDE
  4508                           postdec2	equ	0xFDD
  4509                           plusw2	equ	0xFDB
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _actualiza_elemento *****************
  4515 ;; Defined at:
  4516 ;;		line 48 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  elemento        2   21[COMRAM] PTR int 
  4519 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  4520 ;;		 -> dia(2), 
  4521 ;;  valor           2   23[COMRAM] const int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;		None
  4524 ;; Return value:  Size  Location     Type
  4525 ;;		None               void
  4526 ;; Registers used:
  4527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4533 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4536 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4537 ;;Total ram usage:        4 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    3
  4540 ;; This function calls:
  4541 ;;		_Write_RTC
  4542 ;; This function is called by:
  4543 ;;		_actualiza_dia
  4544 ;;		_cambiar_mes
  4545 ;;		_cambiar_anio
  4546 ;;		_actualizar_hora
  4547 ;;		_guardar_elemento
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text25
  4552  00DFDE                     __ptext25:
  4553                           	opt stack 0
  4554  00DFDE                     _actualiza_elemento:
  4555                           	opt stack 22
  4556                           
  4557                           ;fecha.c: 50: *elemento = valor;
  4558                           
  4559                           ;incstack = 0
  4560  00DFDE  C016  FFD9         	movff	actualiza_elemento@elemento,fsr2l
  4561  00DFE2  C017  FFDA         	movff	actualiza_elemento@elemento+1,fsr2h
  4562  00DFE6  C018  FFDE         	movff	actualiza_elemento@valor,postinc2
  4563  00DFEA  C019  FFDD         	movff	actualiza_elemento@valor+1,postdec2
  4564                           
  4565                           ;fecha.c: 51: Write_RTC();
  4566  00DFEE  EC3E  F07C         	call	_Write_RTC	;wreg free
  4567  00DFF2  0012               	return		;funcret
  4568  00DFF4                     __end_of_actualiza_elemento:
  4569                           	opt stack 0
  4570                           tosu	equ	0xFFF
  4571                           tosh	equ	0xFFE
  4572                           tosl	equ	0xFFD
  4573                           pclath	equ	0xFFA
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           postinc0	equ	0xFEE
  4579                           wreg	equ	0xFE8
  4580                           postdec1	equ	0xFE5
  4581                           fsr1l	equ	0xFE1
  4582                           indf2	equ	0xFDF
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           plusw2	equ	0xFDB
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function _actualizar_minutos *****************
  4591 ;; Defined at:
  4592 ;;		line 142 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  elemento        2   21[COMRAM] PTR int 
  4595 ;;		 -> minuto(2), hora(2), anio(2), mes(2), 
  4596 ;;		 -> dia(2), 
  4597 ;;  valor           2   23[COMRAM] const int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;		None               void
  4602 ;; Registers used:
  4603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4612 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4613 ;;Total ram usage:        4 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    3
  4616 ;; This function calls:
  4617 ;;		_Write_RTC
  4618 ;; This function is called by:
  4619 ;;		_cambiar_minutos
  4620 ;;		_guardar_elemento
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text26
  4625  00E0A4                     __ptext26:
  4626                           	opt stack 0
  4627  00E0A4                     _actualizar_minutos:
  4628                           	opt stack 23
  4629                           
  4630                           ;fecha.c: 144: *elemento = valor;
  4631                           
  4632                           ;incstack = 0
  4633  00E0A4  C016  FFD9         	movff	actualizar_minutos@elemento,fsr2l
  4634  00E0A8  C017  FFDA         	movff	actualizar_minutos@elemento+1,fsr2h
  4635  00E0AC  C018  FFDE         	movff	actualizar_minutos@valor,postinc2
  4636  00E0B0  C019  FFDD         	movff	actualizar_minutos@valor+1,postdec2
  4637                           
  4638                           ;fecha.c: 145: segundo = 00;
  4639  00E0B4  0E00               	movlw	0
  4640  00E0B6  0100               	movlb	0	; () banked
  4641  00E0B8  6FAD               	movwf	(_segundo+1)& (0+255),b
  4642  00E0BA  0E00               	movlw	0
  4643  00E0BC  6FAC               	movwf	_segundo& (0+255),b
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;fecha.c: 146: Write_RTC();
  4647  00E0BE  EC3E  F07C         	call	_Write_RTC	;wreg free
  4648  00E0C2  0012               	return		;funcret
  4649  00E0C4                     __end_of_actualizar_minutos:
  4650                           	opt stack 0
  4651                           tosu	equ	0xFFF
  4652                           tosh	equ	0xFFE
  4653                           tosl	equ	0xFFD
  4654                           pclath	equ	0xFFA
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           postinc0	equ	0xFEE
  4660                           wreg	equ	0xFE8
  4661                           postdec1	equ	0xFE5
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           postinc2	equ	0xFDE
  4665                           postdec2	equ	0xFDD
  4666                           plusw2	equ	0xFDB
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function _inicializar_hora *****************
  4672 ;; Defined at:
  4673 ;;		line 127 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;		None
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;		None
  4678 ;; Return value:  Size  Location     Type
  4679 ;;		None               void
  4680 ;; Registers used:
  4681 ;;		wreg, status,2
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;Total ram usage:        0 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_actualizar_hora
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text27
  4701  00E084                     __ptext27:
  4702                           	opt stack 0
  4703  00E084                     _inicializar_hora:
  4704                           	opt stack 25
  4705                           
  4706                           ;fecha.c: 128: *hour = 0;
  4707                           
  4708                           ;incstack = 0
  4709  00E084  0E00               	movlw	0
  4710  00E086  0100               	movlb	0	; () banked
  4711  00E088  6FCF               	movwf	fecha@hour& (0+255),b
  4712                           
  4713                           ;fecha.c: 129: *minutes = 0;
  4714  00E08A  0E00               	movlw	0
  4715  00E08C  0100               	movlb	0	; () banked
  4716  00E08E  6FD2               	movwf	fecha@minutes& (0+255),b
  4717                           
  4718                           ;fecha.c: 131: tamanio_hora = 0;
  4719  00E090  0E00               	movlw	0
  4720  00E092  6E57               	movwf	_tamanio_hora+1,c
  4721  00E094  0E00               	movlw	0
  4722  00E096  6E56               	movwf	_tamanio_hora,c
  4723                           
  4724                           ;fecha.c: 132: tamanio_minutos = 0;
  4725  00E098  0E00               	movlw	0
  4726  00E09A  0100               	movlb	0	; () banked
  4727  00E09C  6FDE               	movwf	(_tamanio_minutos+1)& (0+255),b
  4728  00E09E  0E00               	movlw	0
  4729  00E0A0  6FDD               	movwf	_tamanio_minutos& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732  00E0A2  0012               	return		;funcret
  4733  00E0A4                     __end_of_inicializar_hora:
  4734                           	opt stack 0
  4735                           tosu	equ	0xFFF
  4736                           tosh	equ	0xFFE
  4737                           tosl	equ	0xFFD
  4738                           pclath	equ	0xFFA
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           postdec1	equ	0xFE5
  4746                           fsr1l	equ	0xFE1
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           plusw2	equ	0xFDB
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _inicializar_fecha *****************
  4756 ;; Defined at:
  4757 ;;		line 59 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;		None               void
  4764 ;; Registers used:
  4765 ;;		wreg, status,2
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_actualiza_dia
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text28
  4785  00E1FC                     __ptext28:
  4786                           	opt stack 0
  4787  00E1FC                     _inicializar_fecha:
  4788                           	opt stack 25
  4789                           
  4790                           ;fecha.c: 60: *day = 0;
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;incstack = 0
  4794  00E1FC  0E00               	movlw	0
  4795  00E1FE  0100               	movlb	0	; () banked
  4796  00E200  6FCC               	movwf	fecha@day& (0+255),b
  4797                           
  4798                           ;fecha.c: 61: *month = 0;
  4799  00E202  0E00               	movlw	0
  4800  00E204  0100               	movlb	0	; () banked
  4801  00E206  6FD5               	movwf	fecha@month& (0+255),b
  4802                           
  4803                           ;fecha.c: 62: *year = 0;
  4804  00E208  0E00               	movlw	0
  4805  00E20A  0100               	movlb	0	; () banked
  4806  00E20C  6FD8               	movwf	fecha@year& (0+255),b
  4807                           
  4808                           ;fecha.c: 64: tamanio_dia = 0;
  4809  00E20E  0E00               	movlw	0
  4810  00E210  6E55               	movwf	_tamanio_dia+1,c
  4811  00E212  0E00               	movlw	0
  4812  00E214  6E54               	movwf	_tamanio_dia,c
  4813                           
  4814                           ;fecha.c: 65: tamanio_mes = 0;
  4815  00E216  0E00               	movlw	0
  4816  00E218  6E59               	movwf	_tamanio_mes+1,c
  4817  00E21A  0E00               	movlw	0
  4818  00E21C  6E58               	movwf	_tamanio_mes,c
  4819                           
  4820                           ;fecha.c: 66: tamanio_anio = 0;
  4821  00E21E  0E00               	movlw	0
  4822  00E220  0100               	movlb	0	; () banked
  4823  00E222  6FDC               	movwf	(_tamanio_anio+1)& (0+255),b
  4824  00E224  0E00               	movlw	0
  4825  00E226  6FDB               	movwf	_tamanio_anio& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828  00E228  0012               	return		;funcret
  4829  00E22A                     __end_of_inicializar_fecha:
  4830                           	opt stack 0
  4831                           tosu	equ	0xFFF
  4832                           tosh	equ	0xFFE
  4833                           tosl	equ	0xFFD
  4834                           pclath	equ	0xFFA
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           postdec1	equ	0xFE5
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           plusw2	equ	0xFDB
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function _ingresar_password *****************
  4852 ;; Defined at:
  4853 ;;		line 89 in file "main.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  i               2   27[COMRAM] int 
  4858 ;;  i               2   29[COMRAM] int 
  4859 ;;  clear          16   11[COMRAM] unsigned char [16]
  4860 ;; Return value:  Size  Location     Type
  4861 ;;		None               void
  4862 ;; Registers used:
  4863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4870 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4872 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4873 ;;Total ram usage:       21 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    5
  4876 ;; This function calls:
  4877 ;;		_lcd_comand
  4878 ;;		_lcd_gotoxy
  4879 ;;		_lcd_putrs
  4880 ;;		_validar_password
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text29
  4887  00F100                     __ptext29:
  4888                           	opt stack 0
  4889  00F100                     _ingresar_password:
  4890                           	opt stack 25
  4891                           
  4892                           ;main.c: 90: char clear[16];
  4893                           ;main.c: 91: for (int i=0;i<16;i++) clear[i]=' ';
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;incstack = 0
  4897  00F100  0E00               	movlw	0
  4898  00F102  6E1F               	movwf	ingresar_password@i+1,c
  4899  00F104  0E00               	movlw	0
  4900  00F106  6E1E               	movwf	ingresar_password@i,c
  4901  00F108                     l3818:
  4902  00F108  BE1F               	btfsc	ingresar_password@i+1,7,c
  4903  00F10A  D008               	goto	l3822
  4904  00F10C  501F               	movf	ingresar_password@i+1,w,c
  4905  00F10E  E112               	bnz	l3828
  4906  00F110  0E10               	movlw	16
  4907  00F112  5C1E               	subwf	ingresar_password@i,w,c
  4908  00F114  B0D8               	btfsc	status,0,c
  4909  00F116  D00E               	goto	l3828
  4910  00F118  D001               	goto	l3822
  4911  00F11A  D00C               	goto	l3828
  4912  00F11C                     l3822:
  4913  00F11C  0E0C               	movlw	low ingresar_password@clear
  4914  00F11E  241E               	addwf	ingresar_password@i,w,c
  4915  00F120  6ED9               	movwf	fsr2l,c
  4916  00F122  0E00               	movlw	high ingresar_password@clear
  4917  00F124  201F               	addwfc	ingresar_password@i+1,w,c
  4918  00F126  6EDA               	movwf	fsr2h,c
  4919  00F128  0E20               	movlw	32
  4920  00F12A  6EDF               	movwf	indf2,c
  4921  00F12C  4A1E               	infsnz	ingresar_password@i,f,c
  4922  00F12E  2A1F               	incf	ingresar_password@i+1,f,c
  4923  00F130  D7EB               	goto	l3818
  4924  00F132  D000               	goto	l3828
  4925  00F134                     l3828:
  4926                           
  4927                           ;main.c: 93: lcd_comand(0b00001100);
  4928  00F134  0E0C               	movlw	12
  4929  00F136  ECC3  F06F         	call	_lcd_comand
  4930                           
  4931                           ;main.c: 94: lcd_gotoxy(1,1);
  4932  00F13A  0E01               	movlw	1
  4933  00F13C  6E05               	movwf	lcd_gotoxy@y,c
  4934  00F13E  0E01               	movlw	1
  4935  00F140  EC84  F070         	call	_lcd_gotoxy
  4936                           
  4937                           ;main.c: 95: lcd_putrs("Inserte password");
  4938  00F144  0E9B               	movlw	low STR_5
  4939  00F146  6E09               	movwf	lcd_putrs@ptr,c
  4940  00F148  0EFF               	movlw	high STR_5
  4941  00F14A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4942  00F14C  EC2A  F072         	call	_lcd_putrs	;wreg free
  4943                           
  4944                           ;main.c: 96: lcd_gotoxy(tamanio_password+1,2);
  4945  00F150  0E02               	movlw	2
  4946  00F152  6E05               	movwf	lcd_gotoxy@y,c
  4947  00F154  2849               	incf	_tamanio_password,w,c
  4948  00F156  EC84  F070         	call	_lcd_gotoxy
  4949                           
  4950                           ;main.c: 98: validar_password();
  4951  00F15A  EC66  F075         	call	_validar_password	;wreg free
  4952                           
  4953                           ;main.c: 99: if (tamanio_password >= 6 && !autorizado){
  4954  00F15E  BE4A               	btfsc	_tamanio_password+1,7,c
  4955  00F160  0012               	return	
  4956  00F162  504A               	movf	_tamanio_password+1,w,c
  4957  00F164  E104               	bnz	u3310
  4958  00F166  0E06               	movlw	6
  4959  00F168  5C49               	subwf	_tamanio_password,w,c
  4960  00F16A  A0D8               	btfss	status,0,c
  4961  00F16C  0012               	return	
  4962  00F16E                     u3310:
  4963  00F16E  0100               	movlb	0	; () banked
  4964  00F170  519A               	movf	_autorizado& (0+255),w,b
  4965  00F172  0100               	movlb	0	; () banked
  4966  00F174  119B               	iorwf	(_autorizado+1)& (0+255),w,b
  4967  00F176  A4D8               	btfss	status,2,c
  4968  00F178  0012               	return	
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;main.c: 100: tamanio_password = 0;
  4972  00F17A  0E00               	movlw	0
  4973  00F17C  6E4A               	movwf	_tamanio_password+1,c
  4974  00F17E  0E00               	movlw	0
  4975  00F180  6E49               	movwf	_tamanio_password,c
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 101: lcd_gotoxy(1,2);
  4979  00F182  0E02               	movlw	2
  4980  00F184  6E05               	movwf	lcd_gotoxy@y,c
  4981  00F186  0E01               	movlw	1
  4982  00F188  EC84  F070         	call	_lcd_gotoxy
  4983                           
  4984                           ;main.c: 102: lcd_putrs("ERROR pass");
  4985  00F18C  0ECA               	movlw	low STR_6
  4986  00F18E  6E09               	movwf	lcd_putrs@ptr,c
  4987  00F190  0EFF               	movlw	high STR_6
  4988  00F192  6E0A               	movwf	lcd_putrs@ptr+1,c
  4989  00F194  EC2A  F072         	call	_lcd_putrs	;wreg free
  4990                           
  4991                           ;main.c: 103: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  4992  00F198  0E00               	movlw	0
  4993  00F19A  6E1D               	movwf	ingresar_password@i_566+1,c
  4994  00F19C  0E00               	movlw	0
  4995  00F19E  6E1C               	movwf	ingresar_password@i_566,c
  4996  00F1A0                     l3848:
  4997  00F1A0  BE1D               	btfsc	ingresar_password@i_566+1,7,c
  4998  00F1A2  D008               	goto	l3852
  4999  00F1A4  501D               	movf	ingresar_password@i_566+1,w,c
  5000  00F1A6  E112               	bnz	l3856
  5001  00F1A8  0E04               	movlw	4
  5002  00F1AA  5C1C               	subwf	ingresar_password@i_566,w,c
  5003  00F1AC  B0D8               	btfsc	status,0,c
  5004  00F1AE  D00E               	goto	l3856
  5005  00F1B0  D001               	goto	l3852
  5006  00F1B2  D00C               	goto	l3856
  5007  00F1B4                     l3852:
  5008  00F1B4  0EFF               	movlw	255
  5009  00F1B6  6E0B               	movwf	??_ingresar_password& (0+255),c
  5010  00F1B8  0E8A               	movlw	138
  5011  00F1BA                     u3587:
  5012  00F1BA  2EE8               	decfsz	wreg,f,c
  5013  00F1BC  D7FE               	goto	u3587
  5014  00F1BE  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  5015  00F1C0  D7FC               	goto	u3587
  5016  00F1C2  D000               	nop2	
  5017  00F1C4  4A1C               	infsnz	ingresar_password@i_566,f,c
  5018  00F1C6  2A1D               	incf	ingresar_password@i_566+1,f,c
  5019  00F1C8  D7EB               	goto	l3848
  5020  00F1CA  D000               	goto	l3856
  5021  00F1CC                     l3856:
  5022                           
  5023                           ;main.c: 104: lcd_gotoxy(1,2);
  5024  00F1CC  0E02               	movlw	2
  5025  00F1CE  6E05               	movwf	lcd_gotoxy@y,c
  5026  00F1D0  0E01               	movlw	1
  5027  00F1D2  EC84  F070         	call	_lcd_gotoxy
  5028                           
  5029                           ;main.c: 105: lcd_putrs(clear);
  5030  00F1D6  0E0C               	movlw	low ingresar_password@clear
  5031  00F1D8  6E09               	movwf	lcd_putrs@ptr,c
  5032  00F1DA  0E00               	movlw	high ingresar_password@clear
  5033  00F1DC  6E0A               	movwf	lcd_putrs@ptr+1,c
  5034  00F1DE  EC2A  F072         	call	_lcd_putrs	;wreg free
  5035  00F1E2  0012               	return	
  5036  00F1E4  0012               	return		;funcret
  5037  00F1E6                     __end_of_ingresar_password:
  5038                           	opt stack 0
  5039                           tosu	equ	0xFFF
  5040                           tosh	equ	0xFFE
  5041                           tosl	equ	0xFFD
  5042                           pclath	equ	0xFFA
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           postinc0	equ	0xFEE
  5048                           wreg	equ	0xFE8
  5049                           postdec1	equ	0xFE5
  5050                           fsr1l	equ	0xFE1
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           plusw2	equ	0xFDB
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _validar_password *****************
  5060 ;; Defined at:
  5061 ;;		line 34 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  i               2    2[COMRAM] int 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5076 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5078 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5079 ;;Total ram usage:        4 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_ingresar_password
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           	psect	text30
  5089  00EACC                     __ptext30:
  5090                           	opt stack 0
  5091  00EACC                     _validar_password:
  5092                           	opt stack 29
  5093                           
  5094                           ;alarma.c: 36: autorizado = 1;
  5095                           
  5096                           ;incstack = 0
  5097  00EACC  0E00               	movlw	0
  5098  00EACE  0100               	movlb	0	; () banked
  5099  00EAD0  6F9B               	movwf	(_autorizado+1)& (0+255),b
  5100  00EAD2  0E01               	movlw	1
  5101  00EAD4  6F9A               	movwf	_autorizado& (0+255),b
  5102                           
  5103                           ;alarma.c: 37: int i = 0;
  5104  00EAD6  0E00               	movlw	0
  5105  00EAD8  6E04               	movwf	validar_password@i+1,c
  5106  00EADA  0E00               	movlw	0
  5107  00EADC  6E03               	movwf	validar_password@i,c
  5108                           
  5109                           ;alarma.c: 38: while (i < 6 && autorizado==1){
  5110  00EADE  D019               	goto	l3620
  5111  00EAE0                     l3614:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;alarma.c: 40: if (current_password[i] != password[i])
  5115  00EAE0  0EDF               	movlw	low _password
  5116  00EAE2  2403               	addwf	validar_password@i,w,c
  5117  00EAE4  6ED9               	movwf	fsr2l,c
  5118  00EAE6  0E00               	movlw	high _password
  5119  00EAE8  2004               	addwfc	validar_password@i+1,w,c
  5120  00EAEA  6EDA               	movwf	fsr2h,c
  5121  00EAEC  0E70               	movlw	low _current_password
  5122  00EAEE  2403               	addwf	validar_password@i,w,c
  5123  00EAF0  6EE1               	movwf	fsr1l,c
  5124  00EAF2  0E00               	movlw	high _current_password
  5125  00EAF4  2004               	addwfc	validar_password@i+1,w,c
  5126  00EAF6  6EE2               	movwf	fsr1h,c
  5127  00EAF8  50DE               	movf	postinc2,w,c
  5128  00EAFA  18E6               	xorwf	postinc1,w,c
  5129  00EAFC  B4D8               	btfsc	status,2,c
  5130  00EAFE  D006               	goto	l3618
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;alarma.c: 41: autorizado = 0;
  5134  00EB00  0E00               	movlw	0
  5135  00EB02  0100               	movlb	0	; () banked
  5136  00EB04  6F9B               	movwf	(_autorizado+1)& (0+255),b
  5137  00EB06  0E00               	movlw	0
  5138  00EB08  6F9A               	movwf	_autorizado& (0+255),b
  5139  00EB0A  D000               	goto	l3618
  5140  00EB0C                     l3618:
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;alarma.c: 43: i++;
  5144  00EB0C  4A03               	infsnz	validar_password@i,f,c
  5145  00EB0E  2A04               	incf	validar_password@i+1,f,c
  5146  00EB10  D000               	goto	l3620
  5147  00EB12                     l3620:
  5148                           
  5149                           ; BSR set to: 0
  5150  00EB12  BE04               	btfsc	validar_password@i+1,7,c
  5151  00EB14  D006               	goto	l3622
  5152  00EB16  5004               	movf	validar_password@i+1,w,c
  5153  00EB18  E10C               	bnz	l3624
  5154  00EB1A  0E06               	movlw	6
  5155  00EB1C  5C03               	subwf	validar_password@i,w,c
  5156  00EB1E  B0D8               	btfsc	status,0,c
  5157  00EB20  D008               	goto	l3624
  5158  00EB22                     l3622:
  5159                           
  5160                           ; BSR set to: 0
  5161  00EB22  0100               	movlb	0	; () banked
  5162  00EB24  059A               	decf	_autorizado& (0+255),w,b
  5163  00EB26  0100               	movlb	0	; () banked
  5164  00EB28  119B               	iorwf	(_autorizado+1)& (0+255),w,b
  5165  00EB2A  A4D8               	btfss	status,2,c
  5166  00EB2C  D002               	goto	l3624
  5167  00EB2E  D7D8               	goto	l3614
  5168                           
  5169                           ; BSR set to: 0
  5170  00EB30  D000               	goto	l3624
  5171  00EB32                     l3624:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;alarma.c: 44: }
  5175                           ;alarma.c: 46: if (autorizado == 1){
  5176  00EB32  0100               	movlb	0	; () banked
  5177  00EB34  059A               	decf	_autorizado& (0+255),w,b
  5178  00EB36  0100               	movlb	0	; () banked
  5179  00EB38  119B               	iorwf	(_autorizado+1)& (0+255),w,b
  5180  00EB3A  A4D8               	btfss	status,2,c
  5181  00EB3C  0012               	return	
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;alarma.c: 47: tamanio_password = 0;
  5185  00EB3E  0E00               	movlw	0
  5186  00EB40  6E4A               	movwf	_tamanio_password+1,c
  5187  00EB42  0E00               	movlw	0
  5188  00EB44  6E49               	movwf	_tamanio_password,c
  5189                           
  5190                           ;alarma.c: 48: encendida = 1;
  5191  00EB46  0E00               	movlw	0
  5192  00EB48  0100               	movlb	0	; () banked
  5193  00EB4A  6FA1               	movwf	(_encendida+1)& (0+255),b
  5194  00EB4C  0E01               	movlw	1
  5195  00EB4E  6FA0               	movwf	_encendida& (0+255),b
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;alarma.c: 49: LATBbits.LATB1 = 1;;
  5199  00EB50  828A               	bsf	3978,1,c	;volatile
  5200  00EB52  0012               	return	
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205  00EB54  0012               	return		;funcret
  5206  00EB56                     __end_of_validar_password:
  5207                           	opt stack 0
  5208                           tosu	equ	0xFFF
  5209                           tosh	equ	0xFFE
  5210                           tosl	equ	0xFFD
  5211                           pclath	equ	0xFFA
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           postinc1	equ	0xFE6
  5219                           postdec1	equ	0xFE5
  5220                           fsr1h	equ	0xFE2
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           plusw2	equ	0xFDB
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _caratula *****************
  5231 ;; Defined at:
  5232 ;;		line 35 in file "main.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  titulo          2   35[COMRAM] PTR const unsigned char 
  5235 ;;		 -> STR_21(9), 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5247 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5251 ;;Total ram usage:        4 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    5
  5254 ;; This function calls:
  5255 ;;		_lcd_comand
  5256 ;;		_lcd_gotoxy
  5257 ;;		_lcd_putrs
  5258 ;;		_sprintf
  5259 ;; This function is called by:
  5260 ;;		_main
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text31
  5265  00EF4E                     __ptext31:
  5266                           	opt stack 0
  5267  00EF4E                     _caratula:
  5268                           	opt stack 25
  5269                           
  5270                           ;main.c: 37: lcd_comand(0b00001100);
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;incstack = 0
  5274  00EF4E  0E0C               	movlw	12
  5275  00EF50  ECC3  F06F         	call	_lcd_comand
  5276                           
  5277                           ;main.c: 38: lcd_gotoxy(1,1);
  5278  00EF54  0E01               	movlw	1
  5279  00EF56  6E05               	movwf	lcd_gotoxy@y,c
  5280  00EF58  0E01               	movlw	1
  5281  00EF5A  EC84  F070         	call	_lcd_gotoxy
  5282                           
  5283                           ;main.c: 39: lcd_putrs(titulo);
  5284  00EF5E  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  5285  00EF62  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  5286  00EF66  EC2A  F072         	call	_lcd_putrs	;wreg free
  5287                           
  5288                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  5289  00EF6A  0EB8               	movlw	low _buffer2
  5290  00EF6C  6E0D               	movwf	sprintf@sp,c
  5291  00EF6E  0E00               	movlw	high _buffer2
  5292  00EF70  6E0E               	movwf	sprintf@sp+1,c
  5293  00EF72  0EAC               	movlw	low STR_1
  5294  00EF74  6E0F               	movwf	sprintf@f,c
  5295  00EF76  0EFF               	movlw	high STR_1
  5296  00EF78  6E10               	movwf	sprintf@f+1,c
  5297  00EF7A  C0ED  F011         	movff	_dia,?_sprintf+4
  5298  00EF7E  C0EE  F012         	movff	_dia+1,?_sprintf+5
  5299  00EF82  C05C  F013         	movff	_mes,?_sprintf+6
  5300  00EF86  C05D  F014         	movff	_mes+1,?_sprintf+7
  5301  00EF8A  C05A  F015         	movff	_anio,?_sprintf+8
  5302  00EF8E  C05B  F016         	movff	_anio+1,?_sprintf+9
  5303  00EF92  ECE1  F07D         	call	_sprintf	;wreg free
  5304                           
  5305                           ;main.c: 42: lcd_gotoxy(9,1);
  5306  00EF96  0E01               	movlw	1
  5307  00EF98  6E05               	movwf	lcd_gotoxy@y,c
  5308  00EF9A  0E09               	movlw	9
  5309  00EF9C  EC84  F070         	call	_lcd_gotoxy
  5310                           
  5311                           ;main.c: 43: lcd_putrs(buffer2);
  5312  00EFA0  0EB8               	movlw	low _buffer2
  5313  00EFA2  6E09               	movwf	lcd_putrs@ptr,c
  5314  00EFA4  0E00               	movlw	high _buffer2
  5315  00EFA6  6E0A               	movwf	lcd_putrs@ptr+1,c
  5316  00EFA8  EC2A  F072         	call	_lcd_putrs	;wreg free
  5317                           
  5318                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  5319  00EFAC  0EB8               	movlw	low _buffer2
  5320  00EFAE  6E0D               	movwf	sprintf@sp,c
  5321  00EFB0  0E00               	movlw	high _buffer2
  5322  00EFB2  6E0E               	movwf	sprintf@sp+1,c
  5323  00EFB4  0EBB               	movlw	low STR_2
  5324  00EFB6  6E0F               	movwf	sprintf@f,c
  5325  00EFB8  0EFF               	movlw	high STR_2
  5326  00EFBA  6E10               	movwf	sprintf@f+1,c
  5327  00EFBC  C0EF  F011         	movff	_hora,?_sprintf+4
  5328  00EFC0  C0F0  F012         	movff	_hora+1,?_sprintf+5
  5329  00EFC4  C0F1  F013         	movff	_minuto,?_sprintf+6
  5330  00EFC8  C0F2  F014         	movff	_minuto+1,?_sprintf+7
  5331  00EFCC  C0AC  F015         	movff	_segundo,?_sprintf+8
  5332  00EFD0  C0AD  F016         	movff	_segundo+1,?_sprintf+9
  5333  00EFD4  ECE1  F07D         	call	_sprintf	;wreg free
  5334                           
  5335                           ;main.c: 46: lcd_gotoxy(1,2);
  5336  00EFD8  0E02               	movlw	2
  5337  00EFDA  6E05               	movwf	lcd_gotoxy@y,c
  5338  00EFDC  0E01               	movlw	1
  5339  00EFDE  EC84  F070         	call	_lcd_gotoxy
  5340                           
  5341                           ;main.c: 47: lcd_putrs(buffer2);
  5342  00EFE2  0EB8               	movlw	low _buffer2
  5343  00EFE4  6E09               	movwf	lcd_putrs@ptr,c
  5344  00EFE6  0E00               	movlw	high _buffer2
  5345  00EFE8  6E0A               	movwf	lcd_putrs@ptr+1,c
  5346  00EFEA  EC2A  F072         	call	_lcd_putrs	;wreg free
  5347                           
  5348                           ;main.c: 49: lcd_gotoxy(13,2);
  5349  00EFEE  0E02               	movlw	2
  5350  00EFF0  6E05               	movwf	lcd_gotoxy@y,c
  5351  00EFF2  0E0D               	movlw	13
  5352  00EFF4  EC84  F070         	call	_lcd_gotoxy
  5353                           
  5354                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  5355  00EFF8  0100               	movlb	0	; () banked
  5356  00EFFA  51A0               	movf	_encendida& (0+255),w,b
  5357  00EFFC  0100               	movlb	0	; () banked
  5358  00EFFE  11A1               	iorwf	(_encendida+1)& (0+255),w,b
  5359  00F000  A4D8               	btfss	status,2,c
  5360  00F002  D004               	goto	l3788
  5361                           
  5362                           ; BSR set to: 0
  5363  00F004  0EE3               	movlw	low STR_4
  5364  00F006  6E26               	movwf	_caratula$528,c
  5365  00F008  0EFF               	movlw	high STR_4
  5366  00F00A  D003               	goto	L1
  5367  00F00C                     l3788:
  5368                           
  5369                           ; BSR set to: 0
  5370  00F00C  0EE7               	movlw	low STR_3
  5371  00F00E  6E26               	movwf	_caratula$528,c
  5372  00F010  0EFF               	movlw	high STR_3
  5373  00F012                     L1:
  5374  00F012  6E27               	movwf	_caratula$528+1,c
  5375  00F014  D000               	goto	l3790
  5376  00F016                     l3790:
  5377                           
  5378                           ; BSR set to: 0
  5379  00F016  C026  F009         	movff	_caratula$528,lcd_putrs@ptr
  5380  00F01A  C027  F00A         	movff	_caratula$528+1,lcd_putrs@ptr+1
  5381  00F01E  EC2A  F072         	call	_lcd_putrs	;wreg free
  5382  00F022  0012               	return		;funcret
  5383  00F024                     __end_of_caratula:
  5384                           	opt stack 0
  5385                           tosu	equ	0xFFF
  5386                           tosh	equ	0xFFE
  5387                           tosl	equ	0xFFD
  5388                           pclath	equ	0xFFA
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           postinc1	equ	0xFE6
  5396                           postdec1	equ	0xFE5
  5397                           fsr1h	equ	0xFE2
  5398                           fsr1l	equ	0xFE1
  5399                           indf2	equ	0xFDF
  5400                           postinc2	equ	0xFDE
  5401                           postdec2	equ	0xFDD
  5402                           plusw2	equ	0xFDB
  5403                           fsr2h	equ	0xFDA
  5404                           fsr2l	equ	0xFD9
  5405                           status	equ	0xFD8
  5406                           
  5407 ;; *************** function _cambiar_password *****************
  5408 ;; Defined at:
  5409 ;;		line 186 in file "main.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  verifica        2   37[COMRAM] int 
  5414 ;;  confirmar       2   35[COMRAM] int 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;		None               void
  5417 ;; Registers used:
  5418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5425 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5427 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5428 ;;Total ram usage:        4 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    6
  5431 ;; This function calls:
  5432 ;;		_actualizar_password
  5433 ;;		_clear_display
  5434 ;;		_mostrar_titulo_menu
  5435 ;;		_sprintf
  5436 ;;		_verficar_password
  5437 ;; This function is called by:
  5438 ;;		_main
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text32
  5443  00F024                     __ptext32:
  5444                           	opt stack 0
  5445  00F024                     _cambiar_password:
  5446                           	opt stack 24
  5447                           
  5448                           ;main.c: 188: int verifica, confirmar;
  5449                           ;main.c: 190: puntero_funcion = &mostrar_guardar_temporal_password;
  5450                           
  5451                           ;incstack = 0
  5452  00F024  0E78               	movlw	low _mostrar_guardar_temporal_password
  5453  00F026  0100               	movlb	0	; () banked
  5454  00F028  6FAA               	movwf	_puntero_funcion& (0+255),b
  5455  00F02A  0EE1               	movlw	high _mostrar_guardar_temporal_password
  5456  00F02C  0100               	movlb	0	; () banked
  5457  00F02E  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;main.c: 192: verficar_password(&verifica);
  5461  00F030  0E26               	movlw	low cambiar_password@verifica
  5462  00F032  6E01               	movwf	verficar_password@verifica,c
  5463  00F034  0E00               	movlw	high cambiar_password@verifica
  5464  00F036  6E02               	movwf	verficar_password@verifica+1,c
  5465  00F038  EC6B  F074         	call	_verficar_password	;wreg free
  5466                           
  5467                           ;main.c: 193: if(!verifica){
  5468  00F03C  5026               	movf	cambiar_password@verifica,w,c
  5469  00F03E  1027               	iorwf	cambiar_password@verifica+1,w,c
  5470  00F040  A4D8               	btfss	status,2,c
  5471  00F042  D00F               	goto	l3908
  5472                           
  5473                           ;main.c: 194: mostrar_titulo_menu("Password actual:          ");
  5474  00F044  0EC9               	movlw	low STR_17
  5475  00F046  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5476  00F048  0EFE               	movlw	high STR_17
  5477  00F04A  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5478  00F04C  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  5479                           
  5480                           ;main.c: 195: clear_display(tamanio_password+1);
  5481  00F050  0E01               	movlw	1
  5482  00F052  2449               	addwf	_tamanio_password,w,c
  5483  00F054  6E0B               	movwf	clear_display@pos,c
  5484  00F056  0E00               	movlw	0
  5485  00F058  204A               	addwfc	_tamanio_password+1,w,c
  5486  00F05A  6E0C               	movwf	clear_display@pos+1,c
  5487  00F05C  EC62  F070         	call	_clear_display	;wreg free
  5488                           
  5489                           ;main.c: 197: }else {
  5490  00F060  0012               	return	
  5491  00F062                     l3908:
  5492                           
  5493                           ;main.c: 198: if (tamanio_new_password <= 6){
  5494  00F062  BE48               	btfsc	_tamanio_new_password+1,7,c
  5495  00F064  D006               	goto	l3910
  5496  00F066  5048               	movf	_tamanio_new_password+1,w,c
  5497  00F068  E120               	bnz	l3918
  5498  00F06A  0E07               	movlw	7
  5499  00F06C  5C47               	subwf	_tamanio_new_password,w,c
  5500  00F06E  B0D8               	btfsc	status,0,c
  5501  00F070  D01C               	goto	l3918
  5502  00F072                     l3910:
  5503                           
  5504                           ;main.c: 199: puntero_funcion = &mostrar_guardar_nuevo_password;
  5505  00F072  0ED0               	movlw	low _mostrar_guardar_nuevo_password
  5506  00F074  0100               	movlb	0	; () banked
  5507  00F076  6FAA               	movwf	_puntero_funcion& (0+255),b
  5508  00F078  0EE1               	movlw	high _mostrar_guardar_nuevo_password
  5509  00F07A  0100               	movlb	0	; () banked
  5510  00F07C  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;main.c: 201: mostrar_titulo_menu("Nuevo pass:        ");
  5514  00F07E  0E2B               	movlw	low STR_18
  5515  00F080  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5516  00F082  0EFF               	movlw	high STR_18
  5517  00F084  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5518  00F086  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  5519                           
  5520                           ;main.c: 202: clear_display(tamanio_new_password+1);
  5521  00F08A  0E01               	movlw	1
  5522  00F08C  2447               	addwf	_tamanio_new_password,w,c
  5523  00F08E  6E0B               	movwf	clear_display@pos,c
  5524  00F090  0E00               	movlw	0
  5525  00F092  2048               	addwfc	_tamanio_new_password+1,w,c
  5526  00F094  6E0C               	movwf	clear_display@pos+1,c
  5527  00F096  EC62  F070         	call	_clear_display	;wreg free
  5528                           
  5529                           ;main.c: 204: if (tamanio_new_password == 6) tamanio_new_password++;
  5530  00F09A  0E06               	movlw	6
  5531  00F09C  1847               	xorwf	_tamanio_new_password,w,c
  5532  00F09E  1048               	iorwf	_tamanio_new_password+1,w,c
  5533  00F0A0  A4D8               	btfss	status,2,c
  5534  00F0A2  0012               	return	
  5535  00F0A4  4A47               	infsnz	_tamanio_new_password,f,c
  5536  00F0A6  2A48               	incf	_tamanio_new_password+1,f,c
  5537                           
  5538                           ;main.c: 206: }else{
  5539  00F0A8  0012               	return	
  5540  00F0AA                     l3918:
  5541                           
  5542                           ;main.c: 207: puntero_funcion = &confirmar_actualizar_password;
  5543  00F0AA  0E2C               	movlw	low _confirmar_actualizar_password
  5544  00F0AC  0100               	movlb	0	; () banked
  5545  00F0AE  6FAA               	movwf	_puntero_funcion& (0+255),b
  5546  00F0B0  0EE1               	movlw	high _confirmar_actualizar_password
  5547  00F0B2  0100               	movlb	0	; () banked
  5548  00F0B4  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;main.c: 209: sprintf(buffer2,"%01u",key);
  5552  00F0B6  0EB8               	movlw	low _buffer2
  5553  00F0B8  6E0D               	movwf	sprintf@sp,c
  5554  00F0BA  0E00               	movlw	high _buffer2
  5555  00F0BC  6E0E               	movwf	sprintf@sp+1,c
  5556  00F0BE  0EDE               	movlw	low STR_7
  5557  00F0C0  6E0F               	movwf	sprintf@f,c
  5558  00F0C2  0EFF               	movlw	high STR_7
  5559  00F0C4  6E10               	movwf	sprintf@f+1,c
  5560  00F0C6  C04B  F011         	movff	_key,?_sprintf+4
  5561  00F0CA  6A12               	clrf	?_sprintf+5,c
  5562  00F0CC  ECE1  F07D         	call	_sprintf	;wreg free
  5563                           
  5564                           ;main.c: 210: actualizar_password(&confirmar,buffer2[0]);
  5565  00F0D0  0E24               	movlw	low cambiar_password@confirmar
  5566  00F0D2  6E01               	movwf	actualizar_password@confirmar,c
  5567  00F0D4  0E00               	movlw	high cambiar_password@confirmar
  5568  00F0D6  6E02               	movwf	actualizar_password@confirmar+1,c
  5569  00F0D8  C0B8  F003         	movff	_buffer2,actualizar_password@valor
  5570  00F0DC  EC03  F07B         	call	_actualizar_password	;wreg free
  5571                           
  5572                           ;main.c: 212: mostrar_titulo_menu("Confirme pass:        ");
  5573  00F0E0  0EFE               	movlw	low STR_20
  5574  00F0E2  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  5575  00F0E4  0EFE               	movlw	high STR_20
  5576  00F0E6  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  5577  00F0E8  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  5578                           
  5579                           ;main.c: 213: clear_display(tamanio_new_password - 6);
  5580  00F0EC  0EFA               	movlw	250
  5581  00F0EE  2447               	addwf	_tamanio_new_password,w,c
  5582  00F0F0  6E0B               	movwf	clear_display@pos,c
  5583  00F0F2  0EFF               	movlw	255
  5584  00F0F4  2048               	addwfc	_tamanio_new_password+1,w,c
  5585  00F0F6  6E0C               	movwf	clear_display@pos+1,c
  5586  00F0F8  EC62  F070         	call	_clear_display	;wreg free
  5587  00F0FC  0012               	return	
  5588  00F0FE  0012               	return		;funcret
  5589  00F100                     __end_of_cambiar_password:
  5590                           	opt stack 0
  5591                           tosu	equ	0xFFF
  5592                           tosh	equ	0xFFE
  5593                           tosl	equ	0xFFD
  5594                           pclath	equ	0xFFA
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           postinc1	equ	0xFE6
  5602                           postdec1	equ	0xFE5
  5603                           fsr1h	equ	0xFE2
  5604                           fsr1l	equ	0xFE1
  5605                           indf2	equ	0xFDF
  5606                           postinc2	equ	0xFDE
  5607                           postdec2	equ	0xFDD
  5608                           plusw2	equ	0xFDB
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _verficar_password *****************
  5614 ;; Defined at:
  5615 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  verifica        2    0[COMRAM] PTR int 
  5618 ;;		 -> cambiar_password@verifica(2), 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  i               2    4[COMRAM] int 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;		None               void
  5623 ;; Registers used:
  5624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5633 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5634 ;;Total ram usage:        6 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_cambiar_password
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text33
  5644  00E8D6                     __ptext33:
  5645                           	opt stack 0
  5646  00E8D6                     _verficar_password:
  5647                           	opt stack 29
  5648                           
  5649                           ;alarma.c: 55: *verifica=1;
  5650                           
  5651                           ;incstack = 0
  5652  00E8D6  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5653  00E8DA  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5654  00E8DE  0E01               	movlw	1
  5655  00E8E0  6EDE               	movwf	postinc2,c
  5656  00E8E2  0E00               	movlw	0
  5657  00E8E4  6EDD               	movwf	postdec2,c
  5658                           
  5659                           ;alarma.c: 56: int i = 0;
  5660  00E8E6  0E00               	movlw	0
  5661  00E8E8  6E06               	movwf	verficar_password@i+1,c
  5662  00E8EA  0E00               	movlw	0
  5663  00E8EC  6E05               	movwf	verficar_password@i,c
  5664                           
  5665                           ;alarma.c: 57: while (i < 6 && *verifica == 1){
  5666  00E8EE  D01C               	goto	l3650
  5667  00E8F0                     l3644:
  5668                           
  5669                           ;alarma.c: 58: if (password[i] != *(temporal+i))
  5670  00E8F0  0E7E               	movlw	low _temporal
  5671  00E8F2  2405               	addwf	verficar_password@i,w,c
  5672  00E8F4  6ED9               	movwf	fsr2l,c
  5673  00E8F6  0E00               	movlw	high _temporal
  5674  00E8F8  2006               	addwfc	verficar_password@i+1,w,c
  5675  00E8FA  6EDA               	movwf	fsr2h,c
  5676  00E8FC  0EDF               	movlw	low _password
  5677  00E8FE  2405               	addwf	verficar_password@i,w,c
  5678  00E900  6EE1               	movwf	fsr1l,c
  5679  00E902  0E00               	movlw	high _password
  5680  00E904  2006               	addwfc	verficar_password@i+1,w,c
  5681  00E906  6EE2               	movwf	fsr1h,c
  5682  00E908  50DE               	movf	postinc2,w,c
  5683  00E90A  18E6               	xorwf	postinc1,w,c
  5684  00E90C  B4D8               	btfsc	status,2,c
  5685  00E90E  D009               	goto	l3648
  5686                           
  5687                           ;alarma.c: 59: *verifica = 0;
  5688  00E910  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5689  00E914  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5690  00E918  0E00               	movlw	0
  5691  00E91A  6EDE               	movwf	postinc2,c
  5692  00E91C  0E00               	movlw	0
  5693  00E91E  6EDD               	movwf	postdec2,c
  5694  00E920  D000               	goto	l3648
  5695  00E922                     l3648:
  5696                           
  5697                           ;alarma.c: 61: i++;
  5698  00E922  4A05               	infsnz	verficar_password@i,f,c
  5699  00E924  2A06               	incf	verficar_password@i+1,f,c
  5700  00E926  D000               	goto	l3650
  5701  00E928                     l3650:
  5702  00E928  BE06               	btfsc	verficar_password@i+1,7,c
  5703  00E92A  D006               	goto	l3652
  5704  00E92C  5006               	movf	verficar_password@i+1,w,c
  5705  00E92E  E10E               	bnz	l733
  5706  00E930  0E06               	movlw	6
  5707  00E932  5C05               	subwf	verficar_password@i,w,c
  5708  00E934  B0D8               	btfsc	status,0,c
  5709  00E936  0012               	return	
  5710  00E938                     l3652:
  5711  00E938  C001  FFD9         	movff	verficar_password@verifica,fsr2l
  5712  00E93C  C002  FFDA         	movff	verficar_password@verifica+1,fsr2h
  5713  00E940  04DE               	decf	postinc2,w,c
  5714  00E942  10DE               	iorwf	postinc2,w,c
  5715  00E944  A4D8               	btfss	status,2,c
  5716  00E946  0012               	return	
  5717  00E948  D7D3               	goto	l3644
  5718  00E94A  0012               	return	
  5719  00E94C                     l733:
  5720  00E94C  0012               	return		;funcret
  5721  00E94E                     __end_of_verficar_password:
  5722                           	opt stack 0
  5723                           tosu	equ	0xFFF
  5724                           tosh	equ	0xFFE
  5725                           tosl	equ	0xFFD
  5726                           pclath	equ	0xFFA
  5727                           tblptru	equ	0xFF8
  5728                           tblptrh	equ	0xFF7
  5729                           tblptrl	equ	0xFF6
  5730                           tablat	equ	0xFF5
  5731                           postinc0	equ	0xFEE
  5732                           wreg	equ	0xFE8
  5733                           postinc1	equ	0xFE6
  5734                           postdec1	equ	0xFE5
  5735                           fsr1h	equ	0xFE2
  5736                           fsr1l	equ	0xFE1
  5737                           indf2	equ	0xFDF
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           plusw2	equ	0xFDB
  5741                           fsr2h	equ	0xFDA
  5742                           fsr2l	equ	0xFD9
  5743                           status	equ	0xFD8
  5744                           
  5745 ;; *************** function _sprintf *****************
  5746 ;; Defined at:
  5747 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  sp              2   12[COMRAM] PTR unsigned char 
  5750 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  5751 ;;  f               2   14[COMRAM] PTR const unsigned char 
  5752 ;;		 -> STR_32(18), STR_31(5), STR_23(5), STR_22(5), 
  5753 ;;		 -> STR_19(5), STR_10(5), STR_9(5), STR_8(5), 
  5754 ;;		 -> STR_7(5), STR_2(15), STR_1(15), 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  tmpval          4    0        struct .
  5757 ;;  cp              3    0        PTR const unsigned char 
  5758 ;;  width           2   32[COMRAM] int 
  5759 ;;  val             2   29[COMRAM] unsigned int 
  5760 ;;  ap              2   27[COMRAM] PTR void [1]
  5761 ;;		 -> ?_sprintf(2), 
  5762 ;;  len             2    0        unsigned int 
  5763 ;;  c               1   34[COMRAM] char 
  5764 ;;  flag            1   31[COMRAM] unsigned char 
  5765 ;;  prec            1   26[COMRAM] char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2   12[COMRAM] int 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5775 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5776 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5777 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5778 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5779 ;;Total ram usage:       23 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    1
  5782 ;; This function calls:
  5783 ;;		___lwdiv
  5784 ;;		___lwmod
  5785 ;;		___wmul
  5786 ;;		_isdigit
  5787 ;; This function is called by:
  5788 ;;		_caratula
  5789 ;;		_mostrar_guardar_password
  5790 ;;		_mostrar_guardar_temporal_password
  5791 ;;		_mostrar_guardar_nuevo_password
  5792 ;;		_confirmar_actualizar_password
  5793 ;;		_cambiar_password
  5794 ;;		_guardar_comando
  5795 ;;		_imprimir_tecla
  5796 ;;		_guardar_elemento
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text34
  5801  00FBC2                     __ptext34:
  5802                           	opt stack 0
  5803  00FBC2                     _sprintf:
  5804                           	opt stack 27
  5805                           
  5806                           ;doprnt.c: 494: va_list ap;
  5807                           ;doprnt.c: 499: signed char c;
  5808                           ;doprnt.c: 501: int width;
  5809                           ;doprnt.c: 506: signed char prec;
  5810                           ;doprnt.c: 508: unsigned char flag;
  5811                           ;doprnt.c: 523: union {
  5812                           ;doprnt.c: 524: unsigned long vd;
  5813                           ;doprnt.c: 525: double integ;
  5814                           ;doprnt.c: 526: } tmpval;
  5815                           ;doprnt.c: 528: unsigned int val;
  5816                           ;doprnt.c: 529: unsigned len;
  5817                           ;doprnt.c: 530: const char * cp;
  5818                           ;doprnt.c: 533: *ap = __va_start();
  5819                           
  5820                           ;incstack = 0
  5821  00FBC2  0E11               	movlw	low (?_sprintf+4)
  5822  00FBC4  6E1C               	movwf	sprintf@ap,c
  5823  00FBC6  0E00               	movlw	high (?_sprintf+4)
  5824  00FBC8  6E1D               	movwf	sprintf@ap+1,c
  5825                           
  5826                           ;doprnt.c: 536: while(c = *f++) {
  5827  00FBCA  D161               	goto	l3320
  5828  00FBCC                     l3208:
  5829                           
  5830                           ;doprnt.c: 538: if(c != '%')
  5831  00FBCC  0E25               	movlw	37
  5832  00FBCE  1823               	xorwf	sprintf@c,w,c
  5833  00FBD0  B4D8               	btfsc	status,2,c
  5834  00FBD2  D009               	goto	l3214
  5835                           
  5836                           ;doprnt.c: 540: {
  5837                           ;doprnt.c: 541: ((*sp++ = (c)));
  5838  00FBD4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5839  00FBD8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5840  00FBDC  C023  FFDF         	movff	sprintf@c,indf2
  5841  00FBE0  4A0D               	infsnz	sprintf@sp,f,c
  5842  00FBE2  2A0E               	incf	sprintf@sp+1,f,c
  5843                           
  5844                           ;doprnt.c: 542: continue;
  5845  00FBE4  D154               	goto	l3320
  5846  00FBE6                     l3214:
  5847                           
  5848                           ;doprnt.c: 543: }
  5849                           ;doprnt.c: 546: width = 0;
  5850  00FBE6  0E00               	movlw	0
  5851  00FBE8  6E22               	movwf	sprintf@width+1,c
  5852  00FBEA  0E00               	movlw	0
  5853  00FBEC  6E21               	movwf	sprintf@width,c
  5854                           
  5855                           ;doprnt.c: 548: flag = 0;
  5856  00FBEE  0E00               	movlw	0
  5857  00FBF0  6E20               	movwf	sprintf@flag,c
  5858                           
  5859                           ;doprnt.c: 551: switch(*f) {
  5860                           
  5861                           ;doprnt.c: 550: for(;;) {
  5862  00FBF2  D005               	goto	l3220
  5863  00FBF4                     l3216:
  5864                           
  5865                           ;doprnt.c: 580: flag |= 0x04;
  5866  00FBF4  8420               	bsf	sprintf@flag,2,c
  5867                           
  5868                           ;doprnt.c: 581: f++;
  5869  00FBF6  4A0F               	infsnz	sprintf@f,f,c
  5870  00FBF8  2A10               	incf	sprintf@f+1,f,c
  5871                           
  5872                           ;doprnt.c: 582: continue;
  5873  00FBFA  D001               	goto	l3220
  5874                           
  5875                           ;doprnt.c: 584: }
  5876  00FBFC  D00B               	goto	l3222
  5877  00FBFE                     l3220:
  5878  00FBFE  C00F  FFF6         	movff	sprintf@f,tblptrl
  5879  00FC02  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5880  00FC06                     	if	0	;tblptru may be non-zero
  5881  00FC06                     	endif
  5882  00FC06                     	if	0	;tblptru may be non-zero
  5883  00FC06                     	endif
  5884  00FC06  0008               	tblrd		*
  5885  00FC08  50F5               	movf	tablat,w,c
  5886                           
  5887                           ; Switch size 1, requested type "space"
  5888                           ; Number of cases is 1, Range of values is 48 to 48
  5889                           ; switch strategies available:
  5890                           ; Name         Instructions Cycles
  5891                           ; simple_byte            4     3 (average)
  5892                           ;	Chosen strategy is simple_byte
  5893  00FC0A  0A30               	xorlw	48	; case 48
  5894  00FC0C  B4D8               	btfsc	status,2,c
  5895  00FC0E  D7F2               	goto	l3216
  5896                           
  5897                           ;doprnt.c: 585: break;
  5898  00FC10  D001               	goto	l3222
  5899                           
  5900                           ;doprnt.c: 586: }
  5901  00FC12  D7F5               	goto	l3220
  5902  00FC14                     l3222:
  5903                           
  5904                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5905  00FC14  C00F  FFF6         	movff	sprintf@f,tblptrl
  5906  00FC18  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5907  00FC1C                     	if	0	;tblptru may be non-zero
  5908  00FC1C                     	endif
  5909  00FC1C                     	if	0	;tblptru may be non-zero
  5910  00FC1C                     	endif
  5911  00FC1C  0008               	tblrd		*
  5912  00FC1E  50F5               	movf	tablat,w,c
  5913  00FC20  EC73  F070         	call	_isdigit
  5914  00FC24  A0D8               	btfss	status,0,c
  5915  00FC26  D03A               	goto	l3238
  5916                           
  5917                           ;doprnt.c: 598: width = 0;
  5918  00FC28  0E00               	movlw	0
  5919  00FC2A  6E22               	movwf	sprintf@width+1,c
  5920  00FC2C  0E00               	movlw	0
  5921  00FC2E  6E21               	movwf	sprintf@width,c
  5922  00FC30  D000               	goto	l3226
  5923  00FC32                     l3226:
  5924                           
  5925                           ;doprnt.c: 600: width *= 10;
  5926  00FC32  C021  F001         	movff	sprintf@width,___wmul@multiplier
  5927  00FC36  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  5928  00FC3A  0E00               	movlw	0
  5929  00FC3C  6E04               	movwf	___wmul@multiplicand+1,c
  5930  00FC3E  0E0A               	movlw	10
  5931  00FC40  6E03               	movwf	___wmul@multiplicand,c
  5932  00FC42  ECA8  F070         	call	___wmul	;wreg free
  5933  00FC46  C001  F021         	movff	?___wmul,sprintf@width
  5934  00FC4A  C002  F022         	movff	?___wmul+1,sprintf@width+1
  5935                           
  5936                           ;doprnt.c: 601: width += *f++ - '0';
  5937  00FC4E  0ED0               	movlw	208
  5938  00FC50  6E17               	movwf	??_sprintf& (0+255),c
  5939  00FC52  0EFF               	movlw	255
  5940  00FC54  6E18               	movwf	(??_sprintf+1)& (0+255),c
  5941  00FC56  C00F  FFF6         	movff	sprintf@f,tblptrl
  5942  00FC5A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5943  00FC5E                     	if	0	;tblptru may be non-zero
  5944  00FC5E                     	endif
  5945  00FC5E                     	if	0	;tblptru may be non-zero
  5946  00FC5E                     	endif
  5947  00FC5E  0008               	tblrd		*
  5948  00FC60  50F5               	movf	tablat,w,c
  5949  00FC62  6E19               	movwf	(??_sprintf+2)& (0+255),c
  5950  00FC64  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  5951  00FC66  5017               	movf	??_sprintf,w,c
  5952  00FC68  2619               	addwf	??_sprintf+2,f,c
  5953  00FC6A  5018               	movf	??_sprintf+1,w,c
  5954  00FC6C  221A               	addwfc	??_sprintf+3,f,c
  5955  00FC6E  5019               	movf	??_sprintf+2,w,c
  5956  00FC70  2621               	addwf	sprintf@width,f,c
  5957  00FC72  501A               	movf	??_sprintf+3,w,c
  5958  00FC74  2222               	addwfc	sprintf@width+1,f,c
  5959  00FC76  4A0F               	infsnz	sprintf@f,f,c
  5960  00FC78  2A10               	incf	sprintf@f+1,f,c
  5961                           
  5962                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5963  00FC7A  C00F  FFF6         	movff	sprintf@f,tblptrl
  5964  00FC7E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5965  00FC82                     	if	0	;tblptru may be non-zero
  5966  00FC82                     	endif
  5967  00FC82                     	if	0	;tblptru may be non-zero
  5968  00FC82                     	endif
  5969  00FC82  0008               	tblrd		*
  5970  00FC84  50F5               	movf	tablat,w,c
  5971  00FC86  EC73  F070         	call	_isdigit
  5972  00FC8A  A0D8               	btfss	status,0,c
  5973  00FC8C  D007               	goto	l3238
  5974  00FC8E  D7D1               	goto	l3226
  5975                           
  5976                           ;doprnt.c: 608: }
  5977                           ;doprnt.c: 635: switch(c = *f++) {
  5978  00FC90  D005               	goto	l3238
  5979                           
  5980                           ;doprnt.c: 638: goto alldone;
  5981                           
  5982                           ;doprnt.c: 637: case 0:
  5983  00FC92  D10B               	goto	l3322
  5984                           
  5985                           ;doprnt.c: 698: case 'i':
  5986                           ;doprnt.c: 699: break;
  5987                           
  5988                           ;doprnt.c: 697: case 'd':
  5989  00FC94  D01A               	goto	l770
  5990                           
  5991                           ;doprnt.c: 813: continue;
  5992                           
  5993                           ;doprnt.c: 802: default:
  5994  00FC96  D0FB               	goto	l3320
  5995  00FC98                     l3234:
  5996                           
  5997                           ;doprnt.c: 818: flag |= 0x40;
  5998  00FC98  8C20               	bsf	sprintf@flag,6,c
  5999                           
  6000                           ;doprnt.c: 822: }
  6001                           
  6002                           ;doprnt.c: 819: break;
  6003  00FC9A  D017               	goto	l770
  6004  00FC9C                     l3238:
  6005  00FC9C  C00F  FFF6         	movff	sprintf@f,tblptrl
  6006  00FCA0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  6007  00FCA4  4A0F               	infsnz	sprintf@f,f,c
  6008  00FCA6  2A10               	incf	sprintf@f+1,f,c
  6009  00FCA8                     	if	0	;tblptru may be non-zero
  6010  00FCA8                     	endif
  6011  00FCA8                     	if	0	;tblptru may be non-zero
  6012  00FCA8                     	endif
  6013  00FCA8  0008               	tblrd		*
  6014  00FCAA  CFF5 F023          	movff	tablat,sprintf@c
  6015  00FCAE  5023               	movf	sprintf@c,w,c
  6016                           
  6017                           ; Switch size 1, requested type "space"
  6018                           ; Number of cases is 4, Range of values is 0 to 117
  6019                           ; switch strategies available:
  6020                           ; Name         Instructions Cycles
  6021                           ; simple_byte           13     7 (average)
  6022                           ;	Chosen strategy is simple_byte
  6023  00FCB0  0A00               	xorlw	0	; case 0
  6024  00FCB2  B4D8               	btfsc	status,2,c
  6025  00FCB4  D0FA               	goto	l3322
  6026  00FCB6  0A64               	xorlw	100	; case 100
  6027  00FCB8  B4D8               	btfsc	status,2,c
  6028  00FCBA  D007               	goto	l770
  6029  00FCBC  0A0D               	xorlw	13	; case 105
  6030  00FCBE  B4D8               	btfsc	status,2,c
  6031  00FCC0  D004               	goto	l770
  6032  00FCC2  0A1C               	xorlw	28	; case 117
  6033  00FCC4  B4D8               	btfsc	status,2,c
  6034  00FCC6  D7E8               	goto	l3234
  6035  00FCC8  D0E2               	goto	l3320
  6036  00FCCA                     l770:
  6037                           
  6038                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6039  00FCCA  BC20               	btfsc	sprintf@flag,6,c
  6040  00FCCC  D015               	goto	l3250
  6041                           
  6042                           ;doprnt.c: 1253: {
  6043                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6044  00FCCE  C01C  FFD9         	movff	sprintf@ap,fsr2l
  6045  00FCD2  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  6046  00FCD6  CFDE F01E          	movff	postinc2,sprintf@val
  6047  00FCDA  CFDD F01F          	movff	postdec2,sprintf@val+1
  6048  00FCDE  0E02               	movlw	2
  6049  00FCE0  261C               	addwf	sprintf@ap,f,c
  6050  00FCE2  0E00               	movlw	0
  6051  00FCE4  221D               	addwfc	sprintf@ap+1,f,c
  6052                           
  6053                           ;doprnt.c: 1261: if((int)val < 0) {
  6054  00FCE6  AE1F               	btfss	sprintf@val+1,7,c
  6055  00FCE8  D014               	goto	l3254
  6056                           
  6057                           ;doprnt.c: 1262: flag |= 0x03;
  6058  00FCEA  0E03               	movlw	3
  6059  00FCEC  1220               	iorwf	sprintf@flag,f,c
  6060                           
  6061                           ;doprnt.c: 1263: val = -val;
  6062  00FCEE  6C1E               	negf	sprintf@val,c
  6063  00FCF0  1E1F               	comf	sprintf@val+1,f,c
  6064  00FCF2  B0D8               	btfsc	status,0,c
  6065  00FCF4  2A1F               	incf	sprintf@val+1,f,c
  6066                           
  6067                           ;doprnt.c: 1264: }
  6068                           ;doprnt.c: 1266: }
  6069  00FCF6  D00D               	goto	l3254
  6070  00FCF8                     l3250:
  6071                           
  6072                           ;doprnt.c: 1268: else
  6073                           ;doprnt.c: 1273: {
  6074                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6075  00FCF8  C01C  FFD9         	movff	sprintf@ap,fsr2l
  6076  00FCFC  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  6077  00FD00  CFDE F01E          	movff	postinc2,sprintf@val
  6078  00FD04  CFDD F01F          	movff	postdec2,sprintf@val+1
  6079  00FD08  0E02               	movlw	2
  6080  00FD0A  261C               	addwf	sprintf@ap,f,c
  6081  00FD0C  0E00               	movlw	0
  6082  00FD0E  221D               	addwfc	sprintf@ap+1,f,c
  6083  00FD10  D000               	goto	l3254
  6084  00FD12                     l3254:
  6085                           
  6086                           ;doprnt.c: 1287: }
  6087                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6088  00FD12  0E01               	movlw	1
  6089  00FD14  6E23               	movwf	sprintf@c,c
  6090  00FD16                     l3256:
  6091  00FD16  0E05               	movlw	5
  6092  00FD18  1823               	xorwf	sprintf@c,w,c
  6093  00FD1A  B4D8               	btfsc	status,2,c
  6094  00FD1C  D016               	goto	l3268
  6095  00FD1E  D001               	goto	l3260
  6096  00FD20  D014               	goto	l3268
  6097  00FD22                     l3260:
  6098                           
  6099                           ;doprnt.c: 1306: if(val < dpowers[c])
  6100  00FD22  5023               	movf	sprintf@c,w,c
  6101  00FD24  0D02               	mullw	2
  6102  00FD26  0EBB               	movlw	low _dpowers
  6103  00FD28  24F3               	addwf	prodl,w,c
  6104  00FD2A  6EF6               	movwf	tblptrl,c
  6105  00FD2C  0EFE               	movlw	high _dpowers
  6106  00FD2E  20F4               	addwfc	prodh,w,c
  6107  00FD30  6EF7               	movwf	tblptrh,c
  6108  00FD32                     	if	0	;There are less than 3 active tblptr bytes
  6109  00FD32                     	endif
  6110  00FD32  0009               	tblrd		*+
  6111  00FD34  50F5               	movf	tablat,w,c
  6112  00FD36  5C1E               	subwf	sprintf@val,w,c
  6113  00FD38  0009               	tblrd		*+
  6114  00FD3A  50F5               	movf	tablat,w,c
  6115  00FD3C  581F               	subwfb	sprintf@val+1,w,c
  6116  00FD3E  A0D8               	btfss	status,0,c
  6117  00FD40  D004               	goto	l3268
  6118  00FD42  D001               	goto	l3264
  6119                           
  6120                           ;doprnt.c: 1307: break;
  6121  00FD44  D002               	goto	l3268
  6122  00FD46                     l3264:
  6123  00FD46  2A23               	incf	sprintf@c,f,c
  6124  00FD48  D7E6               	goto	l3256
  6125  00FD4A                     l3268:
  6126                           
  6127                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6128  00FD4A  5021               	movf	sprintf@width,w,c
  6129  00FD4C  1022               	iorwf	sprintf@width+1,w,c
  6130  00FD4E  B4D8               	btfsc	status,2,c
  6131  00FD50  D00A               	goto	l3274
  6132  00FD52  C020  F017         	movff	sprintf@flag,??_sprintf
  6133  00FD56  0E03               	movlw	3
  6134  00FD58  1617               	andwf	??_sprintf,f,c
  6135  00FD5A  B4D8               	btfsc	status,2,c
  6136  00FD5C  D004               	goto	l3274
  6137                           
  6138                           ;doprnt.c: 1346: width--;
  6139  00FD5E  0621               	decf	sprintf@width,f,c
  6140  00FD60  A0D8               	btfss	status,0,c
  6141  00FD62  0622               	decf	sprintf@width+1,f,c
  6142  00FD64  D000               	goto	l3274
  6143  00FD66                     l3274:
  6144                           
  6145                           ;doprnt.c: 1381: if(width > c)
  6146  00FD66  0E80               	movlw	128
  6147  00FD68  BE23               	btfsc	sprintf@c,7,c
  6148  00FD6A  0E7F               	movlw	127
  6149  00FD6C  6E17               	movwf	??_sprintf& (0+255),c
  6150  00FD6E  5021               	movf	sprintf@width,w,c
  6151  00FD70  5C23               	subwf	sprintf@c,w,c
  6152  00FD72  5022               	movf	sprintf@width+1,w,c
  6153  00FD74  0A80               	xorlw	128
  6154  00FD76  5817               	subwfb	??_sprintf& (0+255),w,c
  6155  00FD78  B0D8               	btfsc	status,0,c
  6156  00FD7A  D007               	goto	l3278
  6157                           
  6158                           ;doprnt.c: 1382: width -= c;
  6159  00FD7C  5023               	movf	sprintf@c,w,c
  6160  00FD7E  5E21               	subwf	sprintf@width,f,c
  6161  00FD80  0E00               	movlw	0
  6162  00FD82  BE23               	btfsc	sprintf@c,7,c
  6163  00FD84  0EFF               	movlw	255
  6164  00FD86  5A22               	subwfb	sprintf@width+1,f,c
  6165  00FD88  D005               	goto	l3280
  6166  00FD8A                     l3278:
  6167                           
  6168                           ;doprnt.c: 1383: else
  6169                           ;doprnt.c: 1384: width = 0;
  6170  00FD8A  0E00               	movlw	0
  6171  00FD8C  6E22               	movwf	sprintf@width+1,c
  6172  00FD8E  0E00               	movlw	0
  6173  00FD90  6E21               	movwf	sprintf@width,c
  6174  00FD92  D000               	goto	l3280
  6175  00FD94                     l3280:
  6176                           
  6177                           ;doprnt.c: 1387: if(flag & 0x04) {
  6178  00FD94  A420               	btfss	sprintf@flag,2,c
  6179  00FD96  D024               	goto	l3296
  6180                           
  6181                           ;doprnt.c: 1392: if(flag & 0x03)
  6182  00FD98  C020  F017         	movff	sprintf@flag,??_sprintf
  6183  00FD9C  0E03               	movlw	3
  6184  00FD9E  1617               	andwf	??_sprintf,f,c
  6185  00FDA0  B4D8               	btfsc	status,2,c
  6186  00FDA2  D009               	goto	l3288
  6187                           
  6188                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  6189  00FDA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6190  00FDA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6191  00FDAC  0E2D               	movlw	45
  6192  00FDAE  6EDF               	movwf	indf2,c
  6193  00FDB0  4A0D               	infsnz	sprintf@sp,f,c
  6194  00FDB2  2A0E               	incf	sprintf@sp+1,f,c
  6195  00FDB4  D000               	goto	l3288
  6196  00FDB6                     l3288:
  6197                           
  6198                           ;doprnt.c: 1415: if(width)
  6199  00FDB6  5021               	movf	sprintf@width,w,c
  6200  00FDB8  1022               	iorwf	sprintf@width+1,w,c
  6201  00FDBA  B4D8               	btfsc	status,2,c
  6202  00FDBC  D035               	goto	l3310
  6203  00FDBE                     l3290:
  6204                           
  6205                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6206  00FDBE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6207  00FDC2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6208  00FDC6  0E30               	movlw	48
  6209  00FDC8  6EDF               	movwf	indf2,c
  6210  00FDCA  4A0D               	infsnz	sprintf@sp,f,c
  6211  00FDCC  2A0E               	incf	sprintf@sp+1,f,c
  6212                           
  6213                           ;doprnt.c: 1418: while(--width);
  6214  00FDCE  0621               	decf	sprintf@width,f,c
  6215  00FDD0  A0D8               	btfss	status,0,c
  6216  00FDD2  0622               	decf	sprintf@width+1,f,c
  6217  00FDD4  5021               	movf	sprintf@width,w,c
  6218  00FDD6  1022               	iorwf	sprintf@width+1,w,c
  6219  00FDD8  B4D8               	btfsc	status,2,c
  6220  00FDDA  D026               	goto	l3310
  6221  00FDDC  D7F0               	goto	l3290
  6222                           
  6223                           ;doprnt.c: 1420: } else
  6224  00FDDE  D024               	goto	l3310
  6225  00FDE0                     l3296:
  6226                           
  6227                           ;doprnt.c: 1422: {
  6228                           ;doprnt.c: 1424: if(width
  6229                           ;doprnt.c: 1428: )
  6230  00FDE0  5021               	movf	sprintf@width,w,c
  6231  00FDE2  1022               	iorwf	sprintf@width+1,w,c
  6232  00FDE4  B4D8               	btfsc	status,2,c
  6233  00FDE6  D011               	goto	l3304
  6234  00FDE8                     l3298:
  6235                           
  6236                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6237  00FDE8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6238  00FDEC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6239  00FDF0  0E20               	movlw	32
  6240  00FDF2  6EDF               	movwf	indf2,c
  6241  00FDF4  4A0D               	infsnz	sprintf@sp,f,c
  6242  00FDF6  2A0E               	incf	sprintf@sp+1,f,c
  6243                           
  6244                           ;doprnt.c: 1431: while(--width);
  6245  00FDF8  0621               	decf	sprintf@width,f,c
  6246  00FDFA  A0D8               	btfss	status,0,c
  6247  00FDFC  0622               	decf	sprintf@width+1,f,c
  6248  00FDFE  5021               	movf	sprintf@width,w,c
  6249  00FE00  1022               	iorwf	sprintf@width+1,w,c
  6250  00FE02  B4D8               	btfsc	status,2,c
  6251  00FE04  D002               	goto	l3304
  6252  00FE06  D7F0               	goto	l3298
  6253  00FE08  D000               	goto	l3304
  6254  00FE0A                     l3304:
  6255                           
  6256                           ;doprnt.c: 1438: if(flag & 0x03)
  6257  00FE0A  C020  F017         	movff	sprintf@flag,??_sprintf
  6258  00FE0E  0E03               	movlw	3
  6259  00FE10  1617               	andwf	??_sprintf,f,c
  6260  00FE12  B4D8               	btfsc	status,2,c
  6261  00FE14  D009               	goto	l3310
  6262                           
  6263                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6264  00FE16  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6265  00FE1A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6266  00FE1E  0E2D               	movlw	45
  6267  00FE20  6EDF               	movwf	indf2,c
  6268  00FE22  4A0D               	infsnz	sprintf@sp,f,c
  6269  00FE24  2A0E               	incf	sprintf@sp+1,f,c
  6270  00FE26  D000               	goto	l3310
  6271  00FE28                     l3310:
  6272                           
  6273                           ;doprnt.c: 1469: }
  6274                           ;doprnt.c: 1472: prec = c;
  6275  00FE28  C023  F01B         	movff	sprintf@c,sprintf@prec
  6276                           
  6277                           ;doprnt.c: 1474: while(prec--) {
  6278  00FE2C  D02A               	goto	l3318
  6279  00FE2E                     l3312:
  6280                           
  6281                           ;doprnt.c: 1478: {
  6282                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6283  00FE2E  501B               	movf	sprintf@prec,w,c
  6284  00FE30  0D02               	mullw	2
  6285  00FE32  0EBB               	movlw	low _dpowers
  6286  00FE34  24F3               	addwf	prodl,w,c
  6287  00FE36  6EF6               	movwf	tblptrl,c
  6288  00FE38  0EFE               	movlw	high _dpowers
  6289  00FE3A  20F4               	addwfc	prodh,w,c
  6290  00FE3C  6EF7               	movwf	tblptrh,c
  6291  00FE3E                     	if	0	;There are less than 3 active tblptr bytes
  6292  00FE3E                     	endif
  6293  00FE3E  0009               	tblrd		*+
  6294  00FE40  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6295  00FE44  000A               	tblrd		*-
  6296  00FE46  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6297  00FE4A  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  6298  00FE4E  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  6299  00FE52  EC81  F072         	call	___lwdiv	;wreg free
  6300  00FE56  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6301  00FE5A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6302  00FE5E  0E00               	movlw	0
  6303  00FE60  6E0B               	movwf	___lwmod@divisor+1,c
  6304  00FE62  0E0A               	movlw	10
  6305  00FE64  6E0A               	movwf	___lwmod@divisor,c
  6306  00FE66  EC04  F072         	call	___lwmod	;wreg free
  6307  00FE6A  5008               	movf	?___lwmod,w,c
  6308  00FE6C  0F30               	addlw	48
  6309  00FE6E  6E23               	movwf	sprintf@c,c
  6310                           
  6311                           ;doprnt.c: 1523: }
  6312                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6313  00FE70  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6314  00FE74  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6315  00FE78  C023  FFDF         	movff	sprintf@c,indf2
  6316  00FE7C  4A0D               	infsnz	sprintf@sp,f,c
  6317  00FE7E  2A0E               	incf	sprintf@sp+1,f,c
  6318  00FE80  D000               	goto	l3318
  6319  00FE82                     l3318:
  6320  00FE82  061B               	decf	sprintf@prec,f,c
  6321  00FE84  281B               	incf	sprintf@prec,w,c
  6322  00FE86  B4D8               	btfsc	status,2,c
  6323  00FE88  D002               	goto	l3320
  6324  00FE8A  D7D1               	goto	l3312
  6325  00FE8C  D000               	goto	l3320
  6326  00FE8E                     l3320:
  6327  00FE8E  C00F  FFF6         	movff	sprintf@f,tblptrl
  6328  00FE92  C010  FFF7         	movff	sprintf@f+1,tblptrh
  6329  00FE96  4A0F               	infsnz	sprintf@f,f,c
  6330  00FE98  2A10               	incf	sprintf@f+1,f,c
  6331  00FE9A                     	if	0	;tblptru may be non-zero
  6332  00FE9A                     	endif
  6333  00FE9A                     	if	0	;tblptru may be non-zero
  6334  00FE9A                     	endif
  6335  00FE9A  0008               	tblrd		*
  6336  00FE9C  CFF5 F023          	movff	tablat,sprintf@c
  6337  00FEA0  5023               	movf	sprintf@c,w,c
  6338  00FEA2  B4D8               	btfsc	status,2,c
  6339  00FEA4  D002               	goto	l3322
  6340  00FEA6  D692               	goto	l3208
  6341  00FEA8  D000               	goto	l3322
  6342  00FEAA                     l3322:
  6343                           
  6344                           ;doprnt.c: 1538: *sp = 0;
  6345  00FEAA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  6346  00FEAE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  6347  00FEB2  0E00               	movlw	0
  6348  00FEB4  6EDF               	movwf	indf2,c
  6349  00FEB6  0012               	return	
  6350                           
  6351                           ;doprnt.c: 1540: return 0;
  6352                           ;	Return value of _sprintf is never used
  6353  00FEB8  0012               	return		;funcret
  6354  00FEBA                     __end_of_sprintf:
  6355                           	opt stack 0
  6356                           tosu	equ	0xFFF
  6357                           tosh	equ	0xFFE
  6358                           tosl	equ	0xFFD
  6359                           pclath	equ	0xFFA
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           postinc1	equ	0xFE6
  6369                           postdec1	equ	0xFE5
  6370                           fsr1h	equ	0xFE2
  6371                           fsr1l	equ	0xFE1
  6372                           indf2	equ	0xFDF
  6373                           postinc2	equ	0xFDE
  6374                           postdec2	equ	0xFDD
  6375                           plusw2	equ	0xFDB
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _isdigit *****************
  6381 ;; Defined at:
  6382 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  c               1    wreg     unsigned char 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  c               1    2[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;		None               void
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6399 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6400 ;;Total ram usage:        3 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; This function calls:
  6403 ;;		Nothing
  6404 ;; This function is called by:
  6405 ;;		_sprintf
  6406 ;;		_atoi
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           	psect	text35
  6411  00E0E6                     __ptext35:
  6412                           	opt stack 0
  6413  00E0E6                     _isdigit:
  6414                           	opt stack 27
  6415                           
  6416                           ;incstack = 0
  6417                           ;isdigit@c stored from wreg
  6418  00E0E6  6E03               	movwf	isdigit@c,c
  6419  00E0E8  0E00               	movlw	0
  6420  00E0EA  6E02               	movwf	_isdigit$2543,c
  6421  00E0EC  0E3A               	movlw	58
  6422  00E0EE  6003               	cpfslt	isdigit@c,c
  6423  00E0F0  D006               	goto	l3098
  6424  00E0F2  0E2F               	movlw	47
  6425  00E0F4  6403               	cpfsgt	isdigit@c,c
  6426  00E0F6  D003               	goto	l3098
  6427  00E0F8  0E01               	movlw	1
  6428  00E0FA  6E02               	movwf	_isdigit$2543,c
  6429  00E0FC  D000               	goto	l3098
  6430  00E0FE                     l3098:
  6431  00E0FE  C002  F001         	movff	_isdigit$2543,??_isdigit
  6432  00E102  3001               	rrcf	??_isdigit,w,c
  6433  00E104  0012               	return	
  6434  00E106  0012               	return		;funcret
  6435  00E108                     __end_of_isdigit:
  6436                           	opt stack 0
  6437                           tosu	equ	0xFFF
  6438                           tosh	equ	0xFFE
  6439                           tosl	equ	0xFFD
  6440                           pclath	equ	0xFFA
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodh	equ	0xFF4
  6446                           prodl	equ	0xFF3
  6447                           postinc0	equ	0xFEE
  6448                           wreg	equ	0xFE8
  6449                           postinc1	equ	0xFE6
  6450                           postdec1	equ	0xFE5
  6451                           fsr1h	equ	0xFE2
  6452                           fsr1l	equ	0xFE1
  6453                           indf2	equ	0xFDF
  6454                           postinc2	equ	0xFDE
  6455                           postdec2	equ	0xFDD
  6456                           plusw2	equ	0xFDB
  6457                           fsr2h	equ	0xFDA
  6458                           fsr2l	equ	0xFD9
  6459                           status	equ	0xFD8
  6460                           
  6461 ;; *************** function ___wmul *****************
  6462 ;; Defined at:
  6463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  multiplier      2    0[COMRAM] unsigned int 
  6466 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  product         2    4[COMRAM] unsigned int 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  2    0[COMRAM] unsigned int 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, prodl, prodh
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6481 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6482 ;;Total ram usage:        6 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_sprintf
  6488 ;;		_atoi
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text36
  6493  00E150                     __ptext36:
  6494                           	opt stack 0
  6495  00E150                     ___wmul:
  6496                           	opt stack 27
  6497                           
  6498                           ;incstack = 0
  6499  00E150  5001               	movf	___wmul@multiplier,w,c
  6500  00E152  0203               	mulwf	___wmul@multiplicand,c
  6501  00E154  CFF3 F005          	movff	prodl,___wmul@product
  6502  00E158  CFF4 F006          	movff	prodh,___wmul@product+1
  6503  00E15C  5001               	movf	___wmul@multiplier,w,c
  6504  00E15E  0204               	mulwf	___wmul@multiplicand+1,c
  6505  00E160  50F3               	movf	prodl,w,c
  6506  00E162  2606               	addwf	___wmul@product+1,f,c
  6507  00E164  5002               	movf	___wmul@multiplier+1,w,c
  6508  00E166  0203               	mulwf	___wmul@multiplicand,c
  6509  00E168  50F3               	movf	prodl,w,c
  6510  00E16A  2606               	addwf	___wmul@product+1,f,c
  6511  00E16C  C005  F001         	movff	___wmul@product,?___wmul
  6512  00E170  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6513  00E174  0012               	return	
  6514  00E176  0012               	return		;funcret
  6515  00E178                     __end_of___wmul:
  6516                           	opt stack 0
  6517                           tosu	equ	0xFFF
  6518                           tosh	equ	0xFFE
  6519                           tosl	equ	0xFFD
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           postinc0	equ	0xFEE
  6528                           wreg	equ	0xFE8
  6529                           postinc1	equ	0xFE6
  6530                           postdec1	equ	0xFE5
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           plusw2	equ	0xFDB
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function ___lwmod *****************
  6542 ;; Defined at:
  6543 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  dividend        2    7[COMRAM] unsigned int 
  6546 ;;  divisor         2    9[COMRAM] unsigned int 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  counter         1   11[COMRAM] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  2    7[COMRAM] unsigned int 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6559 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6561 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6562 ;;Total ram usage:        5 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_sprintf
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text37
  6572  00E408                     __ptext37:
  6573                           	opt stack 0
  6574  00E408                     ___lwmod:
  6575                           	opt stack 27
  6576                           
  6577                           ;incstack = 0
  6578  00E408  500A               	movf	___lwmod@divisor,w,c
  6579  00E40A  100B               	iorwf	___lwmod@divisor+1,w,c
  6580  00E40C  B4D8               	btfsc	status,2,c
  6581  00E40E  D01D               	goto	l1457
  6582  00E410  0E01               	movlw	1
  6583  00E412  6E0C               	movwf	___lwmod@counter,c
  6584  00E414  D005               	goto	l3188
  6585  00E416                     l3186:
  6586  00E416  90D8               	bcf	status,0,c
  6587  00E418  360A               	rlcf	___lwmod@divisor,f,c
  6588  00E41A  360B               	rlcf	___lwmod@divisor+1,f,c
  6589  00E41C  2A0C               	incf	___lwmod@counter,f,c
  6590  00E41E  D000               	goto	l3188
  6591  00E420                     l3188:
  6592  00E420  BE0B               	btfsc	___lwmod@divisor+1,7,c
  6593  00E422  D002               	goto	l3190
  6594  00E424  D7F8               	goto	l3186
  6595  00E426  D000               	goto	l3190
  6596  00E428                     l3190:
  6597  00E428  500A               	movf	___lwmod@divisor,w,c
  6598  00E42A  5C08               	subwf	___lwmod@dividend,w,c
  6599  00E42C  500B               	movf	___lwmod@divisor+1,w,c
  6600  00E42E  5809               	subwfb	___lwmod@dividend+1,w,c
  6601  00E430  A0D8               	btfss	status,0,c
  6602  00E432  D005               	goto	l3194
  6603  00E434  500A               	movf	___lwmod@divisor,w,c
  6604  00E436  5E08               	subwf	___lwmod@dividend,f,c
  6605  00E438  500B               	movf	___lwmod@divisor+1,w,c
  6606  00E43A  5A09               	subwfb	___lwmod@dividend+1,f,c
  6607  00E43C  D000               	goto	l3194
  6608  00E43E                     l3194:
  6609  00E43E  90D8               	bcf	status,0,c
  6610  00E440  320B               	rrcf	___lwmod@divisor+1,f,c
  6611  00E442  320A               	rrcf	___lwmod@divisor,f,c
  6612  00E444  2E0C               	decfsz	___lwmod@counter,f,c
  6613  00E446  D7F0               	goto	l3190
  6614  00E448  D000               	goto	l1457
  6615  00E44A                     l1457:
  6616  00E44A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6617  00E44E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6618  00E452  0012               	return		;funcret
  6619  00E454                     __end_of___lwmod:
  6620                           	opt stack 0
  6621                           tosu	equ	0xFFF
  6622                           tosh	equ	0xFFE
  6623                           tosl	equ	0xFFD
  6624                           pclath	equ	0xFFA
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postinc1	equ	0xFE6
  6634                           postdec1	equ	0xFE5
  6635                           fsr1h	equ	0xFE2
  6636                           fsr1l	equ	0xFE1
  6637                           indf2	equ	0xFDF
  6638                           postinc2	equ	0xFDE
  6639                           postdec2	equ	0xFDD
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function ___lwdiv *****************
  6646 ;; Defined at:
  6647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  dividend        2    0[COMRAM] unsigned int 
  6650 ;;  divisor         2    2[COMRAM] unsigned int 
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  quotient        2    4[COMRAM] unsigned int 
  6653 ;;  counter         1    6[COMRAM] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  2    0[COMRAM] unsigned int 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6664 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6667 ;;Total ram usage:        7 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_sprintf
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text38
  6677  00E502                     __ptext38:
  6678                           	opt stack 0
  6679  00E502                     ___lwdiv:
  6680                           	opt stack 27
  6681                           
  6682                           ;incstack = 0
  6683  00E502  0E00               	movlw	0
  6684  00E504  6E06               	movwf	___lwdiv@quotient+1,c
  6685  00E506  0E00               	movlw	0
  6686  00E508  6E05               	movwf	___lwdiv@quotient,c
  6687  00E50A  5003               	movf	___lwdiv@divisor,w,c
  6688  00E50C  1004               	iorwf	___lwdiv@divisor+1,w,c
  6689  00E50E  B4D8               	btfsc	status,2,c
  6690  00E510  D021               	goto	l1447
  6691  00E512  0E01               	movlw	1
  6692  00E514  6E07               	movwf	___lwdiv@counter,c
  6693  00E516  D005               	goto	l3168
  6694  00E518                     l3166:
  6695  00E518  90D8               	bcf	status,0,c
  6696  00E51A  3603               	rlcf	___lwdiv@divisor,f,c
  6697  00E51C  3604               	rlcf	___lwdiv@divisor+1,f,c
  6698  00E51E  2A07               	incf	___lwdiv@counter,f,c
  6699  00E520  D000               	goto	l3168
  6700  00E522                     l3168:
  6701  00E522  BE04               	btfsc	___lwdiv@divisor+1,7,c
  6702  00E524  D002               	goto	l3170
  6703  00E526  D7F8               	goto	l3166
  6704  00E528  D000               	goto	l3170
  6705  00E52A                     l3170:
  6706  00E52A  90D8               	bcf	status,0,c
  6707  00E52C  3605               	rlcf	___lwdiv@quotient,f,c
  6708  00E52E  3606               	rlcf	___lwdiv@quotient+1,f,c
  6709  00E530  5003               	movf	___lwdiv@divisor,w,c
  6710  00E532  5C01               	subwf	___lwdiv@dividend,w,c
  6711  00E534  5004               	movf	___lwdiv@divisor+1,w,c
  6712  00E536  5802               	subwfb	___lwdiv@dividend+1,w,c
  6713  00E538  A0D8               	btfss	status,0,c
  6714  00E53A  D006               	goto	l3178
  6715  00E53C  5003               	movf	___lwdiv@divisor,w,c
  6716  00E53E  5E01               	subwf	___lwdiv@dividend,f,c
  6717  00E540  5004               	movf	___lwdiv@divisor+1,w,c
  6718  00E542  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6719  00E544  8005               	bsf	___lwdiv@quotient,0,c
  6720  00E546  D000               	goto	l3178
  6721  00E548                     l3178:
  6722  00E548  90D8               	bcf	status,0,c
  6723  00E54A  3204               	rrcf	___lwdiv@divisor+1,f,c
  6724  00E54C  3203               	rrcf	___lwdiv@divisor,f,c
  6725  00E54E  2E07               	decfsz	___lwdiv@counter,f,c
  6726  00E550  D7EC               	goto	l3170
  6727  00E552  D000               	goto	l1447
  6728  00E554                     l1447:
  6729  00E554  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6730  00E558  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6731  00E55C  0012               	return		;funcret
  6732  00E55E                     __end_of___lwdiv:
  6733                           	opt stack 0
  6734                           tosu	equ	0xFFF
  6735                           tosh	equ	0xFFE
  6736                           tosl	equ	0xFFD
  6737                           pclath	equ	0xFFA
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           postinc1	equ	0xFE6
  6747                           postdec1	equ	0xFE5
  6748                           fsr1h	equ	0xFE2
  6749                           fsr1l	equ	0xFE1
  6750                           indf2	equ	0xFDF
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           plusw2	equ	0xFDB
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _actualizar_password *****************
  6759 ;; Defined at:
  6760 ;;		line 65 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  confirmar       2    0[COMRAM] PTR int 
  6763 ;;		 -> cambiar_password@confirmar(2), 
  6764 ;;  valor           1    2[COMRAM] unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  j               2   10[COMRAM] int 
  6767 ;;  j               2    8[COMRAM] int 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;		None               void
  6770 ;; Registers used:
  6771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6777 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6778 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;Total ram usage:       12 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    1
  6784 ;; This function calls:
  6785 ;;		_restaurar_comando
  6786 ;; This function is called by:
  6787 ;;		_cambiar_password
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text39
  6792  00F606                     __ptext39:
  6793                           	opt stack 0
  6794  00F606                     _actualizar_password:
  6795                           	opt stack 28
  6796                           
  6797                           ;alarma.c: 67: *confirmar=1;
  6798                           
  6799                           ;incstack = 0
  6800  00F606  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6801  00F60A  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6802  00F60E  0E01               	movlw	1
  6803  00F610  6EDE               	movwf	postinc2,c
  6804  00F612  0E00               	movlw	0
  6805  00F614  6EDD               	movwf	postdec2,c
  6806                           
  6807                           ;alarma.c: 68: int j=0;
  6808  00F616  0E00               	movlw	0
  6809  00F618  6E0A               	movwf	actualizar_password@j+1,c
  6810  00F61A  0E00               	movlw	0
  6811  00F61C  6E09               	movwf	actualizar_password@j,c
  6812                           
  6813                           ;alarma.c: 70: if ( *confirmar == 1 && tamanio_new_password - 6 - 1 < 6){
  6814  00F61E  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6815  00F622  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6816  00F626  04DE               	decf	postinc2,w,c
  6817  00F628  10DE               	iorwf	postinc2,w,c
  6818  00F62A  A4D8               	btfss	status,2,c
  6819  00F62C  D036               	goto	l3668
  6820  00F62E  0EF9               	movlw	249
  6821  00F630  6E04               	movwf	??_actualizar_password& (0+255),c
  6822  00F632  0EFF               	movlw	255
  6823  00F634  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6824  00F636  C047  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6825  00F63A  C048  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6826  00F63E  5004               	movf	??_actualizar_password,w,c
  6827  00F640  2606               	addwf	??_actualizar_password+2,f,c
  6828  00F642  5005               	movf	??_actualizar_password+1,w,c
  6829  00F644  2207               	addwfc	??_actualizar_password+3,f,c
  6830  00F646  BE07               	btfsc	??_actualizar_password+3,7,c
  6831  00F648  D006               	goto	l3662
  6832  00F64A  5007               	movf	??_actualizar_password+3,w,c
  6833  00F64C  E126               	bnz	l3668
  6834  00F64E  0E06               	movlw	6
  6835  00F650  5C06               	subwf	??_actualizar_password+2,w,c
  6836  00F652  B0D8               	btfsc	status,0,c
  6837  00F654  D022               	goto	l3668
  6838  00F656                     l3662:
  6839                           
  6840                           ;alarma.c: 71: if (new_password[tamanio_new_password - 6 - 1] != valor)
  6841  00F656  0EF9               	movlw	249
  6842  00F658  6E04               	movwf	??_actualizar_password& (0+255),c
  6843  00F65A  0EFF               	movlw	255
  6844  00F65C  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6845  00F65E  C047  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6846  00F662  C048  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6847  00F666  5004               	movf	??_actualizar_password,w,c
  6848  00F668  2606               	addwf	??_actualizar_password+2,f,c
  6849  00F66A  5005               	movf	??_actualizar_password+1,w,c
  6850  00F66C  2207               	addwfc	??_actualizar_password+3,f,c
  6851  00F66E  0E77               	movlw	low _new_password
  6852  00F670  2406               	addwf	??_actualizar_password+2,w,c
  6853  00F672  6ED9               	movwf	fsr2l,c
  6854  00F674  0E00               	movlw	high _new_password
  6855  00F676  2007               	addwfc	??_actualizar_password+3,w,c
  6856  00F678  6EDA               	movwf	fsr2h,c
  6857  00F67A  5003               	movf	actualizar_password@valor,w,c
  6858  00F67C  18DE               	xorwf	postinc2,w,c
  6859  00F67E  B4D8               	btfsc	status,2,c
  6860  00F680  D009               	goto	l3666
  6861                           
  6862                           ;alarma.c: 72: *confirmar = 0;
  6863  00F682  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6864  00F686  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6865  00F68A  0E00               	movlw	0
  6866  00F68C  6EDE               	movwf	postinc2,c
  6867  00F68E  0E00               	movlw	0
  6868  00F690  6EDD               	movwf	postdec2,c
  6869  00F692  D003               	goto	l3668
  6870  00F694                     l3666:
  6871                           
  6872                           ;alarma.c: 74: else
  6873                           ;alarma.c: 75: tamanio_new_password++;
  6874  00F694  4A47               	infsnz	_tamanio_new_password,f,c
  6875  00F696  2A48               	incf	_tamanio_new_password+1,f,c
  6876  00F698  D000               	goto	l3668
  6877  00F69A                     l3668:
  6878                           
  6879                           ;alarma.c: 76: }
  6880                           ;alarma.c: 78: if (*confirmar && tamanio_new_password - 6 - 1 >= 6){
  6881  00F69A  C001  FFD9         	movff	actualizar_password@confirmar,fsr2l
  6882  00F69E  C002  FFDA         	movff	actualizar_password@confirmar+1,fsr2h
  6883  00F6A2  50DE               	movf	postinc2,w,c
  6884  00F6A4  10DE               	iorwf	postinc2,w,c
  6885  00F6A6  B4D8               	btfsc	status,2,c
  6886  00F6A8  0012               	return	
  6887  00F6AA  0EF9               	movlw	249
  6888  00F6AC  6E04               	movwf	??_actualizar_password& (0+255),c
  6889  00F6AE  0EFF               	movlw	255
  6890  00F6B0  6E05               	movwf	(??_actualizar_password+1)& (0+255),c
  6891  00F6B2  C047  F006         	movff	_tamanio_new_password,??_actualizar_password+2
  6892  00F6B6  C048  F007         	movff	_tamanio_new_password+1,??_actualizar_password+3
  6893  00F6BA  5004               	movf	??_actualizar_password,w,c
  6894  00F6BC  2606               	addwf	??_actualizar_password+2,f,c
  6895  00F6BE  5005               	movf	??_actualizar_password+1,w,c
  6896  00F6C0  2207               	addwfc	??_actualizar_password+3,f,c
  6897  00F6C2  BE07               	btfsc	??_actualizar_password+3,7,c
  6898  00F6C4  0012               	return	
  6899  00F6C6  5007               	movf	??_actualizar_password+3,w,c
  6900  00F6C8  E104               	bnz	u3130
  6901  00F6CA  0E06               	movlw	6
  6902  00F6CC  5C06               	subwf	??_actualizar_password+2,w,c
  6903  00F6CE  A0D8               	btfss	status,0,c
  6904  00F6D0  0012               	return	
  6905  00F6D2                     u3130:
  6906                           
  6907                           ;alarma.c: 80: for (int j=0; j < 6; j++ )
  6908  00F6D2  0E00               	movlw	0
  6909  00F6D4  6E0C               	movwf	actualizar_password@j_1538+1,c
  6910  00F6D6  0E00               	movlw	0
  6911  00F6D8  6E0B               	movwf	actualizar_password@j_1538,c
  6912  00F6DA                     l3674:
  6913  00F6DA  BE0C               	btfsc	actualizar_password@j_1538+1,7,c
  6914  00F6DC  D008               	goto	l3678
  6915  00F6DE  500C               	movf	actualizar_password@j_1538+1,w,c
  6916  00F6E0  E118               	bnz	l3684
  6917  00F6E2  0E06               	movlw	6
  6918  00F6E4  5C0B               	subwf	actualizar_password@j_1538,w,c
  6919  00F6E6  B0D8               	btfsc	status,0,c
  6920  00F6E8  D014               	goto	l3684
  6921  00F6EA  D001               	goto	l3678
  6922  00F6EC  D012               	goto	l3684
  6923  00F6EE                     l3678:
  6924                           
  6925                           ;alarma.c: 81: password[j] = new_password[j];
  6926  00F6EE  0E77               	movlw	low _new_password
  6927  00F6F0  240B               	addwf	actualizar_password@j_1538,w,c
  6928  00F6F2  6ED9               	movwf	fsr2l,c
  6929  00F6F4  0E00               	movlw	high _new_password
  6930  00F6F6  200C               	addwfc	actualizar_password@j_1538+1,w,c
  6931  00F6F8  6EDA               	movwf	fsr2h,c
  6932  00F6FA  0EDF               	movlw	low _password
  6933  00F6FC  240B               	addwf	actualizar_password@j_1538,w,c
  6934  00F6FE  6EE1               	movwf	fsr1l,c
  6935  00F700  0E00               	movlw	high _password
  6936  00F702  200C               	addwfc	actualizar_password@j_1538+1,w,c
  6937  00F704  6EE2               	movwf	fsr1h,c
  6938  00F706  CFDF FFE7          	movff	indf2,indf1
  6939  00F70A  4A0B               	infsnz	actualizar_password@j_1538,f,c
  6940  00F70C  2A0C               	incf	actualizar_password@j_1538+1,f,c
  6941  00F70E  D7E5               	goto	l3674
  6942  00F710  D000               	goto	l3684
  6943  00F712                     l3684:
  6944                           
  6945                           ;alarma.c: 83: restaurar_comando();
  6946  00F712  EC06  F070         	call	_restaurar_comando	;wreg free
  6947                           
  6948                           ;alarma.c: 85: new_password[0] = 0;
  6949  00F716  0E00               	movlw	0
  6950  00F718  0100               	movlb	0	; () banked
  6951  00F71A  6F77               	movwf	_new_password& (0+255),b
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;alarma.c: 86: temporal[0] = 0;
  6955  00F71C  0E00               	movlw	0
  6956  00F71E  0100               	movlb	0	; () banked
  6957  00F720  6F7E               	movwf	_temporal& (0+255),b
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;alarma.c: 88: tamanio_new_password = 0;
  6961  00F722  0E00               	movlw	0
  6962  00F724  6E48               	movwf	_tamanio_new_password+1,c
  6963  00F726  0E00               	movlw	0
  6964  00F728  6E47               	movwf	_tamanio_new_password,c
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;alarma.c: 89: tamanio_password = 0;
  6968  00F72A  0E00               	movlw	0
  6969  00F72C  6E4A               	movwf	_tamanio_password+1,c
  6970  00F72E  0E00               	movlw	0
  6971  00F730  6E49               	movwf	_tamanio_password,c
  6972  00F732  0012               	return	
  6973                           
  6974                           ; BSR set to: 0
  6975  00F734  0012               	return		;funcret
  6976  00F736                     __end_of_actualizar_password:
  6977                           	opt stack 0
  6978                           tosu	equ	0xFFF
  6979                           tosh	equ	0xFFE
  6980                           tosl	equ	0xFFD
  6981                           pclath	equ	0xFFA
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           indf1	equ	0xFE7
  6991                           postinc1	equ	0xFE6
  6992                           postdec1	equ	0xFE5
  6993                           fsr1h	equ	0xFE2
  6994                           fsr1l	equ	0xFE1
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           plusw2	equ	0xFDB
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _restaurar_comando *****************
  7004 ;; Defined at:
  7005 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;		None
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;		None
  7010 ;; Return value:  Size  Location     Type
  7011 ;;		None               void
  7012 ;; Registers used:
  7013 ;;		wreg, status,2
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7023 ;;Total ram usage:        0 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_main
  7029 ;;		_actualiza_dia
  7030 ;;		_actualizar_hora
  7031 ;;		_actualizar_password
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text40
  7036  00E00C                     __ptext40:
  7037                           	opt stack 0
  7038  00E00C                     _restaurar_comando:
  7039                           	opt stack 30
  7040                           
  7041                           ;teclado.c: 11: tamanio_comando = 0;
  7042                           
  7043                           ;incstack = 0
  7044  00E00C  0E00               	movlw	0
  7045  00E00E  0100               	movlb	0	; () banked
  7046  00E010  6FAF               	movwf	(_tamanio_comando+1)& (0+255),b
  7047  00E012  0E00               	movlw	0
  7048  00E014  6FAE               	movwf	_tamanio_comando& (0+255),b
  7049                           
  7050                           ;teclado.c: 13: comando[0] = 'x';
  7051  00E016  0E78               	movlw	120
  7052  00E018  0100               	movlb	0	; () banked
  7053  00E01A  6FEA               	movwf	_comando& (0+255),b
  7054                           
  7055                           ;teclado.c: 14: comando[1] = 'x';
  7056  00E01C  0E78               	movlw	120
  7057  00E01E  0100               	movlb	0	; () banked
  7058  00E020  6FEB               	movwf	(_comando+1)& (0+255),b
  7059                           
  7060                           ;teclado.c: 15: comando[2] = 0;
  7061  00E022  0E00               	movlw	0
  7062  00E024  0100               	movlb	0	; () banked
  7063  00E026  6FEC               	movwf	(_comando+2)& (0+255),b
  7064                           
  7065                           ; BSR set to: 0
  7066  00E028  0012               	return		;funcret
  7067  00E02A                     __end_of_restaurar_comando:
  7068                           	opt stack 0
  7069                           tosu	equ	0xFFF
  7070                           tosh	equ	0xFFE
  7071                           tosl	equ	0xFFD
  7072                           pclath	equ	0xFFA
  7073                           tblptru	equ	0xFF8
  7074                           tblptrh	equ	0xFF7
  7075                           tblptrl	equ	0xFF6
  7076                           tablat	equ	0xFF5
  7077                           prodh	equ	0xFF4
  7078                           prodl	equ	0xFF3
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           postinc1	equ	0xFE6
  7083                           postdec1	equ	0xFE5
  7084                           fsr1h	equ	0xFE2
  7085                           fsr1l	equ	0xFE1
  7086                           indf2	equ	0xFDF
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           plusw2	equ	0xFDB
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _cambiar_horario *****************
  7095 ;; Defined at:
  7096 ;;		line 171 in file "main.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7114 ;;Total ram usage:        0 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    6
  7117 ;; This function calls:
  7118 ;;		_clear_display
  7119 ;;		_mostrar_titulo_menu
  7120 ;; This function is called by:
  7121 ;;		_main
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           	psect	text41
  7126  00E77A                     __ptext41:
  7127                           	opt stack 0
  7128  00E77A                     _cambiar_horario:
  7129                           	opt stack 24
  7130                           
  7131                           ;main.c: 173: if (tamanio_minutos != 2){
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;incstack = 0
  7135  00E77A  0E02               	movlw	2
  7136  00E77C  0100               	movlb	0	; () banked
  7137  00E77E  19DD               	xorwf	_tamanio_minutos& (0+255),w,b
  7138  00E780  0100               	movlb	0	; () banked
  7139  00E782  11DE               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  7140  00E784  B4D8               	btfsc	status,2,c
  7141  00E786  D017               	goto	l3892
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;main.c: 174: mostrar_titulo_menu("Inserte minutos:     ");
  7145  00E788  0E15               	movlw	low STR_15
  7146  00E78A  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  7147  00E78C  0EFF               	movlw	high STR_15
  7148  00E78E  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  7149  00E790  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  7150                           
  7151                           ;main.c: 175: puntero_funcion = cambiar_minutos;
  7152  00E794  0EEC               	movlw	low _cambiar_minutos
  7153  00E796  0100               	movlb	0	; () banked
  7154  00E798  6FAA               	movwf	_puntero_funcion& (0+255),b
  7155  00E79A  0EE7               	movlw	high _cambiar_minutos
  7156  00E79C  0100               	movlb	0	; () banked
  7157  00E79E  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;main.c: 176: clear_display(tamanio_minutos+1);
  7161  00E7A0  0E01               	movlw	1
  7162  00E7A2  0100               	movlb	0	; () banked
  7163  00E7A4  25DD               	addwf	_tamanio_minutos& (0+255),w,b
  7164  00E7A6  6E0B               	movwf	clear_display@pos,c
  7165  00E7A8  0E00               	movlw	0
  7166  00E7AA  0100               	movlb	0	; () banked
  7167  00E7AC  21DE               	addwfc	(_tamanio_minutos+1)& (0+255),w,b
  7168  00E7AE  6E0C               	movwf	clear_display@pos+1,c
  7169  00E7B0  EC62  F070         	call	_clear_display	;wreg free
  7170                           
  7171                           ;main.c: 178: }else if (tamanio_hora != 2){
  7172  00E7B4  0012               	return	
  7173  00E7B6                     l3892:
  7174  00E7B6  0E02               	movlw	2
  7175  00E7B8  1856               	xorwf	_tamanio_hora,w,c
  7176  00E7BA  1057               	iorwf	_tamanio_hora+1,w,c
  7177  00E7BC  B4D8               	btfsc	status,2,c
  7178  00E7BE  0012               	return	
  7179                           
  7180                           ;main.c: 179: mostrar_titulo_menu("Inserte hora:     ");
  7181  00E7C0  0E3F               	movlw	low STR_16
  7182  00E7C2  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  7183  00E7C4  0EFF               	movlw	high STR_16
  7184  00E7C6  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  7185  00E7C8  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  7186                           
  7187                           ;main.c: 180: puntero_funcion = cambiar_hora;
  7188  00E7CC  0E5E               	movlw	low _cambiar_hora
  7189  00E7CE  0100               	movlb	0	; () banked
  7190  00E7D0  6FAA               	movwf	_puntero_funcion& (0+255),b
  7191  00E7D2  0EE5               	movlw	high _cambiar_hora
  7192  00E7D4  0100               	movlb	0	; () banked
  7193  00E7D6  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;main.c: 181: clear_display(tamanio_hora+1);
  7197  00E7D8  0E01               	movlw	1
  7198  00E7DA  2456               	addwf	_tamanio_hora,w,c
  7199  00E7DC  6E0B               	movwf	clear_display@pos,c
  7200  00E7DE  0E00               	movlw	0
  7201  00E7E0  2057               	addwfc	_tamanio_hora+1,w,c
  7202  00E7E2  6E0C               	movwf	clear_display@pos+1,c
  7203  00E7E4  EC62  F070         	call	_clear_display	;wreg free
  7204  00E7E8  0012               	return	
  7205  00E7EA  0012               	return		;funcret
  7206  00E7EC                     __end_of_cambiar_horario:
  7207                           	opt stack 0
  7208                           tosu	equ	0xFFF
  7209                           tosh	equ	0xFFE
  7210                           tosl	equ	0xFFD
  7211                           pclath	equ	0xFFA
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postinc1	equ	0xFE6
  7222                           postdec1	equ	0xFE5
  7223                           fsr1h	equ	0xFE2
  7224                           fsr1l	equ	0xFE1
  7225                           indf2	equ	0xFDF
  7226                           postinc2	equ	0xFDE
  7227                           postdec2	equ	0xFDD
  7228                           plusw2	equ	0xFDB
  7229                           fsr2h	equ	0xFDA
  7230                           fsr2l	equ	0xFD9
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function _cambiar_fecha *****************
  7234 ;; Defined at:
  7235 ;;		line 151 in file "main.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;		None               void
  7242 ;; Registers used:
  7243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7253 ;;Total ram usage:        0 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    6
  7256 ;; This function calls:
  7257 ;;		_clear_display
  7258 ;;		_mostrar_titulo_menu
  7259 ;; This function is called by:
  7260 ;;		_main
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text42
  7265  00ED0A                     __ptext42:
  7266                           	opt stack 0
  7267  00ED0A                     _cambiar_fecha:
  7268                           	opt stack 24
  7269                           
  7270                           ;main.c: 153: if (tamanio_anio != 2){
  7271                           
  7272                           ;incstack = 0
  7273  00ED0A  0E02               	movlw	2
  7274  00ED0C  0100               	movlb	0	; () banked
  7275  00ED0E  19DB               	xorwf	_tamanio_anio& (0+255),w,b
  7276  00ED10  0100               	movlb	0	; () banked
  7277  00ED12  11DC               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  7278  00ED14  B4D8               	btfsc	status,2,c
  7279  00ED16  D017               	goto	l3868
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;main.c: 154: mostrar_titulo_menu("Inserte anio:     ");
  7283  00ED18  0E52               	movlw	low STR_12
  7284  00ED1A  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  7285  00ED1C  0EFF               	movlw	high STR_12
  7286  00ED1E  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  7287  00ED20  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  7288                           
  7289                           ;main.c: 155: puntero_funcion = &cambiar_anio;
  7290  00ED24  0E4E               	movlw	low _cambiar_anio
  7291  00ED26  0100               	movlb	0	; () banked
  7292  00ED28  6FAA               	movwf	_puntero_funcion& (0+255),b
  7293  00ED2A  0EE9               	movlw	high _cambiar_anio
  7294  00ED2C  0100               	movlb	0	; () banked
  7295  00ED2E  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;main.c: 156: clear_display(tamanio_anio+1);
  7299  00ED30  0E01               	movlw	1
  7300  00ED32  0100               	movlb	0	; () banked
  7301  00ED34  25DB               	addwf	_tamanio_anio& (0+255),w,b
  7302  00ED36  6E0B               	movwf	clear_display@pos,c
  7303  00ED38  0E00               	movlw	0
  7304  00ED3A  0100               	movlb	0	; () banked
  7305  00ED3C  21DC               	addwfc	(_tamanio_anio+1)& (0+255),w,b
  7306  00ED3E  6E0C               	movwf	clear_display@pos+1,c
  7307  00ED40  EC62  F070         	call	_clear_display	;wreg free
  7308                           
  7309                           ;main.c: 158: }else if (tamanio_mes != 2){
  7310  00ED44  0012               	return	
  7311  00ED46                     l3868:
  7312  00ED46  0E02               	movlw	2
  7313  00ED48  1858               	xorwf	_tamanio_mes,w,c
  7314  00ED4A  1059               	iorwf	_tamanio_mes+1,w,c
  7315  00ED4C  B4D8               	btfsc	status,2,c
  7316  00ED4E  D015               	goto	l3876
  7317                           
  7318                           ;main.c: 159: mostrar_titulo_menu("Inserte mes:     ");
  7319  00ED50  0E89               	movlw	low STR_13
  7320  00ED52  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  7321  00ED54  0EFF               	movlw	high STR_13
  7322  00ED56  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  7323  00ED58  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  7324                           
  7325                           ;main.c: 160: puntero_funcion = &cambiar_mes;
  7326  00ED5C  0E2C               	movlw	low _cambiar_mes
  7327  00ED5E  0100               	movlb	0	; () banked
  7328  00ED60  6FAA               	movwf	_puntero_funcion& (0+255),b
  7329  00ED62  0EE6               	movlw	high _cambiar_mes
  7330  00ED64  0100               	movlb	0	; () banked
  7331  00ED66  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;main.c: 161: clear_display(tamanio_mes+1);
  7335  00ED68  0E01               	movlw	1
  7336  00ED6A  2458               	addwf	_tamanio_mes,w,c
  7337  00ED6C  6E0B               	movwf	clear_display@pos,c
  7338  00ED6E  0E00               	movlw	0
  7339  00ED70  2059               	addwfc	_tamanio_mes+1,w,c
  7340  00ED72  6E0C               	movwf	clear_display@pos+1,c
  7341  00ED74  EC62  F070         	call	_clear_display	;wreg free
  7342                           
  7343                           ;main.c: 163: }else if (tamanio_dia != 2){
  7344  00ED78  0012               	return	
  7345  00ED7A                     l3876:
  7346  00ED7A  0E02               	movlw	2
  7347  00ED7C  1854               	xorwf	_tamanio_dia,w,c
  7348  00ED7E  1055               	iorwf	_tamanio_dia+1,w,c
  7349  00ED80  B4D8               	btfsc	status,2,c
  7350  00ED82  0012               	return	
  7351                           
  7352                           ;main.c: 164: mostrar_titulo_menu("Inserte dia:     ");
  7353  00ED84  0E77               	movlw	low STR_14
  7354  00ED86  6E0B               	movwf	mostrar_titulo_menu@titulo_menu,c
  7355  00ED88  0EFF               	movlw	high STR_14
  7356  00ED8A  6E0C               	movwf	mostrar_titulo_menu@titulo_menu+1,c
  7357  00ED8C  ECFA  F06F         	call	_mostrar_titulo_menu	;wreg free
  7358                           
  7359                           ;main.c: 165: puntero_funcion = &cambiar_dia;
  7360  00ED90  0EA8               	movlw	low _cambiar_dia
  7361  00ED92  0100               	movlb	0	; () banked
  7362  00ED94  6FAA               	movwf	_puntero_funcion& (0+255),b
  7363  00ED96  0EE4               	movlw	high _cambiar_dia
  7364  00ED98  0100               	movlb	0	; () banked
  7365  00ED9A  6FAB               	movwf	(_puntero_funcion+1)& (0+255),b
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;main.c: 166: clear_display(tamanio_dia+1);
  7369  00ED9C  0E01               	movlw	1
  7370  00ED9E  2454               	addwf	_tamanio_dia,w,c
  7371  00EDA0  6E0B               	movwf	clear_display@pos,c
  7372  00EDA2  0E00               	movlw	0
  7373  00EDA4  2055               	addwfc	_tamanio_dia+1,w,c
  7374  00EDA6  6E0C               	movwf	clear_display@pos+1,c
  7375  00EDA8  EC62  F070         	call	_clear_display	;wreg free
  7376  00EDAC  0012               	return	
  7377  00EDAE  0012               	return		;funcret
  7378  00EDB0                     __end_of_cambiar_fecha:
  7379                           	opt stack 0
  7380                           tosu	equ	0xFFF
  7381                           tosh	equ	0xFFE
  7382                           tosl	equ	0xFFD
  7383                           pclath	equ	0xFFA
  7384                           tblptru	equ	0xFF8
  7385                           tblptrh	equ	0xFF7
  7386                           tblptrl	equ	0xFF6
  7387                           tablat	equ	0xFF5
  7388                           prodh	equ	0xFF4
  7389                           prodl	equ	0xFF3
  7390                           postinc0	equ	0xFEE
  7391                           wreg	equ	0xFE8
  7392                           indf1	equ	0xFE7
  7393                           postinc1	equ	0xFE6
  7394                           postdec1	equ	0xFE5
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           postdec2	equ	0xFDD
  7400                           plusw2	equ	0xFDB
  7401                           fsr2h	equ	0xFDA
  7402                           fsr2l	equ	0xFD9
  7403                           status	equ	0xFD8
  7404                           
  7405 ;; *************** function _mostrar_titulo_menu *****************
  7406 ;; Defined at:
  7407 ;;		line 109 in file "main.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  titulo_menu     2   10[COMRAM] PTR const unsigned char 
  7410 ;;		 -> STR_20(23), STR_18(20), STR_17(27), STR_16(19), 
  7411 ;;		 -> STR_15(22), STR_14(18), STR_13(18), STR_12(19), 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7427 ;;Total ram usage:        2 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    5
  7430 ;; This function calls:
  7431 ;;		_lcd_gotoxy
  7432 ;;		_lcd_putrs
  7433 ;; This function is called by:
  7434 ;;		_cambiar_fecha
  7435 ;;		_cambiar_horario
  7436 ;;		_cambiar_password
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text43
  7441  00DFF4                     __ptext43:
  7442                           	opt stack 0
  7443  00DFF4                     _mostrar_titulo_menu:
  7444                           	opt stack 24
  7445                           
  7446                           ;main.c: 110: lcd_gotoxy(1,1);
  7447                           
  7448                           ;incstack = 0
  7449  00DFF4  0E01               	movlw	1
  7450  00DFF6  6E05               	movwf	lcd_gotoxy@y,c
  7451  00DFF8  0E01               	movlw	1
  7452  00DFFA  EC84  F070         	call	_lcd_gotoxy
  7453                           
  7454                           ;main.c: 111: lcd_putrs(titulo_menu);
  7455  00DFFE  C00B  F009         	movff	mostrar_titulo_menu@titulo_menu,lcd_putrs@ptr
  7456  00E002  C00C  F00A         	movff	mostrar_titulo_menu@titulo_menu+1,lcd_putrs@ptr+1
  7457  00E006  EC2A  F072         	call	_lcd_putrs	;wreg free
  7458  00E00A  0012               	return		;funcret
  7459  00E00C                     __end_of_mostrar_titulo_menu:
  7460                           	opt stack 0
  7461                           tosu	equ	0xFFF
  7462                           tosh	equ	0xFFE
  7463                           tosl	equ	0xFFD
  7464                           pclath	equ	0xFFA
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           postinc0	equ	0xFEE
  7472                           wreg	equ	0xFE8
  7473                           indf1	equ	0xFE7
  7474                           postinc1	equ	0xFE6
  7475                           postdec1	equ	0xFE5
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _clear_display *****************
  7487 ;; Defined at:
  7488 ;;		line 145 in file "main.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  pos             2   10[COMRAM] const int 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7505 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7506 ;;Total ram usage:        2 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    5
  7509 ;; This function calls:
  7510 ;;		_lcd_gotoxy
  7511 ;;		_lcd_putrs
  7512 ;; This function is called by:
  7513 ;;		_cambiar_fecha
  7514 ;;		_cambiar_horario
  7515 ;;		_cambiar_password
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text44
  7520  00E0C4                     __ptext44:
  7521                           	opt stack 0
  7522  00E0C4                     _clear_display:
  7523                           	opt stack 24
  7524                           
  7525                           ;main.c: 146: lcd_gotoxy(pos,2);
  7526                           
  7527                           ;incstack = 0
  7528  00E0C4  0E02               	movlw	2
  7529  00E0C6  6E05               	movwf	lcd_gotoxy@y,c
  7530  00E0C8  500B               	movf	clear_display@pos,w,c
  7531  00E0CA  EC84  F070         	call	_lcd_gotoxy
  7532                           
  7533                           ;main.c: 147: lcd_putrs("                         ");
  7534  00E0CE  0EE4               	movlw	low STR_11
  7535  00E0D0  6E09               	movwf	lcd_putrs@ptr,c
  7536  00E0D2  0EFE               	movlw	high STR_11
  7537  00E0D4  6E0A               	movwf	lcd_putrs@ptr+1,c
  7538  00E0D6  EC2A  F072         	call	_lcd_putrs	;wreg free
  7539                           
  7540                           ;main.c: 148: lcd_gotoxy(pos,2);
  7541  00E0DA  0E02               	movlw	2
  7542  00E0DC  6E05               	movwf	lcd_gotoxy@y,c
  7543  00E0DE  500B               	movf	clear_display@pos,w,c
  7544  00E0E0  EC84  F070         	call	_lcd_gotoxy
  7545  00E0E4  0012               	return		;funcret
  7546  00E0E6                     __end_of_clear_display:
  7547                           	opt stack 0
  7548                           tosu	equ	0xFFF
  7549                           tosh	equ	0xFFE
  7550                           tosl	equ	0xFFD
  7551                           pclath	equ	0xFFA
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           prodh	equ	0xFF4
  7557                           prodl	equ	0xFF3
  7558                           postinc0	equ	0xFEE
  7559                           wreg	equ	0xFE8
  7560                           indf1	equ	0xFE7
  7561                           postinc1	equ	0xFE6
  7562                           postdec1	equ	0xFE5
  7563                           fsr1h	equ	0xFE2
  7564                           fsr1l	equ	0xFE1
  7565                           indf2	equ	0xFDF
  7566                           postinc2	equ	0xFDE
  7567                           postdec2	equ	0xFDD
  7568                           plusw2	equ	0xFDB
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _lcd_putrs *****************
  7574 ;; Defined at:
  7575 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  7578 ;;		 -> fecha@minutes(3), fecha@hour(3), fecha@year(3), fecha@month(3), 
  7579 ;;		 -> fecha@day(3), STR_30(2), STR_29(2), STR_28(2), 
  7580 ;;		 -> STR_24(2), imprimir_tecla@aux(20), STR_21(9), STR_20(23), 
  7581 ;;		 -> STR_18(20), STR_17(27), STR_16(19), STR_15(22), 
  7582 ;;		 -> STR_14(18), STR_13(18), STR_12(19), STR_11(26), 
  7583 ;;		 -> STR_6(11), STR_5(17), ingresar_password@clear(16), STR_4(4), 
  7584 ;;		 -> STR_3(3), buffer2(20), 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    4
  7603 ;; This function calls:
  7604 ;;		_lcd_putc
  7605 ;; This function is called by:
  7606 ;;		_caratula
  7607 ;;		_ingresar_password
  7608 ;;		_mostrar_titulo_menu
  7609 ;;		_clear_display
  7610 ;;		_imprimir_tecla
  7611 ;;		_leer_teclado
  7612 ;;		_guardar_elemento
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text45
  7617  00E454                     __ptext45:
  7618                           	opt stack 0
  7619  00E454                     _lcd_putrs:
  7620                           	opt stack 23
  7621                           
  7622                           ;unmc_lcd_216.c: 223: while(*ptr){
  7623                           
  7624                           ;incstack = 0
  7625  00E454  D015               	goto	l3204
  7626  00E456                     l3200:
  7627                           
  7628                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  7629  00E456  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  7630  00E45A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  7631  00E45E  6AF8               	clrf	tblptru,c
  7632  00E460  0E0E               	movlw	(high __ramtop+-1)
  7633  00E462  64F7               	cpfsgt	tblptrh,c
  7634  00E464  D003               	bra	u2327
  7635  00E466  0008               	tblrd		*
  7636  00E468  50F5               	movf	tablat,w,c
  7637  00E46A  D005               	bra	u2320
  7638  00E46C                     u2327:
  7639  00E46C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7640  00E470  CFF7 FFEA          	movff	tblptrh,fsr0h
  7641  00E474  50EF               	movf	indf0,w,c
  7642  00E476                     u2320:
  7643  00E476  ECDE  F071         	call	_lcd_putc
  7644  00E47A  4A09               	infsnz	lcd_putrs@ptr,f,c
  7645  00E47C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  7646  00E47E  D000               	goto	l3204
  7647  00E480                     l3204:
  7648  00E480  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  7649  00E484  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  7650  00E488  6AF8               	clrf	tblptru,c
  7651  00E48A  0E0E               	movlw	(high __ramtop+-1)
  7652  00E48C  64F7               	cpfsgt	tblptrh,c
  7653  00E48E  D003               	bra	u2337
  7654  00E490  0008               	tblrd		*
  7655  00E492  50F5               	movf	tablat,w,c
  7656  00E494  D005               	bra	u2330
  7657  00E496                     u2337:
  7658  00E496  CFF6 FFE9          	movff	tblptrl,fsr0l
  7659  00E49A  CFF7 FFEA          	movff	tblptrh,fsr0h
  7660  00E49E  50EF               	movf	indf0,w,c
  7661  00E4A0                     u2330:
  7662  00E4A0  0900               	iorlw	0
  7663  00E4A2  A4D8               	btfss	status,2,c
  7664  00E4A4  D7D8               	goto	l3200
  7665  00E4A6  0012               	return		;funcret
  7666  00E4A8                     __end_of_lcd_putrs:
  7667                           	opt stack 0
  7668                           tosu	equ	0xFFF
  7669                           tosh	equ	0xFFE
  7670                           tosl	equ	0xFFD
  7671                           pclath	equ	0xFFA
  7672                           tblptru	equ	0xFF8
  7673                           tblptrh	equ	0xFF7
  7674                           tblptrl	equ	0xFF6
  7675                           tablat	equ	0xFF5
  7676                           prodh	equ	0xFF4
  7677                           prodl	equ	0xFF3
  7678                           indf0	equ	0xFEF
  7679                           postinc0	equ	0xFEE
  7680                           fsr0h	equ	0xFEA
  7681                           fsr0l	equ	0xFE9
  7682                           wreg	equ	0xFE8
  7683                           indf1	equ	0xFE7
  7684                           postinc1	equ	0xFE6
  7685                           postdec1	equ	0xFE5
  7686                           fsr1h	equ	0xFE2
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           plusw2	equ	0xFDB
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _lcd_putc *****************
  7697 ;; Defined at:
  7698 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  c               1    wreg     unsigned char 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  c               1    7[COMRAM] unsigned char 
  7703 ;; Return value:  Size  Location     Type
  7704 ;;		None               void
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7715 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7716 ;;Total ram usage:        1 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    3
  7719 ;; This function calls:
  7720 ;;		_lcd_gotoxy
  7721 ;;		_lcd_send_byte
  7722 ;; This function is called by:
  7723 ;;		_lcd_putrs
  7724 ;;		_lcd_puts
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text46
  7729  00E3BC                     __ptext46:
  7730                           	opt stack 0
  7731  00E3BC                     _lcd_putc:
  7732                           	opt stack 23
  7733                           
  7734                           ;incstack = 0
  7735                           ;lcd_putc@c stored from wreg
  7736  00E3BC  6E08               	movwf	lcd_putc@c,c
  7737                           
  7738                           ;unmc_lcd_216.c: 173: switch(c){
  7739  00E3BE  D018               	goto	l3150
  7740  00E3C0                     l3140:
  7741                           
  7742                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  7743  00E3C0  0E01               	movlw	1
  7744  00E3C2  6E03               	movwf	lcd_send_byte@n,c
  7745  00E3C4  0E00               	movlw	0
  7746  00E3C6  EC15  F071         	call	_lcd_send_byte
  7747                           
  7748                           ;unmc_lcd_216.c: 176: break;
  7749  00E3CA  0012               	return	
  7750  00E3CC                     l3142:
  7751                           
  7752                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  7753  00E3CC  0E02               	movlw	2
  7754  00E3CE  6E05               	movwf	lcd_gotoxy@y,c
  7755  00E3D0  0E01               	movlw	1
  7756  00E3D2  EC84  F070         	call	_lcd_gotoxy
  7757                           
  7758                           ;unmc_lcd_216.c: 179: break;
  7759  00E3D6  0012               	return	
  7760  00E3D8                     l3144:
  7761                           
  7762                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  7763  00E3D8  0E10               	movlw	16
  7764  00E3DA  6E03               	movwf	lcd_send_byte@n,c
  7765  00E3DC  0E00               	movlw	0
  7766  00E3DE  EC15  F071         	call	_lcd_send_byte
  7767                           
  7768                           ;unmc_lcd_216.c: 182: break;
  7769  00E3E2  0012               	return	
  7770  00E3E4                     l3146:
  7771                           
  7772                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  7773  00E3E4  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  7774  00E3E8  0E01               	movlw	1
  7775  00E3EA  EC15  F071         	call	_lcd_send_byte
  7776                           
  7777                           ;unmc_lcd_216.c: 186: }
  7778                           
  7779                           ;unmc_lcd_216.c: 185: break;
  7780  00E3EE  0012               	return	
  7781  00E3F0                     l3150:
  7782  00E3F0  5008               	movf	lcd_putc@c,w,c
  7783                           
  7784                           ; Switch size 1, requested type "space"
  7785                           ; Number of cases is 3, Range of values is 8 to 12
  7786                           ; switch strategies available:
  7787                           ; Name         Instructions Cycles
  7788                           ; simple_byte           10     6 (average)
  7789                           ;	Chosen strategy is simple_byte
  7790  00E3F2  0A08               	xorlw	8	; case 8
  7791  00E3F4  B4D8               	btfsc	status,2,c
  7792  00E3F6  D7F0               	goto	l3144
  7793  00E3F8  0A02               	xorlw	2	; case 10
  7794  00E3FA  B4D8               	btfsc	status,2,c
  7795  00E3FC  D7E7               	goto	l3142
  7796  00E3FE  0A06               	xorlw	6	; case 12
  7797  00E400  B4D8               	btfsc	status,2,c
  7798  00E402  D7DE               	goto	l3140
  7799  00E404  D7EF               	goto	l3146
  7800  00E406  0012               	return		;funcret
  7801  00E408                     __end_of_lcd_putc:
  7802                           	opt stack 0
  7803                           tosu	equ	0xFFF
  7804                           tosh	equ	0xFFE
  7805                           tosl	equ	0xFFD
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           indf0	equ	0xFEF
  7814                           postinc0	equ	0xFEE
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           indf1	equ	0xFE7
  7819                           postinc1	equ	0xFE6
  7820                           postdec1	equ	0xFE5
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           plusw2	equ	0xFDB
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _lcd_gotoxy *****************
  7832 ;; Defined at:
  7833 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  x               1    wreg     unsigned char 
  7836 ;;  y               1    4[COMRAM] unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  x               1    5[COMRAM] unsigned char 
  7839 ;;  address         1    6[COMRAM] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;		None               void
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7849 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7853 ;;Total ram usage:        3 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    2
  7856 ;; This function calls:
  7857 ;;		_lcd_send_byte
  7858 ;; This function is called by:
  7859 ;;		_caratula
  7860 ;;		_ingresar_password
  7861 ;;		_mostrar_titulo_menu
  7862 ;;		_clear_display
  7863 ;;		_lcd_putc
  7864 ;;		_guardar_elemento
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text47
  7869  00E108                     __ptext47:
  7870                           	opt stack 0
  7871  00E108                     _lcd_gotoxy:
  7872                           	opt stack 23
  7873                           
  7874                           ;incstack = 0
  7875                           ;lcd_gotoxy@x stored from wreg
  7876  00E108  6E06               	movwf	lcd_gotoxy@x,c
  7877                           
  7878                           ;unmc_lcd_216.c: 159: int8 address;
  7879                           ;unmc_lcd_216.c: 161: if(y != 1)
  7880  00E10A  0405               	decf	lcd_gotoxy@y,w,c
  7881  00E10C  B4D8               	btfsc	status,2,c
  7882  00E10E  D002               	goto	l3034
  7883                           
  7884                           ;unmc_lcd_216.c: 162: address = 0x40;
  7885  00E110  0E40               	movlw	64
  7886  00E112  D001               	goto	L2
  7887  00E114                     l3034:
  7888                           
  7889                           ;unmc_lcd_216.c: 163: else
  7890                           ;unmc_lcd_216.c: 164: address=0;
  7891  00E114  0E00               	movlw	0
  7892  00E116                     L2:
  7893  00E116  6E07               	movwf	lcd_gotoxy@address,c
  7894  00E118  D000               	goto	l3036
  7895  00E11A                     l3036:
  7896                           
  7897                           ;unmc_lcd_216.c: 166: address += x-1;
  7898  00E11A  0406               	decf	lcd_gotoxy@x,w,c
  7899  00E11C  2607               	addwf	lcd_gotoxy@address,f,c
  7900                           
  7901                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  7902  00E11E  5007               	movf	lcd_gotoxy@address,w,c
  7903  00E120  0980               	iorlw	128
  7904  00E122  6E03               	movwf	lcd_send_byte@n,c
  7905  00E124  0E00               	movlw	0
  7906  00E126  EC15  F071         	call	_lcd_send_byte
  7907  00E12A  0012               	return		;funcret
  7908  00E12C                     __end_of_lcd_gotoxy:
  7909                           	opt stack 0
  7910                           tosu	equ	0xFFF
  7911                           tosh	equ	0xFFE
  7912                           tosl	equ	0xFFD
  7913                           pclath	equ	0xFFA
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           indf0	equ	0xFEF
  7921                           postinc0	equ	0xFEE
  7922                           fsr0h	equ	0xFEA
  7923                           fsr0l	equ	0xFE9
  7924                           wreg	equ	0xFE8
  7925                           indf1	equ	0xFE7
  7926                           postinc1	equ	0xFE6
  7927                           postdec1	equ	0xFE5
  7928                           fsr1h	equ	0xFE2
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           plusw2	equ	0xFDB
  7934                           fsr2h	equ	0xFDA
  7935                           fsr2l	equ	0xFD9
  7936                           status	equ	0xFD8
  7937                           
  7938 ;; *************** function _Setup *****************
  7939 ;; Defined at:
  7940 ;;		line 59 in file "main.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;		None
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;		None
  7945 ;; Return value:  Size  Location     Type
  7946 ;;		None               void
  7947 ;; Registers used:
  7948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7958 ;;Total ram usage:        0 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    3
  7961 ;; This function calls:
  7962 ;;		_Write_RTC
  7963 ;;		_lcd_comand
  7964 ;;		_lcd_init
  7965 ;; This function is called by:
  7966 ;;		_main
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text48
  7971  00E374                     __ptext48:
  7972                           	opt stack 0
  7973  00E374                     _Setup:
  7974                           	opt stack 27
  7975                           
  7976                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  7977                           
  7978                           ;incstack = 0
  7979  00E374  8E9B               	bsf	3995,7,c	;volatile
  7980                           
  7981                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  7982  00E376  9C9B               	bcf	3995,6,c	;volatile
  7983                           
  7984                           ;main.c: 63: OSCCONbits.IRCF0=1;
  7985  00E378  88D3               	bsf	4051,4,c	;volatile
  7986                           
  7987                           ;main.c: 64: OSCCONbits.IRCF1=1;
  7988  00E37A  8AD3               	bsf	4051,5,c	;volatile
  7989                           
  7990                           ;main.c: 65: OSCCONbits.IRCF2=1;
  7991  00E37C  8CD3               	bsf	4051,6,c	;volatile
  7992                           
  7993                           ;main.c: 66: OSCCONbits.SCS0=0;
  7994  00E37E  90D3               	bcf	4051,0,c	;volatile
  7995                           
  7996                           ;main.c: 67: OSCCONbits.SCS1=0;
  7997  00E380  92D3               	bcf	4051,1,c	;volatile
  7998                           
  7999                           ;main.c: 68: TRISA = 0b11110000;
  8000  00E382  0EF0               	movlw	240
  8001  00E384  6E92               	movwf	3986,c	;volatile
  8002                           
  8003                           ;main.c: 69: TRISB = 0;
  8004  00E386  0E00               	movlw	0
  8005  00E388  6E93               	movwf	3987,c	;volatile
  8006                           
  8007                           ;main.c: 70: TRISC = 0b00000111;
  8008  00E38A  0E07               	movlw	7
  8009  00E38C  6E94               	movwf	3988,c	;volatile
  8010                           
  8011                           ;main.c: 74: ANCON0=0b11111111;
  8012  00E38E  010F               	movlb	15	; () banked
  8013  00E390  6948               	setf	72,b	;volatile
  8014                           
  8015                           ; BSR set to: 15
  8016                           ;main.c: 76: ANCON1=0b11111111;
  8017  00E392  010F               	movlb	15	; () banked
  8018  00E394  6949               	setf	73,b	;volatile
  8019                           
  8020                           ;main.c: 77: ADCON0=0b00101101;
  8021  00E396  0E2D               	movlw	45
  8022  00E398  6EC2               	movwf	4034,c	;volatile
  8023                           
  8024                           ;main.c: 78: ADCON1=0b00010000;
  8025  00E39A  0E10               	movlw	16
  8026  00E39C  6EC1               	movwf	4033,c	;volatile
  8027                           
  8028                           ; BSR set to: 15
  8029                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  8030  00E39E  010F               	movlb	15	; () banked
  8031  00E3A0  8F3F               	bsf	63,7,b	;volatile
  8032                           
  8033                           ; BSR set to: 15
  8034                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  8035  00E3A2  010F               	movlb	15	; () banked
  8036  00E3A4  8B3F               	bsf	63,5,b	;volatile
  8037                           
  8038                           ; BSR set to: 15
  8039                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  8040  00E3A6  86CD               	bsf	4045,3,c	;volatile
  8041                           
  8042                           ; BSR set to: 15
  8043                           ;main.c: 82: Write_RTC();
  8044  00E3A8  EC3E  F07C         	call	_Write_RTC	;wreg free
  8045                           
  8046                           ;main.c: 83: lcd_init();
  8047  00E3AC  ECE5  F074         	call	_lcd_init	;wreg free
  8048                           
  8049                           ;main.c: 84: lcd_comand(0b00001100);
  8050  00E3B0  0E0C               	movlw	12
  8051  00E3B2  ECC3  F06F         	call	_lcd_comand
  8052                           
  8053                           ;main.c: 85: LATBbits.LATB1 = 0;;
  8054  00E3B6  928A               	bcf	3978,1,c	;volatile
  8055                           
  8056                           ;main.c: 86: LATBbits.LATB0 = 0;;
  8057  00E3B8  908A               	bcf	3978,0,c	;volatile
  8058  00E3BA  0012               	return		;funcret
  8059  00E3BC                     __end_of_Setup:
  8060                           	opt stack 0
  8061                           tosu	equ	0xFFF
  8062                           tosh	equ	0xFFE
  8063                           tosl	equ	0xFFD
  8064                           pclath	equ	0xFFA
  8065                           tblptru	equ	0xFF8
  8066                           tblptrh	equ	0xFF7
  8067                           tblptrl	equ	0xFF6
  8068                           tablat	equ	0xFF5
  8069                           prodh	equ	0xFF4
  8070                           prodl	equ	0xFF3
  8071                           indf0	equ	0xFEF
  8072                           postinc0	equ	0xFEE
  8073                           fsr0h	equ	0xFEA
  8074                           fsr0l	equ	0xFE9
  8075                           wreg	equ	0xFE8
  8076                           indf1	equ	0xFE7
  8077                           postinc1	equ	0xFE6
  8078                           postdec1	equ	0xFE5
  8079                           fsr1h	equ	0xFE2
  8080                           fsr1l	equ	0xFE1
  8081                           indf2	equ	0xFDF
  8082                           postinc2	equ	0xFDE
  8083                           postdec2	equ	0xFDD
  8084                           plusw2	equ	0xFDB
  8085                           fsr2h	equ	0xFDA
  8086                           fsr2l	equ	0xFD9
  8087                           status	equ	0xFD8
  8088                           
  8089 ;; *************** function _lcd_init *****************
  8090 ;; Defined at:
  8091 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;		None
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;  i               1    4[COMRAM] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8109 ;;Total ram usage:        1 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    2
  8112 ;; This function calls:
  8113 ;;		_Delay1KTCYx
  8114 ;;		_lcd_send_byte
  8115 ;;		_lcd_send_nibble
  8116 ;; This function is called by:
  8117 ;;		_Setup
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           	psect	text49
  8122  00E9CA                     __ptext49:
  8123                           	opt stack 0
  8124  00E9CA                     _lcd_init:
  8125                           	opt stack 27
  8126                           
  8127                           ;unmc_lcd_216.c: 120: int8 i;
  8128                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  8129                           
  8130                           ;incstack = 0
  8131  00E9CA  9693               	bcf	3987,3,c	;volatile
  8132                           
  8133                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  8134  00E9CC  9493               	bcf	3987,2,c	;volatile
  8135                           
  8136                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  8137  00E9CE  968A               	bcf	3978,3,c	;volatile
  8138                           
  8139                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  8140  00E9D0  948A               	bcf	3978,2,c	;volatile
  8141                           
  8142                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  8143  00E9D2  9893               	bcf	3987,4,c	;volatile
  8144                           
  8145                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  8146  00E9D4  9A93               	bcf	3987,5,c	;volatile
  8147                           
  8148                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  8149  00E9D6  9C93               	bcf	3987,6,c	;volatile
  8150                           
  8151                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  8152  00E9D8  9E93               	bcf	3987,7,c	;volatile
  8153                           
  8154                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  8155  00E9DA  0E0A               	movlw	10
  8156  00E9DC  ECDC  F06F         	call	_Delay1KTCYx
  8157                           
  8158                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  8159  00E9E0  0E0A               	movlw	10
  8160  00E9E2  ECDC  F06F         	call	_Delay1KTCYx
  8161                           
  8162                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  8163  00E9E6  0E0A               	movlw	10
  8164  00E9E8  ECDC  F06F         	call	_Delay1KTCYx
  8165                           
  8166                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  8167  00E9EC  0E00               	movlw	0
  8168  00E9EE  6E05               	movwf	lcd_init@i,c
  8169  00E9F0                     l3586:
  8170  00E9F0  0E02               	movlw	2
  8171  00E9F2  6405               	cpfsgt	lcd_init@i,c
  8172  00E9F4  D001               	goto	l3590
  8173  00E9F6  D008               	goto	l3596
  8174  00E9F8                     l3590:
  8175                           
  8176                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  8177  00E9F8  0E03               	movlw	3
  8178  00E9FA  EC30  F074         	call	_lcd_send_nibble
  8179                           
  8180                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  8181  00E9FE  0E0A               	movlw	10
  8182  00EA00  ECDC  F06F         	call	_Delay1KTCYx
  8183  00EA04  2A05               	incf	lcd_init@i,f,c
  8184  00EA06  D7F4               	goto	l3586
  8185  00EA08                     l3596:
  8186                           
  8187                           ;unmc_lcd_216.c: 146: }
  8188                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  8189  00EA08  0E02               	movlw	2
  8190  00EA0A  EC30  F074         	call	_lcd_send_nibble
  8191                           
  8192                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  8193  00EA0E  0E00               	movlw	0
  8194  00EA10  6E05               	movwf	lcd_init@i,c
  8195  00EA12  0E03               	movlw	3
  8196  00EA14  6405               	cpfsgt	lcd_init@i,c
  8197  00EA16  D002               	goto	l3604
  8198  00EA18  0012               	return	
  8199  00EA1A  0012               	return	
  8200  00EA1C                     l3604:
  8201                           
  8202                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  8203  00EA1C  5005               	movf	lcd_init@i,w,c
  8204  00EA1E  0D01               	mullw	1
  8205  00EA20  0EC5               	movlw	low _LCD_INIT_STRING
  8206  00EA22  24F3               	addwf	prodl,w,c
  8207  00EA24  6EF6               	movwf	tblptrl,c
  8208  00EA26  0EFE               	movlw	high _LCD_INIT_STRING
  8209  00EA28  20F4               	addwfc	prodh,w,c
  8210  00EA2A  6EF7               	movwf	tblptrh,c
  8211  00EA2C                     	if	0	;There are less than 3 active tblptr bytes
  8212  00EA2C                     	endif
  8213  00EA2C  0008               	tblrd		*
  8214  00EA2E  CFF5 F003          	movff	tablat,lcd_send_byte@n
  8215  00EA32  0E00               	movlw	0
  8216  00EA34  EC15  F071         	call	_lcd_send_byte
  8217                           
  8218                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  8219  00EA38  0E0A               	movlw	10
  8220  00EA3A  ECDC  F06F         	call	_Delay1KTCYx
  8221  00EA3E  2A05               	incf	lcd_init@i,f,c
  8222  00EA40  0E03               	movlw	3
  8223  00EA42  6405               	cpfsgt	lcd_init@i,c
  8224  00EA44  D7EB               	goto	l3604
  8225  00EA46  0012               	return	
  8226  00EA48  0012               	return		;funcret
  8227  00EA4A                     __end_of_lcd_init:
  8228                           	opt stack 0
  8229                           tosu	equ	0xFFF
  8230                           tosh	equ	0xFFE
  8231                           tosl	equ	0xFFD
  8232                           pclath	equ	0xFFA
  8233                           tblptru	equ	0xFF8
  8234                           tblptrh	equ	0xFF7
  8235                           tblptrl	equ	0xFF6
  8236                           tablat	equ	0xFF5
  8237                           prodh	equ	0xFF4
  8238                           prodl	equ	0xFF3
  8239                           indf0	equ	0xFEF
  8240                           postinc0	equ	0xFEE
  8241                           fsr0h	equ	0xFEA
  8242                           fsr0l	equ	0xFE9
  8243                           wreg	equ	0xFE8
  8244                           indf1	equ	0xFE7
  8245                           postinc1	equ	0xFE6
  8246                           postdec1	equ	0xFE5
  8247                           fsr1h	equ	0xFE2
  8248                           fsr1l	equ	0xFE1
  8249                           indf2	equ	0xFDF
  8250                           postinc2	equ	0xFDE
  8251                           postdec2	equ	0xFDD
  8252                           plusw2	equ	0xFDB
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function _Delay1KTCYx *****************
  8258 ;; Defined at:
  8259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  unit            1    wreg     unsigned char 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  unit            1    0[COMRAM] unsigned char 
  8264 ;; Return value:  Size  Location     Type
  8265 ;;		None               void
  8266 ;; Registers used:
  8267 ;;		wreg
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8277 ;;Total ram usage:        1 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_lcd_init
  8283 ;;		_DelayPORXLCD
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text50
  8288  00DFB8                     __ptext50:
  8289                           	opt stack 0
  8290  00DFB8                     _Delay1KTCYx:
  8291                           	opt stack 28
  8292                           
  8293                           ;incstack = 0
  8294                           ;Delay1KTCYx@unit stored from wreg
  8295  00DFB8  6E01               	movwf	Delay1KTCYx@unit,c
  8296  00DFBA  0EFA               	movlw	250
  8297  00DFBC                     u3597:
  8298  00DFBC  F000               	nop	
  8299  00DFBE  2EE8               	decfsz	wreg,f,c
  8300  00DFC0  D7FD               	goto	u3597
  8301  00DFC2  2E01               	decfsz	Delay1KTCYx@unit,f,c
  8302  00DFC4  D7FA               	goto	l3522
  8303  00DFC6  0012               	return	
  8304  00DFC8  0012               	return		;funcret
  8305  00DFCA                     __end_of_Delay1KTCYx:
  8306                           	opt stack 0
  8307                           tosu	equ	0xFFF
  8308                           tosh	equ	0xFFE
  8309                           tosl	equ	0xFFD
  8310                           pclath	equ	0xFFA
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           indf0	equ	0xFEF
  8318                           postinc0	equ	0xFEE
  8319                           fsr0h	equ	0xFEA
  8320                           fsr0l	equ	0xFE9
  8321                           wreg	equ	0xFE8
  8322                           indf1	equ	0xFE7
  8323                           postinc1	equ	0xFE6
  8324                           postdec1	equ	0xFE5
  8325                           fsr1h	equ	0xFE2
  8326                           fsr1l	equ	0xFE1
  8327                           indf2	equ	0xFDF
  8328                           postinc2	equ	0xFDE
  8329                           postdec2	equ	0xFDD
  8330                           plusw2	equ	0xFDB
  8331                           fsr2h	equ	0xFDA
  8332                           fsr2l	equ	0xFD9
  8333                           status	equ	0xFD8
  8334                           
  8335 ;; *************** function _lcd_comand *****************
  8336 ;; Defined at:
  8337 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  d               1    wreg     unsigned char 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  d               1    4[COMRAM] unsigned char 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;		None               void
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8355 ;;Total ram usage:        1 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    2
  8358 ;; This function calls:
  8359 ;;		_lcd_send_byte
  8360 ;; This function is called by:
  8361 ;;		_caratula
  8362 ;;		_Setup
  8363 ;;		_ingresar_password
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text51
  8368  00DF86                     __ptext51:
  8369                           	opt stack 0
  8370  00DF86                     _lcd_comand:
  8371                           	opt stack 27
  8372                           
  8373                           ;incstack = 0
  8374                           ;lcd_comand@d stored from wreg
  8375  00DF86  6E05               	movwf	lcd_comand@d,c
  8376                           
  8377                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  8378  00DF88  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  8379  00DF8C  0E00               	movlw	0
  8380  00DF8E  EC15  F071         	call	_lcd_send_byte
  8381  00DF92  0012               	return		;funcret
  8382  00DF94                     __end_of_lcd_comand:
  8383                           	opt stack 0
  8384                           tosu	equ	0xFFF
  8385                           tosh	equ	0xFFE
  8386                           tosl	equ	0xFFD
  8387                           pclath	equ	0xFFA
  8388                           tblptru	equ	0xFF8
  8389                           tblptrh	equ	0xFF7
  8390                           tblptrl	equ	0xFF6
  8391                           tablat	equ	0xFF5
  8392                           prodh	equ	0xFF4
  8393                           prodl	equ	0xFF3
  8394                           indf0	equ	0xFEF
  8395                           postinc0	equ	0xFEE
  8396                           fsr0h	equ	0xFEA
  8397                           fsr0l	equ	0xFE9
  8398                           wreg	equ	0xFE8
  8399                           indf1	equ	0xFE7
  8400                           postinc1	equ	0xFE6
  8401                           postdec1	equ	0xFE5
  8402                           fsr1h	equ	0xFE2
  8403                           fsr1l	equ	0xFE1
  8404                           indf2	equ	0xFDF
  8405                           postinc2	equ	0xFDE
  8406                           postdec2	equ	0xFDD
  8407                           plusw2	equ	0xFDB
  8408                           fsr2h	equ	0xFDA
  8409                           fsr2l	equ	0xFD9
  8410                           status	equ	0xFD8
  8411                           
  8412 ;; *************** function _lcd_send_byte *****************
  8413 ;; Defined at:
  8414 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;  address         1    wreg     unsigned char 
  8417 ;;  n               1    2[COMRAM] unsigned char 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  address         1    3[COMRAM] unsigned char 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;		None               void
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0, cstack
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8429 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8433 ;;Total ram usage:        2 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    1
  8436 ;; This function calls:
  8437 ;;		_Delay100TCYx
  8438 ;;		_lcd_send_nibble
  8439 ;; This function is called by:
  8440 ;;		_lcd_init
  8441 ;;		_lcd_gotoxy
  8442 ;;		_lcd_putc
  8443 ;;		_lcd_comand
  8444 ;;		_lcd_setcursor_vb
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text52
  8449  00E22A                     __ptext52:
  8450                           	opt stack 0
  8451  00E22A                     _lcd_send_byte:
  8452                           	opt stack 24
  8453                           
  8454                           ;incstack = 0
  8455                           ;lcd_send_byte@address stored from wreg
  8456  00E22A  6E04               	movwf	lcd_send_byte@address,c
  8457                           
  8458                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  8459  00E22C  968A               	bcf	3978,3,c	;volatile
  8460                           
  8461                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  8462  00E22E  0E02               	movlw	2
  8463  00E230  ECD3  F06F         	call	_Delay100TCYx
  8464                           
  8465                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  8466  00E234  9893               	bcf	3987,4,c	;volatile
  8467                           
  8468                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  8469  00E236  9A93               	bcf	3987,5,c	;volatile
  8470                           
  8471                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  8472  00E238  9C93               	bcf	3987,6,c	;volatile
  8473                           
  8474                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  8475  00E23A  9E93               	bcf	3987,7,c	;volatile
  8476                           
  8477                           ;unmc_lcd_216.c: 101: if(address)
  8478  00E23C  5004               	movf	lcd_send_byte@address,w,c
  8479  00E23E  B4D8               	btfsc	status,2,c
  8480  00E240  D002               	goto	l286
  8481                           
  8482                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  8483  00E242  868A               	bsf	3978,3,c	;volatile
  8484  00E244  D001               	goto	l287
  8485  00E246                     l286:
  8486                           
  8487                           ;unmc_lcd_216.c: 103: else
  8488                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  8489  00E246  968A               	bcf	3978,3,c	;volatile
  8490  00E248                     l287:
  8491                           
  8492                           ;unmc_lcd_216.c: 106: __nop();
  8493  00E248  F000               	nop	
  8494                           
  8495                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  8496  00E24A  3803               	swapf	lcd_send_byte@n,w,c
  8497  00E24C  0B0F               	andlw	15
  8498  00E24E  EC30  F074         	call	_lcd_send_nibble
  8499                           
  8500                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  8501  00E252  5003               	movf	lcd_send_byte@n,w,c
  8502  00E254  0B0F               	andlw	15
  8503  00E256  EC30  F074         	call	_lcd_send_nibble
  8504  00E25A  0012               	return		;funcret
  8505  00E25C                     __end_of_lcd_send_byte:
  8506                           	opt stack 0
  8507                           tosu	equ	0xFFF
  8508                           tosh	equ	0xFFE
  8509                           tosl	equ	0xFFD
  8510                           pclath	equ	0xFFA
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           indf0	equ	0xFEF
  8518                           postinc0	equ	0xFEE
  8519                           fsr0h	equ	0xFEA
  8520                           fsr0l	equ	0xFE9
  8521                           wreg	equ	0xFE8
  8522                           indf1	equ	0xFE7
  8523                           postinc1	equ	0xFE6
  8524                           postdec1	equ	0xFE5
  8525                           fsr1h	equ	0xFE2
  8526                           fsr1l	equ	0xFE1
  8527                           indf2	equ	0xFDF
  8528                           postinc2	equ	0xFDE
  8529                           postdec2	equ	0xFDD
  8530                           plusw2	equ	0xFDB
  8531                           fsr2h	equ	0xFDA
  8532                           fsr2l	equ	0xFD9
  8533                           status	equ	0xFD8
  8534                           
  8535 ;; *************** function _lcd_send_nibble *****************
  8536 ;; Defined at:
  8537 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  nibble          1    wreg     unsigned char 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  nibble          1    1[COMRAM] unsigned char 
  8542 ;; Return value:  Size  Location     Type
  8543 ;;		None               void
  8544 ;; Registers used:
  8545 ;;		wreg, status,2, status,0
  8546 ;; Tracked objects:
  8547 ;;		On entry : 0/0
  8548 ;;		On exit  : 0/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8554 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8555 ;;Total ram usage:        2 bytes
  8556 ;; Hardware stack levels used:    1
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_lcd_send_byte
  8561 ;;		_lcd_init
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text53
  8566  00E860                     __ptext53:
  8567                           	opt stack 0
  8568  00E860                     _lcd_send_nibble:
  8569                           	opt stack 24
  8570                           
  8571                           ;incstack = 0
  8572                           ;lcd_send_nibble@nibble stored from wreg
  8573  00E860  6E02               	movwf	lcd_send_nibble@nibble,c
  8574                           
  8575                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  8576  00E862  A002               	btfss	lcd_send_nibble@nibble,0,c
  8577  00E864  D003               	goto	u1780
  8578  00E866  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8579  00E868  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8580  00E86A  D001               	goto	u1798
  8581  00E86C                     u1780:
  8582  00E86C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8583  00E86E                     u1798:
  8584  00E86E  3A01               	swapf	??_lcd_send_nibble,f,c
  8585  00E870  508A               	movf	3978,w,c	;volatile
  8586  00E872  1801               	xorwf	??_lcd_send_nibble,w,c
  8587  00E874  0BEF               	andlw	-17
  8588  00E876  1801               	xorwf	??_lcd_send_nibble,w,c
  8589  00E878  6E8A               	movwf	3978,c	;volatile
  8590                           
  8591                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  8592  00E87A  A202               	btfss	lcd_send_nibble@nibble,1,c
  8593  00E87C  D003               	goto	u1800
  8594  00E87E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8595  00E880  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8596  00E882  D001               	goto	u1818
  8597  00E884                     u1800:
  8598  00E884  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8599  00E886                     u1818:
  8600  00E886  3A01               	swapf	??_lcd_send_nibble,f,c
  8601  00E888  4601               	rlncf	??_lcd_send_nibble,f,c
  8602  00E88A  508A               	movf	3978,w,c	;volatile
  8603  00E88C  1801               	xorwf	??_lcd_send_nibble,w,c
  8604  00E88E  0BDF               	andlw	-33
  8605  00E890  1801               	xorwf	??_lcd_send_nibble,w,c
  8606  00E892  6E8A               	movwf	3978,c	;volatile
  8607                           
  8608                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  8609  00E894  A402               	btfss	lcd_send_nibble@nibble,2,c
  8610  00E896  D003               	goto	u1820
  8611  00E898  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8612  00E89A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8613  00E89C  D001               	goto	u1838
  8614  00E89E                     u1820:
  8615  00E89E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8616  00E8A0                     u1838:
  8617  00E8A0  3A01               	swapf	??_lcd_send_nibble,f,c
  8618  00E8A2  4601               	rlncf	??_lcd_send_nibble,f,c
  8619  00E8A4  4601               	rlncf	??_lcd_send_nibble,f,c
  8620  00E8A6  508A               	movf	3978,w,c	;volatile
  8621  00E8A8  1801               	xorwf	??_lcd_send_nibble,w,c
  8622  00E8AA  0BBF               	andlw	-65
  8623  00E8AC  1801               	xorwf	??_lcd_send_nibble,w,c
  8624  00E8AE  6E8A               	movwf	3978,c	;volatile
  8625                           
  8626                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  8627  00E8B0  A602               	btfss	lcd_send_nibble@nibble,3,c
  8628  00E8B2  D003               	goto	u1840
  8629  00E8B4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8630  00E8B6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8631  00E8B8  D001               	goto	u1858
  8632  00E8BA                     u1840:
  8633  00E8BA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8634  00E8BC                     u1858:
  8635  00E8BC  3201               	rrcf	??_lcd_send_nibble,f,c
  8636  00E8BE  3201               	rrcf	??_lcd_send_nibble,f,c
  8637  00E8C0  508A               	movf	3978,w,c	;volatile
  8638  00E8C2  1801               	xorwf	??_lcd_send_nibble,w,c
  8639  00E8C4  0B7F               	andlw	-129
  8640  00E8C6  1801               	xorwf	??_lcd_send_nibble,w,c
  8641  00E8C8  6E8A               	movwf	3978,c	;volatile
  8642                           
  8643                           ;unmc_lcd_216.c: 32: __nop();
  8644  00E8CA  F000               	nop	
  8645                           
  8646                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  8647  00E8CC  848A               	bsf	3978,2,c	;volatile
  8648                           
  8649                           ;unmc_lcd_216.c: 34: __nop();__nop();
  8650  00E8CE  F000               	nop	
  8651  00E8D0  F000               	nop	
  8652                           
  8653                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  8654  00E8D2  948A               	bcf	3978,2,c	;volatile
  8655  00E8D4  0012               	return		;funcret
  8656  00E8D6                     __end_of_lcd_send_nibble:
  8657                           	opt stack 0
  8658                           tosu	equ	0xFFF
  8659                           tosh	equ	0xFFE
  8660                           tosl	equ	0xFFD
  8661                           pclath	equ	0xFFA
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           indf0	equ	0xFEF
  8669                           postinc0	equ	0xFEE
  8670                           fsr0h	equ	0xFEA
  8671                           fsr0l	equ	0xFE9
  8672                           wreg	equ	0xFE8
  8673                           indf1	equ	0xFE7
  8674                           postinc1	equ	0xFE6
  8675                           postdec1	equ	0xFE5
  8676                           fsr1h	equ	0xFE2
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           postdec2	equ	0xFDD
  8681                           plusw2	equ	0xFDB
  8682                           fsr2h	equ	0xFDA
  8683                           fsr2l	equ	0xFD9
  8684                           status	equ	0xFD8
  8685                           
  8686 ;; *************** function _Delay100TCYx *****************
  8687 ;; Defined at:
  8688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  unit            1    wreg     unsigned char 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  unit            1    0[COMRAM] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;		None               void
  8695 ;; Registers used:
  8696 ;;		wreg
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8706 ;;Total ram usage:        1 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		_lcd_send_byte
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text54
  8716  00DFA6                     __ptext54:
  8717                           	opt stack 0
  8718  00DFA6                     _Delay100TCYx:
  8719                           	opt stack 24
  8720                           
  8721                           ;incstack = 0
  8722                           ;Delay100TCYx@unit stored from wreg
  8723  00DFA6  6E01               	movwf	Delay100TCYx@unit,c
  8724  00DFA8  0E21               	movlw	33
  8725  00DFAA                     u3607:
  8726  00DFAA  2EE8               	decfsz	wreg,f,c
  8727  00DFAC  D7FE               	goto	u3607
  8728  00DFAE  F000               	nop	
  8729  00DFB0  2E01               	decfsz	Delay100TCYx@unit,f,c
  8730  00DFB2  D7FA               	goto	l2820
  8731  00DFB4  0012               	return	
  8732  00DFB6  0012               	return		;funcret
  8733  00DFB8                     __end_of_Delay100TCYx:
  8734                           	opt stack 0
  8735                           tosu	equ	0xFFF
  8736                           tosh	equ	0xFFE
  8737                           tosl	equ	0xFFD
  8738                           pclath	equ	0xFFA
  8739                           tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodh	equ	0xFF4
  8744                           prodl	equ	0xFF3
  8745                           indf0	equ	0xFEF
  8746                           postinc0	equ	0xFEE
  8747                           fsr0h	equ	0xFEA
  8748                           fsr0l	equ	0xFE9
  8749                           wreg	equ	0xFE8
  8750                           indf1	equ	0xFE7
  8751                           postinc1	equ	0xFE6
  8752                           postdec1	equ	0xFE5
  8753                           fsr1h	equ	0xFE2
  8754                           fsr1l	equ	0xFE1
  8755                           indf2	equ	0xFDF
  8756                           postinc2	equ	0xFDE
  8757                           postdec2	equ	0xFDD
  8758                           plusw2	equ	0xFDB
  8759                           fsr2h	equ	0xFDA
  8760                           fsr2l	equ	0xFD9
  8761                           status	equ	0xFD8
  8762                           
  8763 ;; *************** function _Write_RTC *****************
  8764 ;; Defined at:
  8765 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;		None
  8768 ;; Auto vars:     Size  Location     Type
  8769 ;;		None
  8770 ;; Return value:  Size  Location     Type
  8771 ;;		None               void
  8772 ;; Registers used:
  8773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8774 ;; Tracked objects:
  8775 ;;		On entry : 0/0
  8776 ;;		On exit  : 0/0
  8777 ;;		Unchanged: 0/0
  8778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8783 ;;Total ram usage:        0 bytes
  8784 ;; Hardware stack levels used:    1
  8785 ;; Hardware stack levels required when called:    2
  8786 ;; This function calls:
  8787 ;;		_RtccWrOn
  8788 ;;		_RtccWriteDate
  8789 ;;		_RtccWriteTime
  8790 ;;		___awdiv
  8791 ;; This function is called by:
  8792 ;;		_Setup
  8793 ;;		_actualiza_elemento
  8794 ;;		_actualizar_minutos
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text55
  8799  00F87C                     __ptext55:
  8800                           	opt stack 0
  8801  00F87C                     _Write_RTC:
  8802                           	opt stack 23
  8803                           
  8804                           ;unmc_rtcc_02.c: 37: RtccWrOn();
  8805                           
  8806                           ;incstack = 0
  8807  00F87C  ECCA  F06F         	call	_RtccWrOn	;wreg free
  8808                           
  8809                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
  8810  00F880  80A3               	bsf	4003,0,c	;volatile
  8811                           
  8812                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
  8813  00F882  C0AC  F001         	movff	_segundo,___awdiv@dividend
  8814  00F886  C0AD  F002         	movff	_segundo+1,___awdiv@dividend+1
  8815  00F88A  0E00               	movlw	0
  8816  00F88C  6E04               	movwf	___awdiv@divisor+1,c
  8817  00F88E  0E0A               	movlw	10
  8818  00F890  6E03               	movwf	___awdiv@divisor,c
  8819  00F892  EC3A  F076         	call	___awdiv	;wreg free
  8820  00F896  5001               	movf	?___awdiv,w,c
  8821  00F898  6E5E               	movwf	_segundo_d,c
  8822                           
  8823                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
  8824  00F89A  505E               	movf	_segundo_d,w,c
  8825  00F89C  0D0A               	mullw	10
  8826  00F89E  50F3               	movf	prodl,w,c
  8827  00F8A0  0800               	sublw	0
  8828  00F8A2  0100               	movlb	0	; () banked
  8829  00F8A4  25AC               	addwf	_segundo& (0+255),w,b
  8830  00F8A6  0100               	movlb	0	; () banked
  8831  00F8A8  6FFE               	movwf	_segundo_u& (0+255),b
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
  8835  00F8AA  505E               	movf	_segundo_d,w,c
  8836  00F8AC  0D10               	mullw	16
  8837  00F8AE  50F3               	movf	prodl,w,c
  8838  00F8B0  0100               	movlb	0	; () banked
  8839  00F8B2  25FE               	addwf	_segundo_u& (0+255),w,b
  8840  00F8B4  6E51               	movwf	_RtccTime+1,c
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
  8844  00F8B6  C0F1  F001         	movff	_minuto,___awdiv@dividend
  8845  00F8BA  C0F2  F002         	movff	_minuto+1,___awdiv@dividend+1
  8846  00F8BE  0E00               	movlw	0
  8847  00F8C0  6E04               	movwf	___awdiv@divisor+1,c
  8848  00F8C2  0E0A               	movlw	10
  8849  00F8C4  6E03               	movwf	___awdiv@divisor,c
  8850  00F8C6  EC3A  F076         	call	___awdiv	;wreg free
  8851  00F8CA  5001               	movf	?___awdiv,w,c
  8852  00F8CC  0100               	movlb	0	; () banked
  8853  00F8CE  6FFC               	movwf	_minuto_d& (0+255),b
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
  8857  00F8D0  0100               	movlb	0	; () banked
  8858  00F8D2  51FC               	movf	_minuto_d& (0+255),w,b
  8859  00F8D4  0D0A               	mullw	10
  8860  00F8D6  50F3               	movf	prodl,w,c
  8861  00F8D8  0800               	sublw	0
  8862  00F8DA  0100               	movlb	0	; () banked
  8863  00F8DC  25F1               	addwf	_minuto& (0+255),w,b
  8864  00F8DE  0100               	movlb	0	; () banked
  8865  00F8E0  6FFD               	movwf	_minuto_u& (0+255),b
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
  8869  00F8E2  0100               	movlb	0	; () banked
  8870  00F8E4  51FC               	movf	_minuto_d& (0+255),w,b
  8871  00F8E6  0D10               	mullw	16
  8872  00F8E8  50F3               	movf	prodl,w,c
  8873  00F8EA  0100               	movlb	0	; () banked
  8874  00F8EC  25FD               	addwf	_minuto_u& (0+255),w,b
  8875  00F8EE  6E52               	movwf	_RtccTime+2,c
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
  8879  00F8F0  C0EF  F001         	movff	_hora,___awdiv@dividend
  8880  00F8F4  C0F0  F002         	movff	_hora+1,___awdiv@dividend+1
  8881  00F8F8  0E00               	movlw	0
  8882  00F8FA  6E04               	movwf	___awdiv@divisor+1,c
  8883  00F8FC  0E0A               	movlw	10
  8884  00F8FE  6E03               	movwf	___awdiv@divisor,c
  8885  00F900  EC3A  F076         	call	___awdiv	;wreg free
  8886  00F904  5001               	movf	?___awdiv,w,c
  8887  00F906  0100               	movlb	0	; () banked
  8888  00F908  6FF8               	movwf	_hora_d& (0+255),b
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
  8892  00F90A  0100               	movlb	0	; () banked
  8893  00F90C  51F8               	movf	_hora_d& (0+255),w,b
  8894  00F90E  0D0A               	mullw	10
  8895  00F910  50F3               	movf	prodl,w,c
  8896  00F912  0800               	sublw	0
  8897  00F914  0100               	movlb	0	; () banked
  8898  00F916  25EF               	addwf	_hora& (0+255),w,b
  8899  00F918  0100               	movlb	0	; () banked
  8900  00F91A  6FF9               	movwf	_hora_u& (0+255),b
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
  8904  00F91C  0100               	movlb	0	; () banked
  8905  00F91E  51F8               	movf	_hora_d& (0+255),w,b
  8906  00F920  0D10               	mullw	16
  8907  00F922  50F3               	movf	prodl,w,c
  8908  00F924  0100               	movlb	0	; () banked
  8909  00F926  25F9               	addwf	_hora_u& (0+255),w,b
  8910  00F928  6E53               	movwf	_RtccTime+3,c
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
  8914  00F92A  C05A  F001         	movff	_anio,___awdiv@dividend
  8915  00F92E  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
  8916  00F932  0E00               	movlw	0
  8917  00F934  6E04               	movwf	___awdiv@divisor+1,c
  8918  00F936  0E0A               	movlw	10
  8919  00F938  6E03               	movwf	___awdiv@divisor,c
  8920  00F93A  EC3A  F076         	call	___awdiv	;wreg free
  8921  00F93E  5001               	movf	?___awdiv,w,c
  8922  00F940  0100               	movlb	0	; () banked
  8923  00F942  6FF3               	movwf	_anio_d& (0+255),b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
  8927  00F944  0100               	movlb	0	; () banked
  8928  00F946  51F3               	movf	_anio_d& (0+255),w,b
  8929  00F948  0D0A               	mullw	10
  8930  00F94A  50F3               	movf	prodl,w,c
  8931  00F94C  0800               	sublw	0
  8932  00F94E  245A               	addwf	_anio,w,c
  8933  00F950  0100               	movlb	0	; () banked
  8934  00F952  6FF4               	movwf	_anio_u& (0+255),b
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
  8938  00F954  0100               	movlb	0	; () banked
  8939  00F956  51F3               	movf	_anio_d& (0+255),w,b
  8940  00F958  0D10               	mullw	16
  8941  00F95A  50F3               	movf	prodl,w,c
  8942  00F95C  0100               	movlb	0	; () banked
  8943  00F95E  25F4               	addwf	_anio_u& (0+255),w,b
  8944  00F960  6E4F               	movwf	_RtccDate+3,c
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
  8948  00F962  C05C  F001         	movff	_mes,___awdiv@dividend
  8949  00F966  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
  8950  00F96A  0E00               	movlw	0
  8951  00F96C  6E04               	movwf	___awdiv@divisor+1,c
  8952  00F96E  0E0A               	movlw	10
  8953  00F970  6E03               	movwf	___awdiv@divisor,c
  8954  00F972  EC3A  F076         	call	___awdiv	;wreg free
  8955  00F976  5001               	movf	?___awdiv,w,c
  8956  00F978  0100               	movlb	0	; () banked
  8957  00F97A  6FFA               	movwf	_mes_d& (0+255),b
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
  8961  00F97C  0100               	movlb	0	; () banked
  8962  00F97E  51FA               	movf	_mes_d& (0+255),w,b
  8963  00F980  0D0A               	mullw	10
  8964  00F982  50F3               	movf	prodl,w,c
  8965  00F984  0800               	sublw	0
  8966  00F986  245C               	addwf	_mes,w,c
  8967  00F988  0100               	movlb	0	; () banked
  8968  00F98A  6FFB               	movwf	_mes_u& (0+255),b
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
  8972  00F98C  0100               	movlb	0	; () banked
  8973  00F98E  51FA               	movf	_mes_d& (0+255),w,b
  8974  00F990  0D10               	mullw	16
  8975  00F992  50F3               	movf	prodl,w,c
  8976  00F994  0100               	movlb	0	; () banked
  8977  00F996  25FB               	addwf	_mes_u& (0+255),w,b
  8978  00F998  6E4E               	movwf	_RtccDate+2,c
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
  8982  00F99A  C0ED  F001         	movff	_dia,___awdiv@dividend
  8983  00F99E  C0EE  F002         	movff	_dia+1,___awdiv@dividend+1
  8984  00F9A2  0E00               	movlw	0
  8985  00F9A4  6E04               	movwf	___awdiv@divisor+1,c
  8986  00F9A6  0E0A               	movlw	10
  8987  00F9A8  6E03               	movwf	___awdiv@divisor,c
  8988  00F9AA  EC3A  F076         	call	___awdiv	;wreg free
  8989  00F9AE  5001               	movf	?___awdiv,w,c
  8990  00F9B0  0100               	movlb	0	; () banked
  8991  00F9B2  6FF6               	movwf	_fecha_d& (0+255),b
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
  8995  00F9B4  0100               	movlb	0	; () banked
  8996  00F9B6  51F6               	movf	_fecha_d& (0+255),w,b
  8997  00F9B8  0D0A               	mullw	10
  8998  00F9BA  50F3               	movf	prodl,w,c
  8999  00F9BC  0800               	sublw	0
  9000  00F9BE  0100               	movlb	0	; () banked
  9001  00F9C0  25ED               	addwf	_dia& (0+255),w,b
  9002  00F9C2  0100               	movlb	0	; () banked
  9003  00F9C4  6FF7               	movwf	_fecha_u& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
  9007  00F9C6  0100               	movlb	0	; () banked
  9008  00F9C8  51F6               	movf	_fecha_d& (0+255),w,b
  9009  00F9CA  0D10               	mullw	16
  9010  00F9CC  50F3               	movf	prodl,w,c
  9011  00F9CE  0100               	movlb	0	; () banked
  9012  00F9D0  25F7               	addwf	_fecha_u& (0+255),w,b
  9013  00F9D2  6E4D               	movwf	_RtccDate+1,c
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
  9017  00F9D4  C0E8  F0F5         	movff	_diasem,_dia_semana
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
  9021  00F9D8  C0E8  F04C         	movff	_diasem,_RtccDate
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
  9025  00F9DC  0E50               	movlw	low _RtccTime
  9026  00F9DE  6E01               	movwf	RtccWriteTime@pTm,c
  9027  00F9E0  0E00               	movlw	high _RtccTime
  9028  00F9E2  6E02               	movwf	RtccWriteTime@pTm+1,c
  9029  00F9E4  0E01               	movlw	1
  9030  00F9E6  6E03               	movwf	RtccWriteTime@di,c
  9031  00F9E8  ECEC  F079         	call	_RtccWriteTime	;wreg free
  9032                           
  9033                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
  9034  00F9EC  0E4C               	movlw	low _RtccDate
  9035  00F9EE  6E01               	movwf	RtccWriteDate@pDt,c
  9036  00F9F0  0E00               	movlw	high _RtccDate
  9037  00F9F2  6E02               	movwf	RtccWriteDate@pDt+1,c
  9038  00F9F4  0E01               	movlw	1
  9039  00F9F6  6E03               	movwf	RtccWriteDate@di,c
  9040  00F9F8  EC9B  F07B         	call	_RtccWriteDate	;wreg free
  9041                           
  9042                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
  9043  00F9FC  010F               	movlb	15	; () banked
  9044  00F9FE  8F3F               	bsf	63,7,b	;volatile
  9045                           
  9046                           ; BSR set to: 15
  9047  00FA00  0012               	return		;funcret
  9048  00FA02                     __end_of_Write_RTC:
  9049                           	opt stack 0
  9050                           tosu	equ	0xFFF
  9051                           tosh	equ	0xFFE
  9052                           tosl	equ	0xFFD
  9053                           pclath	equ	0xFFA
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           indf0	equ	0xFEF
  9061                           postinc0	equ	0xFEE
  9062                           fsr0h	equ	0xFEA
  9063                           fsr0l	equ	0xFE9
  9064                           wreg	equ	0xFE8
  9065                           indf1	equ	0xFE7
  9066                           postinc1	equ	0xFE6
  9067                           postdec1	equ	0xFE5
  9068                           fsr1h	equ	0xFE2
  9069                           fsr1l	equ	0xFE1
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           postdec2	equ	0xFDD
  9073                           plusw2	equ	0xFDB
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function ___awdiv *****************
  9079 ;; Defined at:
  9080 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  dividend        2    0[COMRAM] int 
  9083 ;;  divisor         2    2[COMRAM] int 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  quotient        2    6[COMRAM] int 
  9086 ;;  sign            1    5[COMRAM] unsigned char 
  9087 ;;  counter         1    4[COMRAM] unsigned char 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  2    0[COMRAM] int 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9098 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9100 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9101 ;;Total ram usage:        8 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; This function calls:
  9104 ;;		Nothing
  9105 ;; This function is called by:
  9106 ;;		_Write_RTC
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text56
  9111  00EC74                     __ptext56:
  9112                           	opt stack 0
  9113  00EC74                     ___awdiv:
  9114                           	opt stack 24
  9115                           
  9116                           ; BSR set to: 15
  9117                           ;incstack = 0
  9118  00EC74  0E00               	movlw	0
  9119  00EC76  6E06               	movwf	___awdiv@sign,c
  9120  00EC78  AE04               	btfss	___awdiv@divisor+1,7,c
  9121  00EC7A  D007               	goto	l2994
  9122  00EC7C  6C03               	negf	___awdiv@divisor,c
  9123  00EC7E  1E04               	comf	___awdiv@divisor+1,f,c
  9124  00EC80  B0D8               	btfsc	status,0,c
  9125  00EC82  2A04               	incf	___awdiv@divisor+1,f,c
  9126  00EC84  0E01               	movlw	1
  9127  00EC86  6E06               	movwf	___awdiv@sign,c
  9128  00EC88  D000               	goto	l2994
  9129  00EC8A                     l2994:
  9130  00EC8A  AE02               	btfss	___awdiv@dividend+1,7,c
  9131  00EC8C  D007               	goto	l3000
  9132  00EC8E  6C01               	negf	___awdiv@dividend,c
  9133  00EC90  1E02               	comf	___awdiv@dividend+1,f,c
  9134  00EC92  B0D8               	btfsc	status,0,c
  9135  00EC94  2A02               	incf	___awdiv@dividend+1,f,c
  9136  00EC96  0E01               	movlw	1
  9137  00EC98  1A06               	xorwf	___awdiv@sign,f,c
  9138  00EC9A  D000               	goto	l3000
  9139  00EC9C                     l3000:
  9140  00EC9C  0E00               	movlw	0
  9141  00EC9E  6E08               	movwf	___awdiv@quotient+1,c
  9142  00ECA0  0E00               	movlw	0
  9143  00ECA2  6E07               	movwf	___awdiv@quotient,c
  9144  00ECA4  5003               	movf	___awdiv@divisor,w,c
  9145  00ECA6  1004               	iorwf	___awdiv@divisor+1,w,c
  9146  00ECA8  B4D8               	btfsc	status,2,c
  9147  00ECAA  D021               	goto	l3022
  9148  00ECAC  0E01               	movlw	1
  9149  00ECAE  6E05               	movwf	___awdiv@counter,c
  9150  00ECB0  D005               	goto	l3008
  9151  00ECB2                     l3006:
  9152  00ECB2  90D8               	bcf	status,0,c
  9153  00ECB4  3603               	rlcf	___awdiv@divisor,f,c
  9154  00ECB6  3604               	rlcf	___awdiv@divisor+1,f,c
  9155  00ECB8  2A05               	incf	___awdiv@counter,f,c
  9156  00ECBA  D000               	goto	l3008
  9157  00ECBC                     l3008:
  9158  00ECBC  BE04               	btfsc	___awdiv@divisor+1,7,c
  9159  00ECBE  D002               	goto	l3010
  9160  00ECC0  D7F8               	goto	l3006
  9161  00ECC2  D000               	goto	l3010
  9162  00ECC4                     l3010:
  9163  00ECC4  90D8               	bcf	status,0,c
  9164  00ECC6  3607               	rlcf	___awdiv@quotient,f,c
  9165  00ECC8  3608               	rlcf	___awdiv@quotient+1,f,c
  9166  00ECCA  5003               	movf	___awdiv@divisor,w,c
  9167  00ECCC  5C01               	subwf	___awdiv@dividend,w,c
  9168  00ECCE  5004               	movf	___awdiv@divisor+1,w,c
  9169  00ECD0  5802               	subwfb	___awdiv@dividend+1,w,c
  9170  00ECD2  A0D8               	btfss	status,0,c
  9171  00ECD4  D006               	goto	l3018
  9172  00ECD6  5003               	movf	___awdiv@divisor,w,c
  9173  00ECD8  5E01               	subwf	___awdiv@dividend,f,c
  9174  00ECDA  5004               	movf	___awdiv@divisor+1,w,c
  9175  00ECDC  5A02               	subwfb	___awdiv@dividend+1,f,c
  9176  00ECDE  8007               	bsf	___awdiv@quotient,0,c
  9177  00ECE0  D000               	goto	l3018
  9178  00ECE2                     l3018:
  9179  00ECE2  90D8               	bcf	status,0,c
  9180  00ECE4  3204               	rrcf	___awdiv@divisor+1,f,c
  9181  00ECE6  3203               	rrcf	___awdiv@divisor,f,c
  9182  00ECE8  2E05               	decfsz	___awdiv@counter,f,c
  9183  00ECEA  D7EC               	goto	l3010
  9184  00ECEC  D000               	goto	l3022
  9185  00ECEE                     l3022:
  9186  00ECEE  5006               	movf	___awdiv@sign,w,c
  9187  00ECF0  B4D8               	btfsc	status,2,c
  9188  00ECF2  D005               	goto	l3026
  9189  00ECF4  6C07               	negf	___awdiv@quotient,c
  9190  00ECF6  1E08               	comf	___awdiv@quotient+1,f,c
  9191  00ECF8  B0D8               	btfsc	status,0,c
  9192  00ECFA  2A08               	incf	___awdiv@quotient+1,f,c
  9193  00ECFC  D000               	goto	l3026
  9194  00ECFE                     l3026:
  9195  00ECFE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9196  00ED02  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9197  00ED06  0012               	return	
  9198  00ED08  0012               	return		;funcret
  9199  00ED0A                     __end_of___awdiv:
  9200                           	opt stack 0
  9201                           tosu	equ	0xFFF
  9202                           tosh	equ	0xFFE
  9203                           tosl	equ	0xFFD
  9204                           pclath	equ	0xFFA
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           indf0	equ	0xFEF
  9212                           postinc0	equ	0xFEE
  9213                           fsr0h	equ	0xFEA
  9214                           fsr0l	equ	0xFE9
  9215                           wreg	equ	0xFE8
  9216                           indf1	equ	0xFE7
  9217                           postinc1	equ	0xFE6
  9218                           postdec1	equ	0xFE5
  9219                           fsr1h	equ	0xFE2
  9220                           fsr1l	equ	0xFE1
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           plusw2	equ	0xFDB
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _RtccWriteTime *****************
  9230 ;; Defined at:
  9231 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  pTm             2    0[COMRAM] PTR const struct .
  9234 ;;		 -> RtccTime(4), 
  9235 ;;  di              1    2[COMRAM] enum E7121
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  tempHourWDay    2    9[COMRAM] struct .
  9238 ;;  tempMinSec      2    7[COMRAM] struct .
  9239 ;;  wasWrEn         1    6[COMRAM] enum E7121
  9240 ;;  wasAlrm         1    5[COMRAM] enum E7121
  9241 ;;  wasOn           1    4[COMRAM] enum E7121
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  1    wreg      enum E7121
  9244 ;; Registers used:
  9245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9251 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9252 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9254 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9255 ;;Total ram usage:       11 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    1
  9258 ;; This function calls:
  9259 ;;		_RtccWrOn
  9260 ;; This function is called by:
  9261 ;;		_Write_RTC
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text57
  9266  00F3D8                     __ptext57:
  9267                           	opt stack 0
  9268  00F3D8                     _RtccWriteTime:
  9269                           	opt stack 23
  9270                           
  9271                           ;incstack = 0
  9272  00F3D8  0E00               	movlw	0
  9273  00F3DA  6E06               	movwf	RtccWriteTime@wasAlrm,c
  9274  00F3DC  EE20 F002          	lfsr	2,2
  9275  00F3E0  5001               	movf	RtccWriteTime@pTm,w,c
  9276  00F3E2  26D9               	addwf	fsr2l,f,c
  9277  00F3E4  5002               	movf	RtccWriteTime@pTm+1,w,c
  9278  00F3E6  22DA               	addwfc	fsr2h,f,c
  9279  00F3E8  0E5A               	movlw	90
  9280  00F3EA  60DF               	cpfslt	indf2,c
  9281  00F3EC  0012               	return	
  9282  00F3EE  EE20 F001          	lfsr	2,1
  9283  00F3F2  5001               	movf	RtccWriteTime@pTm,w,c
  9284  00F3F4  26D9               	addwf	fsr2l,f,c
  9285  00F3F6  5002               	movf	RtccWriteTime@pTm+1,w,c
  9286  00F3F8  22DA               	addwfc	fsr2h,f,c
  9287  00F3FA  0E5A               	movlw	90
  9288  00F3FC  60DF               	cpfslt	indf2,c
  9289  00F3FE  0012               	return	
  9290  00F400  EE20 F003          	lfsr	2,3
  9291  00F404  5001               	movf	RtccWriteTime@pTm,w,c
  9292  00F406  26D9               	addwf	fsr2l,f,c
  9293  00F408  5002               	movf	RtccWriteTime@pTm+1,w,c
  9294  00F40A  22DA               	addwfc	fsr2h,f,c
  9295  00F40C  0E24               	movlw	36
  9296  00F40E  64DF               	cpfsgt	indf2,c
  9297  00F410  D002               	goto	l2858
  9298  00F412  0012               	return	
  9299                           
  9300                           ;	Return value of _RtccWriteTime is never used
  9301  00F414  0012               	return	
  9302  00F416                     l2858:
  9303  00F416  EE20 F002          	lfsr	2,2
  9304  00F41A  5001               	movf	RtccWriteTime@pTm,w,c
  9305  00F41C  26D9               	addwf	fsr2l,f,c
  9306  00F41E  5002               	movf	RtccWriteTime@pTm+1,w,c
  9307  00F420  22DA               	addwfc	fsr2h,f,c
  9308  00F422  50DF               	movf	indf2,w,c
  9309  00F424  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  9310  00F426  EE20 F001          	lfsr	2,1
  9311  00F42A  5001               	movf	RtccWriteTime@pTm,w,c
  9312  00F42C  26D9               	addwf	fsr2l,f,c
  9313  00F42E  5002               	movf	RtccWriteTime@pTm+1,w,c
  9314  00F430  22DA               	addwfc	fsr2h,f,c
  9315  00F432  50DF               	movf	indf2,w,c
  9316  00F434  6E08               	movwf	RtccWriteTime@tempMinSec,c
  9317  00F436  5003               	movf	RtccWriteTime@di,w,c
  9318  00F438  B4D8               	btfsc	status,2,c
  9319  00F43A  D002               	goto	l2864
  9320  00F43C  9CF2               	bcf	intcon,6,c	;volatile
  9321  00F43E  D000               	goto	l2864
  9322  00F440                     l2864:
  9323  00F440  0E00               	movlw	0
  9324  00F442  BB3F               	btfsc	63,5,b	;volatile
  9325  00F444  0E01               	movlw	1
  9326  00F446  6E07               	movwf	RtccWriteTime@wasWrEn,c
  9327  00F448  5007               	movf	RtccWriteTime@wasWrEn,w,c
  9328  00F44A  A4D8               	btfss	status,2,c
  9329  00F44C  D003               	goto	l2868
  9330  00F44E  ECCA  F06F         	call	_RtccWrOn	;wreg free
  9331  00F452  D000               	goto	l2868
  9332  00F454                     l2868:
  9333  00F454  0E00               	movlw	0
  9334  00F456  BF3F               	btfsc	63,7,b	;volatile
  9335  00F458  0E01               	movlw	1
  9336  00F45A  6E05               	movwf	RtccWriteTime@wasOn,c
  9337  00F45C  5005               	movf	RtccWriteTime@wasOn,w,c
  9338  00F45E  B4D8               	btfsc	status,2,c
  9339  00F460  D007               	goto	l2874
  9340  00F462  0E00               	movlw	0
  9341  00F464  BE91               	btfsc	3985,7,c	;volatile
  9342  00F466  0E01               	movlw	1
  9343  00F468  6E06               	movwf	RtccWriteTime@wasAlrm,c
  9344  00F46A  010F               	movlb	15	; () banked
  9345  00F46C  9F3F               	bcf	63,7,b	;volatile
  9346  00F46E  D000               	goto	l2874
  9347  00F470                     l2874:
  9348  00F470  0EFC               	movlw	252
  9349  00F472  010F               	movlb	15	; () banked
  9350  00F474  173F               	andwf	63,f,b	;volatile
  9351  00F476  010F               	movlb	15	; () banked
  9352  00F478  813F               	bsf	63,0,b	;volatile
  9353                           
  9354                           ; BSR set to: 15
  9355  00F47A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  9356                           
  9357                           ; BSR set to: 15
  9358  00F47E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  9359                           
  9360                           ; BSR set to: 15
  9361  00F482  EE20 F003          	lfsr	2,3
  9362  00F486  5001               	movf	RtccWriteTime@pTm,w,c
  9363  00F488  26D9               	addwf	fsr2l,f,c
  9364  00F48A  5002               	movf	RtccWriteTime@pTm+1,w,c
  9365  00F48C  22DA               	addwfc	fsr2h,f,c
  9366  00F48E  50DF               	movf	indf2,w,c
  9367  00F490  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  9368                           
  9369                           ; BSR set to: 15
  9370  00F492  0EFC               	movlw	252
  9371  00F494  010F               	movlb	15	; () banked
  9372  00F496  173F               	andwf	63,f,b	;volatile
  9373                           
  9374                           ; BSR set to: 15
  9375  00F498  010F               	movlb	15	; () banked
  9376  00F49A  813F               	bsf	63,0,b	;volatile
  9377                           
  9378                           ; BSR set to: 15
  9379  00F49C  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  9380                           
  9381                           ; BSR set to: 15
  9382  00F4A0  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  9383                           
  9384                           ; BSR set to: 15
  9385  00F4A4  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  9386                           
  9387                           ; BSR set to: 15
  9388  00F4A8  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  9389                           
  9390                           ; BSR set to: 15
  9391  00F4AC  5005               	movf	RtccWriteTime@wasOn,w,c
  9392  00F4AE  B4D8               	btfsc	status,2,c
  9393  00F4B0  D00D               	goto	l2906
  9394                           
  9395                           ; BSR set to: 15
  9396  00F4B2  010F               	movlb	15	; () banked
  9397  00F4B4  8F3F               	bsf	63,7,b	;volatile
  9398                           
  9399                           ; BSR set to: 15
  9400  00F4B6  5006               	movf	RtccWriteTime@wasAlrm,w,c
  9401  00F4B8  B4D8               	btfsc	status,2,c
  9402  00F4BA  D002               	goto	l2902
  9403                           
  9404                           ; BSR set to: 15
  9405  00F4BC  8E91               	bsf	3985,7,c	;volatile
  9406  00F4BE  D000               	goto	l2902
  9407  00F4C0                     l2902:
  9408                           
  9409                           ; BSR set to: 15
  9410  00F4C0  5007               	movf	RtccWriteTime@wasWrEn,w,c
  9411  00F4C2  B4D8               	btfsc	status,2,c
  9412  00F4C4  D009               	goto	l2910
  9413                           
  9414                           ; BSR set to: 15
  9415  00F4C6  ECCA  F06F         	call	_RtccWrOn	;wreg free
  9416  00F4CA  D006               	goto	l2910
  9417  00F4CC                     l2906:
  9418  00F4CC  5007               	movf	RtccWriteTime@wasWrEn,w,c
  9419  00F4CE  A4D8               	btfss	status,2,c
  9420  00F4D0  D003               	goto	l2910
  9421  00F4D2  010F               	movlb	15	; () banked
  9422  00F4D4  9B3F               	bcf	63,5,b	;volatile
  9423                           
  9424                           ; BSR set to: 15
  9425  00F4D6  D000               	goto	l2910
  9426  00F4D8                     l2910:
  9427  00F4D8  5003               	movf	RtccWriteTime@di,w,c
  9428  00F4DA  B4D8               	btfsc	status,2,c
  9429  00F4DC  0012               	return	
  9430  00F4DE  8CF2               	bsf	intcon,6,c	;volatile
  9431  00F4E0  0012               	return	
  9432                           
  9433                           ;	Return value of _RtccWriteTime is never used
  9434  00F4E2  0012               	return		;funcret
  9435  00F4E4                     __end_of_RtccWriteTime:
  9436                           	opt stack 0
  9437                           tosu	equ	0xFFF
  9438                           tosh	equ	0xFFE
  9439                           tosl	equ	0xFFD
  9440                           pclath	equ	0xFFA
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           intcon	equ	0xFF2
  9448                           indf0	equ	0xFEF
  9449                           postinc0	equ	0xFEE
  9450                           fsr0h	equ	0xFEA
  9451                           fsr0l	equ	0xFE9
  9452                           wreg	equ	0xFE8
  9453                           indf1	equ	0xFE7
  9454                           postinc1	equ	0xFE6
  9455                           postdec1	equ	0xFE5
  9456                           fsr1h	equ	0xFE2
  9457                           fsr1l	equ	0xFE1
  9458                           indf2	equ	0xFDF
  9459                           postinc2	equ	0xFDE
  9460                           postdec2	equ	0xFDD
  9461                           plusw2	equ	0xFDB
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function _RtccWriteDate *****************
  9467 ;; Defined at:
  9468 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  pDt             2    0[COMRAM] PTR const struct .
  9471 ;;		 -> RtccDate(4), 
  9472 ;;  di              1    2[COMRAM] enum E7121
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  tempHourWDay    2   11[COMRAM] struct .
  9475 ;;  tempDayMonth    2    9[COMRAM] struct .
  9476 ;;  tempYear        2    6[COMRAM] struct .
  9477 ;;  wasWrEn         1    8[COMRAM] enum E7121
  9478 ;;  wasAlrm         1    5[COMRAM] enum E7121
  9479 ;;  wasOn           1    4[COMRAM] enum E7121
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      enum E7121
  9482 ;; Registers used:
  9483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9489 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9490 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9491 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9492 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9493 ;;Total ram usage:       13 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    1
  9496 ;; This function calls:
  9497 ;;		_RtccWrOn
  9498 ;; This function is called by:
  9499 ;;		_Write_RTC
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text58
  9504  00F736                     __ptext58:
  9505                           	opt stack 0
  9506  00F736                     _RtccWriteDate:
  9507                           	opt stack 23
  9508                           
  9509                           ;incstack = 0
  9510  00F736  0E00               	movlw	0
  9511  00F738  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9512  00F73A  EE20 F002          	lfsr	2,2
  9513  00F73E  5001               	movf	RtccWriteDate@pDt,w,c
  9514  00F740  26D9               	addwf	fsr2l,f,c
  9515  00F742  5002               	movf	RtccWriteDate@pDt+1,w,c
  9516  00F744  22DA               	addwfc	fsr2h,f,c
  9517  00F746  0E13               	movlw	19
  9518  00F748  60DF               	cpfslt	indf2,c
  9519  00F74A  0012               	return	
  9520  00F74C  EE20 F002          	lfsr	2,2
  9521  00F750  5001               	movf	RtccWriteDate@pDt,w,c
  9522  00F752  26D9               	addwf	fsr2l,f,c
  9523  00F754  5002               	movf	RtccWriteDate@pDt+1,w,c
  9524  00F756  22DA               	addwfc	fsr2h,f,c
  9525  00F758  50DF               	movf	indf2,w,c
  9526  00F75A  B4D8               	btfsc	status,2,c
  9527  00F75C  0012               	return	
  9528  00F75E  EE20 F001          	lfsr	2,1
  9529  00F762  5001               	movf	RtccWriteDate@pDt,w,c
  9530  00F764  26D9               	addwf	fsr2l,f,c
  9531  00F766  5002               	movf	RtccWriteDate@pDt+1,w,c
  9532  00F768  22DA               	addwfc	fsr2h,f,c
  9533  00F76A  0E32               	movlw	50
  9534  00F76C  60DF               	cpfslt	indf2,c
  9535  00F76E  0012               	return	
  9536  00F770  EE20 F001          	lfsr	2,1
  9537  00F774  5001               	movf	RtccWriteDate@pDt,w,c
  9538  00F776  26D9               	addwf	fsr2l,f,c
  9539  00F778  5002               	movf	RtccWriteDate@pDt+1,w,c
  9540  00F77A  22DA               	addwfc	fsr2h,f,c
  9541  00F77C  50DF               	movf	indf2,w,c
  9542  00F77E  B4D8               	btfsc	status,2,c
  9543  00F780  0012               	return	
  9544  00F782  EE20 F003          	lfsr	2,3
  9545  00F786  5001               	movf	RtccWriteDate@pDt,w,c
  9546  00F788  26D9               	addwf	fsr2l,f,c
  9547  00F78A  5002               	movf	RtccWriteDate@pDt+1,w,c
  9548  00F78C  22DA               	addwfc	fsr2h,f,c
  9549  00F78E  0E99               	movlw	153
  9550  00F790  64DF               	cpfsgt	indf2,c
  9551  00F792  D002               	goto	l2926
  9552  00F794  0012               	return	
  9553                           
  9554                           ;	Return value of _RtccWriteDate is never used
  9555  00F796  0012               	return	
  9556  00F798                     l2926:
  9557  00F798  EE20 F003          	lfsr	2,3
  9558  00F79C  5001               	movf	RtccWriteDate@pDt,w,c
  9559  00F79E  26D9               	addwf	fsr2l,f,c
  9560  00F7A0  5002               	movf	RtccWriteDate@pDt+1,w,c
  9561  00F7A2  22DA               	addwfc	fsr2h,f,c
  9562  00F7A4  50DF               	movf	indf2,w,c
  9563  00F7A6  6E07               	movwf	RtccWriteDate@tempYear,c
  9564  00F7A8  EE20 F001          	lfsr	2,1
  9565  00F7AC  5001               	movf	RtccWriteDate@pDt,w,c
  9566  00F7AE  26D9               	addwf	fsr2l,f,c
  9567  00F7B0  5002               	movf	RtccWriteDate@pDt+1,w,c
  9568  00F7B2  22DA               	addwfc	fsr2h,f,c
  9569  00F7B4  50DF               	movf	indf2,w,c
  9570  00F7B6  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  9571  00F7B8  EE20 F002          	lfsr	2,2
  9572  00F7BC  5001               	movf	RtccWriteDate@pDt,w,c
  9573  00F7BE  26D9               	addwf	fsr2l,f,c
  9574  00F7C0  5002               	movf	RtccWriteDate@pDt+1,w,c
  9575  00F7C2  22DA               	addwfc	fsr2h,f,c
  9576  00F7C4  50DF               	movf	indf2,w,c
  9577  00F7C6  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  9578  00F7C8  5003               	movf	RtccWriteDate@di,w,c
  9579  00F7CA  B4D8               	btfsc	status,2,c
  9580  00F7CC  D002               	goto	l2932
  9581  00F7CE  9CF2               	bcf	intcon,6,c	;volatile
  9582  00F7D0  D000               	goto	l2932
  9583  00F7D2                     l2932:
  9584  00F7D2  0E00               	movlw	0
  9585  00F7D4  BB3F               	btfsc	63,5,b	;volatile
  9586  00F7D6  0E01               	movlw	1
  9587  00F7D8  6E09               	movwf	RtccWriteDate@wasWrEn,c
  9588  00F7DA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9589  00F7DC  A4D8               	btfss	status,2,c
  9590  00F7DE  D003               	goto	l2936
  9591  00F7E0  ECCA  F06F         	call	_RtccWrOn	;wreg free
  9592  00F7E4  D000               	goto	l2936
  9593  00F7E6                     l2936:
  9594  00F7E6  0E00               	movlw	0
  9595  00F7E8  BF3F               	btfsc	63,7,b	;volatile
  9596  00F7EA  0E01               	movlw	1
  9597  00F7EC  6E05               	movwf	RtccWriteDate@wasOn,c
  9598  00F7EE  5005               	movf	RtccWriteDate@wasOn,w,c
  9599  00F7F0  B4D8               	btfsc	status,2,c
  9600  00F7F2  D007               	goto	l2942
  9601  00F7F4  0E00               	movlw	0
  9602  00F7F6  BE91               	btfsc	3985,7,c	;volatile
  9603  00F7F8  0E01               	movlw	1
  9604  00F7FA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9605  00F7FC  010F               	movlb	15	; () banked
  9606  00F7FE  9F3F               	bcf	63,7,b	;volatile
  9607  00F800  D000               	goto	l2942
  9608  00F802                     l2942:
  9609  00F802  0EFC               	movlw	252
  9610  00F804  010F               	movlb	15	; () banked
  9611  00F806  173F               	andwf	63,f,b	;volatile
  9612  00F808  010F               	movlb	15	; () banked
  9613  00F80A  813F               	bsf	63,0,b	;volatile
  9614                           
  9615                           ; BSR set to: 15
  9616  00F80C  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  9617                           
  9618                           ; BSR set to: 15
  9619  00F810  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  9620                           
  9621                           ; BSR set to: 15
  9622  00F814  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  9623  00F818  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  9624  00F81C  50DF               	movf	indf2,w,c
  9625  00F81E  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  9626                           
  9627                           ; BSR set to: 15
  9628  00F820  0EFC               	movlw	252
  9629  00F822  010F               	movlb	15	; () banked
  9630  00F824  173F               	andwf	63,f,b	;volatile
  9631                           
  9632                           ; BSR set to: 15
  9633  00F826  0E03               	movlw	3
  9634  00F828  010F               	movlb	15	; () banked
  9635  00F82A  133F               	iorwf	63,f,b	;volatile
  9636                           
  9637                           ; BSR set to: 15
  9638  00F82C  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  9639                           
  9640                           ; BSR set to: 15
  9641  00F830  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  9642                           
  9643                           ; BSR set to: 15
  9644  00F834  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  9645                           
  9646                           ; BSR set to: 15
  9647  00F838  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  9648                           
  9649                           ; BSR set to: 15
  9650  00F83C  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  9651                           
  9652                           ; BSR set to: 15
  9653  00F840  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  9654                           
  9655                           ; BSR set to: 15
  9656  00F844  5005               	movf	RtccWriteDate@wasOn,w,c
  9657  00F846  B4D8               	btfsc	status,2,c
  9658  00F848  D00D               	goto	l2978
  9659                           
  9660                           ; BSR set to: 15
  9661  00F84A  010F               	movlb	15	; () banked
  9662  00F84C  8F3F               	bsf	63,7,b	;volatile
  9663                           
  9664                           ; BSR set to: 15
  9665  00F84E  5006               	movf	RtccWriteDate@wasAlrm,w,c
  9666  00F850  B4D8               	btfsc	status,2,c
  9667  00F852  D002               	goto	l2974
  9668                           
  9669                           ; BSR set to: 15
  9670  00F854  8E91               	bsf	3985,7,c	;volatile
  9671  00F856  D000               	goto	l2974
  9672  00F858                     l2974:
  9673                           
  9674                           ; BSR set to: 15
  9675  00F858  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9676  00F85A  B4D8               	btfsc	status,2,c
  9677  00F85C  D009               	goto	l2982
  9678                           
  9679                           ; BSR set to: 15
  9680  00F85E  ECCA  F06F         	call	_RtccWrOn	;wreg free
  9681  00F862  D006               	goto	l2982
  9682  00F864                     l2978:
  9683  00F864  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9684  00F866  A4D8               	btfss	status,2,c
  9685  00F868  D003               	goto	l2982
  9686  00F86A  010F               	movlb	15	; () banked
  9687  00F86C  9B3F               	bcf	63,5,b	;volatile
  9688                           
  9689                           ; BSR set to: 15
  9690  00F86E  D000               	goto	l2982
  9691  00F870                     l2982:
  9692  00F870  5003               	movf	RtccWriteDate@di,w,c
  9693  00F872  B4D8               	btfsc	status,2,c
  9694  00F874  0012               	return	
  9695  00F876  9CF2               	bcf	intcon,6,c	;volatile
  9696  00F878  0012               	return	
  9697                           
  9698                           ;	Return value of _RtccWriteDate is never used
  9699  00F87A  0012               	return		;funcret
  9700  00F87C                     __end_of_RtccWriteDate:
  9701                           	opt stack 0
  9702                           tosu	equ	0xFFF
  9703                           tosh	equ	0xFFE
  9704                           tosl	equ	0xFFD
  9705                           pclath	equ	0xFFA
  9706                           tblptru	equ	0xFF8
  9707                           tblptrh	equ	0xFF7
  9708                           tblptrl	equ	0xFF6
  9709                           tablat	equ	0xFF5
  9710                           prodh	equ	0xFF4
  9711                           prodl	equ	0xFF3
  9712                           intcon	equ	0xFF2
  9713                           indf0	equ	0xFEF
  9714                           postinc0	equ	0xFEE
  9715                           fsr0h	equ	0xFEA
  9716                           fsr0l	equ	0xFE9
  9717                           wreg	equ	0xFE8
  9718                           indf1	equ	0xFE7
  9719                           postinc1	equ	0xFE6
  9720                           postdec1	equ	0xFE5
  9721                           fsr1h	equ	0xFE2
  9722                           fsr1l	equ	0xFE1
  9723                           indf2	equ	0xFDF
  9724                           postinc2	equ	0xFDE
  9725                           postdec2	equ	0xFDD
  9726                           plusw2	equ	0xFDB
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8
  9730                           
  9731 ;; *************** function _RtccWrOn *****************
  9732 ;; Defined at:
  9733 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;		None
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;  data            2    0        unsigned int 
  9738 ;; Return value:  Size  Location     Type
  9739 ;;		None               void
  9740 ;; Registers used:
  9741 ;;		wreg, status,2
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9751 ;;Total ram usage:        0 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_Write_RTC
  9757 ;;		_RtccWriteDate
  9758 ;;		_RtccWriteTime
  9759 ;; This function uses a non-reentrant model
  9760 ;;
  9761                           
  9762                           	psect	text59
  9763  00DF94                     __ptext59:
  9764                           	opt stack 0
  9765  00DF94                     _RtccWrOn:
  9766                           	opt stack 23
  9767                           
  9768                           ;incstack = 0
  9769  00DF94  9CF2               	bcf	intcon,6,c	;volatile
  9770  00DF96  0E55               	movlw	85
  9771  00DF98  6EA7               	movwf	4007,c	;volatile
  9772  00DF9A  0EAA               	movlw	170
  9773  00DF9C  6EA7               	movwf	4007,c	;volatile
  9774  00DF9E  010F               	movlb	15	; () banked
  9775  00DFA0  8B3F               	bsf	63,5,b	;volatile
  9776                           
  9777                           ; BSR set to: 15
  9778  00DFA2  8CF2               	bsf	intcon,6,c	;volatile
  9779                           
  9780                           ; BSR set to: 15
  9781  00DFA4  0012               	return		;funcret
  9782  00DFA6                     __end_of_RtccWrOn:
  9783                           	opt stack 0
  9784                           tosu	equ	0xFFF
  9785                           tosh	equ	0xFFE
  9786                           tosl	equ	0xFFD
  9787                           pclath	equ	0xFFA
  9788                           tblptru	equ	0xFF8
  9789                           tblptrh	equ	0xFF7
  9790                           tblptrl	equ	0xFF6
  9791                           tablat	equ	0xFF5
  9792                           prodh	equ	0xFF4
  9793                           prodl	equ	0xFF3
  9794                           intcon	equ	0xFF2
  9795                           indf0	equ	0xFEF
  9796                           postinc0	equ	0xFEE
  9797                           fsr0h	equ	0xFEA
  9798                           fsr0l	equ	0xFE9
  9799                           wreg	equ	0xFE8
  9800                           indf1	equ	0xFE7
  9801                           postinc1	equ	0xFE6
  9802                           postdec1	equ	0xFE5
  9803                           fsr1h	equ	0xFE2
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           plusw2	equ	0xFDB
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _Read_RTC *****************
  9814 ;; Defined at:
  9815 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;		None
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;		None
  9820 ;; Return value:  Size  Location     Type
  9821 ;;		None               void
  9822 ;; Registers used:
  9823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9833 ;;Total ram usage:        0 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    1
  9836 ;; This function calls:
  9837 ;;		_RtccReadDate
  9838 ;;		_RtccReadTime
  9839 ;; This function is called by:
  9840 ;;		_main
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           	psect	text60
  9845  00F4E4                     __ptext60:
  9846                           	opt stack 0
  9847  00F4E4                     _Read_RTC:
  9848                           	opt stack 29
  9849                           
  9850                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
  9851                           
  9852                           ; BSR set to: 15
  9853                           ;incstack = 0
  9854  00F4E4  0E50               	movlw	low _RtccTime
  9855  00F4E6  6E01               	movwf	RtccReadTime@pTm,c
  9856  00F4E8  0E00               	movlw	high _RtccTime
  9857  00F4EA  6E02               	movwf	RtccReadTime@pTm+1,c
  9858  00F4EC  ECDF  F072         	call	_RtccReadTime	;wreg free
  9859                           
  9860                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
  9861  00F4F0  5051               	movf	_RtccTime+1,w,c
  9862  00F4F2  0B0F               	andlw	15
  9863  00F4F4  0100               	movlb	0	; () banked
  9864  00F4F6  6FFE               	movwf	_segundo_u& (0+255),b
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9868  00F4F8  3851               	swapf	_RtccTime+1,w,c
  9869  00F4FA  0B0F               	andlw	15
  9870  00F4FC  0B0F               	andlw	15
  9871  00F4FE  6E5E               	movwf	_segundo_d,c
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
  9875  00F500  5052               	movf	_RtccTime+2,w,c
  9876  00F502  0B0F               	andlw	15
  9877  00F504  0100               	movlb	0	; () banked
  9878  00F506  6FFD               	movwf	_minuto_u& (0+255),b
  9879                           
  9880                           ; BSR set to: 0
  9881                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9882  00F508  3852               	swapf	_RtccTime+2,w,c
  9883  00F50A  0B0F               	andlw	15
  9884  00F50C  0B0F               	andlw	15
  9885  00F50E  0100               	movlb	0	; () banked
  9886  00F510  6FFC               	movwf	_minuto_d& (0+255),b
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
  9890  00F512  5053               	movf	_RtccTime+3,w,c
  9891  00F514  0B0F               	andlw	15
  9892  00F516  0100               	movlb	0	; () banked
  9893  00F518  6FF9               	movwf	_hora_u& (0+255),b
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9897  00F51A  3853               	swapf	_RtccTime+3,w,c
  9898  00F51C  0B0F               	andlw	15
  9899  00F51E  0B0F               	andlw	15
  9900  00F520  0100               	movlb	0	; () banked
  9901  00F522  6FF8               	movwf	_hora_d& (0+255),b
  9902                           
  9903                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
  9904  00F524  0E4C               	movlw	low _RtccDate
  9905  00F526  6E01               	movwf	RtccReadDate@pDt,c
  9906  00F528  0E00               	movlw	high _RtccDate
  9907  00F52A  6E02               	movwf	RtccReadDate@pDt+1,c
  9908  00F52C  ECAB  F075         	call	_RtccReadDate	;wreg free
  9909                           
  9910                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
  9911  00F530  504D               	movf	_RtccDate+1,w,c
  9912  00F532  0B0F               	andlw	15
  9913  00F534  0100               	movlb	0	; () banked
  9914  00F536  6FF7               	movwf	_fecha_u& (0+255),b
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9918  00F538  384D               	swapf	_RtccDate+1,w,c
  9919  00F53A  0B0F               	andlw	15
  9920  00F53C  0B0F               	andlw	15
  9921  00F53E  0100               	movlb	0	; () banked
  9922  00F540  6FF6               	movwf	_fecha_d& (0+255),b
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
  9926  00F542  504E               	movf	_RtccDate+2,w,c
  9927  00F544  0B0F               	andlw	15
  9928  00F546  0100               	movlb	0	; () banked
  9929  00F548  6FFB               	movwf	_mes_u& (0+255),b
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9933  00F54A  384E               	swapf	_RtccDate+2,w,c
  9934  00F54C  0B0F               	andlw	15
  9935  00F54E  0B0F               	andlw	15
  9936  00F550  0100               	movlb	0	; () banked
  9937  00F552  6FFA               	movwf	_mes_d& (0+255),b
  9938                           
  9939                           ; BSR set to: 0
  9940                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
  9941  00F554  C04C  F0F5         	movff	_RtccDate,_dia_semana
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
  9945  00F558  504F               	movf	_RtccDate+3,w,c
  9946  00F55A  0B0F               	andlw	15
  9947  00F55C  0100               	movlb	0	; () banked
  9948  00F55E  6FF4               	movwf	_anio_u& (0+255),b
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9952  00F560  384F               	swapf	_RtccDate+3,w,c
  9953  00F562  0B0F               	andlw	15
  9954  00F564  0B0F               	andlw	15
  9955  00F566  0100               	movlb	0	; () banked
  9956  00F568  6FF3               	movwf	_anio_d& (0+255),b
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
  9960  00F56A  505E               	movf	_segundo_d,w,c
  9961  00F56C  0D0A               	mullw	10
  9962  00F56E  0100               	movlb	0	; () banked
  9963  00F570  51FE               	movf	_segundo_u& (0+255),w,b
  9964  00F572  24F3               	addwf	prodl,w,c
  9965  00F574  0100               	movlb	0	; () banked
  9966  00F576  6FAC               	movwf	_segundo& (0+255),b
  9967  00F578  0100               	movlb	0	; () banked
  9968  00F57A  0E00               	movlw	0
  9969  00F57C  20F4               	addwfc	prodh,w,c
  9970  00F57E  0100               	movlb	0	; () banked
  9971  00F580  6FAD               	movwf	(_segundo+1)& (0+255),b
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
  9975  00F582  0100               	movlb	0	; () banked
  9976  00F584  51FC               	movf	_minuto_d& (0+255),w,b
  9977  00F586  0D0A               	mullw	10
  9978  00F588  0100               	movlb	0	; () banked
  9979  00F58A  51FD               	movf	_minuto_u& (0+255),w,b
  9980  00F58C  24F3               	addwf	prodl,w,c
  9981  00F58E  0100               	movlb	0	; () banked
  9982  00F590  6FF1               	movwf	_minuto& (0+255),b
  9983  00F592  0100               	movlb	0	; () banked
  9984  00F594  0E00               	movlw	0
  9985  00F596  20F4               	addwfc	prodh,w,c
  9986  00F598  0100               	movlb	0	; () banked
  9987  00F59A  6FF2               	movwf	(_minuto+1)& (0+255),b
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
  9991  00F59C  0100               	movlb	0	; () banked
  9992  00F59E  51F8               	movf	_hora_d& (0+255),w,b
  9993  00F5A0  0D0A               	mullw	10
  9994  00F5A2  0100               	movlb	0	; () banked
  9995  00F5A4  51F9               	movf	_hora_u& (0+255),w,b
  9996  00F5A6  24F3               	addwf	prodl,w,c
  9997  00F5A8  0100               	movlb	0	; () banked
  9998  00F5AA  6FEF               	movwf	_hora& (0+255),b
  9999  00F5AC  0100               	movlb	0	; () banked
 10000  00F5AE  0E00               	movlw	0
 10001  00F5B0  20F4               	addwfc	prodh,w,c
 10002  00F5B2  0100               	movlb	0	; () banked
 10003  00F5B4  6FF0               	movwf	(_hora+1)& (0+255),b
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
 10007  00F5B6  0100               	movlb	0	; () banked
 10008  00F5B8  51F6               	movf	_fecha_d& (0+255),w,b
 10009  00F5BA  0D0A               	mullw	10
 10010  00F5BC  0100               	movlb	0	; () banked
 10011  00F5BE  51F7               	movf	_fecha_u& (0+255),w,b
 10012  00F5C0  24F3               	addwf	prodl,w,c
 10013  00F5C2  0100               	movlb	0	; () banked
 10014  00F5C4  6FED               	movwf	_dia& (0+255),b
 10015  00F5C6  0100               	movlb	0	; () banked
 10016  00F5C8  0E00               	movlw	0
 10017  00F5CA  20F4               	addwfc	prodh,w,c
 10018  00F5CC  0100               	movlb	0	; () banked
 10019  00F5CE  6FEE               	movwf	(_dia+1)& (0+255),b
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
 10023  00F5D0  C0F5  F0E8         	movff	_dia_semana,_diasem
 10024  00F5D4  0100               	movlb	0	; () banked
 10025  00F5D6  6BE9               	clrf	(_diasem+1)& (0+255),b
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
 10029  00F5D8  0100               	movlb	0	; () banked
 10030  00F5DA  51FA               	movf	_mes_d& (0+255),w,b
 10031  00F5DC  0D0A               	mullw	10
 10032  00F5DE  0100               	movlb	0	; () banked
 10033  00F5E0  51FB               	movf	_mes_u& (0+255),w,b
 10034  00F5E2  24F3               	addwf	prodl,w,c
 10035  00F5E4  6E5C               	movwf	_mes,c
 10036  00F5E6  0100               	movlb	0	; () banked
 10037  00F5E8  0E00               	movlw	0
 10038  00F5EA  20F4               	addwfc	prodh,w,c
 10039  00F5EC  6E5D               	movwf	_mes+1,c
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
 10043  00F5EE  0100               	movlb	0	; () banked
 10044  00F5F0  51F3               	movf	_anio_d& (0+255),w,b
 10045  00F5F2  0D0A               	mullw	10
 10046  00F5F4  0100               	movlb	0	; () banked
 10047  00F5F6  51F4               	movf	_anio_u& (0+255),w,b
 10048  00F5F8  24F3               	addwf	prodl,w,c
 10049  00F5FA  6E5A               	movwf	_anio,c
 10050  00F5FC  0100               	movlb	0	; () banked
 10051  00F5FE  0E00               	movlw	0
 10052  00F600  20F4               	addwfc	prodh,w,c
 10053  00F602  6E5B               	movwf	_anio+1,c
 10054                           
 10055                           ; BSR set to: 0
 10056  00F604  0012               	return		;funcret
 10057  00F606                     __end_of_Read_RTC:
 10058                           	opt stack 0
 10059                           tosu	equ	0xFFF
 10060                           tosh	equ	0xFFE
 10061                           tosl	equ	0xFFD
 10062                           pclath	equ	0xFFA
 10063                           tblptru	equ	0xFF8
 10064                           tblptrh	equ	0xFF7
 10065                           tblptrl	equ	0xFF6
 10066                           tablat	equ	0xFF5
 10067                           prodh	equ	0xFF4
 10068                           prodl	equ	0xFF3
 10069                           intcon	equ	0xFF2
 10070                           indf0	equ	0xFEF
 10071                           postinc0	equ	0xFEE
 10072                           fsr0h	equ	0xFEA
 10073                           fsr0l	equ	0xFE9
 10074                           wreg	equ	0xFE8
 10075                           indf1	equ	0xFE7
 10076                           postinc1	equ	0xFE6
 10077                           postdec1	equ	0xFE5
 10078                           fsr1h	equ	0xFE2
 10079                           fsr1l	equ	0xFE1
 10080                           indf2	equ	0xFDF
 10081                           postinc2	equ	0xFDE
 10082                           postdec2	equ	0xFDD
 10083                           plusw2	equ	0xFDB
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function _RtccReadTime *****************
 10089 ;; Defined at:
 10090 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  pTm             2    0[COMRAM] PTR struct .
 10093 ;;		 -> RtccTime(4), 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  rTD0            8   10[COMRAM] struct .
 10096 ;;  rTD1            8    2[COMRAM] struct .
 10097 ;; Return value:  Size  Location     Type
 10098 ;;		None               void
 10099 ;; Registers used:
 10100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10107 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10109 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10110 ;;Total ram usage:       18 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_Read_RTC
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           	psect	text61
 10120  00E5BE                     __ptext61:
 10121                           	opt stack 0
 10122  00E5BE                     _RtccReadTime:
 10123                           	opt stack 29
 10124  00E5BE  0EFC               	movlw	252
 10125  00E5C0  010F               	movlb	15	; () banked
 10126  00E5C2  173F               	andwf	63,f,b	;volatile
 10127                           
 10128                           ; BSR set to: 15
 10129  00E5C4  010F               	movlb	15	; () banked
 10130  00E5C6  813F               	bsf	63,0,b	;volatile
 10131                           
 10132                           ; BSR set to: 15
 10133  00E5C8  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
 10134                           
 10135                           ; BSR set to: 15
 10136  00E5CC  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
 10137                           
 10138                           ; BSR set to: 15
 10139  00E5D0  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
 10140                           
 10141                           ; BSR set to: 15
 10142  00E5D4  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
 10143                           
 10144                           ; BSR set to: 15
 10145  00E5D8  0EFC               	movlw	252
 10146  00E5DA  010F               	movlb	15	; () banked
 10147  00E5DC  173F               	andwf	63,f,b	;volatile
 10148  00E5DE  010F               	movlb	15	; () banked
 10149  00E5E0  813F               	bsf	63,0,b	;volatile
 10150                           
 10151                           ; BSR set to: 15
 10152  00E5E2  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
 10153                           
 10154                           ; BSR set to: 15
 10155  00E5E6  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
 10156                           
 10157                           ; BSR set to: 15
 10158  00E5EA  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
 10159                           
 10160                           ; BSR set to: 15
 10161  00E5EE  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
 10162                           
 10163                           ; BSR set to: 15
 10164  00E5F2  5009               	movf	RtccReadTime@rTD1+6,w,c
 10165  00E5F4  1811               	xorwf	RtccReadTime@rTD0+6,w,c
 10166  00E5F6  A4D8               	btfss	status,2,c
 10167  00E5F8  D7E2               	goto	l3710
 10168                           
 10169                           ; BSR set to: 15
 10170                           
 10171                           ; BSR set to: 15
 10172  00E5FA  EE20 F003          	lfsr	2,3
 10173  00E5FE  5001               	movf	RtccReadTime@pTm,w,c
 10174  00E600  26D9               	addwf	fsr2l,f,c
 10175  00E602  5002               	movf	RtccReadTime@pTm+1,w,c
 10176  00E604  22DA               	addwfc	fsr2h,f,c
 10177  00E606  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
 10178  00E60A  EE20 F002          	lfsr	2,2
 10179  00E60E  5001               	movf	RtccReadTime@pTm,w,c
 10180  00E610  26D9               	addwf	fsr2l,f,c
 10181  00E612  5002               	movf	RtccReadTime@pTm+1,w,c
 10182  00E614  22DA               	addwfc	fsr2h,f,c
 10183  00E616  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
 10184  00E61A  EE20 F001          	lfsr	2,1
 10185  00E61E  5001               	movf	RtccReadTime@pTm,w,c
 10186  00E620  26D9               	addwf	fsr2l,f,c
 10187  00E622  5002               	movf	RtccReadTime@pTm+1,w,c
 10188  00E624  22DA               	addwfc	fsr2h,f,c
 10189  00E626  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
 10190                           
 10191                           ; BSR set to: 15
 10192  00E62A  0012               	return		;funcret
 10193  00E62C                     __end_of_RtccReadTime:
 10194                           	opt stack 0
 10195                           tosu	equ	0xFFF
 10196                           tosh	equ	0xFFE
 10197                           tosl	equ	0xFFD
 10198                           pclath	equ	0xFFA
 10199                           tblptru	equ	0xFF8
 10200                           tblptrh	equ	0xFF7
 10201                           tblptrl	equ	0xFF6
 10202                           tablat	equ	0xFF5
 10203                           prodh	equ	0xFF4
 10204                           prodl	equ	0xFF3
 10205                           intcon	equ	0xFF2
 10206                           indf0	equ	0xFEF
 10207                           postinc0	equ	0xFEE
 10208                           fsr0h	equ	0xFEA
 10209                           fsr0l	equ	0xFE9
 10210                           wreg	equ	0xFE8
 10211                           indf1	equ	0xFE7
 10212                           postinc1	equ	0xFE6
 10213                           postdec1	equ	0xFE5
 10214                           fsr1h	equ	0xFE2
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           postdec2	equ	0xFDD
 10219                           plusw2	equ	0xFDB
 10220                           fsr2h	equ	0xFDA
 10221                           fsr2l	equ	0xFD9
 10222                           status	equ	0xFD8
 10223                           
 10224 ;; *************** function _RtccReadDate *****************
 10225 ;; Defined at:
 10226 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;  pDt             2    0[COMRAM] PTR struct .
 10229 ;;		 -> RtccDate(4), 
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;  rTD0            8   10[COMRAM] struct .
 10232 ;;  rTD1            8    2[COMRAM] struct .
 10233 ;; Return value:  Size  Location     Type
 10234 ;;		None               void
 10235 ;; Registers used:
 10236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10243 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10245 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10246 ;;Total ram usage:       18 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_Read_RTC
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text62
 10256  00EB56                     __ptext62:
 10257                           	opt stack 0
 10258  00EB56                     _RtccReadDate:
 10259                           	opt stack 29
 10260  00EB56  0EFC               	movlw	252
 10261  00EB58  010F               	movlb	15	; () banked
 10262  00EB5A  173F               	andwf	63,f,b	;volatile
 10263  00EB5C  0E03               	movlw	3
 10264  00EB5E  010F               	movlb	15	; () banked
 10265  00EB60  133F               	iorwf	63,f,b	;volatile
 10266                           
 10267                           ; BSR set to: 15
 10268  00EB62  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 10269                           
 10270                           ; BSR set to: 15
 10271  00EB66  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 10272                           
 10273                           ; BSR set to: 15
 10274  00EB6A  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 10275                           
 10276                           ; BSR set to: 15
 10277  00EB6E  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 10278                           
 10279                           ; BSR set to: 15
 10280  00EB72  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 10281                           
 10282                           ; BSR set to: 15
 10283  00EB76  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 10284  00EB7A  0EFC               	movlw	252
 10285  00EB7C  010F               	movlb	15	; () banked
 10286  00EB7E  173F               	andwf	63,f,b	;volatile
 10287  00EB80  0E03               	movlw	3
 10288  00EB82  010F               	movlb	15	; () banked
 10289  00EB84  133F               	iorwf	63,f,b	;volatile
 10290                           
 10291                           ; BSR set to: 15
 10292  00EB86  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 10293                           
 10294                           ; BSR set to: 15
 10295  00EB8A  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 10296                           
 10297                           ; BSR set to: 15
 10298  00EB8E  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 10299                           
 10300                           ; BSR set to: 15
 10301  00EB92  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 10302                           
 10303                           ; BSR set to: 15
 10304  00EB96  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 10305                           
 10306                           ; BSR set to: 15
 10307  00EB9A  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 10308  00EB9E  5005               	movf	RtccReadDate@rTD1+2,w,c
 10309  00EBA0  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 10310  00EBA2  A4D8               	btfss	status,2,c
 10311  00EBA4  D7D8               	goto	l3736
 10312                           
 10313                           ; BSR set to: 15
 10314                           
 10315                           ; BSR set to: 15
 10316  00EBA6  EE20 F001          	lfsr	2,1
 10317  00EBAA  5001               	movf	RtccReadDate@pDt,w,c
 10318  00EBAC  26D9               	addwf	fsr2l,f,c
 10319  00EBAE  5002               	movf	RtccReadDate@pDt+1,w,c
 10320  00EBB0  22DA               	addwfc	fsr2h,f,c
 10321  00EBB2  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 10322  00EBB6  EE20 F002          	lfsr	2,2
 10323  00EBBA  5001               	movf	RtccReadDate@pDt,w,c
 10324  00EBBC  26D9               	addwf	fsr2l,f,c
 10325  00EBBE  5002               	movf	RtccReadDate@pDt+1,w,c
 10326  00EBC0  22DA               	addwfc	fsr2h,f,c
 10327  00EBC2  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 10328                           
 10329                           ; BSR set to: 15
 10330  00EBC6  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 10331  00EBCA  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 10332  00EBCE  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 10333                           
 10334                           ; BSR set to: 15
 10335  00EBD2  EE20 F003          	lfsr	2,3
 10336  00EBD6  5001               	movf	RtccReadDate@pDt,w,c
 10337  00EBD8  26D9               	addwf	fsr2l,f,c
 10338  00EBDA  5002               	movf	RtccReadDate@pDt+1,w,c
 10339  00EBDC  22DA               	addwfc	fsr2h,f,c
 10340  00EBDE  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 10341                           
 10342                           ; BSR set to: 15
 10343  00EBE2  0012               	return		;funcret
 10344  00EBE4                     __end_of_RtccReadDate:
 10345                           	opt stack 0
 10346                           tosu	equ	0xFFF
 10347                           tosh	equ	0xFFE
 10348                           tosl	equ	0xFFD
 10349                           pclath	equ	0xFFA
 10350                           tblptru	equ	0xFF8
 10351                           tblptrh	equ	0xFF7
 10352                           tblptrl	equ	0xFF6
 10353                           tablat	equ	0xFF5
 10354                           prodh	equ	0xFF4
 10355                           prodl	equ	0xFF3
 10356                           intcon	equ	0xFF2
 10357                           indf0	equ	0xFEF
 10358                           postinc0	equ	0xFEE
 10359                           fsr0h	equ	0xFEA
 10360                           fsr0l	equ	0xFE9
 10361                           wreg	equ	0xFE8
 10362                           indf1	equ	0xFE7
 10363                           postinc1	equ	0xFE6
 10364                           postdec1	equ	0xFE5
 10365                           fsr1h	equ	0xFE2
 10366                           fsr1l	equ	0xFE1
 10367                           indf2	equ	0xFDF
 10368                           postinc2	equ	0xFDE
 10369                           postdec2	equ	0xFDD
 10370                           plusw2	equ	0xFDB
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           tosu	equ	0xFFF
 10375                           tosh	equ	0xFFE
 10376                           tosl	equ	0xFFD
 10377                           pclath	equ	0xFFA
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           indf0	equ	0xFEF
 10386                           postinc0	equ	0xFEE
 10387                           fsr0h	equ	0xFEA
 10388                           fsr0l	equ	0xFE9
 10389                           wreg	equ	0xFE8
 10390                           indf1	equ	0xFE7
 10391                           postinc1	equ	0xFE6
 10392                           postdec1	equ	0xFE5
 10393                           fsr1h	equ	0xFE2
 10394                           fsr1l	equ	0xFE1
 10395                           indf2	equ	0xFDF
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           plusw2	equ	0xFDB
 10399                           fsr2h	equ	0xFDA
 10400                           fsr2l	equ	0xFD9
 10401                           status	equ	0xFD8
 10402                           
 10403                           	psect	text63
 10404  000000                     __ptext63:
 10405                           	opt stack 0
 10406                           tosu	equ	0xFFF
 10407                           tosh	equ	0xFFE
 10408                           tosl	equ	0xFFD
 10409                           pclath	equ	0xFFA
 10410                           tblptru	equ	0xFF8
 10411                           tblptrh	equ	0xFF7
 10412                           tblptrl	equ	0xFF6
 10413                           tablat	equ	0xFF5
 10414                           prodh	equ	0xFF4
 10415                           prodl	equ	0xFF3
 10416                           intcon	equ	0xFF2
 10417                           indf0	equ	0xFEF
 10418                           postinc0	equ	0xFEE
 10419                           fsr0h	equ	0xFEA
 10420                           fsr0l	equ	0xFE9
 10421                           wreg	equ	0xFE8
 10422                           indf1	equ	0xFE7
 10423                           postinc1	equ	0xFE6
 10424                           postdec1	equ	0xFE5
 10425                           fsr1h	equ	0xFE2
 10426                           fsr1l	equ	0xFE1
 10427                           indf2	equ	0xFDF
 10428                           postinc2	equ	0xFDE
 10429                           postdec2	equ	0xFDD
 10430                           plusw2	equ	0xFDB
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435                           	psect	rparam
 10436  0000                     tosu	equ	0xFFF
 10437                           tosh	equ	0xFFE
 10438                           tosl	equ	0xFFD
 10439                           pclath	equ	0xFFA
 10440                           tblptru	equ	0xFF8
 10441                           tblptrh	equ	0xFF7
 10442                           tblptrl	equ	0xFF6
 10443                           tablat	equ	0xFF5
 10444                           prodh	equ	0xFF4
 10445                           prodl	equ	0xFF3
 10446                           intcon	equ	0xFF2
 10447                           indf0	equ	0xFEF
 10448                           postinc0	equ	0xFEE
 10449                           fsr0h	equ	0xFEA
 10450                           fsr0l	equ	0xFE9
 10451                           wreg	equ	0xFE8
 10452                           indf1	equ	0xFE7
 10453                           postinc1	equ	0xFE6
 10454                           postdec1	equ	0xFE5
 10455                           fsr1h	equ	0xFE2
 10456                           fsr1l	equ	0xFE1
 10457                           indf2	equ	0xFDF
 10458                           postinc2	equ	0xFDE
 10459                           postdec2	equ	0xFDD
 10460                           plusw2	equ	0xFDB
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8


Data Sizes:
    Strings     301
    Constant    14
    Data        24
    BSS         154
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     70      95
    BANK0           160      0     159
    BANK1           256      0       8
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), comando(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_32(CODE[18]), STR_31(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 
		 -> STR_19(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    actualizar_password@confirmar	PTR int  size(2) Largest target is 2
		 -> cambiar_password@confirmar(COMRAM[2]), 

    verficar_password@verifica	PTR int  size(2) Largest target is 2
		 -> cambiar_password@verifica(COMRAM[2]), 

    actualizar_minutos@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualizar_hora@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_dia@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    actualiza_elemento@elemento	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@dato_fecha	PTR int  size(2) Largest target is 2
		 -> minuto(BANK0[2]), hora(BANK0[2]), anio(COMRAM[2]), mes(COMRAM[2]), 
		 -> dia(BANK0[2]), 

    guardar_elemento@doit	PTR FTN(PTR int ,const int ,)void  size(2) Largest target is 0
		 -> actualizar_minutos(), actualizar_hora(), actualiza_dia(), actualiza_elemento(), 

    guardar_elemento@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), 
		 -> tamanio_anio(BANK0[2]), 

    guardar_elemento@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@array	PTR unsigned char  size(2) Largest target is 3
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), 

    convertir_a_int@valor	PTR int  size(2) Largest target is 2
		 -> guardar_elemento@valor(COMRAM[2]), 

    guardar_tecla_presionada@letra	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 27
		 -> fecha@minutes(BANK0[3]), fecha@hour(BANK0[3]), fecha@year(BANK0[3]), fecha@month(BANK0[3]), 
		 -> fecha@day(BANK0[3]), STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), 
		 -> STR_24(CODE[2]), imprimir_tecla@aux(COMRAM[20]), STR_21(CODE[9]), STR_20(CODE[23]), 
		 -> STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), STR_15(CODE[22]), 
		 -> STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), STR_11(CODE[26]), 
		 -> STR_6(CODE[11]), STR_5(CODE[17]), ingresar_password@clear(COMRAM[16]), STR_4(CODE[4]), 
		 -> STR_3(CODE[3]), buffer2(BANK0[20]), 

    puntero_funcion	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), cambiar_hora(), cambiar_minutos(), cambiar_dia(), 
		 -> cambiar_mes(), cambiar_anio(), ingresar_comando(), confirmar_actualizar_password(), 
		 -> mostrar_guardar_nuevo_password(), mostrar_guardar_temporal_password(), mostrar_guardar_password(), 

    mostrar_titulo_menu@titulo_menu	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_20(CODE[23]), STR_18(CODE[20]), STR_17(CODE[27]), STR_16(CODE[19]), 
		 -> STR_15(CODE[22]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[19]), 

    caratula$528	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_21(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_temporal_password->_imprimir_tecla
    _mostrar_guardar_password->_imprimir_tecla
    _mostrar_guardar_nuevo_password->_imprimir_tecla
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _confirmar_actualizar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _cambiar_minutos->_guardar_elemento
    _cambiar_mes->_guardar_elemento
    _cambiar_hora->_guardar_elemento
    _cambiar_dia->_guardar_elemento
    _obtener_dia_mes->___awmod
    _cambiar_anio->_guardar_elemento
    _guardar_elemento->_sprintf
    _convertir_a_int->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _cambiar_password->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _cambiar_horario->_clear_display
    _cambiar_horario->_mostrar_titulo_menu
    _cambiar_fecha->_clear_display
    _cambiar_fecha->_mostrar_titulo_menu
    _mostrar_titulo_menu->_lcd_putrs
    _clear_display->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  368776
                                             68 COMRAM     2     2      0
                           _Read_RTC
                              _Setup
                               _atoi
                      _cambiar_fecha
                    _cambiar_horario
                   _cambiar_password
                           _caratula
                  _ingresar_password
                       _leer_teclado
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         5     3      2  311481
                                             63 COMRAM     5     3      2
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             4     0      4  154204
                                             59 COMRAM     4     0      4
                   Absolute function *
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
      _confirmar_actualizar_password *
                   _ingresar_comando *
     _mostrar_guardar_nuevo_password *
           _mostrar_guardar_password *
  _mostrar_guardar_temporal_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_temporal_password                    1     1      0   10320
                                             56 COMRAM     1     1      0
          _guardar_password_temporal
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_password_temporal                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0   10320
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_nuevo_password                       1     1      0   10320
                                             56 COMRAM     1     1      0
             _guardar_nuevo_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_nuevo_password                               3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    3525
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    3503
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _confirmar_actualizar_password                        1     1      0   10298
                                             56 COMRAM     1     1      0
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    6831
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      4     4      0   21689
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          4     4      0   21689
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         3     3      0   21665
                                             52 COMRAM     3     3      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          3     3      0   22217
                                             52 COMRAM     3     3      0
                   _guardar_elemento
                    _obtener_dia_mes
 ---------------------------------------------------------------------------------
 (4) _obtener_dia_mes                                      2     2      0     552
                                              6 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         4     4      0   21689
                                             52 COMRAM     4     4      0
                   _guardar_elemento
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento                                    17     7     10   21620
                                             35 COMRAM    17     7     10
                      _actualiza_dia *
                 _actualiza_elemento *
                    _actualizar_hora *
                 _actualizar_minutos *
                    _convertir_a_int
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _convertir_a_int                                      4     0      4    1011
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (6) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _actualizar_minutos                                   4     0      4    2407
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (5) _actualizar_hora                                      4     0      4    2621
                                             21 COMRAM     4     0      4
                 _actualiza_elemento
                   _inicializar_hora
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _actualiza_dia                                        4     0      4    2621
                                             21 COMRAM     4     0      4
                 _actualiza_elemento
                  _inicializar_fecha
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (6) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _actualiza_elemento                                   4     0      4    2577
                                             21 COMRAM     4     0      4
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    5791
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9094
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _cambiar_password                                     4     4      0   14947
                                             35 COMRAM     4     4      0
                _actualizar_password
                      _clear_display
                _mostrar_titulo_menu
                            _sprintf
                  _verficar_password
 ---------------------------------------------------------------------------------
 (2) _verficar_password                                    6     4      2     198
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3423
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _actualizar_password                                 12     9      3     329
                                              0 COMRAM    12     9      3
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cambiar_horario                                      0     0      0   10920
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (1) _cambiar_fecha                                        0     0      0   10920
                      _clear_display
                _mostrar_titulo_menu
 ---------------------------------------------------------------------------------
 (2) _mostrar_titulo_menu                                  2     0      2    5449
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        2     0      2    5471
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _lcd_putrs                                            2     0      2    3326
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             1     1      0    2257
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    1589
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (7) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (7) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (8) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _atoi
     ___wmul
     _isdigit
   _cambiar_fecha
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _cambiar_horario
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
   _cambiar_password
     _actualizar_password
       _restaurar_comando
     _clear_display
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _mostrar_titulo_menu
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _verficar_password
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _leer_teclado
     Absolute function(Fake) *
     _cambiar_anio *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_dia *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _obtener_dia_mes
         ___awmod
     _cambiar_hora *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_mes *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _cambiar_minutos *
       _guardar_elemento
         _actualiza_dia *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_fecha
           _restaurar_comando
         _actualiza_elemento *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _actualizar_hora *
           _actualiza_elemento
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _inicializar_hora
           _restaurar_comando
         _actualizar_minutos *
           _Write_RTC
             _RtccWrOn
             _RtccWriteDate
               _RtccWrOn
             _RtccWriteTime
               _RtccWrOn
             ___awdiv
         _convertir_a_int *
           _atoi
             ___wmul
             _isdigit
         _lcd_gotoxy *
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs *
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf *
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _confirmar_actualizar_password *
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _guardar_tecla_presionada *
       Absolute function(Fake) *
       _cambiar_anio *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_dia *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _obtener_dia_mes
           ___awmod
       _cambiar_hora *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_mes *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _cambiar_minutos *
         _guardar_elemento
           _actualiza_dia *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_fecha
             _restaurar_comando
           _actualiza_elemento *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _actualizar_hora *
             _actualiza_elemento
               _Write_RTC
                 _RtccWrOn
                 _RtccWriteDate
                   _RtccWrOn
                 _RtccWriteTime
                   _RtccWrOn
                 ___awdiv
             _inicializar_hora
             _restaurar_comando
           _actualizar_minutos *
             _Write_RTC
               _RtccWrOn
               _RtccWriteDate
                 _RtccWrOn
               _RtccWriteTime
                 _RtccWrOn
               ___awdiv
           _convertir_a_int *
             _atoi
               ___wmul
               _isdigit
           _lcd_gotoxy *
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs *
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf *
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _confirmar_actualizar_password *
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _mostrar_guardar_nuevo_password *
         _guardar_nuevo_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _mostrar_guardar_temporal_password *
         _guardar_password_temporal
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_nuevo_password *
       _guardar_nuevo_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _mostrar_guardar_temporal_password *
       _guardar_password_temporal
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _restaurar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       8       8        3.1%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      9F       5       99.4%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     46      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     106       6        0.0%
DATA                 0      0     106       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 15 23:55:50 2016

                    cambiar_hora@validacion 0035                           _verficar_password E8D6  
                                         _a 0098                                           _b 009C  
                                         _c 009E                                           _i 00A2  
                                         _j 00A4                                           _k 00A6  
                            ?_lcd_send_byte 0003                                ___awdiv@sign 0006  
                        ?_verficar_password 0001                         ___wmul@multiplicand 0003  
                               lcd_comand@d 0005                                __CFG_CP0$OFF 000000  
                ??_mostrar_guardar_password 0039                                         l524 FBC0  
                                       l356 E708                                         l372 EC5E  
                                       l364 EC0C                                         l380 F366  
                                       l373 EC5A                                         l365 EC08  
                                       l381 F362                                         l286 E246  
                                       l710 E372                                         l287 E248  
                                       l368 EC34                                         l384 F38E  
                                       l369 EC30                                         l393 F3BE  
                                       l385 F38A                                         l714 E2E6  
                                       l706 E32C                                         l388 F3A8  
                                       l733 E94C                                         l389 F3A4  
                                       l770 FCCA                        actualizar_password@j 0009  
                                       _dia 00ED                                         _day 0089  
                                       _key 004B                                         _mes 005C  
                              ___awmod@sign 0006                                         tosl 000FFD  
                                       wreg 000FE8                         ??_verficar_password 0003  
                           RtccReadDate@pDt 0001                    __size_of_actualizar_hora 001E  
                               lcd_gotoxy@x 0006                                 lcd_gotoxy@y 0005  
                 __size_of_cambiar_password 00DC           __end_of_guardar_password_temporal E374  
                                      l1070 EF44                                        l3000 EC9C  
                                      l3010 ECC4                                        l3006 ECB2  
                                      l3022 ECEE                                        l3008 ECBC  
                                      l3200 E456                                        l3112 EE7C  
                                      l3026 ECFE                                        l3018 ECE2  
                                      l3034 E114                                        l3130 EF0C  
                                      l3114 EE82                                        l3036 E11A  
                                      l3140 E3C0                                        l3204 E480  
                                      l3220 FBFE                                        l3132 EF12  
                                      l3124 EEC2                                        l3142 E3CC  
                                      l3150 E3F0                                        l3310 FE28  
                                      l3222 FC14                                        l3214 FBE6  
                                      l1447 E554                                        l3144 E3D8  
                                      l3312 FE2E                                        l3304 FE0A  
                                      l3216 FBF4                                        l3208 FBCC  
                                      l3320 FE8E                                        l3128 EED6  
                                      l4024 F3C6                                        l4032 EDC2  
                                      l1457 E44A                                        l3146 E3E4  
                                      l3170 E52A                                        l3250 FCF8  
                                      l3234 FC98                                        l3322 FEAA  
                                      l3226 FC32                                        l4050 EE10  
                                      l4042 EDF0                                        l3260 FD22  
                                      l3412 E6CC                                        l3404 E2B4  
                                      l4060 EE68                                        l4044 EDFE  
                                      l3166 E518                                        l3190 E428  
                                      l3318 FE82                                        l3254 FD12  
                                      l3238 FC9C                                        l4046 EE04  
                                      l3168 E522                                        l3280 FD94  
                                      l3264 FD46                                        l3256 FD16  
                                      l3432 FA9C                                        l4048 EE0A  
                                      l3522 DFBA                                        l3178 E548  
                                      l3194 E43E                                        l3186 E416  
                                      l3098 E0FE                                        l3290 FDBE  
                                      l3274 FD66                                        l3442 FB24  
                                      l3370 EAA4                                        l3362 EA7C  
                                      l3354 EA60                                        l4058 EE3E  
                                      l2820 DFA8                                        l3604 EA1C  
                                      l3188 E420                                        l3268 FD4A  
                                      l3620 EB12                                        l3444 FB36  
                                      l3364 EA86                                        l3710 E5BE  
                                      l2910 F4D8                                        l2902 F4C0  
                                      l3278 FD8A                                        l3622 EB22  
                                      l3614 EAE0                                        l3454 FB94  
                                      l3366 EA8E                                        l3374 EAB0  
                                      l3358 EA6E                                        l3550 E97E  
                                      l3542 E664                                        l3288 FDB6  
                                      l3296 FDE0                                        l3624 EB32  
                                      l3392 E2FA                                        l2906 F4CC  
                                      l3298 FDE8                                        l3650 E928  
                                      l3618 EB0C                                        l3458 FBA8  
                                      l3378 EAC0                                        l3538 E656  
                                      l3570 E81C                                        l2932 F7D2  
                                      l3652 E938                                        l3644 E8F0  
                                      l3492 F29A                                        l3476 F22A  
                                      l3388 E292                                        l3556 E994  
                                      l2942 F802                                        l2926 F798  
                                      l3590 E9F8                                        l3662 F656  
                                      l3910 F072                                        l3822 F11C  
                                      l3494 F2B6                                        l3486 F25E  
                                      l3478 F236                                        l3398 E340  
                                      l3574 E82A                                        l3736 EB56  
                                      l2936 F7E6                                        l2864 F440  
                                      l3648 E922                                        l3496 F2C2  
                                      l3488 F26A                                        l2874 F470  
                                      l2858 F416                                        l3586 E9F0  
                                      l3674 F6DA                                        l3666 F694  
                                      l3818 F108                                        l2868 F454  
                                      l3596 EA08                                        l3684 F712  
                                      l3668 F69A                                        l3908 F062  
                                      l3852 F1B4                                        l3828 F134  
                                      l2982 F870                                        l2974 F858  
                                      l3678 F6EE                                        l3918 F0AA  
                                      l3790 F016                                        l3856 F1CC  
                                      l3848 F1A0                                        l2978 F864  
                                      l2994 EC8A                                        l3876 ED7A  
                                      l3868 ED46                                        l3892 E7B6  
                                      l3788 F00C                                        STR_1 FFAC  
                                      STR_2 FFBB                                        STR_3 FFE7  
                                      STR_4 FFE3                                        STR_5 FF9B  
                                      STR_6 FFCA                                        STR_7 FFDE  
                                      STR_8 FFDE                                        STR_9 FFDE  
                           _guardar_comando E69A                           ?_inicializar_hora 0001  
                                      u2320 E476                                        u2330 E4A0  
                                      u3130 F6D2                                        u3310 F16E  
                                      u2327 E46C                                        u1800 E884  
                                      u3208 EC18                                        u2337 E496  
                                      u1820 E89E                                        u3238 EC42  
                                      u1840 E8BA                                        u1818 E886  
                                      u3178 EBF0                                        u3530 EE32  
                                      u1780 E86C                                        u2708 FB10  
                                      u1838 E8A0                                        u2670 FAB8  
                                      u3607 DFAA                                        u1858 E8BC  
                                      u2940 E588                                        u3468 F372  
                                      u2941 E584                                        u3557 F3CC  
                                      u1798 E86E                                        u2870 E4CC  
                                      u2950 E58A                                        u3567 FB2A  
                                      u2871 E4C8                                        u2880 E4CE  
                                      u3577 FBAE                                        u3587 F1BA  
                                      u3597 DFBC                            ?_lcd_send_nibble 0001  
                                      _anio 005A                                        _flag 02F8  
                                      _atoi EE7A                          ??_inicializar_hora 0001  
                                      _main EDB0                                        _hora 00EF  
                                      _hour 008C                                        _year 0095  
                                      fsr0h 000FEA                                        indf0 000FEF  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      indf1 000FE7                                        fsr1l 000FE1  
                                      indf2 000FDF                                        fsr2l 000FD9  
                             __CFG_T1DIG$ON 000000                  actualizar_minutos@elemento 0016  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 0000                               __CFG_IESO$OFF 000000  
                          RtccReadDate@rTD0 000B                            RtccReadDate@rTD1 0003  
                 __end_of_verficar_password E94E                  __end_of_actualiza_elemento DFF4  
                              ___param_bank 000010                             RtccReadTime@pTm 0001  
                      __size_of_cambiar_dia 005A                        __size_of_cambiar_mes 006E  
                         _inicializar_fecha E1FC                                 _Delay1KTCYx DFB8  
                             __CFG_PLLDIV$1 000000                                       ?_atoi 0007  
                                     ?_main 0001                             __end_of___awdiv ED0A  
                        ?_inicializar_fecha 0001                                       STR_10 FFDE  
                                     STR_11 FEE4                                       STR_12 FF52  
                                     STR_20 FEFE                                       STR_21 FFD5  
                                     STR_13 FF89                                       STR_22 FFDE  
                                     STR_30 FFF4                                       STR_14 FF77  
                                     STR_31 FFDE                                       STR_23 FFDE  
                                     STR_15 FF15                                       STR_24 FFEC  
                                     STR_32 FF65                                       STR_16 FF3F  
                                     STR_25 FFEE                                       STR_17 FEC9  
                                     STR_26 FFF0                                       STR_18 FF2B  
                                     STR_19 FFDE                                       STR_27 FFF2  
                                     STR_28 FFEC                             __end_of___awmod EACC  
                                     STR_29 FFEA                       __size_of_Delay100TCYx 0012  
                          _guardar_elemento FA02                             ___awdiv@divisor 0003  
                           __end_of___lwdiv E55E                             __end_of___lwmod E454  
                         _restaurar_comando E00C                             ___awdiv@counter 0005  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94             ??_confirmar_actualizar_password 0039  
                             ?_leer_teclado 0040                          ?_restaurar_comando 0001  
                            __CFG_FCMEN$OFF 000000                                       _Setup E374  
                       ??_inicializar_fecha 0001                              _ocultar_teclas 00A8  
                           __end_of_dpowers FEC5                                       _mes_d 00FA  
                                     _mes_u 00FB                             __end_of_isdigit E108  
                                     _month 0092                                       atoi@a 000C  
                                     atoi@s 0007                              __pbitbssCOMRAM 02F8  
    __end_of_mostrar_guardar_nuevo_password E1FC     __size_of_mostrar_guardar_nuevo_password 002C  
            _mostrar_guardar_nuevo_password E1D0                                       pclath 000FFA  
                                     tablat 000FF5                           ??_convertir_a_int 0012  
                       ??_restaurar_comando 0001                                       plusw2 000FDB  
                              lcd_putrs@ptr 0009                                       status 000FD8  
                           __end_of_sprintf FEBA                           validar_password@i 0003  
                   __CFG_DSWDTOSC$INTOSCREF 000000                       __end_of_actualiza_dia E048  
                           __initialization E70A                                _Delay100TCYx DFA6  
                 __end_of_inicializar_fecha E22A                                __end_of_atoi EF4E  
                              __end_of_main EE7A                             ??_lcd_send_byte 0004  
                __end_of_actualizar_minutos E0C4                            RtccReadTime@rTD0 000B  
                          RtccReadTime@rTD1 0003                            __end_of_Read_RTC F606  
                  _guardar_current_password E2E8                   __size_of_ingresar_comando 000A  
                 __end_of_restaurar_comando E02A                           cambiar_anio@tecla 0037  
                     __size_of_cambiar_anio 007C                       __size_of_cambiar_hora 0060  
                                    ??_atoi 0009                                      ??_main 0045  
                             __activetblptr 000002                              ??_leer_teclado 0042  
                   __end_of_guardar_comando E70A                            __end_of_RtccWrOn DFA6  
              __size_of_mostrar_titulo_menu 0018                     actualizar_minutos@valor 0018  
                                    ?_Setup 0001                                      _ADCON0 000FC2  
                                    _ADCON1 000FC1                                      _EECON2 000FA7  
                                    _ANCON0 000F48                                      _ANCON1 000F49  
                          ___awdiv@dividend 0001                              __CFG_WDTEN$OFF 000000  
                          RtccWriteDate@pDt 0001                           ??_actualizar_hora 001A  
                                    _RTCCFG 000F3F                              __CFG_WPCFG$OFF 000000  
    mostrar_guardar_temporal_password@tecla 0039                       __end_of_clear_display E0E6  
                          __end_of_caratula F024                        cambiar_minutos@tecla 0037  
                            __CFG_WPDIS$OFF 000000                              __CFG_XINST$OFF 000000  
                __size_of_verficar_password 0078                            _cambiar_mes$1246 0038  
                              _cambiar_anio E94E                                _cambiar_hora E55E  
                          __end_of_lcd_init EA4A              guardar_password_temporal@valor 0003  
                          __end_of_lcd_putc E408                           ?_validar_password 0001  
                                    ___wmul E150                                   ??___awdiv 0005  
                            __CFG_STVREN$ON 000000                                   ??___awmod 0005  
                                    _diasem 00E8                                      _anio_d 00F3  
                                    _anio_u 00F4                                   ??___lwdiv 0005  
                                 ??___lwmod 000C                          ??_validar_password 0001  
                                    _hora_d 00F8                                      _hora_u 00F9  
                                    clear_0 E710                                      clear_1 E71C  
                                    clear_2 E72A                            ___awdiv@quotient 0007  
                                    _minuto 00F1            __end_of_mostrar_guardar_password E1D0  
                           ___awmod@divisor 0003                             ___awmod@counter 0005  
                         cambiar_hora@tecla 0037                       __end_of_RtccWriteDate F87C  
                  __size_of_cambiar_horario 0072                       __end_of_RtccWriteTime F4E4  
                          RtccWriteTime@pTm 0001                    __size_of_cambiar_minutos 0074  
                  _guardar_tecla_presionada EBE4                                __pdataCOMRAM 005A  
                                 ??_isdigit 0001                            ??_imprimir_tecla 0024  
 __end_of_mostrar_guardar_temporal_password E1A4  __size_of_mostrar_guardar_temporal_password 002C  
       ??_mostrar_guardar_temporal_password 0039          ?_mostrar_guardar_temporal_password 0001  
         _mostrar_guardar_temporal_password E178                                __mediumconst FEBA  
                                    tblptrh 000FF7                                      tblptrl 000FF6  
                                    tblptru 000FF8                            _cambiar_password F024  
                                 ??_sprintf 0017                                  __accesstop 0060  
                   __end_of__initialization E770                          __size_of_Write_RTC 0186  
                             ___rparam_used 000001                                _caratula$528 0026  
                            __pcstackCOMRAM 0001                               __end_of_Setup E3BC  
                __size_of_inicializar_fecha 002E                                __pidataBANK0 DFCA  
               __end_of_actualizar_password F736                             __CFG_DSWDTPS$G2 000000  
                __size_of_restaurar_comando 001E                    __size_of_obtener_dia_mes 00EA  
                       leer_teclado@ocultar 0040                   cambiar_password@confirmar 0024  
            mostrar_titulo_menu@titulo_menu 000B                             __CFG_OSC$INTOSC 000000  
                          ?_guardar_comando 0001                   actualizar_password@j_1538 000B  
                                   ??_Setup 000E                      __size_of_cambiar_fecha 00A6  
                         lcd_gotoxy@address 0007                          __size_of_lcd_putrs 0054  
                              sprintf@width 0021                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                   ?_Read_RTC 0001  
                           _tamanio_comando 00AE                                  _dia_semana 00F5  
                 RtccWriteTime@tempHourWDay 000A                                  __pnvCOMRAM 005E  
                        actualiza_dia@valor 0018                    __end_of_guardar_elemento FBC2  
                           _tamanio_minutos 00DD                        __end_of_leer_teclado F3D8  
                                 ?_RtccWrOn 0001                              lcd_send_byte@n 0003  
                                   ?___wmul 0001                               ?_RtccReadDate 0001  
                 __size_of_inicializar_hora 0020                               ?_RtccReadTime 0001  
                          _ingresar_comando DF7C                                ?_Delay1KTCYx 0001  
                        guardar_comando@aux 0026                           __end_of_Write_RTC FA02  
                        _actualiza_elemento DFDE                             _convertir_a_int E066  
                     cambiar_mes@validacion 0035                                  _lcd_comand DF86  
                                 ?_caratula 0024                    actualizar_password@valor 0003  
                                _lcd_gotoxy E108                                     _RTCVALH 000F99  
                                   _RTCVALL 000F98                           ??_cambiar_horario 000D  
                       ?_actualiza_elemento 0016                                   ?_lcd_init 0001  
                         ??_cambiar_minutos 0035                                   ?_lcd_putc 0001  
                ?_guardar_password_temporal 0001                    cambiar_password@verifica 0026  
                                ??_Read_RTC 0013           __size_of_mostrar_guardar_password 002C  
                 ?_mostrar_guardar_password 0001                  ??_guardar_current_password 0001  
                         _cambiar_anio$1250 0038                  actualiza_elemento@elemento 0016  
                                   __Hparam 0000                               ??_cambiar_dia 0035  
                       _mostrar_titulo_menu DFF4                               ??_cambiar_mes 0035  
                                   __Lparam 0000                               _cambiar_fecha ED0A  
                  __size_of_lcd_send_nibble 0076                                  ??_RtccWrOn 0001  
                      guardar_comando@tecla 003A                        guardar_elemento@doit 002C  
                            ??_RtccReadDate 0003                                  _autorizado 009A  
                      ??_actualiza_elemento 0012                              ??_RtccReadTime 0003  
                                   ___awdiv EC74                           __end_of_lcd_putrs E4A8  
                                   ___awmod EA4A                             __size_of___wmul 0028  
                                   ___lwdiv E502                                     ___lwmod E408  
                               _RtccTimeVal 0085                                  fecha@month 00D5  
                                   __pcinit E70A                                     _fecha_d 00F6  
                                   _fecha_u 00F7                                     __ramtop 0F00  
             mostrar_guardar_password@tecla 0039                                     __ptext0 EDB0  
                                   __ptext1 F2D0                                     __ptext2 EBE4  
                                   __ptext3 DF7C                                     __ptext4 E12C  
                                   __ptext5 E1D0                                     __ptext6 E1A4  
                                   __ptext7 E55E                                     __ptext8 E7EC  
                                   __ptext9 E4A8                                     _buffer2 00B8  
                                   _comando 00EA                                   _T1CONbits 000FCD  
                                   _dpowers FEBB                                     _isdigit E0E6  
                           _actualizar_hora E048                            ___awmod@dividend 0001  
                                ??_caratula 0026                        ?_mostrar_titulo_menu 000B  
                                   _minutes 008F                          _actualizar_minutos E0A4  
                                   _segundo 00AC                           ??_obtener_dia_mes 0007  
                                   _sprintf FBC2                    ??_guardar_nuevo_password 0001  
                                ??_lcd_init 0005                                  ??_lcd_putc 0008  
                      end_of_initialization E770                         ?_actualizar_minutos 0016  
                      lcd_send_byte@address 0004                               __Lmediumconst FEBA  
                   actualiza_elemento@valor 0018                  guardar_elemento@dato_fecha 002A  
                            ?_cambiar_fecha 0001                                     postdec1 000FE5  
                                   postdec2 000FDD                  ??_guardar_tecla_presionada 0040  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                    __end_of_cambiar_password F100  
                      _tamanio_new_password 0047                     __end_of_convertir_a_int E084  
                     __end_of_lcd_send_byte E25C                        ??_actualizar_minutos 001A  
                       __end_of_cambiar_dia E502                         __end_of_cambiar_mes E69A  
                                 _PORTAbits 000F80                                   _PORTCbits 000F82  
                          __CFG_DSBOREN$OFF 000000                       ??_mostrar_titulo_menu 000D  
                               ?_lcd_comand 0001                            __CFG_CPUDIV$OSC1 000000  
                        ingresar_password@i 001E                                   _TRISBbits 000F93  
                               ?_lcd_gotoxy 0005                   __size_of_validar_password 008A  
                    __size_of_actualiza_dia 001E                             _LCD_INIT_STRING FEC5  
                      convertir_a_int@array 000E                        convertir_a_int@valor 0010  
       mostrar_guardar_nuevo_password@tecla 0039                       __size_of_leer_teclado 0108  
                          _current_password 0070                            __CFG_IOL1WAY$OFF 000000  
                 RtccWriteDate@tempDayMonth 000A                         __CFG_MSSP7B_EN$MSK7 000000  
                             leer_teclado@i 0043                            Delay100TCYx@unit 0001  
                          _inicializar_hora E084                     __end_of_actualizar_hora E066  
                            __end_of___wmul E178                               __pidataCOMRAM DF78  
                 RtccWriteDate@tempHourWDay 000C                       actualiza_dia@elemento 0016  
                         ??_lcd_send_nibble 0001                        __size_of_Delay1KTCYx 0012  
                          __CFG_DSWDTEN$OFF 000000                            cambiar_dia@tecla 0037  
                    __size_of_clear_display 0022                         start_initialization E70A  
                        main@ocultar_teclas 0045                                _leer_teclado F2D0  
                      __end_of_RtccReadDate EBE4                        __end_of_RtccReadTime E62C  
           __size_of_guardar_nuevo_password 0046                    __end_of_ingresar_comando DF86  
                      RtccWriteTime@wasAlrm 0006                             _puntero_funcion 00AA  
                      RtccWriteTime@wasWrEn 0007            __end_of_guardar_current_password E32E  
                           ??_cambiar_fecha 000D               guardar_current_password@valor 0003  
                    __size_of_RtccWriteDate 0146                             RtccWriteDate@di 0003  
                         ?_guardar_elemento 0024                      __size_of_RtccWriteTime 010C  
                         __size_of_Read_RTC 0122                  guardar_elemento@validacion 0028  
                               _cambiar_dia E4A8                         __size_of_lcd_comand 000E  
                        ??_guardar_elemento 002E                                 _cambiar_mes E62C  
                          cambiar_mes@tecla 0037                               _actualiza_dia E02A  
                       __size_of_lcd_gotoxy 0024                                    ??___wmul 0005  
                          ?_convertir_a_int 000E                                 __pdataBANK0 00DF  
                         __size_of_RtccWrOn 0012                             RtccWriteTime@di 0003  
                          __CFG_LPT1OSC$OFF 000000                             _cambiar_horario E77A  
                           _cambiar_minutos E7EC                                 _ALRMCFGbits 000F91  
                   __end_of_LCD_INIT_STRING FEC9                                 __pbssCOMRAM 0047  
              __size_of_actualizar_password 0130                                   _Write_RTC F87C  
                              _isdigit$2543 0002                           __size_of_caratula 00D6  
                           Delay1KTCYx@unit 0001                              fecha@valor_max 00B4  
                            fecha@valor_min 00B6                 ??_guardar_password_temporal 0001  
                  __size_of_guardar_comando 0070                           __size_of_lcd_init 0080  
     __end_of_confirmar_actualizar_password E150      __size_of_confirmar_actualizar_password 0024  
             _confirmar_actualizar_password E12C                                 sprintf@flag 0020  
                         __size_of_lcd_putc 004C                                 sprintf@prec 001B  
                   __size_of_imprimir_tecla 0046                                fecha@minutes 00D2  
                                 __pnvBANK0 00F3                            _tamanio_password 0049  
                             _clear_display E0C4                            ___lwdiv@dividend 0001  
                        verficar_password@i 0005                              ?_actualiza_dia 0016  
                             ?_Delay100TCYx 0001            __end_of_guardar_tecla_presionada EC74  
                             __pmediumconst FEBA                                    ?___awdiv 0001  
                                  ?___awmod 0001                      _guardar_nuevo_password E2A2  
                         guardar_elemento@i 0031                                    ?___lwdiv 0001  
                                  ?___lwmod 0008                                   _encendida 00A0  
                          ?_actualizar_hora 0016                     RtccWriteTime@tempMinSec 0008  
                           _obtener_dia_mes F1E6                 guardar_nuevo_password@valor 0003  
                                 _lcd_putrs E454                               _RtccWriteDate F736  
                             _RtccWriteTime F3D8                                    ?_isdigit 0001  
                      __CFG_RTCOSC$T1OSCREF 000000                     actualizar_hora@elemento 0016  
                          _validar_password EACC                              __size_of_Setup 0048  
                                ?_Write_RTC 0001                            ___lwdiv@quotient 0005  
                          clear_display@pos 000B                                   fecha@hour 00CF  
                                  ?_sprintf 000D                                   fecha@year 00D8  
                         _ingresar_password F100                            _RtccAlrmTimeDate 0060  
                            ___wmul@product 0005                                    _LATAbits 000F89  
                                  _LATBbits 000F8A                          ?_ingresar_password 0001  
                            ?_clear_display 000B                                    _PIE3bits 000FA3  
                                 _segundo_d 005E                              ??_Delay100TCYx 0001  
                                 _segundo_u 00FE                               ?_cambiar_anio 0001  
                   __end_of_cambiar_horario E7EC                               ?_cambiar_hora 0001  
                   __end_of_cambiar_minutos E860                                _new_password 0077  
                          __CFG_WDTPS$32768 000000                         ??_ingresar_password 000B  
                                 _valor_max 00B0                                   _valor_min 00B2  
               __size_of_actualiza_elemento 0016                          RtccWriteDate@wasOn 0005  
                         ?_cambiar_password 0001                   cambiar_minutos@validacion 0035  
                 guardar_tecla_presionada@i 003E                   _guardar_password_temporal E32E  
                        _Rtcc_read_TimeDate 0100                          ??_cambiar_password 0024  
                            ?_RtccWriteDate 0001                                  ?_lcd_putrs 0009  
                         ___wmul@multiplier 0001                              ?_RtccWriteTime 0001  
         __size_of_guardar_current_password 0046                              caratula@titulo 0024  
        confirmar_actualizar_password@tecla 0039                   ?_guardar_current_password 0001  
                                 lcd_init@i 0005                       __size_of_RtccReadDate 008E  
                              ??_lcd_comand 0005                                   lcd_putc@c 0008  
                     __size_of_RtccReadTime 006E                         imprimir_tecla@tecla 0038  
                              ??_lcd_gotoxy 0006                   __end_of_ingresar_password F1E6  
                  _mostrar_guardar_password E1A4                    __end_of_inicializar_hora E0A4  
                                 copy_data0 E744                                   copy_data1 E764  
                                  _Read_RTC F4E4                        _cambiar_minutos$1265 0038  
                              _tamanio_anio 00DB                                _tamanio_hora 0056  
                           ??_actualiza_dia 0016                              ??_cambiar_anio 0035  
                           _lcd_send_nibble E860                                    __Hrparam 0000  
                            ??_cambiar_hora 0035                     __end_of_obtener_dia_mes F2D0  
                                  _RtccDate 004C              ?_confirmar_actualizar_password 0001  
                                  __Lrparam 0000                           ??_guardar_comando 0024  
                                  _RtccTime 0050                                    _RtccWrOn DF94  
                        __end_of_lcd_comand DF94                       guardar_elemento@array 0024  
                     cambiar_dia@validacion 0035                       guardar_elemento@tecla 0030  
                     guardar_elemento@valor 0033               guardar_elemento@tamanio_array 0026  
                        __end_of_lcd_gotoxy E12C               guardar_tecla_presionada@letra 003C  
                              _RtccReadDate EB56                            __size_of___awdiv 0096  
                          __size_of___awmod 0082                                _RtccReadTime E5BE  
               __end_of_mostrar_titulo_menu E00C                            __size_of___lwdiv 005C  
                       ingresar_comando@key 003B                 __size_of_actualizar_minutos 0020  
                          __size_of___lwmod 004C            ??_mostrar_guardar_nuevo_password 0039  
           ?_mostrar_guardar_nuevo_password 0001                                _RtccTimeDate 0068  
                                sprintf@val 001E                                    _activada 00E6  
                                  _caratula EF4E                            __size_of_isdigit 0022  
                           ___lwdiv@divisor 0003                      cambiar_anio@validacion 0035  
                               ??_Write_RTC 000E                             ___lwdiv@counter 0007  
         __size_of_guardar_tecla_presionada 0090                                    __ptext10 E62C  
                                  __ptext11 E94E                                    __ptext20 FA02  
                                  __ptext12 E178                                    __ptext21 E066  
                                  __ptext13 E32E                                    __ptext30 EACC  
                                  __ptext22 EE7A                                    __ptext14 E2E8  
                                  __ptext31 EF4E                                    __ptext23 E048  
                                  __ptext15 E2A2                                    __ptext40 E00C  
                                  __ptext32 F024                                    __ptext24 E02A  
                                  __ptext16 E69A                                    __ptext41 E77A  
                                  __ptext33 E8D6                                    __ptext25 DFDE  
                                  __ptext17 E25C                                    __ptext50 DFB8  
                                  __ptext42 ED0A                                    __ptext34 FBC2  
                                  __ptext26 E0A4                                    __ptext18 F1E6  
                                  __ptext51 DF86                                    __ptext43 DFF4  
                                  __ptext35 E0E6                                    __ptext27 E084  
                                  __ptext19 EA4A                                    __ptext60 F4E4  
                                  __ptext52 E22A                                    __ptext44 E0C4  
                                  __ptext36 E150                                    __ptext28 E1FC  
                                  __ptext61 E5BE                                    __ptext53 E860  
                                  __ptext45 E454                                    __ptext37 E408  
                                  __ptext29 F100                                    __ptext62 EB56  
                                  __ptext54 DFA6                                    __ptext46 E3BC  
                                  __ptext38 E502                                    __ptext63 0000  
                                  __ptext55 F87C                                    __ptext47 E108  
                                  __ptext39 F606                                    __ptext56 EC74  
                                  __ptext48 E374                                    __ptext57 F3D8  
                                  __ptext49 E9CA                                    __ptext58 F736  
                                  __ptext59 DF94                   ?_guardar_tecla_presionada 003C  
                                  _lcd_init E9CA                                    _lcd_putc E3BC  
                          __size_of_sprintf 02F8                             ??_clear_display 000D  
                         ?_ingresar_comando 0001                      __size_of_lcd_send_byte 0032  
                            _imprimir_tecla E25C                                    fecha@day 00CC  
                             __size_of_atoi 00D4                               __size_of_main 00CA  
                        ??_ingresar_comando 003B                                    _minuto_d 00FC  
                                  _minuto_u 00FD                                    _password 00DF  
                       _actualizar_password F606                                ?_cambiar_dia 0001  
                              ?_cambiar_mes 0001                            ?_cambiar_horario 0001  
                                  _temporal 007E                            ?_cambiar_minutos 0001  
                                  atoi@sign 000B                               ??_Delay1KTCYx 0001  
                           ??_RtccWriteDate 0004                             ??_RtccWriteTime 0004  
              actualizar_password@confirmar 0001                                 ??_lcd_putrs 000B  
                 __size_of_guardar_elemento 01C0                                 _OSCTUNEbits 000F9B  
                                _INTCONbits 000FF2                                 _tamanio_dia 0054  
                      ?_actualizar_password 0001                                 _tamanio_mes 0058  
                        RtccWriteTime@wasOn 0005                        __end_of_Delay100TCYx DFB8  
                                  isdigit@c 0003                  __size_of_ingresar_password 00E6  
                    __end_of_imprimir_tecla E2A2                                   sprintf@ap 001C  
                   __end_of_lcd_send_nibble E8D6                                   sprintf@sp 000D  
                          ___lwmod@dividend 0008                     ?_guardar_nuevo_password 0001  
                     __end_of_cambiar_fecha EDB0                                  _OSCCONbits 000FD3  
                          ?_obtener_dia_mes 0001                    __end_of_validar_password EB56  
                     RtccWriteDate@tempYear 0007                           imprimir_tecla@aux 0024  
                             _lcd_send_byte E22A                                  _RTCCFGbits 000F3F  
                                  sprintf@c 0023                                    sprintf@f 000F  
                     ??_actualizar_password 0004                             ___lwmod@divisor 000A  
                 verficar_password@verifica 0001                         __end_of_Delay1KTCYx DFCA  
                           ___lwmod@counter 000C                    __size_of_convertir_a_int 001E  
                      __end_of_cambiar_anio E9CA                        actualizar_hora@valor 0018  
        __size_of_guardar_password_temporal 0046                        RtccWriteDate@wasAlrm 0006  
                      __end_of_cambiar_hora E5BE                        RtccWriteDate@wasWrEn 0009  
                    ingresar_password@i_566 001C                             ?_imprimir_tecla 0001  
                    ingresar_password@clear 000C              __end_of_guardar_nuevo_password E2E8  
                     lcd_send_nibble@nibble 0002  
