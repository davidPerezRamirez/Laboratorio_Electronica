

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 06 20:38:28 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataBANK0
    68  002A68                     __pidataBANK0:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _password
    72  002A68  31                 	db	49
    73  002A69  32                 	db	50
    74  002A6A  33                 	db	51
    75  002A6B  34                 	db	52
    76  002A6C  35                 	db	53
    77  002A6D  36                 	db	54
    78                           
    79                           ;initializer for _comando
    80  002A6E  78                 	db	120
    81  002A6F  78                 	db	120
    82  002A70  78                 	db	120
    83  002A71  00                 	db	0
    84                           
    85                           ;initializer for _anio
    86  002A72  000F               	dw	15
    87                           
    88                           ;initializer for _dia
    89  002A74  0008               	dw	8
    90                           
    91                           ;initializer for _diasem
    92  002A76  0003               	dw	3
    93                           
    94                           ;initializer for _hora
    95  002A78  0012               	dw	18
    96                           
    97                           ;initializer for _mes
    98  002A7A  0009               	dw	9
    99                           
   100                           ;initializer for _minuto
   101  002A7C  001E               	dw	30
   102                           
   103                           	psect	smallconst
   104  000F00                     __psmallconst:
   105                           	opt stack 0
   106  000F00  00                 	db	0
   107  000F01                     _dpowers:
   108                           	opt stack 0
   109  000F01  0001               	dw	1
   110  000F03  000A               	dw	10
   111  000F05  0064               	dw	100
   112  000F07  03E8               	dw	1000
   113  000F09  2710               	dw	10000
   114  000F0B                     __end_of_dpowers:
   115                           	opt stack 0
   116  000F0B                     _LCD_INIT_STRING:
   117                           	opt stack 0
   118  000F0B  28                 	db	40
   119  000F0C  0C                 	db	12
   120  000F0D  01                 	db	1
   121  000F0E  06                 	db	6
   122  000F0F                     __end_of_LCD_INIT_STRING:
   123                           	opt stack 0
   124  000F0F                     STR_18:
   125                           
   126                           ; BSR set to: 15
   127  000F0F  49                 	db	73	;'I'
   128  000F10  6E                 	db	110	;'n'
   129  000F11  73                 	db	115	;'s'
   130  000F12  65                 	db	101	;'e'
   131  000F13  72                 	db	114	;'r'
   132  000F14  74                 	db	116	;'t'
   133  000F15  65                 	db	101	;'e'
   134  000F16  20                 	db	32
   135  000F17  6D                 	db	109	;'m'
   136  000F18  69                 	db	105	;'i'
   137  000F19  6E                 	db	110	;'n'
   138  000F1A  75                 	db	117	;'u'
   139  000F1B  74                 	db	116	;'t'
   140  000F1C  6F                 	db	111	;'o'
   141  000F1D  73                 	db	115	;'s'
   142  000F1E  3A                 	db	58	;':'
   143  000F1F  20                 	db	32
   144  000F20  20                 	db	32
   145  000F21  20                 	db	32
   146  000F22  20                 	db	32
   147  000F23  20                 	db	32
   148  000F24  00                 	db	0
   149  000F25                     STR_17:
   150                           
   151                           ; BSR set to: 15
   152  000F25  20                 	db	32
   153  000F26  20                 	db	32
   154  000F27  20                 	db	32
   155  000F28  20                 	db	32
   156  000F29  20                 	db	32
   157  000F2A  20                 	db	32
   158  000F2B  20                 	db	32
   159  000F2C  20                 	db	32
   160  000F2D  20                 	db	32
   161  000F2E  20                 	db	32
   162  000F2F  20                 	db	32
   163  000F30  20                 	db	32
   164  000F31  20                 	db	32
   165  000F32  20                 	db	32
   166  000F33  20                 	db	32
   167  000F34  20                 	db	32
   168  000F35  20                 	db	32
   169  000F36  20                 	db	32
   170  000F37  20                 	db	32
   171  000F38  20                 	db	32
   172  000F39  00                 	db	0
   173  000F3A                     STR_19:
   174                           
   175                           ; BSR set to: 15
   176  000F3A  49                 	db	73	;'I'
   177  000F3B  6E                 	db	110	;'n'
   178  000F3C  73                 	db	115	;'s'
   179  000F3D  65                 	db	101	;'e'
   180  000F3E  72                 	db	114	;'r'
   181  000F3F  74                 	db	116	;'t'
   182  000F40  65                 	db	101	;'e'
   183  000F41  20                 	db	32
   184  000F42  68                 	db	104	;'h'
   185  000F43  6F                 	db	111	;'o'
   186  000F44  72                 	db	114	;'r'
   187  000F45  61                 	db	97	;'a'
   188  000F46  3A                 	db	58	;':'
   189  000F47  20                 	db	32
   190  000F48  20                 	db	32
   191  000F49  20                 	db	32
   192  000F4A  20                 	db	32
   193  000F4B  20                 	db	32
   194  000F4C  00                 	db	0
   195  000F4D                     STR_13:
   196                           
   197                           ; BSR set to: 15
   198  000F4D  49                 	db	73	;'I'
   199  000F4E  6E                 	db	110	;'n'
   200  000F4F  73                 	db	115	;'s'
   201  000F50  65                 	db	101	;'e'
   202  000F51  72                 	db	114	;'r'
   203  000F52  74                 	db	116	;'t'
   204  000F53  65                 	db	101	;'e'
   205  000F54  20                 	db	32
   206  000F55  61                 	db	97	;'a'
   207  000F56  6E                 	db	110	;'n'
   208  000F57  69                 	db	105	;'i'
   209  000F58  6F                 	db	111	;'o'
   210  000F59  3A                 	db	58	;':'
   211  000F5A  20                 	db	32
   212  000F5B  20                 	db	32
   213  000F5C  20                 	db	32
   214  000F5D  20                 	db	32
   215  000F5E  20                 	db	32
   216  000F5F  00                 	db	0
   217  000F60                     STR_15:
   218                           
   219                           ; BSR set to: 15
   220  000F60  49                 	db	73	;'I'
   221  000F61  6E                 	db	110	;'n'
   222  000F62  73                 	db	115	;'s'
   223  000F63  65                 	db	101	;'e'
   224  000F64  72                 	db	114	;'r'
   225  000F65  74                 	db	116	;'t'
   226  000F66  65                 	db	101	;'e'
   227  000F67  20                 	db	32
   228  000F68  64                 	db	100	;'d'
   229  000F69  69                 	db	105	;'i'
   230  000F6A  61                 	db	97	;'a'
   231  000F6B  3A                 	db	58	;':'
   232  000F6C  20                 	db	32
   233  000F6D  20                 	db	32
   234  000F6E  20                 	db	32
   235  000F6F  20                 	db	32
   236  000F70  20                 	db	32
   237  000F71  00                 	db	0
   238  000F72                     STR_14:
   239                           
   240                           ; BSR set to: 15
   241  000F72  49                 	db	73	;'I'
   242  000F73  6E                 	db	110	;'n'
   243  000F74  73                 	db	115	;'s'
   244  000F75  65                 	db	101	;'e'
   245  000F76  72                 	db	114	;'r'
   246  000F77  74                 	db	116	;'t'
   247  000F78  65                 	db	101	;'e'
   248  000F79  20                 	db	32
   249  000F7A  6D                 	db	109	;'m'
   250  000F7B  65                 	db	101	;'e'
   251  000F7C  73                 	db	115	;'s'
   252  000F7D  3A                 	db	58	;':'
   253  000F7E  20                 	db	32
   254  000F7F  20                 	db	32
   255  000F80  20                 	db	32
   256  000F81  20                 	db	32
   257  000F82  20                 	db	32
   258  000F83  00                 	db	0
   259  000F84                     STR_5:
   260                           
   261                           ; BSR set to: 15
   262  000F84  49                 	db	73	;'I'
   263  000F85  6E                 	db	110	;'n'
   264  000F86  73                 	db	115	;'s'
   265  000F87  65                 	db	101	;'e'
   266  000F88  72                 	db	114	;'r'
   267  000F89  74                 	db	116	;'t'
   268  000F8A  65                 	db	101	;'e'
   269  000F8B  20                 	db	32
   270  000F8C  70                 	db	112	;'p'
   271  000F8D  61                 	db	97	;'a'
   272  000F8E  73                 	db	115	;'s'
   273  000F8F  73                 	db	115	;'s'
   274  000F90  77                 	db	119	;'w'
   275  000F91  6F                 	db	111	;'o'
   276  000F92  72                 	db	114	;'r'
   277  000F93  64                 	db	100	;'d'
   278  000F94  00                 	db	0
   279  000F95                     STR_1:
   280                           
   281                           ; BSR set to: 15
   282  000F95  25                 	db	37
   283  000F96  30                 	db	48	;'0'
   284  000F97  32                 	db	50	;'2'
   285  000F98  75                 	db	117	;'u'
   286  000F99  2F                 	db	47
   287  000F9A  25                 	db	37
   288  000F9B  30                 	db	48	;'0'
   289  000F9C  32                 	db	50	;'2'
   290  000F9D  75                 	db	117	;'u'
   291  000F9E  2F                 	db	47
   292  000F9F  25                 	db	37
   293  000FA0  30                 	db	48	;'0'
   294  000FA1  32                 	db	50	;'2'
   295  000FA2  75                 	db	117	;'u'
   296  000FA3  00                 	db	0
   297  000FA4                     STR_2:
   298                           
   299                           ; BSR set to: 15
   300  000FA4  25                 	db	37
   301  000FA5  30                 	db	48	;'0'
   302  000FA6  32                 	db	50	;'2'
   303  000FA7  75                 	db	117	;'u'
   304  000FA8  3A                 	db	58	;':'
   305  000FA9  25                 	db	37
   306  000FAA  30                 	db	48	;'0'
   307  000FAB  32                 	db	50	;'2'
   308  000FAC  75                 	db	117	;'u'
   309  000FAD  3A                 	db	58	;':'
   310  000FAE  25                 	db	37
   311  000FAF  30                 	db	48	;'0'
   312  000FB0  32                 	db	50	;'2'
   313  000FB1  75                 	db	117	;'u'
   314  000FB2  00                 	db	0
   315  000FB3                     STR_20:
   316                           
   317                           ; BSR set to: 15
   318  000FB3  63                 	db	99	;'c'
   319  000FB4  61                 	db	97	;'a'
   320  000FB5  6D                 	db	109	;'m'
   321  000FB6  62                 	db	98	;'b'
   322  000FB7  69                 	db	105	;'i'
   323  000FB8  61                 	db	97	;'a'
   324  000FB9  72                 	db	114	;'r'
   325  000FBA  20                 	db	32
   326  000FBB  70                 	db	112	;'p'
   327  000FBC  61                 	db	97	;'a'
   328  000FBD  73                 	db	115	;'s'
   329  000FBE  73                 	db	115	;'s'
   330  000FBF  00                 	db	0
   331  000FC0                     STR_6:
   332                           
   333                           ; BSR set to: 15
   334  000FC0  45                 	db	69	;'E'
   335  000FC1  52                 	db	82	;'R'
   336  000FC2  52                 	db	82	;'R'
   337  000FC3  4F                 	db	79	;'O'
   338  000FC4  52                 	db	82	;'R'
   339  000FC5  20                 	db	32
   340  000FC6  70                 	db	112	;'p'
   341  000FC7  61                 	db	97	;'a'
   342  000FC8  73                 	db	115	;'s'
   343  000FC9  73                 	db	115	;'s'
   344  000FCA  00                 	db	0
   345  000FCB                     STR_10:
   346                           
   347                           ; BSR set to: 15
   348  000FCB  57                 	db	87	;'W'
   349  000FCC  65                 	db	101	;'e'
   350  000FCD  6C                 	db	108	;'l'
   351  000FCE  63                 	db	99	;'c'
   352  000FCF  6F                 	db	111	;'o'
   353  000FD0  6D                 	db	109	;'m'
   354  000FD1  65                 	db	101	;'e'
   355  000FD2  00                 	db	0
   356  000FD3                     STR_8:
   357                           
   358                           ; BSR set to: 15
   359  000FD3  25                 	db	37
   360  000FD4  30                 	db	48	;'0'
   361  000FD5  31                 	db	49	;'1'
   362  000FD6  75                 	db	117	;'u'
   363  000FD7  00                 	db	0
   364  000FD8                     STR_11:
   365                           
   366                           ; BSR set to: 15
   367  000FD8  30                 	db	48	;'0'
   368  000FD9  30                 	db	48	;'0'
   369  000FDA  31                 	db	49	;'1'
   370  000FDB  00                 	db	0
   371  000FDC                     STR_16:
   372                           
   373                           ; BSR set to: 15
   374  000FDC  30                 	db	48	;'0'
   375  000FDD  30                 	db	48	;'0'
   376  000FDE  32                 	db	50	;'2'
   377  000FDF  00                 	db	0
   378  000FE0                     STR_4:
   379                           
   380                           ; BSR set to: 15
   381  000FE0  4F                 	db	79	;'O'
   382  000FE1  46                 	db	70	;'F'
   383  000FE2  46                 	db	70	;'F'
   384  000FE3  00                 	db	0
   385  000FE4                     STR_9:
   386                           
   387                           ; BSR set to: 15
   388  000FE4  78                 	db	120	;'x'
   389  000FE5  78                 	db	120	;'x'
   390  000FE6  78                 	db	120	;'x'
   391  000FE7  00                 	db	0
   392  000FE8                     STR_3:
   393                           
   394                           ; BSR set to: 15
   395  000FE8  4F                 	db	79	;'O'
   396  000FE9  4E                 	db	78	;'N'
   397  000FEA  00                 	db	0
   398  000FEB                     STR_28:
   399                           
   400                           ; BSR set to: 15
   401  000FEB  23                 	db	35
   402  000FEC  00                 	db	0
   403  000FED                     STR_23:
   404                           
   405                           ; BSR set to: 15
   406  000FED  2A                 	db	42
   407  000FEE  00                 	db	0
   408  000FEF                     STR_24:
   409                           
   410                           ; BSR set to: 15
   411  000FEF  41                 	db	65	;'A'
   412  000FF0  00                 	db	0
   413  000FF1                     STR_25:
   414                           
   415                           ; BSR set to: 15
   416  000FF1  42                 	db	66	;'B'
   417  000FF2  00                 	db	0
   418  000FF3                     STR_26:
   419                           
   420                           ; BSR set to: 15
   421  000FF3  43                 	db	67	;'C'
   422  000FF4  00                 	db	0
   423  000FF5                     STR_29:
   424                           
   425                           ; BSR set to: 15
   426  000FF5  44                 	db	68	;'D'
   427  000FF6  00                 	db	0
   428  0000                     
   429                           ; #config settings
   430  000FF7  00                 	db	0	; dummy byte at the end
   431  0000                     
   432                           	psect	nvBANK0
   433  0000DB                     __pnvBANK0:
   434                           	opt stack 0
   435  0000DB                     _anio_d:
   436                           	opt stack 0
   437  0000DB                     	ds	1
   438  0000DC                     _anio_u:
   439                           	opt stack 0
   440  0000DC                     	ds	1
   441  0000DD                     _dia_semana:
   442                           	opt stack 0
   443  0000DD                     	ds	1
   444  0000DE                     _fecha_d:
   445                           	opt stack 0
   446  0000DE                     	ds	1
   447  0000DF                     _fecha_u:
   448                           	opt stack 0
   449  0000DF                     	ds	1
   450  0000E0                     _hora_d:
   451                           	opt stack 0
   452  0000E0                     	ds	1
   453  0000E1                     _hora_u:
   454                           	opt stack 0
   455  0000E1                     	ds	1
   456  0000E2                     _mes_d:
   457                           	opt stack 0
   458  0000E2                     	ds	1
   459  0000E3                     _mes_u:
   460                           	opt stack 0
   461  0000E3                     	ds	1
   462  0000E4                     _minuto_d:
   463                           	opt stack 0
   464  0000E4                     	ds	1
   465  0000E5                     _minuto_u:
   466                           	opt stack 0
   467  0000E5                     	ds	1
   468  0000E6                     _segundo_d:
   469                           	opt stack 0
   470  0000E6                     	ds	1
   471  0000E7                     _segundo_u:
   472                           	opt stack 0
   473  0000E7                     	ds	1
   474  0000                     _ANCON0	set	3912
   475  0000                     _ANCON1	set	3913
   476  0000                     _RTCCFG	set	3903
   477  0000                     _RTCCFGbits	set	3903
   478  0000                     _ADCON0	set	4034
   479  0000                     _ADCON1	set	4033
   480  0000                     _ALRMCFGbits	set	3985
   481  0000                     _EECON2	set	4007
   482  0000                     _INTCONbits	set	4082
   483  0000                     _LATAbits	set	3977
   484  0000                     _LATBbits	set	3978
   485  0000                     _OSCCONbits	set	4051
   486  0000                     _OSCTUNEbits	set	3995
   487  0000                     _PIE3bits	set	4003
   488  0000                     _PORTAbits	set	3968
   489  0000                     _PORTCbits	set	3970
   490  0000                     _RTCVALH	set	3993
   491  0000                     _RTCVALL	set	3992
   492  0000                     _T1CONbits	set	4045
   493  0000                     _TRISA	set	3986
   494  0000                     _TRISB	set	3987
   495  0000                     _TRISBbits	set	3987
   496  0000                     _TRISC	set	3988
   497                           
   498                           	psect	cinit
   499  00287C                     __pcinit:
   500                           	opt stack 0
   501  00287C                     start_initialization:
   502                           	opt stack 0
   503  00287C                     __initialization:
   504                           	opt stack 0
   505                           
   506                           ; Clear objects allocated to BANK0 (101 bytes)
   507  00287C  EE00  F060         	lfsr	0,__pbssBANK0
   508  002880  0E65               	movlw	101
   509  002882                     clear_0:
   510  002882  6AEE               	clrf	postinc0,c
   511  002884  06E8               	decf	wreg,f,c
   512  002886  E1FD               	bnz	clear_0
   513                           
   514                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   515  002888  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   516                           
   517                           ; Clear objects allocated to COMRAM (13 bytes)
   518  00288A  EE00  F052         	lfsr	0,__pbssCOMRAM
   519  00288E  0E0D               	movlw	13
   520  002890                     clear_1:
   521  002890  6AEE               	clrf	postinc0,c
   522  002892  06E8               	decf	wreg,f,c
   523  002894  E1FD               	bnz	clear_1
   524                           
   525                           ; Initialize objects allocated to BANK0 (22 bytes)
   526                           ; load TBLPTR registers with __pidataBANK0
   527  002896  0E68               	movlw	low __pidataBANK0
   528  002898  6EF6               	movwf	tblptrl,c
   529  00289A  0E2A               	movlw	high __pidataBANK0
   530  00289C  6EF7               	movwf	tblptrh,c
   531  00289E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   532  0028A0  6EF8               	movwf	tblptru,c
   533  0028A2  EE00  F0C5         	lfsr	0,__pdataBANK0
   534  0028A6  EE10 F016          	lfsr	1,22
   535  0028AA                     copy_data0:
   536  0028AA  0009               	tblrd		*+
   537  0028AC  CFF5 FFEE          	movff	tablat,postinc0
   538  0028B0  50E5               	movf	postdec1,w,c
   539  0028B2  50E1               	movf	fsr1l,w,c
   540  0028B4  E1FA               	bnz	copy_data0
   541  0028B6                     end_of_initialization:
   542                           	opt stack 0
   543  0028B6                     __end_of__initialization:
   544                           	opt stack 0
   545  0028B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   546  0028B8  6EF8               	movwf	tblptru,c
   547  0028BA  0100               	movlb	0
   548  0028BC  EF2E  F009         	goto	_main	;jump to C main() function
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	bitbssCOMRAM
   559  0002F8                     __pbitbssCOMRAM:
   560                           	opt stack 0
   561  0002F8                     _flag:
   562                           	opt stack 0
   563  0002F8                     	ds	1
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	bssCOMRAM
   574  000052                     __pbssCOMRAM:
   575                           	opt stack 0
   576  000052                     _tamanio_password:
   577                           	opt stack 0
   578  000052                     	ds	2
   579  000054                     _key:
   580                           	opt stack 0
   581  000054                     	ds	1
   582  000055                     _RtccDate:
   583                           	opt stack 0
   584  000055                     	ds	4
   585  000059                     _tamanio_dia:
   586                           	opt stack 0
   587  000059                     	ds	2
   588  00005B                     _tamanio_hora:
   589                           	opt stack 0
   590  00005B                     	ds	2
   591  00005D                     _tamanio_mes:
   592                           	opt stack 0
   593  00005D                     	ds	2
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	bssBANK0
   604  000060                     __pbssBANK0:
   605                           	opt stack 0
   606  000060                     _RtccAlrmTimeDate:
   607                           	opt stack 0
   608  000060                     	ds	8
   609  000068                     _RtccTimeDate:
   610                           	opt stack 0
   611  000068                     	ds	8
   612  000070                     _Rtcc_read_TimeDate:
   613                           	opt stack 0
   614  000070                     	ds	8
   615  000078                     _current_password:
   616                           	opt stack 0
   617  000078                     	ds	6
   618  00007E                     _RtccTimeVal:
   619                           	opt stack 0
   620  00007E                     	ds	4
   621  000082                     _a:
   622                           	opt stack 0
   623  000082                     	ds	2
   624  000084                     _activida:
   625                           	opt stack 0
   626  000084                     	ds	2
   627  000086                     _autorizado:
   628                           	opt stack 0
   629  000086                     	ds	2
   630  000088                     _b:
   631                           	opt stack 0
   632  000088                     	ds	2
   633  00008A                     _c:
   634                           	opt stack 0
   635  00008A                     	ds	2
   636  00008C                     _encendida:
   637                           	opt stack 0
   638  00008C                     	ds	2
   639  00008E                     _i:
   640                           	opt stack 0
   641  00008E                     	ds	2
   642  000090                     _j:
   643                           	opt stack 0
   644  000090                     	ds	2
   645  000092                     _k:
   646                           	opt stack 0
   647  000092                     	ds	2
   648  000094                     _ocultar_teclas:
   649                           	opt stack 0
   650  000094                     	ds	2
   651  000096                     _segundo:
   652                           	opt stack 0
   653  000096                     	ds	2
   654  000098                     _tamanio_comando:
   655                           	opt stack 0
   656  000098                     	ds	2
   657  00009A                     _buffer2:
   658                           	opt stack 0
   659  00009A                     	ds	20
   660  0000AE                     _RtccTime:
   661                           	opt stack 0
   662  0000AE                     	ds	4
   663  0000B2                     _day:
   664                           	opt stack 0
   665  0000B2                     	ds	3
   666  0000B5                     _hour:
   667                           	opt stack 0
   668  0000B5                     	ds	3
   669  0000B8                     _minutes:
   670                           	opt stack 0
   671  0000B8                     	ds	3
   672  0000BB                     _month:
   673                           	opt stack 0
   674  0000BB                     	ds	3
   675  0000BE                     _year:
   676                           	opt stack 0
   677  0000BE                     	ds	3
   678  0000C1                     _tamanio_anio:
   679                           	opt stack 0
   680  0000C1                     	ds	2
   681  0000C3                     _tamanio_minutos:
   682                           	opt stack 0
   683  0000C3                     	ds	2
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1l	equ	0xFE1
   692                           
   693                           	psect	dataBANK0
   694  0000C5                     __pdataBANK0:
   695                           	opt stack 0
   696  0000C5                     _password:
   697                           	opt stack 0
   698  0000C5                     	ds	6
   699  0000CB                     _comando:
   700                           	opt stack 0
   701  0000CB                     	ds	4
   702  0000CF                     _anio:
   703                           	opt stack 0
   704  0000CF                     	ds	2
   705  0000D1                     _dia:
   706                           	opt stack 0
   707  0000D1                     	ds	2
   708  0000D3                     _diasem:
   709                           	opt stack 0
   710  0000D3                     	ds	2
   711  0000D5                     _hora:
   712                           	opt stack 0
   713  0000D5                     	ds	2
   714  0000D7                     _mes:
   715                           	opt stack 0
   716  0000D7                     	ds	2
   717  0000D9                     _minuto:
   718                           	opt stack 0
   719  0000D9                     	ds	2
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           postdec1	equ	0xFE5
   727                           fsr1l	equ	0xFE1
   728                           
   729                           	psect	cstackCOMRAM
   730  000001                     __pcstackCOMRAM:
   731                           	opt stack 0
   732  000001                     ??_guardar_current_password:
   733  000001                     ??_isdigit:
   734  000001                     ??_lcd_send_nibble:
   735  000001                     ?___wmul:
   736                           	opt stack 0
   737  000001                     ?___awdiv:
   738                           	opt stack 0
   739  000001                     ?___lwdiv:
   740                           	opt stack 0
   741  000001                     Delay100TCYx@unit:
   742                           	opt stack 0
   743  000001                     Delay1KTCYx@unit:
   744                           	opt stack 0
   745  000001                     validar_comando@candidato:
   746                           	opt stack 0
   747  000001                     RtccReadDate@pDt:
   748                           	opt stack 0
   749  000001                     RtccReadTime@pTm:
   750                           	opt stack 0
   751  000001                     RtccWriteDate@pDt:
   752                           	opt stack 0
   753  000001                     RtccWriteTime@pTm:
   754                           	opt stack 0
   755  000001                     ___wmul@multiplier:
   756                           	opt stack 0
   757  000001                     ___awdiv@dividend:
   758                           	opt stack 0
   759  000001                     ___lwdiv@dividend:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x0
   763  000001                     	ds	1
   764  000002                     lcd_send_nibble@nibble:
   765                           	opt stack 0
   766  000002                     _isdigit$2510:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x1
   770  000002                     	ds	1
   771  000003                     lcd_send_byte@n:
   772                           	opt stack 0
   773  000003                     guardar_current_password@valor:
   774                           	opt stack 0
   775  000003                     RtccWriteDate@di:
   776                           	opt stack 0
   777  000003                     RtccWriteTime@di:
   778                           	opt stack 0
   779  000003                     isdigit@c:
   780                           	opt stack 0
   781  000003                     validar_comando@validar:
   782                           	opt stack 0
   783  000003                     validar_password@i:
   784                           	opt stack 0
   785  000003                     ___wmul@multiplicand:
   786                           	opt stack 0
   787  000003                     ___awdiv@divisor:
   788                           	opt stack 0
   789  000003                     ___lwdiv@divisor:
   790                           	opt stack 0
   791  000003                     RtccReadDate@rTD1:
   792                           	opt stack 0
   793  000003                     RtccReadTime@rTD1:
   794                           	opt stack 0
   795                           
   796                           ; 8 bytes @ 0x2
   797  000003                     	ds	1
   798  000004                     lcd_send_byte@address:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x3
   802  000004                     	ds	1
   803  000005                     ??_validar_comando:
   804  000005                     lcd_init@i:
   805                           	opt stack 0
   806  000005                     lcd_gotoxy@y:
   807                           	opt stack 0
   808  000005                     lcd_comand@d:
   809                           	opt stack 0
   810  000005                     RtccWriteDate@wasOn:
   811                           	opt stack 0
   812  000005                     RtccWriteTime@wasOn:
   813                           	opt stack 0
   814  000005                     ___awdiv@counter:
   815                           	opt stack 0
   816  000005                     ___wmul@product:
   817                           	opt stack 0
   818  000005                     ___lwdiv@quotient:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x4
   822  000005                     	ds	1
   823  000006                     lcd_gotoxy@x:
   824                           	opt stack 0
   825  000006                     RtccWriteDate@wasAlrm:
   826                           	opt stack 0
   827  000006                     RtccWriteTime@wasAlrm:
   828                           	opt stack 0
   829  000006                     ___awdiv@sign:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x5
   833  000006                     	ds	1
   834  000007                     ?_atoi:
   835                           	opt stack 0
   836  000007                     lcd_gotoxy@address:
   837                           	opt stack 0
   838  000007                     RtccWriteTime@wasWrEn:
   839                           	opt stack 0
   840  000007                     ___lwdiv@counter:
   841                           	opt stack 0
   842  000007                     RtccWriteDate@tempYear:
   843                           	opt stack 0
   844  000007                     atoi@s:
   845                           	opt stack 0
   846  000007                     ___awdiv@quotient:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x6
   850  000007                     	ds	1
   851  000008                     ?___lwmod:
   852                           	opt stack 0
   853  000008                     lcd_putc@c:
   854                           	opt stack 0
   855  000008                     validar_comando@i:
   856                           	opt stack 0
   857  000008                     RtccWriteTime@tempMinSec:
   858                           	opt stack 0
   859  000008                     ___lwmod@dividend:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x7
   863  000008                     	ds	1
   864  000009                     ??_atoi:
   865  000009                     RtccWriteDate@wasWrEn:
   866                           	opt stack 0
   867  000009                     lcd_putrs@ptr:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x8
   871  000009                     	ds	1
   872  00000A                     RtccWriteDate@tempDayMonth:
   873                           	opt stack 0
   874  00000A                     RtccWriteTime@tempHourWDay:
   875                           	opt stack 0
   876  00000A                     ___lwmod@divisor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x9
   880  00000A                     	ds	1
   881  00000B                     ??_ingresar_password:
   882  00000B                     atoi@sign:
   883                           	opt stack 0
   884  00000B                     mostrar_menu@titulo_menu:
   885                           	opt stack 0
   886  00000B                     RtccReadDate@rTD0:
   887                           	opt stack 0
   888  00000B                     RtccReadTime@rTD0:
   889                           	opt stack 0
   890                           
   891                           ; 8 bytes @ 0xA
   892  00000B                     	ds	1
   893  00000C                     ___lwmod@counter:
   894                           	opt stack 0
   895  00000C                     RtccWriteDate@tempHourWDay:
   896                           	opt stack 0
   897  00000C                     atoi@a:
   898                           	opt stack 0
   899  00000C                     ingresar_password@clear:
   900                           	opt stack 0
   901                           
   902                           ; 16 bytes @ 0xB
   903  00000C                     	ds	1
   904  00000D                     ?_sprintf:
   905                           	opt stack 0
   906  00000D                     sprintf@sp:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0xC
   910  00000D                     	ds	1
   911  00000E                     convertir_a_int_fecha@array:
   912                           	opt stack 0
   913  00000E                     convertir_a_int_hora@array:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0xD
   917  00000E                     	ds	1
   918  00000F                     sprintf@f:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0xE
   922  00000F                     	ds	1
   923  000010                     convertir_a_int_fecha@valor:
   924                           	opt stack 0
   925  000010                     convertir_a_int_hora@valor:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0xF
   929  000010                     	ds	2
   930  000012                     
   931                           ; 0 bytes @ 0x11
   932  000012                     	ds	1
   933  000013                     
   934                           ; 0 bytes @ 0x12
   935  000013                     	ds	4
   936  000017                     ??_sprintf:
   937                           
   938                           ; 0 bytes @ 0x16
   939  000017                     	ds	4
   940  00001B                     sprintf@ap:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x1A
   944  00001B                     	ds	1
   945  00001C                     ingresar_password@i_537:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x1B
   949  00001C                     	ds	1
   950  00001D                     sprintf@flag:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x1C
   954  00001D                     	ds	1
   955  00001E                     ingresar_password@i:
   956                           	opt stack 0
   957  00001E                     sprintf@val:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x1D
   961  00001E                     	ds	2
   962  000020                     sprintf@prec:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1F
   966  000020                     	ds	1
   967  000021                     sprintf@width:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x20
   971  000021                     	ds	2
   972  000023                     sprintf@c:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x22
   976  000023                     	ds	1
   977  000024                     ??_guardar_comando:
   978  000024                     caratula@titulo:
   979                           	opt stack 0
   980  000024                     guardar_elemento_fecha@array:
   981                           	opt stack 0
   982  000024                     guardar_elemento_hora@array:
   983                           	opt stack 0
   984  000024                     imprimir_tecla@aux:
   985                           	opt stack 0
   986                           
   987                           ; 20 bytes @ 0x23
   988  000024                     	ds	2
   989  000026                     _caratula$499:
   990                           	opt stack 0
   991  000026                     guardar_elemento_fecha@tamanio_array:
   992                           	opt stack 0
   993  000026                     guardar_elemento_hora@tamanio_array:
   994                           	opt stack 0
   995  000026                     guardar_comando@aux:
   996                           	opt stack 0
   997                           
   998                           ; 20 bytes @ 0x25
   999  000026                     	ds	2
  1000  000028                     ??_guardar_elemento_fecha:
  1001  000028                     ??_guardar_elemento_hora:
  1002                           
  1003                           ; 0 bytes @ 0x27
  1004  000028                     	ds	2
  1005  00002A                     guardar_elemento_fecha@tecla:
  1006                           	opt stack 0
  1007  00002A                     guardar_elemento_hora@tecla:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x29
  1011  00002A                     	ds	1
  1012  00002B                     ??_cambiar_anio:
  1013  00002B                     ??_cambiar_mes:
  1014  00002B                     ??_cambiar_dia:
  1015  00002B                     ??_cambiar_minutos:
  1016  00002B                     ??_cambiar_hora:
  1017                           
  1018                           ; 0 bytes @ 0x2A
  1019  00002B                     	ds	1
  1020  00002C                     cambiar_dia@tecla:
  1021                           	opt stack 0
  1022  00002C                     cambiar_mes@tecla:
  1023                           	opt stack 0
  1024  00002C                     cambiar_anio@tecla:
  1025                           	opt stack 0
  1026  00002C                     cambiar_hora@tecla:
  1027                           	opt stack 0
  1028  00002C                     cambiar_minutos@tecla:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x2B
  1032  00002C                     	ds	1
  1033  00002D                     cambiar_dia@i:
  1034                           	opt stack 0
  1035  00002D                     cambiar_mes@i:
  1036                           	opt stack 0
  1037  00002D                     cambiar_anio@i:
  1038                           	opt stack 0
  1039  00002D                     cambiar_hora@i:
  1040                           	opt stack 0
  1041  00002D                     cambiar_minutos@i:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x2C
  1045  00002D                     	ds	2
  1046  00002F                     cambiar_dia@valor:
  1047                           	opt stack 0
  1048  00002F                     cambiar_mes@valor:
  1049                           	opt stack 0
  1050  00002F                     cambiar_anio@valor:
  1051                           	opt stack 0
  1052  00002F                     cambiar_hora@valor:
  1053                           	opt stack 0
  1054  00002F                     cambiar_minutos@valor:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x2E
  1058  00002F                     	ds	9
  1059  000038                     imprimir_tecla@tecla:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x37
  1063  000038                     	ds	1
  1064  000039                     mostrar_guardar_password@tecla:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x38
  1068  000039                     	ds	1
  1069  00003A                     guardar_comando@tecla:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x39
  1073  00003A                     	ds	1
  1074  00003B                     ingresar_comando@key:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x3A
  1078  00003B                     	ds	1
  1079  00003C                     guardar_tecla_presionada@letra:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x3B
  1083  00003C                     	ds	2
  1084  00003E                     guardar_tecla_presionada@i:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x3D
  1088  00003E                     	ds	2
  1089  000040                     guardar_tecla_presionada@doit:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x3F
  1093  000040                     	ds	2
  1094  000042                     leer_teclado@ocultar:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x41
  1098  000042                     	ds	2
  1099  000044                     leer_teclado@doit:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x43
  1103  000044                     	ds	2
  1104  000046                     ??_leer_teclado:
  1105                           
  1106                           ; 0 bytes @ 0x45
  1107  000046                     	ds	1
  1108  000047                     leer_teclado@i:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x46
  1112  000047                     	ds	2
  1113  000049                     ??_main:
  1114                           
  1115                           ; 0 bytes @ 0x48
  1116  000049                     	ds	1
  1117  00004A                     main@ocultar_teclas:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x49
  1121  00004A                     	ds	2
  1122  00004C                     main@puntero_funcion:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x4B
  1126  00004C                     	ds	2
  1127  00004E                     main@i:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x4D
  1131  00004E                     	ds	2
  1132  000050                     main@validacion:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x4F
  1136  000050                     	ds	2
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           postinc0	equ	0xFEE
  1142                           wreg	equ	0xFE8
  1143                           postdec1	equ	0xFE5
  1144                           fsr1l	equ	0xFE1
  1145                           
  1146 ;;
  1147 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1148 ;;
  1149 ;; *************** function _main *****************
  1150 ;; Defined at:
  1151 ;;		line 137 in file "main.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  i               2   77[COMRAM] int 
  1156 ;;  validacion      2   79[COMRAM] int 
  1157 ;;  puntero_func    2   75[COMRAM] PTR void 
  1158 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  1159 ;;		 -> cambiar_anio(0), ingresar_comando(2), 
  1160 ;;  ocultar_tecl    2   73[COMRAM] int 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  2  202[None  ] int 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1171 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1172 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1173 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1174 ;;Total ram usage:        9 bytes
  1175 ;; Hardware stack levels required when called:    9
  1176 ;; This function calls:
  1177 ;;		_Read_RTC
  1178 ;;		_Setup
  1179 ;;		_caratula
  1180 ;;		_ingresar_password
  1181 ;;		_lcd_gotoxy
  1182 ;;		_lcd_putrs
  1183 ;;		_leer_teclado
  1184 ;;		_mostrar_menu
  1185 ;;		_restaurar_comando
  1186 ;;		_validar_comando
  1187 ;; This function is called by:
  1188 ;;		Startup code after reset
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text0
  1193  00125C                     __ptext0:
  1194                           	opt stack 0
  1195  00125C                     _main:
  1196                           	opt stack 22
  1197                           
  1198                           ;main.c: 139: Setup();
  1199                           
  1200                           ; BSR set to: 15
  1201                           ;incstack = 0
  1202  00125C  ECD4  F013         	call	_Setup	;wreg free
  1203                           
  1204                           ;main.c: 140: restaurar_comando();
  1205  001260  ECD1  F014         	call	_restaurar_comando	;wreg free
  1206                           
  1207                           ;main.c: 142: int ocultar_teclas = 1;
  1208  001264  0E00               	movlw	0
  1209  001266  6E4B               	movwf	main@ocultar_teclas+1,c
  1210  001268  0E01               	movlw	1
  1211  00126A  6E4A               	movwf	main@ocultar_teclas,c
  1212  00126C  D000               	goto	l3674
  1213  00126E                     l3674:
  1214                           
  1215                           ;main.c: 147: {
  1216                           ;main.c: 148: Read_RTC();
  1217  00126E  EC94  F00B         	call	_Read_RTC	;wreg free
  1218                           
  1219                           ;main.c: 150: if (!autorizado){
  1220  001272  0100               	movlb	0	; () banked
  1221  001274  5186               	movf	_autorizado& (0+255),w,b
  1222  001276  0100               	movlb	0	; () banked
  1223  001278  1187               	iorwf	(_autorizado+1)& (0+255),w,b
  1224  00127A  A4D8               	btfss	status,2,c
  1225  00127C  D00D               	goto	l3682
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 151: leer_teclado(ocultar_teclas,mostrar_guardar_password);
  1229  00127E  C04A  F042         	movff	main@ocultar_teclas,leer_teclado@ocultar
  1230  001282  C04B  F043         	movff	main@ocultar_teclas+1,leer_teclado@ocultar+1
  1231  001286  0E4E               	movlw	low _mostrar_guardar_password
  1232  001288  6E44               	movwf	leer_teclado@doit,c
  1233  00128A  0E29               	movlw	high _mostrar_guardar_password
  1234  00128C  6E45               	movwf	leer_teclado@doit+1,c
  1235  00128E  EC31  F00C         	call	_leer_teclado	;wreg free
  1236                           
  1237                           ;main.c: 152: ingresar_password();
  1238  001292  EC46  F00D         	call	_ingresar_password	;wreg free
  1239                           
  1240                           ;main.c: 154: }else{
  1241  001296  D7EB               	goto	l3674
  1242  001298                     l3682:
  1243                           
  1244                           ;main.c: 155: puntero_funcion = ingresar_comando;
  1245  001298  0EC2               	movlw	low _ingresar_comando
  1246  00129A  6E4C               	movwf	main@puntero_funcion,c
  1247  00129C  0E2A               	movlw	high _ingresar_comando
  1248  00129E  6E4D               	movwf	main@puntero_funcion+1,c
  1249                           
  1250                           ;main.c: 157: validar_comando("xxx",&validacion);
  1251  0012A0  0EE4               	movlw	low STR_9
  1252  0012A2  6E01               	movwf	validar_comando@candidato,c
  1253  0012A4  0E0F               	movlw	high STR_9
  1254  0012A6  6E02               	movwf	validar_comando@candidato+1,c
  1255  0012A8  0E50               	movlw	low main@validacion
  1256  0012AA  6E03               	movwf	validar_comando@validar,c
  1257  0012AC  0E00               	movlw	high main@validacion
  1258  0012AE  6E04               	movwf	validar_comando@validar+1,c
  1259  0012B0  ECD7  F011         	call	_validar_comando	;wreg free
  1260                           
  1261                           ;main.c: 158: if(validacion){
  1262  0012B4  5050               	movf	main@validacion,w,c
  1263  0012B6  1051               	iorwf	main@validacion+1,w,c
  1264  0012B8  B4D8               	btfsc	status,2,c
  1265  0012BA  D007               	goto	l3690
  1266                           
  1267                           ;main.c: 159: caratula("Welcome");
  1268  0012BC  0ECB               	movlw	low STR_10
  1269  0012BE  6E24               	movwf	caratula@titulo,c
  1270  0012C0  0E0F               	movlw	high STR_10
  1271  0012C2  6E25               	movwf	caratula@titulo+1,c
  1272  0012C4  ECC2  F00D         	call	_caratula	;wreg free
  1273  0012C8  D000               	goto	l3690
  1274  0012CA                     l3690:
  1275                           
  1276                           ;main.c: 160: }
  1277                           ;main.c: 162: validar_comando("001",&validacion);
  1278  0012CA  0ED8               	movlw	low STR_11
  1279  0012CC  6E01               	movwf	validar_comando@candidato,c
  1280  0012CE  0E0F               	movlw	high STR_11
  1281  0012D0  6E02               	movwf	validar_comando@candidato+1,c
  1282  0012D2  0E50               	movlw	low main@validacion
  1283  0012D4  6E03               	movwf	validar_comando@validar,c
  1284  0012D6  0E00               	movlw	high main@validacion
  1285  0012D8  6E04               	movwf	validar_comando@validar+1,c
  1286  0012DA  ECD7  F011         	call	_validar_comando	;wreg free
  1287                           
  1288                           ;main.c: 163: if(validacion){
  1289  0012DE  5050               	movf	main@validacion,w,c
  1290  0012E0  1051               	iorwf	main@validacion+1,w,c
  1291  0012E2  B4D8               	btfsc	status,2,c
  1292  0012E4  D03B               	goto	l3716
  1293                           
  1294                           ;main.c: 165: lcd_gotoxy(3,2);
  1295  0012E6  0E02               	movlw	2
  1296  0012E8  6E05               	movwf	lcd_gotoxy@y,c
  1297  0012EA  0E03               	movlw	3
  1298  0012EC  ECE3  F014         	call	_lcd_gotoxy
  1299                           
  1300                           ;main.c: 166: lcd_putrs("                 ");
  1301  0012F0  0E28               	movlw	low (STR_17+3)
  1302  0012F2  6E09               	movwf	lcd_putrs@ptr,c
  1303  0012F4  0E0F               	movlw	high (STR_17+3)
  1304  0012F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1305  0012F8  EC5E  F013         	call	_lcd_putrs	;wreg free
  1306                           
  1307                           ;main.c: 168: if (tamanio_anio != 2){
  1308  0012FC  0E02               	movlw	2
  1309  0012FE  0100               	movlb	0	; () banked
  1310  001300  19C1               	xorwf	_tamanio_anio& (0+255),w,b
  1311  001302  0100               	movlb	0	; () banked
  1312  001304  11C2               	iorwf	(_tamanio_anio+1)& (0+255),w,b
  1313  001306  B4D8               	btfsc	status,2,c
  1314  001308  D00A               	goto	l3704
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 169: mostrar_menu("Inserte anio:     ");
  1318  00130A  0E4D               	movlw	low STR_13
  1319  00130C  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1320  00130E  0E0F               	movlw	high STR_13
  1321  001310  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1322  001312  EC79  F014         	call	_mostrar_menu	;wreg free
  1323                           
  1324                           ;main.c: 170: puntero_funcion = cambiar_anio;
  1325  001316  0EFA               	movlw	low _cambiar_anio
  1326  001318  6E4C               	movwf	main@puntero_funcion,c
  1327  00131A  0E1D               	movlw	high _cambiar_anio
  1328  00131C  D01D               	goto	L2
  1329  00131E                     l3704:
  1330  00131E  0E02               	movlw	2
  1331  001320  185D               	xorwf	_tamanio_mes,w,c
  1332  001322  105E               	iorwf	_tamanio_mes+1,w,c
  1333  001324  B4D8               	btfsc	status,2,c
  1334  001326  D00A               	goto	l3710
  1335                           
  1336                           ;main.c: 173: mostrar_menu("Inserte mes:     ");
  1337  001328  0E72               	movlw	low STR_14
  1338  00132A  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1339  00132C  0E0F               	movlw	high STR_14
  1340  00132E  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1341  001330  EC79  F014         	call	_mostrar_menu	;wreg free
  1342                           
  1343                           ;main.c: 174: puntero_funcion = cambiar_mes;
  1344  001334  0E30               	movlw	low _cambiar_mes
  1345  001336  6E4C               	movwf	main@puntero_funcion,c
  1346  001338  0E20               	movlw	high _cambiar_mes
  1347  00133A  D00E               	goto	L2
  1348  00133C                     l3710:
  1349  00133C  0E02               	movlw	2
  1350  00133E  1859               	xorwf	_tamanio_dia,w,c
  1351  001340  105A               	iorwf	_tamanio_dia+1,w,c
  1352  001342  B4D8               	btfsc	status,2,c
  1353  001344  D00B               	goto	l3716
  1354                           
  1355                           ;main.c: 177: mostrar_menu("Inserte dia:     ");
  1356  001346  0E60               	movlw	low STR_15
  1357  001348  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1358  00134A  0E0F               	movlw	high STR_15
  1359  00134C  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1360  00134E  EC79  F014         	call	_mostrar_menu	;wreg free
  1361                           
  1362                           ;main.c: 178: puntero_funcion = cambiar_dia;
  1363  001352  0E7A               	movlw	low _cambiar_dia
  1364  001354  6E4C               	movwf	main@puntero_funcion,c
  1365  001356  0E1F               	movlw	high _cambiar_dia
  1366  001358                     L2:
  1367  001358  6E4D               	movwf	main@puntero_funcion+1,c
  1368  00135A  D000               	goto	l3716
  1369  00135C                     l3716:
  1370                           
  1371                           ;main.c: 180: }
  1372                           ;main.c: 181: }
  1373                           ;main.c: 183: validar_comando("002",&validacion);
  1374  00135C  0EDC               	movlw	low STR_16
  1375  00135E  6E01               	movwf	validar_comando@candidato,c
  1376  001360  0E0F               	movlw	high STR_16
  1377  001362  6E02               	movwf	validar_comando@candidato+1,c
  1378  001364  0E50               	movlw	low main@validacion
  1379  001366  6E03               	movwf	validar_comando@validar,c
  1380  001368  0E00               	movlw	high main@validacion
  1381  00136A  6E04               	movwf	validar_comando@validar+1,c
  1382  00136C  ECD7  F011         	call	_validar_comando	;wreg free
  1383                           
  1384                           ;main.c: 184: if(validacion){
  1385  001370  5050               	movf	main@validacion,w,c
  1386  001372  1051               	iorwf	main@validacion+1,w,c
  1387  001374  B4D8               	btfsc	status,2,c
  1388  001376  D02C               	goto	l3736
  1389                           
  1390                           ;main.c: 186: lcd_gotoxy(3,2);
  1391  001378  0E02               	movlw	2
  1392  00137A  6E05               	movwf	lcd_gotoxy@y,c
  1393  00137C  0E03               	movlw	3
  1394  00137E  ECE3  F014         	call	_lcd_gotoxy
  1395                           
  1396                           ;main.c: 187: lcd_putrs("                    ");
  1397  001382  0E25               	movlw	low STR_17
  1398  001384  6E09               	movwf	lcd_putrs@ptr,c
  1399  001386  0E0F               	movlw	high STR_17
  1400  001388  6E0A               	movwf	lcd_putrs@ptr+1,c
  1401  00138A  EC5E  F013         	call	_lcd_putrs	;wreg free
  1402                           
  1403                           ;main.c: 189: if (tamanio_minutos != 2){
  1404  00138E  0E02               	movlw	2
  1405  001390  0100               	movlb	0	; () banked
  1406  001392  19C3               	xorwf	_tamanio_minutos& (0+255),w,b
  1407  001394  0100               	movlb	0	; () banked
  1408  001396  11C4               	iorwf	(_tamanio_minutos+1)& (0+255),w,b
  1409  001398  B4D8               	btfsc	status,2,c
  1410  00139A  D00A               	goto	l3730
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 190: mostrar_menu("Inserte minutos:     ");
  1414  00139C  0E0F               	movlw	low STR_18
  1415  00139E  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1416  0013A0  0E0F               	movlw	high STR_18
  1417  0013A2  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1418  0013A4  EC79  F014         	call	_mostrar_menu	;wreg free
  1419                           
  1420                           ;main.c: 191: puntero_funcion = cambiar_minutos;
  1421  0013A8  0E2E               	movlw	low _cambiar_minutos
  1422  0013AA  6E4C               	movwf	main@puntero_funcion,c
  1423  0013AC  0E1D               	movlw	high _cambiar_minutos
  1424  0013AE  D00E               	goto	L3
  1425  0013B0                     l3730:
  1426  0013B0  0E02               	movlw	2
  1427  0013B2  185B               	xorwf	_tamanio_hora,w,c
  1428  0013B4  105C               	iorwf	_tamanio_hora+1,w,c
  1429  0013B6  B4D8               	btfsc	status,2,c
  1430  0013B8  D00B               	goto	l3736
  1431                           
  1432                           ;main.c: 194: mostrar_menu("Inserte hora:     ");
  1433  0013BA  0E3A               	movlw	low STR_19
  1434  0013BC  6E0B               	movwf	mostrar_menu@titulo_menu,c
  1435  0013BE  0E0F               	movlw	high STR_19
  1436  0013C0  6E0C               	movwf	mostrar_menu@titulo_menu+1,c
  1437  0013C2  EC79  F014         	call	_mostrar_menu	;wreg free
  1438                           
  1439                           ;main.c: 195: puntero_funcion = cambiar_hora;
  1440  0013C6  0EC4               	movlw	low _cambiar_hora
  1441  0013C8  6E4C               	movwf	main@puntero_funcion,c
  1442  0013CA  0E1E               	movlw	high _cambiar_hora
  1443  0013CC                     L3:
  1444  0013CC  6E4D               	movwf	main@puntero_funcion+1,c
  1445  0013CE  D000               	goto	l3736
  1446  0013D0                     l3736:
  1447                           
  1448                           ;main.c: 197: }
  1449                           ;main.c: 198: }
  1450                           ;main.c: 200: if(key == 'C'){
  1451  0013D0  0E43               	movlw	67
  1452  0013D2  1854               	xorwf	_key,w,c
  1453  0013D4  A4D8               	btfss	status,2,c
  1454  0013D6  D028               	goto	l3754
  1455                           
  1456                           ;main.c: 201: lcd_gotoxy(1,2);
  1457  0013D8  0E02               	movlw	2
  1458  0013DA  6E05               	movwf	lcd_gotoxy@y,c
  1459  0013DC  0E01               	movlw	1
  1460  0013DE  ECE3  F014         	call	_lcd_gotoxy
  1461                           
  1462                           ;main.c: 202: lcd_putrs("cambiar pass");
  1463  0013E2  0EB3               	movlw	low STR_20
  1464  0013E4  6E09               	movwf	lcd_putrs@ptr,c
  1465  0013E6  0E0F               	movlw	high STR_20
  1466  0013E8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1467  0013EA  EC5E  F013         	call	_lcd_putrs	;wreg free
  1468                           
  1469                           ;main.c: 203: for (int i=0;i<10;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  1470  0013EE  0E00               	movlw	0
  1471  0013F0  6E4F               	movwf	main@i+1,c
  1472  0013F2  0E00               	movlw	0
  1473  0013F4  6E4E               	movwf	main@i,c
  1474  0013F6                     l3744:
  1475  0013F6  BE4F               	btfsc	main@i+1,7,c
  1476  0013F8  D008               	goto	l3748
  1477  0013FA  504F               	movf	main@i+1,w,c
  1478  0013FC  E112               	bnz	l3752
  1479  0013FE  0E0A               	movlw	10
  1480  001400  5C4E               	subwf	main@i,w,c
  1481  001402  B0D8               	btfsc	status,0,c
  1482  001404  D00E               	goto	l3752
  1483  001406  D001               	goto	l3748
  1484  001408  D00C               	goto	l3752
  1485  00140A                     l3748:
  1486  00140A  0EFF               	movlw	255
  1487  00140C  6E49               	movwf	??_main& (0+255),c
  1488  00140E  0E8A               	movlw	138
  1489  001410                     u3077:
  1490  001410  2EE8               	decfsz	wreg,f,c
  1491  001412  D7FE               	goto	u3077
  1492  001414  2E49               	decfsz	??_main& (0+255),f,c
  1493  001416  D7FC               	goto	u3077
  1494  001418  D000               	nop2	
  1495  00141A  4A4E               	infsnz	main@i,f,c
  1496  00141C  2A4F               	incf	main@i+1,f,c
  1497  00141E  D7EB               	goto	l3744
  1498  001420  D000               	goto	l3752
  1499  001422                     l3752:
  1500                           
  1501                           ;main.c: 204: restaurar_comando();
  1502  001422  ECD1  F014         	call	_restaurar_comando	;wreg free
  1503  001426  D000               	goto	l3754
  1504  001428                     l3754:
  1505                           
  1506                           ;main.c: 205: }
  1507                           ;main.c: 207: leer_teclado(!ocultar_teclas,puntero_funcion);
  1508  001428  504A               	movf	main@ocultar_teclas,w,c
  1509  00142A  104B               	iorwf	main@ocultar_teclas+1,w,c
  1510  00142C  A4D8               	btfss	status,2,c
  1511  00142E  D002               	goto	u3040
  1512  001430  0E01               	movlw	1
  1513  001432  D001               	goto	u3050
  1514  001434                     u3040:
  1515  001434  0E00               	movlw	0
  1516  001436                     u3050:
  1517  001436  6E42               	movwf	leer_teclado@ocultar,c
  1518  001438  6A43               	clrf	leer_teclado@ocultar+1,c
  1519  00143A  C04C  F044         	movff	main@puntero_funcion,leer_teclado@doit
  1520  00143E  C04D  F045         	movff	main@puntero_funcion+1,leer_teclado@doit+1
  1521  001442  EC31  F00C         	call	_leer_teclado	;wreg free
  1522  001446  D713               	goto	l3674
  1523                           
  1524                           ;main.c: 208: }
  1525                           ;main.c: 209: }
  1526                           ;main.c: 210: return 0;
  1527                           ;	Return value of _main is never used
  1528  001448  EF00  F000         	goto	start
  1529  00144C                     __end_of_main:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1l	equ	0xFE1
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _validar_comando *****************
  1542 ;; Defined at:
  1543 ;;		line 30 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  candidato       2    0[COMRAM] PTR unsigned char 
  1546 ;;		 -> STR_16(4), STR_11(4), STR_9(4), 
  1547 ;;  validar         2    2[COMRAM] PTR int 
  1548 ;;		 -> main@validacion(2), 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  i               2    7[COMRAM] int 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;		None               void
  1553 ;; Registers used:
  1554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1560 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1562 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1563 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1564 ;;Total ram usage:        9 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text1
  1574  0023AE                     __ptext1:
  1575                           	opt stack 0
  1576  0023AE                     _validar_comando:
  1577                           	opt stack 30
  1578                           
  1579                           ;teclado.c: 32: *validar=1;
  1580                           
  1581                           ;incstack = 0
  1582  0023AE  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1583  0023B2  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1584  0023B6  0E01               	movlw	1
  1585  0023B8  6EDE               	movwf	postinc2,c
  1586  0023BA  0E00               	movlw	0
  1587  0023BC  6EDD               	movwf	postdec2,c
  1588                           
  1589                           ;teclado.c: 33: int i = 0;
  1590  0023BE  0E00               	movlw	0
  1591  0023C0  6E09               	movwf	validar_comando@i+1,c
  1592  0023C2  0E00               	movlw	0
  1593  0023C4  6E08               	movwf	validar_comando@i,c
  1594                           
  1595                           ;teclado.c: 34: while (i < 3){
  1596  0023C6  D023               	goto	l3666
  1597  0023C8                     l3660:
  1598                           
  1599                           ;teclado.c: 35: if (comando[i] != *(candidato+i))
  1600  0023C8  0ECB               	movlw	low _comando
  1601  0023CA  2408               	addwf	validar_comando@i,w,c
  1602  0023CC  6ED9               	movwf	fsr2l,c
  1603  0023CE  0E00               	movlw	high _comando
  1604  0023D0  2009               	addwfc	validar_comando@i+1,w,c
  1605  0023D2  6EDA               	movwf	fsr2h,c
  1606  0023D4  50DF               	movf	indf2,w,c
  1607  0023D6  6E05               	movwf	??_validar_comando& (0+255),c
  1608  0023D8  5008               	movf	validar_comando@i,w,c
  1609  0023DA  2401               	addwf	validar_comando@candidato,w,c
  1610  0023DC  6E06               	movwf	(??_validar_comando+1)& (0+255),c
  1611  0023DE  5009               	movf	validar_comando@i+1,w,c
  1612  0023E0  2002               	addwfc	validar_comando@candidato+1,w,c
  1613  0023E2  6E07               	movwf	(??_validar_comando+2)& (0+255),c
  1614  0023E4  C006  FFF6         	movff	??_validar_comando+1,tblptrl
  1615  0023E8  C007  FFF7         	movff	??_validar_comando+2,tblptrh
  1616  0023EC                     	if	0	;tblptru may be non-zero
  1617  0023EC                     	endif
  1618  0023EC                     	if	0	;tblptru may be non-zero
  1619  0023EC                     	endif
  1620  0023EC  0008               	tblrd		*
  1621  0023EE  50F5               	movf	tablat,w,c
  1622  0023F0  1805               	xorwf	??_validar_comando,w,c
  1623  0023F2  B4D8               	btfsc	status,2,c
  1624  0023F4  D009               	goto	l3664
  1625                           
  1626                           ;teclado.c: 36: *validar = 0;
  1627  0023F6  C003  FFD9         	movff	validar_comando@validar,fsr2l
  1628  0023FA  C004  FFDA         	movff	validar_comando@validar+1,fsr2h
  1629  0023FE  0E00               	movlw	0
  1630  002400  6EDE               	movwf	postinc2,c
  1631  002402  0E00               	movlw	0
  1632  002404  6EDD               	movwf	postdec2,c
  1633  002406  D000               	goto	l3664
  1634  002408                     l3664:
  1635                           
  1636                           ;teclado.c: 38: i++;
  1637  002408  4A08               	infsnz	validar_comando@i,f,c
  1638  00240A  2A09               	incf	validar_comando@i+1,f,c
  1639  00240C  D000               	goto	l3666
  1640  00240E                     l3666:
  1641  00240E  BE09               	btfsc	validar_comando@i+1,7,c
  1642  002410  D7DB               	goto	l3660
  1643  002412  5009               	movf	validar_comando@i+1,w,c
  1644  002414  E106               	bnz	l315
  1645  002416  0E03               	movlw	3
  1646  002418  5C08               	subwf	validar_comando@i,w,c
  1647  00241A  B0D8               	btfsc	status,0,c
  1648  00241C  0012               	return	
  1649  00241E  D7D4               	goto	l3660
  1650  002420  0012               	return	
  1651  002422                     l315:
  1652  002422  0012               	return		;funcret
  1653  002424                     __end_of_validar_comando:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           indf2	equ	0xFDF
  1664                           postinc2	equ	0xFDE
  1665                           postdec2	equ	0xFDD
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _mostrar_menu *****************
  1671 ;; Defined at:
  1672 ;;		line 112 in file "main.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  titulo_menu     2   10[COMRAM] PTR unsigned char 
  1675 ;;		 -> STR_19(19), STR_18(22), STR_15(18), STR_14(18), 
  1676 ;;		 -> STR_13(19), 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  2   10[COMRAM] int 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1692 ;;Total ram usage:        2 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    5
  1695 ;; This function calls:
  1696 ;;		_lcd_gotoxy
  1697 ;;		_lcd_putrs
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text2
  1704  0028F2                     __ptext2:
  1705                           	opt stack 0
  1706  0028F2                     _mostrar_menu:
  1707                           	opt stack 25
  1708                           
  1709                           ;main.c: 113: lcd_gotoxy(1,1);
  1710                           
  1711                           ;incstack = 0
  1712  0028F2  0E01               	movlw	1
  1713  0028F4  6E05               	movwf	lcd_gotoxy@y,c
  1714  0028F6  0E01               	movlw	1
  1715  0028F8  ECE3  F014         	call	_lcd_gotoxy
  1716                           
  1717                           ;main.c: 114: lcd_putrs(titulo_menu);
  1718  0028FC  C00B  F009         	movff	mostrar_menu@titulo_menu,lcd_putrs@ptr
  1719  002900  C00C  F00A         	movff	mostrar_menu@titulo_menu+1,lcd_putrs@ptr+1
  1720  002904  EC5E  F013         	call	_lcd_putrs	;wreg free
  1721                           
  1722                           ;main.c: 115: lcd_gotoxy(1,2);
  1723  002908  0E02               	movlw	2
  1724  00290A  6E05               	movwf	lcd_gotoxy@y,c
  1725  00290C  0E01               	movlw	1
  1726  00290E  ECE3  F014         	call	_lcd_gotoxy
  1727                           
  1728                           ;main.c: 116: lcd_putrs("  ");
  1729  002912  0E37               	movlw	low (STR_17+18)
  1730  002914  6E09               	movwf	lcd_putrs@ptr,c
  1731  002916  0E0F               	movlw	high (STR_17+18)
  1732  002918  6E0A               	movwf	lcd_putrs@ptr+1,c
  1733  00291A  EC5E  F013         	call	_lcd_putrs	;wreg free
  1734  00291E  0012               	return		;funcret
  1735  002920                     __end_of_mostrar_menu:
  1736                           	opt stack 0
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1l	equ	0xFE1
  1745                           indf2	equ	0xFDF
  1746                           postinc2	equ	0xFDE
  1747                           postdec2	equ	0xFDD
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8
  1751                           
  1752 ;; *************** function _leer_teclado *****************
  1753 ;; Defined at:
  1754 ;;		line 69 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  ocultar         2   65[COMRAM] int 
  1757 ;;  doit            2   67[COMRAM] PTR FTN()PTR unsigned ch
  1758 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  1759 ;;		 -> cambiar_anio(0), ingresar_comando(2), mostrar_guardar_password(2), 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  i               2   70[COMRAM] int 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;		None               void
  1764 ;; Registers used:
  1765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1773 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1774 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;Total ram usage:        7 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    8
  1778 ;; This function calls:
  1779 ;;		_cambiar_anio
  1780 ;;		_cambiar_dia
  1781 ;;		_cambiar_hora
  1782 ;;		_cambiar_mes
  1783 ;;		_cambiar_minutos
  1784 ;;		_guardar_tecla_presionada
  1785 ;;		_ingresar_comando
  1786 ;;		_lcd_putrs
  1787 ;;		_mostrar_guardar_password
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text3
  1794  001862                     __ptext3:
  1795                           	opt stack 0
  1796  001862                     _leer_teclado:
  1797                           	opt stack 22
  1798                           
  1799                           ;teclado.c: 70: int i;
  1800                           ;teclado.c: 71: ocultar_teclas = ocultar;
  1801                           
  1802                           ;incstack = 0
  1803  001862  C042  F094         	movff	leer_teclado@ocultar,_ocultar_teclas
  1804  001866  C043  F095         	movff	leer_teclado@ocultar+1,_ocultar_teclas+1
  1805                           
  1806                           ;teclado.c: 73: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;i=1;
  1807  00186A  8089               	bsf	3977,0,c	;volatile
  1808  00186C  9289               	bcf	3977,1,c	;volatile
  1809  00186E  9489               	bcf	3977,2,c	;volatile
  1810  001870  9689               	bcf	3977,3,c	;volatile
  1811  001872  0E00               	movlw	0
  1812  001874  6E48               	movwf	leer_teclado@i+1,c
  1813  001876  0E01               	movlw	1
  1814  001878  6E47               	movwf	leer_teclado@i,c
  1815                           
  1816                           ;teclado.c: 74: guardar_tecla_presionada("A",i,doit);
  1817  00187A  0EEF               	movlw	low STR_24
  1818  00187C  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1819  00187E  0E0F               	movlw	high STR_24
  1820  001880  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1821  001882  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1822  001886  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1823  00188A  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1824  00188E  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1825  001892  EC73  F010         	call	_guardar_tecla_presionada	;wreg free
  1826                           
  1827                           ;teclado.c: 76: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;i=4;
  1828  001896  9089               	bcf	3977,0,c	;volatile
  1829  001898  8289               	bsf	3977,1,c	;volatile
  1830  00189A  9489               	bcf	3977,2,c	;volatile
  1831  00189C  9689               	bcf	3977,3,c	;volatile
  1832  00189E  0E00               	movlw	0
  1833  0018A0  6E48               	movwf	leer_teclado@i+1,c
  1834  0018A2  0E04               	movlw	4
  1835  0018A4  6E47               	movwf	leer_teclado@i,c
  1836                           
  1837                           ;teclado.c: 77: guardar_tecla_presionada("B",i,doit);
  1838  0018A6  0EF1               	movlw	low STR_25
  1839  0018A8  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1840  0018AA  0E0F               	movlw	high STR_25
  1841  0018AC  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1842  0018AE  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1843  0018B2  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1844  0018B6  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1845  0018BA  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1846  0018BE  EC73  F010         	call	_guardar_tecla_presionada	;wreg free
  1847                           
  1848                           ;teclado.c: 79: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;i=7;
  1849  0018C2  9089               	bcf	3977,0,c	;volatile
  1850  0018C4  9289               	bcf	3977,1,c	;volatile
  1851  0018C6  8489               	bsf	3977,2,c	;volatile
  1852  0018C8  9689               	bcf	3977,3,c	;volatile
  1853  0018CA  0E00               	movlw	0
  1854  0018CC  6E48               	movwf	leer_teclado@i+1,c
  1855  0018CE  0E07               	movlw	7
  1856  0018D0  6E47               	movwf	leer_teclado@i,c
  1857                           
  1858                           ;teclado.c: 80: guardar_tecla_presionada("C",i,doit);
  1859  0018D2  0EF3               	movlw	low STR_26
  1860  0018D4  6E3C               	movwf	guardar_tecla_presionada@letra,c
  1861  0018D6  0E0F               	movlw	high STR_26
  1862  0018D8  6E3D               	movwf	guardar_tecla_presionada@letra+1,c
  1863  0018DA  C047  F03E         	movff	leer_teclado@i,guardar_tecla_presionada@i
  1864  0018DE  C048  F03F         	movff	leer_teclado@i+1,guardar_tecla_presionada@i+1
  1865  0018E2  C044  F040         	movff	leer_teclado@doit,guardar_tecla_presionada@doit
  1866  0018E6  C045  F041         	movff	leer_teclado@doit+1,guardar_tecla_presionada@doit+1
  1867  0018EA  EC73  F010         	call	_guardar_tecla_presionada	;wreg free
  1868                           
  1869                           ;teclado.c: 82: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1870  0018EE  9089               	bcf	3977,0,c	;volatile
  1871  0018F0  9289               	bcf	3977,1,c	;volatile
  1872  0018F2  9489               	bcf	3977,2,c	;volatile
  1873  0018F4  8689               	bsf	3977,3,c	;volatile
  1874                           
  1875                           ;teclado.c: 83: {
  1876                           ;teclado.c: 84: if (PORTAbits.RA5==1){key='*';lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1877  0018F6  AA80               	btfss	3968,5,c	;volatile
  1878  0018F8  D00B               	goto	l345
  1879  0018FA  0E2A               	movlw	42
  1880  0018FC  6E54               	movwf	_key,c
  1881  0018FE  0EED               	movlw	low STR_23
  1882  001900  6E09               	movwf	lcd_putrs@ptr,c
  1883  001902  0E0F               	movlw	high STR_23
  1884  001904  6E0A               	movwf	lcd_putrs@ptr+1,c
  1885  001906  EC5E  F013         	call	_lcd_putrs	;wreg free
  1886  00190A  D000               	goto	l346
  1887  00190C                     l346:
  1888  00190C  BA80               	btfsc	3968,5,c	;volatile
  1889  00190E  D7FE               	goto	l346
  1890  001910                     l345:
  1891                           
  1892                           ;teclado.c: 85: if (PORTAbits.RA7==1){key=0;doit(key);while(PORTAbits.RA7==1){};}
  1893  001910  AE80               	btfss	3968,7,c	;volatile
  1894  001912  D011               	goto	l349
  1895  001914  0E00               	movlw	0
  1896  001916  6E54               	movwf	_key,c
  1897  001918  D801               	call	u2848
  1898  00191A  D00B               	goto	l350
  1899  00191C                     u2848:
  1900  00191C  0005               	push	
  1901  00191E  6EFA               	movwf	pclath,c
  1902  001920  5044               	movf	leer_teclado@doit,w,c
  1903  001922  6EFD               	movwf	tosl,c
  1904  001924  5045               	movf	leer_teclado@doit+1,w,c
  1905  001926  6EFE               	movwf	tosh,c
  1906  001928  50F8               	movf	tblptru,w,c
  1907  00192A  6EFF               	movwf	tosu,c
  1908  00192C  50FA               	movf	pclath,w,c
  1909  00192E  5054               	movf	_key,w,c
  1910  001930  0012               	return		;indir
  1911  001932                     l350:
  1912  001932  BE80               	btfsc	3968,7,c	;volatile
  1913  001934  D7FE               	goto	l350
  1914  001936                     l349:
  1915                           
  1916                           ;teclado.c: 86: if (PORTAbits.RA6==1){key='#';lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1917  001936  AC80               	btfss	3968,6,c	;volatile
  1918  001938  D00B               	goto	l353
  1919  00193A  0E23               	movlw	35
  1920  00193C  6E54               	movwf	_key,c
  1921  00193E  0EEB               	movlw	low STR_28
  1922  001940  6E09               	movwf	lcd_putrs@ptr,c
  1923  001942  0E0F               	movlw	high STR_28
  1924  001944  6E0A               	movwf	lcd_putrs@ptr+1,c
  1925  001946  EC5E  F013         	call	_lcd_putrs
  1926  00194A  D000               	goto	l354
  1927  00194C                     l354:
  1928  00194C  BC80               	btfsc	3968,6,c	;volatile
  1929  00194E  D7FE               	goto	l354
  1930  001950                     l353:
  1931                           
  1932                           ;teclado.c: 87: if (PORTCbits.RC2==1){key='D';lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1933  001950  A482               	btfss	3970,2,c	;volatile
  1934  001952  D00D               	goto	l3654
  1935  001954  0E44               	movlw	68
  1936  001956  6E54               	movwf	_key,c
  1937  001958  0EF5               	movlw	low STR_29
  1938  00195A  6E09               	movwf	lcd_putrs@ptr,c
  1939  00195C  0E0F               	movlw	high STR_29
  1940  00195E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1941  001960  EC5E  F013         	call	_lcd_putrs	;wreg free
  1942  001964  D000               	goto	l358
  1943  001966                     l358:
  1944  001966  A482               	btfss	3970,2,c	;volatile
  1945  001968  D002               	goto	l3654
  1946  00196A  D7FD               	goto	l358
  1947  00196C  D000               	goto	l3654
  1948  00196E                     l3654:
  1949                           
  1950                           ;teclado.c: 88: }
  1951                           ;teclado.c: 89: _delay((unsigned long)((98)*(8000000/4000.0)));
  1952  00196E  0EFF               	movlw	255
  1953  001970  6E46               	movwf	??_leer_teclado& (0+255),c
  1954  001972  0E8A               	movlw	138
  1955  001974                     u3087:
  1956  001974  2EE8               	decfsz	wreg,f,c
  1957  001976  D7FE               	goto	u3087
  1958  001978  2E46               	decfsz	??_leer_teclado& (0+255),f,c
  1959  00197A  D7FC               	goto	u3087
  1960  00197C  D000               	nop2	
  1961  00197E  0012               	return		;funcret
  1962  001980                     __end_of_leer_teclado:
  1963                           	opt stack 0
  1964                           tosu	equ	0xFFF
  1965                           tosh	equ	0xFFE
  1966                           tosl	equ	0xFFD
  1967                           pclath	equ	0xFFA
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           fsr1l	equ	0xFE1
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           fsr2h	equ	0xFDA
  1980                           fsr2l	equ	0xFD9
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _guardar_tecla_presionada *****************
  1984 ;; Defined at:
  1985 ;;		line 62 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  letra           2   59[COMRAM] PTR unsigned char 
  1988 ;;		 -> STR_26(2), STR_25(2), STR_24(2), 
  1989 ;;  i               2   61[COMRAM] int 
  1990 ;;  doit            2   63[COMRAM] PTR FTN(PTR unsigned cha
  1991 ;;		 -> cambiar_hora(0), cambiar_minutos(0), cambiar_dia(0), cambiar_mes(0), 
  1992 ;;		 -> cambiar_anio(0), ingresar_comando(2), mostrar_guardar_password(2), 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;		None
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2004 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2007 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2008 ;;Total ram usage:        6 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    7
  2011 ;; This function calls:
  2012 ;;		_cambiar_anio
  2013 ;;		_cambiar_dia
  2014 ;;		_cambiar_hora
  2015 ;;		_cambiar_mes
  2016 ;;		_cambiar_minutos
  2017 ;;		_ingresar_comando
  2018 ;;		_lcd_putrs
  2019 ;;		_mostrar_guardar_password
  2020 ;; This function is called by:
  2021 ;;		_leer_teclado
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text4
  2026  0020E6                     __ptext4:
  2027                           	opt stack 0
  2028  0020E6                     _guardar_tecla_presionada:
  2029                           	opt stack 22
  2030                           
  2031                           ;teclado.c: 63: if (PORTAbits.RA5==1){key=i;doit(key);while(PORTAbits.RA5==1){};}
  2032                           
  2033                           ;incstack = 0
  2034  0020E6  AA80               	btfss	3968,5,c	;volatile
  2035  0020E8  D012               	goto	l326
  2036  0020EA  C03E  F054         	movff	guardar_tecla_presionada@i,_key
  2037  0020EE  C054  FFE8         	movff	_key,wreg
  2038  0020F2  D801               	call	u2618
  2039  0020F4  D00A               	goto	l327
  2040  0020F6                     u2618:
  2041  0020F6  0005               	push	
  2042  0020F8  6EFA               	movwf	pclath,c
  2043  0020FA  5040               	movf	guardar_tecla_presionada@doit,w,c
  2044  0020FC  6EFD               	movwf	tosl,c
  2045  0020FE  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2046  002100  6EFE               	movwf	tosh,c
  2047  002102  50F8               	movf	tblptru,w,c
  2048  002104  6EFF               	movwf	tosu,c
  2049  002106  50FA               	movf	pclath,w,c
  2050  002108  0012               	return		;indir
  2051  00210A                     l327:
  2052  00210A  BA80               	btfsc	3968,5,c	;volatile
  2053  00210C  D7FE               	goto	l327
  2054  00210E                     l326:
  2055                           
  2056                           ;teclado.c: 64: if (PORTAbits.RA7==1){key=(i)+1;doit(key);while(PORTAbits.RA7==1){};}
  2057  00210E  AE80               	btfss	3968,7,c	;volatile
  2058  002110  D012               	goto	l330
  2059  002112  283E               	incf	guardar_tecla_presionada@i,w,c
  2060  002114  6E54               	movwf	_key,c
  2061  002116  C054  FFE8         	movff	_key,wreg
  2062  00211A  D801               	call	u2648
  2063  00211C  D00A               	goto	l331
  2064  00211E                     u2648:
  2065  00211E  0005               	push	
  2066  002120  6EFA               	movwf	pclath,c
  2067  002122  5040               	movf	guardar_tecla_presionada@doit,w,c
  2068  002124  6EFD               	movwf	tosl,c
  2069  002126  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2070  002128  6EFE               	movwf	tosh,c
  2071  00212A  50F8               	movf	tblptru,w,c
  2072  00212C  6EFF               	movwf	tosu,c
  2073  00212E  50FA               	movf	pclath,w,c
  2074  002130  0012               	return		;indir
  2075  002132                     l331:
  2076  002132  BE80               	btfsc	3968,7,c	;volatile
  2077  002134  D7FE               	goto	l331
  2078  002136                     l330:
  2079                           
  2080                           ;teclado.c: 65: if (PORTAbits.RA6==1){key=(i)+2;doit(key);while(PORTAbits.RA6==1){};}
  2081  002136  AC80               	btfss	3968,6,c	;volatile
  2082  002138  D013               	goto	l334
  2083  00213A  503E               	movf	guardar_tecla_presionada@i,w,c
  2084  00213C  0F02               	addlw	2
  2085  00213E  6E54               	movwf	_key,c
  2086  002140  C054  FFE8         	movff	_key,wreg
  2087  002144  D801               	call	u2678
  2088  002146  D00A               	goto	l335
  2089  002148                     u2678:
  2090  002148  0005               	push	
  2091  00214A  6EFA               	movwf	pclath,c
  2092  00214C  5040               	movf	guardar_tecla_presionada@doit,w,c
  2093  00214E  6EFD               	movwf	tosl,c
  2094  002150  5041               	movf	guardar_tecla_presionada@doit+1,w,c
  2095  002152  6EFE               	movwf	tosh,c
  2096  002154  50F8               	movf	tblptru,w,c
  2097  002156  6EFF               	movwf	tosu,c
  2098  002158  50FA               	movf	pclath,w,c
  2099  00215A  0012               	return		;indir
  2100  00215C                     l335:
  2101  00215C  BC80               	btfsc	3968,6,c	;volatile
  2102  00215E  D7FE               	goto	l335
  2103  002160                     l334:
  2104                           
  2105                           ;teclado.c: 66: if (PORTCbits.RC2==1){key=letra[0] ;lcd_putrs(letra);while(PORTCbits.RC2
      +                          ==1){};}
  2106  002160  A482               	btfss	3970,2,c	;volatile
  2107  002162  0012               	return	
  2108  002164  C03C  FFF6         	movff	guardar_tecla_presionada@letra,tblptrl
  2109  002168  C03D  FFF7         	movff	guardar_tecla_presionada@letra+1,tblptrh
  2110  00216C                     	if	0	;tblptru may be non-zero
  2111  00216C                     	endif
  2112  00216C                     	if	0	;tblptru may be non-zero
  2113  00216C                     	endif
  2114  00216C  0008               	tblrd		*
  2115  00216E  CFF5 F054          	movff	tablat,_key
  2116  002172  C03C  F009         	movff	guardar_tecla_presionada@letra,lcd_putrs@ptr
  2117  002176  C03D  F00A         	movff	guardar_tecla_presionada@letra+1,lcd_putrs@ptr+1
  2118  00217A  EC5E  F013         	call	_lcd_putrs	;wreg free
  2119  00217E  D000               	goto	l339
  2120  002180                     l339:
  2121  002180  A482               	btfss	3970,2,c	;volatile
  2122  002182  0012               	return	
  2123  002184  D7FD               	goto	l339
  2124  002186  0012               	return	
  2125  002188  0012               	return		;funcret
  2126  00218A                     __end_of_guardar_tecla_presionada:
  2127                           	opt stack 0
  2128                           tosu	equ	0xFFF
  2129                           tosh	equ	0xFFE
  2130                           tosl	equ	0xFFD
  2131                           pclath	equ	0xFFA
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           postdec1	equ	0xFE5
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           postinc2	equ	0xFDE
  2142                           postdec2	equ	0xFDD
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _ingresar_comando *****************
  2148 ;; Defined at:
  2149 ;;		line 127 in file "main.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  key             1    wreg     unsigned char 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  key             1   58[COMRAM] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  2  199[None  ] int 
  2156 ;; Registers used:
  2157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;Total ram usage:        1 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    3
  2170 ;; This function calls:
  2171 ;;		_guardar_comando
  2172 ;; This function is called by:
  2173 ;;		_main
  2174 ;;		_guardar_tecla_presionada
  2175 ;;		_leer_teclado
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text5
  2180  002AC2                     __ptext5:
  2181                           	opt stack 0
  2182  002AC2                     _ingresar_comando:
  2183                           	opt stack 26
  2184                           
  2185                           ;incstack = 0
  2186                           ;ingresar_comando@key stored from wreg
  2187  002AC2  6E3B               	movwf	ingresar_comando@key,c
  2188                           
  2189                           ;main.c: 128: guardar_comando(key);
  2190  002AC4  503B               	movf	ingresar_comando@key,w,c
  2191  002AC6  ECC1  F012         	call	_guardar_comando
  2192  002ACA  0012               	return		;funcret
  2193  002ACC                     __end_of_ingresar_comando:
  2194                           	opt stack 0
  2195                           tosu	equ	0xFFF
  2196                           tosh	equ	0xFFE
  2197                           tosl	equ	0xFFD
  2198                           pclath	equ	0xFFA
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           postdec1	equ	0xFE5
  2206                           fsr1l	equ	0xFE1
  2207                           indf2	equ	0xFDF
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _cambiar_hora *****************
  2215 ;; Defined at:
  2216 ;;		line 30 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  tecla           1    wreg     unsigned char 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  tecla           1   43[COMRAM] unsigned char 
  2221 ;;  i               2   44[COMRAM] int 
  2222 ;;  valor           2   46[COMRAM] int 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        6 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    5
  2239 ;; This function calls:
  2240 ;;		_Write_RTC
  2241 ;;		_convertir_a_int_hora
  2242 ;;		_guardar_elemento_hora
  2243 ;;		_inicializar_hora
  2244 ;;		_lcd_gotoxy
  2245 ;;		_lcd_putrs
  2246 ;;		_restaurar_comando
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;;		_guardar_tecla_presionada
  2250 ;;		_leer_teclado
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text6
  2255  001EC4                     __ptext6:
  2256                           	opt stack 0
  2257  001EC4                     _cambiar_hora:
  2258                           	opt stack 23
  2259                           
  2260                           ;incstack = 0
  2261                           ;cambiar_hora@tecla stored from wreg
  2262  001EC4  6E2C               	movwf	cambiar_hora@tecla,c
  2263                           
  2264                           ;hora.c: 31: int valor = 0;
  2265  001EC6  0E00               	movlw	0
  2266  001EC8  6E30               	movwf	cambiar_hora@valor+1,c
  2267  001ECA  0E00               	movlw	0
  2268  001ECC  6E2F               	movwf	cambiar_hora@valor,c
  2269                           
  2270                           ;hora.c: 33: if (tamanio_hora < 3 - 1){
  2271  001ECE  BE5C               	btfsc	_tamanio_hora+1,7,c
  2272  001ED0  D006               	goto	l3276
  2273  001ED2  505C               	movf	_tamanio_hora+1,w,c
  2274  001ED4  E11B               	bnz	l3282
  2275  001ED6  0E02               	movlw	2
  2276  001ED8  5C5B               	subwf	_tamanio_hora,w,c
  2277  001EDA  B0D8               	btfsc	status,0,c
  2278  001EDC  D017               	goto	l3282
  2279  001EDE                     l3276:
  2280                           
  2281                           ;hora.c: 34: guardar_elemento_hora(tecla,hour,&tamanio_hora);
  2282  001EDE  0EB5               	movlw	low _hour
  2283  001EE0  6E24               	movwf	guardar_elemento_hora@array,c
  2284  001EE2  0E00               	movlw	high _hour
  2285  001EE4  6E25               	movwf	guardar_elemento_hora@array+1,c
  2286  001EE6  0E5B               	movlw	low _tamanio_hora
  2287  001EE8  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  2288  001EEA  0E00               	movlw	high _tamanio_hora
  2289  001EEC  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  2290  001EEE  502C               	movf	cambiar_hora@tecla,w,c
  2291  001EF0  EC4D  F012         	call	_guardar_elemento_hora
  2292                           
  2293                           ;hora.c: 35: lcd_gotoxy(1,2);
  2294  001EF4  0E02               	movlw	2
  2295  001EF6  6E05               	movwf	lcd_gotoxy@y,c
  2296  001EF8  0E01               	movlw	1
  2297  001EFA  ECE3  F014         	call	_lcd_gotoxy
  2298                           
  2299                           ;hora.c: 36: lcd_putrs(hour);
  2300  001EFE  0EB5               	movlw	low _hour
  2301  001F00  6E09               	movwf	lcd_putrs@ptr,c
  2302  001F02  0E00               	movlw	high _hour
  2303  001F04  6E0A               	movwf	lcd_putrs@ptr+1,c
  2304  001F06  EC5E  F013         	call	_lcd_putrs	;wreg free
  2305  001F0A  D000               	goto	l3282
  2306  001F0C                     l3282:
  2307                           
  2308                           ;hora.c: 37: }
  2309                           ;hora.c: 39: if (tamanio_hora >= 3 - 1){
  2310  001F0C  BE5C               	btfsc	_tamanio_hora+1,7,c
  2311  001F0E  0012               	return	
  2312  001F10  505C               	movf	_tamanio_hora+1,w,c
  2313  001F12  E104               	bnz	u2440
  2314  001F14  0E02               	movlw	2
  2315  001F16  5C5B               	subwf	_tamanio_hora,w,c
  2316  001F18  A0D8               	btfss	status,0,c
  2317  001F1A  0012               	return	
  2318  001F1C                     u2440:
  2319                           
  2320                           ;hora.c: 40: convertir_a_int_hora(hour,&valor);
  2321  001F1C  0EB5               	movlw	low _hour
  2322  001F1E  6E0E               	movwf	convertir_a_int_hora@array,c
  2323  001F20  0E00               	movlw	high _hour
  2324  001F22  6E0F               	movwf	convertir_a_int_hora@array+1,c
  2325  001F24  0E2F               	movlw	low cambiar_hora@valor
  2326  001F26  6E10               	movwf	convertir_a_int_hora@valor,c
  2327  001F28  0E00               	movlw	high cambiar_hora@valor
  2328  001F2A  6E11               	movwf	convertir_a_int_hora@valor+1,c
  2329  001F2C  EC16  F015         	call	_convertir_a_int_hora	;wreg free
  2330                           
  2331                           ;hora.c: 41: hora = valor;
  2332  001F30  C02F  F0D5         	movff	cambiar_hora@valor,_hora
  2333  001F34  C030  F0D6         	movff	cambiar_hora@valor+1,_hora+1
  2334                           
  2335                           ;hora.c: 42: Write_RTC();
  2336  001F38  EC26  F00A         	call	_Write_RTC	;wreg free
  2337                           
  2338                           ;hora.c: 44: restaurar_comando();
  2339  001F3C  ECD1  F014         	call	_restaurar_comando	;wreg free
  2340                           
  2341                           ;hora.c: 45: inicializar_hora();
  2342  001F40  EC06  F015         	call	_inicializar_hora	;wreg free
  2343                           
  2344                           ;hora.c: 46: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2345  001F44  0E00               	movlw	0
  2346  001F46  6E2E               	movwf	cambiar_hora@i+1,c
  2347  001F48  0E00               	movlw	0
  2348  001F4A  6E2D               	movwf	cambiar_hora@i,c
  2349  001F4C                     l3294:
  2350  001F4C  BE2E               	btfsc	cambiar_hora@i+1,7,c
  2351  001F4E  D008               	goto	l3298
  2352  001F50  502E               	movf	cambiar_hora@i+1,w,c
  2353  001F52  E112               	bnz	l705
  2354  001F54  0E04               	movlw	4
  2355  001F56  5C2D               	subwf	cambiar_hora@i,w,c
  2356  001F58  B0D8               	btfsc	status,0,c
  2357  001F5A  0012               	return	
  2358  001F5C  D001               	goto	l3298
  2359  001F5E  0012               	return	
  2360  001F60                     l3298:
  2361  001F60  0EFF               	movlw	255
  2362  001F62  6E2B               	movwf	??_cambiar_hora& (0+255),c
  2363  001F64  0E8A               	movlw	138
  2364  001F66                     u3097:
  2365  001F66  2EE8               	decfsz	wreg,f,c
  2366  001F68  D7FE               	goto	u3097
  2367  001F6A  2E2B               	decfsz	??_cambiar_hora& (0+255),f,c
  2368  001F6C  D7FC               	goto	u3097
  2369  001F6E  D000               	nop2	
  2370  001F70  4A2D               	infsnz	cambiar_hora@i,f,c
  2371  001F72  2A2E               	incf	cambiar_hora@i+1,f,c
  2372  001F74  D7EB               	goto	l3294
  2373  001F76  0012               	return	
  2374  001F78                     l705:
  2375  001F78  0012               	return		;funcret
  2376  001F7A                     __end_of_cambiar_hora:
  2377                           	opt stack 0
  2378                           tosu	equ	0xFFF
  2379                           tosh	equ	0xFFE
  2380                           tosl	equ	0xFFD
  2381                           pclath	equ	0xFFA
  2382                           tblptru	equ	0xFF8
  2383                           tblptrh	equ	0xFF7
  2384                           tblptrl	equ	0xFF6
  2385                           tablat	equ	0xFF5
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           postdec1	equ	0xFE5
  2389                           fsr1l	equ	0xFE1
  2390                           indf2	equ	0xFDF
  2391                           postinc2	equ	0xFDE
  2392                           postdec2	equ	0xFDD
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _cambiar_minutos *****************
  2398 ;; Defined at:
  2399 ;;		line 50 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  tecla           1    wreg     unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  tecla           1   43[COMRAM] unsigned char 
  2404 ;;  i               2   44[COMRAM] int 
  2405 ;;  valor           2   46[COMRAM] int 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;		None               void
  2408 ;; Registers used:
  2409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2416 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2418 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2419 ;;Total ram usage:        6 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		_Write_RTC
  2424 ;;		_convertir_a_int_hora
  2425 ;;		_guardar_elemento_hora
  2426 ;;		_lcd_gotoxy
  2427 ;;		_lcd_putrs
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;;		_guardar_tecla_presionada
  2431 ;;		_leer_teclado
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text7
  2436  001D2E                     __ptext7:
  2437                           	opt stack 0
  2438  001D2E                     _cambiar_minutos:
  2439                           	opt stack 23
  2440                           
  2441                           ;incstack = 0
  2442                           ;cambiar_minutos@tecla stored from wreg
  2443  001D2E  6E2C               	movwf	cambiar_minutos@tecla,c
  2444                           
  2445                           ;hora.c: 52: int valor = 0;
  2446  001D30  0E00               	movlw	0
  2447  001D32  6E30               	movwf	cambiar_minutos@valor+1,c
  2448  001D34  0E00               	movlw	0
  2449  001D36  6E2F               	movwf	cambiar_minutos@valor,c
  2450                           
  2451                           ;hora.c: 54: if (tamanio_minutos < 3 - 1 && tamanio_hora == 0){
  2452  001D38  0100               	movlb	0	; () banked
  2453  001D3A  BFC4               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  2454  001D3C  D008               	goto	l3306
  2455  001D3E  0100               	movlb	0	; () banked
  2456  001D40  51C4               	movf	(_tamanio_minutos+1)& (0+255),w,b
  2457  001D42  E120               	bnz	l3314
  2458  001D44  0E02               	movlw	2
  2459  001D46  0100               	movlb	0	; () banked
  2460  001D48  5DC3               	subwf	_tamanio_minutos& (0+255),w,b
  2461  001D4A  B0D8               	btfsc	status,0,c
  2462  001D4C  D01B               	goto	l3314
  2463  001D4E                     l3306:
  2464                           
  2465                           ; BSR set to: 0
  2466  001D4E  505B               	movf	_tamanio_hora,w,c
  2467  001D50  105C               	iorwf	_tamanio_hora+1,w,c
  2468  001D52  A4D8               	btfss	status,2,c
  2469  001D54  D017               	goto	l3314
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;hora.c: 55: guardar_elemento_hora(tecla,minutes,&tamanio_minutos);
  2473  001D56  0EB8               	movlw	low _minutes
  2474  001D58  6E24               	movwf	guardar_elemento_hora@array,c
  2475  001D5A  0E00               	movlw	high _minutes
  2476  001D5C  6E25               	movwf	guardar_elemento_hora@array+1,c
  2477  001D5E  0EC3               	movlw	low _tamanio_minutos
  2478  001D60  6E26               	movwf	guardar_elemento_hora@tamanio_array,c
  2479  001D62  0E00               	movlw	high _tamanio_minutos
  2480  001D64  6E27               	movwf	guardar_elemento_hora@tamanio_array+1,c
  2481  001D66  502C               	movf	cambiar_minutos@tecla,w,c
  2482  001D68  EC4D  F012         	call	_guardar_elemento_hora
  2483                           
  2484                           ;hora.c: 56: lcd_gotoxy(1,2);
  2485  001D6C  0E02               	movlw	2
  2486  001D6E  6E05               	movwf	lcd_gotoxy@y,c
  2487  001D70  0E01               	movlw	1
  2488  001D72  ECE3  F014         	call	_lcd_gotoxy
  2489                           
  2490                           ;hora.c: 57: lcd_putrs(minutes);
  2491  001D76  0EB8               	movlw	low _minutes
  2492  001D78  6E09               	movwf	lcd_putrs@ptr,c
  2493  001D7A  0E00               	movlw	high _minutes
  2494  001D7C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2495  001D7E  EC5E  F013         	call	_lcd_putrs	;wreg free
  2496  001D82  D000               	goto	l3314
  2497  001D84                     l3314:
  2498                           
  2499                           ;hora.c: 58: }
  2500                           ;hora.c: 60: if (tamanio_minutos >= 3 - 1){
  2501  001D84  0100               	movlb	0	; () banked
  2502  001D86  BFC4               	btfsc	(_tamanio_minutos+1)& (0+255),7,b
  2503  001D88  0012               	return	
  2504  001D8A  0100               	movlb	0	; () banked
  2505  001D8C  51C4               	movf	(_tamanio_minutos+1)& (0+255),w,b
  2506  001D8E  E105               	bnz	u2490
  2507  001D90  0E02               	movlw	2
  2508  001D92  0100               	movlb	0	; () banked
  2509  001D94  5DC3               	subwf	_tamanio_minutos& (0+255),w,b
  2510  001D96  A0D8               	btfss	status,0,c
  2511  001D98  0012               	return	
  2512  001D9A                     u2490:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;hora.c: 62: convertir_a_int_hora(minutes,&valor);
  2516  001D9A  0EB8               	movlw	low _minutes
  2517  001D9C  6E0E               	movwf	convertir_a_int_hora@array,c
  2518  001D9E  0E00               	movlw	high _minutes
  2519  001DA0  6E0F               	movwf	convertir_a_int_hora@array+1,c
  2520  001DA2  0E2F               	movlw	low cambiar_minutos@valor
  2521  001DA4  6E10               	movwf	convertir_a_int_hora@valor,c
  2522  001DA6  0E00               	movlw	high cambiar_minutos@valor
  2523  001DA8  6E11               	movwf	convertir_a_int_hora@valor+1,c
  2524  001DAA  EC16  F015         	call	_convertir_a_int_hora	;wreg free
  2525                           
  2526                           ;hora.c: 63: minuto = valor;
  2527  001DAE  C02F  F0D9         	movff	cambiar_minutos@valor,_minuto
  2528  001DB2  C030  F0DA         	movff	cambiar_minutos@valor+1,_minuto+1
  2529                           
  2530                           ;hora.c: 64: segundo = 00;
  2531  001DB6  0E00               	movlw	0
  2532  001DB8  0100               	movlb	0	; () banked
  2533  001DBA  6F97               	movwf	(_segundo+1)& (0+255),b
  2534  001DBC  0E00               	movlw	0
  2535  001DBE  6F96               	movwf	_segundo& (0+255),b
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;hora.c: 65: Write_RTC();
  2539  001DC0  EC26  F00A         	call	_Write_RTC	;wreg free
  2540                           
  2541                           ;hora.c: 66: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2542  001DC4  0E00               	movlw	0
  2543  001DC6  6E2E               	movwf	cambiar_minutos@i+1,c
  2544  001DC8  0E00               	movlw	0
  2545  001DCA  6E2D               	movwf	cambiar_minutos@i,c
  2546  001DCC                     l3324:
  2547  001DCC  BE2E               	btfsc	cambiar_minutos@i+1,7,c
  2548  001DCE  D008               	goto	l3328
  2549  001DD0  502E               	movf	cambiar_minutos@i+1,w,c
  2550  001DD2  E112               	bnz	l712
  2551  001DD4  0E04               	movlw	4
  2552  001DD6  5C2D               	subwf	cambiar_minutos@i,w,c
  2553  001DD8  B0D8               	btfsc	status,0,c
  2554  001DDA  0012               	return	
  2555  001DDC  D001               	goto	l3328
  2556  001DDE  0012               	return	
  2557  001DE0                     l3328:
  2558  001DE0  0EFF               	movlw	255
  2559  001DE2  6E2B               	movwf	??_cambiar_minutos& (0+255),c
  2560  001DE4  0E8A               	movlw	138
  2561  001DE6                     u3107:
  2562  001DE6  2EE8               	decfsz	wreg,f,c
  2563  001DE8  D7FE               	goto	u3107
  2564  001DEA  2E2B               	decfsz	??_cambiar_minutos& (0+255),f,c
  2565  001DEC  D7FC               	goto	u3107
  2566  001DEE  D000               	nop2	
  2567  001DF0  4A2D               	infsnz	cambiar_minutos@i,f,c
  2568  001DF2  2A2E               	incf	cambiar_minutos@i+1,f,c
  2569  001DF4  D7EB               	goto	l3324
  2570  001DF6  0012               	return	
  2571  001DF8                     l712:
  2572  001DF8  0012               	return		;funcret
  2573  001DFA                     __end_of_cambiar_minutos:
  2574                           	opt stack 0
  2575                           tosu	equ	0xFFF
  2576                           tosh	equ	0xFFE
  2577                           tosl	equ	0xFFD
  2578                           pclath	equ	0xFFA
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           postinc0	equ	0xFEE
  2584                           wreg	equ	0xFE8
  2585                           postdec1	equ	0xFE5
  2586                           fsr1l	equ	0xFE1
  2587                           indf2	equ	0xFDF
  2588                           postinc2	equ	0xFDE
  2589                           postdec2	equ	0xFDD
  2590                           fsr2h	equ	0xFDA
  2591                           fsr2l	equ	0xFD9
  2592                           status	equ	0xFD8
  2593                           
  2594 ;; *************** function _cambiar_dia *****************
  2595 ;; Defined at:
  2596 ;;		line 31 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  tecla           1    wreg     unsigned char 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  tecla           1   43[COMRAM] unsigned char 
  2601 ;;  i               2   44[COMRAM] int 
  2602 ;;  valor           2   46[COMRAM] int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;		None               void
  2605 ;; Registers used:
  2606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2613 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2616 ;;Total ram usage:        6 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    5
  2619 ;; This function calls:
  2620 ;;		_Write_RTC
  2621 ;;		_convertir_a_int_fecha
  2622 ;;		_guardar_elemento_fecha
  2623 ;;		_inicializar_fecha
  2624 ;;		_lcd_gotoxy
  2625 ;;		_lcd_putrs
  2626 ;;		_restaurar_comando
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;;		_guardar_tecla_presionada
  2630 ;;		_leer_teclado
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text8
  2635  001F7A                     __ptext8:
  2636                           	opt stack 0
  2637  001F7A                     _cambiar_dia:
  2638                           	opt stack 23
  2639                           
  2640                           ;incstack = 0
  2641                           ;cambiar_dia@tecla stored from wreg
  2642  001F7A  6E2C               	movwf	cambiar_dia@tecla,c
  2643                           
  2644                           ;fecha.c: 32: int valor = 0;
  2645  001F7C  0E00               	movlw	0
  2646  001F7E  6E30               	movwf	cambiar_dia@valor+1,c
  2647  001F80  0E00               	movlw	0
  2648  001F82  6E2F               	movwf	cambiar_dia@valor,c
  2649                           
  2650                           ;fecha.c: 34: if (tamanio_dia < 3 - 1){
  2651  001F84  BE5A               	btfsc	_tamanio_dia+1,7,c
  2652  001F86  D006               	goto	l3188
  2653  001F88  505A               	movf	_tamanio_dia+1,w,c
  2654  001F8A  E11B               	bnz	l3194
  2655  001F8C  0E02               	movlw	2
  2656  001F8E  5C59               	subwf	_tamanio_dia,w,c
  2657  001F90  B0D8               	btfsc	status,0,c
  2658  001F92  D017               	goto	l3194
  2659  001F94                     l3188:
  2660                           
  2661                           ;fecha.c: 35: guardar_elemento_fecha(tecla,day,&tamanio_dia);
  2662  001F94  0EB2               	movlw	low _day
  2663  001F96  6E24               	movwf	guardar_elemento_fecha@array,c
  2664  001F98  0E00               	movlw	high _day
  2665  001F9A  6E25               	movwf	guardar_elemento_fecha@array+1,c
  2666  001F9C  0E59               	movlw	low _tamanio_dia
  2667  001F9E  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  2668  001FA0  0E00               	movlw	high _tamanio_dia
  2669  001FA2  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  2670  001FA4  502C               	movf	cambiar_dia@tecla,w,c
  2671  001FA6  EC87  F012         	call	_guardar_elemento_fecha
  2672                           
  2673                           ;fecha.c: 36: lcd_gotoxy(1,2);
  2674  001FAA  0E02               	movlw	2
  2675  001FAC  6E05               	movwf	lcd_gotoxy@y,c
  2676  001FAE  0E01               	movlw	1
  2677  001FB0  ECE3  F014         	call	_lcd_gotoxy
  2678                           
  2679                           ;fecha.c: 37: lcd_putrs(day);
  2680  001FB4  0EB2               	movlw	low _day
  2681  001FB6  6E09               	movwf	lcd_putrs@ptr,c
  2682  001FB8  0E00               	movlw	high _day
  2683  001FBA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2684  001FBC  EC5E  F013         	call	_lcd_putrs	;wreg free
  2685  001FC0  D000               	goto	l3194
  2686  001FC2                     l3194:
  2687                           
  2688                           ;fecha.c: 38: }
  2689                           ;fecha.c: 40: if (tamanio_dia >= 3 - 1){
  2690  001FC2  BE5A               	btfsc	_tamanio_dia+1,7,c
  2691  001FC4  0012               	return	
  2692  001FC6  505A               	movf	_tamanio_dia+1,w,c
  2693  001FC8  E104               	bnz	u2290
  2694  001FCA  0E02               	movlw	2
  2695  001FCC  5C59               	subwf	_tamanio_dia,w,c
  2696  001FCE  A0D8               	btfss	status,0,c
  2697  001FD0  0012               	return	
  2698  001FD2                     u2290:
  2699                           
  2700                           ;fecha.c: 41: convertir_a_int_fecha(day,&valor);
  2701  001FD2  0EB2               	movlw	low _day
  2702  001FD4  6E0E               	movwf	convertir_a_int_fecha@array,c
  2703  001FD6  0E00               	movlw	high _day
  2704  001FD8  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  2705  001FDA  0E2F               	movlw	low cambiar_dia@valor
  2706  001FDC  6E10               	movwf	convertir_a_int_fecha@valor,c
  2707  001FDE  0E00               	movlw	high cambiar_dia@valor
  2708  001FE0  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  2709  001FE2  EC25  F015         	call	_convertir_a_int_fecha	;wreg free
  2710                           
  2711                           ;fecha.c: 42: dia = valor;
  2712  001FE6  C02F  F0D1         	movff	cambiar_dia@valor,_dia
  2713  001FEA  C030  F0D2         	movff	cambiar_dia@valor+1,_dia+1
  2714                           
  2715                           ;fecha.c: 43: Write_RTC();
  2716  001FEE  EC26  F00A         	call	_Write_RTC	;wreg free
  2717                           
  2718                           ;fecha.c: 45: restaurar_comando();
  2719  001FF2  ECD1  F014         	call	_restaurar_comando	;wreg free
  2720                           
  2721                           ;fecha.c: 46: inicializar_fecha();
  2722  001FF6  EC90  F014         	call	_inicializar_fecha	;wreg free
  2723                           
  2724                           ;fecha.c: 47: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2725  001FFA  0E00               	movlw	0
  2726  001FFC  6E2E               	movwf	cambiar_dia@i+1,c
  2727  001FFE  0E00               	movlw	0
  2728  002000  6E2D               	movwf	cambiar_dia@i,c
  2729  002002                     l3206:
  2730  002002  BE2E               	btfsc	cambiar_dia@i+1,7,c
  2731  002004  D008               	goto	l3210
  2732  002006  502E               	movf	cambiar_dia@i+1,w,c
  2733  002008  E112               	bnz	l479
  2734  00200A  0E04               	movlw	4
  2735  00200C  5C2D               	subwf	cambiar_dia@i,w,c
  2736  00200E  B0D8               	btfsc	status,0,c
  2737  002010  0012               	return	
  2738  002012  D001               	goto	l3210
  2739  002014  0012               	return	
  2740  002016                     l3210:
  2741  002016  0EFF               	movlw	255
  2742  002018  6E2B               	movwf	??_cambiar_dia& (0+255),c
  2743  00201A  0E8A               	movlw	138
  2744  00201C                     u3117:
  2745  00201C  2EE8               	decfsz	wreg,f,c
  2746  00201E  D7FE               	goto	u3117
  2747  002020  2E2B               	decfsz	??_cambiar_dia& (0+255),f,c
  2748  002022  D7FC               	goto	u3117
  2749  002024  D000               	nop2	
  2750  002026  4A2D               	infsnz	cambiar_dia@i,f,c
  2751  002028  2A2E               	incf	cambiar_dia@i+1,f,c
  2752  00202A  D7EB               	goto	l3206
  2753  00202C  0012               	return	
  2754  00202E                     l479:
  2755  00202E  0012               	return		;funcret
  2756  002030                     __end_of_cambiar_dia:
  2757                           	opt stack 0
  2758                           tosu	equ	0xFFF
  2759                           tosh	equ	0xFFE
  2760                           tosl	equ	0xFFD
  2761                           pclath	equ	0xFFA
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _cambiar_mes *****************
  2778 ;; Defined at:
  2779 ;;		line 51 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  tecla           1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  tecla           1   43[COMRAM] unsigned char 
  2784 ;;  i               2   44[COMRAM] int 
  2785 ;;  valor           2   46[COMRAM] int 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;		None               void
  2788 ;; Registers used:
  2789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2796 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2798 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;Total ram usage:        6 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    5
  2802 ;; This function calls:
  2803 ;;		_Write_RTC
  2804 ;;		_convertir_a_int_fecha
  2805 ;;		_guardar_elemento_fecha
  2806 ;;		_lcd_gotoxy
  2807 ;;		_lcd_putrs
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;;		_guardar_tecla_presionada
  2811 ;;		_leer_teclado
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text9
  2816  002030                     __ptext9:
  2817                           	opt stack 0
  2818  002030                     _cambiar_mes:
  2819                           	opt stack 23
  2820                           
  2821                           ;incstack = 0
  2822                           ;cambiar_mes@tecla stored from wreg
  2823  002030  6E2C               	movwf	cambiar_mes@tecla,c
  2824                           
  2825                           ;fecha.c: 53: int valor = 0;
  2826  002032  0E00               	movlw	0
  2827  002034  6E30               	movwf	cambiar_mes@valor+1,c
  2828  002036  0E00               	movlw	0
  2829  002038  6E2F               	movwf	cambiar_mes@valor,c
  2830                           
  2831                           ;fecha.c: 55: if (tamanio_mes < 3 - 1 && tamanio_dia == 0){
  2832  00203A  BE5E               	btfsc	_tamanio_mes+1,7,c
  2833  00203C  D006               	goto	l3218
  2834  00203E  505E               	movf	_tamanio_mes+1,w,c
  2835  002040  E11F               	bnz	l3226
  2836  002042  0E02               	movlw	2
  2837  002044  5C5D               	subwf	_tamanio_mes,w,c
  2838  002046  B0D8               	btfsc	status,0,c
  2839  002048  D01B               	goto	l3226
  2840  00204A                     l3218:
  2841  00204A  5059               	movf	_tamanio_dia,w,c
  2842  00204C  105A               	iorwf	_tamanio_dia+1,w,c
  2843  00204E  A4D8               	btfss	status,2,c
  2844  002050  D017               	goto	l3226
  2845                           
  2846                           ;fecha.c: 56: guardar_elemento_fecha(tecla,month,&tamanio_mes);
  2847  002052  0EBB               	movlw	low _month
  2848  002054  6E24               	movwf	guardar_elemento_fecha@array,c
  2849  002056  0E00               	movlw	high _month
  2850  002058  6E25               	movwf	guardar_elemento_fecha@array+1,c
  2851  00205A  0E5D               	movlw	low _tamanio_mes
  2852  00205C  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  2853  00205E  0E00               	movlw	high _tamanio_mes
  2854  002060  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  2855  002062  502C               	movf	cambiar_mes@tecla,w,c
  2856  002064  EC87  F012         	call	_guardar_elemento_fecha
  2857                           
  2858                           ;fecha.c: 57: lcd_gotoxy(1,2);
  2859  002068  0E02               	movlw	2
  2860  00206A  6E05               	movwf	lcd_gotoxy@y,c
  2861  00206C  0E01               	movlw	1
  2862  00206E  ECE3  F014         	call	_lcd_gotoxy
  2863                           
  2864                           ;fecha.c: 58: lcd_putrs(month);
  2865  002072  0EBB               	movlw	low _month
  2866  002074  6E09               	movwf	lcd_putrs@ptr,c
  2867  002076  0E00               	movlw	high _month
  2868  002078  6E0A               	movwf	lcd_putrs@ptr+1,c
  2869  00207A  EC5E  F013         	call	_lcd_putrs	;wreg free
  2870  00207E  D000               	goto	l3226
  2871  002080                     l3226:
  2872                           
  2873                           ;fecha.c: 59: }
  2874                           ;fecha.c: 61: if (tamanio_mes >= 3 - 1){
  2875  002080  BE5E               	btfsc	_tamanio_mes+1,7,c
  2876  002082  0012               	return	
  2877  002084  505E               	movf	_tamanio_mes+1,w,c
  2878  002086  E104               	bnz	u2340
  2879  002088  0E02               	movlw	2
  2880  00208A  5C5D               	subwf	_tamanio_mes,w,c
  2881  00208C  A0D8               	btfss	status,0,c
  2882  00208E  0012               	return	
  2883  002090                     u2340:
  2884                           
  2885                           ;fecha.c: 63: convertir_a_int_fecha(month,&valor);
  2886  002090  0EBB               	movlw	low _month
  2887  002092  6E0E               	movwf	convertir_a_int_fecha@array,c
  2888  002094  0E00               	movlw	high _month
  2889  002096  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  2890  002098  0E2F               	movlw	low cambiar_mes@valor
  2891  00209A  6E10               	movwf	convertir_a_int_fecha@valor,c
  2892  00209C  0E00               	movlw	high cambiar_mes@valor
  2893  00209E  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  2894  0020A0  EC25  F015         	call	_convertir_a_int_fecha	;wreg free
  2895                           
  2896                           ;fecha.c: 64: mes = valor;
  2897  0020A4  C02F  F0D7         	movff	cambiar_mes@valor,_mes
  2898  0020A8  C030  F0D8         	movff	cambiar_mes@valor+1,_mes+1
  2899                           
  2900                           ;fecha.c: 65: Write_RTC();
  2901  0020AC  EC26  F00A         	call	_Write_RTC	;wreg free
  2902                           
  2903                           ;fecha.c: 66: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  2904  0020B0  0E00               	movlw	0
  2905  0020B2  6E2E               	movwf	cambiar_mes@i+1,c
  2906  0020B4  0E00               	movlw	0
  2907  0020B6  6E2D               	movwf	cambiar_mes@i,c
  2908  0020B8                     l3234:
  2909  0020B8  BE2E               	btfsc	cambiar_mes@i+1,7,c
  2910  0020BA  D008               	goto	l3238
  2911  0020BC  502E               	movf	cambiar_mes@i+1,w,c
  2912  0020BE  E112               	bnz	l486
  2913  0020C0  0E04               	movlw	4
  2914  0020C2  5C2D               	subwf	cambiar_mes@i,w,c
  2915  0020C4  B0D8               	btfsc	status,0,c
  2916  0020C6  0012               	return	
  2917  0020C8  D001               	goto	l3238
  2918  0020CA  0012               	return	
  2919  0020CC                     l3238:
  2920  0020CC  0EFF               	movlw	255
  2921  0020CE  6E2B               	movwf	??_cambiar_mes& (0+255),c
  2922  0020D0  0E8A               	movlw	138
  2923  0020D2                     u3127:
  2924  0020D2  2EE8               	decfsz	wreg,f,c
  2925  0020D4  D7FE               	goto	u3127
  2926  0020D6  2E2B               	decfsz	??_cambiar_mes& (0+255),f,c
  2927  0020D8  D7FC               	goto	u3127
  2928  0020DA  D000               	nop2	
  2929  0020DC  4A2D               	infsnz	cambiar_mes@i,f,c
  2930  0020DE  2A2E               	incf	cambiar_mes@i+1,f,c
  2931  0020E0  D7EB               	goto	l3234
  2932  0020E2  0012               	return	
  2933  0020E4                     l486:
  2934  0020E4  0012               	return		;funcret
  2935  0020E6                     __end_of_cambiar_mes:
  2936                           	opt stack 0
  2937                           tosu	equ	0xFFF
  2938                           tosh	equ	0xFFE
  2939                           tosl	equ	0xFFD
  2940                           pclath	equ	0xFFA
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           postdec1	equ	0xFE5
  2948                           fsr1l	equ	0xFE1
  2949                           indf2	equ	0xFDF
  2950                           postinc2	equ	0xFDE
  2951                           postdec2	equ	0xFDD
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _cambiar_anio *****************
  2957 ;; Defined at:
  2958 ;;		line 70 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  tecla           1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  tecla           1   43[COMRAM] unsigned char 
  2963 ;;  i               2   44[COMRAM] int 
  2964 ;;  valor           2   46[COMRAM] int 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2975 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2977 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2978 ;;Total ram usage:        6 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    5
  2981 ;; This function calls:
  2982 ;;		_Write_RTC
  2983 ;;		_convertir_a_int_fecha
  2984 ;;		_guardar_elemento_fecha
  2985 ;;		_lcd_gotoxy
  2986 ;;		_lcd_putrs
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;;		_guardar_tecla_presionada
  2990 ;;		_leer_teclado
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text10
  2995  001DFA                     __ptext10:
  2996                           	opt stack 0
  2997  001DFA                     _cambiar_anio:
  2998                           	opt stack 23
  2999                           
  3000                           ;incstack = 0
  3001                           ;cambiar_anio@tecla stored from wreg
  3002  001DFA  6E2C               	movwf	cambiar_anio@tecla,c
  3003                           
  3004                           ;fecha.c: 71: int valor = 0;
  3005  001DFC  0E00               	movlw	0
  3006  001DFE  6E30               	movwf	cambiar_anio@valor+1,c
  3007  001E00  0E00               	movlw	0
  3008  001E02  6E2F               	movwf	cambiar_anio@valor,c
  3009                           
  3010                           ;fecha.c: 73: if (tamanio_anio < 3 - 1 && tamanio_mes == 0 && tamanio_dia == 0){
  3011  001E04  0100               	movlb	0	; () banked
  3012  001E06  BFC2               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  3013  001E08  D008               	goto	l3246
  3014  001E0A  0100               	movlb	0	; () banked
  3015  001E0C  51C2               	movf	(_tamanio_anio+1)& (0+255),w,b
  3016  001E0E  E124               	bnz	l3256
  3017  001E10  0E02               	movlw	2
  3018  001E12  0100               	movlb	0	; () banked
  3019  001E14  5DC1               	subwf	_tamanio_anio& (0+255),w,b
  3020  001E16  B0D8               	btfsc	status,0,c
  3021  001E18  D01F               	goto	l3256
  3022  001E1A                     l3246:
  3023                           
  3024                           ; BSR set to: 0
  3025  001E1A  505D               	movf	_tamanio_mes,w,c
  3026  001E1C  105E               	iorwf	_tamanio_mes+1,w,c
  3027  001E1E  A4D8               	btfss	status,2,c
  3028  001E20  D01B               	goto	l3256
  3029                           
  3030                           ; BSR set to: 0
  3031  001E22  5059               	movf	_tamanio_dia,w,c
  3032  001E24  105A               	iorwf	_tamanio_dia+1,w,c
  3033  001E26  A4D8               	btfss	status,2,c
  3034  001E28  D017               	goto	l3256
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;fecha.c: 74: guardar_elemento_fecha(tecla,year,&tamanio_anio);
  3038  001E2A  0EBE               	movlw	low _year
  3039  001E2C  6E24               	movwf	guardar_elemento_fecha@array,c
  3040  001E2E  0E00               	movlw	high _year
  3041  001E30  6E25               	movwf	guardar_elemento_fecha@array+1,c
  3042  001E32  0EC1               	movlw	low _tamanio_anio
  3043  001E34  6E26               	movwf	guardar_elemento_fecha@tamanio_array,c
  3044  001E36  0E00               	movlw	high _tamanio_anio
  3045  001E38  6E27               	movwf	guardar_elemento_fecha@tamanio_array+1,c
  3046  001E3A  502C               	movf	cambiar_anio@tecla,w,c
  3047  001E3C  EC87  F012         	call	_guardar_elemento_fecha
  3048                           
  3049                           ;fecha.c: 75: lcd_gotoxy(1,2);
  3050  001E40  0E02               	movlw	2
  3051  001E42  6E05               	movwf	lcd_gotoxy@y,c
  3052  001E44  0E01               	movlw	1
  3053  001E46  ECE3  F014         	call	_lcd_gotoxy
  3054                           
  3055                           ;fecha.c: 76: lcd_putrs(year);
  3056  001E4A  0EBE               	movlw	low _year
  3057  001E4C  6E09               	movwf	lcd_putrs@ptr,c
  3058  001E4E  0E00               	movlw	high _year
  3059  001E50  6E0A               	movwf	lcd_putrs@ptr+1,c
  3060  001E52  EC5E  F013         	call	_lcd_putrs	;wreg free
  3061  001E56  D000               	goto	l3256
  3062  001E58                     l3256:
  3063                           
  3064                           ;fecha.c: 77: }
  3065                           ;fecha.c: 79: if (tamanio_anio >= 3 - 1){
  3066  001E58  0100               	movlb	0	; () banked
  3067  001E5A  BFC2               	btfsc	(_tamanio_anio+1)& (0+255),7,b
  3068  001E5C  0012               	return	
  3069  001E5E  0100               	movlb	0	; () banked
  3070  001E60  51C2               	movf	(_tamanio_anio+1)& (0+255),w,b
  3071  001E62  E105               	bnz	u2400
  3072  001E64  0E02               	movlw	2
  3073  001E66  0100               	movlb	0	; () banked
  3074  001E68  5DC1               	subwf	_tamanio_anio& (0+255),w,b
  3075  001E6A  A0D8               	btfss	status,0,c
  3076  001E6C  0012               	return	
  3077  001E6E                     u2400:
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;fecha.c: 81: convertir_a_int_fecha(year,&valor);
  3081  001E6E  0EBE               	movlw	low _year
  3082  001E70  6E0E               	movwf	convertir_a_int_fecha@array,c
  3083  001E72  0E00               	movlw	high _year
  3084  001E74  6E0F               	movwf	convertir_a_int_fecha@array+1,c
  3085  001E76  0E2F               	movlw	low cambiar_anio@valor
  3086  001E78  6E10               	movwf	convertir_a_int_fecha@valor,c
  3087  001E7A  0E00               	movlw	high cambiar_anio@valor
  3088  001E7C  6E11               	movwf	convertir_a_int_fecha@valor+1,c
  3089  001E7E  EC25  F015         	call	_convertir_a_int_fecha	;wreg free
  3090                           
  3091                           ;fecha.c: 82: anio = valor;
  3092  001E82  C02F  F0CF         	movff	cambiar_anio@valor,_anio
  3093  001E86  C030  F0D0         	movff	cambiar_anio@valor+1,_anio+1
  3094                           
  3095                           ;fecha.c: 83: Write_RTC();
  3096  001E8A  EC26  F00A         	call	_Write_RTC	;wreg free
  3097                           
  3098                           ;fecha.c: 85: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  3099  001E8E  0E00               	movlw	0
  3100  001E90  6E2E               	movwf	cambiar_anio@i+1,c
  3101  001E92  0E00               	movlw	0
  3102  001E94  6E2D               	movwf	cambiar_anio@i,c
  3103  001E96                     l3264:
  3104  001E96  BE2E               	btfsc	cambiar_anio@i+1,7,c
  3105  001E98  D008               	goto	l3268
  3106  001E9A  502E               	movf	cambiar_anio@i+1,w,c
  3107  001E9C  E112               	bnz	l493
  3108  001E9E  0E04               	movlw	4
  3109  001EA0  5C2D               	subwf	cambiar_anio@i,w,c
  3110  001EA2  B0D8               	btfsc	status,0,c
  3111  001EA4  0012               	return	
  3112  001EA6  D001               	goto	l3268
  3113  001EA8  0012               	return	
  3114  001EAA                     l3268:
  3115  001EAA  0EFF               	movlw	255
  3116  001EAC  6E2B               	movwf	??_cambiar_anio& (0+255),c
  3117  001EAE  0E8A               	movlw	138
  3118  001EB0                     u3137:
  3119  001EB0  2EE8               	decfsz	wreg,f,c
  3120  001EB2  D7FE               	goto	u3137
  3121  001EB4  2E2B               	decfsz	??_cambiar_anio& (0+255),f,c
  3122  001EB6  D7FC               	goto	u3137
  3123  001EB8  D000               	nop2	
  3124  001EBA  4A2D               	infsnz	cambiar_anio@i,f,c
  3125  001EBC  2A2E               	incf	cambiar_anio@i+1,f,c
  3126  001EBE  D7EB               	goto	l3264
  3127  001EC0  0012               	return	
  3128  001EC2                     l493:
  3129  001EC2  0012               	return		;funcret
  3130  001EC4                     __end_of_cambiar_anio:
  3131                           	opt stack 0
  3132                           tosu	equ	0xFFF
  3133                           tosh	equ	0xFFE
  3134                           tosl	equ	0xFFD
  3135                           pclath	equ	0xFFA
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _mostrar_guardar_password *****************
  3152 ;; Defined at:
  3153 ;;		line 119 in file "main.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  tecla           1    wreg     unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  tecla           1   56[COMRAM] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  2  196[None  ] int 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3171 ;;Total ram usage:        1 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    6
  3174 ;; This function calls:
  3175 ;;		_guardar_current_password
  3176 ;;		_imprimir_tecla
  3177 ;;		_sprintf
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;;		_guardar_tecla_presionada
  3181 ;;		_leer_teclado
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text11
  3186  00294E                     __ptext11:
  3187                           	opt stack 0
  3188  00294E                     _mostrar_guardar_password:
  3189                           	opt stack 23
  3190                           
  3191                           ;incstack = 0
  3192                           ;mostrar_guardar_password@tecla stored from wreg
  3193  00294E  6E39               	movwf	mostrar_guardar_password@tecla,c
  3194                           
  3195                           ;main.c: 121: imprimir_tecla(tecla);
  3196  002950  5039               	movf	mostrar_guardar_password@tecla,w,c
  3197  002952  ECF8  F013         	call	_imprimir_tecla
  3198                           
  3199                           ;main.c: 122: sprintf(buffer2,"%01u",tecla);
  3200  002956  0E9A               	movlw	low _buffer2
  3201  002958  6E0D               	movwf	sprintf@sp,c
  3202  00295A  0E00               	movlw	high _buffer2
  3203  00295C  6E0E               	movwf	sprintf@sp+1,c
  3204  00295E  0ED3               	movlw	low STR_8
  3205  002960  6E0F               	movwf	sprintf@f,c
  3206  002962  0E0F               	movlw	high STR_8
  3207  002964  6E10               	movwf	sprintf@f+1,c
  3208  002966  C039  F011         	movff	mostrar_guardar_password@tecla,?_sprintf+4
  3209  00296A  6A12               	clrf	?_sprintf+5,c
  3210  00296C  ECFC  F007         	call	_sprintf	;wreg free
  3211                           
  3212                           ;main.c: 123: guardar_current_password(*buffer2);
  3213  002970  0100               	movlb	0	; () banked
  3214  002972  519A               	movf	_buffer2& (0+255),w,b
  3215  002974  EC1B  F014         	call	_guardar_current_password
  3216  002978  0012               	return		;funcret
  3217  00297A                     __end_of_mostrar_guardar_password:
  3218                           	opt stack 0
  3219                           tosu	equ	0xFFF
  3220                           tosh	equ	0xFFE
  3221                           tosl	equ	0xFFD
  3222                           pclath	equ	0xFFA
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _imprimir_tecla *****************
  3239 ;; Defined at:
  3240 ;;		line 42 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  tecla           1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  tecla           1   55[COMRAM] unsigned char 
  3245 ;;  aux            20   35[COMRAM] unsigned char [20]
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;Total ram usage:       21 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    5
  3262 ;; This function calls:
  3263 ;;		_lcd_putrs
  3264 ;;		_sprintf
  3265 ;; This function is called by:
  3266 ;;		_mostrar_guardar_password
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text12
  3271  0027F0                     __ptext12:
  3272                           	opt stack 0
  3273  0027F0                     _imprimir_tecla:
  3274                           	opt stack 23
  3275                           
  3276                           ;incstack = 0
  3277                           ;imprimir_tecla@tecla stored from wreg
  3278  0027F0  6E38               	movwf	imprimir_tecla@tecla,c
  3279                           
  3280                           ;teclado.c: 44: unsigned char aux[20];
  3281                           ;teclado.c: 45: sprintf(aux,"%01u",tecla);
  3282  0027F2  0E24               	movlw	low imprimir_tecla@aux
  3283  0027F4  6E0D               	movwf	sprintf@sp,c
  3284  0027F6  0E00               	movlw	high imprimir_tecla@aux
  3285  0027F8  6E0E               	movwf	sprintf@sp+1,c
  3286  0027FA  0ED3               	movlw	low STR_8
  3287  0027FC  6E0F               	movwf	sprintf@f,c
  3288  0027FE  0E0F               	movlw	high STR_8
  3289  002800  6E10               	movwf	sprintf@f+1,c
  3290  002802  C038  F011         	movff	imprimir_tecla@tecla,?_sprintf+4
  3291  002806  6A12               	clrf	?_sprintf+5,c
  3292  002808  ECFC  F007         	call	_sprintf	;wreg free
  3293                           
  3294                           ;teclado.c: 46: if (ocultar_teclas == 1){
  3295  00280C  0100               	movlb	0	; () banked
  3296  00280E  0594               	decf	_ocultar_teclas& (0+255),w,b
  3297  002810  0100               	movlb	0	; () banked
  3298  002812  1195               	iorwf	(_ocultar_teclas+1)& (0+255),w,b
  3299  002814  A4D8               	btfss	status,2,c
  3300  002816  D007               	goto	l3130
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;teclado.c: 47: lcd_putrs("*");
  3304  002818  0EED               	movlw	low STR_23
  3305  00281A  6E09               	movwf	lcd_putrs@ptr,c
  3306  00281C  0E0F               	movlw	high STR_23
  3307  00281E  6E0A               	movwf	lcd_putrs@ptr+1,c
  3308  002820  EC5E  F013         	call	_lcd_putrs	;wreg free
  3309                           
  3310                           ;teclado.c: 48: }else{
  3311  002824  0012               	return	
  3312  002826                     l3130:
  3313                           
  3314                           ;teclado.c: 49: lcd_putrs(aux);
  3315  002826  0E24               	movlw	low imprimir_tecla@aux
  3316  002828  6E09               	movwf	lcd_putrs@ptr,c
  3317  00282A  0E00               	movlw	high imprimir_tecla@aux
  3318  00282C  6E0A               	movwf	lcd_putrs@ptr+1,c
  3319  00282E  EC5E  F013         	call	_lcd_putrs	;wreg free
  3320  002832  0012               	return	
  3321  002834  0012               	return		;funcret
  3322  002836                     __end_of_imprimir_tecla:
  3323                           	opt stack 0
  3324                           tosu	equ	0xFFF
  3325                           tosh	equ	0xFFE
  3326                           tosl	equ	0xFFD
  3327                           pclath	equ	0xFFA
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1l	equ	0xFE1
  3336                           indf2	equ	0xFDF
  3337                           postinc2	equ	0xFDE
  3338                           postdec2	equ	0xFDD
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _guardar_current_password *****************
  3344 ;; Defined at:
  3345 ;;		line 3 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  valor           1    wreg     unsigned char 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  valor           1    2[COMRAM] unsigned char 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;		None               void
  3352 ;; Registers used:
  3353 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3362 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3363 ;;Total ram usage:        3 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_mostrar_guardar_password
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text13
  3373  002836                     __ptext13:
  3374                           	opt stack 0
  3375  002836                     _guardar_current_password:
  3376                           	opt stack 28
  3377                           
  3378                           ;incstack = 0
  3379                           ;guardar_current_password@valor stored from wreg
  3380  002836  6E03               	movwf	guardar_current_password@valor,c
  3381                           
  3382                           ;alarma.c: 6: if (tamanio_password < 6){
  3383  002838  BE53               	btfsc	_tamanio_password+1,7,c
  3384  00283A  D006               	goto	l3134
  3385  00283C  5053               	movf	_tamanio_password+1,w,c
  3386  00283E  E11D               	bnz	l728
  3387  002840  0E06               	movlw	6
  3388  002842  5C52               	subwf	_tamanio_password,w,c
  3389  002844  B0D8               	btfsc	status,0,c
  3390  002846  0012               	return	
  3391  002848                     l3134:
  3392                           
  3393                           ;alarma.c: 7: current_password[tamanio_password] = valor;
  3394  002848  0E78               	movlw	low _current_password
  3395  00284A  2452               	addwf	_tamanio_password,w,c
  3396  00284C  6ED9               	movwf	fsr2l,c
  3397  00284E  0E00               	movlw	high _current_password
  3398  002850  2053               	addwfc	_tamanio_password+1,w,c
  3399  002852  6EDA               	movwf	fsr2h,c
  3400  002854  C003  FFDF         	movff	guardar_current_password@valor,indf2
  3401                           
  3402                           ;alarma.c: 8: current_password [tamanio_password+1] = '\0';
  3403  002858  0E01               	movlw	1
  3404  00285A  2452               	addwf	_tamanio_password,w,c
  3405  00285C  6E01               	movwf	??_guardar_current_password& (0+255),c
  3406  00285E  0E00               	movlw	0
  3407  002860  2053               	addwfc	_tamanio_password+1,w,c
  3408  002862  6E02               	movwf	(??_guardar_current_password+1)& (0+255),c
  3409  002864  0E78               	movlw	low _current_password
  3410  002866  2401               	addwf	??_guardar_current_password,w,c
  3411  002868  6ED9               	movwf	fsr2l,c
  3412  00286A  0E00               	movlw	high _current_password
  3413  00286C  2002               	addwfc	??_guardar_current_password+1,w,c
  3414  00286E  6EDA               	movwf	fsr2h,c
  3415  002870  0E00               	movlw	0
  3416  002872  6EDF               	movwf	indf2,c
  3417                           
  3418                           ;alarma.c: 9: tamanio_password++;
  3419  002874  4A52               	infsnz	_tamanio_password,f,c
  3420  002876  2A53               	incf	_tamanio_password+1,f,c
  3421  002878  0012               	return	
  3422  00287A                     l728:
  3423  00287A  0012               	return		;funcret
  3424  00287C                     __end_of_guardar_current_password:
  3425                           	opt stack 0
  3426                           tosu	equ	0xFFF
  3427                           tosh	equ	0xFFE
  3428                           tosl	equ	0xFFD
  3429                           pclath	equ	0xFFA
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           postinc0	equ	0xFEE
  3435                           wreg	equ	0xFE8
  3436                           postdec1	equ	0xFE5
  3437                           fsr1l	equ	0xFE1
  3438                           indf2	equ	0xFDF
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _guardar_comando *****************
  3446 ;; Defined at:
  3447 ;;		line 10 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  tecla           1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  tecla           1   57[COMRAM] unsigned char 
  3452 ;;  aux            20   37[COMRAM] unsigned char [20]
  3453 ;; Return value:  Size  Location     Type
  3454 ;;		None               void
  3455 ;; Registers used:
  3456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3463 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3465 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3466 ;;Total ram usage:       23 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    2
  3469 ;; This function calls:
  3470 ;;		_sprintf
  3471 ;; This function is called by:
  3472 ;;		_ingresar_comando
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text14
  3477  002582                     __ptext14:
  3478                           	opt stack 0
  3479  002582                     _guardar_comando:
  3480                           	opt stack 26
  3481                           
  3482                           ;incstack = 0
  3483                           ;guardar_comando@tecla stored from wreg
  3484  002582  6E3A               	movwf	guardar_comando@tecla,c
  3485                           
  3486                           ;teclado.c: 12: unsigned char aux[20];
  3487                           ;teclado.c: 13: sprintf(aux,"%01u",tecla);
  3488  002584  0E26               	movlw	low guardar_comando@aux
  3489  002586  6E0D               	movwf	sprintf@sp,c
  3490  002588  0E00               	movlw	high guardar_comando@aux
  3491  00258A  6E0E               	movwf	sprintf@sp+1,c
  3492  00258C  0ED3               	movlw	low STR_8
  3493  00258E  6E0F               	movwf	sprintf@f,c
  3494  002590  0E0F               	movlw	high STR_8
  3495  002592  6E10               	movwf	sprintf@f+1,c
  3496  002594  C03A  F011         	movff	guardar_comando@tecla,?_sprintf+4
  3497  002598  6A12               	clrf	?_sprintf+5,c
  3498  00259A  ECFC  F007         	call	_sprintf	;wreg free
  3499                           
  3500                           ;teclado.c: 14: if (tamanio_comando <3){
  3501  00259E  0100               	movlb	0	; () banked
  3502  0025A0  BF99               	btfsc	(_tamanio_comando+1)& (0+255),7,b
  3503  0025A2  D008               	goto	l3142
  3504  0025A4  0100               	movlb	0	; () banked
  3505  0025A6  5199               	movf	(_tamanio_comando+1)& (0+255),w,b
  3506  0025A8  E123               	bnz	l305
  3507  0025AA  0E03               	movlw	3
  3508  0025AC  0100               	movlb	0	; () banked
  3509  0025AE  5D98               	subwf	_tamanio_comando& (0+255),w,b
  3510  0025B0  B0D8               	btfsc	status,0,c
  3511  0025B2  0012               	return	
  3512  0025B4                     l3142:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;teclado.c: 15: comando[tamanio_comando] = *aux;
  3516  0025B4  0ECB               	movlw	low _comando
  3517  0025B6  0100               	movlb	0	; () banked
  3518  0025B8  2598               	addwf	_tamanio_comando& (0+255),w,b
  3519  0025BA  6ED9               	movwf	fsr2l,c
  3520  0025BC  0E00               	movlw	high _comando
  3521  0025BE  0100               	movlb	0	; () banked
  3522  0025C0  2199               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3523  0025C2  6EDA               	movwf	fsr2h,c
  3524  0025C4  C026  FFDF         	movff	guardar_comando@aux,indf2
  3525                           
  3526                           ;teclado.c: 16: comando [tamanio_comando+1] = '\0';
  3527  0025C8  0E01               	movlw	1
  3528  0025CA  0100               	movlb	0	; () banked
  3529  0025CC  2598               	addwf	_tamanio_comando& (0+255),w,b
  3530  0025CE  6E24               	movwf	??_guardar_comando& (0+255),c
  3531  0025D0  0E00               	movlw	0
  3532  0025D2  0100               	movlb	0	; () banked
  3533  0025D4  2199               	addwfc	(_tamanio_comando+1)& (0+255),w,b
  3534  0025D6  6E25               	movwf	(??_guardar_comando+1)& (0+255),c
  3535  0025D8  0ECB               	movlw	low _comando
  3536  0025DA  2424               	addwf	??_guardar_comando,w,c
  3537  0025DC  6ED9               	movwf	fsr2l,c
  3538  0025DE  0E00               	movlw	high _comando
  3539  0025E0  2025               	addwfc	??_guardar_comando+1,w,c
  3540  0025E2  6EDA               	movwf	fsr2h,c
  3541  0025E4  0E00               	movlw	0
  3542  0025E6  6EDF               	movwf	indf2,c
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;teclado.c: 17: tamanio_comando++;
  3546  0025E8  0100               	movlb	0	; () banked
  3547  0025EA  4B98               	infsnz	_tamanio_comando& (0+255),f,b
  3548  0025EC  2B99               	incf	(_tamanio_comando+1)& (0+255),f,b
  3549  0025EE  0012               	return	
  3550  0025F0                     l305:
  3551                           
  3552                           ; BSR set to: 0
  3553  0025F0  0012               	return		;funcret
  3554  0025F2                     __end_of_guardar_comando:
  3555                           	opt stack 0
  3556                           tosu	equ	0xFFF
  3557                           tosh	equ	0xFFE
  3558                           tosl	equ	0xFFD
  3559                           pclath	equ	0xFFA
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           postinc0	equ	0xFEE
  3565                           wreg	equ	0xFE8
  3566                           postdec1	equ	0xFE5
  3567                           fsr1l	equ	0xFE1
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _inicializar_hora *****************
  3576 ;; Defined at:
  3577 ;;		line 9 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;		None               void
  3584 ;; Registers used:
  3585 ;;		wreg, status,2
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_cambiar_hora
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text15
  3605  002A0C                     __ptext15:
  3606                           	opt stack 0
  3607  002A0C                     _inicializar_hora:
  3608                           	opt stack 27
  3609                           
  3610                           ;hora.c: 10: *hour = 0;
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;incstack = 0
  3614  002A0C  0E00               	movlw	0
  3615  002A0E  0100               	movlb	0	; () banked
  3616  002A10  6FB5               	movwf	_hour& (0+255),b
  3617                           
  3618                           ;hora.c: 11: *minutes = 0;
  3619  002A12  0E00               	movlw	0
  3620  002A14  0100               	movlb	0	; () banked
  3621  002A16  6FB8               	movwf	_minutes& (0+255),b
  3622                           
  3623                           ;hora.c: 13: tamanio_hora = 0;
  3624  002A18  0E00               	movlw	0
  3625  002A1A  6E5C               	movwf	_tamanio_hora+1,c
  3626  002A1C  0E00               	movlw	0
  3627  002A1E  6E5B               	movwf	_tamanio_hora,c
  3628                           
  3629                           ;hora.c: 14: tamanio_minutos = 0;
  3630  002A20  0E00               	movlw	0
  3631  002A22  0100               	movlb	0	; () banked
  3632  002A24  6FC4               	movwf	(_tamanio_minutos+1)& (0+255),b
  3633  002A26  0E00               	movlw	0
  3634  002A28  6FC3               	movwf	_tamanio_minutos& (0+255),b
  3635                           
  3636                           ; BSR set to: 0
  3637  002A2A  0012               	return		;funcret
  3638  002A2C                     __end_of_inicializar_hora:
  3639                           	opt stack 0
  3640                           tosu	equ	0xFFF
  3641                           tosh	equ	0xFFE
  3642                           tosl	equ	0xFFD
  3643                           pclath	equ	0xFFA
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           postinc0	equ	0xFEE
  3649                           wreg	equ	0xFE8
  3650                           postdec1	equ	0xFE5
  3651                           fsr1l	equ	0xFE1
  3652                           indf2	equ	0xFDF
  3653                           postinc2	equ	0xFDE
  3654                           postdec2	equ	0xFDD
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function _guardar_elemento_hora *****************
  3660 ;; Defined at:
  3661 ;;		line 17 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  tecla           1    wreg     unsigned char 
  3664 ;;  array           2   35[COMRAM] PTR unsigned char 
  3665 ;;		 -> minutes(3), hour(3), 
  3666 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  3667 ;;		 -> tamanio_hora(2), tamanio_minutos(2), 
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  tecla           1   41[COMRAM] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;		None               void
  3672 ;; Registers used:
  3673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3679 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3682 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3683 ;;Total ram usage:        7 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    2
  3686 ;; This function calls:
  3687 ;;		_sprintf
  3688 ;; This function is called by:
  3689 ;;		_cambiar_hora
  3690 ;;		_cambiar_minutos
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text16
  3695  00249A                     __ptext16:
  3696                           	opt stack 0
  3697  00249A                     _guardar_elemento_hora:
  3698                           	opt stack 25
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;incstack = 0
  3702                           ;guardar_elemento_hora@tecla stored from wreg
  3703  00249A  6E2A               	movwf	guardar_elemento_hora@tecla,c
  3704                           
  3705                           ;hora.c: 19: sprintf(buffer2,"%01u",tecla);
  3706  00249C  0E9A               	movlw	low _buffer2
  3707  00249E  6E0D               	movwf	sprintf@sp,c
  3708  0024A0  0E00               	movlw	high _buffer2
  3709  0024A2  6E0E               	movwf	sprintf@sp+1,c
  3710  0024A4  0ED3               	movlw	low STR_8
  3711  0024A6  6E0F               	movwf	sprintf@f,c
  3712  0024A8  0E0F               	movlw	high STR_8
  3713  0024AA  6E10               	movwf	sprintf@f+1,c
  3714  0024AC  C02A  F011         	movff	guardar_elemento_hora@tecla,?_sprintf+4
  3715  0024B0  6A12               	clrf	?_sprintf+5,c
  3716  0024B2  ECFC  F007         	call	_sprintf	;wreg free
  3717                           
  3718                           ;hora.c: 20: array[*tamanio_array] = *buffer2;
  3719  0024B6  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  3720  0024BA  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  3721  0024BE  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  3722  0024C2  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  3723  0024C6  5028               	movf	??_guardar_elemento_hora,w,c
  3724  0024C8  2424               	addwf	guardar_elemento_hora@array,w,c
  3725  0024CA  6ED9               	movwf	fsr2l,c
  3726  0024CC  5029               	movf	??_guardar_elemento_hora+1,w,c
  3727  0024CE  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  3728  0024D0  6EDA               	movwf	fsr2h,c
  3729  0024D2  C09A  FFDF         	movff	_buffer2,indf2
  3730                           
  3731                           ;hora.c: 21: array [(*tamanio_array)+1] = 0;
  3732  0024D6  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  3733  0024DA  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  3734  0024DE  CFDE F028          	movff	postinc2,??_guardar_elemento_hora
  3735  0024E2  CFDD F029          	movff	postdec2,??_guardar_elemento_hora+1
  3736  0024E6  0E01               	movlw	1
  3737  0024E8  2628               	addwf	??_guardar_elemento_hora,f,c
  3738  0024EA  0E00               	movlw	0
  3739  0024EC  2229               	addwfc	??_guardar_elemento_hora+1,f,c
  3740  0024EE  5028               	movf	??_guardar_elemento_hora,w,c
  3741  0024F0  2424               	addwf	guardar_elemento_hora@array,w,c
  3742  0024F2  6ED9               	movwf	fsr2l,c
  3743  0024F4  5029               	movf	??_guardar_elemento_hora+1,w,c
  3744  0024F6  2025               	addwfc	guardar_elemento_hora@array+1,w,c
  3745  0024F8  6EDA               	movwf	fsr2h,c
  3746  0024FA  0E00               	movlw	0
  3747  0024FC  6EDF               	movwf	indf2,c
  3748                           
  3749                           ;hora.c: 22: (*tamanio_array)++;
  3750  0024FE  C026  FFD9         	movff	guardar_elemento_hora@tamanio_array,fsr2l
  3751  002502  C027  FFDA         	movff	guardar_elemento_hora@tamanio_array+1,fsr2h
  3752  002506  2ADE               	incf	postinc2,f,c
  3753  002508  0E00               	movlw	0
  3754  00250A  22DD               	addwfc	postdec2,f,c
  3755  00250C  0012               	return		;funcret
  3756  00250E                     __end_of_guardar_elemento_hora:
  3757                           	opt stack 0
  3758                           tosu	equ	0xFFF
  3759                           tosh	equ	0xFFE
  3760                           tosl	equ	0xFFD
  3761                           pclath	equ	0xFFA
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _convertir_a_int_hora *****************
  3778 ;; Defined at:
  3779 ;;		line 25 in file "../../../../../../Program Files/Unimic/unmc_01/headers/hora.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  array           2   13[COMRAM] PTR unsigned char 
  3782 ;;		 -> minutes(3), hour(3), 
  3783 ;;  valor           2   15[COMRAM] PTR int 
  3784 ;;		 -> cambiar_minutos@valor(2), cambiar_hora@valor(2), 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;		None               void
  3789 ;; Registers used:
  3790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3800 ;;Total ram usage:        4 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    2
  3803 ;; This function calls:
  3804 ;;		_atoi
  3805 ;; This function is called by:
  3806 ;;		_cambiar_hora
  3807 ;;		_cambiar_minutos
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text17
  3812  002A2C                     __ptext17:
  3813                           	opt stack 0
  3814  002A2C                     _convertir_a_int_hora:
  3815                           	opt stack 25
  3816                           
  3817                           ;hora.c: 26: *valor = atoi(array);
  3818                           
  3819                           ;incstack = 0
  3820  002A2C  C00E  F007         	movff	convertir_a_int_hora@array,atoi@s
  3821  002A30  C00F  F008         	movff	convertir_a_int_hora@array+1,atoi@s+1
  3822  002A34  EC2D  F00E         	call	_atoi	;wreg free
  3823  002A38  C010  FFD9         	movff	convertir_a_int_hora@valor,fsr2l
  3824  002A3C  C011  FFDA         	movff	convertir_a_int_hora@valor+1,fsr2h
  3825  002A40  C007  FFDE         	movff	?_atoi,postinc2
  3826  002A44  C008  FFDD         	movff	?_atoi+1,postdec2
  3827  002A48  0012               	return		;funcret
  3828  002A4A                     __end_of_convertir_a_int_hora:
  3829                           	opt stack 0
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           pclath	equ	0xFFA
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postdec1	equ	0xFE5
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _restaurar_comando *****************
  3850 ;; Defined at:
  3851 ;;		line 53 in file "../../../../../../Program Files/Unimic/unmc_01/sources/teclado.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, status,2
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_main
  3875 ;;		_cambiar_dia
  3876 ;;		_cambiar_hora
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text18
  3881  0029A2                     __ptext18:
  3882                           	opt stack 0
  3883  0029A2                     _restaurar_comando:
  3884                           	opt stack 30
  3885                           
  3886                           ;teclado.c: 54: tamanio_comando = 0;
  3887                           
  3888                           ;incstack = 0
  3889  0029A2  0E00               	movlw	0
  3890  0029A4  0100               	movlb	0	; () banked
  3891  0029A6  6F99               	movwf	(_tamanio_comando+1)& (0+255),b
  3892  0029A8  0E00               	movlw	0
  3893  0029AA  6F98               	movwf	_tamanio_comando& (0+255),b
  3894                           
  3895                           ;teclado.c: 56: comando[0]='x';
  3896  0029AC  0E78               	movlw	120
  3897  0029AE  0100               	movlb	0	; () banked
  3898  0029B0  6FCB               	movwf	_comando& (0+255),b
  3899                           
  3900                           ;teclado.c: 57: comando[1]='x';
  3901  0029B2  0E78               	movlw	120
  3902  0029B4  0100               	movlb	0	; () banked
  3903  0029B6  6FCC               	movwf	(_comando+1)& (0+255),b
  3904                           
  3905                           ;teclado.c: 58: comando[2]='x';
  3906  0029B8  0E78               	movlw	120
  3907  0029BA  0100               	movlb	0	; () banked
  3908  0029BC  6FCD               	movwf	(_comando+2)& (0+255),b
  3909                           
  3910                           ;teclado.c: 59: comando[3]=0;
  3911  0029BE  0E00               	movlw	0
  3912  0029C0  0100               	movlb	0	; () banked
  3913  0029C2  6FCE               	movwf	(_comando+3)& (0+255),b
  3914                           
  3915                           ; BSR set to: 0
  3916  0029C4  0012               	return		;funcret
  3917  0029C6                     __end_of_restaurar_comando:
  3918                           	opt stack 0
  3919                           tosu	equ	0xFFF
  3920                           tosh	equ	0xFFE
  3921                           tosl	equ	0xFFD
  3922                           pclath	equ	0xFFA
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           fsr1l	equ	0xFE1
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _inicializar_fecha *****************
  3939 ;; Defined at:
  3940 ;;		line 8 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;		None               void
  3947 ;; Registers used:
  3948 ;;		wreg, status,2
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_cambiar_dia
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text19
  3968  002920                     __ptext19:
  3969                           	opt stack 0
  3970  002920                     _inicializar_fecha:
  3971                           	opt stack 27
  3972                           
  3973                           ;fecha.c: 9: *day = 0;
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;incstack = 0
  3977  002920  0E00               	movlw	0
  3978  002922  0100               	movlb	0	; () banked
  3979  002924  6FB2               	movwf	_day& (0+255),b
  3980                           
  3981                           ;fecha.c: 10: *month = 0;
  3982  002926  0E00               	movlw	0
  3983  002928  0100               	movlb	0	; () banked
  3984  00292A  6FBB               	movwf	_month& (0+255),b
  3985                           
  3986                           ;fecha.c: 11: *year = 0;
  3987  00292C  0E00               	movlw	0
  3988  00292E  0100               	movlb	0	; () banked
  3989  002930  6FBE               	movwf	_year& (0+255),b
  3990                           
  3991                           ;fecha.c: 13: tamanio_dia = 0;
  3992  002932  0E00               	movlw	0
  3993  002934  6E5A               	movwf	_tamanio_dia+1,c
  3994  002936  0E00               	movlw	0
  3995  002938  6E59               	movwf	_tamanio_dia,c
  3996                           
  3997                           ;fecha.c: 14: tamanio_mes = 0;
  3998  00293A  0E00               	movlw	0
  3999  00293C  6E5E               	movwf	_tamanio_mes+1,c
  4000  00293E  0E00               	movlw	0
  4001  002940  6E5D               	movwf	_tamanio_mes,c
  4002                           
  4003                           ;fecha.c: 15: tamanio_anio = 0;
  4004  002942  0E00               	movlw	0
  4005  002944  0100               	movlb	0	; () banked
  4006  002946  6FC2               	movwf	(_tamanio_anio+1)& (0+255),b
  4007  002948  0E00               	movlw	0
  4008  00294A  6FC1               	movwf	_tamanio_anio& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011  00294C  0012               	return		;funcret
  4012  00294E                     __end_of_inicializar_fecha:
  4013                           	opt stack 0
  4014                           tosu	equ	0xFFF
  4015                           tosh	equ	0xFFE
  4016                           tosl	equ	0xFFD
  4017                           pclath	equ	0xFFA
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1l	equ	0xFE1
  4026                           indf2	equ	0xFDF
  4027                           postinc2	equ	0xFDE
  4028                           postdec2	equ	0xFDD
  4029                           fsr2h	equ	0xFDA
  4030                           fsr2l	equ	0xFD9
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _guardar_elemento_fecha *****************
  4034 ;; Defined at:
  4035 ;;		line 18 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  tecla           1    wreg     unsigned char 
  4038 ;;  array           2   35[COMRAM] PTR unsigned char 
  4039 ;;		 -> year(3), month(3), day(3), 
  4040 ;;  tamanio_arra    2   37[COMRAM] PTR int 
  4041 ;;		 -> tamanio_dia(2), tamanio_mes(2), tamanio_anio(2), 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  tecla           1   41[COMRAM] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;		None               void
  4046 ;; Registers used:
  4047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4056 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4057 ;;Total ram usage:        7 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    2
  4060 ;; This function calls:
  4061 ;;		_sprintf
  4062 ;; This function is called by:
  4063 ;;		_cambiar_dia
  4064 ;;		_cambiar_mes
  4065 ;;		_cambiar_anio
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text20
  4070  00250E                     __ptext20:
  4071                           	opt stack 0
  4072  00250E                     _guardar_elemento_fecha:
  4073                           	opt stack 25
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;incstack = 0
  4077                           ;guardar_elemento_fecha@tecla stored from wreg
  4078  00250E  6E2A               	movwf	guardar_elemento_fecha@tecla,c
  4079                           
  4080                           ;fecha.c: 20: sprintf(buffer2,"%01u",tecla);
  4081  002510  0E9A               	movlw	low _buffer2
  4082  002512  6E0D               	movwf	sprintf@sp,c
  4083  002514  0E00               	movlw	high _buffer2
  4084  002516  6E0E               	movwf	sprintf@sp+1,c
  4085  002518  0ED3               	movlw	low STR_8
  4086  00251A  6E0F               	movwf	sprintf@f,c
  4087  00251C  0E0F               	movlw	high STR_8
  4088  00251E  6E10               	movwf	sprintf@f+1,c
  4089  002520  C02A  F011         	movff	guardar_elemento_fecha@tecla,?_sprintf+4
  4090  002524  6A12               	clrf	?_sprintf+5,c
  4091  002526  ECFC  F007         	call	_sprintf	;wreg free
  4092                           
  4093                           ;fecha.c: 21: array[*tamanio_array] = *buffer2;
  4094  00252A  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4095  00252E  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4096  002532  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4097  002536  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4098  00253A  5028               	movf	??_guardar_elemento_fecha,w,c
  4099  00253C  2424               	addwf	guardar_elemento_fecha@array,w,c
  4100  00253E  6ED9               	movwf	fsr2l,c
  4101  002540  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4102  002542  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4103  002544  6EDA               	movwf	fsr2h,c
  4104  002546  C09A  FFDF         	movff	_buffer2,indf2
  4105                           
  4106                           ;fecha.c: 22: array [(*tamanio_array)+1] = 0;
  4107  00254A  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4108  00254E  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4109  002552  CFDE F028          	movff	postinc2,??_guardar_elemento_fecha
  4110  002556  CFDD F029          	movff	postdec2,??_guardar_elemento_fecha+1
  4111  00255A  0E01               	movlw	1
  4112  00255C  2628               	addwf	??_guardar_elemento_fecha,f,c
  4113  00255E  0E00               	movlw	0
  4114  002560  2229               	addwfc	??_guardar_elemento_fecha+1,f,c
  4115  002562  5028               	movf	??_guardar_elemento_fecha,w,c
  4116  002564  2424               	addwf	guardar_elemento_fecha@array,w,c
  4117  002566  6ED9               	movwf	fsr2l,c
  4118  002568  5029               	movf	??_guardar_elemento_fecha+1,w,c
  4119  00256A  2025               	addwfc	guardar_elemento_fecha@array+1,w,c
  4120  00256C  6EDA               	movwf	fsr2h,c
  4121  00256E  0E00               	movlw	0
  4122  002570  6EDF               	movwf	indf2,c
  4123                           
  4124                           ;fecha.c: 23: (*tamanio_array)++;
  4125  002572  C026  FFD9         	movff	guardar_elemento_fecha@tamanio_array,fsr2l
  4126  002576  C027  FFDA         	movff	guardar_elemento_fecha@tamanio_array+1,fsr2h
  4127  00257A  2ADE               	incf	postinc2,f,c
  4128  00257C  0E00               	movlw	0
  4129  00257E  22DD               	addwfc	postdec2,f,c
  4130  002580  0012               	return		;funcret
  4131  002582                     __end_of_guardar_elemento_fecha:
  4132                           	opt stack 0
  4133                           tosu	equ	0xFFF
  4134                           tosh	equ	0xFFE
  4135                           tosl	equ	0xFFD
  4136                           pclath	equ	0xFFA
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           postinc0	equ	0xFEE
  4142                           wreg	equ	0xFE8
  4143                           postdec1	equ	0xFE5
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function _convertir_a_int_fecha *****************
  4153 ;; Defined at:
  4154 ;;		line 26 in file "../../../../../../Program Files/Unimic/unmc_01/sources/fecha.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  array           2   13[COMRAM] PTR unsigned char 
  4157 ;;		 -> year(3), month(3), day(3), 
  4158 ;;  valor           2   15[COMRAM] PTR int 
  4159 ;;		 -> cambiar_anio@valor(2), cambiar_mes@valor(2), cambiar_dia@valor(2), 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4175 ;;Total ram usage:        4 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    2
  4178 ;; This function calls:
  4179 ;;		_atoi
  4180 ;; This function is called by:
  4181 ;;		_cambiar_dia
  4182 ;;		_cambiar_mes
  4183 ;;		_cambiar_anio
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text21
  4188  002A4A                     __ptext21:
  4189                           	opt stack 0
  4190  002A4A                     _convertir_a_int_fecha:
  4191                           	opt stack 25
  4192                           
  4193                           ;fecha.c: 27: *valor = atoi(array);
  4194                           
  4195                           ;incstack = 0
  4196  002A4A  C00E  F007         	movff	convertir_a_int_fecha@array,atoi@s
  4197  002A4E  C00F  F008         	movff	convertir_a_int_fecha@array+1,atoi@s+1
  4198  002A52  EC2D  F00E         	call	_atoi	;wreg free
  4199  002A56  C010  FFD9         	movff	convertir_a_int_fecha@valor,fsr2l
  4200  002A5A  C011  FFDA         	movff	convertir_a_int_fecha@valor+1,fsr2h
  4201  002A5E  C007  FFDE         	movff	?_atoi,postinc2
  4202  002A62  C008  FFDD         	movff	?_atoi+1,postdec2
  4203  002A66  0012               	return		;funcret
  4204  002A68                     __end_of_convertir_a_int_fecha:
  4205                           	opt stack 0
  4206                           tosu	equ	0xFFF
  4207                           tosh	equ	0xFFE
  4208                           tosl	equ	0xFFD
  4209                           pclath	equ	0xFFA
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           postinc0	equ	0xFEE
  4215                           wreg	equ	0xFE8
  4216                           postdec1	equ	0xFE5
  4217                           fsr1l	equ	0xFE1
  4218                           indf2	equ	0xFDF
  4219                           postinc2	equ	0xFDE
  4220                           postdec2	equ	0xFDD
  4221                           fsr2h	equ	0xFDA
  4222                           fsr2l	equ	0xFD9
  4223                           status	equ	0xFD8
  4224                           
  4225 ;; *************** function _atoi *****************
  4226 ;; Defined at:
  4227 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  s               2    6[COMRAM] PTR const unsigned char 
  4230 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  4231 ;;		 -> day(3), 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  a               2   11[COMRAM] int 
  4234 ;;  sign            1   10[COMRAM] unsigned char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  2    6[COMRAM] int 
  4237 ;; Registers used:
  4238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4245 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4247 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4248 ;;Total ram usage:        7 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    1
  4251 ;; This function calls:
  4252 ;;		___wmul
  4253 ;;		_isdigit
  4254 ;; This function is called by:
  4255 ;;		_convertir_a_int_fecha
  4256 ;;		_convertir_a_int_hora
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text22
  4261  001C5A                     __ptext22:
  4262                           	opt stack 0
  4263  001C5A                     _atoi:
  4264                           	opt stack 25
  4265                           
  4266                           ;incstack = 0
  4267  001C5A  D003               	goto	l2870
  4268  001C5C                     l2868:
  4269  001C5C  4A07               	infsnz	atoi@s,f,c
  4270  001C5E  2A08               	incf	atoi@s+1,f,c
  4271  001C60  D000               	goto	l2870
  4272  001C62                     l2870:
  4273  001C62  C007  FFD9         	movff	atoi@s,fsr2l
  4274  001C66  C008  FFDA         	movff	atoi@s+1,fsr2h
  4275  001C6A  0E20               	movlw	32
  4276  001C6C  18DE               	xorwf	postinc2,w,c
  4277  001C6E  B4D8               	btfsc	status,2,c
  4278  001C70  D7F5               	goto	l2868
  4279  001C72  C007  FFD9         	movff	atoi@s,fsr2l
  4280  001C76  C008  FFDA         	movff	atoi@s+1,fsr2h
  4281  001C7A  0E09               	movlw	9
  4282  001C7C  18DE               	xorwf	postinc2,w,c
  4283  001C7E  B4D8               	btfsc	status,2,c
  4284  001C80  D7ED               	goto	l2868
  4285  001C82  0E00               	movlw	0
  4286  001C84  6E0D               	movwf	atoi@a+1,c
  4287  001C86  0E00               	movlw	0
  4288  001C88  6E0C               	movwf	atoi@a,c
  4289  001C8A  0E00               	movlw	0
  4290  001C8C  6E0B               	movwf	atoi@sign,c
  4291  001C8E  C007  FFD9         	movff	atoi@s,fsr2l
  4292  001C92  C008  FFDA         	movff	atoi@s+1,fsr2h
  4293  001C96  0E2D               	movlw	45
  4294  001C98  18DE               	xorwf	postinc2,w,c
  4295  001C9A  A4D8               	btfss	status,2,c
  4296  001C9C  D002               	goto	l2880
  4297  001C9E  2A0B               	incf	atoi@sign,f,c
  4298  001CA0  D025               	goto	l2886
  4299  001CA2                     l2880:
  4300  001CA2  C007  FFD9         	movff	atoi@s,fsr2l
  4301  001CA6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4302  001CAA  0E2B               	movlw	43
  4303  001CAC  18DE               	xorwf	postinc2,w,c
  4304  001CAE  A4D8               	btfss	status,2,c
  4305  001CB0  D020               	goto	l2888
  4306  001CB2  D01C               	goto	l2886
  4307  001CB4  D01E               	goto	l2888
  4308  001CB6                     l2884:
  4309  001CB6  C00C  F001         	movff	atoi@a,___wmul@multiplier
  4310  001CBA  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  4311  001CBE  0E00               	movlw	0
  4312  001CC0  6E04               	movwf	___wmul@multiplicand+1,c
  4313  001CC2  0E0A               	movlw	10
  4314  001CC4  6E03               	movwf	___wmul@multiplicand,c
  4315  001CC6  ECBD  F014         	call	___wmul	;wreg free
  4316  001CCA  C007  FFD9         	movff	atoi@s,fsr2l
  4317  001CCE  C008  FFDA         	movff	atoi@s+1,fsr2h
  4318  001CD2  50DF               	movf	indf2,w,c
  4319  001CD4  6E09               	movwf	??_atoi& (0+255),c
  4320  001CD6  6A0A               	clrf	(??_atoi+1)& (0+255),c
  4321  001CD8  5001               	movf	?___wmul,w,c
  4322  001CDA  2609               	addwf	??_atoi,f,c
  4323  001CDC  5002               	movf	?___wmul+1,w,c
  4324  001CDE  220A               	addwfc	??_atoi+1,f,c
  4325  001CE0  0ED0               	movlw	208
  4326  001CE2  2409               	addwf	??_atoi,w,c
  4327  001CE4  6E0C               	movwf	atoi@a,c
  4328  001CE6  0EFF               	movlw	255
  4329  001CE8  200A               	addwfc	??_atoi+1,w,c
  4330  001CEA  6E0D               	movwf	atoi@a+1,c
  4331  001CEC                     l2886:
  4332  001CEC  4A07               	infsnz	atoi@s,f,c
  4333  001CEE  2A08               	incf	atoi@s+1,f,c
  4334  001CF0  D000               	goto	l2888
  4335  001CF2                     l2888:
  4336  001CF2  C007  FFD9         	movff	atoi@s,fsr2l
  4337  001CF6  C008  FFDA         	movff	atoi@s+1,fsr2h
  4338  001CFA  50DF               	movf	indf2,w,c
  4339  001CFC  ECF5  F014         	call	_isdigit
  4340  001D00  B0D8               	btfsc	status,0,c
  4341  001D02  D7D9               	goto	l2884
  4342  001D04  500B               	movf	atoi@sign,w,c
  4343  001D06  B4D8               	btfsc	status,2,c
  4344  001D08  D00D               	goto	l1058
  4345  001D0A  C00C  F009         	movff	atoi@a,??_atoi
  4346  001D0E  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  4347  001D12  1E09               	comf	??_atoi,f,c
  4348  001D14  1E0A               	comf	??_atoi+1,f,c
  4349  001D16  4A09               	infsnz	??_atoi,f,c
  4350  001D18  2A0A               	incf	??_atoi+1,f,c
  4351  001D1A  C009  F007         	movff	??_atoi,?_atoi
  4352  001D1E  C00A  F008         	movff	??_atoi+1,?_atoi+1
  4353  001D22  0012               	return	
  4354  001D24                     l1058:
  4355  001D24  C00C  F007         	movff	atoi@a,?_atoi
  4356  001D28  C00D  F008         	movff	atoi@a+1,?_atoi+1
  4357  001D2C  0012               	return		;funcret
  4358  001D2E                     __end_of_atoi:
  4359                           	opt stack 0
  4360                           tosu	equ	0xFFF
  4361                           tosh	equ	0xFFE
  4362                           tosl	equ	0xFFD
  4363                           pclath	equ	0xFFA
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _ingresar_password *****************
  4380 ;; Defined at:
  4381 ;;		line 89 in file "main.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  i               2   27[COMRAM] int 
  4386 ;;  i               2   29[COMRAM] int 
  4387 ;;  clear          16   11[COMRAM] unsigned char [16]
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  2  184[None  ] int 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4398 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4400 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4401 ;;Total ram usage:       21 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    5
  4404 ;; This function calls:
  4405 ;;		_lcd_comand
  4406 ;;		_lcd_gotoxy
  4407 ;;		_lcd_putrs
  4408 ;;		_validar_password
  4409 ;; This function is called by:
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text23
  4415  001A8C                     __ptext23:
  4416                           	opt stack 0
  4417  001A8C                     _ingresar_password:
  4418                           	opt stack 25
  4419                           
  4420                           ;main.c: 90: char clear[16];
  4421                           ;main.c: 91: for (int i=0;i<16;i++) clear[i]=' ';
  4422                           
  4423                           ;incstack = 0
  4424  001A8C  0E00               	movlw	0
  4425  001A8E  6E1F               	movwf	ingresar_password@i+1,c
  4426  001A90  0E00               	movlw	0
  4427  001A92  6E1E               	movwf	ingresar_password@i,c
  4428  001A94                     l3508:
  4429  001A94  BE1F               	btfsc	ingresar_password@i+1,7,c
  4430  001A96  D008               	goto	l3512
  4431  001A98  501F               	movf	ingresar_password@i+1,w,c
  4432  001A9A  E112               	bnz	l3518
  4433  001A9C  0E10               	movlw	16
  4434  001A9E  5C1E               	subwf	ingresar_password@i,w,c
  4435  001AA0  B0D8               	btfsc	status,0,c
  4436  001AA2  D00E               	goto	l3518
  4437  001AA4  D001               	goto	l3512
  4438  001AA6  D00C               	goto	l3518
  4439  001AA8                     l3512:
  4440  001AA8  0E0C               	movlw	low ingresar_password@clear
  4441  001AAA  241E               	addwf	ingresar_password@i,w,c
  4442  001AAC  6ED9               	movwf	fsr2l,c
  4443  001AAE  0E00               	movlw	high ingresar_password@clear
  4444  001AB0  201F               	addwfc	ingresar_password@i+1,w,c
  4445  001AB2  6EDA               	movwf	fsr2h,c
  4446  001AB4  0E20               	movlw	32
  4447  001AB6  6EDF               	movwf	indf2,c
  4448  001AB8  4A1E               	infsnz	ingresar_password@i,f,c
  4449  001ABA  2A1F               	incf	ingresar_password@i+1,f,c
  4450  001ABC  D7EB               	goto	l3508
  4451  001ABE  D000               	goto	l3518
  4452  001AC0                     l3518:
  4453                           
  4454                           ;main.c: 93: if(tamanio_password < 6){
  4455  001AC0  BE53               	btfsc	_tamanio_password+1,7,c
  4456  001AC2  D006               	goto	l3520
  4457  001AC4  5053               	movf	_tamanio_password+1,w,c
  4458  001AC6  E118               	bnz	l3526
  4459  001AC8  0E06               	movlw	6
  4460  001ACA  5C52               	subwf	_tamanio_password,w,c
  4461  001ACC  B0D8               	btfsc	status,0,c
  4462  001ACE  D014               	goto	l3526
  4463  001AD0                     l3520:
  4464                           
  4465                           ;main.c: 95: lcd_comand(0b00001100);
  4466  001AD0  0E0C               	movlw	12
  4467  001AD2  EC5A  F015         	call	_lcd_comand
  4468                           
  4469                           ;main.c: 96: lcd_gotoxy(1,1);
  4470  001AD6  0E01               	movlw	1
  4471  001AD8  6E05               	movwf	lcd_gotoxy@y,c
  4472  001ADA  0E01               	movlw	1
  4473  001ADC  ECE3  F014         	call	_lcd_gotoxy
  4474                           
  4475                           ;main.c: 97: lcd_putrs("Inserte password");
  4476  001AE0  0E84               	movlw	low STR_5
  4477  001AE2  6E09               	movwf	lcd_putrs@ptr,c
  4478  001AE4  0E0F               	movlw	high STR_5
  4479  001AE6  6E0A               	movwf	lcd_putrs@ptr+1,c
  4480  001AE8  EC5E  F013         	call	_lcd_putrs	;wreg free
  4481                           
  4482                           ;main.c: 98: lcd_gotoxy(tamanio_password+1,2);
  4483  001AEC  0E02               	movlw	2
  4484  001AEE  6E05               	movwf	lcd_gotoxy@y,c
  4485  001AF0  2852               	incf	_tamanio_password,w,c
  4486  001AF2  ECE3  F014         	call	_lcd_gotoxy
  4487  001AF6  D000               	goto	l3526
  4488  001AF8                     l3526:
  4489                           
  4490                           ;main.c: 99: }
  4491                           ;main.c: 101: validar_password();
  4492  001AF8  EC57  F011         	call	_validar_password	;wreg free
  4493                           
  4494                           ;main.c: 102: if (tamanio_password >= 6 && !autorizado){
  4495  001AFC  BE53               	btfsc	_tamanio_password+1,7,c
  4496  001AFE  0012               	return	
  4497  001B00  5053               	movf	_tamanio_password+1,w,c
  4498  001B02  E104               	bnz	u2770
  4499  001B04  0E06               	movlw	6
  4500  001B06  5C52               	subwf	_tamanio_password,w,c
  4501  001B08  A0D8               	btfss	status,0,c
  4502  001B0A  0012               	return	
  4503  001B0C                     u2770:
  4504  001B0C  0100               	movlb	0	; () banked
  4505  001B0E  5186               	movf	_autorizado& (0+255),w,b
  4506  001B10  0100               	movlb	0	; () banked
  4507  001B12  1187               	iorwf	(_autorizado+1)& (0+255),w,b
  4508  001B14  A4D8               	btfss	status,2,c
  4509  001B16  0012               	return	
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;main.c: 103: tamanio_password = 0;
  4513  001B18  0E00               	movlw	0
  4514  001B1A  6E53               	movwf	_tamanio_password+1,c
  4515  001B1C  0E00               	movlw	0
  4516  001B1E  6E52               	movwf	_tamanio_password,c
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 104: lcd_gotoxy(1,2);
  4520  001B20  0E02               	movlw	2
  4521  001B22  6E05               	movwf	lcd_gotoxy@y,c
  4522  001B24  0E01               	movlw	1
  4523  001B26  ECE3  F014         	call	_lcd_gotoxy
  4524                           
  4525                           ;main.c: 105: lcd_putrs("ERROR pass");
  4526  001B2A  0EC0               	movlw	low STR_6
  4527  001B2C  6E09               	movwf	lcd_putrs@ptr,c
  4528  001B2E  0E0F               	movlw	high STR_6
  4529  001B30  6E0A               	movwf	lcd_putrs@ptr+1,c
  4530  001B32  EC5E  F013         	call	_lcd_putrs	;wreg free
  4531                           
  4532                           ;main.c: 106: for (int i=0;i<4;i++)_delay((unsigned long)((98)*(8000000/4000.0)));
  4533  001B36  0E00               	movlw	0
  4534  001B38  6E1D               	movwf	ingresar_password@i_537+1,c
  4535  001B3A  0E00               	movlw	0
  4536  001B3C  6E1C               	movwf	ingresar_password@i_537,c
  4537  001B3E                     l3540:
  4538  001B3E  BE1D               	btfsc	ingresar_password@i_537+1,7,c
  4539  001B40  D008               	goto	l3544
  4540  001B42  501D               	movf	ingresar_password@i_537+1,w,c
  4541  001B44  E112               	bnz	l3548
  4542  001B46  0E04               	movlw	4
  4543  001B48  5C1C               	subwf	ingresar_password@i_537,w,c
  4544  001B4A  B0D8               	btfsc	status,0,c
  4545  001B4C  D00E               	goto	l3548
  4546  001B4E  D001               	goto	l3544
  4547  001B50  D00C               	goto	l3548
  4548  001B52                     l3544:
  4549  001B52  0EFF               	movlw	255
  4550  001B54  6E0B               	movwf	??_ingresar_password& (0+255),c
  4551  001B56  0E8A               	movlw	138
  4552  001B58                     u3147:
  4553  001B58  2EE8               	decfsz	wreg,f,c
  4554  001B5A  D7FE               	goto	u3147
  4555  001B5C  2E0B               	decfsz	??_ingresar_password& (0+255),f,c
  4556  001B5E  D7FC               	goto	u3147
  4557  001B60  D000               	nop2	
  4558  001B62  4A1C               	infsnz	ingresar_password@i_537,f,c
  4559  001B64  2A1D               	incf	ingresar_password@i_537+1,f,c
  4560  001B66  D7EB               	goto	l3540
  4561  001B68  D000               	goto	l3548
  4562  001B6A                     l3548:
  4563                           
  4564                           ;main.c: 107: lcd_gotoxy(1,2);
  4565  001B6A  0E02               	movlw	2
  4566  001B6C  6E05               	movwf	lcd_gotoxy@y,c
  4567  001B6E  0E01               	movlw	1
  4568  001B70  ECE3  F014         	call	_lcd_gotoxy
  4569                           
  4570                           ;main.c: 108: lcd_putrs(clear);
  4571  001B74  0E0C               	movlw	low ingresar_password@clear
  4572  001B76  6E09               	movwf	lcd_putrs@ptr,c
  4573  001B78  0E00               	movlw	high ingresar_password@clear
  4574  001B7A  6E0A               	movwf	lcd_putrs@ptr+1,c
  4575  001B7C  EC5E  F013         	call	_lcd_putrs	;wreg free
  4576  001B80  0012               	return	
  4577  001B82  0012               	return		;funcret
  4578  001B84                     __end_of_ingresar_password:
  4579                           	opt stack 0
  4580                           tosu	equ	0xFFF
  4581                           tosh	equ	0xFFE
  4582                           tosl	equ	0xFFD
  4583                           pclath	equ	0xFFA
  4584                           tblptru	equ	0xFF8
  4585                           tblptrh	equ	0xFF7
  4586                           tblptrl	equ	0xFF6
  4587                           tablat	equ	0xFF5
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           postdec1	equ	0xFE5
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _validar_password *****************
  4600 ;; Defined at:
  4601 ;;		line 13 in file "../../../../../../Program Files/Unimic/unmc_01/sources/alarma.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  i               2    2[COMRAM] int 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4619 ;;Total ram usage:        4 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; This function calls:
  4622 ;;		Nothing
  4623 ;; This function is called by:
  4624 ;;		_ingresar_password
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           	psect	text24
  4629  0022AE                     __ptext24:
  4630                           	opt stack 0
  4631  0022AE                     _validar_password:
  4632                           	opt stack 29
  4633                           
  4634                           ;alarma.c: 15: autorizado = 1;
  4635                           
  4636                           ;incstack = 0
  4637  0022AE  0E00               	movlw	0
  4638  0022B0  0100               	movlb	0	; () banked
  4639  0022B2  6F87               	movwf	(_autorizado+1)& (0+255),b
  4640  0022B4  0E01               	movlw	1
  4641  0022B6  6F86               	movwf	_autorizado& (0+255),b
  4642                           
  4643                           ;alarma.c: 16: int i = 0;
  4644  0022B8  0E00               	movlw	0
  4645  0022BA  6E04               	movwf	validar_password@i+1,c
  4646  0022BC  0E00               	movlw	0
  4647  0022BE  6E03               	movwf	validar_password@i,c
  4648                           
  4649                           ;alarma.c: 17: while (i < 6 && autorizado==1){
  4650  0022C0  D019               	goto	l3374
  4651  0022C2                     l3368:
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;alarma.c: 19: if (current_password[i] != password[i])
  4655  0022C2  0EC5               	movlw	low _password
  4656  0022C4  2403               	addwf	validar_password@i,w,c
  4657  0022C6  6ED9               	movwf	fsr2l,c
  4658  0022C8  0E00               	movlw	high _password
  4659  0022CA  2004               	addwfc	validar_password@i+1,w,c
  4660  0022CC  6EDA               	movwf	fsr2h,c
  4661  0022CE  0E78               	movlw	low _current_password
  4662  0022D0  2403               	addwf	validar_password@i,w,c
  4663  0022D2  6EE1               	movwf	fsr1l,c
  4664  0022D4  0E00               	movlw	high _current_password
  4665  0022D6  2004               	addwfc	validar_password@i+1,w,c
  4666  0022D8  6EE2               	movwf	fsr1h,c
  4667  0022DA  50DE               	movf	postinc2,w,c
  4668  0022DC  18E6               	xorwf	postinc1,w,c
  4669  0022DE  B4D8               	btfsc	status,2,c
  4670  0022E0  D006               	goto	l3372
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;alarma.c: 20: autorizado = 0;
  4674  0022E2  0E00               	movlw	0
  4675  0022E4  0100               	movlb	0	; () banked
  4676  0022E6  6F87               	movwf	(_autorizado+1)& (0+255),b
  4677  0022E8  0E00               	movlw	0
  4678  0022EA  6F86               	movwf	_autorizado& (0+255),b
  4679  0022EC  D000               	goto	l3372
  4680  0022EE                     l3372:
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;alarma.c: 22: i++;
  4684  0022EE  4A03               	infsnz	validar_password@i,f,c
  4685  0022F0  2A04               	incf	validar_password@i+1,f,c
  4686  0022F2  D000               	goto	l3374
  4687  0022F4                     l3374:
  4688                           
  4689                           ; BSR set to: 0
  4690  0022F4  BE04               	btfsc	validar_password@i+1,7,c
  4691  0022F6  D006               	goto	l3376
  4692  0022F8  5004               	movf	validar_password@i+1,w,c
  4693  0022FA  E10C               	bnz	l3378
  4694  0022FC  0E06               	movlw	6
  4695  0022FE  5C03               	subwf	validar_password@i,w,c
  4696  002300  B0D8               	btfsc	status,0,c
  4697  002302  D008               	goto	l3378
  4698  002304                     l3376:
  4699                           
  4700                           ; BSR set to: 0
  4701  002304  0100               	movlb	0	; () banked
  4702  002306  0586               	decf	_autorizado& (0+255),w,b
  4703  002308  0100               	movlb	0	; () banked
  4704  00230A  1187               	iorwf	(_autorizado+1)& (0+255),w,b
  4705  00230C  A4D8               	btfss	status,2,c
  4706  00230E  D002               	goto	l3378
  4707  002310  D7D8               	goto	l3368
  4708                           
  4709                           ; BSR set to: 0
  4710  002312  D000               	goto	l3378
  4711  002314                     l3378:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;alarma.c: 23: }
  4715                           ;alarma.c: 25: if (autorizado == 1)
  4716  002314  0100               	movlb	0	; () banked
  4717  002316  0586               	decf	_autorizado& (0+255),w,b
  4718  002318  0100               	movlb	0	; () banked
  4719  00231A  1187               	iorwf	(_autorizado+1)& (0+255),w,b
  4720  00231C  A4D8               	btfss	status,2,c
  4721  00231E  0012               	return	
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;alarma.c: 26: encendida = 1;
  4725  002320  0E00               	movlw	0
  4726  002322  0100               	movlb	0	; () banked
  4727  002324  6F8D               	movwf	(_encendida+1)& (0+255),b
  4728  002326  0E01               	movlw	1
  4729  002328  6F8C               	movwf	_encendida& (0+255),b
  4730  00232A  0012               	return	
  4731                           
  4732                           ; BSR set to: 0
  4733                           
  4734                           ; BSR set to: 0
  4735  00232C  0012               	return		;funcret
  4736  00232E                     __end_of_validar_password:
  4737                           	opt stack 0
  4738                           tosu	equ	0xFFF
  4739                           tosh	equ	0xFFE
  4740                           tosl	equ	0xFFD
  4741                           pclath	equ	0xFFA
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           postinc1	equ	0xFE6
  4749                           postdec1	equ	0xFE5
  4750                           fsr1h	equ	0xFE2
  4751                           fsr1l	equ	0xFE1
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _caratula *****************
  4760 ;; Defined at:
  4761 ;;		line 35 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  titulo          2   35[COMRAM] PTR unsigned char 
  4764 ;;		 -> STR_10(8), 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;		None               void
  4769 ;; Registers used:
  4770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4776 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4779 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4780 ;;Total ram usage:        4 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    5
  4783 ;; This function calls:
  4784 ;;		_lcd_comand
  4785 ;;		_lcd_gotoxy
  4786 ;;		_lcd_putrs
  4787 ;;		_sprintf
  4788 ;; This function is called by:
  4789 ;;		_main
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text25
  4794  001B84                     __ptext25:
  4795                           	opt stack 0
  4796  001B84                     _caratula:
  4797                           	opt stack 25
  4798                           
  4799                           ;main.c: 37: lcd_comand(0b00001100);
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;incstack = 0
  4803  001B84  0E0C               	movlw	12
  4804  001B86  EC5A  F015         	call	_lcd_comand
  4805                           
  4806                           ;main.c: 38: lcd_gotoxy(1,1);
  4807  001B8A  0E01               	movlw	1
  4808  001B8C  6E05               	movwf	lcd_gotoxy@y,c
  4809  001B8E  0E01               	movlw	1
  4810  001B90  ECE3  F014         	call	_lcd_gotoxy
  4811                           
  4812                           ;main.c: 39: lcd_putrs(titulo);
  4813  001B94  C024  F009         	movff	caratula@titulo,lcd_putrs@ptr
  4814  001B98  C025  F00A         	movff	caratula@titulo+1,lcd_putrs@ptr+1
  4815  001B9C  EC5E  F013         	call	_lcd_putrs	;wreg free
  4816                           
  4817                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  4818  001BA0  0E9A               	movlw	low _buffer2
  4819  001BA2  6E0D               	movwf	sprintf@sp,c
  4820  001BA4  0E00               	movlw	high _buffer2
  4821  001BA6  6E0E               	movwf	sprintf@sp+1,c
  4822  001BA8  0E95               	movlw	low STR_1
  4823  001BAA  6E0F               	movwf	sprintf@f,c
  4824  001BAC  0E0F               	movlw	high STR_1
  4825  001BAE  6E10               	movwf	sprintf@f+1,c
  4826  001BB0  C0D1  F011         	movff	_dia,?_sprintf+4
  4827  001BB4  C0D2  F012         	movff	_dia+1,?_sprintf+5
  4828  001BB8  C0D7  F013         	movff	_mes,?_sprintf+6
  4829  001BBC  C0D8  F014         	movff	_mes+1,?_sprintf+7
  4830  001BC0  C0CF  F015         	movff	_anio,?_sprintf+8
  4831  001BC4  C0D0  F016         	movff	_anio+1,?_sprintf+9
  4832  001BC8  ECFC  F007         	call	_sprintf	;wreg free
  4833                           
  4834                           ;main.c: 42: lcd_gotoxy(9,1);
  4835  001BCC  0E01               	movlw	1
  4836  001BCE  6E05               	movwf	lcd_gotoxy@y,c
  4837  001BD0  0E09               	movlw	9
  4838  001BD2  ECE3  F014         	call	_lcd_gotoxy
  4839                           
  4840                           ;main.c: 43: lcd_putrs(buffer2);
  4841  001BD6  0E9A               	movlw	low _buffer2
  4842  001BD8  6E09               	movwf	lcd_putrs@ptr,c
  4843  001BDA  0E00               	movlw	high _buffer2
  4844  001BDC  6E0A               	movwf	lcd_putrs@ptr+1,c
  4845  001BDE  EC5E  F013         	call	_lcd_putrs	;wreg free
  4846                           
  4847                           ;main.c: 45: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  4848  001BE2  0E9A               	movlw	low _buffer2
  4849  001BE4  6E0D               	movwf	sprintf@sp,c
  4850  001BE6  0E00               	movlw	high _buffer2
  4851  001BE8  6E0E               	movwf	sprintf@sp+1,c
  4852  001BEA  0EA4               	movlw	low STR_2
  4853  001BEC  6E0F               	movwf	sprintf@f,c
  4854  001BEE  0E0F               	movlw	high STR_2
  4855  001BF0  6E10               	movwf	sprintf@f+1,c
  4856  001BF2  C0D5  F011         	movff	_hora,?_sprintf+4
  4857  001BF6  C0D6  F012         	movff	_hora+1,?_sprintf+5
  4858  001BFA  C0D9  F013         	movff	_minuto,?_sprintf+6
  4859  001BFE  C0DA  F014         	movff	_minuto+1,?_sprintf+7
  4860  001C02  C096  F015         	movff	_segundo,?_sprintf+8
  4861  001C06  C097  F016         	movff	_segundo+1,?_sprintf+9
  4862  001C0A  ECFC  F007         	call	_sprintf	;wreg free
  4863                           
  4864                           ;main.c: 46: lcd_gotoxy(1,2);
  4865  001C0E  0E02               	movlw	2
  4866  001C10  6E05               	movwf	lcd_gotoxy@y,c
  4867  001C12  0E01               	movlw	1
  4868  001C14  ECE3  F014         	call	_lcd_gotoxy
  4869                           
  4870                           ;main.c: 47: lcd_putrs(buffer2);
  4871  001C18  0E9A               	movlw	low _buffer2
  4872  001C1A  6E09               	movwf	lcd_putrs@ptr,c
  4873  001C1C  0E00               	movlw	high _buffer2
  4874  001C1E  6E0A               	movwf	lcd_putrs@ptr+1,c
  4875  001C20  EC5E  F013         	call	_lcd_putrs	;wreg free
  4876                           
  4877                           ;main.c: 49: lcd_gotoxy(13,2);
  4878  001C24  0E02               	movlw	2
  4879  001C26  6E05               	movwf	lcd_gotoxy@y,c
  4880  001C28  0E0D               	movlw	13
  4881  001C2A  ECE3  F014         	call	_lcd_gotoxy
  4882                           
  4883                           ;main.c: 50: lcd_putrs((encendida)?"ON":"OFF");
  4884  001C2E  0100               	movlb	0	; () banked
  4885  001C30  518C               	movf	_encendida& (0+255),w,b
  4886  001C32  0100               	movlb	0	; () banked
  4887  001C34  118D               	iorwf	(_encendida+1)& (0+255),w,b
  4888  001C36  A4D8               	btfss	status,2,c
  4889  001C38  D004               	goto	l3478
  4890                           
  4891                           ; BSR set to: 0
  4892  001C3A  0EE0               	movlw	low STR_4
  4893  001C3C  6E26               	movwf	_caratula$499,c
  4894  001C3E  0E0F               	movlw	high STR_4
  4895  001C40  D003               	goto	L4
  4896  001C42                     l3478:
  4897                           
  4898                           ; BSR set to: 0
  4899  001C42  0EE8               	movlw	low STR_3
  4900  001C44  6E26               	movwf	_caratula$499,c
  4901  001C46  0E0F               	movlw	high STR_3
  4902  001C48                     L4:
  4903  001C48  6E27               	movwf	_caratula$499+1,c
  4904  001C4A  D000               	goto	l3480
  4905  001C4C                     l3480:
  4906                           
  4907                           ; BSR set to: 0
  4908  001C4C  C026  F009         	movff	_caratula$499,lcd_putrs@ptr
  4909  001C50  C027  F00A         	movff	_caratula$499+1,lcd_putrs@ptr+1
  4910  001C54  EC5E  F013         	call	_lcd_putrs	;wreg free
  4911  001C58  0012               	return		;funcret
  4912  001C5A                     __end_of_caratula:
  4913                           	opt stack 0
  4914                           tosu	equ	0xFFF
  4915                           tosh	equ	0xFFE
  4916                           tosl	equ	0xFFD
  4917                           pclath	equ	0xFFA
  4918                           tblptru	equ	0xFF8
  4919                           tblptrh	equ	0xFF7
  4920                           tblptrl	equ	0xFF6
  4921                           tablat	equ	0xFF5
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _sprintf *****************
  4936 ;; Defined at:
  4937 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4940 ;;		 -> imprimir_tecla@aux(20), guardar_comando@aux(20), buffer2(20), 
  4941 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4942 ;;		 -> STR_31(5), STR_30(5), STR_22(5), STR_21(5), 
  4943 ;;		 -> STR_8(5), STR_2(15), STR_1(15), 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  tmpval          4    0        struct .
  4946 ;;  cp              3    0        PTR const unsigned char 
  4947 ;;  width           2   32[COMRAM] int 
  4948 ;;  val             2   29[COMRAM] unsigned int 
  4949 ;;  ap              2   26[COMRAM] PTR void [1]
  4950 ;;		 -> ?_sprintf(2), 
  4951 ;;  len             2    0        unsigned int 
  4952 ;;  c               1   34[COMRAM] char 
  4953 ;;  prec            1   31[COMRAM] char 
  4954 ;;  flag            1   28[COMRAM] unsigned char 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  2   12[COMRAM] int 
  4957 ;; Registers used:
  4958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4964 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4965 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4966 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4967 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4968 ;;Total ram usage:       23 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    1
  4971 ;; This function calls:
  4972 ;;		___lwdiv
  4973 ;;		___lwmod
  4974 ;;		___wmul
  4975 ;;		_isdigit
  4976 ;; This function is called by:
  4977 ;;		_caratula
  4978 ;;		_mostrar_guardar_password
  4979 ;;		_guardar_comando
  4980 ;;		_imprimir_tecla
  4981 ;;		_guardar_elemento_fecha
  4982 ;;		_guardar_elemento_hora
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text26
  4987  000FF8                     __ptext26:
  4988                           	opt stack 0
  4989  000FF8                     _sprintf:
  4990                           	opt stack 27
  4991                           
  4992                           ;doprnt.c: 494: va_list ap;
  4993                           ;doprnt.c: 499: signed char c;
  4994                           ;doprnt.c: 501: int width;
  4995                           ;doprnt.c: 506: signed char prec;
  4996                           ;doprnt.c: 508: unsigned char flag;
  4997                           ;doprnt.c: 523: union {
  4998                           ;doprnt.c: 524: unsigned long vd;
  4999                           ;doprnt.c: 525: double integ;
  5000                           ;doprnt.c: 526: } tmpval;
  5001                           ;doprnt.c: 528: unsigned int val;
  5002                           ;doprnt.c: 529: unsigned len;
  5003                           ;doprnt.c: 530: const char * cp;
  5004                           ;doprnt.c: 533: *ap = __va_start();
  5005                           
  5006                           ;incstack = 0
  5007  000FF8  0E11               	movlw	low (?_sprintf+4)
  5008  000FFA  6E1B               	movwf	sprintf@ap,c
  5009  000FFC  0E00               	movlw	high (?_sprintf+4)
  5010  000FFE  6E1C               	movwf	sprintf@ap+1,c
  5011                           
  5012                           ;doprnt.c: 536: while(c = *f++) {
  5013  001000  D117               	goto	l2860
  5014  001002                     l2778:
  5015                           
  5016                           ;doprnt.c: 538: if(c != '%')
  5017  001002  0E25               	movlw	37
  5018  001004  1823               	xorwf	sprintf@c,w,c
  5019  001006  B4D8               	btfsc	status,2,c
  5020  001008  D009               	goto	l2784
  5021                           
  5022                           ;doprnt.c: 540: {
  5023                           ;doprnt.c: 541: ((*sp++ = (c)));
  5024  00100A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5025  00100E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5026  001012  C023  FFDF         	movff	sprintf@c,indf2
  5027  001016  4A0D               	infsnz	sprintf@sp,f,c
  5028  001018  2A0E               	incf	sprintf@sp+1,f,c
  5029                           
  5030                           ;doprnt.c: 542: continue;
  5031  00101A  D10A               	goto	l2860
  5032  00101C                     l2784:
  5033                           
  5034                           ;doprnt.c: 543: }
  5035                           ;doprnt.c: 546: width = 0;
  5036  00101C  0E00               	movlw	0
  5037  00101E  6E22               	movwf	sprintf@width+1,c
  5038  001020  0E00               	movlw	0
  5039  001022  6E21               	movwf	sprintf@width,c
  5040                           
  5041                           ;doprnt.c: 548: flag = 0;
  5042  001024  0E00               	movlw	0
  5043  001026  6E1D               	movwf	sprintf@flag,c
  5044                           
  5045                           ;doprnt.c: 551: switch(*f) {
  5046                           
  5047                           ;doprnt.c: 550: for(;;) {
  5048  001028  D005               	goto	l2790
  5049  00102A                     l2786:
  5050                           
  5051                           ;doprnt.c: 580: flag |= 0x04;
  5052  00102A  841D               	bsf	sprintf@flag,2,c
  5053                           
  5054                           ;doprnt.c: 581: f++;
  5055  00102C  4A0F               	infsnz	sprintf@f,f,c
  5056  00102E  2A10               	incf	sprintf@f+1,f,c
  5057                           
  5058                           ;doprnt.c: 582: continue;
  5059  001030  D001               	goto	l2790
  5060                           
  5061                           ;doprnt.c: 584: }
  5062  001032  D00B               	goto	l2792
  5063  001034                     l2790:
  5064  001034  C00F  FFF6         	movff	sprintf@f,tblptrl
  5065  001038  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5066  00103C                     	if	0	;tblptru may be non-zero
  5067  00103C                     	endif
  5068  00103C                     	if	0	;tblptru may be non-zero
  5069  00103C                     	endif
  5070  00103C  0008               	tblrd		*
  5071  00103E  50F5               	movf	tablat,w,c
  5072                           
  5073                           ; Switch size 1, requested type "space"
  5074                           ; Number of cases is 1, Range of values is 48 to 48
  5075                           ; switch strategies available:
  5076                           ; Name         Instructions Cycles
  5077                           ; simple_byte            4     3 (average)
  5078                           ;	Chosen strategy is simple_byte
  5079  001040  0A30               	xorlw	48	; case 48
  5080  001042  B4D8               	btfsc	status,2,c
  5081  001044  D7F2               	goto	l2786
  5082                           
  5083                           ;doprnt.c: 585: break;
  5084  001046  D001               	goto	l2792
  5085                           
  5086                           ;doprnt.c: 586: }
  5087  001048  D7F5               	goto	l2790
  5088  00104A                     l2792:
  5089                           
  5090                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5091  00104A  C00F  FFF6         	movff	sprintf@f,tblptrl
  5092  00104E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5093  001052                     	if	0	;tblptru may be non-zero
  5094  001052                     	endif
  5095  001052                     	if	0	;tblptru may be non-zero
  5096  001052                     	endif
  5097  001052  0008               	tblrd		*
  5098  001054  50F5               	movf	tablat,w,c
  5099  001056  ECF5  F014         	call	_isdigit
  5100  00105A  A0D8               	btfss	status,0,c
  5101  00105C  D03A               	goto	l2808
  5102                           
  5103                           ;doprnt.c: 598: width = 0;
  5104  00105E  0E00               	movlw	0
  5105  001060  6E22               	movwf	sprintf@width+1,c
  5106  001062  0E00               	movlw	0
  5107  001064  6E21               	movwf	sprintf@width,c
  5108  001066  D000               	goto	l2796
  5109  001068                     l2796:
  5110                           
  5111                           ;doprnt.c: 600: width *= 10;
  5112  001068  C021  F001         	movff	sprintf@width,___wmul@multiplier
  5113  00106C  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  5114  001070  0E00               	movlw	0
  5115  001072  6E04               	movwf	___wmul@multiplicand+1,c
  5116  001074  0E0A               	movlw	10
  5117  001076  6E03               	movwf	___wmul@multiplicand,c
  5118  001078  ECBD  F014         	call	___wmul	;wreg free
  5119  00107C  C001  F021         	movff	?___wmul,sprintf@width
  5120  001080  C002  F022         	movff	?___wmul+1,sprintf@width+1
  5121                           
  5122                           ;doprnt.c: 601: width += *f++ - '0';
  5123  001084  0ED0               	movlw	208
  5124  001086  6E17               	movwf	??_sprintf& (0+255),c
  5125  001088  0EFF               	movlw	255
  5126  00108A  6E18               	movwf	(??_sprintf+1)& (0+255),c
  5127  00108C  C00F  FFF6         	movff	sprintf@f,tblptrl
  5128  001090  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5129  001094                     	if	0	;tblptru may be non-zero
  5130  001094                     	endif
  5131  001094                     	if	0	;tblptru may be non-zero
  5132  001094                     	endif
  5133  001094  0008               	tblrd		*
  5134  001096  50F5               	movf	tablat,w,c
  5135  001098  6E19               	movwf	(??_sprintf+2)& (0+255),c
  5136  00109A  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  5137  00109C  5017               	movf	??_sprintf,w,c
  5138  00109E  2619               	addwf	??_sprintf+2,f,c
  5139  0010A0  5018               	movf	??_sprintf+1,w,c
  5140  0010A2  221A               	addwfc	??_sprintf+3,f,c
  5141  0010A4  5019               	movf	??_sprintf+2,w,c
  5142  0010A6  2621               	addwf	sprintf@width,f,c
  5143  0010A8  501A               	movf	??_sprintf+3,w,c
  5144  0010AA  2222               	addwfc	sprintf@width+1,f,c
  5145  0010AC  4A0F               	infsnz	sprintf@f,f,c
  5146  0010AE  2A10               	incf	sprintf@f+1,f,c
  5147                           
  5148                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5149  0010B0  C00F  FFF6         	movff	sprintf@f,tblptrl
  5150  0010B4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5151  0010B8                     	if	0	;tblptru may be non-zero
  5152  0010B8                     	endif
  5153  0010B8                     	if	0	;tblptru may be non-zero
  5154  0010B8                     	endif
  5155  0010B8  0008               	tblrd		*
  5156  0010BA  50F5               	movf	tablat,w,c
  5157  0010BC  ECF5  F014         	call	_isdigit
  5158  0010C0  A0D8               	btfss	status,0,c
  5159  0010C2  D007               	goto	l2808
  5160  0010C4  D7D1               	goto	l2796
  5161                           
  5162                           ;doprnt.c: 608: }
  5163                           ;doprnt.c: 635: switch(c = *f++) {
  5164  0010C6  D005               	goto	l2808
  5165                           
  5166                           ;doprnt.c: 638: goto alldone;
  5167                           
  5168                           ;doprnt.c: 637: case 0:
  5169  0010C8  D0C1               	goto	l2862
  5170                           
  5171                           ;doprnt.c: 813: continue;
  5172                           
  5173                           ;doprnt.c: 802: default:
  5174  0010CA  D0B2               	goto	l2860
  5175  0010CC                     l2804:
  5176                           
  5177                           ;doprnt.c: 818: flag |= 0xC0;
  5178  0010CC  0EC0               	movlw	192
  5179  0010CE  121D               	iorwf	sprintf@flag,f,c
  5180                           
  5181                           ;doprnt.c: 822: }
  5182                           
  5183                           ;doprnt.c: 819: break;
  5184  0010D0  D011               	goto	l2810
  5185  0010D2                     l2808:
  5186  0010D2  C00F  FFF6         	movff	sprintf@f,tblptrl
  5187  0010D6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5188  0010DA  4A0F               	infsnz	sprintf@f,f,c
  5189  0010DC  2A10               	incf	sprintf@f+1,f,c
  5190  0010DE                     	if	0	;tblptru may be non-zero
  5191  0010DE                     	endif
  5192  0010DE                     	if	0	;tblptru may be non-zero
  5193  0010DE                     	endif
  5194  0010DE  0008               	tblrd		*
  5195  0010E0  CFF5 F023          	movff	tablat,sprintf@c
  5196  0010E4  5023               	movf	sprintf@c,w,c
  5197                           
  5198                           ; Switch size 1, requested type "space"
  5199                           ; Number of cases is 2, Range of values is 0 to 117
  5200                           ; switch strategies available:
  5201                           ; Name         Instructions Cycles
  5202                           ; simple_byte            7     4 (average)
  5203                           ;	Chosen strategy is simple_byte
  5204  0010E6  0A00               	xorlw	0	; case 0
  5205  0010E8  B4D8               	btfsc	status,2,c
  5206  0010EA  D0B0               	goto	l2862
  5207  0010EC  0A75               	xorlw	117	; case 117
  5208  0010EE  B4D8               	btfsc	status,2,c
  5209  0010F0  D7ED               	goto	l2804
  5210  0010F2  D09E               	goto	l2860
  5211  0010F4                     l2810:
  5212                           
  5213                           ;doprnt.c: 1273: {
  5214                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5215  0010F4  C01B  FFD9         	movff	sprintf@ap,fsr2l
  5216  0010F8  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  5217  0010FC  CFDE F01E          	movff	postinc2,sprintf@val
  5218  001100  CFDD F01F          	movff	postdec2,sprintf@val+1
  5219  001104  0E02               	movlw	2
  5220  001106  261B               	addwf	sprintf@ap,f,c
  5221  001108  0E00               	movlw	0
  5222  00110A  221C               	addwfc	sprintf@ap+1,f,c
  5223                           
  5224                           ;doprnt.c: 1287: }
  5225                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5226  00110C  0E01               	movlw	1
  5227  00110E  6E23               	movwf	sprintf@c,c
  5228  001110                     l2816:
  5229  001110  0E05               	movlw	5
  5230  001112  1823               	xorwf	sprintf@c,w,c
  5231  001114  B4D8               	btfsc	status,2,c
  5232  001116  D016               	goto	l2828
  5233  001118  D001               	goto	l2820
  5234  00111A  D014               	goto	l2828
  5235  00111C                     l2820:
  5236                           
  5237                           ;doprnt.c: 1306: if(val < dpowers[c])
  5238  00111C  5023               	movf	sprintf@c,w,c
  5239  00111E  0D02               	mullw	2
  5240  001120  0E01               	movlw	low _dpowers
  5241  001122  24F3               	addwf	prodl,w,c
  5242  001124  6EF6               	movwf	tblptrl,c
  5243  001126  0E0F               	movlw	high _dpowers
  5244  001128  20F4               	addwfc	prodh,w,c
  5245  00112A  6EF7               	movwf	tblptrh,c
  5246  00112C                     	if	0	;There are less than 3 active tblptr bytes
  5247  00112C                     	endif
  5248  00112C  0009               	tblrd		*+
  5249  00112E  50F5               	movf	tablat,w,c
  5250  001130  5C1E               	subwf	sprintf@val,w,c
  5251  001132  0009               	tblrd		*+
  5252  001134  50F5               	movf	tablat,w,c
  5253  001136  581F               	subwfb	sprintf@val+1,w,c
  5254  001138  A0D8               	btfss	status,0,c
  5255  00113A  D004               	goto	l2828
  5256  00113C  D001               	goto	l2824
  5257                           
  5258                           ;doprnt.c: 1307: break;
  5259  00113E  D002               	goto	l2828
  5260  001140                     l2824:
  5261  001140  2A23               	incf	sprintf@c,f,c
  5262  001142  D7E6               	goto	l2816
  5263  001144                     l2828:
  5264                           
  5265                           ;doprnt.c: 1381: if(width > c)
  5266  001144  0E80               	movlw	128
  5267  001146  BE23               	btfsc	sprintf@c,7,c
  5268  001148  0E7F               	movlw	127
  5269  00114A  6E17               	movwf	??_sprintf& (0+255),c
  5270  00114C  5021               	movf	sprintf@width,w,c
  5271  00114E  5C23               	subwf	sprintf@c,w,c
  5272  001150  5022               	movf	sprintf@width+1,w,c
  5273  001152  0A80               	xorlw	128
  5274  001154  5817               	subwfb	??_sprintf& (0+255),w,c
  5275  001156  B0D8               	btfsc	status,0,c
  5276  001158  D007               	goto	l2832
  5277                           
  5278                           ;doprnt.c: 1382: width -= c;
  5279  00115A  5023               	movf	sprintf@c,w,c
  5280  00115C  5E21               	subwf	sprintf@width,f,c
  5281  00115E  0E00               	movlw	0
  5282  001160  BE23               	btfsc	sprintf@c,7,c
  5283  001162  0EFF               	movlw	255
  5284  001164  5A22               	subwfb	sprintf@width+1,f,c
  5285  001166  D005               	goto	l2834
  5286  001168                     l2832:
  5287                           
  5288                           ;doprnt.c: 1383: else
  5289                           ;doprnt.c: 1384: width = 0;
  5290  001168  0E00               	movlw	0
  5291  00116A  6E22               	movwf	sprintf@width+1,c
  5292  00116C  0E00               	movlw	0
  5293  00116E  6E21               	movwf	sprintf@width,c
  5294  001170  D000               	goto	l2834
  5295  001172                     l2834:
  5296                           
  5297                           ;doprnt.c: 1387: if(flag & 0x04) {
  5298  001172  A41D               	btfss	sprintf@flag,2,c
  5299  001174  D015               	goto	l2844
  5300                           
  5301                           ;doprnt.c: 1415: if(width)
  5302  001176  5021               	movf	sprintf@width,w,c
  5303  001178  1022               	iorwf	sprintf@width+1,w,c
  5304  00117A  B4D8               	btfsc	status,2,c
  5305  00117C  D026               	goto	l776
  5306  00117E                     l2838:
  5307                           
  5308                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5309  00117E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5310  001182  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5311  001186  0E30               	movlw	48
  5312  001188  6EDF               	movwf	indf2,c
  5313  00118A  4A0D               	infsnz	sprintf@sp,f,c
  5314  00118C  2A0E               	incf	sprintf@sp+1,f,c
  5315                           
  5316                           ;doprnt.c: 1418: while(--width);
  5317  00118E  0621               	decf	sprintf@width,f,c
  5318  001190  A0D8               	btfss	status,0,c
  5319  001192  0622               	decf	sprintf@width+1,f,c
  5320  001194  5021               	movf	sprintf@width,w,c
  5321  001196  1022               	iorwf	sprintf@width+1,w,c
  5322  001198  B4D8               	btfsc	status,2,c
  5323  00119A  D017               	goto	l776
  5324  00119C  D7F0               	goto	l2838
  5325                           
  5326                           ;doprnt.c: 1420: } else
  5327  00119E  D015               	goto	l776
  5328  0011A0                     l2844:
  5329                           
  5330                           ;doprnt.c: 1422: {
  5331                           ;doprnt.c: 1424: if(width
  5332                           ;doprnt.c: 1428: )
  5333  0011A0  5021               	movf	sprintf@width,w,c
  5334  0011A2  1022               	iorwf	sprintf@width+1,w,c
  5335  0011A4  B4D8               	btfsc	status,2,c
  5336  0011A6  D011               	goto	l776
  5337  0011A8                     l2846:
  5338                           
  5339                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5340  0011A8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5341  0011AC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5342  0011B0  0E20               	movlw	32
  5343  0011B2  6EDF               	movwf	indf2,c
  5344  0011B4  4A0D               	infsnz	sprintf@sp,f,c
  5345  0011B6  2A0E               	incf	sprintf@sp+1,f,c
  5346                           
  5347                           ;doprnt.c: 1431: while(--width);
  5348  0011B8  0621               	decf	sprintf@width,f,c
  5349  0011BA  A0D8               	btfss	status,0,c
  5350  0011BC  0622               	decf	sprintf@width+1,f,c
  5351  0011BE  5021               	movf	sprintf@width,w,c
  5352  0011C0  1022               	iorwf	sprintf@width+1,w,c
  5353  0011C2  B4D8               	btfsc	status,2,c
  5354  0011C4  D002               	goto	l776
  5355  0011C6  D7F0               	goto	l2846
  5356  0011C8  D000               	goto	l776
  5357  0011CA                     l776:
  5358                           
  5359                           ;doprnt.c: 1469: }
  5360                           ;doprnt.c: 1472: prec = c;
  5361  0011CA  C023  F020         	movff	sprintf@c,sprintf@prec
  5362                           
  5363                           ;doprnt.c: 1474: while(prec--) {
  5364  0011CE  D02A               	goto	l2858
  5365  0011D0                     l2852:
  5366                           
  5367                           ;doprnt.c: 1478: {
  5368                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5369  0011D0  5020               	movf	sprintf@prec,w,c
  5370  0011D2  0D02               	mullw	2
  5371  0011D4  0E01               	movlw	low _dpowers
  5372  0011D6  24F3               	addwf	prodl,w,c
  5373  0011D8  6EF6               	movwf	tblptrl,c
  5374  0011DA  0E0F               	movlw	high _dpowers
  5375  0011DC  20F4               	addwfc	prodh,w,c
  5376  0011DE  6EF7               	movwf	tblptrh,c
  5377  0011E0                     	if	0	;There are less than 3 active tblptr bytes
  5378  0011E0                     	endif
  5379  0011E0  0009               	tblrd		*+
  5380  0011E2  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5381  0011E6  000A               	tblrd		*-
  5382  0011E8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5383  0011EC  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  5384  0011F0  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  5385  0011F4  EC30  F013         	call	___lwdiv	;wreg free
  5386  0011F8  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5387  0011FC  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5388  001200  0E00               	movlw	0
  5389  001202  6E0B               	movwf	___lwmod@divisor+1,c
  5390  001204  0E0A               	movlw	10
  5391  001206  6E0A               	movwf	___lwmod@divisor,c
  5392  001208  EC88  F013         	call	___lwmod	;wreg free
  5393  00120C  5008               	movf	?___lwmod,w,c
  5394  00120E  0F30               	addlw	48
  5395  001210  6E23               	movwf	sprintf@c,c
  5396                           
  5397                           ;doprnt.c: 1523: }
  5398                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5399  001212  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5400  001216  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5401  00121A  C023  FFDF         	movff	sprintf@c,indf2
  5402  00121E  4A0D               	infsnz	sprintf@sp,f,c
  5403  001220  2A0E               	incf	sprintf@sp+1,f,c
  5404  001222  D000               	goto	l2858
  5405  001224                     l2858:
  5406  001224  0620               	decf	sprintf@prec,f,c
  5407  001226  2820               	incf	sprintf@prec,w,c
  5408  001228  B4D8               	btfsc	status,2,c
  5409  00122A  D002               	goto	l2860
  5410  00122C  D7D1               	goto	l2852
  5411  00122E  D000               	goto	l2860
  5412  001230                     l2860:
  5413  001230  C00F  FFF6         	movff	sprintf@f,tblptrl
  5414  001234  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5415  001238  4A0F               	infsnz	sprintf@f,f,c
  5416  00123A  2A10               	incf	sprintf@f+1,f,c
  5417  00123C                     	if	0	;tblptru may be non-zero
  5418  00123C                     	endif
  5419  00123C                     	if	0	;tblptru may be non-zero
  5420  00123C                     	endif
  5421  00123C  0008               	tblrd		*
  5422  00123E  CFF5 F023          	movff	tablat,sprintf@c
  5423  001242  5023               	movf	sprintf@c,w,c
  5424  001244  B4D8               	btfsc	status,2,c
  5425  001246  D002               	goto	l2862
  5426  001248  D6DC               	goto	l2778
  5427  00124A  D000               	goto	l2862
  5428  00124C                     l2862:
  5429                           
  5430                           ;doprnt.c: 1538: *sp = 0;
  5431  00124C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5432  001250  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5433  001254  0E00               	movlw	0
  5434  001256  6EDF               	movwf	indf2,c
  5435  001258  0012               	return	
  5436                           
  5437                           ;doprnt.c: 1540: return 0;
  5438                           ;	Return value of _sprintf is never used
  5439  00125A  0012               	return		;funcret
  5440  00125C                     __end_of_sprintf:
  5441                           	opt stack 0
  5442                           tosu	equ	0xFFF
  5443                           tosh	equ	0xFFE
  5444                           tosl	equ	0xFFD
  5445                           pclath	equ	0xFFA
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           postinc1	equ	0xFE6
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _isdigit *****************
  5466 ;; Defined at:
  5467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  c               1    wreg     unsigned char 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  c               1    2[COMRAM] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;		None               void
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5484 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5485 ;;Total ram usage:        3 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_sprintf
  5491 ;;		_atoi
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text27
  5496  0029EA                     __ptext27:
  5497                           	opt stack 0
  5498  0029EA                     _isdigit:
  5499                           	opt stack 27
  5500                           
  5501                           ;incstack = 0
  5502                           ;isdigit@c stored from wreg
  5503  0029EA  6E03               	movwf	isdigit@c,c
  5504  0029EC  0E00               	movlw	0
  5505  0029EE  6E02               	movwf	_isdigit$2510,c
  5506  0029F0  0E3A               	movlw	58
  5507  0029F2  6003               	cpfslt	isdigit@c,c
  5508  0029F4  D006               	goto	l2720
  5509  0029F6  0E2F               	movlw	47
  5510  0029F8  6403               	cpfsgt	isdigit@c,c
  5511  0029FA  D003               	goto	l2720
  5512  0029FC  0E01               	movlw	1
  5513  0029FE  6E02               	movwf	_isdigit$2510,c
  5514  002A00  D000               	goto	l2720
  5515  002A02                     l2720:
  5516  002A02  C002  F001         	movff	_isdigit$2510,??_isdigit
  5517  002A06  3001               	rrcf	??_isdigit,w,c
  5518  002A08  0012               	return	
  5519  002A0A  0012               	return		;funcret
  5520  002A0C                     __end_of_isdigit:
  5521                           	opt stack 0
  5522                           tosu	equ	0xFFF
  5523                           tosh	equ	0xFFE
  5524                           tosl	equ	0xFFD
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           postinc0	equ	0xFEE
  5533                           wreg	equ	0xFE8
  5534                           postinc1	equ	0xFE6
  5535                           postdec1	equ	0xFE5
  5536                           fsr1h	equ	0xFE2
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function ___wmul *****************
  5546 ;; Defined at:
  5547 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  multiplier      2    0[COMRAM] unsigned int 
  5550 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  product         2    4[COMRAM] unsigned int 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  2    0[COMRAM] unsigned int 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0, prodl, prodh
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5563 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5565 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5566 ;;Total ram usage:        6 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_sprintf
  5572 ;;		_atoi
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text28
  5577  00297A                     __ptext28:
  5578                           	opt stack 0
  5579  00297A                     ___wmul:
  5580                           	opt stack 27
  5581                           
  5582                           ;incstack = 0
  5583  00297A  5001               	movf	___wmul@multiplier,w,c
  5584  00297C  0203               	mulwf	___wmul@multiplicand,c
  5585  00297E  CFF3 F005          	movff	prodl,___wmul@product
  5586  002982  CFF4 F006          	movff	prodh,___wmul@product+1
  5587  002986  5001               	movf	___wmul@multiplier,w,c
  5588  002988  0204               	mulwf	___wmul@multiplicand+1,c
  5589  00298A  50F3               	movf	prodl,w,c
  5590  00298C  2606               	addwf	___wmul@product+1,f,c
  5591  00298E  5002               	movf	___wmul@multiplier+1,w,c
  5592  002990  0203               	mulwf	___wmul@multiplicand,c
  5593  002992  50F3               	movf	prodl,w,c
  5594  002994  2606               	addwf	___wmul@product+1,f,c
  5595  002996  C005  F001         	movff	___wmul@product,?___wmul
  5596  00299A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5597  00299E  0012               	return	
  5598  0029A0  0012               	return		;funcret
  5599  0029A2                     __end_of___wmul:
  5600                           	opt stack 0
  5601                           tosu	equ	0xFFF
  5602                           tosh	equ	0xFFE
  5603                           tosl	equ	0xFFD
  5604                           pclath	equ	0xFFA
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           postinc0	equ	0xFEE
  5612                           wreg	equ	0xFE8
  5613                           postinc1	equ	0xFE6
  5614                           postdec1	equ	0xFE5
  5615                           fsr1h	equ	0xFE2
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function ___lwmod *****************
  5625 ;; Defined at:
  5626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  dividend        2    7[COMRAM] unsigned int 
  5629 ;;  divisor         2    9[COMRAM] unsigned int 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  counter         1   11[COMRAM] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  2    7[COMRAM] unsigned int 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5644 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5645 ;;Total ram usage:        5 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_sprintf
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text29
  5655  002710                     __ptext29:
  5656                           	opt stack 0
  5657  002710                     ___lwmod:
  5658                           	opt stack 27
  5659                           
  5660                           ;incstack = 0
  5661  002710  500A               	movf	___lwmod@divisor,w,c
  5662  002712  100B               	iorwf	___lwmod@divisor+1,w,c
  5663  002714  B4D8               	btfsc	status,2,c
  5664  002716  D01D               	goto	l1445
  5665  002718  0E01               	movlw	1
  5666  00271A  6E0C               	movwf	___lwmod@counter,c
  5667  00271C  D005               	goto	l2758
  5668  00271E                     l2756:
  5669  00271E  90D8               	bcf	status,0,c
  5670  002720  360A               	rlcf	___lwmod@divisor,f,c
  5671  002722  360B               	rlcf	___lwmod@divisor+1,f,c
  5672  002724  2A0C               	incf	___lwmod@counter,f,c
  5673  002726  D000               	goto	l2758
  5674  002728                     l2758:
  5675  002728  BE0B               	btfsc	___lwmod@divisor+1,7,c
  5676  00272A  D002               	goto	l2760
  5677  00272C  D7F8               	goto	l2756
  5678  00272E  D000               	goto	l2760
  5679  002730                     l2760:
  5680  002730  500A               	movf	___lwmod@divisor,w,c
  5681  002732  5C08               	subwf	___lwmod@dividend,w,c
  5682  002734  500B               	movf	___lwmod@divisor+1,w,c
  5683  002736  5809               	subwfb	___lwmod@dividend+1,w,c
  5684  002738  A0D8               	btfss	status,0,c
  5685  00273A  D005               	goto	l2764
  5686  00273C  500A               	movf	___lwmod@divisor,w,c
  5687  00273E  5E08               	subwf	___lwmod@dividend,f,c
  5688  002740  500B               	movf	___lwmod@divisor+1,w,c
  5689  002742  5A09               	subwfb	___lwmod@dividend+1,f,c
  5690  002744  D000               	goto	l2764
  5691  002746                     l2764:
  5692  002746  90D8               	bcf	status,0,c
  5693  002748  320B               	rrcf	___lwmod@divisor+1,f,c
  5694  00274A  320A               	rrcf	___lwmod@divisor,f,c
  5695  00274C  2E0C               	decfsz	___lwmod@counter,f,c
  5696  00274E  D7F0               	goto	l2760
  5697  002750  D000               	goto	l1445
  5698  002752                     l1445:
  5699  002752  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5700  002756  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5701  00275A  0012               	return		;funcret
  5702  00275C                     __end_of___lwmod:
  5703                           	opt stack 0
  5704                           tosu	equ	0xFFF
  5705                           tosh	equ	0xFFE
  5706                           tosl	equ	0xFFD
  5707                           pclath	equ	0xFFA
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postinc1	equ	0xFE6
  5717                           postdec1	equ	0xFE5
  5718                           fsr1h	equ	0xFE2
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function ___lwdiv *****************
  5728 ;; Defined at:
  5729 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  dividend        2    0[COMRAM] unsigned int 
  5732 ;;  divisor         2    2[COMRAM] unsigned int 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  quotient        2    4[COMRAM] unsigned int 
  5735 ;;  counter         1    6[COMRAM] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  2    0[COMRAM] unsigned int 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5746 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5748 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5749 ;;Total ram usage:        7 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_sprintf
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text30
  5759  002660                     __ptext30:
  5760                           	opt stack 0
  5761  002660                     ___lwdiv:
  5762                           	opt stack 27
  5763                           
  5764                           ;incstack = 0
  5765  002660  0E00               	movlw	0
  5766  002662  6E06               	movwf	___lwdiv@quotient+1,c
  5767  002664  0E00               	movlw	0
  5768  002666  6E05               	movwf	___lwdiv@quotient,c
  5769  002668  5003               	movf	___lwdiv@divisor,w,c
  5770  00266A  1004               	iorwf	___lwdiv@divisor+1,w,c
  5771  00266C  B4D8               	btfsc	status,2,c
  5772  00266E  D021               	goto	l1435
  5773  002670  0E01               	movlw	1
  5774  002672  6E07               	movwf	___lwdiv@counter,c
  5775  002674  D005               	goto	l2738
  5776  002676                     l2736:
  5777  002676  90D8               	bcf	status,0,c
  5778  002678  3603               	rlcf	___lwdiv@divisor,f,c
  5779  00267A  3604               	rlcf	___lwdiv@divisor+1,f,c
  5780  00267C  2A07               	incf	___lwdiv@counter,f,c
  5781  00267E  D000               	goto	l2738
  5782  002680                     l2738:
  5783  002680  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5784  002682  D002               	goto	l2740
  5785  002684  D7F8               	goto	l2736
  5786  002686  D000               	goto	l2740
  5787  002688                     l2740:
  5788  002688  90D8               	bcf	status,0,c
  5789  00268A  3605               	rlcf	___lwdiv@quotient,f,c
  5790  00268C  3606               	rlcf	___lwdiv@quotient+1,f,c
  5791  00268E  5003               	movf	___lwdiv@divisor,w,c
  5792  002690  5C01               	subwf	___lwdiv@dividend,w,c
  5793  002692  5004               	movf	___lwdiv@divisor+1,w,c
  5794  002694  5802               	subwfb	___lwdiv@dividend+1,w,c
  5795  002696  A0D8               	btfss	status,0,c
  5796  002698  D006               	goto	l2748
  5797  00269A  5003               	movf	___lwdiv@divisor,w,c
  5798  00269C  5E01               	subwf	___lwdiv@dividend,f,c
  5799  00269E  5004               	movf	___lwdiv@divisor+1,w,c
  5800  0026A0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5801  0026A2  8005               	bsf	___lwdiv@quotient,0,c
  5802  0026A4  D000               	goto	l2748
  5803  0026A6                     l2748:
  5804  0026A6  90D8               	bcf	status,0,c
  5805  0026A8  3204               	rrcf	___lwdiv@divisor+1,f,c
  5806  0026AA  3203               	rrcf	___lwdiv@divisor,f,c
  5807  0026AC  2E07               	decfsz	___lwdiv@counter,f,c
  5808  0026AE  D7EC               	goto	l2740
  5809  0026B0  D000               	goto	l1435
  5810  0026B2                     l1435:
  5811  0026B2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5812  0026B6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5813  0026BA  0012               	return		;funcret
  5814  0026BC                     __end_of___lwdiv:
  5815                           	opt stack 0
  5816                           tosu	equ	0xFFF
  5817                           tosh	equ	0xFFE
  5818                           tosl	equ	0xFFD
  5819                           pclath	equ	0xFFA
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           postinc0	equ	0xFEE
  5827                           wreg	equ	0xFE8
  5828                           postinc1	equ	0xFE6
  5829                           postdec1	equ	0xFE5
  5830                           fsr1h	equ	0xFE2
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function _lcd_putrs *****************
  5840 ;; Defined at:
  5841 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  5844 ;;		 -> minutes(3), hour(3), year(3), month(3), 
  5845 ;;		 -> day(3), STR_29(2), STR_28(2), STR_27(2), 
  5846 ;;		 -> STR_26(2), STR_25(2), STR_24(2), STR_23(2), 
  5847 ;;		 -> imprimir_tecla@aux(20), STR_20(13), STR_19(19), STR_18(22), 
  5848 ;;		 -> STR_17(21), STR_15(18), STR_14(18), STR_13(19), 
  5849 ;;		 -> STR_12(18), STR_10(8), STR_7(3), STR_6(11), 
  5850 ;;		 -> STR_5(17), ingresar_password@clear(16), STR_4(4), STR_3(3), 
  5851 ;;		 -> buffer2(20), 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;		None               void
  5856 ;; Registers used:
  5857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;Total ram usage:        2 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    4
  5870 ;; This function calls:
  5871 ;;		_lcd_putc
  5872 ;; This function is called by:
  5873 ;;		_caratula
  5874 ;;		_ingresar_password
  5875 ;;		_mostrar_menu
  5876 ;;		_main
  5877 ;;		_imprimir_tecla
  5878 ;;		_guardar_tecla_presionada
  5879 ;;		_leer_teclado
  5880 ;;		_cambiar_dia
  5881 ;;		_cambiar_mes
  5882 ;;		_cambiar_anio
  5883 ;;		_cambiar_hora
  5884 ;;		_cambiar_minutos
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	text31
  5889  0026BC                     __ptext31:
  5890                           	opt stack 0
  5891  0026BC                     _lcd_putrs:
  5892                           	opt stack 25
  5893                           
  5894                           ;unmc_lcd_216.c: 223: while(*ptr){
  5895                           
  5896                           ;incstack = 0
  5897  0026BC  D015               	goto	l2774
  5898  0026BE                     l2770:
  5899                           
  5900                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  5901  0026BE  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5902  0026C2  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5903  0026C6  6AF8               	clrf	tblptru,c
  5904  0026C8  0E0E               	movlw	(high __ramtop+-1)
  5905  0026CA  64F7               	cpfsgt	tblptrh,c
  5906  0026CC  D003               	bra	u1727
  5907  0026CE  0008               	tblrd		*
  5908  0026D0  50F5               	movf	tablat,w,c
  5909  0026D2  D005               	bra	u1720
  5910  0026D4                     u1727:
  5911  0026D4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5912  0026D8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5913  0026DC  50EF               	movf	indf0,w,c
  5914  0026DE                     u1720:
  5915  0026DE  ECAE  F013         	call	_lcd_putc
  5916  0026E2  4A09               	infsnz	lcd_putrs@ptr,f,c
  5917  0026E4  2A0A               	incf	lcd_putrs@ptr+1,f,c
  5918  0026E6  D000               	goto	l2774
  5919  0026E8                     l2774:
  5920  0026E8  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5921  0026EC  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5922  0026F0  6AF8               	clrf	tblptru,c
  5923  0026F2  0E0E               	movlw	(high __ramtop+-1)
  5924  0026F4  64F7               	cpfsgt	tblptrh,c
  5925  0026F6  D003               	bra	u1737
  5926  0026F8  0008               	tblrd		*
  5927  0026FA  50F5               	movf	tablat,w,c
  5928  0026FC  D005               	bra	u1730
  5929  0026FE                     u1737:
  5930  0026FE  CFF6 FFE9          	movff	tblptrl,fsr0l
  5931  002702  CFF7 FFEA          	movff	tblptrh,fsr0h
  5932  002706  50EF               	movf	indf0,w,c
  5933  002708                     u1730:
  5934  002708  0900               	iorlw	0
  5935  00270A  A4D8               	btfss	status,2,c
  5936  00270C  D7D8               	goto	l2770
  5937  00270E  0012               	return		;funcret
  5938  002710                     __end_of_lcd_putrs:
  5939                           	opt stack 0
  5940                           tosu	equ	0xFFF
  5941                           tosh	equ	0xFFE
  5942                           tosl	equ	0xFFD
  5943                           pclath	equ	0xFFA
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           indf0	equ	0xFEF
  5951                           postinc0	equ	0xFEE
  5952                           fsr0h	equ	0xFEA
  5953                           fsr0l	equ	0xFE9
  5954                           wreg	equ	0xFE8
  5955                           postinc1	equ	0xFE6
  5956                           postdec1	equ	0xFE5
  5957                           fsr1h	equ	0xFE2
  5958                           fsr1l	equ	0xFE1
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _lcd_putc *****************
  5967 ;; Defined at:
  5968 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  c               1    wreg     unsigned char 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  c               1    7[COMRAM] unsigned char 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;		None               void
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5986 ;;Total ram usage:        1 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    3
  5989 ;; This function calls:
  5990 ;;		_lcd_gotoxy
  5991 ;;		_lcd_send_byte
  5992 ;; This function is called by:
  5993 ;;		_lcd_putrs
  5994 ;;		_lcd_puts
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text32
  5999  00275C                     __ptext32:
  6000                           	opt stack 0
  6001  00275C                     _lcd_putc:
  6002                           	opt stack 25
  6003                           
  6004                           ;incstack = 0
  6005                           ;lcd_putc@c stored from wreg
  6006  00275C  6E08               	movwf	lcd_putc@c,c
  6007                           
  6008                           ;unmc_lcd_216.c: 173: switch(c){
  6009  00275E  D018               	goto	l2702
  6010  002760                     l2692:
  6011                           
  6012                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  6013  002760  0E01               	movlw	1
  6014  002762  6E03               	movwf	lcd_send_byte@n,c
  6015  002764  0E00               	movlw	0
  6016  002766  EC60  F014         	call	_lcd_send_byte
  6017                           
  6018                           ;unmc_lcd_216.c: 176: break;
  6019  00276A  0012               	return	
  6020  00276C                     l2694:
  6021                           
  6022                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  6023  00276C  0E02               	movlw	2
  6024  00276E  6E05               	movwf	lcd_gotoxy@y,c
  6025  002770  0E01               	movlw	1
  6026  002772  ECE3  F014         	call	_lcd_gotoxy
  6027                           
  6028                           ;unmc_lcd_216.c: 179: break;
  6029  002776  0012               	return	
  6030  002778                     l2696:
  6031                           
  6032                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  6033  002778  0E10               	movlw	16
  6034  00277A  6E03               	movwf	lcd_send_byte@n,c
  6035  00277C  0E00               	movlw	0
  6036  00277E  EC60  F014         	call	_lcd_send_byte
  6037                           
  6038                           ;unmc_lcd_216.c: 182: break;
  6039  002782  0012               	return	
  6040  002784                     l2698:
  6041                           
  6042                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  6043  002784  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  6044  002788  0E01               	movlw	1
  6045  00278A  EC60  F014         	call	_lcd_send_byte
  6046                           
  6047                           ;unmc_lcd_216.c: 186: }
  6048                           
  6049                           ;unmc_lcd_216.c: 185: break;
  6050  00278E  0012               	return	
  6051  002790                     l2702:
  6052  002790  5008               	movf	lcd_putc@c,w,c
  6053                           
  6054                           ; Switch size 1, requested type "space"
  6055                           ; Number of cases is 3, Range of values is 8 to 12
  6056                           ; switch strategies available:
  6057                           ; Name         Instructions Cycles
  6058                           ; simple_byte           10     6 (average)
  6059                           ;	Chosen strategy is simple_byte
  6060  002792  0A08               	xorlw	8	; case 8
  6061  002794  B4D8               	btfsc	status,2,c
  6062  002796  D7F0               	goto	l2696
  6063  002798  0A02               	xorlw	2	; case 10
  6064  00279A  B4D8               	btfsc	status,2,c
  6065  00279C  D7E7               	goto	l2694
  6066  00279E  0A06               	xorlw	6	; case 12
  6067  0027A0  B4D8               	btfsc	status,2,c
  6068  0027A2  D7DE               	goto	l2692
  6069  0027A4  D7EF               	goto	l2698
  6070  0027A6  0012               	return		;funcret
  6071  0027A8                     __end_of_lcd_putc:
  6072                           	opt stack 0
  6073                           tosu	equ	0xFFF
  6074                           tosh	equ	0xFFE
  6075                           tosl	equ	0xFFD
  6076                           pclath	equ	0xFFA
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           indf0	equ	0xFEF
  6084                           postinc0	equ	0xFEE
  6085                           fsr0h	equ	0xFEA
  6086                           fsr0l	equ	0xFE9
  6087                           wreg	equ	0xFE8
  6088                           postinc1	equ	0xFE6
  6089                           postdec1	equ	0xFE5
  6090                           fsr1h	equ	0xFE2
  6091                           fsr1l	equ	0xFE1
  6092                           indf2	equ	0xFDF
  6093                           postinc2	equ	0xFDE
  6094                           postdec2	equ	0xFDD
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function _lcd_gotoxy *****************
  6100 ;; Defined at:
  6101 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  x               1    wreg     unsigned char 
  6104 ;;  y               1    4[COMRAM] unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  x               1    5[COMRAM] unsigned char 
  6107 ;;  address         1    6[COMRAM] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;		None               void
  6110 ;; Registers used:
  6111 ;;		wreg, status,2, status,0, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6117 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6120 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6121 ;;Total ram usage:        3 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    2
  6124 ;; This function calls:
  6125 ;;		_lcd_send_byte
  6126 ;; This function is called by:
  6127 ;;		_caratula
  6128 ;;		_ingresar_password
  6129 ;;		_mostrar_menu
  6130 ;;		_main
  6131 ;;		_lcd_putc
  6132 ;;		_cambiar_dia
  6133 ;;		_cambiar_mes
  6134 ;;		_cambiar_anio
  6135 ;;		_cambiar_hora
  6136 ;;		_cambiar_minutos
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	text33
  6141  0029C6                     __ptext33:
  6142                           	opt stack 0
  6143  0029C6                     _lcd_gotoxy:
  6144                           	opt stack 25
  6145                           
  6146                           ;incstack = 0
  6147                           ;lcd_gotoxy@x stored from wreg
  6148  0029C6  6E06               	movwf	lcd_gotoxy@x,c
  6149                           
  6150                           ;unmc_lcd_216.c: 159: int8 address;
  6151                           ;unmc_lcd_216.c: 161: if(y != 1)
  6152  0029C8  0405               	decf	lcd_gotoxy@y,w,c
  6153  0029CA  B4D8               	btfsc	status,2,c
  6154  0029CC  D002               	goto	l2684
  6155                           
  6156                           ;unmc_lcd_216.c: 162: address = 0x40;
  6157  0029CE  0E40               	movlw	64
  6158  0029D0  D001               	goto	L5
  6159  0029D2                     l2684:
  6160                           
  6161                           ;unmc_lcd_216.c: 163: else
  6162                           ;unmc_lcd_216.c: 164: address=0;
  6163  0029D2  0E00               	movlw	0
  6164  0029D4                     L5:
  6165  0029D4  6E07               	movwf	lcd_gotoxy@address,c
  6166  0029D6  D000               	goto	l2686
  6167  0029D8                     l2686:
  6168                           
  6169                           ;unmc_lcd_216.c: 166: address += x-1;
  6170  0029D8  0406               	decf	lcd_gotoxy@x,w,c
  6171  0029DA  2607               	addwf	lcd_gotoxy@address,f,c
  6172                           
  6173                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  6174  0029DC  5007               	movf	lcd_gotoxy@address,w,c
  6175  0029DE  0980               	iorlw	128
  6176  0029E0  6E03               	movwf	lcd_send_byte@n,c
  6177  0029E2  0E00               	movlw	0
  6178  0029E4  EC60  F014         	call	_lcd_send_byte
  6179  0029E8  0012               	return		;funcret
  6180  0029EA                     __end_of_lcd_gotoxy:
  6181                           	opt stack 0
  6182                           tosu	equ	0xFFF
  6183                           tosh	equ	0xFFE
  6184                           tosl	equ	0xFFD
  6185                           pclath	equ	0xFFA
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodh	equ	0xFF4
  6191                           prodl	equ	0xFF3
  6192                           indf0	equ	0xFEF
  6193                           postinc0	equ	0xFEE
  6194                           fsr0h	equ	0xFEA
  6195                           fsr0l	equ	0xFE9
  6196                           wreg	equ	0xFE8
  6197                           postinc1	equ	0xFE6
  6198                           postdec1	equ	0xFE5
  6199                           fsr1h	equ	0xFE2
  6200                           fsr1l	equ	0xFE1
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           fsr2h	equ	0xFDA
  6205                           fsr2l	equ	0xFD9
  6206                           status	equ	0xFD8
  6207                           
  6208 ;; *************** function _Setup *****************
  6209 ;; Defined at:
  6210 ;;		line 59 in file "main.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;		None
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;		None
  6215 ;; Return value:  Size  Location     Type
  6216 ;;		None               void
  6217 ;; Registers used:
  6218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6228 ;;Total ram usage:        0 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    3
  6231 ;; This function calls:
  6232 ;;		_Write_RTC
  6233 ;;		_lcd_comand
  6234 ;;		_lcd_init
  6235 ;; This function is called by:
  6236 ;;		_main
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text34
  6241  0027A8                     __ptext34:
  6242                           	opt stack 0
  6243  0027A8                     _Setup:
  6244                           	opt stack 27
  6245                           
  6246                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  6247                           
  6248                           ;incstack = 0
  6249  0027A8  8E9B               	bsf	3995,7,c	;volatile
  6250                           
  6251                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  6252  0027AA  9C9B               	bcf	3995,6,c	;volatile
  6253                           
  6254                           ;main.c: 63: OSCCONbits.IRCF0=1;
  6255  0027AC  88D3               	bsf	4051,4,c	;volatile
  6256                           
  6257                           ;main.c: 64: OSCCONbits.IRCF1=1;
  6258  0027AE  8AD3               	bsf	4051,5,c	;volatile
  6259                           
  6260                           ;main.c: 65: OSCCONbits.IRCF2=1;
  6261  0027B0  8CD3               	bsf	4051,6,c	;volatile
  6262                           
  6263                           ;main.c: 66: OSCCONbits.SCS0=0;
  6264  0027B2  90D3               	bcf	4051,0,c	;volatile
  6265                           
  6266                           ;main.c: 67: OSCCONbits.SCS1=0;
  6267  0027B4  92D3               	bcf	4051,1,c	;volatile
  6268                           
  6269                           ;main.c: 68: TRISA = 0b11110000;
  6270  0027B6  0EF0               	movlw	240
  6271  0027B8  6E92               	movwf	3986,c	;volatile
  6272                           
  6273                           ;main.c: 69: TRISB = 0;
  6274  0027BA  0E00               	movlw	0
  6275  0027BC  6E93               	movwf	3987,c	;volatile
  6276                           
  6277                           ;main.c: 70: TRISC = 0b00000111;
  6278  0027BE  0E07               	movlw	7
  6279  0027C0  6E94               	movwf	3988,c	;volatile
  6280                           
  6281                           ;main.c: 74: ANCON0=0b11111111;
  6282  0027C2  010F               	movlb	15	; () banked
  6283  0027C4  6948               	setf	72,b	;volatile
  6284                           
  6285                           ; BSR set to: 15
  6286                           ;main.c: 76: ANCON1=0b11111111;
  6287  0027C6  010F               	movlb	15	; () banked
  6288  0027C8  6949               	setf	73,b	;volatile
  6289                           
  6290                           ;main.c: 77: ADCON0=0b00101101;
  6291  0027CA  0E2D               	movlw	45
  6292  0027CC  6EC2               	movwf	4034,c	;volatile
  6293                           
  6294                           ;main.c: 78: ADCON1=0b00010000;
  6295  0027CE  0E10               	movlw	16
  6296  0027D0  6EC1               	movwf	4033,c	;volatile
  6297                           
  6298                           ; BSR set to: 15
  6299                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  6300  0027D2  010F               	movlb	15	; () banked
  6301  0027D4  8F3F               	bsf	63,7,b	;volatile
  6302                           
  6303                           ; BSR set to: 15
  6304                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  6305  0027D6  010F               	movlb	15	; () banked
  6306  0027D8  8B3F               	bsf	63,5,b	;volatile
  6307                           
  6308                           ; BSR set to: 15
  6309                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  6310  0027DA  86CD               	bsf	4045,3,c	;volatile
  6311                           
  6312                           ; BSR set to: 15
  6313                           ;main.c: 82: Write_RTC();
  6314  0027DC  EC26  F00A         	call	_Write_RTC	;wreg free
  6315                           
  6316                           ;main.c: 83: lcd_init();
  6317  0027E0  EC97  F011         	call	_lcd_init	;wreg free
  6318                           
  6319                           ;main.c: 84: lcd_comand(0b00001100);
  6320  0027E4  0E0C               	movlw	12
  6321  0027E6  EC5A  F015         	call	_lcd_comand
  6322                           
  6323                           ;main.c: 85: LATBbits.LATB1 = 0;;
  6324  0027EA  928A               	bcf	3978,1,c	;volatile
  6325                           
  6326                           ;main.c: 86: LATBbits.LATB0 = 0;;
  6327  0027EC  908A               	bcf	3978,0,c	;volatile
  6328  0027EE  0012               	return		;funcret
  6329  0027F0                     __end_of_Setup:
  6330                           	opt stack 0
  6331                           tosu	equ	0xFFF
  6332                           tosh	equ	0xFFE
  6333                           tosl	equ	0xFFD
  6334                           pclath	equ	0xFFA
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           indf0	equ	0xFEF
  6342                           postinc0	equ	0xFEE
  6343                           fsr0h	equ	0xFEA
  6344                           fsr0l	equ	0xFE9
  6345                           wreg	equ	0xFE8
  6346                           postinc1	equ	0xFE6
  6347                           postdec1	equ	0xFE5
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           indf2	equ	0xFDF
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           fsr2h	equ	0xFDA
  6354                           fsr2l	equ	0xFD9
  6355                           status	equ	0xFD8
  6356                           
  6357 ;; *************** function _lcd_init *****************
  6358 ;; Defined at:
  6359 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;		None
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  i               1    4[COMRAM] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;		None               void
  6366 ;; Registers used:
  6367 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6376 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6377 ;;Total ram usage:        1 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    2
  6380 ;; This function calls:
  6381 ;;		_Delay1KTCYx
  6382 ;;		_lcd_send_byte
  6383 ;;		_lcd_send_nibble
  6384 ;; This function is called by:
  6385 ;;		_Setup
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text35
  6390  00232E                     __ptext35:
  6391                           	opt stack 0
  6392  00232E                     _lcd_init:
  6393                           	opt stack 27
  6394                           
  6395                           ;unmc_lcd_216.c: 120: int8 i;
  6396                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  6397                           
  6398                           ;incstack = 0
  6399  00232E  9693               	bcf	3987,3,c	;volatile
  6400                           
  6401                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  6402  002330  9493               	bcf	3987,2,c	;volatile
  6403                           
  6404                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  6405  002332  968A               	bcf	3978,3,c	;volatile
  6406                           
  6407                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  6408  002334  948A               	bcf	3978,2,c	;volatile
  6409                           
  6410                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  6411  002336  9893               	bcf	3987,4,c	;volatile
  6412                           
  6413                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  6414  002338  9A93               	bcf	3987,5,c	;volatile
  6415                           
  6416                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  6417  00233A  9C93               	bcf	3987,6,c	;volatile
  6418                           
  6419                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  6420  00233C  9E93               	bcf	3987,7,c	;volatile
  6421                           
  6422                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  6423  00233E  0E0A               	movlw	10
  6424  002340  EC3F  F015         	call	_Delay1KTCYx
  6425                           
  6426                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  6427  002344  0E0A               	movlw	10
  6428  002346  EC3F  F015         	call	_Delay1KTCYx
  6429                           
  6430                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  6431  00234A  0E0A               	movlw	10
  6432  00234C  EC3F  F015         	call	_Delay1KTCYx
  6433                           
  6434                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  6435  002350  0E00               	movlw	0
  6436  002352  6E05               	movwf	lcd_init@i,c
  6437  002354                     l3340:
  6438  002354  0E02               	movlw	2
  6439  002356  6405               	cpfsgt	lcd_init@i,c
  6440  002358  D001               	goto	l3344
  6441  00235A  D008               	goto	l3350
  6442  00235C                     l3344:
  6443                           
  6444                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  6445  00235C  0E03               	movlw	3
  6446  00235E  EC12  F012         	call	_lcd_send_nibble
  6447                           
  6448                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  6449  002362  0E0A               	movlw	10
  6450  002364  EC3F  F015         	call	_Delay1KTCYx
  6451  002368  2A05               	incf	lcd_init@i,f,c
  6452  00236A  D7F4               	goto	l3340
  6453  00236C                     l3350:
  6454                           
  6455                           ;unmc_lcd_216.c: 146: }
  6456                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  6457  00236C  0E02               	movlw	2
  6458  00236E  EC12  F012         	call	_lcd_send_nibble
  6459                           
  6460                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  6461  002372  0E00               	movlw	0
  6462  002374  6E05               	movwf	lcd_init@i,c
  6463  002376  0E03               	movlw	3
  6464  002378  6405               	cpfsgt	lcd_init@i,c
  6465  00237A  D002               	goto	l3358
  6466  00237C  0012               	return	
  6467  00237E  0012               	return	
  6468  002380                     l3358:
  6469                           
  6470                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  6471  002380  5005               	movf	lcd_init@i,w,c
  6472  002382  0D01               	mullw	1
  6473  002384  0E0B               	movlw	low _LCD_INIT_STRING
  6474  002386  24F3               	addwf	prodl,w,c
  6475  002388  6EF6               	movwf	tblptrl,c
  6476  00238A  0E0F               	movlw	high _LCD_INIT_STRING
  6477  00238C  20F4               	addwfc	prodh,w,c
  6478  00238E  6EF7               	movwf	tblptrh,c
  6479  002390                     	if	0	;There are less than 3 active tblptr bytes
  6480  002390                     	endif
  6481  002390  0008               	tblrd		*
  6482  002392  CFF5 F003          	movff	tablat,lcd_send_byte@n
  6483  002396  0E00               	movlw	0
  6484  002398  EC60  F014         	call	_lcd_send_byte
  6485                           
  6486                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  6487  00239C  0E0A               	movlw	10
  6488  00239E  EC3F  F015         	call	_Delay1KTCYx
  6489  0023A2  2A05               	incf	lcd_init@i,f,c
  6490  0023A4  0E03               	movlw	3
  6491  0023A6  6405               	cpfsgt	lcd_init@i,c
  6492  0023A8  D7EB               	goto	l3358
  6493  0023AA  0012               	return	
  6494  0023AC  0012               	return		;funcret
  6495  0023AE                     __end_of_lcd_init:
  6496                           	opt stack 0
  6497                           tosu	equ	0xFFF
  6498                           tosh	equ	0xFFE
  6499                           tosl	equ	0xFFD
  6500                           pclath	equ	0xFFA
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           indf0	equ	0xFEF
  6508                           postinc0	equ	0xFEE
  6509                           fsr0h	equ	0xFEA
  6510                           fsr0l	equ	0xFE9
  6511                           wreg	equ	0xFE8
  6512                           postinc1	equ	0xFE6
  6513                           postdec1	equ	0xFE5
  6514                           fsr1h	equ	0xFE2
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _Delay1KTCYx *****************
  6524 ;; Defined at:
  6525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  unit            1    wreg     unsigned char 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  unit            1    0[COMRAM] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;		None               void
  6532 ;; Registers used:
  6533 ;;		wreg
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;Total ram usage:        1 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; This function calls:
  6546 ;;		Nothing
  6547 ;; This function is called by:
  6548 ;;		_lcd_init
  6549 ;;		_DelayPORXLCD
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text36
  6554  002A7E                     __ptext36:
  6555                           	opt stack 0
  6556  002A7E                     _Delay1KTCYx:
  6557                           	opt stack 28
  6558                           
  6559                           ;incstack = 0
  6560                           ;Delay1KTCYx@unit stored from wreg
  6561  002A7E  6E01               	movwf	Delay1KTCYx@unit,c
  6562  002A80  0EFA               	movlw	250
  6563  002A82                     u3157:
  6564  002A82  F000               	nop	
  6565  002A84  2EE8               	decfsz	wreg,f,c
  6566  002A86  D7FD               	goto	u3157
  6567  002A88  2E01               	decfsz	Delay1KTCYx@unit,f,c
  6568  002A8A  D7FA               	goto	l3180
  6569  002A8C  0012               	return	
  6570  002A8E  0012               	return		;funcret
  6571  002A90                     __end_of_Delay1KTCYx:
  6572                           	opt stack 0
  6573                           tosu	equ	0xFFF
  6574                           tosh	equ	0xFFE
  6575                           tosl	equ	0xFFD
  6576                           pclath	equ	0xFFA
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           prodh	equ	0xFF4
  6582                           prodl	equ	0xFF3
  6583                           indf0	equ	0xFEF
  6584                           postinc0	equ	0xFEE
  6585                           fsr0h	equ	0xFEA
  6586                           fsr0l	equ	0xFE9
  6587                           wreg	equ	0xFE8
  6588                           postinc1	equ	0xFE6
  6589                           postdec1	equ	0xFE5
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _lcd_comand *****************
  6600 ;; Defined at:
  6601 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  d               1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  d               1    4[COMRAM] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6619 ;;Total ram usage:        1 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    2
  6622 ;; This function calls:
  6623 ;;		_lcd_send_byte
  6624 ;; This function is called by:
  6625 ;;		_caratula
  6626 ;;		_Setup
  6627 ;;		_ingresar_password
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text37
  6632  002AB4                     __ptext37:
  6633                           	opt stack 0
  6634  002AB4                     _lcd_comand:
  6635                           	opt stack 27
  6636                           
  6637                           ;incstack = 0
  6638                           ;lcd_comand@d stored from wreg
  6639  002AB4  6E05               	movwf	lcd_comand@d,c
  6640                           
  6641                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  6642  002AB6  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  6643  002ABA  0E00               	movlw	0
  6644  002ABC  EC60  F014         	call	_lcd_send_byte
  6645  002AC0  0012               	return		;funcret
  6646  002AC2                     __end_of_lcd_comand:
  6647                           	opt stack 0
  6648                           tosu	equ	0xFFF
  6649                           tosh	equ	0xFFE
  6650                           tosl	equ	0xFFD
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           indf0	equ	0xFEF
  6659                           postinc0	equ	0xFEE
  6660                           fsr0h	equ	0xFEA
  6661                           fsr0l	equ	0xFE9
  6662                           wreg	equ	0xFE8
  6663                           postinc1	equ	0xFE6
  6664                           postdec1	equ	0xFE5
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _lcd_send_byte *****************
  6675 ;; Defined at:
  6676 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  address         1    wreg     unsigned char 
  6679 ;;  n               1    2[COMRAM] unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  address         1    3[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6691 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6695 ;;Total ram usage:        2 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    1
  6698 ;; This function calls:
  6699 ;;		_Delay100TCYx
  6700 ;;		_lcd_send_nibble
  6701 ;; This function is called by:
  6702 ;;		_lcd_init
  6703 ;;		_lcd_gotoxy
  6704 ;;		_lcd_putc
  6705 ;;		_lcd_comand
  6706 ;;		_lcd_setcursor_vb
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text38
  6711  0028C0                     __ptext38:
  6712                           	opt stack 0
  6713  0028C0                     _lcd_send_byte:
  6714                           	opt stack 26
  6715                           
  6716                           ;incstack = 0
  6717                           ;lcd_send_byte@address stored from wreg
  6718  0028C0  6E04               	movwf	lcd_send_byte@address,c
  6719                           
  6720                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  6721  0028C2  968A               	bcf	3978,3,c	;volatile
  6722                           
  6723                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  6724  0028C4  0E02               	movlw	2
  6725  0028C6  EC48  F015         	call	_Delay100TCYx
  6726                           
  6727                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  6728  0028CA  9893               	bcf	3987,4,c	;volatile
  6729                           
  6730                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  6731  0028CC  9A93               	bcf	3987,5,c	;volatile
  6732                           
  6733                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  6734  0028CE  9C93               	bcf	3987,6,c	;volatile
  6735                           
  6736                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  6737  0028D0  9E93               	bcf	3987,7,c	;volatile
  6738                           
  6739                           ;unmc_lcd_216.c: 101: if(address)
  6740  0028D2  5004               	movf	lcd_send_byte@address,w,c
  6741  0028D4  B4D8               	btfsc	status,2,c
  6742  0028D6  D002               	goto	l240
  6743                           
  6744                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  6745  0028D8  868A               	bsf	3978,3,c	;volatile
  6746  0028DA  D001               	goto	l241
  6747  0028DC                     l240:
  6748                           
  6749                           ;unmc_lcd_216.c: 103: else
  6750                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  6751  0028DC  968A               	bcf	3978,3,c	;volatile
  6752  0028DE                     l241:
  6753                           
  6754                           ;unmc_lcd_216.c: 106: __nop();
  6755  0028DE  F000               	nop	
  6756                           
  6757                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  6758  0028E0  3803               	swapf	lcd_send_byte@n,w,c
  6759  0028E2  0B0F               	andlw	15
  6760  0028E4  EC12  F012         	call	_lcd_send_nibble
  6761                           
  6762                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  6763  0028E8  5003               	movf	lcd_send_byte@n,w,c
  6764  0028EA  0B0F               	andlw	15
  6765  0028EC  EC12  F012         	call	_lcd_send_nibble
  6766  0028F0  0012               	return		;funcret
  6767  0028F2                     __end_of_lcd_send_byte:
  6768                           	opt stack 0
  6769                           tosu	equ	0xFFF
  6770                           tosh	equ	0xFFE
  6771                           tosl	equ	0xFFD
  6772                           pclath	equ	0xFFA
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           indf0	equ	0xFEF
  6780                           postinc0	equ	0xFEE
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           postinc1	equ	0xFE6
  6785                           postdec1	equ	0xFE5
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _lcd_send_nibble *****************
  6796 ;; Defined at:
  6797 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  nibble          1    wreg     unsigned char 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  nibble          1    1[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6815 ;;Total ram usage:        2 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; This function calls:
  6818 ;;		Nothing
  6819 ;; This function is called by:
  6820 ;;		_lcd_send_byte
  6821 ;;		_lcd_init
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           	psect	text39
  6826  002424                     __ptext39:
  6827                           	opt stack 0
  6828  002424                     _lcd_send_nibble:
  6829                           	opt stack 26
  6830                           
  6831                           ;incstack = 0
  6832                           ;lcd_send_nibble@nibble stored from wreg
  6833  002424  6E02               	movwf	lcd_send_nibble@nibble,c
  6834                           
  6835                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  6836  002426  A002               	btfss	lcd_send_nibble@nibble,0,c
  6837  002428  D003               	goto	u1540
  6838  00242A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6839  00242C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6840  00242E  D001               	goto	u1558
  6841  002430                     u1540:
  6842  002430  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6843  002432                     u1558:
  6844  002432  3A01               	swapf	??_lcd_send_nibble,f,c
  6845  002434  508A               	movf	3978,w,c	;volatile
  6846  002436  1801               	xorwf	??_lcd_send_nibble,w,c
  6847  002438  0BEF               	andlw	-17
  6848  00243A  1801               	xorwf	??_lcd_send_nibble,w,c
  6849  00243C  6E8A               	movwf	3978,c	;volatile
  6850                           
  6851                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  6852  00243E  A202               	btfss	lcd_send_nibble@nibble,1,c
  6853  002440  D003               	goto	u1560
  6854  002442  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6855  002444  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6856  002446  D001               	goto	u1578
  6857  002448                     u1560:
  6858  002448  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6859  00244A                     u1578:
  6860  00244A  3A01               	swapf	??_lcd_send_nibble,f,c
  6861  00244C  4601               	rlncf	??_lcd_send_nibble,f,c
  6862  00244E  508A               	movf	3978,w,c	;volatile
  6863  002450  1801               	xorwf	??_lcd_send_nibble,w,c
  6864  002452  0BDF               	andlw	-33
  6865  002454  1801               	xorwf	??_lcd_send_nibble,w,c
  6866  002456  6E8A               	movwf	3978,c	;volatile
  6867                           
  6868                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  6869  002458  A402               	btfss	lcd_send_nibble@nibble,2,c
  6870  00245A  D003               	goto	u1580
  6871  00245C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6872  00245E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6873  002460  D001               	goto	u1598
  6874  002462                     u1580:
  6875  002462  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6876  002464                     u1598:
  6877  002464  3A01               	swapf	??_lcd_send_nibble,f,c
  6878  002466  4601               	rlncf	??_lcd_send_nibble,f,c
  6879  002468  4601               	rlncf	??_lcd_send_nibble,f,c
  6880  00246A  508A               	movf	3978,w,c	;volatile
  6881  00246C  1801               	xorwf	??_lcd_send_nibble,w,c
  6882  00246E  0BBF               	andlw	-65
  6883  002470  1801               	xorwf	??_lcd_send_nibble,w,c
  6884  002472  6E8A               	movwf	3978,c	;volatile
  6885                           
  6886                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  6887  002474  A602               	btfss	lcd_send_nibble@nibble,3,c
  6888  002476  D003               	goto	u1600
  6889  002478  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6890  00247A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  6891  00247C  D001               	goto	u1618
  6892  00247E                     u1600:
  6893  00247E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  6894  002480                     u1618:
  6895  002480  3201               	rrcf	??_lcd_send_nibble,f,c
  6896  002482  3201               	rrcf	??_lcd_send_nibble,f,c
  6897  002484  508A               	movf	3978,w,c	;volatile
  6898  002486  1801               	xorwf	??_lcd_send_nibble,w,c
  6899  002488  0B7F               	andlw	-129
  6900  00248A  1801               	xorwf	??_lcd_send_nibble,w,c
  6901  00248C  6E8A               	movwf	3978,c	;volatile
  6902                           
  6903                           ;unmc_lcd_216.c: 32: __nop();
  6904  00248E  F000               	nop	
  6905                           
  6906                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  6907  002490  848A               	bsf	3978,2,c	;volatile
  6908                           
  6909                           ;unmc_lcd_216.c: 34: __nop();__nop();
  6910  002492  F000               	nop	
  6911  002494  F000               	nop	
  6912                           
  6913                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  6914  002496  948A               	bcf	3978,2,c	;volatile
  6915  002498  0012               	return		;funcret
  6916  00249A                     __end_of_lcd_send_nibble:
  6917                           	opt stack 0
  6918                           tosu	equ	0xFFF
  6919                           tosh	equ	0xFFE
  6920                           tosl	equ	0xFFD
  6921                           pclath	equ	0xFFA
  6922                           tblptru	equ	0xFF8
  6923                           tblptrh	equ	0xFF7
  6924                           tblptrl	equ	0xFF6
  6925                           tablat	equ	0xFF5
  6926                           prodh	equ	0xFF4
  6927                           prodl	equ	0xFF3
  6928                           indf0	equ	0xFEF
  6929                           postinc0	equ	0xFEE
  6930                           fsr0h	equ	0xFEA
  6931                           fsr0l	equ	0xFE9
  6932                           wreg	equ	0xFE8
  6933                           postinc1	equ	0xFE6
  6934                           postdec1	equ	0xFE5
  6935                           fsr1h	equ	0xFE2
  6936                           fsr1l	equ	0xFE1
  6937                           indf2	equ	0xFDF
  6938                           postinc2	equ	0xFDE
  6939                           postdec2	equ	0xFDD
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _Delay100TCYx *****************
  6945 ;; Defined at:
  6946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  unit            1    wreg     unsigned char 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  unit            1    0[COMRAM] unsigned char 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;		None               void
  6953 ;; Registers used:
  6954 ;;		wreg
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6964 ;;Total ram usage:        1 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_lcd_send_byte
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text40
  6974  002A90                     __ptext40:
  6975                           	opt stack 0
  6976  002A90                     _Delay100TCYx:
  6977                           	opt stack 26
  6978                           
  6979                           ;incstack = 0
  6980                           ;Delay100TCYx@unit stored from wreg
  6981  002A90  6E01               	movwf	Delay100TCYx@unit,c
  6982  002A92  0E21               	movlw	33
  6983  002A94                     u3167:
  6984  002A94  2EE8               	decfsz	wreg,f,c
  6985  002A96  D7FE               	goto	u3167
  6986  002A98  F000               	nop	
  6987  002A9A  2E01               	decfsz	Delay100TCYx@unit,f,c
  6988  002A9C  D7FA               	goto	l2658
  6989  002A9E  0012               	return	
  6990  002AA0  0012               	return		;funcret
  6991  002AA2                     __end_of_Delay100TCYx:
  6992                           	opt stack 0
  6993                           tosu	equ	0xFFF
  6994                           tosh	equ	0xFFE
  6995                           tosl	equ	0xFFD
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           indf0	equ	0xFEF
  7004                           postinc0	equ	0xFEE
  7005                           fsr0h	equ	0xFEA
  7006                           fsr0l	equ	0xFE9
  7007                           wreg	equ	0xFE8
  7008                           postinc1	equ	0xFE6
  7009                           postdec1	equ	0xFE5
  7010                           fsr1h	equ	0xFE2
  7011                           fsr1l	equ	0xFE1
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _Write_RTC *****************
  7020 ;; Defined at:
  7021 ;;		line 35 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    2
  7042 ;; This function calls:
  7043 ;;		_RtccWrOn
  7044 ;;		_RtccWriteDate
  7045 ;;		_RtccWriteTime
  7046 ;;		___awdiv
  7047 ;; This function is called by:
  7048 ;;		_Setup
  7049 ;;		_cambiar_dia
  7050 ;;		_cambiar_mes
  7051 ;;		_cambiar_anio
  7052 ;;		_cambiar_hora
  7053 ;;		_cambiar_minutos
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text41
  7058  00144C                     __ptext41:
  7059                           	opt stack 0
  7060  00144C                     _Write_RTC:
  7061                           	opt stack 25
  7062                           
  7063                           ;unmc_rtcc_02.c: 37: RtccWrOn();
  7064                           
  7065                           ;incstack = 0
  7066  00144C  EC51  F015         	call	_RtccWrOn	;wreg free
  7067                           
  7068                           ;unmc_rtcc_02.c: 39: PIE3bits.RTCCIE=1;
  7069  001450  80A3               	bsf	4003,0,c	;volatile
  7070                           
  7071                           ;unmc_rtcc_02.c: 40: segundo_d=segundo/10;
  7072  001452  C096  F001         	movff	_segundo,___awdiv@dividend
  7073  001456  C097  F002         	movff	_segundo+1,___awdiv@dividend+1
  7074  00145A  0E00               	movlw	0
  7075  00145C  6E04               	movwf	___awdiv@divisor+1,c
  7076  00145E  0E0A               	movlw	10
  7077  001460  6E03               	movwf	___awdiv@divisor,c
  7078  001462  ECC5  F010         	call	___awdiv	;wreg free
  7079  001466  5001               	movf	?___awdiv,w,c
  7080  001468  0100               	movlb	0	; () banked
  7081  00146A  6FE6               	movwf	_segundo_d& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;unmc_rtcc_02.c: 41: segundo_u=segundo-segundo_d*10;
  7085  00146C  0100               	movlb	0	; () banked
  7086  00146E  51E6               	movf	_segundo_d& (0+255),w,b
  7087  001470  0D0A               	mullw	10
  7088  001472  50F3               	movf	prodl,w,c
  7089  001474  0800               	sublw	0
  7090  001476  0100               	movlb	0	; () banked
  7091  001478  2596               	addwf	_segundo& (0+255),w,b
  7092  00147A  0100               	movlb	0	; () banked
  7093  00147C  6FE7               	movwf	_segundo_u& (0+255),b
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;unmc_rtcc_02.c: 42: RtccTime.f.sec =segundo_d*16+segundo_u;
  7097  00147E  0100               	movlb	0	; () banked
  7098  001480  51E6               	movf	_segundo_d& (0+255),w,b
  7099  001482  0D10               	mullw	16
  7100  001484  50F3               	movf	prodl,w,c
  7101  001486  0100               	movlb	0	; () banked
  7102  001488  25E7               	addwf	_segundo_u& (0+255),w,b
  7103  00148A  0100               	movlb	0	; () banked
  7104  00148C  6FAF               	movwf	(_RtccTime+1)& (0+255),b
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;unmc_rtcc_02.c: 43: minuto_d=minuto/10;
  7108  00148E  C0D9  F001         	movff	_minuto,___awdiv@dividend
  7109  001492  C0DA  F002         	movff	_minuto+1,___awdiv@dividend+1
  7110  001496  0E00               	movlw	0
  7111  001498  6E04               	movwf	___awdiv@divisor+1,c
  7112  00149A  0E0A               	movlw	10
  7113  00149C  6E03               	movwf	___awdiv@divisor,c
  7114  00149E  ECC5  F010         	call	___awdiv	;wreg free
  7115  0014A2  5001               	movf	?___awdiv,w,c
  7116  0014A4  0100               	movlb	0	; () banked
  7117  0014A6  6FE4               	movwf	_minuto_d& (0+255),b
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;unmc_rtcc_02.c: 44: minuto_u=minuto-minuto_d*10;
  7121  0014A8  0100               	movlb	0	; () banked
  7122  0014AA  51E4               	movf	_minuto_d& (0+255),w,b
  7123  0014AC  0D0A               	mullw	10
  7124  0014AE  50F3               	movf	prodl,w,c
  7125  0014B0  0800               	sublw	0
  7126  0014B2  0100               	movlb	0	; () banked
  7127  0014B4  25D9               	addwf	_minuto& (0+255),w,b
  7128  0014B6  0100               	movlb	0	; () banked
  7129  0014B8  6FE5               	movwf	_minuto_u& (0+255),b
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;unmc_rtcc_02.c: 45: RtccTime.f.min =minuto_d*16+minuto_u;
  7133  0014BA  0100               	movlb	0	; () banked
  7134  0014BC  51E4               	movf	_minuto_d& (0+255),w,b
  7135  0014BE  0D10               	mullw	16
  7136  0014C0  50F3               	movf	prodl,w,c
  7137  0014C2  0100               	movlb	0	; () banked
  7138  0014C4  25E5               	addwf	_minuto_u& (0+255),w,b
  7139  0014C6  0100               	movlb	0	; () banked
  7140  0014C8  6FB0               	movwf	(_RtccTime+2)& (0+255),b
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;unmc_rtcc_02.c: 46: hora_d=hora/10;
  7144  0014CA  C0D5  F001         	movff	_hora,___awdiv@dividend
  7145  0014CE  C0D6  F002         	movff	_hora+1,___awdiv@dividend+1
  7146  0014D2  0E00               	movlw	0
  7147  0014D4  6E04               	movwf	___awdiv@divisor+1,c
  7148  0014D6  0E0A               	movlw	10
  7149  0014D8  6E03               	movwf	___awdiv@divisor,c
  7150  0014DA  ECC5  F010         	call	___awdiv	;wreg free
  7151  0014DE  5001               	movf	?___awdiv,w,c
  7152  0014E0  0100               	movlb	0	; () banked
  7153  0014E2  6FE0               	movwf	_hora_d& (0+255),b
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;unmc_rtcc_02.c: 47: hora_u=hora-hora_d*10;
  7157  0014E4  0100               	movlb	0	; () banked
  7158  0014E6  51E0               	movf	_hora_d& (0+255),w,b
  7159  0014E8  0D0A               	mullw	10
  7160  0014EA  50F3               	movf	prodl,w,c
  7161  0014EC  0800               	sublw	0
  7162  0014EE  0100               	movlb	0	; () banked
  7163  0014F0  25D5               	addwf	_hora& (0+255),w,b
  7164  0014F2  0100               	movlb	0	; () banked
  7165  0014F4  6FE1               	movwf	_hora_u& (0+255),b
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;unmc_rtcc_02.c: 48: RtccTime.f.hour=hora_d*16+hora_u;
  7169  0014F6  0100               	movlb	0	; () banked
  7170  0014F8  51E0               	movf	_hora_d& (0+255),w,b
  7171  0014FA  0D10               	mullw	16
  7172  0014FC  50F3               	movf	prodl,w,c
  7173  0014FE  0100               	movlb	0	; () banked
  7174  001500  25E1               	addwf	_hora_u& (0+255),w,b
  7175  001502  0100               	movlb	0	; () banked
  7176  001504  6FB1               	movwf	(_RtccTime+3)& (0+255),b
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;unmc_rtcc_02.c: 49: anio_d=anio/10;
  7180  001506  C0CF  F001         	movff	_anio,___awdiv@dividend
  7181  00150A  C0D0  F002         	movff	_anio+1,___awdiv@dividend+1
  7182  00150E  0E00               	movlw	0
  7183  001510  6E04               	movwf	___awdiv@divisor+1,c
  7184  001512  0E0A               	movlw	10
  7185  001514  6E03               	movwf	___awdiv@divisor,c
  7186  001516  ECC5  F010         	call	___awdiv	;wreg free
  7187  00151A  5001               	movf	?___awdiv,w,c
  7188  00151C  0100               	movlb	0	; () banked
  7189  00151E  6FDB               	movwf	_anio_d& (0+255),b
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;unmc_rtcc_02.c: 50: anio_u=anio-anio_d*10;
  7193  001520  0100               	movlb	0	; () banked
  7194  001522  51DB               	movf	_anio_d& (0+255),w,b
  7195  001524  0D0A               	mullw	10
  7196  001526  50F3               	movf	prodl,w,c
  7197  001528  0800               	sublw	0
  7198  00152A  0100               	movlb	0	; () banked
  7199  00152C  25CF               	addwf	_anio& (0+255),w,b
  7200  00152E  0100               	movlb	0	; () banked
  7201  001530  6FDC               	movwf	_anio_u& (0+255),b
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;unmc_rtcc_02.c: 51: RtccDate.f.year=anio_d*16+anio_u;
  7205  001532  0100               	movlb	0	; () banked
  7206  001534  51DB               	movf	_anio_d& (0+255),w,b
  7207  001536  0D10               	mullw	16
  7208  001538  50F3               	movf	prodl,w,c
  7209  00153A  0100               	movlb	0	; () banked
  7210  00153C  25DC               	addwf	_anio_u& (0+255),w,b
  7211  00153E  6E58               	movwf	_RtccDate+3,c
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;unmc_rtcc_02.c: 52: mes_d=mes/10;
  7215  001540  C0D7  F001         	movff	_mes,___awdiv@dividend
  7216  001544  C0D8  F002         	movff	_mes+1,___awdiv@dividend+1
  7217  001548  0E00               	movlw	0
  7218  00154A  6E04               	movwf	___awdiv@divisor+1,c
  7219  00154C  0E0A               	movlw	10
  7220  00154E  6E03               	movwf	___awdiv@divisor,c
  7221  001550  ECC5  F010         	call	___awdiv	;wreg free
  7222  001554  5001               	movf	?___awdiv,w,c
  7223  001556  0100               	movlb	0	; () banked
  7224  001558  6FE2               	movwf	_mes_d& (0+255),b
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;unmc_rtcc_02.c: 53: mes_u=mes-mes_d*10;
  7228  00155A  0100               	movlb	0	; () banked
  7229  00155C  51E2               	movf	_mes_d& (0+255),w,b
  7230  00155E  0D0A               	mullw	10
  7231  001560  50F3               	movf	prodl,w,c
  7232  001562  0800               	sublw	0
  7233  001564  0100               	movlb	0	; () banked
  7234  001566  25D7               	addwf	_mes& (0+255),w,b
  7235  001568  0100               	movlb	0	; () banked
  7236  00156A  6FE3               	movwf	_mes_u& (0+255),b
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;unmc_rtcc_02.c: 54: RtccDate.f.mon=mes_d*16+mes_u;
  7240  00156C  0100               	movlb	0	; () banked
  7241  00156E  51E2               	movf	_mes_d& (0+255),w,b
  7242  001570  0D10               	mullw	16
  7243  001572  50F3               	movf	prodl,w,c
  7244  001574  0100               	movlb	0	; () banked
  7245  001576  25E3               	addwf	_mes_u& (0+255),w,b
  7246  001578  6E57               	movwf	_RtccDate+2,c
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;unmc_rtcc_02.c: 55: fecha_d=dia/10;
  7250  00157A  C0D1  F001         	movff	_dia,___awdiv@dividend
  7251  00157E  C0D2  F002         	movff	_dia+1,___awdiv@dividend+1
  7252  001582  0E00               	movlw	0
  7253  001584  6E04               	movwf	___awdiv@divisor+1,c
  7254  001586  0E0A               	movlw	10
  7255  001588  6E03               	movwf	___awdiv@divisor,c
  7256  00158A  ECC5  F010         	call	___awdiv	;wreg free
  7257  00158E  5001               	movf	?___awdiv,w,c
  7258  001590  0100               	movlb	0	; () banked
  7259  001592  6FDE               	movwf	_fecha_d& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;unmc_rtcc_02.c: 56: fecha_u=dia-fecha_d*10;
  7263  001594  0100               	movlb	0	; () banked
  7264  001596  51DE               	movf	_fecha_d& (0+255),w,b
  7265  001598  0D0A               	mullw	10
  7266  00159A  50F3               	movf	prodl,w,c
  7267  00159C  0800               	sublw	0
  7268  00159E  0100               	movlb	0	; () banked
  7269  0015A0  25D1               	addwf	_dia& (0+255),w,b
  7270  0015A2  0100               	movlb	0	; () banked
  7271  0015A4  6FDF               	movwf	_fecha_u& (0+255),b
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;unmc_rtcc_02.c: 57: RtccDate.f.mday=fecha_d*16+fecha_u;
  7275  0015A6  0100               	movlb	0	; () banked
  7276  0015A8  51DE               	movf	_fecha_d& (0+255),w,b
  7277  0015AA  0D10               	mullw	16
  7278  0015AC  50F3               	movf	prodl,w,c
  7279  0015AE  0100               	movlb	0	; () banked
  7280  0015B0  25DF               	addwf	_fecha_u& (0+255),w,b
  7281  0015B2  6E56               	movwf	_RtccDate+1,c
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;unmc_rtcc_02.c: 58: dia_semana=diasem;
  7285  0015B4  C0D3  F0DD         	movff	_diasem,_dia_semana
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;unmc_rtcc_02.c: 59: RtccDate.f.wday =diasem;
  7289  0015B8  C0D3  F055         	movff	_diasem,_RtccDate
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;unmc_rtcc_02.c: 60: RtccWriteTime(&RtccTime,1);
  7293  0015BC  0EAE               	movlw	low _RtccTime
  7294  0015BE  6E01               	movwf	RtccWriteTime@pTm,c
  7295  0015C0  0E00               	movlw	high _RtccTime
  7296  0015C2  6E02               	movwf	RtccWriteTime@pTm+1,c
  7297  0015C4  0E01               	movlw	1
  7298  0015C6  6E03               	movwf	RtccWriteTime@di,c
  7299  0015C8  ECC0  F00C         	call	_RtccWriteTime	;wreg free
  7300                           
  7301                           ;unmc_rtcc_02.c: 61: RtccWriteDate(&RtccDate,1);
  7302  0015CC  0E55               	movlw	low _RtccDate
  7303  0015CE  6E01               	movwf	RtccWriteDate@pDt,c
  7304  0015D0  0E00               	movlw	high _RtccDate
  7305  0015D2  6E02               	movwf	RtccWriteDate@pDt+1,c
  7306  0015D4  0E01               	movlw	1
  7307  0015D6  6E03               	movwf	RtccWriteDate@di,c
  7308  0015D8  ECF1  F00A         	call	_RtccWriteDate	;wreg free
  7309                           
  7310                           ;unmc_rtcc_02.c: 62: (RTCCFGbits.RTCEN=1);
  7311  0015DC  010F               	movlb	15	; () banked
  7312  0015DE  8F3F               	bsf	63,7,b	;volatile
  7313                           
  7314                           ; BSR set to: 15
  7315  0015E0  0012               	return		;funcret
  7316  0015E2                     __end_of_Write_RTC:
  7317                           	opt stack 0
  7318                           tosu	equ	0xFFF
  7319                           tosh	equ	0xFFE
  7320                           tosl	equ	0xFFD
  7321                           pclath	equ	0xFFA
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           fsr0h	equ	0xFEA
  7331                           fsr0l	equ	0xFE9
  7332                           wreg	equ	0xFE8
  7333                           postinc1	equ	0xFE6
  7334                           postdec1	equ	0xFE5
  7335                           fsr1h	equ	0xFE2
  7336                           fsr1l	equ	0xFE1
  7337                           indf2	equ	0xFDF
  7338                           postinc2	equ	0xFDE
  7339                           postdec2	equ	0xFDD
  7340                           fsr2h	equ	0xFDA
  7341                           fsr2l	equ	0xFD9
  7342                           status	equ	0xFD8
  7343                           
  7344 ;; *************** function ___awdiv *****************
  7345 ;; Defined at:
  7346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  dividend        2    0[COMRAM] int 
  7349 ;;  divisor         2    2[COMRAM] int 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  quotient        2    6[COMRAM] int 
  7352 ;;  sign            1    5[COMRAM] unsigned char 
  7353 ;;  counter         1    4[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  2    0[COMRAM] int 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7366 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7367 ;;Total ram usage:        8 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_Write_RTC
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text42
  7377  00218A                     __ptext42:
  7378                           	opt stack 0
  7379  00218A                     ___awdiv:
  7380                           	opt stack 26
  7381                           
  7382                           ; BSR set to: 15
  7383                           ;incstack = 0
  7384  00218A  0E00               	movlw	0
  7385  00218C  6E06               	movwf	___awdiv@sign,c
  7386  00218E  AE04               	btfss	___awdiv@divisor+1,7,c
  7387  002190  D007               	goto	l3038
  7388  002192  6C03               	negf	___awdiv@divisor,c
  7389  002194  1E04               	comf	___awdiv@divisor+1,f,c
  7390  002196  B0D8               	btfsc	status,0,c
  7391  002198  2A04               	incf	___awdiv@divisor+1,f,c
  7392  00219A  0E01               	movlw	1
  7393  00219C  6E06               	movwf	___awdiv@sign,c
  7394  00219E  D000               	goto	l3038
  7395  0021A0                     l3038:
  7396  0021A0  AE02               	btfss	___awdiv@dividend+1,7,c
  7397  0021A2  D007               	goto	l3044
  7398  0021A4  6C01               	negf	___awdiv@dividend,c
  7399  0021A6  1E02               	comf	___awdiv@dividend+1,f,c
  7400  0021A8  B0D8               	btfsc	status,0,c
  7401  0021AA  2A02               	incf	___awdiv@dividend+1,f,c
  7402  0021AC  0E01               	movlw	1
  7403  0021AE  1A06               	xorwf	___awdiv@sign,f,c
  7404  0021B0  D000               	goto	l3044
  7405  0021B2                     l3044:
  7406  0021B2  0E00               	movlw	0
  7407  0021B4  6E08               	movwf	___awdiv@quotient+1,c
  7408  0021B6  0E00               	movlw	0
  7409  0021B8  6E07               	movwf	___awdiv@quotient,c
  7410  0021BA  5003               	movf	___awdiv@divisor,w,c
  7411  0021BC  1004               	iorwf	___awdiv@divisor+1,w,c
  7412  0021BE  B4D8               	btfsc	status,2,c
  7413  0021C0  D021               	goto	l3066
  7414  0021C2  0E01               	movlw	1
  7415  0021C4  6E05               	movwf	___awdiv@counter,c
  7416  0021C6  D005               	goto	l3052
  7417  0021C8                     l3050:
  7418  0021C8  90D8               	bcf	status,0,c
  7419  0021CA  3603               	rlcf	___awdiv@divisor,f,c
  7420  0021CC  3604               	rlcf	___awdiv@divisor+1,f,c
  7421  0021CE  2A05               	incf	___awdiv@counter,f,c
  7422  0021D0  D000               	goto	l3052
  7423  0021D2                     l3052:
  7424  0021D2  BE04               	btfsc	___awdiv@divisor+1,7,c
  7425  0021D4  D002               	goto	l3054
  7426  0021D6  D7F8               	goto	l3050
  7427  0021D8  D000               	goto	l3054
  7428  0021DA                     l3054:
  7429  0021DA  90D8               	bcf	status,0,c
  7430  0021DC  3607               	rlcf	___awdiv@quotient,f,c
  7431  0021DE  3608               	rlcf	___awdiv@quotient+1,f,c
  7432  0021E0  5003               	movf	___awdiv@divisor,w,c
  7433  0021E2  5C01               	subwf	___awdiv@dividend,w,c
  7434  0021E4  5004               	movf	___awdiv@divisor+1,w,c
  7435  0021E6  5802               	subwfb	___awdiv@dividend+1,w,c
  7436  0021E8  A0D8               	btfss	status,0,c
  7437  0021EA  D006               	goto	l3062
  7438  0021EC  5003               	movf	___awdiv@divisor,w,c
  7439  0021EE  5E01               	subwf	___awdiv@dividend,f,c
  7440  0021F0  5004               	movf	___awdiv@divisor+1,w,c
  7441  0021F2  5A02               	subwfb	___awdiv@dividend+1,f,c
  7442  0021F4  8007               	bsf	___awdiv@quotient,0,c
  7443  0021F6  D000               	goto	l3062
  7444  0021F8                     l3062:
  7445  0021F8  90D8               	bcf	status,0,c
  7446  0021FA  3204               	rrcf	___awdiv@divisor+1,f,c
  7447  0021FC  3203               	rrcf	___awdiv@divisor,f,c
  7448  0021FE  2E05               	decfsz	___awdiv@counter,f,c
  7449  002200  D7EC               	goto	l3054
  7450  002202  D000               	goto	l3066
  7451  002204                     l3066:
  7452  002204  5006               	movf	___awdiv@sign,w,c
  7453  002206  B4D8               	btfsc	status,2,c
  7454  002208  D005               	goto	l3070
  7455  00220A  6C07               	negf	___awdiv@quotient,c
  7456  00220C  1E08               	comf	___awdiv@quotient+1,f,c
  7457  00220E  B0D8               	btfsc	status,0,c
  7458  002210  2A08               	incf	___awdiv@quotient+1,f,c
  7459  002212  D000               	goto	l3070
  7460  002214                     l3070:
  7461  002214  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7462  002218  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7463  00221C  0012               	return	
  7464  00221E  0012               	return		;funcret
  7465  002220                     __end_of___awdiv:
  7466                           	opt stack 0
  7467                           tosu	equ	0xFFF
  7468                           tosh	equ	0xFFE
  7469                           tosl	equ	0xFFD
  7470                           pclath	equ	0xFFA
  7471                           tblptru	equ	0xFF8
  7472                           tblptrh	equ	0xFF7
  7473                           tblptrl	equ	0xFF6
  7474                           tablat	equ	0xFF5
  7475                           prodh	equ	0xFF4
  7476                           prodl	equ	0xFF3
  7477                           indf0	equ	0xFEF
  7478                           postinc0	equ	0xFEE
  7479                           fsr0h	equ	0xFEA
  7480                           fsr0l	equ	0xFE9
  7481                           wreg	equ	0xFE8
  7482                           postinc1	equ	0xFE6
  7483                           postdec1	equ	0xFE5
  7484                           fsr1h	equ	0xFE2
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _RtccWriteTime *****************
  7494 ;; Defined at:
  7495 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  pTm             2    0[COMRAM] PTR const struct .
  7498 ;;		 -> RtccTime(4), 
  7499 ;;  di              1    2[COMRAM] enum E7121
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  tempHourWDay    2    9[COMRAM] struct .
  7502 ;;  tempMinSec      2    7[COMRAM] struct .
  7503 ;;  wasWrEn         1    6[COMRAM] enum E7121
  7504 ;;  wasAlrm         1    5[COMRAM] enum E7121
  7505 ;;  wasOn           1    4[COMRAM] enum E7121
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      enum E7121
  7508 ;; Registers used:
  7509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7516 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7518 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7519 ;;Total ram usage:       11 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    1
  7522 ;; This function calls:
  7523 ;;		_RtccWrOn
  7524 ;; This function is called by:
  7525 ;;		_Write_RTC
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text43
  7530  001980                     __ptext43:
  7531                           	opt stack 0
  7532  001980                     _RtccWriteTime:
  7533                           	opt stack 25
  7534                           
  7535                           ;incstack = 0
  7536  001980  0E00               	movlw	0
  7537  001982  6E06               	movwf	RtccWriteTime@wasAlrm,c
  7538  001984  EE20 F002          	lfsr	2,2
  7539  001988  5001               	movf	RtccWriteTime@pTm,w,c
  7540  00198A  26D9               	addwf	fsr2l,f,c
  7541  00198C  5002               	movf	RtccWriteTime@pTm+1,w,c
  7542  00198E  22DA               	addwfc	fsr2h,f,c
  7543  001990  0E5A               	movlw	90
  7544  001992  60DF               	cpfslt	indf2,c
  7545  001994  0012               	return	
  7546  001996  EE20 F001          	lfsr	2,1
  7547  00199A  5001               	movf	RtccWriteTime@pTm,w,c
  7548  00199C  26D9               	addwf	fsr2l,f,c
  7549  00199E  5002               	movf	RtccWriteTime@pTm+1,w,c
  7550  0019A0  22DA               	addwfc	fsr2h,f,c
  7551  0019A2  0E5A               	movlw	90
  7552  0019A4  60DF               	cpfslt	indf2,c
  7553  0019A6  0012               	return	
  7554  0019A8  EE20 F003          	lfsr	2,3
  7555  0019AC  5001               	movf	RtccWriteTime@pTm,w,c
  7556  0019AE  26D9               	addwf	fsr2l,f,c
  7557  0019B0  5002               	movf	RtccWriteTime@pTm+1,w,c
  7558  0019B2  22DA               	addwfc	fsr2h,f,c
  7559  0019B4  0E24               	movlw	36
  7560  0019B6  64DF               	cpfsgt	indf2,c
  7561  0019B8  D002               	goto	l2902
  7562  0019BA  0012               	return	
  7563                           
  7564                           ;	Return value of _RtccWriteTime is never used
  7565  0019BC  0012               	return	
  7566  0019BE                     l2902:
  7567  0019BE  EE20 F002          	lfsr	2,2
  7568  0019C2  5001               	movf	RtccWriteTime@pTm,w,c
  7569  0019C4  26D9               	addwf	fsr2l,f,c
  7570  0019C6  5002               	movf	RtccWriteTime@pTm+1,w,c
  7571  0019C8  22DA               	addwfc	fsr2h,f,c
  7572  0019CA  50DF               	movf	indf2,w,c
  7573  0019CC  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  7574  0019CE  EE20 F001          	lfsr	2,1
  7575  0019D2  5001               	movf	RtccWriteTime@pTm,w,c
  7576  0019D4  26D9               	addwf	fsr2l,f,c
  7577  0019D6  5002               	movf	RtccWriteTime@pTm+1,w,c
  7578  0019D8  22DA               	addwfc	fsr2h,f,c
  7579  0019DA  50DF               	movf	indf2,w,c
  7580  0019DC  6E08               	movwf	RtccWriteTime@tempMinSec,c
  7581  0019DE  5003               	movf	RtccWriteTime@di,w,c
  7582  0019E0  B4D8               	btfsc	status,2,c
  7583  0019E2  D002               	goto	l2908
  7584  0019E4  9CF2               	bcf	intcon,6,c	;volatile
  7585  0019E6  D000               	goto	l2908
  7586  0019E8                     l2908:
  7587  0019E8  0E00               	movlw	0
  7588  0019EA  BB3F               	btfsc	63,5,b	;volatile
  7589  0019EC  0E01               	movlw	1
  7590  0019EE  6E07               	movwf	RtccWriteTime@wasWrEn,c
  7591  0019F0  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7592  0019F2  A4D8               	btfss	status,2,c
  7593  0019F4  D003               	goto	l2912
  7594  0019F6  EC51  F015         	call	_RtccWrOn	;wreg free
  7595  0019FA  D000               	goto	l2912
  7596  0019FC                     l2912:
  7597  0019FC  0E00               	movlw	0
  7598  0019FE  BF3F               	btfsc	63,7,b	;volatile
  7599  001A00  0E01               	movlw	1
  7600  001A02  6E05               	movwf	RtccWriteTime@wasOn,c
  7601  001A04  5005               	movf	RtccWriteTime@wasOn,w,c
  7602  001A06  B4D8               	btfsc	status,2,c
  7603  001A08  D007               	goto	l2918
  7604  001A0A  0E00               	movlw	0
  7605  001A0C  BE91               	btfsc	3985,7,c	;volatile
  7606  001A0E  0E01               	movlw	1
  7607  001A10  6E06               	movwf	RtccWriteTime@wasAlrm,c
  7608  001A12  010F               	movlb	15	; () banked
  7609  001A14  9F3F               	bcf	63,7,b	;volatile
  7610  001A16  D000               	goto	l2918
  7611  001A18                     l2918:
  7612  001A18  0EFC               	movlw	252
  7613  001A1A  010F               	movlb	15	; () banked
  7614  001A1C  173F               	andwf	63,f,b	;volatile
  7615  001A1E  010F               	movlb	15	; () banked
  7616  001A20  813F               	bsf	63,0,b	;volatile
  7617                           
  7618                           ; BSR set to: 15
  7619  001A22  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  7620                           
  7621                           ; BSR set to: 15
  7622  001A26  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  7623                           
  7624                           ; BSR set to: 15
  7625  001A2A  EE20 F003          	lfsr	2,3
  7626  001A2E  5001               	movf	RtccWriteTime@pTm,w,c
  7627  001A30  26D9               	addwf	fsr2l,f,c
  7628  001A32  5002               	movf	RtccWriteTime@pTm+1,w,c
  7629  001A34  22DA               	addwfc	fsr2h,f,c
  7630  001A36  50DF               	movf	indf2,w,c
  7631  001A38  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  7632                           
  7633                           ; BSR set to: 15
  7634  001A3A  0EFC               	movlw	252
  7635  001A3C  010F               	movlb	15	; () banked
  7636  001A3E  173F               	andwf	63,f,b	;volatile
  7637                           
  7638                           ; BSR set to: 15
  7639  001A40  010F               	movlb	15	; () banked
  7640  001A42  813F               	bsf	63,0,b	;volatile
  7641                           
  7642                           ; BSR set to: 15
  7643  001A44  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  7644                           
  7645                           ; BSR set to: 15
  7646  001A48  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  7647                           
  7648                           ; BSR set to: 15
  7649  001A4C  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  7650                           
  7651                           ; BSR set to: 15
  7652  001A50  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  7653                           
  7654                           ; BSR set to: 15
  7655  001A54  5005               	movf	RtccWriteTime@wasOn,w,c
  7656  001A56  B4D8               	btfsc	status,2,c
  7657  001A58  D00D               	goto	l2950
  7658                           
  7659                           ; BSR set to: 15
  7660  001A5A  010F               	movlb	15	; () banked
  7661  001A5C  8F3F               	bsf	63,7,b	;volatile
  7662                           
  7663                           ; BSR set to: 15
  7664  001A5E  5006               	movf	RtccWriteTime@wasAlrm,w,c
  7665  001A60  B4D8               	btfsc	status,2,c
  7666  001A62  D002               	goto	l2946
  7667                           
  7668                           ; BSR set to: 15
  7669  001A64  8E91               	bsf	3985,7,c	;volatile
  7670  001A66  D000               	goto	l2946
  7671  001A68                     l2946:
  7672                           
  7673                           ; BSR set to: 15
  7674  001A68  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7675  001A6A  B4D8               	btfsc	status,2,c
  7676  001A6C  D009               	goto	l2954
  7677                           
  7678                           ; BSR set to: 15
  7679  001A6E  EC51  F015         	call	_RtccWrOn	;wreg free
  7680  001A72  D006               	goto	l2954
  7681  001A74                     l2950:
  7682  001A74  5007               	movf	RtccWriteTime@wasWrEn,w,c
  7683  001A76  A4D8               	btfss	status,2,c
  7684  001A78  D003               	goto	l2954
  7685  001A7A  010F               	movlb	15	; () banked
  7686  001A7C  9B3F               	bcf	63,5,b	;volatile
  7687                           
  7688                           ; BSR set to: 15
  7689  001A7E  D000               	goto	l2954
  7690  001A80                     l2954:
  7691  001A80  5003               	movf	RtccWriteTime@di,w,c
  7692  001A82  B4D8               	btfsc	status,2,c
  7693  001A84  0012               	return	
  7694  001A86  8CF2               	bsf	intcon,6,c	;volatile
  7695  001A88  0012               	return	
  7696                           
  7697                           ;	Return value of _RtccWriteTime is never used
  7698  001A8A  0012               	return		;funcret
  7699  001A8C                     __end_of_RtccWriteTime:
  7700                           	opt stack 0
  7701                           tosu	equ	0xFFF
  7702                           tosh	equ	0xFFE
  7703                           tosl	equ	0xFFD
  7704                           pclath	equ	0xFFA
  7705                           tblptru	equ	0xFF8
  7706                           tblptrh	equ	0xFF7
  7707                           tblptrl	equ	0xFF6
  7708                           tablat	equ	0xFF5
  7709                           prodh	equ	0xFF4
  7710                           prodl	equ	0xFF3
  7711                           intcon	equ	0xFF2
  7712                           indf0	equ	0xFEF
  7713                           postinc0	equ	0xFEE
  7714                           fsr0h	equ	0xFEA
  7715                           fsr0l	equ	0xFE9
  7716                           wreg	equ	0xFE8
  7717                           postinc1	equ	0xFE6
  7718                           postdec1	equ	0xFE5
  7719                           fsr1h	equ	0xFE2
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _RtccWriteDate *****************
  7729 ;; Defined at:
  7730 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  pDt             2    0[COMRAM] PTR const struct .
  7733 ;;		 -> RtccDate(4), 
  7734 ;;  di              1    2[COMRAM] enum E7121
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  tempHourWDay    2   11[COMRAM] struct .
  7737 ;;  tempDayMonth    2    9[COMRAM] struct .
  7738 ;;  tempYear        2    6[COMRAM] struct .
  7739 ;;  wasWrEn         1    8[COMRAM] enum E7121
  7740 ;;  wasAlrm         1    5[COMRAM] enum E7121
  7741 ;;  wasOn           1    4[COMRAM] enum E7121
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      enum E7121
  7744 ;; Registers used:
  7745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7752 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7753 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7754 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7755 ;;Total ram usage:       13 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    1
  7758 ;; This function calls:
  7759 ;;		_RtccWrOn
  7760 ;; This function is called by:
  7761 ;;		_Write_RTC
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text44
  7766  0015E2                     __ptext44:
  7767                           	opt stack 0
  7768  0015E2                     _RtccWriteDate:
  7769                           	opt stack 25
  7770                           
  7771                           ;incstack = 0
  7772  0015E2  0E00               	movlw	0
  7773  0015E4  6E06               	movwf	RtccWriteDate@wasAlrm,c
  7774  0015E6  EE20 F002          	lfsr	2,2
  7775  0015EA  5001               	movf	RtccWriteDate@pDt,w,c
  7776  0015EC  26D9               	addwf	fsr2l,f,c
  7777  0015EE  5002               	movf	RtccWriteDate@pDt+1,w,c
  7778  0015F0  22DA               	addwfc	fsr2h,f,c
  7779  0015F2  0E13               	movlw	19
  7780  0015F4  60DF               	cpfslt	indf2,c
  7781  0015F6  0012               	return	
  7782  0015F8  EE20 F002          	lfsr	2,2
  7783  0015FC  5001               	movf	RtccWriteDate@pDt,w,c
  7784  0015FE  26D9               	addwf	fsr2l,f,c
  7785  001600  5002               	movf	RtccWriteDate@pDt+1,w,c
  7786  001602  22DA               	addwfc	fsr2h,f,c
  7787  001604  50DF               	movf	indf2,w,c
  7788  001606  B4D8               	btfsc	status,2,c
  7789  001608  0012               	return	
  7790  00160A  EE20 F001          	lfsr	2,1
  7791  00160E  5001               	movf	RtccWriteDate@pDt,w,c
  7792  001610  26D9               	addwf	fsr2l,f,c
  7793  001612  5002               	movf	RtccWriteDate@pDt+1,w,c
  7794  001614  22DA               	addwfc	fsr2h,f,c
  7795  001616  0E32               	movlw	50
  7796  001618  60DF               	cpfslt	indf2,c
  7797  00161A  0012               	return	
  7798  00161C  EE20 F001          	lfsr	2,1
  7799  001620  5001               	movf	RtccWriteDate@pDt,w,c
  7800  001622  26D9               	addwf	fsr2l,f,c
  7801  001624  5002               	movf	RtccWriteDate@pDt+1,w,c
  7802  001626  22DA               	addwfc	fsr2h,f,c
  7803  001628  50DF               	movf	indf2,w,c
  7804  00162A  B4D8               	btfsc	status,2,c
  7805  00162C  0012               	return	
  7806  00162E  EE20 F003          	lfsr	2,3
  7807  001632  5001               	movf	RtccWriteDate@pDt,w,c
  7808  001634  26D9               	addwf	fsr2l,f,c
  7809  001636  5002               	movf	RtccWriteDate@pDt+1,w,c
  7810  001638  22DA               	addwfc	fsr2h,f,c
  7811  00163A  0E99               	movlw	153
  7812  00163C  64DF               	cpfsgt	indf2,c
  7813  00163E  D002               	goto	l2970
  7814  001640  0012               	return	
  7815                           
  7816                           ;	Return value of _RtccWriteDate is never used
  7817  001642  0012               	return	
  7818  001644                     l2970:
  7819  001644  EE20 F003          	lfsr	2,3
  7820  001648  5001               	movf	RtccWriteDate@pDt,w,c
  7821  00164A  26D9               	addwf	fsr2l,f,c
  7822  00164C  5002               	movf	RtccWriteDate@pDt+1,w,c
  7823  00164E  22DA               	addwfc	fsr2h,f,c
  7824  001650  50DF               	movf	indf2,w,c
  7825  001652  6E07               	movwf	RtccWriteDate@tempYear,c
  7826  001654  EE20 F001          	lfsr	2,1
  7827  001658  5001               	movf	RtccWriteDate@pDt,w,c
  7828  00165A  26D9               	addwf	fsr2l,f,c
  7829  00165C  5002               	movf	RtccWriteDate@pDt+1,w,c
  7830  00165E  22DA               	addwfc	fsr2h,f,c
  7831  001660  50DF               	movf	indf2,w,c
  7832  001662  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  7833  001664  EE20 F002          	lfsr	2,2
  7834  001668  5001               	movf	RtccWriteDate@pDt,w,c
  7835  00166A  26D9               	addwf	fsr2l,f,c
  7836  00166C  5002               	movf	RtccWriteDate@pDt+1,w,c
  7837  00166E  22DA               	addwfc	fsr2h,f,c
  7838  001670  50DF               	movf	indf2,w,c
  7839  001672  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  7840  001674  5003               	movf	RtccWriteDate@di,w,c
  7841  001676  B4D8               	btfsc	status,2,c
  7842  001678  D002               	goto	l2976
  7843  00167A  9CF2               	bcf	intcon,6,c	;volatile
  7844  00167C  D000               	goto	l2976
  7845  00167E                     l2976:
  7846  00167E  0E00               	movlw	0
  7847  001680  BB3F               	btfsc	63,5,b	;volatile
  7848  001682  0E01               	movlw	1
  7849  001684  6E09               	movwf	RtccWriteDate@wasWrEn,c
  7850  001686  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7851  001688  A4D8               	btfss	status,2,c
  7852  00168A  D003               	goto	l2980
  7853  00168C  EC51  F015         	call	_RtccWrOn	;wreg free
  7854  001690  D000               	goto	l2980
  7855  001692                     l2980:
  7856  001692  0E00               	movlw	0
  7857  001694  BF3F               	btfsc	63,7,b	;volatile
  7858  001696  0E01               	movlw	1
  7859  001698  6E05               	movwf	RtccWriteDate@wasOn,c
  7860  00169A  5005               	movf	RtccWriteDate@wasOn,w,c
  7861  00169C  B4D8               	btfsc	status,2,c
  7862  00169E  D007               	goto	l2986
  7863  0016A0  0E00               	movlw	0
  7864  0016A2  BE91               	btfsc	3985,7,c	;volatile
  7865  0016A4  0E01               	movlw	1
  7866  0016A6  6E06               	movwf	RtccWriteDate@wasAlrm,c
  7867  0016A8  010F               	movlb	15	; () banked
  7868  0016AA  9F3F               	bcf	63,7,b	;volatile
  7869  0016AC  D000               	goto	l2986
  7870  0016AE                     l2986:
  7871  0016AE  0EFC               	movlw	252
  7872  0016B0  010F               	movlb	15	; () banked
  7873  0016B2  173F               	andwf	63,f,b	;volatile
  7874  0016B4  010F               	movlb	15	; () banked
  7875  0016B6  813F               	bsf	63,0,b	;volatile
  7876                           
  7877                           ; BSR set to: 15
  7878  0016B8  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  7879                           
  7880                           ; BSR set to: 15
  7881  0016BC  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  7882                           
  7883                           ; BSR set to: 15
  7884  0016C0  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  7885  0016C4  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  7886  0016C8  50DF               	movf	indf2,w,c
  7887  0016CA  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  7888                           
  7889                           ; BSR set to: 15
  7890  0016CC  0EFC               	movlw	252
  7891  0016CE  010F               	movlb	15	; () banked
  7892  0016D0  173F               	andwf	63,f,b	;volatile
  7893                           
  7894                           ; BSR set to: 15
  7895  0016D2  0E03               	movlw	3
  7896  0016D4  010F               	movlb	15	; () banked
  7897  0016D6  133F               	iorwf	63,f,b	;volatile
  7898                           
  7899                           ; BSR set to: 15
  7900  0016D8  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  7901                           
  7902                           ; BSR set to: 15
  7903  0016DC  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  7904                           
  7905                           ; BSR set to: 15
  7906  0016E0  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  7907                           
  7908                           ; BSR set to: 15
  7909  0016E4  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  7910                           
  7911                           ; BSR set to: 15
  7912  0016E8  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  7913                           
  7914                           ; BSR set to: 15
  7915  0016EC  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  7916                           
  7917                           ; BSR set to: 15
  7918  0016F0  5005               	movf	RtccWriteDate@wasOn,w,c
  7919  0016F2  B4D8               	btfsc	status,2,c
  7920  0016F4  D00D               	goto	l3022
  7921                           
  7922                           ; BSR set to: 15
  7923  0016F6  010F               	movlb	15	; () banked
  7924  0016F8  8F3F               	bsf	63,7,b	;volatile
  7925                           
  7926                           ; BSR set to: 15
  7927  0016FA  5006               	movf	RtccWriteDate@wasAlrm,w,c
  7928  0016FC  B4D8               	btfsc	status,2,c
  7929  0016FE  D002               	goto	l3018
  7930                           
  7931                           ; BSR set to: 15
  7932  001700  8E91               	bsf	3985,7,c	;volatile
  7933  001702  D000               	goto	l3018
  7934  001704                     l3018:
  7935                           
  7936                           ; BSR set to: 15
  7937  001704  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7938  001706  B4D8               	btfsc	status,2,c
  7939  001708  D009               	goto	l3026
  7940                           
  7941                           ; BSR set to: 15
  7942  00170A  EC51  F015         	call	_RtccWrOn	;wreg free
  7943  00170E  D006               	goto	l3026
  7944  001710                     l3022:
  7945  001710  5009               	movf	RtccWriteDate@wasWrEn,w,c
  7946  001712  A4D8               	btfss	status,2,c
  7947  001714  D003               	goto	l3026
  7948  001716  010F               	movlb	15	; () banked
  7949  001718  9B3F               	bcf	63,5,b	;volatile
  7950                           
  7951                           ; BSR set to: 15
  7952  00171A  D000               	goto	l3026
  7953  00171C                     l3026:
  7954  00171C  5003               	movf	RtccWriteDate@di,w,c
  7955  00171E  B4D8               	btfsc	status,2,c
  7956  001720  0012               	return	
  7957  001722  9CF2               	bcf	intcon,6,c	;volatile
  7958  001724  0012               	return	
  7959                           
  7960                           ;	Return value of _RtccWriteDate is never used
  7961  001726  0012               	return		;funcret
  7962  001728                     __end_of_RtccWriteDate:
  7963                           	opt stack 0
  7964                           tosu	equ	0xFFF
  7965                           tosh	equ	0xFFE
  7966                           tosl	equ	0xFFD
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           intcon	equ	0xFF2
  7975                           indf0	equ	0xFEF
  7976                           postinc0	equ	0xFEE
  7977                           fsr0h	equ	0xFEA
  7978                           fsr0l	equ	0xFE9
  7979                           wreg	equ	0xFE8
  7980                           postinc1	equ	0xFE6
  7981                           postdec1	equ	0xFE5
  7982                           fsr1h	equ	0xFE2
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function _RtccWrOn *****************
  7992 ;; Defined at:
  7993 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  data            2    0        unsigned int 
  7998 ;; Return value:  Size  Location     Type
  7999 ;;		None               void
  8000 ;; Registers used:
  8001 ;;		wreg, status,2
  8002 ;; Tracked objects:
  8003 ;;		On entry : 0/0
  8004 ;;		On exit  : 0/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_Write_RTC
  8017 ;;		_RtccWriteDate
  8018 ;;		_RtccWriteTime
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           	psect	text45
  8023  002AA2                     __ptext45:
  8024                           	opt stack 0
  8025  002AA2                     _RtccWrOn:
  8026                           	opt stack 25
  8027                           
  8028                           ;incstack = 0
  8029  002AA2  9CF2               	bcf	intcon,6,c	;volatile
  8030  002AA4  0E55               	movlw	85
  8031  002AA6  6EA7               	movwf	4007,c	;volatile
  8032  002AA8  0EAA               	movlw	170
  8033  002AAA  6EA7               	movwf	4007,c	;volatile
  8034  002AAC  010F               	movlb	15	; () banked
  8035  002AAE  8B3F               	bsf	63,5,b	;volatile
  8036                           
  8037                           ; BSR set to: 15
  8038  002AB0  8CF2               	bsf	intcon,6,c	;volatile
  8039                           
  8040                           ; BSR set to: 15
  8041  002AB2  0012               	return		;funcret
  8042  002AB4                     __end_of_RtccWrOn:
  8043                           	opt stack 0
  8044                           tosu	equ	0xFFF
  8045                           tosh	equ	0xFFE
  8046                           tosl	equ	0xFFD
  8047                           pclath	equ	0xFFA
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           indf0	equ	0xFEF
  8056                           postinc0	equ	0xFEE
  8057                           fsr0h	equ	0xFEA
  8058                           fsr0l	equ	0xFE9
  8059                           wreg	equ	0xFE8
  8060                           postinc1	equ	0xFE6
  8061                           postdec1	equ	0xFE5
  8062                           fsr1h	equ	0xFE2
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function _Read_RTC *****************
  8072 ;; Defined at:
  8073 ;;		line 72 in file "../../../../../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_02.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;		None
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;		None
  8078 ;; Return value:  Size  Location     Type
  8079 ;;		None               void
  8080 ;; Registers used:
  8081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8091 ;;Total ram usage:        0 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    1
  8094 ;; This function calls:
  8095 ;;		_RtccReadDate
  8096 ;;		_RtccReadTime
  8097 ;; This function is called by:
  8098 ;;		_main
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text46
  8103  001728                     __ptext46:
  8104                           	opt stack 0
  8105  001728                     _Read_RTC:
  8106                           	opt stack 29
  8107                           
  8108                           ;unmc_rtcc_02.c: 75: RtccReadTime(&RtccTime);
  8109                           
  8110                           ; BSR set to: 15
  8111                           ;incstack = 0
  8112  001728  0EAE               	movlw	low _RtccTime
  8113  00172A  6E01               	movwf	RtccReadTime@pTm,c
  8114  00172C  0E00               	movlw	high _RtccTime
  8115  00172E  6E02               	movwf	RtccReadTime@pTm+1,c
  8116  001730  ECF9  F012         	call	_RtccReadTime	;wreg free
  8117                           
  8118                           ;unmc_rtcc_02.c: 76: segundo_u=(RtccTime.f.sec & 0x0F);
  8119  001734  0100               	movlb	0	; () banked
  8120  001736  51AF               	movf	(_RtccTime+1)& (0+255),w,b
  8121  001738  0B0F               	andlw	15
  8122  00173A  0100               	movlb	0	; () banked
  8123  00173C  6FE7               	movwf	_segundo_u& (0+255),b
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;unmc_rtcc_02.c: 77: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  8127  00173E  0100               	movlb	0	; () banked
  8128  001740  39AF               	swapf	(_RtccTime+1)& (0+255),w,b
  8129  001742  0B0F               	andlw	15
  8130  001744  0B0F               	andlw	15
  8131  001746  0100               	movlb	0	; () banked
  8132  001748  6FE6               	movwf	_segundo_d& (0+255),b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;unmc_rtcc_02.c: 78: minuto_u=(RtccTime.f.min & 0x0F);
  8136  00174A  0100               	movlb	0	; () banked
  8137  00174C  51B0               	movf	(_RtccTime+2)& (0+255),w,b
  8138  00174E  0B0F               	andlw	15
  8139  001750  0100               	movlb	0	; () banked
  8140  001752  6FE5               	movwf	_minuto_u& (0+255),b
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;unmc_rtcc_02.c: 79: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  8144  001754  0100               	movlb	0	; () banked
  8145  001756  39B0               	swapf	(_RtccTime+2)& (0+255),w,b
  8146  001758  0B0F               	andlw	15
  8147  00175A  0B0F               	andlw	15
  8148  00175C  0100               	movlb	0	; () banked
  8149  00175E  6FE4               	movwf	_minuto_d& (0+255),b
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;unmc_rtcc_02.c: 80: hora_u=(RtccTime.f.hour & 0x0F);
  8153  001760  0100               	movlb	0	; () banked
  8154  001762  51B1               	movf	(_RtccTime+3)& (0+255),w,b
  8155  001764  0B0F               	andlw	15
  8156  001766  0100               	movlb	0	; () banked
  8157  001768  6FE1               	movwf	_hora_u& (0+255),b
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;unmc_rtcc_02.c: 81: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  8161  00176A  0100               	movlb	0	; () banked
  8162  00176C  39B1               	swapf	(_RtccTime+3)& (0+255),w,b
  8163  00176E  0B0F               	andlw	15
  8164  001770  0B0F               	andlw	15
  8165  001772  0100               	movlb	0	; () banked
  8166  001774  6FE0               	movwf	_hora_d& (0+255),b
  8167                           
  8168                           ;unmc_rtcc_02.c: 82: RtccReadDate(&RtccDate);
  8169  001776  0E55               	movlw	low _RtccDate
  8170  001778  6E01               	movwf	RtccReadDate@pDt,c
  8171  00177A  0E00               	movlw	high _RtccDate
  8172  00177C  6E02               	movwf	RtccReadDate@pDt+1,c
  8173  00177E  EC10  F011         	call	_RtccReadDate	;wreg free
  8174                           
  8175                           ;unmc_rtcc_02.c: 83: fecha_u=(RtccDate.f.mday & 0x0F);
  8176  001782  5056               	movf	_RtccDate+1,w,c
  8177  001784  0B0F               	andlw	15
  8178  001786  0100               	movlb	0	; () banked
  8179  001788  6FDF               	movwf	_fecha_u& (0+255),b
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;unmc_rtcc_02.c: 84: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  8183  00178A  3856               	swapf	_RtccDate+1,w,c
  8184  00178C  0B0F               	andlw	15
  8185  00178E  0B0F               	andlw	15
  8186  001790  0100               	movlb	0	; () banked
  8187  001792  6FDE               	movwf	_fecha_d& (0+255),b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;unmc_rtcc_02.c: 85: mes_u=(RtccDate.f.mon & 0x0F);
  8191  001794  5057               	movf	_RtccDate+2,w,c
  8192  001796  0B0F               	andlw	15
  8193  001798  0100               	movlb	0	; () banked
  8194  00179A  6FE3               	movwf	_mes_u& (0+255),b
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;unmc_rtcc_02.c: 86: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  8198  00179C  3857               	swapf	_RtccDate+2,w,c
  8199  00179E  0B0F               	andlw	15
  8200  0017A0  0B0F               	andlw	15
  8201  0017A2  0100               	movlb	0	; () banked
  8202  0017A4  6FE2               	movwf	_mes_d& (0+255),b
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;unmc_rtcc_02.c: 87: dia_semana=RtccDate.f.wday;
  8206  0017A6  C055  F0DD         	movff	_RtccDate,_dia_semana
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;unmc_rtcc_02.c: 88: anio_u=(RtccDate.f.year & 0x0F);
  8210  0017AA  5058               	movf	_RtccDate+3,w,c
  8211  0017AC  0B0F               	andlw	15
  8212  0017AE  0100               	movlb	0	; () banked
  8213  0017B0  6FDC               	movwf	_anio_u& (0+255),b
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;unmc_rtcc_02.c: 89: anio_d=((RtccDate.f.year & 0xF0)>>4);
  8217  0017B2  3858               	swapf	_RtccDate+3,w,c
  8218  0017B4  0B0F               	andlw	15
  8219  0017B6  0B0F               	andlw	15
  8220  0017B8  0100               	movlb	0	; () banked
  8221  0017BA  6FDB               	movwf	_anio_d& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;unmc_rtcc_02.c: 91: segundo=segundo_d*10+segundo_u;
  8225  0017BC  0100               	movlb	0	; () banked
  8226  0017BE  51E6               	movf	_segundo_d& (0+255),w,b
  8227  0017C0  0D0A               	mullw	10
  8228  0017C2  0100               	movlb	0	; () banked
  8229  0017C4  51E7               	movf	_segundo_u& (0+255),w,b
  8230  0017C6  24F3               	addwf	prodl,w,c
  8231  0017C8  0100               	movlb	0	; () banked
  8232  0017CA  6F96               	movwf	_segundo& (0+255),b
  8233  0017CC  0100               	movlb	0	; () banked
  8234  0017CE  0E00               	movlw	0
  8235  0017D0  20F4               	addwfc	prodh,w,c
  8236  0017D2  0100               	movlb	0	; () banked
  8237  0017D4  6F97               	movwf	(_segundo+1)& (0+255),b
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;unmc_rtcc_02.c: 92: minuto=minuto_d*10+minuto_u;
  8241  0017D6  0100               	movlb	0	; () banked
  8242  0017D8  51E4               	movf	_minuto_d& (0+255),w,b
  8243  0017DA  0D0A               	mullw	10
  8244  0017DC  0100               	movlb	0	; () banked
  8245  0017DE  51E5               	movf	_minuto_u& (0+255),w,b
  8246  0017E0  24F3               	addwf	prodl,w,c
  8247  0017E2  0100               	movlb	0	; () banked
  8248  0017E4  6FD9               	movwf	_minuto& (0+255),b
  8249  0017E6  0100               	movlb	0	; () banked
  8250  0017E8  0E00               	movlw	0
  8251  0017EA  20F4               	addwfc	prodh,w,c
  8252  0017EC  0100               	movlb	0	; () banked
  8253  0017EE  6FDA               	movwf	(_minuto+1)& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;unmc_rtcc_02.c: 93: hora=hora_d*10+hora_u;
  8257  0017F0  0100               	movlb	0	; () banked
  8258  0017F2  51E0               	movf	_hora_d& (0+255),w,b
  8259  0017F4  0D0A               	mullw	10
  8260  0017F6  0100               	movlb	0	; () banked
  8261  0017F8  51E1               	movf	_hora_u& (0+255),w,b
  8262  0017FA  24F3               	addwf	prodl,w,c
  8263  0017FC  0100               	movlb	0	; () banked
  8264  0017FE  6FD5               	movwf	_hora& (0+255),b
  8265  001800  0100               	movlb	0	; () banked
  8266  001802  0E00               	movlw	0
  8267  001804  20F4               	addwfc	prodh,w,c
  8268  001806  0100               	movlb	0	; () banked
  8269  001808  6FD6               	movwf	(_hora+1)& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;unmc_rtcc_02.c: 94: dia=fecha_d*10+fecha_u;
  8273  00180A  0100               	movlb	0	; () banked
  8274  00180C  51DE               	movf	_fecha_d& (0+255),w,b
  8275  00180E  0D0A               	mullw	10
  8276  001810  0100               	movlb	0	; () banked
  8277  001812  51DF               	movf	_fecha_u& (0+255),w,b
  8278  001814  24F3               	addwf	prodl,w,c
  8279  001816  0100               	movlb	0	; () banked
  8280  001818  6FD1               	movwf	_dia& (0+255),b
  8281  00181A  0100               	movlb	0	; () banked
  8282  00181C  0E00               	movlw	0
  8283  00181E  20F4               	addwfc	prodh,w,c
  8284  001820  0100               	movlb	0	; () banked
  8285  001822  6FD2               	movwf	(_dia+1)& (0+255),b
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;unmc_rtcc_02.c: 95: diasem=dia_semana;
  8289  001824  C0DD  F0D3         	movff	_dia_semana,_diasem
  8290  001828  0100               	movlb	0	; () banked
  8291  00182A  6BD4               	clrf	(_diasem+1)& (0+255),b
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;unmc_rtcc_02.c: 96: mes=mes_d*10+mes_u;
  8295  00182C  0100               	movlb	0	; () banked
  8296  00182E  51E2               	movf	_mes_d& (0+255),w,b
  8297  001830  0D0A               	mullw	10
  8298  001832  0100               	movlb	0	; () banked
  8299  001834  51E3               	movf	_mes_u& (0+255),w,b
  8300  001836  24F3               	addwf	prodl,w,c
  8301  001838  0100               	movlb	0	; () banked
  8302  00183A  6FD7               	movwf	_mes& (0+255),b
  8303  00183C  0100               	movlb	0	; () banked
  8304  00183E  0E00               	movlw	0
  8305  001840  20F4               	addwfc	prodh,w,c
  8306  001842  0100               	movlb	0	; () banked
  8307  001844  6FD8               	movwf	(_mes+1)& (0+255),b
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;unmc_rtcc_02.c: 97: anio=anio_d*10+anio_u;
  8311  001846  0100               	movlb	0	; () banked
  8312  001848  51DB               	movf	_anio_d& (0+255),w,b
  8313  00184A  0D0A               	mullw	10
  8314  00184C  0100               	movlb	0	; () banked
  8315  00184E  51DC               	movf	_anio_u& (0+255),w,b
  8316  001850  24F3               	addwf	prodl,w,c
  8317  001852  0100               	movlb	0	; () banked
  8318  001854  6FCF               	movwf	_anio& (0+255),b
  8319  001856  0100               	movlb	0	; () banked
  8320  001858  0E00               	movlw	0
  8321  00185A  20F4               	addwfc	prodh,w,c
  8322  00185C  0100               	movlb	0	; () banked
  8323  00185E  6FD0               	movwf	(_anio+1)& (0+255),b
  8324                           
  8325                           ; BSR set to: 0
  8326  001860  0012               	return		;funcret
  8327  001862                     __end_of_Read_RTC:
  8328                           	opt stack 0
  8329                           tosu	equ	0xFFF
  8330                           tosh	equ	0xFFE
  8331                           tosl	equ	0xFFD
  8332                           pclath	equ	0xFFA
  8333                           tblptru	equ	0xFF8
  8334                           tblptrh	equ	0xFF7
  8335                           tblptrl	equ	0xFF6
  8336                           tablat	equ	0xFF5
  8337                           prodh	equ	0xFF4
  8338                           prodl	equ	0xFF3
  8339                           intcon	equ	0xFF2
  8340                           indf0	equ	0xFEF
  8341                           postinc0	equ	0xFEE
  8342                           fsr0h	equ	0xFEA
  8343                           fsr0l	equ	0xFE9
  8344                           wreg	equ	0xFE8
  8345                           postinc1	equ	0xFE6
  8346                           postdec1	equ	0xFE5
  8347                           fsr1h	equ	0xFE2
  8348                           fsr1l	equ	0xFE1
  8349                           indf2	equ	0xFDF
  8350                           postinc2	equ	0xFDE
  8351                           postdec2	equ	0xFDD
  8352                           fsr2h	equ	0xFDA
  8353                           fsr2l	equ	0xFD9
  8354                           status	equ	0xFD8
  8355                           
  8356 ;; *************** function _RtccReadTime *****************
  8357 ;; Defined at:
  8358 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  pTm             2    0[COMRAM] PTR struct .
  8361 ;;		 -> RtccTime(4), 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  rTD0            8   10[COMRAM] struct .
  8364 ;;  rTD1            8    2[COMRAM] struct .
  8365 ;; Return value:  Size  Location     Type
  8366 ;;		None               void
  8367 ;; Registers used:
  8368 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8375 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8377 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8378 ;;Total ram usage:       18 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_Read_RTC
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text47
  8388  0025F2                     __ptext47:
  8389                           	opt stack 0
  8390  0025F2                     _RtccReadTime:
  8391                           	opt stack 29
  8392  0025F2  0EFC               	movlw	252
  8393  0025F4  010F               	movlb	15	; () banked
  8394  0025F6  173F               	andwf	63,f,b	;volatile
  8395                           
  8396                           ; BSR set to: 15
  8397  0025F8  010F               	movlb	15	; () banked
  8398  0025FA  813F               	bsf	63,0,b	;volatile
  8399                           
  8400                           ; BSR set to: 15
  8401  0025FC  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  8402                           
  8403                           ; BSR set to: 15
  8404  002600  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  8405                           
  8406                           ; BSR set to: 15
  8407  002604  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  8408                           
  8409                           ; BSR set to: 15
  8410  002608  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  8411                           
  8412                           ; BSR set to: 15
  8413  00260C  0EFC               	movlw	252
  8414  00260E  010F               	movlb	15	; () banked
  8415  002610  173F               	andwf	63,f,b	;volatile
  8416  002612  010F               	movlb	15	; () banked
  8417  002614  813F               	bsf	63,0,b	;volatile
  8418                           
  8419                           ; BSR set to: 15
  8420  002616  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  8421                           
  8422                           ; BSR set to: 15
  8423  00261A  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  8424                           
  8425                           ; BSR set to: 15
  8426  00261E  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  8427                           
  8428                           ; BSR set to: 15
  8429  002622  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  8430                           
  8431                           ; BSR set to: 15
  8432  002626  5009               	movf	RtccReadTime@rTD1+6,w,c
  8433  002628  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  8434  00262A  A4D8               	btfss	status,2,c
  8435  00262C  D7E2               	goto	l3400
  8436                           
  8437                           ; BSR set to: 15
  8438                           
  8439                           ; BSR set to: 15
  8440  00262E  EE20 F003          	lfsr	2,3
  8441  002632  5001               	movf	RtccReadTime@pTm,w,c
  8442  002634  26D9               	addwf	fsr2l,f,c
  8443  002636  5002               	movf	RtccReadTime@pTm+1,w,c
  8444  002638  22DA               	addwfc	fsr2h,f,c
  8445  00263A  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  8446  00263E  EE20 F002          	lfsr	2,2
  8447  002642  5001               	movf	RtccReadTime@pTm,w,c
  8448  002644  26D9               	addwf	fsr2l,f,c
  8449  002646  5002               	movf	RtccReadTime@pTm+1,w,c
  8450  002648  22DA               	addwfc	fsr2h,f,c
  8451  00264A  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  8452  00264E  EE20 F001          	lfsr	2,1
  8453  002652  5001               	movf	RtccReadTime@pTm,w,c
  8454  002654  26D9               	addwf	fsr2l,f,c
  8455  002656  5002               	movf	RtccReadTime@pTm+1,w,c
  8456  002658  22DA               	addwfc	fsr2h,f,c
  8457  00265A  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  8458                           
  8459                           ; BSR set to: 15
  8460  00265E  0012               	return		;funcret
  8461  002660                     __end_of_RtccReadTime:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           indf0	equ	0xFEF
  8475                           postinc0	equ	0xFEE
  8476                           fsr0h	equ	0xFEA
  8477                           fsr0l	equ	0xFE9
  8478                           wreg	equ	0xFE8
  8479                           postinc1	equ	0xFE6
  8480                           postdec1	equ	0xFE5
  8481                           fsr1h	equ	0xFE2
  8482                           fsr1l	equ	0xFE1
  8483                           indf2	equ	0xFDF
  8484                           postinc2	equ	0xFDE
  8485                           postdec2	equ	0xFDD
  8486                           fsr2h	equ	0xFDA
  8487                           fsr2l	equ	0xFD9
  8488                           status	equ	0xFD8
  8489                           
  8490 ;; *************** function _RtccReadDate *****************
  8491 ;; Defined at:
  8492 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;  pDt             2    0[COMRAM] PTR struct .
  8495 ;;		 -> RtccDate(4), 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  rTD0            8   10[COMRAM] struct .
  8498 ;;  rTD1            8    2[COMRAM] struct .
  8499 ;; Return value:  Size  Location     Type
  8500 ;;		None               void
  8501 ;; Registers used:
  8502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8509 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8511 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8512 ;;Total ram usage:       18 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_Read_RTC
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text48
  8522  002220                     __ptext48:
  8523                           	opt stack 0
  8524  002220                     _RtccReadDate:
  8525                           	opt stack 29
  8526  002220  0EFC               	movlw	252
  8527  002222  010F               	movlb	15	; () banked
  8528  002224  173F               	andwf	63,f,b	;volatile
  8529  002226  0E03               	movlw	3
  8530  002228  010F               	movlb	15	; () banked
  8531  00222A  133F               	iorwf	63,f,b	;volatile
  8532                           
  8533                           ; BSR set to: 15
  8534  00222C  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  8535                           
  8536                           ; BSR set to: 15
  8537  002230  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  8538                           
  8539                           ; BSR set to: 15
  8540  002234  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  8541                           
  8542                           ; BSR set to: 15
  8543  002238  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  8544                           
  8545                           ; BSR set to: 15
  8546  00223C  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  8547                           
  8548                           ; BSR set to: 15
  8549  002240  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  8550  002244  0EFC               	movlw	252
  8551  002246  010F               	movlb	15	; () banked
  8552  002248  173F               	andwf	63,f,b	;volatile
  8553  00224A  0E03               	movlw	3
  8554  00224C  010F               	movlb	15	; () banked
  8555  00224E  133F               	iorwf	63,f,b	;volatile
  8556                           
  8557                           ; BSR set to: 15
  8558  002250  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  8559                           
  8560                           ; BSR set to: 15
  8561  002254  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  8562                           
  8563                           ; BSR set to: 15
  8564  002258  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  8565                           
  8566                           ; BSR set to: 15
  8567  00225C  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  8568                           
  8569                           ; BSR set to: 15
  8570  002260  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  8571                           
  8572                           ; BSR set to: 15
  8573  002264  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  8574  002268  5005               	movf	RtccReadDate@rTD1+2,w,c
  8575  00226A  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  8576  00226C  A4D8               	btfss	status,2,c
  8577  00226E  D7D8               	goto	l3426
  8578                           
  8579                           ; BSR set to: 15
  8580                           
  8581                           ; BSR set to: 15
  8582  002270  EE20 F001          	lfsr	2,1
  8583  002274  5001               	movf	RtccReadDate@pDt,w,c
  8584  002276  26D9               	addwf	fsr2l,f,c
  8585  002278  5002               	movf	RtccReadDate@pDt+1,w,c
  8586  00227A  22DA               	addwfc	fsr2h,f,c
  8587  00227C  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  8588  002280  EE20 F002          	lfsr	2,2
  8589  002284  5001               	movf	RtccReadDate@pDt,w,c
  8590  002286  26D9               	addwf	fsr2l,f,c
  8591  002288  5002               	movf	RtccReadDate@pDt+1,w,c
  8592  00228A  22DA               	addwfc	fsr2h,f,c
  8593  00228C  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  8594                           
  8595                           ; BSR set to: 15
  8596  002290  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  8597  002294  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  8598  002298  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  8599                           
  8600                           ; BSR set to: 15
  8601  00229C  EE20 F003          	lfsr	2,3
  8602  0022A0  5001               	movf	RtccReadDate@pDt,w,c
  8603  0022A2  26D9               	addwf	fsr2l,f,c
  8604  0022A4  5002               	movf	RtccReadDate@pDt+1,w,c
  8605  0022A6  22DA               	addwfc	fsr2h,f,c
  8606  0022A8  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  8607                           
  8608                           ; BSR set to: 15
  8609  0022AC  0012               	return		;funcret
  8610  0022AE                     __end_of_RtccReadDate:
  8611                           	opt stack 0
  8612                           tosu	equ	0xFFF
  8613                           tosh	equ	0xFFE
  8614                           tosl	equ	0xFFD
  8615                           pclath	equ	0xFFA
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           indf0	equ	0xFEF
  8624                           postinc0	equ	0xFEE
  8625                           fsr0h	equ	0xFEA
  8626                           fsr0l	equ	0xFE9
  8627                           wreg	equ	0xFE8
  8628                           postinc1	equ	0xFE6
  8629                           postdec1	equ	0xFE5
  8630                           fsr1h	equ	0xFE2
  8631                           fsr1l	equ	0xFE1
  8632                           indf2	equ	0xFDF
  8633                           postinc2	equ	0xFDE
  8634                           postdec2	equ	0xFDD
  8635                           fsr2h	equ	0xFDA
  8636                           fsr2l	equ	0xFD9
  8637                           status	equ	0xFD8
  8638                           tosu	equ	0xFFF
  8639                           tosh	equ	0xFFE
  8640                           tosl	equ	0xFFD
  8641                           pclath	equ	0xFFA
  8642                           tblptru	equ	0xFF8
  8643                           tblptrh	equ	0xFF7
  8644                           tblptrl	equ	0xFF6
  8645                           tablat	equ	0xFF5
  8646                           prodh	equ	0xFF4
  8647                           prodl	equ	0xFF3
  8648                           intcon	equ	0xFF2
  8649                           indf0	equ	0xFEF
  8650                           postinc0	equ	0xFEE
  8651                           fsr0h	equ	0xFEA
  8652                           fsr0l	equ	0xFE9
  8653                           wreg	equ	0xFE8
  8654                           postinc1	equ	0xFE6
  8655                           postdec1	equ	0xFE5
  8656                           fsr1h	equ	0xFE2
  8657                           fsr1l	equ	0xFE1
  8658                           indf2	equ	0xFDF
  8659                           postinc2	equ	0xFDE
  8660                           postdec2	equ	0xFDD
  8661                           fsr2h	equ	0xFDA
  8662                           fsr2l	equ	0xFD9
  8663                           status	equ	0xFD8
  8664                           
  8665                           	psect	text49
  8666  000000                     __ptext49:
  8667                           	opt stack 0
  8668                           tosu	equ	0xFFF
  8669                           tosh	equ	0xFFE
  8670                           tosl	equ	0xFFD
  8671                           pclath	equ	0xFFA
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           intcon	equ	0xFF2
  8679                           indf0	equ	0xFEF
  8680                           postinc0	equ	0xFEE
  8681                           fsr0h	equ	0xFEA
  8682                           fsr0l	equ	0xFE9
  8683                           wreg	equ	0xFE8
  8684                           postinc1	equ	0xFE6
  8685                           postdec1	equ	0xFE5
  8686                           fsr1h	equ	0xFE2
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695                           	psect	rparam
  8696  0000                     tosu	equ	0xFFF
  8697                           tosh	equ	0xFFE
  8698                           tosl	equ	0xFFD
  8699                           pclath	equ	0xFFA
  8700                           tblptru	equ	0xFF8
  8701                           tblptrh	equ	0xFF7
  8702                           tblptrl	equ	0xFF6
  8703                           tablat	equ	0xFF5
  8704                           prodh	equ	0xFF4
  8705                           prodl	equ	0xFF3
  8706                           intcon	equ	0xFF2
  8707                           indf0	equ	0xFEF
  8708                           postinc0	equ	0xFEE
  8709                           fsr0h	equ	0xFEA
  8710                           fsr0l	equ	0xFE9
  8711                           wreg	equ	0xFE8
  8712                           postinc1	equ	0xFE6
  8713                           postdec1	equ	0xFE5
  8714                           fsr1h	equ	0xFE2
  8715                           fsr1l	equ	0xFE1
  8716                           indf2	equ	0xFDF
  8717                           postinc2	equ	0xFDE
  8718                           postdec2	equ	0xFDD
  8719                           fsr2h	equ	0xFDA
  8720                           fsr2l	equ	0xFD9
  8721                           status	equ	0xFD8


Data Sizes:
    Strings     232
    Constant    14
    Data        22
    BSS         114
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      95
    BANK0           160      0     136
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    doit$0	PTR unsigned char  size(2) Largest target is 3775
		 -> RAM(DATA[3775]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_31(CODE[5]), STR_30(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_8(CODE[5]), STR_2(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> imprimir_tecla@aux(COMRAM[20]), guardar_comando@aux(COMRAM[20]), buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    convertir_a_int_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_hora@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_minutos@valor(COMRAM[2]), cambiar_hora@valor(COMRAM[2]), 

    guardar_elemento_hora@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_hora(COMRAM[2]), tamanio_minutos(BANK0[2]), 

    guardar_elemento_hora@array	PTR unsigned char  size(2) Largest target is 3
		 -> minutes(BANK0[3]), hour(BANK0[3]), 

    convertir_a_int_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    convertir_a_int_fecha@valor	PTR int  size(2) Largest target is 2
		 -> cambiar_anio@valor(COMRAM[2]), cambiar_mes@valor(COMRAM[2]), cambiar_dia@valor(COMRAM[2]), 

    guardar_elemento_fecha@tamanio_array	PTR int  size(2) Largest target is 2
		 -> tamanio_dia(COMRAM[2]), tamanio_mes(COMRAM[2]), tamanio_anio(BANK0[2]), 

    guardar_elemento_fecha@array	PTR unsigned char  size(2) Largest target is 3
		 -> year(BANK0[3]), month(BANK0[3]), day(BANK0[3]), 

    sp_leer_teclado@doit	PTR unsigned char  size(2) Largest target is 0

    leer_teclado@doit	PTR FTN()PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), mostrar_guardar_password(), 

    guardar_tecla_presionada@letra	PTR unsigned char  size(2) Largest target is 2
		 -> STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[2]), 

    sp__doit	PTR unsigned char  size(2) Largest target is 0

    guardar_tecla_presionada@doit	PTR FTN(PTR unsigned char ,)PTR unsigned char  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), mostrar_guardar_password(), 

    validar_comando@candidato	PTR unsigned char  size(2) Largest target is 4
		 -> STR_16(CODE[4]), STR_11(CODE[4]), STR_9(CODE[4]), 

    validar_comando@validar	PTR int  size(2) Largest target is 2
		 -> main@validacion(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 22
		 -> minutes(BANK0[3]), hour(BANK0[3]), year(BANK0[3]), month(BANK0[3]), 
		 -> day(BANK0[3]), STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[2]), STR_23(CODE[2]), 
		 -> imprimir_tecla@aux(COMRAM[20]), STR_20(CODE[13]), STR_19(CODE[19]), STR_18(CODE[22]), 
		 -> STR_17(CODE[21]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[19]), 
		 -> STR_12(CODE[18]), STR_10(CODE[8]), STR_7(CODE[3]), STR_6(CODE[11]), 
		 -> STR_5(CODE[17]), ingresar_password@clear(COMRAM[16]), STR_4(CODE[4]), STR_3(CODE[3]), 
		 -> buffer2(BANK0[20]), 

    main@puntero_funcion	PTR void  size(2) Largest target is 2
		 -> cambiar_hora(), cambiar_minutos(), cambiar_dia(), cambiar_mes(), 
		 -> cambiar_anio(), ingresar_comando(), 

    mostrar_menu@titulo_menu	PTR unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[19]), STR_18(CODE[22]), STR_15(CODE[18]), STR_14(CODE[18]), 
		 -> STR_13(CODE[19]), 

    caratula$499	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[3]), 

    caratula@titulo	PTR unsigned char  size(2) Largest target is 8
		 -> STR_10(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_leer_teclado
    _mostrar_menu->_lcd_putrs
    _leer_teclado->_guardar_tecla_presionada
    _guardar_tecla_presionada->_ingresar_comando
    _mostrar_guardar_password->_imprimir_tecla
    _imprimir_tecla->_sprintf
    _ingresar_comando->_guardar_comando
    _guardar_comando->_sprintf
    _cambiar_minutos->_guardar_elemento_hora
    _cambiar_mes->_guardar_elemento_fecha
    _cambiar_hora->_guardar_elemento_hora
    _guardar_elemento_hora->_sprintf
    _convertir_a_int_hora->_atoi
    _cambiar_dia->_guardar_elemento_fecha
    _cambiar_anio->_guardar_elemento_fecha
    _guardar_elemento_fecha->_sprintf
    _convertir_a_int_fecha->_atoi
    _atoi->___wmul
    _ingresar_password->_lcd_putrs
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  195929
                                             72 COMRAM     9     9      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _ingresar_password
                         _lcd_gotoxy
                          _lcd_putrs
                       _leer_teclado
                       _mostrar_menu
                  _restaurar_comando
                    _validar_comando
 ---------------------------------------------------------------------------------
 (1) _validar_comando                                      9     5      4     518
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _mostrar_menu                                         2     0      2    6345
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _leer_teclado                                         7     3      4  161747
                                             65 COMRAM     7     3      4
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
           _guardar_tecla_presionada
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _guardar_tecla_presionada                             6     0      6   81032
                                             59 COMRAM     6     0      6
                       _cambiar_anio *
                        _cambiar_dia *
                       _cambiar_hora *
                        _cambiar_mes *
                    _cambiar_minutos *
                   _ingresar_comando *
                          _lcd_putrs
           _mostrar_guardar_password *
 ---------------------------------------------------------------------------------
 (2) _mostrar_guardar_password                             1     1      0    9606
                                             56 COMRAM     1     1      0
           _guardar_current_password
                     _imprimir_tecla
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _imprimir_tecla                                      21    21      0    6856
                                             35 COMRAM    21    21      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _guardar_current_password                             3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ingresar_comando                                     1     1      0    2782
                                             58 COMRAM     1     1      0
                    _guardar_comando
 ---------------------------------------------------------------------------------
 (3) _guardar_comando                                     23    23      0    2760
                                             35 COMRAM    23    23      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _cambiar_minutos                                      6     6      0   12606
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_mes                                          6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _cambiar_hora                                         6     6      0   12606
                                             42 COMRAM     6     6      0
                          _Write_RTC
               _convertir_a_int_hora
              _guardar_elemento_hora
                   _inicializar_hora
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (4) _inicializar_hora                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_hora                                7     3      4    3072
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_hora                                 4     0      4    1139
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _cambiar_dia                                          6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                  _inicializar_fecha
                         _lcd_gotoxy
                          _lcd_putrs
                  _restaurar_comando
 ---------------------------------------------------------------------------------
 (1) _restaurar_comando                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _inicializar_fecha                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cambiar_anio                                         6     6      0   12862
                                             42 COMRAM     6     6      0
                          _Write_RTC
              _convertir_a_int_fecha
             _guardar_elemento_fecha
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (4) _guardar_elemento_fecha                               7     3      4    3200
                                             35 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _convertir_a_int_fecha                                4     0      4    1267
                                             13 COMRAM     4     0      4
                               _atoi
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 7     5      2     839
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _ingresar_password                                   21    21      0    6879
                                             10 COMRAM    21    21      0
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                   _validar_password
 ---------------------------------------------------------------------------------
 (2) _validar_password                                     4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             4     2      2    9443
                                             35 COMRAM     4     2      2
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    2684
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    4094
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    2577
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1909
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _ingresar_password
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _validar_password
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _leer_teclado
     _cambiar_anio *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_dia *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_fecha
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_hora *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _inicializar_hora
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _restaurar_comando
     _cambiar_mes *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_fecha
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_fecha
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _cambiar_minutos *
       _Write_RTC
         _RtccWrOn
         _RtccWriteDate
           _RtccWrOn
         _RtccWriteTime
           _RtccWrOn
         ___awdiv
       _convertir_a_int_hora
         _atoi
           ___wmul
           _isdigit
       _guardar_elemento_hora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _guardar_tecla_presionada *
       _cambiar_anio *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_dia *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_fecha
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_hora *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _inicializar_hora
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _restaurar_comando
       _cambiar_mes *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_fecha
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_fecha
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _cambiar_minutos *
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
         _convertir_a_int_hora
           _atoi
             ___wmul
             _isdigit
         _guardar_elemento_hora
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _ingresar_comando *
         _guardar_comando
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_putrs *
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _mostrar_guardar_password *
         _guardar_current_password
         _imprimir_tecla
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _ingresar_comando *
       _guardar_comando
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _lcd_putrs *
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _mostrar_guardar_password *
       _guardar_current_password
       _imprimir_tecla
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
   _mostrar_menu
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _restaurar_comando
   _validar_comando

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      88       5       85.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     51      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E7       6        0.0%
DATA                 0      0      E7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 06 20:38:28 2016

                                  _a 0082                                    _b 0088  
                                  _c 008A                                    _i 008E  
                                  _j 0090                                    _k 0092  
                     ?_lcd_send_byte 0003        __size_of_convertir_a_int_hora 001E  
                       ___awdiv@sign 0006                  ___wmul@multiplicand 0003  
                        lcd_comand@d 0005                         __CFG_CP0$OFF 000000  
         ??_mostrar_guardar_password 0039                                  l240 28DC  
                                l241 28DE                                  l305 25F0  
                                l330 2136                                  l331 2132  
                                l315 2422                                  l334 2160  
                                l326 210E                                  l350 1932  
                                l335 215C                                  l327 210A  
                                l353 1950                                  l345 1910  
                                l354 194C                                  l346 190C  
                                l339 2180                                  l349 1936  
                                l358 1966                                  l712 1DF8  
                                l705 1F78                                  l493 1EC2  
                                l486 20E4                                  l479 202E  
                                l728 287A                                  l776 11CA  
                                _dia 00D1                                  _day 00B2  
                                _key 0054                                  _mes 00D7  
                                tosl 000FFD                                  wreg 000FE8  
                    RtccReadDate@pDt 0001                          lcd_gotoxy@x 0006  
                        lcd_gotoxy@y 0005                                 l1058 1D24  
                               l3022 1710                                 l3026 171C  
                               l3018 1704                                 l3050 21C8  
                               l3130 2826                                 l3210 2016  
                               l1435 26B2                                 l3052 21D2  
                               l3044 21B2                                 l1445 2752  
                               l3070 2214                                 l3062 21F8  
                               l3054 21DA                                 l3038 21A0  
                               l3142 25B4                                 l3134 2848  
                               l3206 2002                                 l3400 25F2  
                               l3066 2204                                 l3234 20B8  
                               l3218 204A                                 l3226 2080  
                               l3306 1D4E                                 l3314 1D84  
                               l3180 2A80                                 l3340 2354  
                               l3324 1DCC                                 l3350 236C  
                               l2702 2790                                 l3246 1E1A  
                               l3238 20CC                                 l3344 235C  
                               l2720 2A02                                 l3520 1AD0  
                               l3512 1AA8                                 l3264 1E96  
                               l3256 1E58                                 l3328 1DE0  
                               l3426 2220                                 l2810 10F4  
                               l3194 1FC2                                 l3282 1F0C  
                               l2740 2688                                 l2820 111C  
                               l2804 10CC                                 l3372 22EE  
                               l3540 1B3E                                 l3508 1A94  
                               l3268 1EAA                                 l3188 1F94  
                               l3276 1EDE                                 l2902 19BE  
                               l3358 2380                                 l3374 22F4  
                               l3526 1AF8                                 l3518 1AC0  
                               l3294 1F4C                                 l3710 133C  
                               l2912 19FC                                 l2736 2676  
                               l2760 2730                                 l2832 1168  
                               l2824 1140                                 l2816 1110  
                               l2808 10D2                                 l3480 1C4C  
                               l3376 2304                                 l3368 22C2  
                               l3544 1B52                                 l3704 131E  
                               l2658 2A92                                 l2770 26BE  
                               l2738 2680                                 l2834 1172  
                               l3378 2314                                 l3298 1F60  
                               l3730 13B0                                 l2908 19E8  
                               l2684 29D2                                 l2692 2760  
                               l2748 26A6                                 l2764 2746  
                               l2756 271E                                 l2852 11D0  
                               l2844 11A0                                 l2828 1144  
                               l2860 1230                                 l3548 1B6A  
                               l3660 23C8                                 l3716 135C  
                               l2950 1A74                                 l2918 1A18  
                               l2686 29D8                                 l2694 276C  
                               l2774 26E8                                 l2758 2728  
                               l2846 11A8                                 l2838 117E  
                               l2862 124C                                 l2790 1034  
                               l3478 1C42                                 l2870 1C62  
                               l3654 196E                                 l2696 2778  
                               l2792 104A                                 l2784 101C  
                               l2880 1CA2                                 l3664 2408  
                               l3752 1422                                 l3744 13F6  
                               l3736 13D0                                 l2970 1644  
                               l2954 1A80                                 l2946 1A68  
                               l2698 2784                                 l2858 1224  
                               l2786 102A                                 l2778 1002  
                               l3666 240E                                 l3754 1428  
                               l3690 12CA                                 l3682 1298  
                               l3674 126E                                 l2980 1692  
                               l2796 1068                                 l2884 1CB6  
                               l2868 1C5C                                 l3748 140A  
                               l2886 1CEC                                 l2976 167E  
                               l2888 1CF2                                 l2986 16AE  
                               STR_1 0F95                                 STR_2 0FA4  
                               STR_3 0FE8                                 STR_4 0FE0  
                               STR_5 0F84                                 STR_6 0FC0  
                               STR_7 0F37                                 STR_8 0FD3  
                               STR_9 0FE4                      _guardar_comando 2582  
                  ?_inicializar_hora 0001                                 u1600 247E  
                               u2400 1E6E                                 u3040 1434  
                               u3050 1436                                 u3107 1DE6  
                               u1540 2430                                 u2340 2090  
                               u3117 201C                                 u3127 20D2  
                               u1560 2448                                 u1720 26DE  
                               u2440 1F1C                                 u3137 1EB0  
                               u1618 2480                                 u1730 2708  
                               u2290 1FD2                                 u3147 1B58  
                               u1580 2462                                 u3157 2A82  
                               u3077 1410                                 u1558 2432  
                               u3167 2A94                                 u1727 26D4  
                               u3087 1974                                 u1737 26FE  
                               u3097 1F66                                 u1578 244A  
                               u2490 1D9A                                 u2618 20F6  
                               u1598 2464                                 u2648 211E  
                               u2770 1B0C                                 u2678 2148  
                               u2848 191C           guardar_elemento_hora@array 0024  
                   ?_lcd_send_nibble 0001           guardar_elemento_hora@tecla 002A  
                               _anio 00CF                                 _flag 02F8  
                               _atoi 1C5A                   ??_inicializar_hora 0001  
                               _main 125C                                 _hora 00D5  
                               _hour 00B5                                 _year 00BE  
                               fsr0h 000FEA                                 indf0 000FEF  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_T1DIG$ON 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0000                        __CFG_IESO$OFF 000000  
                   RtccReadDate@rTD0 000B                     RtccReadDate@rTD1 0003  
                       ___param_bank 000010                      RtccReadTime@pTm 0001  
                      cambiar_anio@i 002D                 __size_of_cambiar_dia 00B6  
                      cambiar_hora@i 002D                 __size_of_cambiar_mes 00B6  
                  _inicializar_fecha 2920                          _Delay1KTCYx 2A7E  
                      __CFG_PLLDIV$1 000000               ?_convertir_a_int_fecha 000E  
                              ?_atoi 0007                                ?_main 0001  
                    __end_of___awdiv 2220                   ?_inicializar_fecha 0001  
                              STR_10 0FCB                                STR_11 0FD8  
                              STR_12 0F28                                STR_20 0FB3  
                              STR_21 0FD3                                STR_13 0F4D  
                              STR_30 0FD3                                STR_22 0FD3  
                              STR_14 0F72                                STR_31 0FD3  
                              STR_23 0FED                                STR_15 0F60  
                              STR_24 0FEF                                STR_16 0FDC  
                              STR_25 0FF1                                STR_17 0F25  
                              STR_26 0FF3                                STR_18 0F0F  
                              STR_27 0FED                                STR_19 0F3A  
                              STR_28 0FEB                                STR_29 0FF5  
              __size_of_Delay100TCYx 0012                      ___awdiv@divisor 0003  
                    __end_of___lwdiv 26BC                      __end_of___lwmod 275C  
                  _restaurar_comando 29A2                     ?_validar_comando 0001  
                    ___awdiv@counter 0005                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                      ?_leer_teclado 0042                   ?_restaurar_comando 0001  
                     __CFG_FCMEN$OFF 000000                                _Setup 27A8  
                ??_inicializar_fecha 0001                       _ocultar_teclas 0094  
                    __end_of_dpowers 0F0B                                _mes_d 00E2  
                              _mes_u 00E3                      __end_of_isdigit 2A0C  
                              _month 00BB                                atoi@a 000C  
                              atoi@s 0007                                main@i 004E  
                     __pbitbssCOMRAM 02F8                                pclath 000FFA  
                              tablat 000FF5                  ??_restaurar_comando 0001  
                       lcd_putrs@ptr 0009                                status 000FD8  
                    __end_of_sprintf 125C                    validar_password@i 0003  
            __CFG_DSWDTOSC$INTOSCREF 000000                      __initialization 287C  
                       _Delay100TCYx 2A90            __end_of_inicializar_fecha 294E  
                       __end_of_atoi 1D2E                         __end_of_main 144C  
                    ??_lcd_send_byte 0004                     RtccReadTime@rTD0 000B  
                   RtccReadTime@rTD1 0003                     __end_of_Read_RTC 1862  
           _guardar_current_password 2836            __size_of_ingresar_comando 000A  
          __end_of_restaurar_comando 29C6                    cambiar_anio@tecla 002C  
              __size_of_cambiar_anio 00CA                    cambiar_anio@valor 002F  
              __size_of_cambiar_hora 00B6                               ??_atoi 0009  
                             ??_main 0049                        __activetblptr 000002  
                     ??_leer_teclado 0046              __end_of_guardar_comando 25F2  
                   __end_of_RtccWrOn 2AB4                               ?_Setup 0001  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _EECON2 000FA7                               _ANCON0 000F48  
                             _ANCON1 000F49                     ___awdiv@dividend 0001  
                     __CFG_WDTEN$OFF 000000                     RtccWriteDate@pDt 0001  
                             _RTCCFG 000F3F                       __CFG_WPCFG$OFF 000000  
                   __end_of_caratula 1C5A                 cambiar_minutos@tecla 002C  
                     __CFG_WPDIS$OFF 000000                 cambiar_minutos@valor 002F  
                     __CFG_XINST$OFF 000000                         _cambiar_anio 1DFA  
                       _cambiar_hora 1EC4                     __end_of_lcd_init 23AE  
                   __end_of_lcd_putc 27A8                    ?_validar_password 0001  
                             ___wmul 297A                            ??___awdiv 0005  
                     __CFG_STVREN$ON 000000                               _diasem 00D3  
                             _anio_d 00DB                               _anio_u 00DC  
                          ??___lwdiv 0005                            ??___lwmod 000C  
                 ??_validar_password 0001                               _hora_d 00E0  
                             _hora_u 00E1                               clear_0 2882  
                             clear_1 2890                     ___awdiv@quotient 0007  
                             _minuto 00D9     __end_of_mostrar_guardar_password 297A  
                  cambiar_hora@tecla 002C                __end_of_RtccWriteDate 1728  
                  cambiar_hora@valor 002F                __end_of_RtccWriteTime 1A8C  
                   RtccWriteTime@pTm 0001              ??_guardar_elemento_hora 0028  
           __size_of_cambiar_minutos 00CC             _guardar_tecla_presionada 20E6  
                          ??_isdigit 0001                     ??_imprimir_tecla 0024  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                          ??_sprintf 0017                           __accesstop 0060  
            __end_of__initialization 28B6                   __size_of_Write_RTC 0196  
                      ___rparam_used 000001                         _caratula$499 0026  
                     __pcstackCOMRAM 0001                        __end_of_Setup 27F0  
         __size_of_inicializar_fecha 002E                         __pidataBANK0 2A68  
                    __CFG_DSWDTPS$G2 000000           __size_of_restaurar_comando 0024  
                   leer_teclado@doit 0044                  leer_teclado@ocultar 0042  
                    __CFG_OSC$INTOSC 000000                     ?_guardar_comando 0001  
                            ??_Setup 000E                    lcd_gotoxy@address 0007  
                 __size_of_lcd_putrs 0054         __end_of_convertir_a_int_hora 2A4A  
                       sprintf@width 0021                           __pbssBANK0 0060  
                          ?_Read_RTC 0001                      _tamanio_comando 0098  
                         _dia_semana 00DD            RtccWriteTime@tempHourWDay 000A  
                    _tamanio_minutos 00C3                 __end_of_leer_teclado 1980  
                          ?_RtccWrOn 0001                       lcd_send_byte@n 0003  
            ??_convertir_a_int_fecha 0012                              ?___wmul 0001  
                      ?_RtccReadDate 0001            __size_of_inicializar_hora 0020  
                      ?_RtccReadTime 0001              mostrar_menu@titulo_menu 000B  
                   _ingresar_comando 2AC2                         ?_Delay1KTCYx 0001  
                 guardar_comando@aux 0026                    __end_of_Write_RTC 15E2  
                         _lcd_comand 2AB4                            ?_caratula 0024  
                         _lcd_gotoxy 29C6                              _RTCVALH 000F99  
                            _RTCVALL 000F98                            ?_lcd_init 0001  
                  ??_cambiar_minutos 002B                            ?_lcd_putc 0001  
                         ??_Read_RTC 0013    __size_of_mostrar_guardar_password 002C  
          ?_mostrar_guardar_password 0001           ??_guardar_current_password 0001  
                            __Hparam 0000                        ??_cambiar_dia 002B  
                      ??_cambiar_mes 002B                              __Lparam 0000  
           __size_of_lcd_send_nibble 0076                           ??_RtccWrOn 0001  
               guardar_comando@tecla 003A                       ??_RtccReadDate 0003  
                         _autorizado 0086                       ??_RtccReadTime 0003  
                            ___awdiv 218A                    __end_of_lcd_putrs 2710  
                    __size_of___wmul 0028                              ___lwdiv 2660  
                            ___lwmod 2710                         __psmallconst 0F00  
                        _RtccTimeVal 007E                              __pcinit 287C  
                            _fecha_d 00DE                              _fecha_u 00DF  
                            __ramtop 0F00        mostrar_guardar_password@tecla 0039  
                            __ptext0 125C                              __ptext1 23AE  
                            __ptext2 28F2                              __ptext3 1862  
                            __ptext4 20E6                              __ptext5 2AC2  
                            __ptext6 1EC4                              __ptext7 1D2E  
                            __ptext8 1F7A                              __ptext9 2030  
                            _buffer2 009A                              _comando 00CB  
                          _T1CONbits 000FCD                              _dpowers 0F01  
                            _isdigit 29EA                       main@validacion 0050  
                         ??_caratula 0026                              _minutes 00B8  
                            _segundo 0096                              _sprintf 0FF8  
                         ??_lcd_init 0005                           ??_lcd_putc 0008  
               end_of_initialization 28B6           convertir_a_int_fecha@array 000E  
           __size_of_validar_comando 0076             ??_guardar_elemento_fecha 0028  
         convertir_a_int_fecha@valor 0010                 lcd_send_byte@address 0004  
                      __Lmediumconst 0000                        ?_mostrar_menu 000B  
                            postdec1 000FE5                              postdec2 000FDD  
         ??_guardar_tecla_presionada 0042                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
              __end_of_lcd_send_byte 28F2                 _convertir_a_int_hora 2A2C  
                __end_of_cambiar_dia 2030                  __end_of_cambiar_mes 20E6  
                          _PORTAbits 000F80                            _PORTCbits 000F82  
                   __CFG_DSBOREN$OFF 000000                          ?_lcd_comand 0001  
     __size_of_guardar_elemento_hora 0074                     __CFG_CPUDIV$OSC1 000000  
      __end_of_guardar_elemento_hora 250E                   ingresar_password@i 001E  
                          _TRISBbits 000F93                          ?_lcd_gotoxy 0005  
          __size_of_validar_password 0080            convertir_a_int_hora@array 000E  
          convertir_a_int_hora@valor 0010                      _LCD_INIT_STRING 0F0B  
                main@puntero_funcion 004C                     validar_comando@i 0008  
              __size_of_leer_teclado 011E                     _current_password 0078  
                     ??_mostrar_menu 000D                     __CFG_IOL1WAY$OFF 000000  
          RtccWriteDate@tempDayMonth 000A                  __CFG_MSSP7B_EN$MSK7 000000  
                       cambiar_dia@i 002D                        leer_teclado@i 0047  
                       cambiar_mes@i 002D                     Delay100TCYx@unit 0001  
                   _inicializar_hora 2A0C                ?_convertir_a_int_hora 000E  
                     __end_of___wmul 29A2            RtccWriteDate@tempHourWDay 000C  
                  ??_lcd_send_nibble 0001                 __size_of_Delay1KTCYx 0012  
                   __CFG_DSWDTEN$OFF 000000                     cambiar_dia@tecla 002C  
                   cambiar_dia@valor 002F                  start_initialization 287C  
                 main@ocultar_teclas 004A                         _leer_teclado 1862  
               __end_of_RtccReadDate 22AE                 __end_of_RtccReadTime 2660  
           __end_of_ingresar_comando 2ACC      __size_of_guardar_elemento_fecha 0074  
               RtccWriteTime@wasAlrm 0006                 RtccWriteTime@wasWrEn 0007  
   __end_of_guardar_current_password 287C        guardar_current_password@valor 0003  
             __size_of_RtccWriteDate 0146                      RtccWriteDate@di 0003  
             __size_of_RtccWriteTime 010C                    __size_of_Read_RTC 013A  
                  ??_validar_comando 0005                          _cambiar_dia 1F7A  
                __size_of_lcd_comand 000E                          _cambiar_mes 2030  
                   cambiar_mes@tecla 002C                  __size_of_lcd_gotoxy 0024  
                   cambiar_mes@valor 002F                             ??___wmul 0005  
                        __pdataBANK0 00C5                    __size_of_RtccWrOn 0012  
                    RtccWriteTime@di 0003                     __CFG_LPT1OSC$OFF 000000  
     __size_of_convertir_a_int_fecha 001E        __end_of_convertir_a_int_fecha 2A68  
                    _cambiar_minutos 1D2E                          _ALRMCFGbits 000F91  
            __end_of_LCD_INIT_STRING 0F0F                          __pbssCOMRAM 0052  
                          _Write_RTC 144C                     cambiar_minutos@i 002D  
                       _isdigit$2510 0002                    __size_of_caratula 00D6  
                    Delay1KTCYx@unit 0001             __size_of_guardar_comando 0070  
                  __size_of_lcd_init 0080                          sprintf@flag 001D  
                  __size_of_lcd_putc 004C                          sprintf@prec 0020  
            __size_of_imprimir_tecla 0046                            __pnvBANK0 00DB  
                   _tamanio_password 0052                     ___lwdiv@dividend 0001  
                      ?_Delay100TCYx 0001     __end_of_guardar_tecla_presionada 218A  
             ??_convertir_a_int_hora 0012                             ?___awdiv 0001  
                           ?___lwdiv 0001                             ?___lwmod 0008  
                          _encendida 008C               _guardar_elemento_fecha 250E  
            RtccWriteTime@tempMinSec 0008                            _lcd_putrs 26BC  
               __end_of_mostrar_menu 2920                        _RtccWriteDate 15E2  
                        __smallconst 0F00                        _RtccWriteTime 1980  
                           ?_isdigit 0001                 __CFG_RTCOSC$T1OSCREF 000000  
                   _validar_password 22AE                       __size_of_Setup 0048  
                         ?_Write_RTC 0001                     ___lwdiv@quotient 0005  
                           ?_sprintf 000D                    _ingresar_password 1A8C  
                   _RtccAlrmTimeDate 0060                       ___wmul@product 0005  
                           _LATAbits 000F89                             _LATBbits 000F8A  
                 ?_ingresar_password 0001                             _PIE3bits 000FA3  
                          _segundo_d 00E6                       ??_Delay100TCYx 0001  
                          _segundo_u 00E7                        ?_cambiar_anio 0001  
                      ?_cambiar_hora 0001              __end_of_cambiar_minutos 1DFA  
                   __CFG_WDTPS$32768 000000                  ??_ingresar_password 000B  
                 RtccWriteDate@wasOn 0005            guardar_tecla_presionada@i 003E  
           validar_comando@candidato 0001                   _Rtcc_read_TimeDate 0070  
                     ?_RtccWriteDate 0001                           ?_lcd_putrs 0009  
                  ___wmul@multiplier 0001                       ?_RtccWriteTime 0001  
  __size_of_guardar_current_password 0046                       caratula@titulo 0024  
          ?_guardar_current_password 0001                            lcd_init@i 0005  
              __size_of_RtccReadDate 008E                         ??_lcd_comand 0005  
                          lcd_putc@c 0008                __size_of_RtccReadTime 006E  
                imprimir_tecla@tecla 0038                         ??_lcd_gotoxy 0006  
          __end_of_ingresar_password 1B84             _mostrar_guardar_password 294E  
           __end_of_inicializar_hora 2A2C                            copy_data0 28AA  
                           _Read_RTC 1728                         _tamanio_anio 00C1  
                       _tamanio_hora 005B                       ??_cambiar_anio 002B  
                    _lcd_send_nibble 2424                             __Hrparam 0000  
                     ??_cambiar_hora 002B                             _RtccDate 0055  
                           __Lrparam 0000                    ??_guardar_comando 0024  
                           _RtccTime 00AE                             _RtccWrOn 2AA2  
                 __end_of_lcd_comand 2AC2                   __end_of_lcd_gotoxy 29EA  
      guardar_tecla_presionada@letra 003C                         _RtccReadDate 2220  
                   __size_of___awdiv 0096                         _RtccReadTime 25F2  
                   __size_of___lwdiv 005C                  ingresar_comando@key 003B  
                   __size_of___lwmod 004C                         _RtccTimeDate 0068  
                         sprintf@val 001E                             _caratula 1B84  
                           _activida 0084                     __size_of_isdigit 0022  
                    ___lwdiv@divisor 0003                          ??_Write_RTC 000E  
                    ___lwdiv@counter 0007    __size_of_guardar_tecla_presionada 00A4  
                           __ptext10 1DFA                             __ptext11 294E  
                           __ptext20 250E                             __ptext12 27F0  
                           __ptext21 2A4A                             __ptext13 2836  
                           __ptext30 2660                             __ptext22 1C5A  
                           __ptext14 2582                             __ptext31 26BC  
                           __ptext23 1A8C                             __ptext15 2A0C  
                           __ptext40 2A90                             __ptext32 275C  
                           __ptext24 22AE                             __ptext16 249A  
                           __ptext41 144C                             __ptext33 29C6  
                           __ptext25 1B84                             __ptext17 2A2C  
                           __ptext42 218A                             __ptext34 27A8  
                           __ptext26 0FF8                             __ptext18 29A2  
                           __ptext43 1980                             __ptext35 232E  
                           __ptext27 29EA                             __ptext19 2920  
                           __ptext44 15E2                             __ptext36 2A7E  
                           __ptext28 297A                             __ptext45 2AA2  
                           __ptext37 2AB4                             __ptext29 2710  
                           __ptext46 1728                             __ptext38 28C0  
                           __ptext47 25F2                             __ptext39 2424  
                           __ptext48 2220                             __ptext49 0000  
          ?_guardar_tecla_presionada 003C                      _validar_comando 23AE  
              _guardar_elemento_hora 249A                             _lcd_init 232E  
                           _lcd_putc 275C                     __size_of_sprintf 0264  
                  ?_ingresar_comando 0001               __size_of_lcd_send_byte 0032  
                     _imprimir_tecla 27F0                        __size_of_atoi 00D4  
                      __size_of_main 01F0                   ??_ingresar_comando 003B  
                           _minuto_d 00E4                             _minuto_u 00E5  
                           _password 00C5                         ?_cambiar_dia 0001  
                       ?_cambiar_mes 0001                     ?_cambiar_minutos 0001  
              __size_of_mostrar_menu 002E                             atoi@sign 000B  
                      ??_Delay1KTCYx 0001                      ??_RtccWriteDate 0004  
                    ??_RtccWriteTime 0004                          ??_lcd_putrs 000B  
                        _OSCTUNEbits 000F9B                           _INTCONbits 000FF2  
                        _tamanio_dia 0059                          _tamanio_mes 005D  
                 RtccWriteTime@wasOn 0005                 __end_of_Delay100TCYx 2AA2  
                           isdigit@c 0003         guardar_tecla_presionada@doit 0040  
         __size_of_ingresar_password 00F8               __end_of_imprimir_tecla 2836  
                          sprintf@ap 001B              __end_of_lcd_send_nibble 249A  
                          sprintf@sp 000D                     ___lwmod@dividend 0008  
                       _mostrar_menu 28F2   guardar_elemento_hora@tamanio_array 0026  
                         _OSCCONbits 000FD3              ?_guardar_elemento_fecha 0024  
           __end_of_validar_password 232E                RtccWriteDate@tempYear 0007  
        guardar_elemento_fecha@array 0024                    imprimir_tecla@aux 0024  
        guardar_elemento_fecha@tecla 002A                        _lcd_send_byte 28C0  
                         _RTCCFGbits 000F3F  guardar_elemento_fecha@tamanio_array 0026  
            __end_of_validar_comando 2424                _convertir_a_int_fecha 2A4A  
             validar_comando@validar 0003                             sprintf@c 0023  
                           sprintf@f 000F                      ___lwmod@divisor 000A  
                __end_of_Delay1KTCYx 2A90                      ___lwmod@counter 000C  
               __end_of_cambiar_anio 1EC4                 RtccWriteDate@wasAlrm 0006  
               __end_of_cambiar_hora 1F7A                 RtccWriteDate@wasWrEn 0009  
             ?_guardar_elemento_hora 0024               ingresar_password@i_537 001C  
                    ?_imprimir_tecla 0001               ingresar_password@clear 000C  
     __end_of_guardar_elemento_fecha 2582                lcd_send_nibble@nibble 0002  
